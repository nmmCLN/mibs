#
# PySNMP MIB module ADVA-FSPR7-DEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/ADVA-FSPR7-DEF-MIB
# Produced by pysmi-1.1.10 at Fri Oct 27 06:55:43 2023
# On host fv-az1114-438 platform Linux version 6.2.0-1015-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
entityCrossConnFromPortNo, entityCrsOptLineToIndexNo2, entityDcnClassName, entityOptLineClassName, entityCrsOptLineClassName, entityShelfConnExtNo, entityCrsOptLineToIndexNo4, entityCrossConnFromExtNo, entityDcnSlotNo, entityEqptShelfNo, entityContainerSlotNo, entityConnectionClassName, entityFfpPortNo, entityContainerPortNo, entityCrsOptLineFromClassName, entityFfpShelfNo, entityTerminPointIndexNo1, entityCrossConnToSlotNo, entityDcnShelfNo, entityShelfConnSlotNo, entityCrossConnFromSlotNo, entityCrossConnFromClassName, entityDcnPortNo, entityExternalPortShelfNo, entityFfpSlotNo, entityTerminPointIndexNo3, entityContainerExtNo, entityCrossDcnSlotNo, entityFfpExtNo, entityCrsOptLineFromIndexNo2, entityFacilityPortNo, entityExternalPortClassName, entityOpticalMuxExtNo, entityShelfConnPortNo, entityCrsOptLineToIndexNo1, entityCrsOptLineFromIndexNo3, entityExternalPortPortNo, entityCrossDcnPortNo, entityOpticalMuxClassName, entityTerminPointIndexNo2, entityFfpClassName, entityTerminPointClassName, entityOpticalMuxSlotNo, entityContainerShelfNo, entityCrossConnFromShelfNo, entityShelfConnShelfNo, entityCrossConnToShelfNo, entityCrsOptLineToClassName, entityCrsOptLineFromIndexNo4, entityEqptExtNo, entityEqptSlotNo, entityCrsOptLineToIndexNo3, entityDcnExtNo, entityExternalPortSlotNo, entityExternalPortExtNo, entityOpticalMuxShelfNo, entityCrossConnClassName, entityTerminPointIndexNo4, entityFacilitySlotNo, entityShelfConnClassName, entityCrossConnToExtNo, entityFacilityExtNo, entityCrossDcnShelfNo, entityCrossConnToClassName, entityCrsOptLineFromIndexNo1, entityEqptPortNo, entityCrossDcnExtNo, entityCrossDcnClassName, entityCrossConnToPortNo, entityOpticalMuxPortNo, entityFacilityClassName, entityOptLineIndexNo1, entityFacilityShelfNo, entityEqptClassName, entityContainerClassName = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityCrossConnFromPortNo", "entityCrsOptLineToIndexNo2", "entityDcnClassName", "entityOptLineClassName", "entityCrsOptLineClassName", "entityShelfConnExtNo", "entityCrsOptLineToIndexNo4", "entityCrossConnFromExtNo", "entityDcnSlotNo", "entityEqptShelfNo", "entityContainerSlotNo", "entityConnectionClassName", "entityFfpPortNo", "entityContainerPortNo", "entityCrsOptLineFromClassName", "entityFfpShelfNo", "entityTerminPointIndexNo1", "entityCrossConnToSlotNo", "entityDcnShelfNo", "entityShelfConnSlotNo", "entityCrossConnFromSlotNo", "entityCrossConnFromClassName", "entityDcnPortNo", "entityExternalPortShelfNo", "entityFfpSlotNo", "entityTerminPointIndexNo3", "entityContainerExtNo", "entityCrossDcnSlotNo", "entityFfpExtNo", "entityCrsOptLineFromIndexNo2", "entityFacilityPortNo", "entityExternalPortClassName", "entityOpticalMuxExtNo", "entityShelfConnPortNo", "entityCrsOptLineToIndexNo1", "entityCrsOptLineFromIndexNo3", "entityExternalPortPortNo", "entityCrossDcnPortNo", "entityOpticalMuxClassName", "entityTerminPointIndexNo2", "entityFfpClassName", "entityTerminPointClassName", "entityOpticalMuxSlotNo", "entityContainerShelfNo", "entityCrossConnFromShelfNo", "entityShelfConnShelfNo", "entityCrossConnToShelfNo", "entityCrsOptLineToClassName", "entityCrsOptLineFromIndexNo4", "entityEqptExtNo", "entityEqptSlotNo", "entityCrsOptLineToIndexNo3", "entityDcnExtNo", "entityExternalPortSlotNo", "entityExternalPortExtNo", "entityOpticalMuxShelfNo", "entityCrossConnClassName", "entityTerminPointIndexNo4", "entityFacilitySlotNo", "entityShelfConnClassName", "entityCrossConnToExtNo", "entityFacilityExtNo", "entityCrossDcnShelfNo", "entityCrossConnToClassName", "entityCrsOptLineFromIndexNo1", "entityEqptPortNo", "entityCrossDcnExtNo", "entityCrossDcnClassName", "entityCrossConnToPortNo", "entityOpticalMuxPortNo", "entityFacilityClassName", "entityOptLineIndexNo1", "entityFacilityShelfNo", "entityEqptClassName", "entityContainerClassName")
FspR7EdfaOutputPowerRating, FspR7Mapping, FspR7ErrorFwdMode, FspR7OscUsage, FfpType, FspR7OpticalFiberType, FspR7OpticalBand, FspR7Optimize, FspR7TypeConnection, FspR7OpticalSubBand, FspR7GccUsage, FspR7MuxMethod, FspR7IPv6Type, FspR7LLDPNeighbors, FspR7MaxBitErrorRate, FspR7OtdrPeriod, FspR7ChannelIdentifier, FspR7VoaMode, FspR7TxOffOnTm, FspR7ProtectionType, FspR7CdPostCompensationRange, FspR7IpType, FspR7PlugType, FspR7Conn, FspR7MonLevel, FspR7Gain, FspR7TimDetMode, FspR7TypeCrs, FspR7LaneGroupInventory, FspR7PortBehaviour, FspR7Bitrate, FspR7LineCoding, FspR7SnmpLongString, FspR7TransmissionMode, FspR7Unsigned32Caps, FspR7DispersionCompensation, FspR7SnmpHexString, FspR7DeploymentScenario, FspR7FrameFormat, FspR7CpAuthType, FspR7AdminState, FspR7CdCompensationRange, FspR7DisableEnable, FspR7PathNode, FspR7Topology, FspR7BidirectionalChannel, FspR7CapInventory, FspR7InterfaceType, FspR7GainRange, FspR7LLDPScope, FspR7YesNo, FspR7TiltSet, FspR7ManualAuto, CryptoFspR7EncryptionCommunication, FspR7PlugDataRate, FspR7OpuPayloadType, FspR7ConnectorType, FspR7DispersionModes, FspR7PlugMode, FspR7LacpMode, FspR7BERThreshold, FspR7LagPortType, FspR7OpticalInterfaceReach, FspR7ApsFarEndModule, FspR7RlsAction, FspR7DmsrmtOperation, FspR7EnableDisable, FspR7FlowControlMode, FspR7OspfMode, FspR7FunctionCrs, FspR7OpticalGroup, FspR7CodeGain, FspR7TrafficDirection, FspR7InterfaceCrossover, FspR7FecType, FspR7Baund, FspR7PortMode, FspR7RowStatus, FspR7UntaggedFrames, FspR7InvertTelemetryInputLogic, FspR7IpMode, FspR7ChannelBandwidth, FspR7Acp, ApsRevertMode, FspR7Length, FspR7APSCommand, FspR7TelemetryOutput, FspR7LacpTimeout, FspR7LaserDelayTimer, ApsType, FspR7NumberOfChannels, FspR7PortRole, FspR7RoadmNumber, FspR7TerminationMode, FspR7DCFiberType, FspR7ChannelSpacing, FspR7DhcpServer, FspR7PsuOutputPower, FspR7ChannelRangeInventory, FspR7NoYes, FspR7FiberBrand, FspR7AlsMode, FspR7SingleFiberLocation, FspR7PmReset, FspR7SupplyType, FspR7XfpDecisionThres = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7EdfaOutputPowerRating", "FspR7Mapping", "FspR7ErrorFwdMode", "FspR7OscUsage", "FfpType", "FspR7OpticalFiberType", "FspR7OpticalBand", "FspR7Optimize", "FspR7TypeConnection", "FspR7OpticalSubBand", "FspR7GccUsage", "FspR7MuxMethod", "FspR7IPv6Type", "FspR7LLDPNeighbors", "FspR7MaxBitErrorRate", "FspR7OtdrPeriod", "FspR7ChannelIdentifier", "FspR7VoaMode", "FspR7TxOffOnTm", "FspR7ProtectionType", "FspR7CdPostCompensationRange", "FspR7IpType", "FspR7PlugType", "FspR7Conn", "FspR7MonLevel", "FspR7Gain", "FspR7TimDetMode", "FspR7TypeCrs", "FspR7LaneGroupInventory", "FspR7PortBehaviour", "FspR7Bitrate", "FspR7LineCoding", "FspR7SnmpLongString", "FspR7TransmissionMode", "FspR7Unsigned32Caps", "FspR7DispersionCompensation", "FspR7SnmpHexString", "FspR7DeploymentScenario", "FspR7FrameFormat", "FspR7CpAuthType", "FspR7AdminState", "FspR7CdCompensationRange", "FspR7DisableEnable", "FspR7PathNode", "FspR7Topology", "FspR7BidirectionalChannel", "FspR7CapInventory", "FspR7InterfaceType", "FspR7GainRange", "FspR7LLDPScope", "FspR7YesNo", "FspR7TiltSet", "FspR7ManualAuto", "CryptoFspR7EncryptionCommunication", "FspR7PlugDataRate", "FspR7OpuPayloadType", "FspR7ConnectorType", "FspR7DispersionModes", "FspR7PlugMode", "FspR7LacpMode", "FspR7BERThreshold", "FspR7LagPortType", "FspR7OpticalInterfaceReach", "FspR7ApsFarEndModule", "FspR7RlsAction", "FspR7DmsrmtOperation", "FspR7EnableDisable", "FspR7FlowControlMode", "FspR7OspfMode", "FspR7FunctionCrs", "FspR7OpticalGroup", "FspR7CodeGain", "FspR7TrafficDirection", "FspR7InterfaceCrossover", "FspR7FecType", "FspR7Baund", "FspR7PortMode", "FspR7RowStatus", "FspR7UntaggedFrames", "FspR7InvertTelemetryInputLogic", "FspR7IpMode", "FspR7ChannelBandwidth", "FspR7Acp", "ApsRevertMode", "FspR7Length", "FspR7APSCommand", "FspR7TelemetryOutput", "FspR7LacpTimeout", "FspR7LaserDelayTimer", "ApsType", "FspR7NumberOfChannels", "FspR7PortRole", "FspR7RoadmNumber", "FspR7TerminationMode", "FspR7DCFiberType", "FspR7ChannelSpacing", "FspR7DhcpServer", "FspR7PsuOutputPower", "FspR7ChannelRangeInventory", "FspR7NoYes", "FspR7FiberBrand", "FspR7AlsMode", "FspR7SingleFiberLocation", "FspR7PmReset", "FspR7SupplyType", "FspR7XfpDecisionThres")
FspR7EquipmentType, EnableState, fspR7, OhTerminationLevel, SonetTraceForm, OtnPayloadType, OtnTcmLevel, ApsHoldoffTime, LoopConfig, SonetTimingSource, TimMode, ApsDirection, EthDuplexMode, VirtualContainerType, ProtectionMech = mibBuilder.importSymbols("ADVA-MIB", "FspR7EquipmentType", "EnableState", "fspR7", "OhTerminationLevel", "SonetTraceForm", "OtnPayloadType", "OtnTcmLevel", "ApsHoldoffTime", "LoopConfig", "SonetTimingSource", "TimMode", "ApsDirection", "EthDuplexMode", "VirtualContainerType", "ProtectionMech")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, TimeTicks, IpAddress, Unsigned32, NotificationType, ModuleIdentity, Counter64, MibIdentifier, ObjectIdentity, Integer32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "TimeTicks", "IpAddress", "Unsigned32", "NotificationType", "ModuleIdentity", "Counter64", "MibIdentifier", "ObjectIdentity", "Integer32", "Bits", "Gauge32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
advaFspR7Def = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10))
advaFspR7Def.setRevisions(('2018-12-14 00:00', '2018-10-30 00:00', '2018-08-09 00:00', '2018-05-28 00:00', '2018-04-17 00:00', '2018-03-15 00:00', '2018-02-26 00:00', '2017-12-07 00:00', '2017-11-01 00:00', '2017-09-11 00:00', '2017-06-06 00:00', '2017-03-23 00:00', '2016-04-01 00:00', '2015-12-10 00:00', '2015-10-01 00:00', '2015-09-03 00:00', '2015-03-20 00:00', '2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))
if mibBuilder.loadTexts: advaFspR7Def.setLastUpdated('201812140000Z')
if mibBuilder.loadTexts: advaFspR7Def.setOrganization('ADVA Optical Networking')
managementDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3))
specificMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2))
eqptMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3))
facilityMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4))
dcnMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5))
opticalMuxMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6))
shelfConnMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7))
envMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8))
containerMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9))
opticalLineMgmtDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10))
performanceDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6))
performanceFacilityDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4))
performanceFacilityThresholdDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1))
featureSpecificDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7))
fiberMapDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1))
eciDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3))
changeServiceDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5))
protectionDef = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6))
crossConnectionDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionDefTable.setStatus('current')
crossConnectionDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionDefEntry.setStatus('current')
crossConnectionDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefRowStatus.setStatus('current')
crossConnectionDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefAdmin.setStatus('current')
crossConnectionDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefRedLineState.setStatus('current')
crossConnectionDefConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 4), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefConn.setStatus('current')
crossConnectionDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefAlias.setStatus('current')
crossConnectionDefPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 6), FspR7PathNode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefPathNode.setStatus('current')
crossConnectionDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefTunnelAid.setStatus('current')
crossConnectionDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 8), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefType.setStatus('current')
crossConnectionDefCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 6, 1, 9), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionDefCrsFunction.setStatus('current')
crossOpticalLineDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineDefTable.setStatus('current')
crossOpticalLineDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineDefEntry.setStatus('current')
crossOpticalLineDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefRowStatus.setStatus('current')
crossOpticalLineDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 2), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefRedLineState.setStatus('current')
crossOpticalLineDefConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 3), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefConn.setStatus('current')
crossOpticalLineDefCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 4), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefCrsType.setStatus('current')
crossOpticalLineDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefAlias.setStatus('current')
crossOpticalLineDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineDefTunnelAid.setStatus('current')
endOfCrossOpticalLineDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineDefTable.setStatus('current')
crossDcnDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnDefTable.setStatus('current')
crossDcnDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnDefEntry.setStatus('current')
crossDcnDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefRowStatus.setStatus('current')
crossDcnDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefType.setStatus('current')
crossDcnDefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefLink.setStatus('current')
crossDcnDefEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnDefEcc.setStatus('current')
endOfCrossDcnDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnDefTable.setStatus('current')
endOfSpecificMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmtDef.setStatus('current')
shelfDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1), )
if mibBuilder.loadTexts: shelfDefTable.setStatus('current')
shelfDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfDefEntry.setStatus('current')
shelfDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRowStatus.setStatus('current')
shelfDefPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 2), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefPsuOutputPower.setStatus('current')
shelfDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefType.setStatus('current')
shelfDefRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRack.setStatus('current')
shelfDefSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 5), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefSupply.setStatus('current')
shelfDefBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 6), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefBandProvision.setStatus('current')
shelfDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 7), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAdmin.setStatus('current')
shelfDefRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRackNumber.setStatus('current')
shelfDefRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefRackOrder.setStatus('current')
shelfDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAlias.setStatus('current')
shelfDefSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefSlot.setStatus('current')
shelfDefPowerSupplyProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 12), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefPowerSupplyProtection.setStatus('current')
shelfDefAirFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 13), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAirFilterClear.setStatus('current')
shelfDefAirFilterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('month').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDefAirFilterCycle.setStatus('current')
endOfShelfDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfDefTable.setStatus('current')
fanDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3), )
if mibBuilder.loadTexts: fanDefTable.setStatus('current')
fanDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanDefEntry.setStatus('current')
fanDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefRowStatus.setStatus('current')
fanDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefAdmin.setStatus('current')
fanDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefType.setStatus('current')
fanDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefAlias.setStatus('current')
fanDefOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 3, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDefOutputReset.setStatus('current')
endOfFanDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanDefTable.setStatus('current')
plugDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5), )
if mibBuilder.loadTexts: plugDefTable.setStatus('current')
plugDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugDefEntry.setStatus('current')
plugDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefRowStatus.setStatus('current')
plugDefConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 2), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefConnector.setStatus('current')
plugDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 3), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefType.setStatus('current')
plugDefReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefReach.setStatus('current')
plugDefLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLoopbackAttenuation.setStatus('current')
plugDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefTransmitChannel.setStatus('current')
plugDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefAlias.setStatus('current')
plugDefLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 8), FspR7LaneGroupInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLaneGroup.setStatus('current')
plugDefMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 9), FspR7PlugDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefMaxDataRate.setStatus('current')
plugDefThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 10), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefThirdPartyUsage.setStatus('current')
plugDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 11), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefAdmin.setStatus('current')
plugDefBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 12), FspR7BidirectionalChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefBidirectionalChannel.setStatus('current')
plugDefChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 13), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefChannelSpacingProvision.setStatus('current')
plugDefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 14), FspR7Length()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefLength.setStatus('current')
plugDefPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 15), FspR7PlugType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefPlugType.setStatus('current')
plugDefPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 5, 1, 16), FspR7PlugMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugDefPlugMode.setStatus('current')
endOfPlugDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugDefTable.setStatus('current')
moduleDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7), )
if mibBuilder.loadTexts: moduleDefTable.setStatus('current')
moduleDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleDefEntry.setStatus('current')
moduleDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRowStatus.setStatus('current')
moduleDefPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 2), FspR7PsuOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPsuOutputPower.setStatus('current')
moduleDefPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 3), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPower.setStatus('current')
moduleDefReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefReach.setStatus('current')
moduleDefInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefInitEqlz.setStatus('current')
moduleDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefLanAid.setStatus('current')
moduleDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 7), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefType.setStatus('current')
moduleDefMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 8), FspR7Mapping()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMapping.setStatus('current')
moduleDefGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 9), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefGainRange.setStatus('current')
moduleDefSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 10), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSfProvision.setStatus('current')
moduleDefCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 11), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefCapabilityLevelProvision.setStatus('current')
moduleDefDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 12), FspR7DCFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDCFiberType.setStatus('current')
moduleDefChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 13), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelsProvision.setStatus('current')
moduleDefFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 14), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefFiberDetect.setStatus('current')
moduleDefSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 15), FspR7SupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSupply.setStatus('current')
moduleDefGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 16), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefGroup.setStatus('current')
moduleDefDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 17), FspR7DeploymentScenario()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDeploy.setStatus('current')
moduleDefLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefLagSysPrio.setStatus('current')
moduleDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTransmitChannel.setStatus('current')
moduleDefBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 20), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefBand.setStatus('current')
moduleDefTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 21), FspR7TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTrafficDirection.setStatus('current')
moduleDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefIpAddr.setStatus('current')
moduleDefDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 23), FspR7DispersionCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefDispersionCompensation.setStatus('current')
moduleDefActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefActivateDetect.setStatus('current')
moduleDefOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 25), FspR7OscUsage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefOscUsage.setStatus('current')
moduleDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 26), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefAdmin.setStatus('current')
moduleDefScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 27), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefScrambling.setStatus('current')
moduleDefChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 28), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelsNumber.setStatus('current')
moduleDefChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 29), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelSpacingProvision.setStatus('current')
moduleDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 30), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMode.setStatus('current')
moduleDefSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 31), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefSubBandProvision.setStatus('current')
moduleDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 32), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefAlias.setStatus('current')
moduleDefFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 33), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefFiberType.setStatus('current')
moduleDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 34), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefChannelSpacing.setStatus('current')
moduleDefOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 35), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefOutputReset.setStatus('current')
moduleDefRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 36), FspR7RoadmNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRoadmNumber.setStatus('current')
moduleDefTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 37), FspR7Topology()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefTopology.setStatus('current')
moduleDefForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 38), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefForceConfig.setStatus('current')
moduleDefMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 39), FspR7MuxMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefMuxMethod.setStatus('current')
moduleDefNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 40), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefNdpCleanup.setStatus('current')
moduleDefRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 41), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRstp.setStatus('current')
moduleDefRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 42), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefRemoteReset.setStatus('current')
moduleDefPartner1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner1.setStatus('current')
moduleDefPartner2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner2.setStatus('current')
moduleDefPartner3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 45), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner3.setStatus('current')
moduleDefPartner4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 46), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDefPartner4.setStatus('current')
moduleDefAcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 7, 1, 47), FspR7Acp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDefAcp.setStatus('current')
endOfModuleDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleDefTable.setStatus('current')
endOfEqptMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmtDef.setStatus('current')
physicalPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortDefTable.setStatus('current')
physicalPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortDefEntry.setStatus('current')
physicalPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRowStatus.setStatus('current')
physicalPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefType.setStatus('current')
physicalPortDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAdmin.setStatus('current')
physicalPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAlias.setStatus('current')
physicalPortDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAlsMode.setStatus('current')
physicalPortDefAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 6), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutoThresReset.setStatus('current')
physicalPortDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 7), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutonegotiation.setStatus('current')
physicalPortDefBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 8), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefBehaviour.setStatus('current')
physicalPortDefDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 9), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispertionConfig.setStatus('current')
physicalPortDefDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispersionSetting.setStatus('current')
physicalPortDefDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 11), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDispersionMode.setStatus('current')
physicalPortDefChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 12), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelProv.setStatus('current')
physicalPortDefWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 13), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefWdmRxChannel.setStatus('current')
physicalPortDefCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 14), FspR7CodeGain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCodeGain.setStatus('current')
physicalPortDefXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 15), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefXfpDecisionThres.setStatus('current')
physicalPortDefDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 16), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDisparityCorrection.setStatus('current')
physicalPortDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 17), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefEqlzAdmin.setStatus('current')
physicalPortDefErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 18), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefErrorForwarding.setStatus('current')
physicalPortDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 19), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFecType.setStatus('current')
physicalPortDefFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 20), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFarEndCommunication.setStatus('current')
physicalPortDefFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 21), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefFlowControl.setStatus('current')
physicalPortDefForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 22), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefForceLaserOn.setStatus('current')
physicalPortDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToProt.setStatus('current')
physicalPortDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInhibitSwitchToWork.setStatus('current')
physicalPortDefLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 25), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannelSetting.setStatus('current')
physicalPortDefLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 26), LoopConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLoopConfig.setStatus('current')
physicalPortDefLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 27), FspR7LaserDelayTimer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserDelayTimer.setStatus('current')
physicalPortDefLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOffTimer.setStatus('current')
physicalPortDefLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOnTimer.setStatus('current')
physicalPortDefLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 30), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaserOffDelayFunction.setStatus('current')
physicalPortDefAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 31), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefAutoPTassignment.setStatus('current')
physicalPortDefTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 32), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTributarySlotMethod.setStatus('current')
physicalPortDefInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 33), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefInitiateEqualization.setStatus('current')
physicalPortDefLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 34), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLossAttenuation.setStatus('current')
physicalPortDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPoint.setStatus('current')
physicalPortDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 36), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDataLayerPmReset.setStatus('current')
physicalPortDefPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 37), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPrbsPmReset.setStatus('current')
physicalPortDefTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 38), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTestPrbsRcvMode.setStatus('current')
physicalPortDefTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 39), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTestPrbsTrmtMode.setStatus('current')
physicalPortDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 40), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSwitchCommand.setStatus('current')
physicalPortDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 41), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpuPayloadType.setStatus('current')
physicalPortDefSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 42), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetLine.setStatus('current')
physicalPortDefSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhMs.setStatus('current')
physicalPortDefSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOtu.setStatus('current')
physicalPortDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOdu.setStatus('current')
physicalPortDefSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThreshold.setStatus('current')
physicalPortDefSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPcslThreshold.setStatus('current')
physicalPortDefSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 48), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSonetSection.setStatus('current')
physicalPortDefSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresSdhSection.setStatus('current')
physicalPortDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmA.setStatus('current')
physicalPortDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmB.setStatus('current')
physicalPortDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegThresOduTcmC.setStatus('current')
physicalPortDefSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSignalDegradePeriod.setStatus('current')
physicalPortDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOdu.setStatus('current')
physicalPortDefSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOtu.setStatus('current')
physicalPortDefSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodIntegration.setStatus('current')
physicalPortDefSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodSdhSection.setStatus('current')
physicalPortDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmA.setStatus('current')
physicalPortDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmB.setStatus('current')
physicalPortDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefSigDegPeriodOduTcmC.setStatus('current')
physicalPortDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 61), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOtnStuffing.setStatus('current')
physicalPortDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 62), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmALevel.setStatus('current')
physicalPortDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 63), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmBLevel.setStatus('current')
physicalPortDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 64), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTcmCLevel.setStatus('current')
physicalPortDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 65), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTerminationLevel.setStatus('current')
physicalPortDefTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 66), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimingSource.setStatus('current')
physicalPortDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 67), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOdu.setStatus('current')
physicalPortDefTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 68), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOtu.setStatus('current')
physicalPortDefTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 69), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeSonetSection.setStatus('current')
physicalPortDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 70), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmA.setStatus('current')
physicalPortDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 71), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmB.setStatus('current')
physicalPortDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 72), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimModeOduTcmC.setStatus('current')
physicalPortDefTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 73), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceFormSonetSection.setStatus('current')
physicalPortDefTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedSonetSection.setStatus('current')
physicalPortDefTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSonetSection.setStatus('current')
physicalPortDefTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOtu.setStatus('current')
physicalPortDefTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOtu.setStatus('current')
physicalPortDefTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOtu.setStatus('current')
physicalPortDefTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOtu.setStatus('current')
physicalPortDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOdu.setStatus('current')
physicalPortDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOdu.setStatus('current')
physicalPortDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOdu.setStatus('current')
physicalPortDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOdu.setStatus('current')
physicalPortDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmA.setStatus('current')
physicalPortDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmA.setStatus('current')
physicalPortDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmA.setStatus('current')
physicalPortDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 87), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmA.setStatus('current')
physicalPortDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 88), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmB.setStatus('current')
physicalPortDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 89), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmB.setStatus('current')
physicalPortDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 90), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmB.setStatus('current')
physicalPortDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 91), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmB.setStatus('current')
physicalPortDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 92), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOduTcmC.setStatus('current')
physicalPortDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 93), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitSapiOduTcmC.setStatus('current')
physicalPortDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 94), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitDapiOduTcmC.setStatus('current')
physicalPortDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 95), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceTransmitOpspOduTcmC.setStatus('current')
physicalPortDefTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 96), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTurnupConfig.setStatus('current')
physicalPortDefTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 97), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffDelay.setStatus('current')
physicalPortDefVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 98), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVoaMode.setStatus('current')
physicalPortDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 99), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVoaSetpoint.setStatus('current')
physicalPortDefLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLagPrio.setStatus('current')
physicalPortDefMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 101), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMaxFrameSize.setStatus('current')
physicalPortDefPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 102), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPayload.setStatus('current')
physicalPortDefPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 103), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPortMode.setStatus('current')
physicalPortDefPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 104), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPortRole.setStatus('current')
physicalPortDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPriority.setStatus('current')
physicalPortDefPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 106), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefPvid.setStatus('current')
physicalPortDefStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 107), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefStagType.setStatus('current')
physicalPortDefUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 108), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefUtag.setStatus('current')
physicalPortDefVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 109), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefVethAid.setStatus('current')
physicalPortDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 110), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRedLineState.setStatus('current')
physicalPortDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 111), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTunnelAid.setStatus('current')
physicalPortDefRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 112), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefRateLimit.setStatus('current')
physicalPortDefTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 113), FspR7TxOffOnTm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffOnTm.setStatus('current')
physicalPortDefTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 114), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOffTimer.setStatus('current')
physicalPortDefTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 115), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTxOnTimer.setStatus('current')
physicalPortDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 116), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMode.setStatus('current')
physicalPortDefMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 117), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefMonLevel.setStatus('current')
physicalPortDefChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 118), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelPlan.setStatus('current')
physicalPortDefOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 119), FspR7Optimize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOptimize.setStatus('current')
physicalPortDefEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 120), CryptoFspR7EncryptionCommunication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefEncryptionChannel.setStatus('current')
physicalPortDefLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 121), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLinkSetup.setStatus('current')
physicalPortDefCdCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 122), FspR7CdCompensationRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCdCompensationRange.setStatus('current')
physicalPortDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 123), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefChannelSpacing.setStatus('current')
physicalPortDefLLDPNeighborsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 124), FspR7LLDPNeighbors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsRx.setStatus('current')
physicalPortDefLLDPNeighborsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 125), FspR7LLDPNeighbors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLLDPNeighborsTx.setStatus('current')
physicalPortDefCdPostCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 126), FspR7CdPostCompensationRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefCdPostCompensationRange.setStatus('current')
physicalPortDefLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 127), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannel1.setStatus('current')
physicalPortDefLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 128), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefLaneChannel2.setStatus('current')
physicalPortDefOpticalSetPointLane1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 129), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane1.setStatus('current')
physicalPortDefOpticalSetPointLane2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 130), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefOpticalSetPointLane2.setStatus('current')
physicalPortDefTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 131), FspR7TerminationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTerminationMode.setStatus('current')
physicalPortDefTimDetModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 132), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimDetModeOtu.setStatus('current')
physicalPortDefTimActionOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 133), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimActionOtu.setStatus('current')
physicalPortDefTraceExpectedDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 134), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOtu.setStatus('current')
physicalPortDefTraceExpectedOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 135), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOtu.setStatus('current')
physicalPortDefTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 136), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimDetModeOdu.setStatus('current')
physicalPortDefTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 137), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTimActionOdu.setStatus('current')
physicalPortDefTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 138), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedDapiOdu.setStatus('current')
physicalPortDefTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 139), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefTraceExpectedOpspOdu.setStatus('current')
physicalPortDefReportAisLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 140), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportAisLine.setStatus('current')
physicalPortDefReportSsfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 141), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportSsfLine.setStatus('current')
physicalPortDefReportSsfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 142), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefReportSsfSection.setStatus('current')
physicalPortDefDelayMeasurementOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 1, 1, 143), FspR7DmsrmtOperation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDefDelayMeasurementOperation.setStatus('current')
virtualPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortDefTable.setStatus('current')
virtualPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortDefEntry.setStatus('current')
virtualPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRowStatus.setStatus('current')
virtualPortDefChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 2), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefChannelBand.setStatus('current')
virtualPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefType.setStatus('current')
virtualPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefAlias.setStatus('current')
virtualPortDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefAdmin.setStatus('current')
virtualPortDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 6), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefEqlzAdmin.setStatus('current')
virtualPortDefInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 7), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInitEqlz.setStatus('current')
virtualPortDefLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 8), FspR7LacpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLacpMode.setStatus('current')
virtualPortDefLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 9), FspR7LacpTimeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLacpTimeout.setStatus('current')
virtualPortDefLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLagActivePorts.setStatus('current')
virtualPortDefMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefMaxFrameSize.setStatus('current')
virtualPortDefPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 12), FspR7PortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPortMode.setStatus('current')
virtualPortDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 13), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefDataLayerPmReset.setStatus('current')
virtualPortDefPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 14), FspR7PortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPortRole.setStatus('current')
virtualPortDefLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 15), FspR7LagPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLagPortType.setStatus('current')
virtualPortDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPriority.setStatus('current')
virtualPortDefPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPvid.setStatus('current')
virtualPortDefRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 18), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRevertiveMode.setStatus('current')
virtualPortDefStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 19), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefStagType.setStatus('current')
virtualPortDefUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 20), FspR7UntaggedFrames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefUtag.setStatus('current')
virtualPortDefBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 21), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefBundle.setStatus('current')
virtualPortDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 22), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSwitchCommand.setStatus('current')
virtualPortDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToWork.setStatus('current')
virtualPortDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 24), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefInhibitSwitchToProt.setStatus('current')
virtualPortDefOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOduTribPortNo.setStatus('current')
virtualPortDefOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 26), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOduTribTimeSlottNo.setStatus('current')
virtualPortDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOdu.setStatus('current')
virtualPortDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOdu.setStatus('current')
virtualPortDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOdu.setStatus('current')
virtualPortDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOdu.setStatus('current')
virtualPortDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOdu.setStatus('current')
virtualPortDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOdu.setStatus('current')
virtualPortDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 33), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOdu.setStatus('current')
virtualPortDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmA.setStatus('current')
virtualPortDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmA.setStatus('current')
virtualPortDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmB.setStatus('current')
virtualPortDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmB.setStatus('current')
virtualPortDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegThresOduTcmC.setStatus('current')
virtualPortDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefSigDegPeriodOduTcmC.setStatus('current')
virtualPortDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 40), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmALevel.setStatus('current')
virtualPortDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 41), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmBLevel.setStatus('current')
virtualPortDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 42), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTcmCLevel.setStatus('current')
virtualPortDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmA.setStatus('current')
virtualPortDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmA.setStatus('current')
virtualPortDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmA.setStatus('current')
virtualPortDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmA.setStatus('current')
virtualPortDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 47), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmA.setStatus('current')
virtualPortDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmB.setStatus('current')
virtualPortDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmB.setStatus('current')
virtualPortDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmB.setStatus('current')
virtualPortDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmB.setStatus('current')
virtualPortDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 52), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmB.setStatus('current')
virtualPortDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOduTcmC.setStatus('current')
virtualPortDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitSapiOduTcmC.setStatus('current')
virtualPortDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitDapiOduTcmC.setStatus('current')
virtualPortDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceTransmitOpspOduTcmC.setStatus('current')
virtualPortDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimModeOduTcmC.setStatus('current')
virtualPortDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 58), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTerminationLevel.setStatus('current')
virtualPortDefLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 59), LoopConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefLoopConfig.setStatus('current')
virtualPortDefVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 60), VirtualContainerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefVcType.setStatus('current')
virtualPortDefCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 61), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefCir.setStatus('current')
virtualPortDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 62), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOpuPayloadType.setStatus('current')
virtualPortDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 63), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOtnStuffing.setStatus('current')
virtualPortDefRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 64), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefRedLineState.setStatus('current')
virtualPortDefTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 65), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTunnelAid.setStatus('current')
virtualPortDefOptSetDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefOptSetDeviation.setStatus('current')
virtualPortDefPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 67), OtnPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPayload.setStatus('current')
virtualPortDefPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 68), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefPrbsPmReset.setStatus('current')
virtualPortDefTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 69), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTestPrbsRcvMode.setStatus('current')
virtualPortDefTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 70), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTestPrbsTrmtMode.setStatus('current')
virtualPortDefTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 71), FspR7TimDetMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimDetModeOdu.setStatus('current')
virtualPortDefTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 72), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTimActionOdu.setStatus('current')
virtualPortDefTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 73), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedDapiOdu.setStatus('current')
virtualPortDefTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 2, 1, 74), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortDefTraceExpectedOpspOdu.setStatus('current')
endOfVirtualPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfVirtualPortDefTable.setStatus('current')
lldpDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4), )
if mibBuilder.loadTexts: lldpDefTable.setStatus('current')
lldpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lldpDefEntry.setStatus('current')
lldpDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefRowStatus.setStatus('current')
lldpDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefType.setStatus('current')
lldpDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefAlias.setStatus('current')
lldpDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 4), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefDataLayerPmReset.setStatus('current')
lldpDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 5), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefAdmin.setStatus('current')
lldpDefLLDPScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 4, 1, 6), FspR7LLDPScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpDefLLDPScope.setStatus('current')
endOfLldpDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLldpDefTable.setStatus('current')
endOfFacilityMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmtDef.setStatus('current')
linkDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1), )
if mibBuilder.loadTexts: linkDefTable.setStatus('current')
linkDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkDefEntry.setStatus('current')
linkDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefRowStatus.setStatus('current')
linkDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefType.setStatus('current')
linkDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAdmin.setStatus('current')
linkDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAlias.setStatus('current')
linkDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAuthString.setStatus('current')
linkDefProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 6), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefProxyArp.setStatus('current')
linkDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 7), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefOspf.setStatus('current')
linkDefBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 8), FspR7Baund()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefBaud.setStatus('current')
linkDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 9), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAuthType.setStatus('current')
linkDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 10), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefIpType.setStatus('current')
linkDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefMetric.setStatus('current')
linkDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefAreaAid.setStatus('current')
linkDefNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefNearEndIp.setStatus('current')
linkDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 13702))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefBitrate.setStatus('current')
linkDefIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 15), FspR7IPv6Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefIPv6Type.setStatus('current')
linkDefNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefNendIPv6.setStatus('current')
linkDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefMtu.setStatus('current')
linkDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefHelloInterval.setStatus('current')
linkDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefDeadInterval.setStatus('current')
linkDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefRetransmitInterval.setStatus('current')
linkDefFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefFarEndIp.setStatus('current')
linkDefFendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDefFendLogicalIpAddr.setStatus('current')
endOfLinkDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkDefTable.setStatus('current')
scDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3), )
if mibBuilder.loadTexts: scDefTable.setStatus('current')
scDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scDefEntry.setStatus('current')
scDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefRowStatus.setStatus('current')
scDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefType.setStatus('current')
scDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAdmin.setStatus('current')
scDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAlias.setStatus('current')
scDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAuthString.setStatus('current')
scDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 6), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefOspf.setStatus('current')
scDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 7), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAuthType.setStatus('current')
scDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpType.setStatus('current')
scDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMetric.setStatus('current')
scDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAreaAid.setStatus('current')
scDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 11), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAlsMode.setStatus('current')
scDefSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 12), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefSigDegThresReceiver.setStatus('current')
scDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 13), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAutonegotiation.setStatus('current')
scDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 14), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefBitrate.setStatus('current')
scDefDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 15), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDuplex.setStatus('current')
scDefAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefAttGradientTh.setStatus('current')
scDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpAddr.setStatus('current')
scDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefLanAid.setStatus('current')
scDefIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpMask.setStatus('current')
scDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 20), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDataLayerPmReset.setStatus('current')
scDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefPriority.setStatus('current')
scDefIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIPv6.setStatus('current')
scDefIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIPv6PrefixLen.setStatus('current')
scDefIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 24), FspR7IpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefIpMode.setStatus('current')
scDefGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 25), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefGatewayProxyArp.setStatus('current')
scDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMtu.setStatus('current')
scDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefHelloInterval.setStatus('current')
scDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDeadInterval.setStatus('current')
scDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefRetransmitInterval.setStatus('current')
scDefDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 30), FspR7DhcpServer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpServer.setStatus('current')
scDefDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpStartAddr.setStatus('current')
scDefDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpStopAddr.setStatus('current')
scDefDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefDhcpMask.setStatus('current')
scDefFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 34), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefFrcdLogin.setStatus('current')
scDefMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 3, 1, 35), FspR7InterfaceCrossover()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDefMdix.setStatus('current')
endOfScDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScDefTable.setStatus('current')
lanDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5), )
if mibBuilder.loadTexts: lanDefTable.setStatus('current')
lanDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanDefEntry.setStatus('current')
lanDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefRowStatus.setStatus('current')
lanDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefType.setStatus('current')
lanDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAdmin.setStatus('current')
lanDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAlias.setStatus('current')
lanDefAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAuthString.setStatus('current')
lanDefOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 6), FspR7OspfMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefOspf.setStatus('current')
lanDefAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 7), FspR7CpAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAuthType.setStatus('current')
lanDefIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 8), FspR7IpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpType.setStatus('current')
lanDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefMetric.setStatus('current')
lanDefAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefAreaAid.setStatus('current')
lanDefIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpAddr.setStatus('current')
lanDefIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpMask.setStatus('current')
lanDefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefPriority.setStatus('current')
lanDefIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIPv6.setStatus('current')
lanDefIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIPv6PrefixLen.setStatus('current')
lanDefIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 16), FspR7IpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefIpMode.setStatus('current')
lanDefMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefMtu.setStatus('current')
lanDefHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefHelloInterval.setStatus('current')
lanDefDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDeadInterval.setStatus('current')
lanDefRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefRetransmitInterval.setStatus('current')
lanDefDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 21), FspR7DhcpServer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpServer.setStatus('current')
lanDefDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpStartAddr.setStatus('current')
lanDefDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpStopAddr.setStatus('current')
lanDefDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefDhcpMask.setStatus('current')
lanDefFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 5, 1, 25), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefFrcdLogin.setStatus('current')
endOfLanDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanDefTable.setStatus('current')
eccDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7), )
if mibBuilder.loadTexts: eccDefTable.setStatus('current')
eccDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccDefEntry.setStatus('current')
eccDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefRowStatus.setStatus('current')
eccDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefType.setStatus('current')
eccDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefAdmin.setStatus('current')
eccDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefAlias.setStatus('current')
eccDefLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefLanAid.setStatus('current')
eccDefExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefExternalVid.setStatus('current')
eccDefGccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 7, 1, 7), FspR7GccUsage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccDefGccUsage.setStatus('current')
endOfEccDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccDefTable.setStatus('current')
endOfDcnMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmtDef.setStatus('current')
opticalMuxDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxDefTable.setStatus('current')
opticalMuxDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxDefEntry.setStatus('current')
opticalMuxDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefRowStatus.setStatus('current')
opticalMuxDefPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(115, 138))).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefPumpPower.setStatus('current')
opticalMuxDefInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 3), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToWork.setStatus('current')
opticalMuxDefForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 4), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefForceLaserOn.setStatus('current')
opticalMuxDefAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 5), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAseTabCreation.setStatus('current')
opticalMuxDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOpticalSetPoint.setStatus('current')
opticalMuxDefInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 7), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInitiateEqualization.setStatus('current')
opticalMuxDefTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 0))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTilt.setStatus('current')
opticalMuxDefOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOscOpticalSetpoint.setStatus('current')
opticalMuxDefOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffset.setStatus('current')
opticalMuxDefSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 11), FspR7APSCommand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefSwitchCommand.setStatus('current')
opticalMuxDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 12), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAlsMode.setStatus('current')
opticalMuxDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 13), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefType.setStatus('current')
opticalMuxDefAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAttenuationGradient.setStatus('current')
opticalMuxDefInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 15), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefInhibitSwitchToProt.setStatus('current')
opticalMuxDefVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGain.setStatus('current')
opticalMuxDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 17), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAdmin.setStatus('current')
opticalMuxDefTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 18), FspR7OtdrPeriod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTimePeriod.setStatus('current')
opticalMuxDefSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 19), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefSigDegThresReceiver.setStatus('current')
opticalMuxDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefAlias.setStatus('current')
opticalMuxDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 21), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefDataLayerPmReset.setStatus('current')
opticalMuxDefGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 22), FspR7Gain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefGain.setStatus('current')
opticalMuxDefEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 23), FspR7EdfaOutputPowerRating()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefEdfaPwrOut.setStatus('current')
opticalMuxDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVoaSetpoint.setStatus('current')
opticalMuxDefFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 25), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefFiberBrand.setStatus('current')
opticalMuxDefTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 26), FspR7TiltSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefTiltSet.setStatus('current')
opticalMuxDefForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 27), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefForceFwdAsePilotOn.setStatus('current')
opticalMuxDefBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 28), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefBandProvision.setStatus('current')
opticalMuxDefOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffsetHigh.setStatus('current')
opticalMuxDefOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOffsetLow.setStatus('current')
opticalMuxDefOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 31), FspR7RlsAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefOptUpdate.setStatus('current')
opticalMuxDefVariableGainNtoR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGainNtoR.setStatus('current')
opticalMuxDefVariableGainRtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxDefVariableGainRtoN.setStatus('current')
endOfOpticalMuxDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxDefTable.setStatus('current')
endOfOpticalMuxMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmtDef.setStatus('current')
shelfConnDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnDefTable.setStatus('current')
shelfConnDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnDefEntry.setStatus('current')
shelfConnDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefRowStatus.setStatus('current')
shelfConnDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAdmin.setStatus('current')
shelfConnDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAlias.setStatus('current')
shelfConnDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefFacilityType.setStatus('current')
shelfConnDefDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 5), FspR7PmReset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefDataLayerPmReset.setStatus('current')
shelfConnDefAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 6), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefAutonegotiation.setStatus('current')
shelfConnDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 7), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefBitrate.setStatus('current')
shelfConnDefDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 8), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefDuplex.setStatus('current')
shelfConnDefMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 1, 1, 9), FspR7InterfaceCrossover()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnDefMdix.setStatus('current')
endOfShelfConnDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnDefTable.setStatus('current')
endOfShelfConnMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmtDef.setStatus('current')
envPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1), )
if mibBuilder.loadTexts: envPortDefTable.setStatus('current')
envPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortDefEntry.setStatus('current')
envPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefRowStatus.setStatus('current')
envPortDefTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 2), FspR7TelemetryOutput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTelemetry.setStatus('current')
envPortDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefFacilityType.setStatus('current')
envPortDefTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTifAlarmType.setStatus('current')
envPortDefTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefTifAlarmMessage.setStatus('current')
envPortDefInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 1, 1, 6), FspR7InvertTelemetryInputLogic()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortDefInvertTifInputLogic.setStatus('current')
endOfEnvPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortDefTable.setStatus('current')
endOfEnvMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmtDef.setStatus('current')
containerDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1), )
if mibBuilder.loadTexts: containerDefTable.setStatus('current')
containerDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerDefEntry.setStatus('current')
containerDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerDefRowStatus.setStatus('current')
containerDefFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerDefFacilityType.setStatus('current')
endOfContainerDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerDefTable.setStatus('current')
endOfContainerMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmtDef.setStatus('current')
opticalLineDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineDefTable.setStatus('current')
opticalLineDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineDefEntry.setStatus('current')
opticalLineDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefRowStatus.setStatus('current')
opticalLineDefTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefTxLineAttenuation.setStatus('current')
opticalLineDefRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefRxLineAttenuation.setStatus('current')
opticalLineDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefAlias.setStatus('current')
opticalLineDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefFarEndLocation.setStatus('current')
opticalLineDefFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefFiberLength.setStatus('current')
opticalLineDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 1, 1, 7), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineDefChannelBandwith.setStatus('current')
endOfOpticalLineDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineDefTable.setStatus('current')
endOfOpticalLineMgmtDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmtDef.setStatus('current')
optThresholdConfigDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigDefTable.setStatus('current')
optThresholdConfigDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigDefEntry.setStatus('current')
optThresholdConfigDefLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigDefLowConfig.setStatus('current')
optThresholdConfigDefHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigDefHighConfig.setStatus('current')
oprThresholdConfigDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigDefTable.setStatus('current')
oprThresholdConfigDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigDefEntry.setStatus('current')
oprThresholdConfigDefLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigDefLowConfig.setStatus('current')
oprThresholdConfigDefHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 270))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigDefHighConfig.setStatus('current')
endOfOprThresholdConfigDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOprThresholdConfigDefTable.setStatus('current')
endOfPerformanceFacilityThresholdDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 6, 4, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdDef.setStatus('current')
terminationPointDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointDefTable.setStatus('current')
terminationPointDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointDefEntry.setStatus('current')
terminationPointDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefRowStatus.setStatus('current')
terminationPointDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefAdmin.setStatus('current')
terminationPointDefFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 3), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefFiberDetect.setStatus('current')
terminationPointDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDefAlias.setStatus('current')
connectionDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2), )
if mibBuilder.loadTexts: connectionDefTable.setStatus('current')
connectionDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionDefEntry.setStatus('current')
connectionDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionDefRowStatus.setStatus('current')
connectionDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 2, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionDefType.setStatus('current')
endOfConnectionDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfConnectionDefTable.setStatus('current')
endOfFiberMapDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMapDef.setStatus('current')
externalPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortDefTable.setStatus('current')
externalPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortDefEntry.setStatus('current')
externalPortDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefRowStatus.setStatus('current')
externalPortDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefType.setStatus('current')
externalPortDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefTransmitChannel.setStatus('current')
externalPortDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefChannelBandwith.setStatus('current')
externalPortDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefAlias.setStatus('current')
externalPortDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFarEndLocation.setStatus('current')
externalPortDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 7), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefBitrate.setStatus('current')
externalPortDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFecType.setStatus('current')
externalPortDefLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefLineCoding.setStatus('current')
externalPortDefFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefFrameFormat.setStatus('current')
externalPortDefOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefOpticalPowerTx.setStatus('current')
externalPortDefOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefOsnrTransmit.setStatus('current')
externalPortDefPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefPmdTransmit.setStatus('current')
externalPortDefChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefChromDisperTx.setStatus('current')
externalPortDefMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinOsnrRcv.setStatus('current')
externalPortDefMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinOptPowerRcv.setStatus('current')
externalPortDefMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxOptPowerRcv.setStatus('current')
externalPortDefMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxPmdRcv.setStatus('current')
externalPortDefMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMinChromDisperRcv.setStatus('current')
externalPortDefMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxChromDisperRcv.setStatus('current')
externalPortDefMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 21), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefMaxBitErrorRate.setStatus('current')
externalPortDefSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortDefSourceProfile.setStatus('current')
endOfExternalPortDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortDefTable.setStatus('current')
externalOmDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3), )
if mibBuilder.loadTexts: externalOmDefTable.setStatus('current')
externalOmDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalOmDefEntry.setStatus('current')
externalOmDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefRowStatus.setStatus('current')
externalOmDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefType.setStatus('current')
externalOmDefHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalOmDefHostName.setStatus('current')
externalVchDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5), )
if mibBuilder.loadTexts: externalVchDefTable.setStatus('current')
externalVchDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalVchDefEntry.setStatus('current')
externalVchDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 1), FspR7RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefRowStatus.setStatus('current')
externalVchDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefType.setStatus('current')
externalVchDefTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 3), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefTransmitChannel.setStatus('current')
externalVchDefChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 4), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefChannelBandwith.setStatus('current')
externalVchDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefAlias.setStatus('current')
externalVchDefFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFarEndLocation.setStatus('current')
externalVchDefBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 7), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefBitrate.setStatus('current')
externalVchDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 8), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFecType.setStatus('current')
externalVchDefLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 9), FspR7LineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefLineCoding.setStatus('current')
externalVchDefFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 10), FspR7FrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefFrameFormat.setStatus('current')
externalVchDefOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefOpticalPowerTx.setStatus('current')
externalVchDefOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefOsnrTransmit.setStatus('current')
externalVchDefPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefPmdTransmit.setStatus('current')
externalVchDefChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefChromDisperTx.setStatus('current')
externalVchDefMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinOsnrRcv.setStatus('current')
externalVchDefMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinOptPowerRcv.setStatus('current')
externalVchDefMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxOptPowerRcv.setStatus('current')
externalVchDefMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxPmdRcv.setStatus('current')
externalVchDefMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMinChromDisperRcv.setStatus('current')
externalVchDefMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxChromDisperRcv.setStatus('current')
externalVchDefMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 21), FspR7MaxBitErrorRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefMaxBitErrorRate.setStatus('current')
externalVchDefSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 5, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchDefSourceProfile.setStatus('current')
endOfEciDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEciDef.setStatus('current')
changePhysicalPortServiceDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceDefTable.setStatus('current')
changePhysicalPortServiceDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceDefEntry.setStatus('current')
changePhysicalPortServiceDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefRowStatus.setStatus('current')
changePhysicalPortServiceDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefType.setStatus('current')
changePhysicalPortServiceDefAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAdmin.setStatus('current')
changePhysicalPortServiceDefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlias.setStatus('current')
changePhysicalPortServiceDefAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAlsMode.setStatus('current')
changePhysicalPortServiceDefBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 6), FspR7PortBehaviour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefBehaviour.setStatus('current')
changePhysicalPortServiceDefDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionSetting.setStatus('current')
changePhysicalPortServiceDefDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 8), FspR7DispersionModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDispersionMode.setStatus('current')
changePhysicalPortServiceDefChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelProv.setStatus('current')
changePhysicalPortServiceDefWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefWdmRxChannel.setStatus('current')
changePhysicalPortServiceDefCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 11), FspR7CodeGain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefCodeGain.setStatus('current')
changePhysicalPortServiceDefXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 12), FspR7XfpDecisionThres()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefXfpDecisionThres.setStatus('current')
changePhysicalPortServiceDefDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 13), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefDisparityCorrection.setStatus('current')
changePhysicalPortServiceDefEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 14), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefEqlzAdmin.setStatus('current')
changePhysicalPortServiceDefErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 15), FspR7ErrorFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefErrorForwarding.setStatus('current')
changePhysicalPortServiceDefFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 16), FspR7FecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFecType.setStatus('current')
changePhysicalPortServiceDefFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 17), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFarEndCommunication.setStatus('current')
changePhysicalPortServiceDefFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 18), FspR7FlowControlMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefFlowControl.setStatus('current')
changePhysicalPortServiceDefLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaneChannelSetting.setStatus('current')
changePhysicalPortServiceDefLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 20), FspR7LaserDelayTimer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserDelayTimer.setStatus('current')
changePhysicalPortServiceDefLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffTimer.setStatus('current')
changePhysicalPortServiceDefLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOnTimer.setStatus('current')
changePhysicalPortServiceDefLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 23), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLaserOffDelayFunction.setStatus('current')
changePhysicalPortServiceDefAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 24), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefAutoPTassignment.setStatus('current')
changePhysicalPortServiceDefTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 25), FspR7ManualAuto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTributarySlotMethod.setStatus('current')
changePhysicalPortServiceDefOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpticalSetPoint.setStatus('current')
changePhysicalPortServiceDefOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 27), FspR7OpuPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOpuPayloadType.setStatus('current')
changePhysicalPortServiceDefSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 28), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetLine.setStatus('current')
changePhysicalPortServiceDefSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhMs.setStatus('current')
changePhysicalPortServiceDefSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOtu.setStatus('current')
changePhysicalPortServiceDefSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOdu.setStatus('current')
changePhysicalPortServiceDefSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThreshold.setStatus('current')
changePhysicalPortServiceDefSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPcslThreshold.setStatus('current')
changePhysicalPortServiceDefSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 34), FspR7BERThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSonetSection.setStatus('current')
changePhysicalPortServiceDefSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresSdhSection.setStatus('current')
changePhysicalPortServiceDefSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmA.setStatus('current')
changePhysicalPortServiceDefSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmB.setStatus('current')
changePhysicalPortServiceDefSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegThresOduTcmC.setStatus('current')
changePhysicalPortServiceDefSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSignalDegradePeriod.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOdu.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOtu.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodIntegration.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodSdhSection.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmA.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmB.setStatus('current')
changePhysicalPortServiceDefSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefSigDegPeriodOduTcmC.setStatus('current')
changePhysicalPortServiceDefOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 47), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOtnStuffing.setStatus('current')
changePhysicalPortServiceDefTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 48), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmALevel.setStatus('current')
changePhysicalPortServiceDefTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 49), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmBLevel.setStatus('current')
changePhysicalPortServiceDefTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 50), OtnTcmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTcmCLevel.setStatus('current')
changePhysicalPortServiceDefTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 51), OhTerminationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTerminationLevel.setStatus('current')
changePhysicalPortServiceDefTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 52), SonetTimingSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimingSource.setStatus('current')
changePhysicalPortServiceDefTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 53), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOdu.setStatus('current')
changePhysicalPortServiceDefTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 54), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOtu.setStatus('current')
changePhysicalPortServiceDefTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 55), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeSonetSection.setStatus('current')
changePhysicalPortServiceDefTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 56), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmA.setStatus('current')
changePhysicalPortServiceDefTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 57), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmB.setStatus('current')
changePhysicalPortServiceDefTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 58), TimMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTimModeOduTcmC.setStatus('current')
changePhysicalPortServiceDefTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 59), SonetTraceForm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceFormSonetSection.setStatus('current')
changePhysicalPortServiceDefTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedSonetSection.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSonetSection.setStatus('current')
changePhysicalPortServiceDefTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOtu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOtu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOtu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOtu.setStatus('current')
changePhysicalPortServiceDefTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOdu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOdu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOdu.setStatus('current')
changePhysicalPortServiceDefTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOdu.setStatus('current')
changePhysicalPortServiceDefTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmA.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmA.setStatus('current')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmA.setStatus('current')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmA.setStatus('current')
changePhysicalPortServiceDefTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmB.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmB.setStatus('current')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmB.setStatus('current')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmB.setStatus('current')
changePhysicalPortServiceDefTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceExpectedOduTcmC.setStatus('current')
changePhysicalPortServiceDefTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitSapiOduTcmC.setStatus('current')
changePhysicalPortServiceDefTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitDapiOduTcmC.setStatus('current')
changePhysicalPortServiceDefTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTraceTransmitOpspOduTcmC.setStatus('current')
changePhysicalPortServiceDefTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 82), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefTxOffDelay.setStatus('current')
changePhysicalPortServiceDefVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 83), FspR7VoaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaMode.setStatus('current')
changePhysicalPortServiceDefVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefVoaSetpoint.setStatus('current')
changePhysicalPortServiceDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 85), FspR7TransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefMode.setStatus('current')
changePhysicalPortServiceDefMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 86), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefMonLevel.setStatus('current')
changePhysicalPortServiceDefOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 87), FspR7Optimize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefOptimize.setStatus('current')
changePhysicalPortServiceDefLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 88), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefLinkSetup.setStatus('current')
changePhysicalPortServiceDefChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 1, 1, 89), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceDefChannelSpacing.setStatus('current')
endOfChangePhysicalPortServiceDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceDefTable.setStatus('current')
endOfChangeServiceDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeServiceDef.setStatus('current')
ffpDefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2), )
if mibBuilder.loadTexts: ffpDefTable.setStatus('current')
ffpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpDefEntry.setStatus('current')
ffpDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefRowStatus.setStatus('current')
ffpDefCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 2), FfpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefCreationMethod.setStatus('current')
ffpDefSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 3), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSDswitching.setStatus('current')
ffpDefHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 4), ApsHoldoffTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefHoldOffTime.setStatus('current')
ffpDefProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 5), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionMech.setStatus('current')
ffpDefWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefWorkingAid.setStatus('current')
ffpDefProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionAid.setStatus('current')
ffpDefSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 8), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSignalDegradeSwitching.setStatus('current')
ffpDefSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefSignalFailureSwitching.setStatus('current')
ffpDefFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefFarEndIp.setStatus('current')
ffpDefPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefPeerAid.setStatus('current')
ffpDefApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 12), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefApsType.setStatus('current')
ffpDefRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 13), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefRevertMode.setStatus('current')
ffpDefWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefWaitToRestore.setStatus('current')
ffpDefDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 15), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefDirection.setStatus('current')
ffpDefProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 16), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefProtectionType.setStatus('current')
ffpDefApsFarEndModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 2, 1, 17), FspR7ApsFarEndModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpDefApsFarEndModule.setStatus('current')
endOfFfpDefTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpDefTable.setStatus('current')
endOfProtectionDef = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 10, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionDef.setStatus('current')
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", plugDefTable=plugDefTable, physicalPortDefOpticalSetPointLane2=physicalPortDefOpticalSetPointLane2, linkDefAlias=linkDefAlias, endOfLinkDefTable=endOfLinkDefTable, changePhysicalPortServiceDefTable=changePhysicalPortServiceDefTable, changePhysicalPortServiceDefTributarySlotMethod=changePhysicalPortServiceDefTributarySlotMethod, terminationPointDefAdmin=terminationPointDefAdmin, lanDefAdmin=lanDefAdmin, crossDcnDefLink=crossDcnDefLink, plugDefConnector=plugDefConnector, physicalPortDefTraceTransmitSapiOduTcmC=physicalPortDefTraceTransmitSapiOduTcmC, shelfDefAirFilterCycle=shelfDefAirFilterCycle, externalOmDefTable=externalOmDefTable, changePhysicalPortServiceDefOpuPayloadType=changePhysicalPortServiceDefOpuPayloadType, physicalPortDefVethAid=physicalPortDefVethAid, ffpDefCreationMethod=ffpDefCreationMethod, externalVchDefMaxChromDisperRcv=externalVchDefMaxChromDisperRcv, scDefType=scDefType, changePhysicalPortServiceDefTraceFormSonetSection=changePhysicalPortServiceDefTraceFormSonetSection, changePhysicalPortServiceDefSigDegThresSonetLine=changePhysicalPortServiceDefSigDegThresSonetLine, shelfDefRack=shelfDefRack, virtualPortDefTraceTransmitOpspOduTcmA=virtualPortDefTraceTransmitOpspOduTcmA, plugDefThirdPartyUsage=plugDefThirdPartyUsage, virtualPortDefPvid=virtualPortDefPvid, crossOpticalLineDefConn=crossOpticalLineDefConn, opticalMuxDefAlias=opticalMuxDefAlias, physicalPortDefTraceExpectedDapiOtu=physicalPortDefTraceExpectedDapiOtu, crossConnectionDefAdmin=crossConnectionDefAdmin, opticalMuxDefTimePeriod=opticalMuxDefTimePeriod, physicalPortDefTraceExpectedOduTcmB=physicalPortDefTraceExpectedOduTcmB, changeServiceDef=changeServiceDef, physicalPortDefInhibitSwitchToWork=physicalPortDefInhibitSwitchToWork, endOfShelfConnMgmtDef=endOfShelfConnMgmtDef, changePhysicalPortServiceDefSigDegThresSonetSection=changePhysicalPortServiceDefSigDegThresSonetSection, physicalPortDefTraceFormSonetSection=physicalPortDefTraceFormSonetSection, physicalPortDefTimModeOduTcmB=physicalPortDefTimModeOduTcmB, externalVchDefSourceProfile=externalVchDefSourceProfile, physicalPortDefTable=physicalPortDefTable, opticalMuxDefInhibitSwitchToProt=opticalMuxDefInhibitSwitchToProt, changePhysicalPortServiceDefSigDegThresSdhSection=changePhysicalPortServiceDefSigDegThresSdhSection, changePhysicalPortServiceDefSigDegPeriodOduTcmC=changePhysicalPortServiceDefSigDegPeriodOduTcmC, shelfConnMgmtDef=shelfConnMgmtDef, changePhysicalPortServiceDefTraceTransmitOpspOduTcmA=changePhysicalPortServiceDefTraceTransmitOpspOduTcmA, physicalPortDefTraceTransmitSapiOtu=physicalPortDefTraceTransmitSapiOtu, crossOpticalLineDefTable=crossOpticalLineDefTable, physicalPortDefTraceTransmitSonetSection=physicalPortDefTraceTransmitSonetSection, physicalPortDefDelayMeasurementOperation=physicalPortDefDelayMeasurementOperation, envPortDefTelemetry=envPortDefTelemetry, moduleDefReach=moduleDefReach, physicalPortDefReportSsfSection=physicalPortDefReportSsfSection, changePhysicalPortServiceDefTraceTransmitSapiOtu=changePhysicalPortServiceDefTraceTransmitSapiOtu, fanDefEntry=fanDefEntry, linkDefFendLogicalIpAddr=linkDefFendLogicalIpAddr, physicalPortDefDataLayerPmReset=physicalPortDefDataLayerPmReset, scDefAttGradientTh=scDefAttGradientTh, changePhysicalPortServiceDefTraceTransmitOpspOdu=changePhysicalPortServiceDefTraceTransmitOpspOdu, virtualPortDefSigDegThresOduTcmA=virtualPortDefSigDegThresOduTcmA, virtualPortDefOduTribPortNo=virtualPortDefOduTribPortNo, shelfConnDefAdmin=shelfConnDefAdmin, virtualPortDefTable=virtualPortDefTable, opticalMuxDefInitiateEqualization=opticalMuxDefInitiateEqualization, ffpDefSignalDegradeSwitching=ffpDefSignalDegradeSwitching, crossConnectionDefConn=crossConnectionDefConn, physicalPortDefCodeGain=physicalPortDefCodeGain, physicalPortDefTcmBLevel=physicalPortDefTcmBLevel, endOfOpticalLineMgmtDef=endOfOpticalLineMgmtDef, ffpDefFarEndIp=ffpDefFarEndIp, lanDefDhcpMask=lanDefDhcpMask, shelfDefPsuOutputPower=shelfDefPsuOutputPower, endOfLanDefTable=endOfLanDefTable, oprThresholdConfigDefHighConfig=oprThresholdConfigDefHighConfig, virtualPortDefTcmCLevel=virtualPortDefTcmCLevel, physicalPortDefAutonegotiation=physicalPortDefAutonegotiation, externalPortDefChannelBandwith=externalPortDefChannelBandwith, eccDefGccUsage=eccDefGccUsage, physicalPortDefInitiateEqualization=physicalPortDefInitiateEqualization, physicalPortDefType=physicalPortDefType, opticalMuxDefOffsetHigh=opticalMuxDefOffsetHigh, shelfConnDefRowStatus=shelfConnDefRowStatus, changePhysicalPortServiceDefTraceExpectedOduTcmC=changePhysicalPortServiceDefTraceExpectedOduTcmC, changePhysicalPortServiceDefTimingSource=changePhysicalPortServiceDefTimingSource, scDefOspf=scDefOspf, changePhysicalPortServiceDefLinkSetup=changePhysicalPortServiceDefLinkSetup, fanDefAlias=fanDefAlias, fanDefRowStatus=fanDefRowStatus, externalPortDefBitrate=externalPortDefBitrate, physicalPortDefSigDegThresOtu=physicalPortDefSigDegThresOtu, connectionDefRowStatus=connectionDefRowStatus, scDefAlsMode=scDefAlsMode, shelfDefAdmin=shelfDefAdmin, crossConnectionDefType=crossConnectionDefType, scDefDhcpStopAddr=scDefDhcpStopAddr, physicalPortDefPriority=physicalPortDefPriority, physicalPortDefMaxFrameSize=physicalPortDefMaxFrameSize, changePhysicalPortServiceDefSignalDegradePeriod=changePhysicalPortServiceDefSignalDegradePeriod, plugDefTransmitChannel=plugDefTransmitChannel, lanDefFrcdLogin=lanDefFrcdLogin, changePhysicalPortServiceDefSigDegThresOduTcmB=changePhysicalPortServiceDefSigDegThresOduTcmB, virtualPortDefType=virtualPortDefType, endOfOprThresholdConfigDefTable=endOfOprThresholdConfigDefTable, virtualPortDefSigDegPeriodOdu=virtualPortDefSigDegPeriodOdu, moduleDefTransmitChannel=moduleDefTransmitChannel, lldpDefEntry=lldpDefEntry, physicalPortDefPvid=physicalPortDefPvid, endOfContainerMgmtDef=endOfContainerMgmtDef, lanDefIpType=lanDefIpType, opticalLineDefRowStatus=opticalLineDefRowStatus, externalVchDefOsnrTransmit=externalVchDefOsnrTransmit, changePhysicalPortServiceDefSigDegPeriodIntegration=changePhysicalPortServiceDefSigDegPeriodIntegration, eccDefAlias=eccDefAlias, physicalPortDefUtag=physicalPortDefUtag, scDefAuthString=scDefAuthString, scDefEntry=scDefEntry, lanDefMtu=lanDefMtu, physicalPortDefTimModeOduTcmA=physicalPortDefTimModeOduTcmA, containerDefEntry=containerDefEntry, virtualPortDefTraceExpectedDapiOdu=virtualPortDefTraceExpectedDapiOdu, changePhysicalPortServiceDefSigDegPeriodSdhSection=changePhysicalPortServiceDefSigDegPeriodSdhSection, shelfDefPowerSupplyProtection=shelfDefPowerSupplyProtection, physicalPortDefSignalDegradePeriod=physicalPortDefSignalDegradePeriod, moduleDefCapabilityLevelProvision=moduleDefCapabilityLevelProvision, virtualPortDefSigDegPeriodOduTcmB=virtualPortDefSigDegPeriodOduTcmB, endOfDcnMgmtDef=endOfDcnMgmtDef, lldpDefAlias=lldpDefAlias, externalVchDefMaxOptPowerRcv=externalVchDefMaxOptPowerRcv, shelfDefSupply=shelfDefSupply, externalPortDefMinOsnrRcv=externalPortDefMinOsnrRcv, lldpDefLLDPScope=lldpDefLLDPScope, changePhysicalPortServiceDefAlsMode=changePhysicalPortServiceDefAlsMode, changePhysicalPortServiceDefFecType=changePhysicalPortServiceDefFecType, opticalMuxDefFiberBrand=opticalMuxDefFiberBrand, ffpDefTable=ffpDefTable, ffpDefRevertMode=ffpDefRevertMode, moduleDefLagSysPrio=moduleDefLagSysPrio, physicalPortDefTraceTransmitSapiOduTcmA=physicalPortDefTraceTransmitSapiOduTcmA, ffpDefWaitToRestore=ffpDefWaitToRestore, physicalPortDefSigDegPeriodOtu=physicalPortDefSigDegPeriodOtu, changePhysicalPortServiceDefLaserDelayTimer=changePhysicalPortServiceDefLaserDelayTimer, physicalPortDefTimModeOdu=physicalPortDefTimModeOdu, physicalPortDefCdCompensationRange=physicalPortDefCdCompensationRange, linkDefProxyArp=linkDefProxyArp, physicalPortDefForceLaserOn=physicalPortDefForceLaserOn, plugDefPlugMode=plugDefPlugMode, scDefAlias=scDefAlias, changePhysicalPortServiceDefTimModeOduTcmB=changePhysicalPortServiceDefTimModeOduTcmB, moduleDefDCFiberType=moduleDefDCFiberType, changePhysicalPortServiceDefTraceTransmitOpspOduTcmB=changePhysicalPortServiceDefTraceTransmitOpspOduTcmB, physicalPortDefTimModeSonetSection=physicalPortDefTimModeSonetSection, ffpDefDirection=ffpDefDirection, changePhysicalPortServiceDefTraceExpectedSonetSection=changePhysicalPortServiceDefTraceExpectedSonetSection, moduleDefAlias=moduleDefAlias, moduleDefType=moduleDefType, scDefDuplex=scDefDuplex, changePhysicalPortServiceDefFlowControl=changePhysicalPortServiceDefFlowControl, changePhysicalPortServiceDefOtnStuffing=changePhysicalPortServiceDefOtnStuffing, moduleDefDeploy=moduleDefDeploy, endOfEciDef=endOfEciDef, physicalPortDefSigDegPeriodSdhSection=physicalPortDefSigDegPeriodSdhSection, envPortDefRowStatus=envPortDefRowStatus, opticalMuxDefOffsetLow=opticalMuxDefOffsetLow, virtualPortDefTunnelAid=virtualPortDefTunnelAid, endOfLldpDefTable=endOfLldpDefTable, virtualPortDefSigDegThresOduTcmB=virtualPortDefSigDegThresOduTcmB, changePhysicalPortServiceDefTraceTransmitDapiOdu=changePhysicalPortServiceDefTraceTransmitDapiOdu, physicalPortDefRowStatus=physicalPortDefRowStatus, plugDefBidirectionalChannel=plugDefBidirectionalChannel, lldpDefRowStatus=lldpDefRowStatus, externalPortDefFarEndLocation=externalPortDefFarEndLocation, optThresholdConfigDefLowConfig=optThresholdConfigDefLowConfig, envMgmtDef=envMgmtDef, ffpDefApsFarEndModule=ffpDefApsFarEndModule, lanDefAuthType=lanDefAuthType, virtualPortDefTraceTransmitDapiOduTcmB=virtualPortDefTraceTransmitDapiOduTcmB, scDefMetric=scDefMetric, changePhysicalPortServiceDefType=changePhysicalPortServiceDefType, changePhysicalPortServiceDefVoaMode=changePhysicalPortServiceDefVoaMode, ffpDefApsType=ffpDefApsType, linkDefTable=linkDefTable, dcnMgmtDef=dcnMgmtDef, crossDcnDefRowStatus=crossDcnDefRowStatus, moduleDefTopology=moduleDefTopology, externalPortDefOpticalPowerTx=externalPortDefOpticalPowerTx, moduleDefScrambling=moduleDefScrambling, optThresholdConfigDefEntry=optThresholdConfigDefEntry, endOfScDefTable=endOfScDefTable, lanDefIpMode=lanDefIpMode, opticalMuxDefVoaSetpoint=opticalMuxDefVoaSetpoint, externalVchDefFecType=externalVchDefFecType, externalPortDefMaxPmdRcv=externalPortDefMaxPmdRcv, virtualPortDefSwitchCommand=virtualPortDefSwitchCommand, virtualPortDefRowStatus=virtualPortDefRowStatus, linkDefRowStatus=linkDefRowStatus, physicalPortDefPortRole=physicalPortDefPortRole, scDefDhcpStartAddr=scDefDhcpStartAddr, virtualPortDefLagActivePorts=virtualPortDefLagActivePorts, terminationPointDefTable=terminationPointDefTable, envPortDefEntry=envPortDefEntry, ffpDefProtectionMech=ffpDefProtectionMech, shelfDefTable=shelfDefTable, physicalPortDefDispersionMode=physicalPortDefDispersionMode, virtualPortDefBundle=virtualPortDefBundle, connectionDefType=connectionDefType, virtualPortDefTraceTransmitDapiOdu=virtualPortDefTraceTransmitDapiOdu, physicalPortDefPortMode=physicalPortDefPortMode, opticalMuxDefVariableGain=opticalMuxDefVariableGain, changePhysicalPortServiceDefSigDegPeriodOduTcmB=changePhysicalPortServiceDefSigDegPeriodOduTcmB, shelfDefEntry=shelfDefEntry, virtualPortDefTraceTransmitSapiOdu=virtualPortDefTraceTransmitSapiOdu, linkDefIPv6Type=linkDefIPv6Type, linkDefAuthType=linkDefAuthType, physicalPortDefTraceExpectedOpspOtu=physicalPortDefTraceExpectedOpspOtu, moduleDefTrafficDirection=moduleDefTrafficDirection, endOfEccDefTable=endOfEccDefTable, physicalPortDefRedLineState=physicalPortDefRedLineState, virtualPortDefSigDegPeriodOduTcmC=virtualPortDefSigDegPeriodOduTcmC, physicalPortDefSigDegThresOdu=physicalPortDefSigDegThresOdu, endOfSpecificMgmtDef=endOfSpecificMgmtDef, endOfChangePhysicalPortServiceDefTable=endOfChangePhysicalPortServiceDefTable, changePhysicalPortServiceDefAlias=changePhysicalPortServiceDefAlias, changePhysicalPortServiceDefTcmALevel=changePhysicalPortServiceDefTcmALevel, scDefDhcpMask=scDefDhcpMask, fanDefOutputReset=fanDefOutputReset, plugDefReach=plugDefReach, physicalPortDefEntry=physicalPortDefEntry, terminationPointDefAlias=terminationPointDefAlias, lanDefDhcpStopAddr=lanDefDhcpStopAddr, externalPortDefPmdTransmit=externalPortDefPmdTransmit, changePhysicalPortServiceDefTraceTransmitDapiOtu=changePhysicalPortServiceDefTraceTransmitDapiOtu, moduleDefSupply=moduleDefSupply, plugDefEntry=plugDefEntry, opticalMuxDefTiltSet=opticalMuxDefTiltSet, externalVchDefFrameFormat=externalVchDefFrameFormat, moduleDefPartner3=moduleDefPartner3, physicalPortDefDisparityCorrection=physicalPortDefDisparityCorrection, externalVchDefTable=externalVchDefTable, changePhysicalPortServiceDefSigDegThresOduTcmA=changePhysicalPortServiceDefSigDegThresOduTcmA, changePhysicalPortServiceDefErrorForwarding=changePhysicalPortServiceDefErrorForwarding, lanDefMetric=lanDefMetric, endOfOpticalLineDefTable=endOfOpticalLineDefTable, virtualPortDefSigDegPeriodOduTcmA=virtualPortDefSigDegPeriodOduTcmA, changePhysicalPortServiceDefVoaSetpoint=changePhysicalPortServiceDefVoaSetpoint, virtualPortDefTimModeOduTcmA=virtualPortDefTimModeOduTcmA, physicalPortDefAlsMode=physicalPortDefAlsMode, physicalPortDefSigDegThresSdhSection=physicalPortDefSigDegThresSdhSection, shelfDefRackOrder=shelfDefRackOrder, externalVchDefMinChromDisperRcv=externalVchDefMinChromDisperRcv, envPortDefTable=envPortDefTable, physicalPortDefTxOnTimer=physicalPortDefTxOnTimer, moduleDefMapping=moduleDefMapping, physicalPortDefSigDegThresOduTcmB=physicalPortDefSigDegThresOduTcmB, physicalPortDefLLDPNeighborsRx=physicalPortDefLLDPNeighborsRx, moduleDefForceConfig=moduleDefForceConfig, opticalLineDefEntry=opticalLineDefEntry, virtualPortDefLacpMode=virtualPortDefLacpMode)
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", opticalLineDefTxLineAttenuation=opticalLineDefTxLineAttenuation, endOfProtectionDef=endOfProtectionDef, plugDefLoopbackAttenuation=plugDefLoopbackAttenuation, physicalPortDefXfpDecisionThres=physicalPortDefXfpDecisionThres, lldpDefTable=lldpDefTable, opticalLineMgmtDef=opticalLineMgmtDef, externalPortDefAlias=externalPortDefAlias, changePhysicalPortServiceDefTcmBLevel=changePhysicalPortServiceDefTcmBLevel, endOfShelfConnDefTable=endOfShelfConnDefTable, endOfFiberMapDef=endOfFiberMapDef, linkDefIpType=linkDefIpType, containerDefRowStatus=containerDefRowStatus, changePhysicalPortServiceDefTraceExpectedOduTcmB=changePhysicalPortServiceDefTraceExpectedOduTcmB, changePhysicalPortServiceDefWdmRxChannel=changePhysicalPortServiceDefWdmRxChannel, physicalPortDefTraceTransmitSapiOduTcmB=physicalPortDefTraceTransmitSapiOduTcmB, changePhysicalPortServiceDefEqlzAdmin=changePhysicalPortServiceDefEqlzAdmin, physicalPortDefLoopConfig=physicalPortDefLoopConfig, physicalPortDefTimActionOtu=physicalPortDefTimActionOtu, connectionDefEntry=connectionDefEntry, changePhysicalPortServiceDefMode=changePhysicalPortServiceDefMode, endOfOpticalMuxMgmtDef=endOfOpticalMuxMgmtDef, moduleDefTable=moduleDefTable, physicalPortDefLossAttenuation=physicalPortDefLossAttenuation, virtualPortDefTraceExpectedOpspOdu=virtualPortDefTraceExpectedOpspOdu, linkDefFarEndIp=linkDefFarEndIp, virtualPortDefLacpTimeout=virtualPortDefLacpTimeout, virtualPortDefStagType=virtualPortDefStagType, physicalPortDefMonLevel=physicalPortDefMonLevel, eccDefEntry=eccDefEntry, moduleDefPartner1=moduleDefPartner1, crossConnectionDefCrsFunction=crossConnectionDefCrsFunction, physicalPortDefTxOffOnTm=physicalPortDefTxOffOnTm, physicalPortDefOpticalSetPointLane1=physicalPortDefOpticalSetPointLane1, virtualPortDefAdmin=virtualPortDefAdmin, changePhysicalPortServiceDefSigDegPeriodOtu=changePhysicalPortServiceDefSigDegPeriodOtu, scDefAreaAid=scDefAreaAid, moduleDefEntry=moduleDefEntry, opticalMuxMgmtDef=opticalMuxMgmtDef, physicalPortDefSwitchCommand=physicalPortDefSwitchCommand, optThresholdConfigDefTable=optThresholdConfigDefTable, scDefRowStatus=scDefRowStatus, ffpDefEntry=ffpDefEntry, scDefIpMask=scDefIpMask, changePhysicalPortServiceDefMonLevel=changePhysicalPortServiceDefMonLevel, linkDefAreaAid=linkDefAreaAid, changePhysicalPortServiceDefBehaviour=changePhysicalPortServiceDefBehaviour, moduleDefRoadmNumber=moduleDefRoadmNumber, endOfFanDefTable=endOfFanDefTable, plugDefRowStatus=plugDefRowStatus, opticalLineDefChannelBandwith=opticalLineDefChannelBandwith, endOfPerformanceFacilityThresholdDef=endOfPerformanceFacilityThresholdDef, physicalPortDefSigDegThresSonetLine=physicalPortDefSigDegThresSonetLine, scDefLanAid=scDefLanAid, physicalPortDefTraceExpectedDapiOdu=physicalPortDefTraceExpectedDapiOdu, virtualPortDefSigDegThresOduTcmC=virtualPortDefSigDegThresOduTcmC, physicalPortDefLaserOnTimer=physicalPortDefLaserOnTimer, physicalPortDefSigDegThreshold=physicalPortDefSigDegThreshold, opticalMuxDefForceFwdAsePilotOn=opticalMuxDefForceFwdAsePilotOn, changePhysicalPortServiceDefTraceExpectedOtu=changePhysicalPortServiceDefTraceExpectedOtu, physicalPortDefTributarySlotMethod=physicalPortDefTributarySlotMethod, plugDefLaneGroup=plugDefLaneGroup, lldpDefAdmin=lldpDefAdmin, changePhysicalPortServiceDefTraceTransmitSonetSection=changePhysicalPortServiceDefTraceTransmitSonetSection, opticalLineDefFiberLength=opticalLineDefFiberLength, changePhysicalPortServiceDefOpticalSetPoint=changePhysicalPortServiceDefOpticalSetPoint, physicalPortDefOtnStuffing=physicalPortDefOtnStuffing, moduleDefGainRange=moduleDefGainRange, managementDef=managementDef, moduleDefNdpCleanup=moduleDefNdpCleanup, virtualPortDefTerminationLevel=virtualPortDefTerminationLevel, physicalPortDefCdPostCompensationRange=physicalPortDefCdPostCompensationRange, scDefGatewayProxyArp=scDefGatewayProxyArp, linkDefMetric=linkDefMetric, scDefMtu=scDefMtu, eccDefLanAid=eccDefLanAid, fanDefAdmin=fanDefAdmin, virtualPortDefTcmALevel=virtualPortDefTcmALevel, moduleDefOscUsage=moduleDefOscUsage, linkDefEntry=linkDefEntry, physicalPortDefChannelProv=physicalPortDefChannelProv, virtualPortDefTraceTransmitDapiOduTcmC=virtualPortDefTraceTransmitDapiOduTcmC, changePhysicalPortServiceDefTimModeOduTcmC=changePhysicalPortServiceDefTimModeOduTcmC, physicalPortDefTraceTransmitSapiOdu=physicalPortDefTraceTransmitSapiOdu, physicalPortDefOptimize=physicalPortDefOptimize, fanDefType=fanDefType, linkDefRetransmitInterval=linkDefRetransmitInterval, changePhysicalPortServiceDefChannelProv=changePhysicalPortServiceDefChannelProv, changePhysicalPortServiceDefTimModeSonetSection=changePhysicalPortServiceDefTimModeSonetSection, virtualPortDefOptSetDeviation=virtualPortDefOptSetDeviation, changePhysicalPortServiceDefTraceTransmitSapiOduTcmA=changePhysicalPortServiceDefTraceTransmitSapiOduTcmA, crossConnectionDefTable=crossConnectionDefTable, endOfShelfDefTable=endOfShelfDefTable, moduleDefRowStatus=moduleDefRowStatus, moduleDefSfProvision=moduleDefSfProvision, physicalPortDefSigDegThresOduTcmC=physicalPortDefSigDegThresOduTcmC, scDefFrcdLogin=scDefFrcdLogin, opticalLineDefTable=opticalLineDefTable, externalVchDefPmdTransmit=externalVchDefPmdTransmit, virtualPortDefTraceTransmitDapiOduTcmA=virtualPortDefTraceTransmitDapiOduTcmA, virtualPortDefDataLayerPmReset=virtualPortDefDataLayerPmReset, changePhysicalPortServiceDefTraceTransmitDapiOduTcmC=changePhysicalPortServiceDefTraceTransmitDapiOduTcmC, shelfConnDefDuplex=shelfConnDefDuplex, physicalPortDefTimActionOdu=physicalPortDefTimActionOdu, opticalMuxDefOscOpticalSetpoint=opticalMuxDefOscOpticalSetpoint, shelfDefAirFilterClear=shelfDefAirFilterClear, opticalMuxDefTable=opticalMuxDefTable, externalVchDefBitrate=externalVchDefBitrate, moduleDefPartner2=moduleDefPartner2, physicalPortDefTraceTransmitOpspOdu=physicalPortDefTraceTransmitOpspOdu, virtualPortDefTraceTransmitSapiOduTcmB=virtualPortDefTraceTransmitSapiOduTcmB, lanDefOspf=lanDefOspf, physicalPortDefAutoThresReset=physicalPortDefAutoThresReset, physicalPortDefDispersionSetting=physicalPortDefDispersionSetting, externalOmDefRowStatus=externalOmDefRowStatus, changePhysicalPortServiceDefLaserOnTimer=changePhysicalPortServiceDefLaserOnTimer, virtualPortDefTraceTransmitOpspOduTcmB=virtualPortDefTraceTransmitOpspOduTcmB, scDefMdix=scDefMdix, externalPortDefSourceProfile=externalPortDefSourceProfile, externalVchDefLineCoding=externalVchDefLineCoding, virtualPortDefPayload=virtualPortDefPayload, opticalLineDefFarEndLocation=opticalLineDefFarEndLocation, changePhysicalPortServiceDefSigDegPcslThreshold=changePhysicalPortServiceDefSigDegPcslThreshold, ffpDefSDswitching=ffpDefSDswitching, changePhysicalPortServiceDefDisparityCorrection=changePhysicalPortServiceDefDisparityCorrection, advaFspR7Def=advaFspR7Def, lanDefIPv6PrefixLen=lanDefIPv6PrefixLen, externalVchDefMinOptPowerRcv=externalVchDefMinOptPowerRcv, changePhysicalPortServiceDefSigDegThresOtu=changePhysicalPortServiceDefSigDegThresOtu, virtualPortDefLoopConfig=virtualPortDefLoopConfig, lldpDefType=lldpDefType, scDefIPv6=scDefIPv6, moduleDefAdmin=moduleDefAdmin, lanDefRetransmitInterval=lanDefRetransmitInterval, endOfOpticalMuxDefTable=endOfOpticalMuxDefTable, changePhysicalPortServiceDefSigDegThresOdu=changePhysicalPortServiceDefSigDegThresOdu, moduleDefFiberType=moduleDefFiberType, protectionDef=protectionDef, endOfFacilityMgmtDef=endOfFacilityMgmtDef, physicalPortDefDispertionConfig=physicalPortDefDispertionConfig, opticalMuxDefSwitchCommand=opticalMuxDefSwitchCommand, scDefIPv6PrefixLen=scDefIPv6PrefixLen, physicalPortDefTestPrbsTrmtMode=physicalPortDefTestPrbsTrmtMode, virtualPortDefTraceExpectedOdu=virtualPortDefTraceExpectedOdu, virtualPortDefOpuPayloadType=virtualPortDefOpuPayloadType, changePhysicalPortServiceDefTraceExpectedOdu=changePhysicalPortServiceDefTraceExpectedOdu, virtualPortDefLagPortType=virtualPortDefLagPortType, opticalMuxDefTilt=opticalMuxDefTilt, linkDefMtu=linkDefMtu, changePhysicalPortServiceDefAutoPTassignment=changePhysicalPortServiceDefAutoPTassignment, virtualPortDefTraceExpectedOduTcmB=virtualPortDefTraceExpectedOduTcmB, scDefRetransmitInterval=scDefRetransmitInterval, physicalPortDefLaserOffDelayFunction=physicalPortDefLaserOffDelayFunction, lanDefDhcpServer=lanDefDhcpServer, changePhysicalPortServiceDefTraceTransmitSapiOduTcmB=changePhysicalPortServiceDefTraceTransmitSapiOduTcmB, linkDefBaud=linkDefBaud, changePhysicalPortServiceDefFarEndCommunication=changePhysicalPortServiceDefFarEndCommunication, terminationPointDefFiberDetect=terminationPointDefFiberDetect, externalPortDefMaxBitErrorRate=externalPortDefMaxBitErrorRate, physicalPortDefSigDegPeriodOdu=physicalPortDefSigDegPeriodOdu, physicalPortDefTunnelAid=physicalPortDefTunnelAid, physicalPortDefTraceExpectedOduTcmC=physicalPortDefTraceExpectedOduTcmC, lanDefAlias=lanDefAlias, changePhysicalPortServiceDefDispersionSetting=changePhysicalPortServiceDefDispersionSetting, shelfConnDefTable=shelfConnDefTable, crossConnectionDefEntry=crossConnectionDefEntry, physicalPortDefTerminationMode=physicalPortDefTerminationMode, virtualPortDefInitEqlz=virtualPortDefInitEqlz, physicalPortDefLLDPNeighborsTx=physicalPortDefLLDPNeighborsTx, lanDefType=lanDefType, virtualPortDefPriority=virtualPortDefPriority, opticalMuxDefEntry=opticalMuxDefEntry, externalVchDefMinOsnrRcv=externalVchDefMinOsnrRcv, fiberMapDef=fiberMapDef, virtualPortDefVcType=virtualPortDefVcType, scDefIpAddr=scDefIpAddr, physicalPortDefTraceTransmitDapiOduTcmC=physicalPortDefTraceTransmitDapiOduTcmC, physicalPortDefRateLimit=physicalPortDefRateLimit, virtualPortDefSigDegThresOdu=virtualPortDefSigDegThresOdu, opticalLineDefRxLineAttenuation=opticalLineDefRxLineAttenuation, externalOmDefType=externalOmDefType, changePhysicalPortServiceDefCodeGain=changePhysicalPortServiceDefCodeGain, virtualPortDefInhibitSwitchToProt=virtualPortDefInhibitSwitchToProt, moduleDefPsuOutputPower=moduleDefPsuOutputPower, externalVchDefAlias=externalVchDefAlias, externalVchDefType=externalVchDefType, physicalPortDefLaneChannelSetting=physicalPortDefLaneChannelSetting, crossConnectionDefAlias=crossConnectionDefAlias, moduleDefPartner4=moduleDefPartner4, physicalPortDefFarEndCommunication=physicalPortDefFarEndCommunication, virtualPortDefTraceExpectedOduTcmA=virtualPortDefTraceExpectedOduTcmA, containerMgmtDef=containerMgmtDef, opticalMuxDefOpticalSetPoint=opticalMuxDefOpticalSetPoint, opticalMuxDefBandProvision=opticalMuxDefBandProvision, physicalPortDefTurnupConfig=physicalPortDefTurnupConfig, externalOmDefHostName=externalOmDefHostName, lanDefIpAddr=lanDefIpAddr, linkDefBitrate=linkDefBitrate, physicalPortDefChannelPlan=physicalPortDefChannelPlan, endOfModuleDefTable=endOfModuleDefTable, physicalPortDefTraceExpectedOpspOdu=physicalPortDefTraceExpectedOpspOdu, linkDefOspf=linkDefOspf, physicalPortDefLagPrio=physicalPortDefLagPrio, featureSpecificDef=featureSpecificDef, shelfConnDefAutonegotiation=shelfConnDefAutonegotiation, scDefSigDegThresReceiver=scDefSigDegThresReceiver, physicalPortDefTraceTransmitDapiOtu=physicalPortDefTraceTransmitDapiOtu, ffpDefPeerAid=ffpDefPeerAid, plugDefAlias=plugDefAlias, moduleDefOutputReset=moduleDefOutputReset, physicalPortDefEncryptionChannel=physicalPortDefEncryptionChannel, moduleDefSubBandProvision=moduleDefSubBandProvision, physicalPortDefTcmCLevel=physicalPortDefTcmCLevel, virtualPortDefMaxFrameSize=virtualPortDefMaxFrameSize, opticalMuxDefAttenuationGradient=opticalMuxDefAttenuationGradient, physicalPortDefTraceTransmitOpspOduTcmB=physicalPortDefTraceTransmitOpspOduTcmB, physicalPortDefOpticalSetPoint=physicalPortDefOpticalSetPoint, linkDefDeadInterval=linkDefDeadInterval, opticalMuxDefAdmin=opticalMuxDefAdmin, crossDcnDefType=crossDcnDefType, changePhysicalPortServiceDefTraceTransmitOpspOduTcmC=changePhysicalPortServiceDefTraceTransmitOpspOduTcmC, scDefAuthType=scDefAuthType, externalPortDefMaxOptPowerRcv=externalPortDefMaxOptPowerRcv, physicalPortDefTimDetModeOdu=physicalPortDefTimDetModeOdu, moduleDefMuxMethod=moduleDefMuxMethod, changePhysicalPortServiceDefSigDegThresOduTcmC=changePhysicalPortServiceDefSigDegThresOduTcmC, plugDefChannelSpacingProvision=plugDefChannelSpacingProvision, envPortDefTifAlarmMessage=envPortDefTifAlarmMessage, physicalPortDefTcmALevel=physicalPortDefTcmALevel, physicalPortDefPayload=physicalPortDefPayload, virtualPortDefEntry=virtualPortDefEntry, changePhysicalPortServiceDefTimModeOdu=changePhysicalPortServiceDefTimModeOdu, opticalMuxDefSigDegThresReceiver=opticalMuxDefSigDegThresReceiver, opticalMuxDefPumpPower=opticalMuxDefPumpPower, PYSNMP_MODULE_ID=advaFspR7Def, crossConnectionDefPathNode=crossConnectionDefPathNode, changePhysicalPortServiceDefSigDegPeriodOduTcmA=changePhysicalPortServiceDefSigDegPeriodOduTcmA, virtualPortDefPortMode=virtualPortDefPortMode, physicalPortDefTxOffTimer=physicalPortDefTxOffTimer, lanDefDeadInterval=lanDefDeadInterval, physicalPortDefErrorForwarding=physicalPortDefErrorForwarding, facilityMgmtDef=facilityMgmtDef, physicalPortDefMode=physicalPortDefMode, changePhysicalPortServiceDefTxOffDelay=changePhysicalPortServiceDefTxOffDelay, moduleDefBand=moduleDefBand, crossOpticalLineDefRedLineState=crossOpticalLineDefRedLineState, externalVchDefChannelBandwith=externalVchDefChannelBandwith, externalPortDefTable=externalPortDefTable, virtualPortDefPrbsPmReset=virtualPortDefPrbsPmReset, crossDcnDefEcc=crossDcnDefEcc, shelfConnDefDataLayerPmReset=shelfConnDefDataLayerPmReset, changePhysicalPortServiceDefTimModeOduTcmA=changePhysicalPortServiceDefTimModeOduTcmA, moduleDefMode=moduleDefMode, externalVchDefFarEndLocation=externalVchDefFarEndLocation, shelfDefRackNumber=shelfDefRackNumber)
mibBuilder.exportSymbols("ADVA-FSPR7-DEF-MIB", changePhysicalPortServiceDefDispersionMode=changePhysicalPortServiceDefDispersionMode, physicalPortDefInhibitSwitchToProt=physicalPortDefInhibitSwitchToProt, opticalMuxDefEdfaPwrOut=opticalMuxDefEdfaPwrOut, lanDefRowStatus=lanDefRowStatus, changePhysicalPortServiceDefTerminationLevel=changePhysicalPortServiceDefTerminationLevel, physicalPortDefAlias=physicalPortDefAlias, externalVchDefOpticalPowerTx=externalVchDefOpticalPowerTx, externalPortDefRowStatus=externalPortDefRowStatus, ffpDefProtectionType=ffpDefProtectionType, changePhysicalPortServiceDefLaneChannelSetting=changePhysicalPortServiceDefLaneChannelSetting, shelfConnDefFacilityType=shelfConnDefFacilityType, physicalPortDefLaserDelayTimer=physicalPortDefLaserDelayTimer, moduleDefChannelSpacingProvision=moduleDefChannelSpacingProvision, lanDefTable=lanDefTable, physicalPortDefFecType=physicalPortDefFecType, shelfConnDefEntry=shelfConnDefEntry, physicalPortDefTraceTransmitDapiOdu=physicalPortDefTraceTransmitDapiOdu, virtualPortDefAlias=virtualPortDefAlias, endOfEnvPortDefTable=endOfEnvPortDefTable, linkDefNendIPv6=linkDefNendIPv6, virtualPortDefTraceTransmitSapiOduTcmA=virtualPortDefTraceTransmitSapiOduTcmA, linkDefNearEndIp=linkDefNearEndIp, physicalPortDefTraceTransmitDapiOduTcmA=physicalPortDefTraceTransmitDapiOduTcmA, crossOpticalLineDefTunnelAid=crossOpticalLineDefTunnelAid, performanceDef=performanceDef, physicalPortDefTraceTransmitOpspOtu=physicalPortDefTraceTransmitOpspOtu, physicalPortDefSigDegPeriodOduTcmC=physicalPortDefSigDegPeriodOduTcmC, linkDefAuthString=linkDefAuthString, changePhysicalPortServiceDefSigDegThreshold=changePhysicalPortServiceDefSigDegThreshold, eccDefExternalVid=eccDefExternalVid, opticalMuxDefAlsMode=opticalMuxDefAlsMode, physicalPortDefAutoPTassignment=physicalPortDefAutoPTassignment, physicalPortDefOpuPayloadType=physicalPortDefOpuPayloadType, shelfDefBandProvision=shelfDefBandProvision, virtualPortDefTraceExpectedOduTcmC=virtualPortDefTraceExpectedOduTcmC, virtualPortDefTimModeOduTcmC=virtualPortDefTimModeOduTcmC, moduleDefRemoteReset=moduleDefRemoteReset, externalVchDefTransmitChannel=externalVchDefTransmitChannel, changePhysicalPortServiceDefLaserOffDelayFunction=changePhysicalPortServiceDefLaserOffDelayFunction, physicalPortDefPrbsPmReset=physicalPortDefPrbsPmReset, changePhysicalPortServiceDefTraceTransmitOpspOtu=changePhysicalPortServiceDefTraceTransmitOpspOtu, lanDefDhcpStartAddr=lanDefDhcpStartAddr, physicalPortDefSigDegPeriodIntegration=physicalPortDefSigDegPeriodIntegration, endOfContainerDefTable=endOfContainerDefTable, physicalPortDefBehaviour=physicalPortDefBehaviour, envPortDefFacilityType=envPortDefFacilityType, opticalMuxDefGain=opticalMuxDefGain, physicalPortDefTxOffDelay=physicalPortDefTxOffDelay, crossDcnDefEntry=crossDcnDefEntry, endOfCrossDcnDefTable=endOfCrossDcnDefTable, changePhysicalPortServiceDefAdmin=changePhysicalPortServiceDefAdmin, eccDefAdmin=eccDefAdmin, physicalPortDefStagType=physicalPortDefStagType, virtualPortDefOtnStuffing=virtualPortDefOtnStuffing, fanDefTable=fanDefTable, physicalPortDefSigDegThresSonetSection=physicalPortDefSigDegThresSonetSection, changePhysicalPortServiceDefChannelSpacing=changePhysicalPortServiceDefChannelSpacing, changePhysicalPortServiceDefRowStatus=changePhysicalPortServiceDefRowStatus, crossDcnDefTable=crossDcnDefTable, externalPortDefEntry=externalPortDefEntry, physicalPortDefTimModeOtu=physicalPortDefTimModeOtu, opticalMuxDefVariableGainNtoR=opticalMuxDefVariableGainNtoR, virtualPortDefEqlzAdmin=virtualPortDefEqlzAdmin, externalOmDefEntry=externalOmDefEntry, scDefIpMode=scDefIpMode, shelfDefType=shelfDefType, lanDefIpMask=lanDefIpMask, externalPortDefMaxChromDisperRcv=externalPortDefMaxChromDisperRcv, scDefBitrate=scDefBitrate, externalVchDefMaxPmdRcv=externalVchDefMaxPmdRcv, moduleDefChannelsProvision=moduleDefChannelsProvision, moduleDefInitEqlz=moduleDefInitEqlz, changePhysicalPortServiceDefSigDegThresSdhMs=changePhysicalPortServiceDefSigDegThresSdhMs, virtualPortDefTestPrbsTrmtMode=virtualPortDefTestPrbsTrmtMode, opticalMuxDefOffset=opticalMuxDefOffset, changePhysicalPortServiceDefTraceTransmitSapiOduTcmC=changePhysicalPortServiceDefTraceTransmitSapiOduTcmC, changePhysicalPortServiceDefTraceTransmitSapiOdu=changePhysicalPortServiceDefTraceTransmitSapiOdu, changePhysicalPortServiceDefTraceTransmitDapiOduTcmB=changePhysicalPortServiceDefTraceTransmitDapiOduTcmB, containerDefTable=containerDefTable, physicalPortDefWdmRxChannel=physicalPortDefWdmRxChannel, shelfDefRowStatus=shelfDefRowStatus, moduleDefRstp=moduleDefRstp, crossOpticalLineDefRowStatus=crossOpticalLineDefRowStatus, changePhysicalPortServiceDefSigDegPeriodOdu=changePhysicalPortServiceDefSigDegPeriodOdu, changePhysicalPortServiceDefTimModeOtu=changePhysicalPortServiceDefTimModeOtu, ffpDefRowStatus=ffpDefRowStatus, plugDefType=plugDefType, opticalLineDefAlias=opticalLineDefAlias, externalVchDefChromDisperTx=externalVchDefChromDisperTx, linkDefType=linkDefType, externalPortDefMinOptPowerRcv=externalPortDefMinOptPowerRcv, physicalPortDefSigDegPcslThreshold=physicalPortDefSigDegPcslThreshold, performanceFacilityDef=performanceFacilityDef, plugDefAdmin=plugDefAdmin, envPortDefTifAlarmType=envPortDefTifAlarmType, scDefIpType=scDefIpType, shelfDefSlot=shelfDefSlot, physicalPortDefEqlzAdmin=physicalPortDefEqlzAdmin, eccDefRowStatus=eccDefRowStatus, moduleDefFiberDetect=moduleDefFiberDetect, envPortDefInvertTifInputLogic=envPortDefInvertTifInputLogic, physicalPortDefSigDegThresSdhMs=physicalPortDefSigDegThresSdhMs, physicalPortDefTimDetModeOtu=physicalPortDefTimDetModeOtu, physicalPortDefSigDegPeriodOduTcmB=physicalPortDefSigDegPeriodOduTcmB, opticalMuxDefAseTabCreation=opticalMuxDefAseTabCreation, externalPortDefChromDisperTx=externalPortDefChromDisperTx, virtualPortDefCir=virtualPortDefCir, physicalPortDefTimingSource=physicalPortDefTimingSource, crossConnectionDefRedLineState=crossConnectionDefRedLineState, virtualPortDefRevertiveMode=virtualPortDefRevertiveMode, physicalPortDefLaneChannel1=physicalPortDefLaneChannel1, physicalPortDefTraceTransmitOpspOduTcmA=physicalPortDefTraceTransmitOpspOduTcmA, physicalPortDefVoaMode=physicalPortDefVoaMode, containerDefFacilityType=containerDefFacilityType, shelfDefAlias=shelfDefAlias, lldpDefDataLayerPmReset=lldpDefDataLayerPmReset, physicalPortDefTraceTransmitOpspOduTcmC=physicalPortDefTraceTransmitOpspOduTcmC, physicalPortDefLaneChannel2=physicalPortDefLaneChannel2, shelfConnDefBitrate=shelfConnDefBitrate, physicalPortDefTraceTransmitDapiOduTcmB=physicalPortDefTraceTransmitDapiOduTcmB, opticalMuxDefDataLayerPmReset=opticalMuxDefDataLayerPmReset, changePhysicalPortServiceDefEntry=changePhysicalPortServiceDefEntry, ffpDefHoldOffTime=ffpDefHoldOffTime, opticalMuxDefRowStatus=opticalMuxDefRowStatus, crossOpticalLineDefCrsType=crossOpticalLineDefCrsType, crossOpticalLineDefAlias=crossOpticalLineDefAlias, linkDefHelloInterval=linkDefHelloInterval, scDefDeadInterval=scDefDeadInterval, externalPortDefOsnrTransmit=externalPortDefOsnrTransmit, physicalPortDefTraceExpectedOtu=physicalPortDefTraceExpectedOtu, terminationPointDefEntry=terminationPointDefEntry, physicalPortDefTraceExpectedOdu=physicalPortDefTraceExpectedOdu, scDefAutonegotiation=scDefAutonegotiation, crossConnectionDefTunnelAid=crossConnectionDefTunnelAid, changePhysicalPortServiceDefTcmCLevel=changePhysicalPortServiceDefTcmCLevel, endOfFfpDefTable=endOfFfpDefTable, crossConnectionDefRowStatus=crossConnectionDefRowStatus, physicalPortDefSigDegThresOduTcmA=physicalPortDefSigDegThresOduTcmA, opticalMuxDefForceLaserOn=opticalMuxDefForceLaserOn, eccDefType=eccDefType, virtualPortDefTestPrbsRcvMode=virtualPortDefTestPrbsRcvMode, virtualPortDefTraceTransmitSapiOduTcmC=virtualPortDefTraceTransmitSapiOduTcmC, physicalPortDefTraceExpectedOduTcmA=physicalPortDefTraceExpectedOduTcmA, linkDefAdmin=linkDefAdmin, lanDefAuthString=lanDefAuthString, oprThresholdConfigDefTable=oprThresholdConfigDefTable, virtualPortDefTraceTransmitOpspOdu=virtualPortDefTraceTransmitOpspOdu, endOfEnvMgmtDef=endOfEnvMgmtDef, moduleDefChannelsNumber=moduleDefChannelsNumber, eccDefTable=eccDefTable, opticalMuxDefVariableGainRtoN=opticalMuxDefVariableGainRtoN, ffpDefSignalFailureSwitching=ffpDefSignalFailureSwitching, specificMgmtDef=specificMgmtDef, opticalMuxDefOptUpdate=opticalMuxDefOptUpdate, moduleDefAcp=moduleDefAcp, connectionDefTable=connectionDefTable, changePhysicalPortServiceDefXfpDecisionThres=changePhysicalPortServiceDefXfpDecisionThres, performanceFacilityThresholdDef=performanceFacilityThresholdDef, plugDefLength=plugDefLength, eciDef=eciDef, endOfCrossOpticalLineDefTable=endOfCrossOpticalLineDefTable, physicalPortDefTestPrbsRcvMode=physicalPortDefTestPrbsRcvMode, virtualPortDefOduTribTimeSlottNo=virtualPortDefOduTribTimeSlottNo, virtualPortDefPortRole=virtualPortDefPortRole, eqptMgmtDef=eqptMgmtDef, virtualPortDefTimDetModeOdu=virtualPortDefTimDetModeOdu, oprThresholdConfigDefLowConfig=oprThresholdConfigDefLowConfig, moduleDefChannelSpacing=moduleDefChannelSpacing, virtualPortDefChannelBand=virtualPortDefChannelBand, physicalPortDefTraceExpectedSonetSection=physicalPortDefTraceExpectedSonetSection, endOfVirtualPortDefTable=endOfVirtualPortDefTable, lanDefPriority=lanDefPriority, endOfConnectionDefTable=endOfConnectionDefTable, lanDefIPv6=lanDefIPv6, endOfEqptMgmtDef=endOfEqptMgmtDef, virtualPortDefTimModeOduTcmB=virtualPortDefTimModeOduTcmB, physicalPortDefChannelSpacing=physicalPortDefChannelSpacing, scDefDataLayerPmReset=scDefDataLayerPmReset, oprThresholdConfigDefEntry=oprThresholdConfigDefEntry, moduleDefActivateDetect=moduleDefActivateDetect, virtualPortDefInhibitSwitchToWork=virtualPortDefInhibitSwitchToWork, optThresholdConfigDefHighConfig=optThresholdConfigDefHighConfig, physicalPortDefVoaSetpoint=physicalPortDefVoaSetpoint, plugDefMaxDataRate=plugDefMaxDataRate, externalPortDefTransmitChannel=externalPortDefTransmitChannel, virtualPortDefTcmBLevel=virtualPortDefTcmBLevel, virtualPortDefTimActionOdu=virtualPortDefTimActionOdu, virtualPortDefUtag=virtualPortDefUtag, endOfExternalPortDefTable=endOfExternalPortDefTable, moduleDefLanAid=moduleDefLanAid, physicalPortDefReportSsfLine=physicalPortDefReportSsfLine, endOfChangeServiceDef=endOfChangeServiceDef, physicalPortDefTimModeOduTcmC=physicalPortDefTimModeOduTcmC, lanDefEntry=lanDefEntry, shelfConnDefMdix=shelfConnDefMdix, moduleDefPower=moduleDefPower, plugDefPlugType=plugDefPlugType, scDefAdmin=scDefAdmin, endOfPlugDefTable=endOfPlugDefTable, scDefHelloInterval=scDefHelloInterval, externalPortDefFecType=externalPortDefFecType, physicalPortDefFlowControl=physicalPortDefFlowControl, moduleDefGroup=moduleDefGroup, ffpDefWorkingAid=ffpDefWorkingAid, scDefDhcpServer=scDefDhcpServer, changePhysicalPortServiceDefOptimize=changePhysicalPortServiceDefOptimize, externalPortDefType=externalPortDefType, opticalMuxDefInhibitSwitchToWork=opticalMuxDefInhibitSwitchToWork, virtualPortDefTraceTransmitOpspOduTcmC=virtualPortDefTraceTransmitOpspOduTcmC, externalPortDefLineCoding=externalPortDefLineCoding, lanDefAreaAid=lanDefAreaAid, externalVchDefEntry=externalVchDefEntry, externalVchDefMaxBitErrorRate=externalVchDefMaxBitErrorRate, physicalPortDefSigDegPeriodOduTcmA=physicalPortDefSigDegPeriodOduTcmA, terminationPointDefRowStatus=terminationPointDefRowStatus, changePhysicalPortServiceDefTraceTransmitDapiOduTcmA=changePhysicalPortServiceDefTraceTransmitDapiOduTcmA, ffpDefProtectionAid=ffpDefProtectionAid, changePhysicalPortServiceDefTraceExpectedOduTcmA=changePhysicalPortServiceDefTraceExpectedOduTcmA, shelfConnDefAlias=shelfConnDefAlias, changePhysicalPortServiceDefLaserOffTimer=changePhysicalPortServiceDefLaserOffTimer, physicalPortDefTerminationLevel=physicalPortDefTerminationLevel, lanDefHelloInterval=lanDefHelloInterval, scDefTable=scDefTable, moduleDefIpAddr=moduleDefIpAddr, physicalPortDefAdmin=physicalPortDefAdmin, moduleDefDispersionCompensation=moduleDefDispersionCompensation, physicalPortDefLaserOffTimer=physicalPortDefLaserOffTimer, crossOpticalLineDefEntry=crossOpticalLineDefEntry, physicalPortDefLinkSetup=physicalPortDefLinkSetup, virtualPortDefRedLineState=virtualPortDefRedLineState, physicalPortDefReportAisLine=physicalPortDefReportAisLine, externalPortDefMinChromDisperRcv=externalPortDefMinChromDisperRcv, scDefPriority=scDefPriority, virtualPortDefTimModeOdu=virtualPortDefTimModeOdu, externalPortDefFrameFormat=externalPortDefFrameFormat, opticalMuxDefType=opticalMuxDefType, externalVchDefRowStatus=externalVchDefRowStatus)
