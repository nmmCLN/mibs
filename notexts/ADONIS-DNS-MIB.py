#
# PySNMP MIB module ADONIS-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bluecatnetworks/ADONIS-DNS-MIB
# Produced by pysmi-1.1.8 at Thu Feb  9 13:17:23 2023
# On host fv-az255-593 platform Linux version 5.15.0-1031-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
appliances, = mibBuilder.importSymbols("BLUECATNETWORKS-MIB", "appliances")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, Bits, Counter32, NotificationType, iso, IpAddress, Counter64, Gauge32, TimeTicks, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "Bits", "Counter32", "NotificationType", "iso", "IpAddress", "Counter64", "Gauge32", "TimeTicks", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adonis = ModuleIdentity((1, 3, 6, 1, 4, 1, 13315, 100, 101))
if mibBuilder.loadTexts: adonis.setLastUpdated('200810010000Z')
if mibBuilder.loadTexts: adonis.setOrganization('BlueCat Networks Inc.')
adonisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1))
dnsDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2))
dhcpDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 1))
dhcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2))
dhcpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 3))
ha = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 3))
haService = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 3, 1))
commandServer = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 4))
commandServerDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 4, 1))
lcd = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 5))
lcdDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 5, 1))
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 6))
tftpDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 6, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 7))
systemDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 7, 1))
adonisTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2))
trapDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 1))
trapHA = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 2))
trapCommandServer = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 3))
trapDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 4))
trapReplication = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 5))
trapTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 6))
trapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 7))
dnsDaemonRunning = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonRunning.setStatus('current')
dnsDaemonNumberOfZones = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonNumberOfZones.setStatus('current')
dnsDaemonDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonDebugLevel.setStatus('current')
dnsDaemonZoneTransfersInProgress = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonZoneTransfersInProgress.setStatus('current')
dnsDaemonZoneTransfersDeferred = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonZoneTransfersDeferred.setStatus('current')
dnsDaemonSOAQueriesInProgress = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonSOAQueriesInProgress.setStatus('current')
dnsDaemonQueryLoggingState = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonQueryLoggingState.setStatus('current')
dnsDaemonZoneTransferFailure = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDaemonZoneTransferFailure.setStatus('current')
dnsStatsSuccess = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsSuccess.setStatus('current')
dnsStatsReferral = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsReferral.setStatus('current')
dnsStatsNXRRSet = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsNXRRSet.setStatus('current')
dnsStatsNXDomain = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsNXDomain.setStatus('current')
dnsStatsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsRecursion.setStatus('current')
dnsStatsFailure = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatsFailure.setStatus('current')
dhcpDaemonRunning = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDaemonRunning.setStatus('current')
dhcpDaemonSubnetAlert = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDaemonSubnetAlert.setStatus('current')
dhcpDaemonLeaseStatsSuccess = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDaemonLeaseStatsSuccess.setStatus('current')
dhcpFailOverState = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpFailOverState.setStatus('current')
dhcpLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseTable.setStatus('current')
dhcpLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1), ).setMaxAccess("readonly").setIndexNames((0, "ADONIS-DNS-MIB", "dhcpIP"))
if mibBuilder.loadTexts: dhcpLeaseEntry.setStatus('current')
dhcpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIP.setStatus('current')
dhcpLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseStartTime.setStatus('current')
dhcpLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseEndTime.setStatus('current')
dhcpLeaseTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseTimeStamp.setStatus('current')
dhcpLeaseBindState = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("free", 0), ("active", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseBindState.setStatus('current')
dhcpLeaseHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseHardwareAddress.setStatus('current')
dhcpLeaseHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseHostname.setStatus('current')
dhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetTable.setStatus('current')
dhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "ADONIS-DNS-MIB", "dhcpSubnetIP"))
if mibBuilder.loadTexts: dhcpSubnetEntry.setStatus('current')
dhcpSubnetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetIP.setStatus('current')
dhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('current')
dhcpSubnetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetSize.setStatus('current')
dhcpSubnetUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetUsed.setStatus('current')
dhcpSubnetAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetAlert.setStatus('current')
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1), ).setMaxAccess("readonly").setIndexNames((0, "ADONIS-DNS-MIB", "dhcpPoolStartIP"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
dhcpPoolSubnetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolSubnetIP.setStatus('current')
dhcpPoolStartIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolStartIP.setStatus('current')
dhcpPoolEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolEndIP.setStatus('current')
dhcpPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolSize.setStatus('current')
dhcpPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolUsed.setStatus('current')
dhcpPoolAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolAlert.setStatus('current')
dhcpFixedIPTable = MibTable((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 3, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpFixedIPTable.setStatus('current')
dhcpFixedIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 3, 1, 1), ).setMaxAccess("readonly").setIndexNames((0, "ADONIS-DNS-MIB", "dhcpFixedIP"))
if mibBuilder.loadTexts: dhcpFixedIPEntry.setStatus('current')
dhcpFixedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 2, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpFixedIP.setStatus('current')
haServiceRunning = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServiceRunning.setStatus('current')
haServiceNodeType = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haServiceNodeType.setStatus('current')
haReplicationBinding = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haReplicationBinding.setStatus('current')
commandServerDaemonRunning = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandServerDaemonRunning.setStatus('current')
systemState = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemState.setStatus('current')
tftpDaemonRunning = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpDaemonRunning.setStatus('current')
licenseValid = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseValid.setStatus('current')
licenseExpiry = MibScalar((1, 3, 6, 1, 4, 1, 13315, 100, 101, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpiry.setStatus('current')
trapDNSDaemon = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 1, 1)).setObjects(("ADONIS-DNS-MIB", "dnsDaemonRunning"), ("ADONIS-DNS-MIB", "dnsDaemonZoneTransferFailure"))
if mibBuilder.loadTexts: trapDNSDaemon.setStatus('current')
trapDHCPDaemon = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 4, 1)).setObjects(("ADONIS-DNS-MIB", "dhcpDaemonRunning"), ("ADONIS-DNS-MIB", "dhcpDaemonSubnetAlert"), ("ADONIS-DNS-MIB", "dhcpFailOverState"))
if mibBuilder.loadTexts: trapDHCPDaemon.setStatus('current')
trapHAServiceFailOver = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 2, 1)).setObjects(("ADONIS-DNS-MIB", "haServiceNodeType"))
if mibBuilder.loadTexts: trapHAServiceFailOver.setStatus('current')
trapCommandServerDaemon = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 3, 1)).setObjects(("ADONIS-DNS-MIB", "commandServerDaemonRunning"))
if mibBuilder.loadTexts: trapCommandServerDaemon.setStatus('current')
trapSystemDaemon = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 7, 1)).setObjects(("ADONIS-DNS-MIB", "systemState"))
if mibBuilder.loadTexts: trapSystemDaemon.setStatus('current')
trapReplicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 5, 1))
if mibBuilder.loadTexts: trapReplicationFailure.setStatus('current')
trapTFTPDaemon = NotificationType((1, 3, 6, 1, 4, 1, 13315, 100, 101, 2, 6, 1)).setObjects(("ADONIS-DNS-MIB", "tftpDaemonRunning"))
if mibBuilder.loadTexts: trapTFTPDaemon.setStatus('current')
mibBuilder.exportSymbols("ADONIS-DNS-MIB", haService=haService, dnsDaemonZoneTransfersDeferred=dnsDaemonZoneTransfersDeferred, dhcpLeaseBindState=dhcpLeaseBindState, dnsDaemon=dnsDaemon, dnsStatsRecursion=dnsStatsRecursion, dnsStatsNXRRSet=dnsStatsNXRRSet, dhcpLeaseHostname=dhcpLeaseHostname, dhcpLeaseStartTime=dhcpLeaseStartTime, trapSystemDaemon=trapSystemDaemon, tftpDaemon=tftpDaemon, dhcpLeaseTable=dhcpLeaseTable, dhcpIP=dhcpIP, systemDaemon=systemDaemon, trapHA=trapHA, lcdDaemon=lcdDaemon, dhcpDaemonSubnetAlert=dhcpDaemonSubnetAlert, dnsDaemonSOAQueriesInProgress=dnsDaemonSOAQueriesInProgress, commandServer=commandServer, dhcpPoolSubnetIP=dhcpPoolSubnetIP, dhcp=dhcp, dhcpConfig=dhcpConfig, trapDNSDaemon=trapDNSDaemon, trapTFTPDaemon=trapTFTPDaemon, dnsStatsNXDomain=dnsStatsNXDomain, dhcpPoolSize=dhcpPoolSize, lcd=lcd, trapCommandServer=trapCommandServer, trapReplicationFailure=trapReplicationFailure, system=system, dhcpPoolStartIP=dhcpPoolStartIP, adonis=adonis, dhcpSubnetSize=dhcpSubnetSize, dns=dns, licenseExpiry=licenseExpiry, dhcpDaemon=dhcpDaemon, tftpDaemonRunning=tftpDaemonRunning, systemState=systemState, ha=ha, trapReplication=trapReplication, dnsDaemonZoneTransfersInProgress=dnsDaemonZoneTransfersInProgress, trapHAServiceFailOver=trapHAServiceFailOver, licenseValid=licenseValid, dnsDaemonNumberOfZones=dnsDaemonNumberOfZones, dhcpSubnetIP=dhcpSubnetIP, dhcpLeaseEntry=dhcpLeaseEntry, dhcpStats=dhcpStats, trapDHCPDaemon=trapDHCPDaemon, trapCommandServerDaemon=trapCommandServerDaemon, trapDNS=trapDNS, trapDHCP=trapDHCP, dhcpSubnetUsed=dhcpSubnetUsed, tftp=tftp, adonisTraps=adonisTraps, dhcpPoolTable=dhcpPoolTable, dnsDaemonZoneTransferFailure=dnsDaemonZoneTransferFailure, dnsDaemonRunning=dnsDaemonRunning, adonisObjects=adonisObjects, trapTFTP=trapTFTP, dhcpFixedIP=dhcpFixedIP, dhcpFixedIPEntry=dhcpFixedIPEntry, commandServerDaemon=commandServerDaemon, haReplicationBinding=haReplicationBinding, dhcpPoolEntry=dhcpPoolEntry, dhcpLeaseEndTime=dhcpLeaseEndTime, dnsStatsReferral=dnsStatsReferral, dhcpPoolEndIP=dhcpPoolEndIP, dhcpFixedIPTable=dhcpFixedIPTable, dhcpSubnetEntry=dhcpSubnetEntry, commandServerDaemonRunning=commandServerDaemonRunning, haServiceRunning=haServiceRunning, trapSystem=trapSystem, dhcpDaemonLeaseStatsSuccess=dhcpDaemonLeaseStatsSuccess, dhcpSubnetAlert=dhcpSubnetAlert, dnsStatsSuccess=dnsStatsSuccess, dhcpDaemonRunning=dhcpDaemonRunning, dnsStatsFailure=dnsStatsFailure, dnsStats=dnsStats, dhcpLeaseHardwareAddress=dhcpLeaseHardwareAddress, dhcpPoolUsed=dhcpPoolUsed, PYSNMP_MODULE_ID=adonis, dnsDaemonQueryLoggingState=dnsDaemonQueryLoggingState, dhcpPoolAlert=dhcpPoolAlert, dhcpSubnetTable=dhcpSubnetTable, dhcpFailOverState=dhcpFailOverState, dhcpSubnetMask=dhcpSubnetMask, dhcpLeaseTimeStamp=dhcpLeaseTimeStamp, haServiceNodeType=haServiceNodeType, dnsDaemonDebugLevel=dnsDaemonDebugLevel)
