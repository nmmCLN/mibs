#
# PySNMP MIB module SP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltek/SP2-MIB
# Produced by pysmi-1.1.8 at Tue Jul 26 16:44:17 2022
# On host fv-az292-185 platform Linux version 5.15.0-1014-azure by user runner
# Using Python version 3.10.5 (main, Jul 11 2022, 14:35:34) [GCC 9.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
eltek, = mibBuilder.importSymbols("ELTEK-COMMON-MIB", "eltek")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Bits, TimeTicks, Counter64, Unsigned32, IpAddress, Counter32, NotificationType, Integer32, Gauge32, iso, enterprises, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Bits", "TimeTicks", "Counter64", "Unsigned32", "IpAddress", "Counter32", "NotificationType", "Integer32", "Gauge32", "iso", "enterprises", "MibIdentifier")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
eNexus = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10))
eltekTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1))
powerAlarmVars = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1))
powerSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2))
powerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 2))
mains = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3))
mainsMainsFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2))
mainsMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5))
mainsOutageLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4))
generatorEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23))
generatorRunHoursLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24))
generatorFuelConsumptionLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25))
rectifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5))
rectifiersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2))
rectifiersCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3))
rectifiersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4))
rectifiersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7))
rectifiersTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18))
dcdc = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 6))
dcdcObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 6, 7))
solarChargers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7))
solarChargersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2))
solarChargersObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 3))
solarChargersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4))
solarChargersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7))
windChargers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8))
windChargersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2))
windChargersObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 3))
windChargersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4))
windChargersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7))
load = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9))
loadCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2))
loadEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10))
batteryVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5))
batteryCurrents = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6))
batteryTemperatures = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7))
batteryTimeLeft = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8))
batteryRemainingCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9))
batteryUsedCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10))
batteryTotalCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11))
batteryQuality = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12))
batteryLVBD = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13))
batteryChargeCurrentLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14))
batteryBoost = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15))
batteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16))
batteryTempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 17))
batteryBank = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18))
batteryMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19))
batteryEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20))
batteryCycleLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21))
batteryEqualize = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22))
batteryAhCharged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23))
batteryAhDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24))
inputs = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 11))
outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 12))
controlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4))
controlSystemIoUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7))
controlSystemInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8))
currentMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9))
flexiMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10))
mainControlUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11))
controlSystemSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12))
mainControlUnitsError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1))
smartNodeError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2))
batteryMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3))
loadMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4))
ioUnitError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5))
mainsMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6))
flexiMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7))
ambientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13))
deltaTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14))
userSuspended = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15))
alarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 14))
batteryGroup2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15))
batteryGroup2Voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5))
batteryGroup2Currents = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6))
batteryGroup2Temperatures = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7))
batteryGroup2TimeLeft = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8))
batteryGroup2RemainingCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9))
batteryGroup2UsedCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10))
batteryGroup2TotalCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11))
batteryGroup2Quality = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12))
batteryGroup2LVBD = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13))
batteryGroup2ChargeCurrentLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14))
batteryGroup2Boost = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15))
batteryGroup2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16))
batteryGroup2TempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 17))
batteryGroup2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18))
batteryGroup2EnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19))
batteryGroup2CycleLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20))
batteryGroup2Equalize = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21))
batteryGroup2AhCharged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22))
batteryGroup2AhDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23))
inverters = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16))
invertersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2))
invertersCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3))
invertersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4))
invertersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13))
invertersReactiveEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18))
alarmSubsysSourceDescr = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysSourceDescr.setStatus('current')
alarmSubsysStatusOid = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusOid.setStatus('current')
alarmSubsysStatusValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusValue.setStatus('current')
alarmSubsysStatusOnOff = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusOnOff.setStatus('current')
alarmMeasuredVarOid = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 5), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMeasuredVarOid.setStatus('current')
alarmMeasuredVarValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMeasuredVarValue.setStatus('current')
alarmTrapCounterVarValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmTrapCounterVarValue.setStatus('current')
alarmPowerSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 1)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmPowerSystemTrap.setStatus('current')
alarmBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 2)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmBatteryTrap.setStatus('current')
alarmLoadGroupTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 3)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmLoadGroupTrap.setStatus('current')
alarmMainsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 4)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmMainsTrap.setStatus('current')
alarmRectifierTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 5)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmRectifierTrap.setStatus('current')
alarmControlSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 6)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmControlSystemTrap.setStatus('current')
alarmDcDcTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 7)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmDcDcTrap.setStatus('current')
alarmInputsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 8)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmInputsTrap.setStatus('current')
alarmOutputsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 9)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmOutputsTrap.setStatus('current')
alarmGeneratorTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 10)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmGeneratorTrap.setStatus('current')
alarmSolarChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 11)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmSolarChargerTrap.setStatus('current')
alarmWindChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 12)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmWindChargerTrap.setStatus('current')
infoHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 13)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"))
if mibBuilder.loadTexts: infoHeartBeatTrap.setStatus('current')
alarmInverterTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 14)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmInverterTrap.setStatus('current')
powerSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemStatus.setStatus('current')
powerSystemType = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smartpack2", 1), ("smartpackS", 2), ("compack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemType.setStatus('current')
powerSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("test", 1), ("boost", 2), ("float", 3), ("emergency", 4), ("startupdelay", 5), ("equalize", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemMode.setStatus('current')
powerSystemCompany = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCompany.setStatus('current')
powerSystemSite = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemSite.setStatus('current')
powerSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemModel.setStatus('current')
powerSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemSerialNumber.setStatus('current')
powerSystemInstallDate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 8), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemInstallDate.setStatus('current')
powerSystemNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemNominalVoltage.setStatus('current')
powerSystemLongitude = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-180, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLongitude.setStatus('current')
powerSystemLongitudeDecimal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLongitudeDecimal.setStatus('current')
powerSystemLatitude = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLatitude.setStatus('current')
powerSystemLatitudeDecimal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLatitudeDecimal.setStatus('current')
powerSystemElevation = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemElevation.setStatus('current')
powerSystemCurrentDecimalSetting = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ampere", 0), ("deciAmpere", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCurrentDecimalSetting.setStatus('current')
powerSystemTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celcius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemTemperatureScale.setStatus('current')
powerSystemCapacityScale = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ah", 0), ("percent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCapacityScale.setStatus('current')
mainsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsStatus.setStatus('current')
mainsMainsFailureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMainsFailureStatus.setStatus('current')
mainsMainsFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureDescription.setStatus('current')
mainsMainsFailureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMainsFailureTrapRepeatCounter.setStatus('current')
mainsMainsFailureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureAlarmEnable.setStatus('current')
mainsMainsFailureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMainsFailureValue.setStatus('current')
mainsMainsFailureMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureMajorAlarmLevel.setStatus('current')
mainsMainsFailureMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureMinorAlarmLevel.setStatus('current')
mainsNumberOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsNumberOfPhases.setStatus('current')
mainsVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4), )
if mibBuilder.loadTexts: mainsVoltageTable.setStatus('current')
mainsVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1), ).setIndexNames((0, "SP2-MIB", "mainsVoltageIndex"))
if mibBuilder.loadTexts: mainsVoltageEntry.setStatus('current')
mainsVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: mainsVoltageIndex.setStatus('current')
mainsVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsVoltageStatus.setStatus('current')
mainsVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageDescription.setStatus('current')
mainsVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsVoltageTrapRepeatCounter.setStatus('current')
mainsVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageAlarmEnable.setStatus('current')
mainsVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsVoltageValue.setStatus('current')
mainsVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMajorHighLevel.setStatus('current')
mainsVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMinorHighLevel.setStatus('current')
mainsVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMinorLowLevel.setStatus('current')
mainsVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMajorLowLevel.setStatus('current')
mainsMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorsNumberOfUnits.setStatus('current')
mainsMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2), )
if mibBuilder.loadTexts: mainsMonitorsTable.setStatus('current')
mainsMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorsEntry.setStatus('current')
mainsMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mainsMonitorIndex.setStatus('current')
mainsMonitorNumberOfVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfVoltages.setStatus('current')
mainsMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfCurrents.setStatus('current')
mainsMonitorNumberOfFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfFrequencies.setStatus('current')
mainsMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3), )
if mibBuilder.loadTexts: mainsMonitorVoltageTable.setStatus('current')
mainsMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorPhaseIndex"))
if mibBuilder.loadTexts: mainsMonitorVoltageEntry.setStatus('current')
mainsMonitorPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: mainsMonitorPhaseIndex.setStatus('current')
mainsMonitorVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorVoltageStatus.setStatus('current')
mainsMonitorVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageDescription.setStatus('current')
mainsMonitorVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorVoltageTrapRepeatCounter.setStatus('current')
mainsMonitorVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageAlarmEnable.setStatus('current')
mainsMonitorVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorVoltageValue.setStatus('current')
mainsMonitorVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMajorHighLevel.setStatus('current')
mainsMonitorVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMinorHighLevel.setStatus('current')
mainsMonitorVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMinorLowLevel.setStatus('current')
mainsMonitorVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMajorLowLevel.setStatus('current')
mainsMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4), )
if mibBuilder.loadTexts: mainsMonitorCurrentTable.setStatus('current')
mainsMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorPhaseIndex"))
if mibBuilder.loadTexts: mainsMonitorCurrentEntry.setStatus('current')
mainsMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorCurrentStatus.setStatus('current')
mainsMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentDescription.setStatus('current')
mainsMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorCurrentTrapRepeatCounter.setStatus('current')
mainsMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentAlarmEnable.setStatus('current')
mainsMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorCurrentValue.setStatus('current')
mainsMonitorCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentMajorHighLevel.setStatus('current')
mainsMonitorCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentMinorHighLevel.setStatus('current')
mainsMonitorFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5), )
if mibBuilder.loadTexts: mainsMonitorFrequencyTable.setStatus('current')
mainsMonitorFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorFrequencyEntry.setStatus('current')
mainsMonitorFrequencyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorFrequencyStatus.setStatus('current')
mainsMonitorFrequencyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyDescription.setStatus('current')
mainsMonitorFrequencyTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorFrequencyTrapRepeatCounter.setStatus('current')
mainsMonitorFrequencyAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyAlarmEnable.setStatus('current')
mainsMonitorFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorFrequencyValue.setStatus('current')
mainsMonitorFrequencyMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorHighLevel.setStatus('current')
mainsMonitorFrequencyMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorHighLevel.setStatus('current')
mainsMonitorFrequencyMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorLowLevel.setStatus('current')
mainsMonitorFrequencyMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorLowLevel.setStatus('current')
mainsMonitorEnergyLogAccumulatedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedTable.setStatus('current')
mainsMonitorEnergyLogAccumulatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedEntry.setStatus('current')
mainsMonitorEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulated.setStatus('current')
mainsMonitorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursNumberOfEntries.setStatus('current')
mainsMonitorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursTable.setStatus('current')
mainsMonitorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursEntry.setStatus('current')
mainsMonitorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursIndex.setStatus('current')
mainsMonitorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursValue.setStatus('current')
mainsMonitorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysNumberOfEntries.setStatus('current')
mainsMonitorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysTable.setStatus('current')
mainsMonitorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysEntry.setStatus('current')
mainsMonitorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysIndex.setStatus('current')
mainsMonitorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysValue.setStatus('current')
mainsMonitorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
mainsMonitorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksTable.setStatus('current')
mainsMonitorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksEntry.setStatus('current')
mainsMonitorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksIndex.setStatus('current')
mainsMonitorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksValue.setStatus('current')
mainsOutageTotal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageTotal.setStatus('current')
mainsOutageLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogDaysNumberOfEntries.setStatus('current')
mainsOutageLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3), )
if mibBuilder.loadTexts: mainsOutageLogDaysTable.setStatus('current')
mainsOutageLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogDaysIndex"))
if mibBuilder.loadTexts: mainsOutageLogDaysEntry.setStatus('current')
mainsOutageLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogDaysIndex.setStatus('current')
mainsOutageLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogDaysValue.setStatus('current')
mainsOutageLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogWeeksNumberOfEntries.setStatus('current')
mainsOutageLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5), )
if mibBuilder.loadTexts: mainsOutageLogWeeksTable.setStatus('current')
mainsOutageLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogWeeksIndex"))
if mibBuilder.loadTexts: mainsOutageLogWeeksEntry.setStatus('current')
mainsOutageLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogWeeksIndex.setStatus('current')
mainsOutageLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogWeeksValue.setStatus('current')
mainsOutageLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogMonthsNumberOfEntries.setStatus('current')
mainsOutageLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7), )
if mibBuilder.loadTexts: mainsOutageLogMonthsTable.setStatus('current')
mainsOutageLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogMonthsIndex"))
if mibBuilder.loadTexts: mainsOutageLogMonthsEntry.setStatus('current')
mainsOutageLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogMonthsIndex.setStatus('current')
mainsOutageLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogMonthsValue.setStatus('current')
mainsNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsNumberOfGroups.setStatus('current')
mainsGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8), )
if mibBuilder.loadTexts: mainsGroupsTable.setStatus('current')
mainsGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupsEntry.setStatus('current')
mainsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: mainsGroupIndex.setStatus('current')
mainsGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupStatus.setStatus('current')
mainsGroupNumberOfPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupNumberOfPhases.setStatus('current')
mainsGroupMainsFailureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9), )
if mibBuilder.loadTexts: mainsGroupMainsFailureTable.setStatus('current')
mainsGroupMainsFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupMainsFailureEntry.setStatus('current')
mainsGroupMainsFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupMainsFailureStatus.setStatus('current')
mainsGroupMainsFailureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureDescription.setStatus('current')
mainsGroupMainsFailureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsGroupMainsFailureTrapRepeatCounter.setStatus('current')
mainsGroupMainsFailureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureAlarmEnable.setStatus('current')
mainsGroupMainsFailureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupMainsFailureValue.setStatus('current')
mainsGroupMainsFailureMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureMajorAlarmLevel.setStatus('current')
mainsGroupMainsFailureMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureMinorAlarmLevel.setStatus('current')
mainsGroupVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10), )
if mibBuilder.loadTexts: mainsGroupVoltageTable.setStatus('current')
mainsGroupVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupVoltageIndex"))
if mibBuilder.loadTexts: mainsGroupVoltageEntry.setStatus('current')
mainsGroupVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: mainsGroupVoltageIndex.setStatus('current')
mainsGroupVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupVoltageStatus.setStatus('current')
mainsGroupVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageDescription.setStatus('current')
mainsGroupVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsGroupVoltageTrapRepeatCounter.setStatus('current')
mainsGroupVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageAlarmEnable.setStatus('current')
mainsGroupVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupVoltageValue.setStatus('current')
mainsGroupVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMajorHighLevel.setStatus('current')
mainsGroupVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMinorHighLevel.setStatus('current')
mainsGroupVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMinorLowLevel.setStatus('current')
mainsGroupVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMajorLowLevel.setStatus('current')
mainsGroupOutageLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11), )
if mibBuilder.loadTexts: mainsGroupOutageLogTable.setStatus('current')
mainsGroupOutageLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogEntry.setStatus('current')
mainsGroupOutageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageTotal.setStatus('current')
mainsGroupOutageLogDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogDaysNumberOfEntries.setStatus('current')
mainsGroupOutageLogWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksNumberOfEntries.setStatus('current')
mainsGroupOutageLogMonthsNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsNumberOfEntries.setStatus('current')
mainsGroupOutageLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12), )
if mibBuilder.loadTexts: mainsGroupOutageLogDaysTable.setStatus('current')
mainsGroupOutageLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogDaysIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogDaysEntry.setStatus('current')
mainsGroupOutageLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogDaysIndex.setStatus('current')
mainsGroupOutageLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogDaysValue.setStatus('current')
mainsGroupOutageLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13), )
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksTable.setStatus('current')
mainsGroupOutageLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogWeeksIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksEntry.setStatus('current')
mainsGroupOutageLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksIndex.setStatus('current')
mainsGroupOutageLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksValue.setStatus('current')
mainsGroupOutageLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14), )
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsTable.setStatus('current')
mainsGroupOutageLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogMonthsIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsEntry.setStatus('current')
mainsGroupOutageLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsIndex.setStatus('current')
mainsGroupOutageLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsValue.setStatus('current')
generatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorStatus.setStatus('current')
generatorFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFailStatus.setStatus('current')
generatorActivation = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorActivation.setStatus('current')
generatorDischargeValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorDischargeValue.setStatus('current')
generatorMainsDelay = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorMainsDelay.setStatus('current')
generatorChargeTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorChargeTime.setStatus('current')
generatorCapacityControlledStartStopEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityControlledStartStopEnable.setStatus('current')
generatorCapacityStartOnDischargeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityStartOnDischargeLimit.setStatus('current')
generatorCapacityStopOnChargeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityStopOnChargeLimit.setStatus('current')
generatorCurrentLimitControlledStopEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopEnable.setStatus('current')
generatorCurrentLimitControlledStopValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopValue.setStatus('current')
generatorVoltageControlledStartEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlledStartEnable.setStatus('current')
generatorVoltageControlStartVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlStartVoltage.setStatus('current')
generatorVoltageControlStopAfter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlStopAfter.setStatus('current')
generatorDailyRunEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunEnable.setStatus('current')
generatorDailyRunSetupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16), )
if mibBuilder.loadTexts: generatorDailyRunSetupTable.setStatus('current')
generatorDailyRunSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1), ).setIndexNames((0, "SP2-MIB", "generatorDailyRunDayIndex"))
if mibBuilder.loadTexts: generatorDailyRunSetupEntry.setStatus('current')
generatorDailyRunDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7))))
if mibBuilder.loadTexts: generatorDailyRunDayIndex.setStatus('current')
generatorDailyRunStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunStartHour.setStatus('current')
generatorDailyRunStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunStopHour.setStatus('current')
generatorMonthlyRunEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunEnable.setStatus('current')
generatorMonthlyRunStartTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartTime.setStatus('current')
generatorMonthlyRunStartDayinMonth1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth1.setStatus('current')
generatorMonthlyRunStartDayinMonth2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth2.setStatus('current')
generatorTankNumberOfTanks = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankNumberOfTanks.setStatus('current')
generatorTankTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22), )
if mibBuilder.loadTexts: generatorTankTable.setStatus('current')
generatorTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"))
if mibBuilder.loadTexts: generatorTankEntry.setStatus('current')
generatorTankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: generatorTankIndex.setStatus('current')
generatorTankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankStatus.setStatus('current')
generatorTankDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankDescription.setStatus('current')
generatorTankTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: generatorTankTrapRepeatCounter.setStatus('current')
generatorTankEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankEnable.setStatus('current')
generatorTankValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankValue.setStatus('current')
generatorTankMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMajorHighLevel.setStatus('current')
generatorTankMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMinorHighLevel.setStatus('current')
generatorTankMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMinorLowLevel.setStatus('current')
generatorTankMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMajorLowLevel.setStatus('current')
generatorEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogAccumulated.setStatus('current')
generatorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastHoursNumberOfEntries.setStatus('current')
generatorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3), )
if mibBuilder.loadTexts: generatorEnergyLogLastHoursTable.setStatus('current')
generatorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastHoursEntry.setStatus('current')
generatorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastHoursIndex.setStatus('current')
generatorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastHoursValue.setStatus('current')
generatorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastDaysNumberOfEntries.setStatus('current')
generatorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5), )
if mibBuilder.loadTexts: generatorEnergyLogLastDaysTable.setStatus('current')
generatorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastDaysEntry.setStatus('current')
generatorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastDaysIndex.setStatus('current')
generatorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastDaysValue.setStatus('current')
generatorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
generatorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7), )
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksTable.setStatus('current')
generatorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksEntry.setStatus('current')
generatorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksIndex.setStatus('current')
generatorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksValue.setStatus('current')
generatorRunHoursTotalHours = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursTotalHours.setStatus('current')
generatorRunHoursLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysNumberOfEntries.setStatus('current')
generatorRunHoursLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3), )
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysTable.setStatus('current')
generatorRunHoursLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysEntry.setStatus('current')
generatorRunHoursLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysIndex.setStatus('current')
generatorRunHoursLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysValue.setStatus('current')
generatorRunHoursLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksNumberOfEntries.setStatus('current')
generatorRunHoursLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5), )
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksTable.setStatus('current')
generatorRunHoursLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksEntry.setStatus('current')
generatorRunHoursLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksIndex.setStatus('current')
generatorRunHoursLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksValue.setStatus('current')
generatorRunHoursLogLastMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsNumberOfEntries.setStatus('current')
generatorRunHoursLogLastMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7), )
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsTable.setStatus('current')
generatorRunHoursLogLastMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastMonthsIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsEntry.setStatus('current')
generatorRunHoursLogLastMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsIndex.setStatus('current')
generatorRunHoursLogLastMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsValue.setStatus('current')
generatorFuelConsumptionTotalUsedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1), )
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedTable.setStatus('current')
generatorFuelConsumptionTotalUsedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedEntry.setStatus('current')
generatorFuelConsumptionTotalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsed.setStatus('current')
generatorFuelConsumptionLogLastDaysNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysNoOfEntries.setStatus('current')
generatorFuelConsumptionLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysTable.setStatus('current')
generatorFuelConsumptionLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysEntry.setStatus('current')
generatorFuelConsumptionLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysIndex.setStatus('current')
generatorFuelConsumptionLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysValue.setStatus('current')
generatorFuelConsumptionLogLastWeeksNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksNoOfEntries.setStatus('current')
generatorFuelConsumptionLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksTable.setStatus('current')
generatorFuelConsumptionLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksEntry.setStatus('current')
generatorFuelConsumptionLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksIndex.setStatus('current')
generatorFuelConsumptionLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksValue.setStatus('current')
generatorFuelConsumptionLogLastMonthsNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsNoOfEntries.setStatus('current')
generatorFuelConsumptionLogLastMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsTable.setStatus('current')
generatorFuelConsumptionLogLastMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastMonthsIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsEntry.setStatus('current')
generatorFuelConsumptionLogLastMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsIndex.setStatus('current')
generatorFuelConsumptionLogLastMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsValue.setStatus('current')
rectifiersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersStatus.setStatus('current')
rectifiersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCurrentStatus.setStatus('current')
rectifiersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentDescription.setStatus('current')
rectifiersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersCurrentTrapRepeatCounter.setStatus('current')
rectifiersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentAlarmEnable.setStatus('current')
rectifiersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCurrentValue.setStatus('current')
rectifiersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentMajorAlarmLevel.setStatus('current')
rectifiersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentMinorAlarmLevel.setStatus('current')
rectifiersCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCapacityStatus.setStatus('current')
rectifiersCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityDescription.setStatus('current')
rectifiersCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersCapacityTrapRepeatCounter.setStatus('current')
rectifiersCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityAlarmEnable.setStatus('current')
rectifiersCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCapacityValue.setStatus('current')
rectifiersCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityMajorAlarmLevel.setStatus('current')
rectifiersCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityMinorAlarmLevel.setStatus('current')
rectifiersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersErrorStatus.setStatus('current')
rectifiersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorDescription.setStatus('current')
rectifiersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersErrorTrapRepeatCounter.setStatus('current')
rectifiersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorEnable.setStatus('current')
rectifiersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersErrorValue.setStatus('current')
rectifiersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorMajorAlarmLevel.setStatus('current')
rectifiersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorMinorAlarmLevel.setStatus('current')
rectifiersNumberOfRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersNumberOfRectifiers.setStatus('current')
rectifierTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6), )
if mibBuilder.loadTexts: rectifierTable.setStatus('current')
rectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1), ).setIndexNames((0, "SP2-MIB", "rectifierIndex"))
if mibBuilder.loadTexts: rectifierEntry.setStatus('current')
rectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: rectifierIndex.setStatus('current')
rectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatus.setStatus('current')
rectifierOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierOutputCurrentValue.setStatus('current')
rectifierInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierInputVoltageValue.setStatus('current')
rectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierType.setStatus('current')
rectifierHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierHwPartNumber.setStatus('current')
rectifierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierHwVersion.setStatus('current')
rectifierSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierSwPartNumber.setStatus('current')
rectifierSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierSwVersion.setStatus('current')
rectifiersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogAccumulated.setStatus('current')
rectifiersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursNumberOfEntries.setStatus('current')
rectifiersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursTable.setStatus('current')
rectifiersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursEntry.setStatus('current')
rectifiersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursIndex.setStatus('current')
rectifiersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursValue.setStatus('current')
rectifiersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysNumberOfEntries.setStatus('current')
rectifiersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysTable.setStatus('current')
rectifiersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysEntry.setStatus('current')
rectifiersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysIndex.setStatus('current')
rectifiersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysValue.setStatus('current')
rectifiersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
rectifiersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksTable.setStatus('current')
rectifiersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksEntry.setStatus('current')
rectifiersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksIndex.setStatus('current')
rectifiersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksValue.setStatus('current')
rectifiersNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersNumberOfGroups.setStatus('current')
rectifierGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9), )
if mibBuilder.loadTexts: rectifierGroupsTable.setStatus('current')
rectifierGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupsEntry.setStatus('current')
rectifierGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rectifierGroupIndex.setStatus('current')
rectifierGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupStatus.setStatus('current')
rectifierGroupNumberOfRectifiers = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupNumberOfRectifiers.setStatus('current')
rectifierGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10), )
if mibBuilder.loadTexts: rectifierGroupCurrentTable.setStatus('current')
rectifierGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupCurrentEntry.setStatus('current')
rectifierGroupCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCurrentStatus.setStatus('current')
rectifierGroupCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentDescription.setStatus('current')
rectifierGroupCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupCurrentTrapRepeatCounter.setStatus('current')
rectifierGroupCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentAlarmEnable.setStatus('current')
rectifierGroupCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCurrentValue.setStatus('current')
rectifierGroupCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentMajorAlarmLevel.setStatus('current')
rectifierGroupCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentMinorAlarmLevel.setStatus('current')
rectifierGroupCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11), )
if mibBuilder.loadTexts: rectifierGroupCapacityTable.setStatus('current')
rectifierGroupCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupCapacityEntry.setStatus('current')
rectifierGroupCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCapacityStatus.setStatus('current')
rectifierGroupCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityDescription.setStatus('current')
rectifierGroupCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupCapacityTrapRepeatCounter.setStatus('current')
rectifierGroupCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityAlarmEnable.setStatus('current')
rectifierGroupCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCapacityValue.setStatus('current')
rectifierGroupCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityMajorAlarmLevel.setStatus('current')
rectifierGroupCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityMinorAlarmLevel.setStatus('current')
rectifierGroupErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12), )
if mibBuilder.loadTexts: rectifierGroupErrorTable.setStatus('current')
rectifierGroupErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupErrorEntry.setStatus('current')
rectifierGroupErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupErrorStatus.setStatus('current')
rectifierGroupErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorDescription.setStatus('current')
rectifierGroupErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupErrorTrapRepeatCounter.setStatus('current')
rectifierGroupErrorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorAlarmEnable.setStatus('current')
rectifierGroupErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupErrorValue.setStatus('current')
rectifierGroupErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorMajorAlarmLevel.setStatus('current')
rectifierGroupErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorMinorAlarmLevel.setStatus('current')
rectifierGroupRectifierTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13), )
if mibBuilder.loadTexts: rectifierGroupRectifierTable.setStatus('current')
rectifierGroupRectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupRectifierIndex"))
if mibBuilder.loadTexts: rectifierGroupRectifierEntry.setStatus('current')
rectifierGroupRectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: rectifierGroupRectifierIndex.setStatus('current')
rectifierGroupRectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierStatus.setStatus('current')
rectifierGroupRectifierOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierOutputCurrentValue.setStatus('current')
rectifierGroupRectifierInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierInputVoltageValue.setStatus('current')
rectifierGroupRectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierType.setStatus('current')
rectifierGroupRectifierHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierHwPartNumber.setStatus('current')
rectifierGroupRectifierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierHwVersion.setStatus('current')
rectifierGroupRectifierSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierSwPartNumber.setStatus('current')
rectifierGroupRectifierSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierSwVersion.setStatus('current')
rectifierGroupEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogTable.setStatus('current')
rectifierGroupEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogEntry.setStatus('current')
rectifierGroupEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogAccumulated.setStatus('current')
rectifierGroupEnergyLogLastHoursNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursNumberOfEntries.setStatus('current')
rectifierGroupEnergyLogLastDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysNumberOfEntries.setStatus('current')
rectifierGroupEnergyLogLastWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksNumberOfEntries.setStatus('current')
rectifierGroupEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursTable.setStatus('current')
rectifierGroupEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursEntry.setStatus('current')
rectifierGroupEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursIndex.setStatus('current')
rectifierGroupEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursValue.setStatus('current')
rectifierGroupEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysTable.setStatus('current')
rectifierGroupEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysEntry.setStatus('current')
rectifierGroupEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysIndex.setStatus('current')
rectifierGroupEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysValue.setStatus('current')
rectifierGroupEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksTable.setStatus('current')
rectifierGroupEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksEntry.setStatus('current')
rectifierGroupEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksIndex.setStatus('current')
rectifierGroupEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksValue.setStatus('current')
rectifiersTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersTemperatureStatus.setStatus('current')
rectifiersTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureDescription.setStatus('current')
rectifiersTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersTemperatureTrapRepeatCounter.setStatus('current')
rectifiersTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureAlarmEnable.setStatus('current')
rectifiersTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersTemperatureValue.setStatus('current')
rectifiersTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMajorHighLevel.setStatus('current')
rectifiersTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMinorHighLevel.setStatus('current')
rectifiersTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMinorLowLevel.setStatus('current')
rectifiersTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMajorLowLevel.setStatus('current')
rectifierGroupTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19), )
if mibBuilder.loadTexts: rectifierGroupTemperatureTable.setStatus('current')
rectifierGroupTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupTemperatureEntry.setStatus('current')
rectifierGroupTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupTemperatureStatus.setStatus('current')
rectifierGroupTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureDescription.setStatus('current')
rectifierGroupTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupTemperatureTrapRepeatCounter.setStatus('current')
rectifierGroupTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureAlarmEnable.setStatus('current')
rectifierGroupTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupTemperatureValue.setStatus('current')
rectifierGroupTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorHighLevel.setStatus('current')
rectifierGroupTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorHighLevel.setStatus('current')
rectifierGroupTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorLowLevel.setStatus('current')
rectifierGroupTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorLowLevel.setStatus('current')
dcdcNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfGroups.setStatus('current')
dcdcGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2), )
if mibBuilder.loadTexts: dcdcGroupsTable.setStatus('current')
dcdcGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcGroupsEntry.setStatus('current')
dcdcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dcdcGroupIndex.setStatus('current')
dcdcGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcGroupStatus.setStatus('current')
dcdcGroupNumberOfDcdcConverters = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcGroupNumberOfDcdcConverters.setStatus('current')
dcdcGroupOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcGroupOutputVoltage.setStatus('current')
dcdcNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfCurrents.setStatus('current')
dcdcNumberOfCapacities = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfCapacities.setStatus('current')
dcdcNumberOfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfAlarms.setStatus('current')
dcdcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3), )
if mibBuilder.loadTexts: dcdcCurrentTable.setStatus('current')
dcdcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcCurrentEntry.setStatus('current')
dcdcCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCurrentStatus.setStatus('current')
dcdcCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentDescription.setStatus('current')
dcdcCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcCurrentTrapRepeatCounter.setStatus('current')
dcdcCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentAlarmEnable.setStatus('current')
dcdcCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCurrentValue.setStatus('current')
dcdcCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentMajorAlarmLevel.setStatus('current')
dcdcCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentMinorAlarmLevel.setStatus('current')
dcdcCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4), )
if mibBuilder.loadTexts: dcdcCapacityTable.setStatus('current')
dcdcCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcCapacityEntry.setStatus('current')
dcdcCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCapacityStatus.setStatus('current')
dcdcCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityDescription.setStatus('current')
dcdcCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcCapacityTrapRepeatCounter.setStatus('current')
dcdcCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityAlarmEnable.setStatus('current')
dcdcCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCapacityValue.setStatus('current')
dcdcCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityMajorAlarmLevel.setStatus('current')
dcdcCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityMinorAlarmLevel.setStatus('current')
dcdcTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5), )
if mibBuilder.loadTexts: dcdcTable.setStatus('current')
dcdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"), (0, "SP2-MIB", "dcdcIndex"))
if mibBuilder.loadTexts: dcdcEntry.setStatus('current')
dcdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: dcdcIndex.setStatus('current')
dcdcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcStatus.setStatus('current')
dcdcOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcOutputCurrentValue.setStatus('current')
dcdcInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcInputVoltageValue.setStatus('current')
dcdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcType.setStatus('current')
dcdcHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcHwPartNumber.setStatus('current')
dcdcHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcHwVersion.setStatus('current')
dcdcSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcSwPartNumber.setStatus('current')
dcdcSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcSwVersion.setStatus('current')
dcdcErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6), )
if mibBuilder.loadTexts: dcdcErrorTable.setStatus('current')
dcdcErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcErrorEntry.setStatus('current')
dcdcErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcErrorStatus.setStatus('current')
dcdcErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorDescription.setStatus('current')
dcdcErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcErrorTrapRepeatCounter.setStatus('current')
dcdcErrorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorEnable.setStatus('current')
dcdcErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcErrorValue.setStatus('current')
dcdcErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorMajorAlarmLevel.setStatus('current')
dcdcErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorMinorAlarmLevel.setStatus('current')
solarChargersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersStatus.setStatus('current')
solarChargersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersCurrentStatus.setStatus('current')
solarChargersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentDescription.setStatus('current')
solarChargersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: solarChargersCurrentTrapRepeatCounter.setStatus('current')
solarChargersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentAlarmEnable.setStatus('current')
solarChargersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersCurrentValue.setStatus('current')
solarChargersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentMajorAlarmLevel.setStatus('current')
solarChargersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentMinorAlarmLevel.setStatus('current')
solarChargersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersErrorStatus.setStatus('current')
solarChargersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorDescription.setStatus('current')
solarChargersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: solarChargersErrorTrapRepeatCounter.setStatus('current')
solarChargersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorEnable.setStatus('current')
solarChargersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersErrorValue.setStatus('current')
solarChargersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorMajorAlarmLevel.setStatus('current')
solarChargersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorMinorAlarmLevel.setStatus('current')
solarChargersNumberOfSolarChargers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersNumberOfSolarChargers.setStatus('current')
solarChargerTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6), )
if mibBuilder.loadTexts: solarChargerTable.setStatus('current')
solarChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1), ).setIndexNames((0, "SP2-MIB", "solarChargerIndex"))
if mibBuilder.loadTexts: solarChargerEntry.setStatus('current')
solarChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: solarChargerIndex.setStatus('current')
solarChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerStatus.setStatus('current')
solarChargerOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerOutputCurrentValue.setStatus('current')
solarChargerInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerInputVoltageValue.setStatus('current')
solarChargerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerType.setStatus('current')
solarChargerHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerHwPartNumber.setStatus('current')
solarChargerHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerHwVersion.setStatus('current')
solarChargerSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSwPartNumber.setStatus('current')
solarChargerSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSwVersion.setStatus('current')
solarChargersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogAccumulated.setStatus('current')
solarChargersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursNumberOfEntries.setStatus('current')
solarChargersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursTable.setStatus('current')
solarChargersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursEntry.setStatus('current')
solarChargersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursIndex.setStatus('current')
solarChargersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursValue.setStatus('current')
solarChargersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysNumberOfEntries.setStatus('current')
solarChargersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysTable.setStatus('current')
solarChargersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysEntry.setStatus('current')
solarChargersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysIndex.setStatus('current')
solarChargersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysValue.setStatus('current')
solarChargersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
solarChargersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksTable.setStatus('current')
solarChargersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksEntry.setStatus('current')
solarChargersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksIndex.setStatus('current')
solarChargersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksValue.setStatus('current')
windChargersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersStatus.setStatus('current')
windChargersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersCurrentStatus.setStatus('current')
windChargersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentDescription.setStatus('current')
windChargersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: windChargersCurrentTrapRepeatCounter.setStatus('current')
windChargersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentAlarmEnable.setStatus('current')
windChargersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersCurrentValue.setStatus('current')
windChargersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentMajorAlarmLevel.setStatus('current')
windChargersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentMinorAlarmLevel.setStatus('current')
windChargersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersErrorStatus.setStatus('current')
windChargersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorDescription.setStatus('current')
windChargersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: windChargersErrorTrapRepeatCounter.setStatus('current')
windChargersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorEnable.setStatus('current')
windChargersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersErrorValue.setStatus('current')
windChargersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorMajorAlarmLevel.setStatus('current')
windChargersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorMinorAlarmLevel.setStatus('current')
windChargersNumberOfWindChargers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersNumberOfWindChargers.setStatus('current')
windChargerTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6), )
if mibBuilder.loadTexts: windChargerTable.setStatus('current')
windChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1), ).setIndexNames((0, "SP2-MIB", "windChargerIndex"))
if mibBuilder.loadTexts: windChargerEntry.setStatus('current')
windChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: windChargerIndex.setStatus('current')
windChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerStatus.setStatus('current')
windChargerOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerOutputCurrentValue.setStatus('current')
windChargerInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerInputVoltageValue.setStatus('current')
windChargerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerType.setStatus('current')
windChargerHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerHwPartNumber.setStatus('current')
windChargerHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerHwVersion.setStatus('current')
windChargerSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerSwPartNumber.setStatus('current')
windChargerSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerSwVersion.setStatus('current')
windChargersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogAccumulated.setStatus('current')
windChargersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursNumberOfEntries.setStatus('current')
windChargersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3), )
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursTable.setStatus('current')
windChargersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursEntry.setStatus('current')
windChargersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursIndex.setStatus('current')
windChargersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursValue.setStatus('current')
windChargersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysNumberOfEntries.setStatus('current')
windChargersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5), )
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysTable.setStatus('current')
windChargersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysEntry.setStatus('current')
windChargersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysIndex.setStatus('current')
windChargersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysValue.setStatus('current')
windChargersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
windChargersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7), )
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksTable.setStatus('current')
windChargersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksEntry.setStatus('current')
windChargersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksIndex.setStatus('current')
windChargersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksValue.setStatus('current')
loadStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadStatus.setStatus('current')
loadCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCurrentStatus.setStatus('current')
loadCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentDescription.setStatus('current')
loadCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadCurrentTrapRepeatCounter.setStatus('current')
loadCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentAlarmEnable.setStatus('current')
loadCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCurrentValue.setStatus('current')
loadCurrentMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentMajorHighLevel.setStatus('current')
loadCurrentMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentMinorHighLevel.setStatus('current')
loadFusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFusesStatus.setStatus('current')
loadNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadNumberOfGroups.setStatus('current')
loadGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5), )
if mibBuilder.loadTexts: loadGroupTable.setStatus('current')
loadGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"))
if mibBuilder.loadTexts: loadGroupEntry.setStatus('current')
loadGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: loadGroupIndex.setStatus('current')
loadGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadGroupStatus.setStatus('current')
loadNumberOfLVLDs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumberOfLVLDs.setStatus('current')
loadNumberOfVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumberOfVoltages.setStatus('current')
loadLVLDTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6), )
if mibBuilder.loadTexts: loadLVLDTable.setStatus('current')
loadLVLDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"), (0, "SP2-MIB", "loadLVLDIndex"))
if mibBuilder.loadTexts: loadLVLDEntry.setStatus('current')
loadLVLDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: loadLVLDIndex.setStatus('current')
loadLVLDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVLDStatus.setStatus('current')
loadLVLDDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDDescription.setStatus('current')
loadLVLDTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadLVLDTrapRepeatCounter.setStatus('current')
loadLVLDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDEnable.setStatus('current')
loadLVLDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVLDValue.setStatus('current')
loadLVLDConnectVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDConnectVoltage.setStatus('current')
loadLVLDDisconnectVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDDisconnectVoltage.setStatus('current')
loadFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7), )
if mibBuilder.loadTexts: loadFuseTable.setStatus('current')
loadFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"))
if mibBuilder.loadTexts: loadFuseEntry.setStatus('current')
loadFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFuseStatus.setStatus('current')
loadFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseDescription.setStatus('current')
loadFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadFuseTrapRepeatCounter.setStatus('current')
loadFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseAlarmEnable.setStatus('current')
loadFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseValue.setStatus('current')
loadEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogAccumulated.setStatus('current')
loadEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastHoursNumberOfEntries.setStatus('current')
loadEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3), )
if mibBuilder.loadTexts: loadEnergyLogLastHoursTable.setStatus('current')
loadEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastHoursEntry.setStatus('current')
loadEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastHoursIndex.setStatus('current')
loadEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastHoursValue.setStatus('current')
loadEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastDaysNumberOfEntries.setStatus('current')
loadEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5), )
if mibBuilder.loadTexts: loadEnergyLogLastDaysTable.setStatus('current')
loadEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastDaysEntry.setStatus('current')
loadEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastDaysIndex.setStatus('current')
loadEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastDaysValue.setStatus('current')
loadEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastWeeksNumberOfEntries.setStatus('current')
loadEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7), )
if mibBuilder.loadTexts: loadEnergyLogLastWeeksTable.setStatus('current')
loadEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastWeeksEntry.setStatus('current')
loadEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastWeeksIndex.setStatus('current')
loadEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastWeeksValue.setStatus('current')
loadVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9), )
if mibBuilder.loadTexts: loadVoltageTable.setStatus('current')
loadVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"), (0, "SP2-MIB", "loadVoltageIndex"))
if mibBuilder.loadTexts: loadVoltageEntry.setStatus('current')
loadVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: loadVoltageIndex.setStatus('current')
loadVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadVoltageStatus.setStatus('current')
loadVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadVoltageDescription.setStatus('current')
loadVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadVoltageTrapRepeatCounter.setStatus('current')
loadVoltageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadVoltageEnable.setStatus('current')
loadVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadVoltageValue.setStatus('current')
batteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('current')
batteryDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryDescription.setStatus('current')
batteryReferenceVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(840, 60417))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryReferenceVoltage.setStatus('current')
batteryFusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFusesStatus.setStatus('current')
batteryVoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltageStatus.setStatus('current')
batteryVoltageDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageDescription.setStatus('current')
batteryVoltageTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryVoltageTrapRepeatCounter.setStatus('current')
batteryVoltageAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageAlarmEnable.setStatus('current')
batteryVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltageValue.setStatus('current')
batteryVoltageMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMajorHighLevel.setStatus('current')
batteryVoltageMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMinorHighLevel.setStatus('current')
batteryVoltageMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMinorLowLevel.setStatus('current')
batteryVoltageMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMajorLowLevel.setStatus('current')
batteryCurrentsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentsStatus.setStatus('current')
batteryCurrentsDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsDescription.setStatus('current')
batteryCurrentsTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryCurrentsTrapRepeatCounter.setStatus('current')
batteryCurrentsAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsAlarmEnable.setStatus('current')
batteryCurrentsValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentsValue.setStatus('current')
batteryCurrentsMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMajorHighLevel.setStatus('current')
batteryCurrentsMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMinorHighLevel.setStatus('current')
batteryCurrentsMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMinorLowLevel.setStatus('current')
batteryCurrentsMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMajorLowLevel.setStatus('current')
batteryTemperaturesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperaturesStatus.setStatus('current')
batteryTemperaturesDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesDescription.setStatus('current')
batteryTemperaturesTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTemperaturesTrapRepeatCounter.setStatus('current')
batteryTemperaturesAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesAlarmEnable.setStatus('current')
batteryTemperaturesValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperaturesValue.setStatus('current')
batteryTemperaturesMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMajorHighLevel.setStatus('current')
batteryTemperaturesMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMinorHighLevel.setStatus('current')
batteryTemperaturesMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMinorLowLevel.setStatus('current')
batteryTemperaturesMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMajorLowLevel.setStatus('current')
batteryTimeLeftStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTimeLeftStatus.setStatus('current')
batteryTimeLeftDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftDescription.setStatus('current')
batteryTimeLeftTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTimeLeftTrapRepeatCounter.setStatus('current')
batteryTimeLeftAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftAlarmEnable.setStatus('current')
batteryTimeLeftValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTimeLeftValue.setStatus('current')
batteryTimeLeftMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftMinorAlarmLevel.setStatus('current')
batteryTimeLeftMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftMajorAlarmLevel.setStatus('current')
batteryRemainingCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryRemainingCapacityStatus.setStatus('current')
batteryRemainingCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityDescription.setStatus('current')
batteryRemainingCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryRemainingCapacityTrapRepeatCounter.setStatus('current')
batteryRemainingCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityAlarmEnable.setStatus('current')
batteryRemainingCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryRemainingCapacityValue.setStatus('current')
batteryRemainingCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityMinorLowLevel.setStatus('current')
batteryRemainingCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityMajorLowLevel.setStatus('current')
batteryUsedCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryUsedCapacityStatus.setStatus('current')
batteryUsedCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityDescription.setStatus('current')
batteryUsedCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryUsedCapacityTrapRepeatCounter.setStatus('current')
batteryUsedCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityAlarmEnable.setStatus('current')
batteryUsedCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryUsedCapacityValue.setStatus('current')
batteryUsedCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityMajorAlarmLevel.setStatus('current')
batteryUsedCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityMinorAlarmLevel.setStatus('current')
batteryTotalCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTotalCapacityStatus.setStatus('current')
batteryTotalCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityDescription.setStatus('current')
batteryTotalCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTotalCapacityTrapRepeatCounter.setStatus('current')
batteryTotalCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityAlarmEnable.setStatus('current')
batteryTotalCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTotalCapacityValue.setStatus('current')
batteryTotalCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityMinorLowLevel.setStatus('current')
batteryTotalCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityMajorLowLevel.setStatus('current')
batteryQualityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryQualityStatus.setStatus('current')
batteryQualityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityDescription.setStatus('current')
batteryQualityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryQualityTrapRepeatCounter.setStatus('current')
batteryQualityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityAlarmEnable.setStatus('current')
batteryQualityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryQualityValue.setStatus('current')
batteryQualityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityMinorAlarmLevel.setStatus('current')
batteryQualityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityMajorAlarmLevel.setStatus('current')
batteryLVBDStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLVBDStatus.setStatus('current')
batteryLVBDDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDDescription.setStatus('current')
batteryLVBDTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryLVBDTrapRepeatCounter.setStatus('current')
batteryLVBDEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDEnable.setStatus('current')
batteryLVBDValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLVBDValue.setStatus('current')
batteryLVBDConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDConnectVoltage.setStatus('current')
batteryLVBDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDDisconnectVoltage.setStatus('current')
batteryChargeCurrentLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitEnable.setStatus('current')
batteryChargeCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitValue.setStatus('current')
batteryBoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostVoltage.setStatus('current')
batteryBoostCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startboost", 1), ("stopboost", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostCommand.setStatus('current')
batteryBoostCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostCurrentThreshold.setStatus('current')
batteryBoostManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostManualMaxDuration.setStatus('current')
batteryTestVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestVoltage.setStatus('current')
batteryTestCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("starttest", 1), ("stoptest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestCommand.setStatus('current')
batteryTestNumberOfResults = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestNumberOfResults.setStatus('current')
batteryTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4), )
if mibBuilder.loadTexts: batteryTestResultTable.setStatus('current')
batteryTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryTestResultIndex"))
if mibBuilder.loadTexts: batteryTestResultEntry.setStatus('current')
batteryTestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: batteryTestResultIndex.setStatus('current')
batteryTestResultStartDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultStartDateTime.setStatus('current')
batteryTestResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultDuration.setStatus('current')
batteryTestResultDischarged = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultDischarged.setStatus('current')
batteryTestResultQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultQuality.setStatus('current')
batteryTempCompEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompEnable.setStatus('current')
batteryBankNumberOfBanks = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankNumberOfBanks.setStatus('current')
batteryBankTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2), )
if mibBuilder.loadTexts: batteryBankTable.setStatus('current')
batteryBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"))
if mibBuilder.loadTexts: batteryBankEntry.setStatus('current')
batteryBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryBankIndex.setStatus('current')
batteryBankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankStatus.setStatus('current')
batteryBankNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfTemperatures.setStatus('current')
batteryBankNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfCurrents.setStatus('current')
batteryBankNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfFuses.setStatus('current')
batteryBankNumberOfSymmetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfSymmetries.setStatus('current')
batteryBankTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3), )
if mibBuilder.loadTexts: batteryBankTemperatureTable.setStatus('current')
batteryBankTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryTemperatureIndex"))
if mibBuilder.loadTexts: batteryBankTemperatureEntry.setStatus('current')
batteryTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryTemperatureIndex.setStatus('current')
batteryTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperatureStatus.setStatus('current')
batteryTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureDescription.setStatus('current')
batteryTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTemperatureTrapRepeatCounter.setStatus('current')
batteryTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureAlarmEnable.setStatus('current')
batteryTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperatureValue.setStatus('current')
batteryTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMajorHighLevel.setStatus('current')
batteryTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMinorHighLevel.setStatus('current')
batteryTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMinorLowLevel.setStatus('current')
batteryTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMajorLowLevel.setStatus('current')
batteryBankCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4), )
if mibBuilder.loadTexts: batteryBankCurrentTable.setStatus('current')
batteryBankCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryCurrentIndex"))
if mibBuilder.loadTexts: batteryBankCurrentEntry.setStatus('current')
batteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryCurrentIndex.setStatus('current')
batteryCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentStatus.setStatus('current')
batteryCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentDescription.setStatus('current')
batteryCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryCurrentTrapRepeatCounter.setStatus('current')
batteryCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentAlarmEnable.setStatus('current')
batteryCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentValue.setStatus('current')
batteryCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMajorHighLevel.setStatus('current')
batteryCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMinorHighLevel.setStatus('current')
batteryCurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMinorLowLevel.setStatus('current')
batteryCurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMajorLowLevel.setStatus('current')
batteryBankFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5), )
if mibBuilder.loadTexts: batteryBankFuseTable.setStatus('current')
batteryBankFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryFuseIndex"))
if mibBuilder.loadTexts: batteryBankFuseEntry.setStatus('current')
batteryFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryFuseIndex.setStatus('current')
batteryFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFuseStatus.setStatus('current')
batteryFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFuseDescription.setStatus('current')
batteryFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryFuseTrapRepeatCounter.setStatus('current')
batteryFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFuseAlarmEnable.setStatus('current')
batteryFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFuseValue.setStatus('current')
batteryBankSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6), )
if mibBuilder.loadTexts: batteryBankSymmetryTable.setStatus('current')
batteryBankSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryBankSymmetryIndex"))
if mibBuilder.loadTexts: batteryBankSymmetryEntry.setStatus('current')
batteryBankSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryBankSymmetryIndex.setStatus('current')
batteryBankSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryStatus.setStatus('current')
batteryBankSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryDescription.setStatus('current')
batteryBankSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryBankSymmetryTrapRepeatCounter.setStatus('current')
batteryBankSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryAlarmEnable.setStatus('current')
batteryBankSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryMeasureValue.setStatus('current')
batteryBankSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryDeltaValue.setStatus('current')
batteryBankSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryMajorAlarmLevel.setStatus('current')
batteryBankSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryMinorAlarmLevel.setStatus('current')
batteryMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorsNumberOfUnits.setStatus('current')
batteryMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2), )
if mibBuilder.loadTexts: batteryMonitorsTable.setStatus('current')
batteryMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"))
if mibBuilder.loadTexts: batteryMonitorsEntry.setStatus('current')
batteryMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryMonitorIndex.setStatus('current')
batteryMonitorNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfTemperatures.setStatus('current')
batteryMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfCurrents.setStatus('current')
batteryMonitorNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfFuses.setStatus('current')
batteryMonitorNumberOfSymmetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfSymmetries.setStatus('current')
batteryMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3), )
if mibBuilder.loadTexts: batteryMonitorTemperatureTable.setStatus('current')
batteryMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorTemperatureIndex"))
if mibBuilder.loadTexts: batteryMonitorTemperatureEntry.setStatus('current')
batteryMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorTemperatureIndex.setStatus('current')
batteryMonitorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorTemperatureStatus.setStatus('current')
batteryMonitorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureDescription.setStatus('current')
batteryMonitorTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorTemperatureTrapRepeatCounter.setStatus('current')
batteryMonitorTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureAlarmEnable.setStatus('current')
batteryMonitorTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorTemperatureValue.setStatus('current')
batteryMonitorTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorHighLevel.setStatus('current')
batteryMonitorTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorHighLevel.setStatus('current')
batteryMonitorTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorLowLevel.setStatus('current')
batteryMonitorTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorLowLevel.setStatus('current')
batteryMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4), )
if mibBuilder.loadTexts: batteryMonitorCurrentTable.setStatus('current')
batteryMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorCurrentIndex"))
if mibBuilder.loadTexts: batteryMonitorCurrentEntry.setStatus('current')
batteryMonitorCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorCurrentIndex.setStatus('current')
batteryMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorCurrentStatus.setStatus('current')
batteryMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentDescription.setStatus('current')
batteryMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorCurrentTrapRepeatCounter.setStatus('current')
batteryMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentAlarmEnable.setStatus('current')
batteryMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorCurrentValue.setStatus('current')
batteryMonitorCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMajorHighLevel.setStatus('current')
batteryMonitorCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMinorHighLevel.setStatus('current')
batteryMonitorCurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMinorLowLevel.setStatus('current')
batteryMonitorCurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMajorLowLevel.setStatus('current')
batteryMonitorFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5), )
if mibBuilder.loadTexts: batteryMonitorFuseTable.setStatus('current')
batteryMonitorFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorFuseIndex"))
if mibBuilder.loadTexts: batteryMonitorFuseEntry.setStatus('current')
batteryMonitorFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorFuseIndex.setStatus('current')
batteryMonitorFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorFuseStatus.setStatus('current')
batteryMonitorFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorFuseDescription.setStatus('current')
batteryMonitorFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorFuseTrapRepeatCounter.setStatus('current')
batteryMonitorFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorFuseAlarmEnable.setStatus('current')
batteryMonitorFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorFuseValue.setStatus('current')
batteryMonitorSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6), )
if mibBuilder.loadTexts: batteryMonitorSymmetryTable.setStatus('current')
batteryMonitorSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorSymmetryIndex"))
if mibBuilder.loadTexts: batteryMonitorSymmetryEntry.setStatus('current')
batteryMonitorSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryMonitorSymmetryIndex.setStatus('current')
batteryMonitorSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryStatus.setStatus('current')
batteryMonitorSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryDescription.setStatus('current')
batteryMonitorSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorSymmetryTrapRepeatCounter.setStatus('current')
batteryMonitorSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryAlarmEnable.setStatus('current')
batteryMonitorSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryMeasureValue.setStatus('current')
batteryMonitorSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryDeltaValue.setStatus('current')
batteryMonitorSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryMajorAlarmLevel.setStatus('current')
batteryMonitorSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryMinorAlarmLevel.setStatus('current')
batteryEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogAccumulated.setStatus('current')
batteryEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastHoursNumberOfEntries.setStatus('current')
batteryEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3), )
if mibBuilder.loadTexts: batteryEnergyLogLastHoursTable.setStatus('current')
batteryEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastHoursEntry.setStatus('current')
batteryEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastHoursIndex.setStatus('current')
batteryEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastHoursValue.setStatus('current')
batteryEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastDaysNumberOfEntries.setStatus('current')
batteryEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5), )
if mibBuilder.loadTexts: batteryEnergyLogLastDaysTable.setStatus('current')
batteryEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastDaysEntry.setStatus('current')
batteryEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastDaysIndex.setStatus('current')
batteryEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastDaysValue.setStatus('current')
batteryEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksNumberOfEntries.setStatus('current')
batteryEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7), )
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksTable.setStatus('current')
batteryEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksEntry.setStatus('current')
batteryEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksIndex.setStatus('current')
batteryEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksValue.setStatus('current')
batteryCycleLogTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogTotalCycles.setStatus('current')
batteryCycleLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogDaysNumberOfEntries.setStatus('current')
batteryCycleLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3), )
if mibBuilder.loadTexts: batteryCycleLogDaysTable.setStatus('current')
batteryCycleLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogDaysIndex"))
if mibBuilder.loadTexts: batteryCycleLogDaysEntry.setStatus('current')
batteryCycleLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogDaysIndex.setStatus('current')
batteryCycleLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogDaysValue.setStatus('current')
batteryCycleLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogWeeksNumberOfEntries.setStatus('current')
batteryCycleLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5), )
if mibBuilder.loadTexts: batteryCycleLogWeeksTable.setStatus('current')
batteryCycleLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogWeeksIndex"))
if mibBuilder.loadTexts: batteryCycleLogWeeksEntry.setStatus('current')
batteryCycleLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogWeeksIndex.setStatus('current')
batteryCycleLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogWeeksValue.setStatus('current')
batteryCycleLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogMonthsNumberOfEntries.setStatus('current')
batteryCycleLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7), )
if mibBuilder.loadTexts: batteryCycleLogMonthsTable.setStatus('current')
batteryCycleLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogMonthsIndex"))
if mibBuilder.loadTexts: batteryCycleLogMonthsEntry.setStatus('current')
batteryCycleLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogMonthsIndex.setStatus('current')
batteryCycleLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogMonthsValue.setStatus('current')
batteryEqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeVoltage.setStatus('current')
batteryEqualizeCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startequalize", 1), ("stopequalize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeCommand.setStatus('current')
batteryEqualizeCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeCurrentThreshold.setStatus('current')
batteryEqualizeManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeManualMaxDuration.setStatus('current')
batteryAhChargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhChargedStatus.setStatus('current')
batteryAhChargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedDescription.setStatus('current')
batteryAhChargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryAhChargedTrapRepeatCounter.setStatus('current')
batteryAhChargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedAlarmEnable.setStatus('current')
batteryAhChargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhChargedValue.setStatus('current')
batteryAhChargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedMinorHighLevel.setStatus('current')
batteryAhChargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedMajorHighLevel.setStatus('current')
batteryAhDischargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhDischargedStatus.setStatus('current')
batteryAhDischargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedDescription.setStatus('current')
batteryAhDischargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryAhDischargedTrapRepeatCounter.setStatus('current')
batteryAhDischargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedAlarmEnable.setStatus('current')
batteryAhDischargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhDischargedValue.setStatus('current')
batteryAhDischargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedMinorHighLevel.setStatus('current')
batteryAhDischargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedMajorHighLevel.setStatus('current')
inputControlUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1), )
if mibBuilder.loadTexts: inputControlUnitsTable.setStatus('current')
inputControlUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1), ).setIndexNames((0, "SP2-MIB", "inputControlUnitIndex"))
if mibBuilder.loadTexts: inputControlUnitsEntry.setStatus('current')
inputControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: inputControlUnitIndex.setStatus('current')
inputControlUnitNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputControlUnitNumberOfInputs.setStatus('current')
inputControlUnitInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2), )
if mibBuilder.loadTexts: inputControlUnitInputTable.setStatus('current')
inputControlUnitInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1), ).setIndexNames((0, "SP2-MIB", "inputControlUnitIndex"), (0, "SP2-MIB", "inputControlUnitInputIndex"))
if mibBuilder.loadTexts: inputControlUnitInputEntry.setStatus('current')
inputControlUnitInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: inputControlUnitInputIndex.setStatus('current')
inputControlUnitInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputControlUnitInputStatus.setStatus('current')
inputControlUnitInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputDescription.setStatus('current')
inputControlUnitInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputControlUnitInputTrapRepeatCounter.setStatus('current')
inputControlUnitInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputAlarmEnable.setStatus('current')
inputControlUnitInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputValue.setStatus('current')
inputControlUnitInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("diodeMatrix", 3), ("voltage", 4), ("clock", 5), ("virtual", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputConfiguration.setStatus('current')
inputIoUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3), )
if mibBuilder.loadTexts: inputIoUnitsTable.setStatus('current')
inputIoUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1), ).setIndexNames((0, "SP2-MIB", "inputIoUnitIndex"))
if mibBuilder.loadTexts: inputIoUnitsEntry.setStatus('current')
inputIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: inputIoUnitIndex.setStatus('current')
inputIoUnitNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitNumberOfInputs.setStatus('current')
inputIoUnitProgInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4), )
if mibBuilder.loadTexts: inputIoUnitProgInputTable.setStatus('current')
inputIoUnitProgInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1), ).setIndexNames((0, "SP2-MIB", "inputIoUnitIndex"), (0, "SP2-MIB", "inputIoUnitProgInputIndex"))
if mibBuilder.loadTexts: inputIoUnitProgInputEntry.setStatus('current')
inputIoUnitProgInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: inputIoUnitProgInputIndex.setStatus('current')
inputIoUnitProgInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitProgInputStatus.setStatus('current')
inputIoUnitProgInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputDescription.setStatus('current')
inputIoUnitProgInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputIoUnitProgInputTrapRepeatCounter.setStatus('current')
inputIoUnitProgInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputAlarmEnable.setStatus('current')
inputIoUnitProgInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitProgInputValue.setStatus('current')
inputIoUnitProgInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("diodeMatrix", 3), ("voltage", 4), ("clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputConfiguration.setStatus('current')
outputControlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1), )
if mibBuilder.loadTexts: outputControlUnitTable.setStatus('current')
outputControlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1), ).setIndexNames((0, "SP2-MIB", "outputControlUnitIndex"))
if mibBuilder.loadTexts: outputControlUnitEntry.setStatus('current')
outputControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputControlUnitIndex.setStatus('current')
outputControlUnitNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputControlUnitNumberOfOutputs.setStatus('current')
outputControlUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2), )
if mibBuilder.loadTexts: outputControlUnitOutputTable.setStatus('current')
outputControlUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1), ).setIndexNames((0, "SP2-MIB", "outputControlUnitIndex"), (0, "SP2-MIB", "outputControlUnitOutputIndex"))
if mibBuilder.loadTexts: outputControlUnitOutputEntry.setStatus('current')
outputControlUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: outputControlUnitOutputIndex.setStatus('current')
outputControlUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputControlUnitOutputStatus.setStatus('current')
outputControlUnitOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputControlUnitOutputDescription.setStatus('current')
outputIoUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3), )
if mibBuilder.loadTexts: outputIoUnitTable.setStatus('current')
outputIoUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1), ).setIndexNames((0, "SP2-MIB", "outputIoUnitIndex"))
if mibBuilder.loadTexts: outputIoUnitEntry.setStatus('current')
outputIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputIoUnitIndex.setStatus('current')
outputIoUnitNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIoUnitNumberOfOutputs.setStatus('current')
outputIoUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4), )
if mibBuilder.loadTexts: outputIoUnitOutputTable.setStatus('current')
outputIoUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1), ).setIndexNames((0, "SP2-MIB", "outputIoUnitIndex"), (0, "SP2-MIB", "outputIoUnitOutputIndex"))
if mibBuilder.loadTexts: outputIoUnitOutputEntry.setStatus('current')
outputIoUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputIoUnitOutputIndex.setStatus('current')
outputIoUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIoUnitOutputStatus.setStatus('current')
outputIoUnitOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputIoUnitOutputDescription.setStatus('current')
controlSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemStatus.setStatus('current')
controlSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 2), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemClock.setStatus('current')
controlSystemNumberOfControlUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemNumberOfControlUnits.setStatus('current')
snmpSendOffTraps = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSendOffTraps.setStatus('current')
snmpTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapRepeatRate.setStatus('current')
snmpHeartBeatTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHeartBeatTrapRepeatRate.setStatus('current')
snmpInhibitTraps = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInhibitTraps.setStatus('current')
controlSystemResetManualAlarms = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("resetalarm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemResetManualAlarms.setStatus('current')
controlSystemResetNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("resetnumber", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemResetNumberOfModules.setStatus('current')
controlSystemIoUnitsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitsNumberOfUnits.setStatus('current')
controlSystemIoUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2), )
if mibBuilder.loadTexts: controlSystemIoUnitsTable.setStatus('current')
controlSystemIoUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitsEntry.setStatus('current')
controlSystemIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: controlSystemIoUnitIndex.setStatus('current')
controlSystemIoUnitNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfTemperatures.setStatus('current')
controlSystemIoUnitNumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfFans.setStatus('current')
controlSystemIoUnitTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3), )
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTable.setStatus('current')
controlSystemIoUnitTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"), (0, "SP2-MIB", "controlSystemIoUnitTemperatureIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureEntry.setStatus('current')
controlSystemIoUnitTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureIndex.setStatus('current')
controlSystemIoUnitTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureStatus.setStatus('current')
controlSystemIoUnitTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureDescription.setStatus('current')
controlSystemIoUnitTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTrapRepeatCounter.setStatus('current')
controlSystemIoUnitTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureAlarmEnable.setStatus('current')
controlSystemIoUnitTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureValue.setStatus('current')
controlSystemIoUnitTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorHighLevel.setStatus('current')
controlSystemIoUnitTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorHighLevel.setStatus('current')
controlSystemIoUnitTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorLowLevel.setStatus('current')
controlSystemIoUnitTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorLowLevel.setStatus('current')
controlSystemIoUnitFanTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4), )
if mibBuilder.loadTexts: controlSystemIoUnitFanTable.setStatus('current')
controlSystemIoUnitFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"), (0, "SP2-MIB", "controlSystemIoUnitFanIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitFanEntry.setStatus('current')
controlSystemIoUnitFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: controlSystemIoUnitFanIndex.setStatus('current')
controlSystemIoUnitFanSpeedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedValue.setStatus('current')
controlSystemIoUnitFanSpeedDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedDeviation.setStatus('current')
controlSystemIoUnitFanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanControl.setStatus('current')
controlUnitNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitNumberOfUnits.setStatus('current')
controlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2), )
if mibBuilder.loadTexts: controlUnitTable.setStatus('current')
controlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1), ).setIndexNames((0, "SP2-MIB", "controlUnitIndex"))
if mibBuilder.loadTexts: controlUnitEntry.setStatus('current')
controlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: controlUnitIndex.setStatus('current')
controlUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitDescription.setStatus('current')
controlUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitStatus.setStatus('current')
controlUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSerialNumber.setStatus('current')
controlUnitHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitHwPartNumber.setStatus('current')
controlUnitHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitHwVersion.setStatus('current')
controlUnitSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSwPartNumber.setStatus('current')
controlUnitSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSwVersion.setStatus('current')
currentMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorsNumberOfUnits.setStatus('current')
currentMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2), )
if mibBuilder.loadTexts: currentMonitorsTable.setStatus('current')
currentMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"))
if mibBuilder.loadTexts: currentMonitorsEntry.setStatus('current')
currentMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: currentMonitorIndex.setStatus('current')
currentMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stdLoadMonitor", 1), ("loadCurrMonitor", 2), ("rectCurrMonitor", 3), ("dcdcCurrMonitor", 4), ("solarCurrMonitor", 5), ("windCurrMonitor", 6), ("fuelcellCurrMonitor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorType.setStatus('current')
currentMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorId.setStatus('current')
currentMonitorNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorNumberOfFuses.setStatus('current')
currentMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorNumberOfCurrents.setStatus('current')
currentMonitorFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3), )
if mibBuilder.loadTexts: currentMonitorFuseTable.setStatus('current')
currentMonitorFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorFuseIndex"))
if mibBuilder.loadTexts: currentMonitorFuseEntry.setStatus('current')
currentMonitorFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: currentMonitorFuseIndex.setStatus('current')
currentMonitorFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorFuseStatus.setStatus('current')
currentMonitorFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorFuseDescription.setStatus('current')
currentMonitorFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentMonitorFuseTrapRepeatCounter.setStatus('current')
currentMonitorFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorFuseAlarmEnable.setStatus('current')
currentMonitorFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorFuseValue.setStatus('current')
currentMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4), )
if mibBuilder.loadTexts: currentMonitorCurrentTable.setStatus('current')
currentMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"))
if mibBuilder.loadTexts: currentMonitorCurrentEntry.setStatus('current')
currentMonitorCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: currentMonitorCurrentIndex.setStatus('current')
currentMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorCurrentStatus.setStatus('current')
currentMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentDescription.setStatus('current')
currentMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentMonitorCurrentTrapRepeatCounter.setStatus('current')
currentMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentAlarmEnable.setStatus('current')
currentMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorCurrentValue.setStatus('current')
currentMonitorCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentMajorAlarmLevel.setStatus('current')
currentMonitorCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentMinorAlarmLevel.setStatus('current')
currentMonitorEnergyLogAccumulatedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5), )
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedTable.setStatus('current')
currentMonitorEnergyLogAccumulatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedEntry.setStatus('current')
currentMonitorEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulated.setStatus('current')
currentMonitorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursNumberOfEntries.setStatus('current')
currentMonitorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursTable.setStatus('current')
currentMonitorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursEntry.setStatus('current')
currentMonitorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursIndex.setStatus('current')
currentMonitorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursValue.setStatus('current')
currentMonitorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysNumberOfEntries.setStatus('current')
currentMonitorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysTable.setStatus('current')
currentMonitorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysEntry.setStatus('current')
currentMonitorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysIndex.setStatus('current')
currentMonitorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysValue.setStatus('current')
currentMonitorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
currentMonitorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksTable.setStatus('current')
currentMonitorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksEntry.setStatus('current')
currentMonitorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksIndex.setStatus('current')
currentMonitorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksValue.setStatus('current')
flexiMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorsNumberOfUnits.setStatus('current')
flexiMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2), )
if mibBuilder.loadTexts: flexiMonitorsTable.setStatus('current')
flexiMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"))
if mibBuilder.loadTexts: flexiMonitorsEntry.setStatus('current')
flexiMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: flexiMonitorIndex.setStatus('current')
flexiMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("battFlexiMonitor", 1), ("loadFlexiMonitor", 2), ("rectFlexiMonitor", 3), ("contrFlexiMonitor", 4), ("dcdcFlexiMonitor", 5), ("solarFlexiMonitor", 6), ("windFlexiMonitor", 7), ("fuelcFlexiMonitor", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorType.setStatus('current')
flexiMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorId.setStatus('current')
flexiMonitorNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorNumberOfInputs.setStatus('current')
flexiMonitorNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorNumberOfOutputs.setStatus('current')
flexiMonitorInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3), )
if mibBuilder.loadTexts: flexiMonitorInputTable.setStatus('current')
flexiMonitorInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"), (0, "SP2-MIB", "flexiMonitorInputIndex"))
if mibBuilder.loadTexts: flexiMonitorInputEntry.setStatus('current')
flexiMonitorInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: flexiMonitorInputIndex.setStatus('current')
flexiMonitorInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorInputStatus.setStatus('current')
flexiMonitorInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputDescription.setStatus('current')
flexiMonitorInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flexiMonitorInputTrapRepeatCounter.setStatus('current')
flexiMonitorInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputAlarmEnable.setStatus('current')
flexiMonitorInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorInputValue.setStatus('current')
flexiMonitorInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("progIn-NormallyOpen", 1), ("progIn-NormallyClosed", 2), ("voltage", 3), ("temperature", 4), ("current", 5), ("speed", 6), ("fuse-NormallyOpen", 7), ("fuse-NormallyClosed", 8), ("fuse-DiodeMatrix", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputConfiguration.setStatus('current')
flexiMonitorOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4), )
if mibBuilder.loadTexts: flexiMonitorOutputTable.setStatus('current')
flexiMonitorOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"), (0, "SP2-MIB", "flexiMonitorOutputIndex"))
if mibBuilder.loadTexts: flexiMonitorOutputEntry.setStatus('current')
flexiMonitorOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: flexiMonitorOutputIndex.setStatus('current')
flexiMonitorOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorOutputStatus.setStatus('current')
flexiMonitorOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorOutputDescription.setStatus('current')
mainControlUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1), )
if mibBuilder.loadTexts: mainControlUnitsTable.setStatus('current')
mainControlUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"))
if mibBuilder.loadTexts: mainControlUnitsEntry.setStatus('current')
mainControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mainControlUnitIndex.setStatus('current')
mainControlUnitNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitNumberOfTemperatures.setStatus('current')
mainControlUnitTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2), )
if mibBuilder.loadTexts: mainControlUnitTemperatureTable.setStatus('current')
mainControlUnitTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"), (0, "SP2-MIB", "mainControlUnitTemperatureIndex"))
if mibBuilder.loadTexts: mainControlUnitTemperatureEntry.setStatus('current')
mainControlUnitTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mainControlUnitTemperatureIndex.setStatus('current')
mainControlUnitTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitTemperatureStatus.setStatus('current')
mainControlUnitTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureDescription.setStatus('current')
mainControlUnitTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitTemperatureTrapRepeatCounter.setStatus('current')
mainControlUnitTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureAlarmEnable.setStatus('current')
mainControlUnitTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitTemperatureValue.setStatus('current')
mainControlUnitTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorHighLevel.setStatus('current')
mainControlUnitTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorHighLevel.setStatus('current')
mainControlUnitTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorLowLevel.setStatus('current')
mainControlUnitTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorLowLevel.setStatus('current')
mainControlUnitEarthFaultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3), )
if mibBuilder.loadTexts: mainControlUnitEarthFaultTable.setStatus('current')
mainControlUnitEarthFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"))
if mibBuilder.loadTexts: mainControlUnitEarthFaultEntry.setStatus('current')
mainControlUnitEarthFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitEarthFaultStatus.setStatus('current')
mainControlUnitEarthFaultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultDescription.setStatus('current')
mainControlUnitEarthFaultTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitEarthFaultTrapRepeatCounter.setStatus('current')
mainControlUnitEarthFaultAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultAlarmEnable.setStatus('current')
mainControlUnitEarthFaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitEarthFaultValue.setStatus('current')
mainControlUnitEarthFaultMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultMajorAlarmLevel.setStatus('current')
mainControlUnitsErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitsErrorStatus.setStatus('current')
mainControlUnitsErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorDescription.setStatus('current')
mainControlUnitsErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitsErrorTrapRepeatCounter.setStatus('current')
mainControlUnitsErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorAlarmEnable.setStatus('current')
mainControlUnitsErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitsErrorValue.setStatus('current')
mainControlUnitsErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorMajorAlarmLevel.setStatus('current')
mainControlUnitsErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorMinorAlarmLevel.setStatus('current')
smartNodeErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartNodeErrorStatus.setStatus('current')
smartNodeErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorDescription.setStatus('current')
smartNodeErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartNodeErrorTrapRepeatCounter.setStatus('current')
smartNodeErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorAlarmEnable.setStatus('current')
smartNodeErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartNodeErrorValue.setStatus('current')
smartNodeErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorMajorAlarmLevel.setStatus('current')
smartNodeErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorMinorAlarmLevel.setStatus('current')
batteryMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorErrorStatus.setStatus('current')
batteryMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorDescription.setStatus('current')
batteryMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorErrorTrapRepeatCounter.setStatus('current')
batteryMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorAlarmEnable.setStatus('current')
batteryMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorErrorValue.setStatus('current')
batteryMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorMajorAlarmLevel.setStatus('current')
batteryMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorMinorAlarmLevel.setStatus('current')
loadMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorErrorStatus.setStatus('current')
loadMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorDescription.setStatus('current')
loadMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadMonitorErrorTrapRepeatCounter.setStatus('current')
loadMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorAlarmEnable.setStatus('current')
loadMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorErrorValue.setStatus('current')
loadMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorMajorAlarmLevel.setStatus('current')
loadMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorMinorAlarmLevel.setStatus('current')
ioUnitErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitErrorStatus.setStatus('current')
ioUnitErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorDescription.setStatus('current')
ioUnitErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ioUnitErrorTrapRepeatCounter.setStatus('current')
ioUnitErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorAlarmEnable.setStatus('current')
ioUnitErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitErrorValue.setStatus('current')
ioUnitErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorMajorAlarmLevel.setStatus('current')
ioUnitErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorMinorAlarmLevel.setStatus('current')
mainsMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorErrorStatus.setStatus('current')
mainsMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorDescription.setStatus('current')
mainsMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorErrorTrapRepeatCounter.setStatus('current')
mainsMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorAlarmEnable.setStatus('current')
mainsMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorErrorValue.setStatus('current')
mainsMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorMajorAlarmLevel.setStatus('current')
mainsMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorMinorAlarmLevel.setStatus('current')
flexiMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorErrorStatus.setStatus('current')
flexiMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorDescription.setStatus('current')
flexiMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flexiMonitorErrorTrapRepeatCounter.setStatus('current')
flexiMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorAlarmEnable.setStatus('current')
flexiMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorErrorValue.setStatus('current')
flexiMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorMajorAlarmLevel.setStatus('current')
flexiMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorMinorAlarmLevel.setStatus('current')
ambientTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ambientTemperatureStatus.setStatus('current')
ambientTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureDescription.setStatus('current')
ambientTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ambientTemperatureTrapRepeatCounter.setStatus('current')
ambientTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureAlarmEnable.setStatus('current')
ambientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ambientTemperatureValue.setStatus('current')
ambientTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMajorHighLevel.setStatus('current')
ambientTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMinorHighLevel.setStatus('current')
ambientTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMinorLowLevel.setStatus('current')
ambientTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMajorLowLevel.setStatus('current')
deltaTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deltaTemperatureStatus.setStatus('current')
deltaTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureDescription.setStatus('current')
deltaTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deltaTemperatureTrapRepeatCounter.setStatus('current')
deltaTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureAlarmEnable.setStatus('current')
deltaTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deltaTemperatureValue.setStatus('current')
deltaTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMajorHighLevel.setStatus('current')
deltaTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMinorHighLevel.setStatus('current')
deltaTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMinorLowLevel.setStatus('current')
deltaTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMajorLowLevel.setStatus('current')
userSuspendedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSuspendedStatus.setStatus('current')
userSuspendedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedDescription.setStatus('current')
userSuspendedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userSuspendedTrapRepeatCounter.setStatus('current')
userSuspendedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedAlarmEnable.setStatus('current')
userSuspendedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSuspendedValue.setStatus('current')
userSuspendedMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedMajorAlarmLevel.setStatus('current')
alarmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1), )
if mibBuilder.loadTexts: alarmGroupTable.setStatus('current')
alarmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1), ).setIndexNames((0, "SP2-MIB", "alarmGroupIndex"))
if mibBuilder.loadTexts: alarmGroupEntry.setStatus('current')
alarmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 49)))
if mibBuilder.loadTexts: alarmGroupIndex.setStatus('current')
alarmGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmGroupStatus.setStatus('current')
alarmGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmGroupDescription.setStatus('current')
batteryGroup2Status = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2Status.setStatus('current')
batteryGroup2Description = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2Description.setStatus('current')
batteryGroup2ReferenceVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(840, 60417))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ReferenceVoltage.setStatus('current')
batteryGroup2FusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FusesStatus.setStatus('current')
batteryGroup2VoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2VoltageStatus.setStatus('current')
batteryGroup2VoltageDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageDescription.setStatus('current')
batteryGroup2VoltageTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2VoltageTrapRepeatCounter.setStatus('current')
batteryGroup2VoltageAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageAlarmEnable.setStatus('current')
batteryGroup2VoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2VoltageValue.setStatus('current')
batteryGroup2VoltageMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMajorHighLevel.setStatus('current')
batteryGroup2VoltageMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMinorHighLevel.setStatus('current')
batteryGroup2VoltageMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMinorLowLevel.setStatus('current')
batteryGroup2VoltageMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMajorLowLevel.setStatus('current')
batteryGroup2CurrentsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentsStatus.setStatus('current')
batteryGroup2CurrentsDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsDescription.setStatus('current')
batteryGroup2CurrentsTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2CurrentsTrapRepeatCounter.setStatus('current')
batteryGroup2CurrentsAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsAlarmEnable.setStatus('current')
batteryGroup2CurrentsValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentsValue.setStatus('current')
batteryGroup2CurrentsMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorHighLevel.setStatus('current')
batteryGroup2CurrentsMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorHighLevel.setStatus('current')
batteryGroup2CurrentsMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorLowLevel.setStatus('current')
batteryGroup2CurrentsMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorLowLevel.setStatus('current')
batteryGroup2TemperaturesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperaturesStatus.setStatus('current')
batteryGroup2TemperaturesDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesDescription.setStatus('current')
batteryGroup2TemperaturesTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TemperaturesTrapRepeatCounter.setStatus('current')
batteryGroup2TemperaturesAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesAlarmEnable.setStatus('current')
batteryGroup2TemperaturesValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperaturesValue.setStatus('current')
batteryGroup2TemperaturesMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorHighLevel.setStatus('current')
batteryGroup2TemperaturesMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorHighLevel.setStatus('current')
batteryGroup2TemperaturesMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorLowLevel.setStatus('current')
batteryGroup2TemperaturesMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorLowLevel.setStatus('current')
batteryGroup2TimeLeftStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TimeLeftStatus.setStatus('current')
batteryGroup2TimeLeftDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftDescription.setStatus('current')
batteryGroup2TimeLeftTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TimeLeftTrapRepeatCounter.setStatus('current')
batteryGroup2TimeLeftAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftAlarmEnable.setStatus('current')
batteryGroup2TimeLeftValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TimeLeftValue.setStatus('current')
batteryGroup2TimeLeftMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftMinorAlarmLevel.setStatus('current')
batteryGroup2TimeLeftMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftMajorAlarmLevel.setStatus('current')
batteryGroup2RemainingCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityStatus.setStatus('current')
batteryGroup2RemainingCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityDescription.setStatus('current')
batteryGroup2RemainingCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityTrapRepeatCounter.setStatus('current')
batteryGroup2RemainingCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityAlarmEnable.setStatus('current')
batteryGroup2RemainingCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityValue.setStatus('current')
batteryGroup2RemainingCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMinorLowLevel.setStatus('current')
batteryGroup2RemainingCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMajorLowLevel.setStatus('current')
batteryGroup2UsedCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityStatus.setStatus('current')
batteryGroup2UsedCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityDescription.setStatus('current')
batteryGroup2UsedCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityTrapRepeatCounter.setStatus('current')
batteryGroup2UsedCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityAlarmEnable.setStatus('current')
batteryGroup2UsedCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityValue.setStatus('current')
batteryGroup2UsedCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMajorAlarmLevel.setStatus('current')
batteryGroup2UsedCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMinorAlarmLevel.setStatus('current')
batteryGroup2TotalCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityStatus.setStatus('current')
batteryGroup2TotalCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityDescription.setStatus('current')
batteryGroup2TotalCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityTrapRepeatCounter.setStatus('current')
batteryGroup2TotalCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityAlarmEnable.setStatus('current')
batteryGroup2TotalCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityValue.setStatus('current')
batteryGroup2TotalCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMinorLowLevel.setStatus('current')
batteryGroup2TotalCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMajorLowLevel.setStatus('current')
batteryGroup2QualityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2QualityStatus.setStatus('current')
batteryGroup2QualityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityDescription.setStatus('current')
batteryGroup2QualityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2QualityTrapRepeatCounter.setStatus('current')
batteryGroup2QualityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityAlarmEnable.setStatus('current')
batteryGroup2QualityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2QualityValue.setStatus('current')
batteryGroup2QualityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityMinorAlarmLevel.setStatus('current')
batteryGroup2QualityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityMajorAlarmLevel.setStatus('current')
batteryGroup2LVBDStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2LVBDStatus.setStatus('current')
batteryGroup2LVBDDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDDescription.setStatus('current')
batteryGroup2LVBDTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2LVBDTrapRepeatCounter.setStatus('current')
batteryGroup2LVBDEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDEnable.setStatus('current')
batteryGroup2LVBDValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2LVBDValue.setStatus('current')
batteryGroup2LVBDConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDConnectVoltage.setStatus('current')
batteryGroup2LVBDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDDisconnectVoltage.setStatus('current')
batteryGroup2ChargeCurrentLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitEnable.setStatus('current')
batteryGroup2ChargeCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitValue.setStatus('current')
batteryGroup2BoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostVoltage.setStatus('current')
batteryGroup2BoostCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startboost", 1), ("stopboost", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostCommand.setStatus('current')
batteryGroup2BoostCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostCurrentThreshold.setStatus('current')
batteryGroup2BoostManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostManualMaxDuration.setStatus('current')
batteryGroup2TestVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TestVoltage.setStatus('current')
batteryGroup2TestCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("starttest", 1), ("stoptest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TestCommand.setStatus('current')
batteryGroup2TestNumberOfResults = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestNumberOfResults.setStatus('current')
batteryGroup2TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4), )
if mibBuilder.loadTexts: batteryGroup2TestResultTable.setStatus('current')
batteryGroup2TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2TestResultIndex"))
if mibBuilder.loadTexts: batteryGroup2TestResultEntry.setStatus('current')
batteryGroup2TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: batteryGroup2TestResultIndex.setStatus('current')
batteryGroup2TestResultStartDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultStartDateTime.setStatus('current')
batteryGroup2TestResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultDuration.setStatus('current')
batteryGroup2TestResultDischarged = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultDischarged.setStatus('current')
batteryGroup2TestResultQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultQuality.setStatus('current')
batteryGroup2TempCompEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TempCompEnable.setStatus('current')
batteryGroup2BankStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankStatus.setStatus('current')
batteryGroup2BankNumberOfTemperatures = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfTemperatures.setStatus('current')
batteryGroup2BankNumberOfCurrents = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfCurrents.setStatus('current')
batteryGroup2BankNumberOfFuses = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfFuses.setStatus('current')
batteryGroup2BankNumberOfSymmetries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfSymmetries.setStatus('current')
batteryGroup2BankTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6), )
if mibBuilder.loadTexts: batteryGroup2BankTemperatureTable.setStatus('current')
batteryGroup2BankTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2TemperatureIndex"))
if mibBuilder.loadTexts: batteryGroup2BankTemperatureEntry.setStatus('current')
batteryGroup2TemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2TemperatureIndex.setStatus('current')
batteryGroup2TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperatureStatus.setStatus('current')
batteryGroup2TemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureDescription.setStatus('current')
batteryGroup2TemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TemperatureTrapRepeatCounter.setStatus('current')
batteryGroup2TemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureAlarmEnable.setStatus('current')
batteryGroup2TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperatureValue.setStatus('current')
batteryGroup2TemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorHighLevel.setStatus('current')
batteryGroup2TemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorHighLevel.setStatus('current')
batteryGroup2TemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorLowLevel.setStatus('current')
batteryGroup2TemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorLowLevel.setStatus('current')
batteryGroup2BankCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7), )
if mibBuilder.loadTexts: batteryGroup2BankCurrentTable.setStatus('current')
batteryGroup2BankCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CurrentIndex"))
if mibBuilder.loadTexts: batteryGroup2BankCurrentEntry.setStatus('current')
batteryGroup2CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2CurrentIndex.setStatus('current')
batteryGroup2CurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentStatus.setStatus('current')
batteryGroup2CurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentDescription.setStatus('current')
batteryGroup2CurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2CurrentTrapRepeatCounter.setStatus('current')
batteryGroup2CurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentAlarmEnable.setStatus('current')
batteryGroup2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentValue.setStatus('current')
batteryGroup2CurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMajorHighLevel.setStatus('current')
batteryGroup2CurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMinorHighLevel.setStatus('current')
batteryGroup2CurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMinorLowLevel.setStatus('current')
batteryGroup2CurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMajorLowLevel.setStatus('current')
batteryGroup2BankFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8), )
if mibBuilder.loadTexts: batteryGroup2BankFuseTable.setStatus('current')
batteryGroup2BankFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2FuseIndex"))
if mibBuilder.loadTexts: batteryGroup2BankFuseEntry.setStatus('current')
batteryGroup2FuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2FuseIndex.setStatus('current')
batteryGroup2FuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FuseStatus.setStatus('current')
batteryGroup2FuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2FuseDescription.setStatus('current')
batteryGroup2FuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2FuseTrapRepeatCounter.setStatus('current')
batteryGroup2FuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2FuseAlarmEnable.setStatus('current')
batteryGroup2FuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FuseValue.setStatus('current')
batteryGroup2BankSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9), )
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTable.setStatus('current')
batteryGroup2BankSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2BankSymmetryIndex"))
if mibBuilder.loadTexts: batteryGroup2BankSymmetryEntry.setStatus('current')
batteryGroup2BankSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryGroup2BankSymmetryIndex.setStatus('current')
batteryGroup2BankSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryStatus.setStatus('current')
batteryGroup2BankSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDescription.setStatus('current')
batteryGroup2BankSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTrapRepeatCounter.setStatus('current')
batteryGroup2BankSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryAlarmEnable.setStatus('current')
batteryGroup2BankSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMeasureValue.setStatus('current')
batteryGroup2BankSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDeltaValue.setStatus('current')
batteryGroup2BankSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMajorAlarmLevel.setStatus('current')
batteryGroup2BankSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMinorAlarmLevel.setStatus('current')
batteryGroup2EnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogAccumulated.setStatus('current')
batteryGroup2EnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursNumberOfEntries.setStatus('current')
batteryGroup2EnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursTable.setStatus('current')
batteryGroup2EnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursEntry.setStatus('current')
batteryGroup2EnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursIndex.setStatus('current')
batteryGroup2EnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursValue.setStatus('current')
batteryGroup2EnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysNumberOfEntries.setStatus('current')
batteryGroup2EnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysTable.setStatus('current')
batteryGroup2EnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysEntry.setStatus('current')
batteryGroup2EnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysIndex.setStatus('current')
batteryGroup2EnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysValue.setStatus('current')
batteryGroup2EnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksNumberOfEntries.setStatus('current')
batteryGroup2EnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksTable.setStatus('current')
batteryGroup2EnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksEntry.setStatus('current')
batteryGroup2EnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksIndex.setStatus('current')
batteryGroup2EnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksValue.setStatus('current')
batteryGroup2CycleLogTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogTotalCycles.setStatus('current')
batteryGroup2CycleLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysNumberOfEntries.setStatus('current')
batteryGroup2CycleLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3), )
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysTable.setStatus('current')
batteryGroup2CycleLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogDaysIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysEntry.setStatus('current')
batteryGroup2CycleLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysIndex.setStatus('current')
batteryGroup2CycleLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysValue.setStatus('current')
batteryGroup2CycleLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksNumberOfEntries.setStatus('current')
batteryGroup2CycleLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5), )
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksTable.setStatus('current')
batteryGroup2CycleLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogWeeksIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksEntry.setStatus('current')
batteryGroup2CycleLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksIndex.setStatus('current')
batteryGroup2CycleLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksValue.setStatus('current')
batteryGroup2CycleLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsNumberOfEntries.setStatus('current')
batteryGroup2CycleLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7), )
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsTable.setStatus('current')
batteryGroup2CycleLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogMonthsIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsEntry.setStatus('current')
batteryGroup2CycleLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsIndex.setStatus('current')
batteryGroup2CycleLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsValue.setStatus('current')
batteryGroup2EqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeVoltage.setStatus('current')
batteryGroup2EqualizeCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startequalize", 1), ("stopequalize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeCommand.setStatus('current')
batteryGroup2EqualizeCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeCurrentThreshold.setStatus('current')
batteryGroup2EqualizeManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeManualMaxDuration.setStatus('current')
batteryGroup2AhChargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhChargedStatus.setStatus('current')
batteryGroup2AhChargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedDescription.setStatus('current')
batteryGroup2AhChargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2AhChargedTrapRepeatCounter.setStatus('current')
batteryGroup2AhChargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedAlarmEnable.setStatus('current')
batteryGroup2AhChargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhChargedValue.setStatus('current')
batteryGroup2AhChargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedMinorHighLevel.setStatus('current')
batteryGroup2AhChargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedMajorHighLevel.setStatus('current')
batteryGroup2AhDischargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhDischargedStatus.setStatus('current')
batteryGroup2AhDischargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedDescription.setStatus('current')
batteryGroup2AhDischargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2AhDischargedTrapRepeatCounter.setStatus('current')
batteryGroup2AhDischargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedAlarmEnable.setStatus('current')
batteryGroup2AhDischargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhDischargedValue.setStatus('current')
batteryGroup2AhDischargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedMinorHighLevel.setStatus('current')
batteryGroup2AhDischargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedMajorHighLevel.setStatus('current')
invertersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersStatus.setStatus('current')
invertersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCurrentStatus.setStatus('current')
invertersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentDescription.setStatus('current')
invertersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersCurrentTrapRepeatCounter.setStatus('current')
invertersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentAlarmEnable.setStatus('current')
invertersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCurrentValue.setStatus('current')
invertersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentMajorAlarmLevel.setStatus('current')
invertersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentMinorAlarmLevel.setStatus('current')
invertersCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCapacityStatus.setStatus('current')
invertersCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityDescription.setStatus('current')
invertersCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersCapacityTrapRepeatCounter.setStatus('current')
invertersCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityAlarmEnable.setStatus('current')
invertersCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCapacityValue.setStatus('current')
invertersCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityMajorAlarmLevel.setStatus('current')
invertersCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityMinorAlarmLevel.setStatus('current')
invertersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersErrorStatus.setStatus('current')
invertersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorDescription.setStatus('current')
invertersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersErrorTrapRepeatCounter.setStatus('current')
invertersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorEnable.setStatus('current')
invertersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersErrorValue.setStatus('current')
invertersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorMajorAlarmLevel.setStatus('current')
invertersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorMinorAlarmLevel.setStatus('current')
invertersNumberOfInverters = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersNumberOfInverters.setStatus('current')
inverterTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6), )
if mibBuilder.loadTexts: inverterTable.setStatus('current')
inverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1), ).setIndexNames((0, "SP2-MIB", "inverterIndex"))
if mibBuilder.loadTexts: inverterEntry.setStatus('current')
inverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: inverterIndex.setStatus('current')
inverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterStatus.setStatus('current')
inverterOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputCurrentValue.setStatus('current')
inverterOutputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputVoltageValue.setStatus('current')
inverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterType.setStatus('current')
inverterHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterHwPartNumber.setStatus('current')
inverterHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterHwVersion.setStatus('current')
inverterSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterSwPartNumber.setStatus('current')
inverterSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterSwVersion.setStatus('current')
inverterOutputFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputFrequencyValue.setStatus('current')
inverterOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputPowerValue.setStatus('current')
inverterOutputReactivePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputReactivePowerValue.setStatus('current')
invertersNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersNumberOfGroups.setStatus('current')
inverterGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8), )
if mibBuilder.loadTexts: inverterGroupsTable.setStatus('current')
inverterGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupsEntry.setStatus('current')
inverterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: inverterGroupIndex.setStatus('current')
inverterGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupStatus.setStatus('current')
inverterGroupNumberOfInverters = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupNumberOfInverters.setStatus('current')
inverterGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9), )
if mibBuilder.loadTexts: inverterGroupCurrentTable.setStatus('current')
inverterGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupCurrentEntry.setStatus('current')
inverterGroupCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCurrentStatus.setStatus('current')
inverterGroupCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentDescription.setStatus('current')
inverterGroupCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupCurrentTrapRepeatCounter.setStatus('current')
inverterGroupCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentAlarmEnable.setStatus('current')
inverterGroupCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCurrentValue.setStatus('current')
inverterGroupCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentMajorAlarmLevel.setStatus('current')
inverterGroupCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentMinorAlarmLevel.setStatus('current')
inverterGroupCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10), )
if mibBuilder.loadTexts: inverterGroupCapacityTable.setStatus('current')
inverterGroupCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupCapacityEntry.setStatus('current')
inverterGroupCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCapacityStatus.setStatus('current')
inverterGroupCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityDescription.setStatus('current')
inverterGroupCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupCapacityTrapRepeatCounter.setStatus('current')
inverterGroupCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityAlarmEnable.setStatus('current')
inverterGroupCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCapacityValue.setStatus('current')
inverterGroupCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityMajorAlarmLevel.setStatus('current')
inverterGroupCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityMinorAlarmLevel.setStatus('current')
inverterGroupErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11), )
if mibBuilder.loadTexts: inverterGroupErrorTable.setStatus('current')
inverterGroupErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupErrorEntry.setStatus('current')
inverterGroupErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupErrorStatus.setStatus('current')
inverterGroupErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorDescription.setStatus('current')
inverterGroupErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupErrorTrapRepeatCounter.setStatus('current')
inverterGroupErrorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorAlarmEnable.setStatus('current')
inverterGroupErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupErrorValue.setStatus('current')
inverterGroupErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorMajorAlarmLevel.setStatus('current')
inverterGroupErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorMinorAlarmLevel.setStatus('current')
inverterGroupInverterTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12), )
if mibBuilder.loadTexts: inverterGroupInverterTable.setStatus('current')
inverterGroupInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupInverterIndex"))
if mibBuilder.loadTexts: inverterGroupInverterEntry.setStatus('current')
inverterGroupInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: inverterGroupInverterIndex.setStatus('current')
inverterGroupInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterStatus.setStatus('current')
inverterGroupInverterOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputCurrentValue.setStatus('current')
inverterGroupInverterOutputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputVoltageValue.setStatus('current')
inverterGroupInverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterType.setStatus('current')
inverterGroupInverterHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterHwPartNumber.setStatus('current')
inverterGroupInverterHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterHwVersion.setStatus('current')
inverterGroupInverterSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterSwPartNumber.setStatus('current')
inverterGroupInverterSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterSwVersion.setStatus('current')
inverterGroupInverterOutputFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputFrequencyValue.setStatus('current')
inverterGroupInverterOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputPowerValue.setStatus('current')
inverterGroupInverterOutputReactivePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputReactivePowerValue.setStatus('current')
invertersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogAccumulated.setStatus('current')
invertersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastHoursNumberOfEntries.setStatus('current')
invertersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3), )
if mibBuilder.loadTexts: invertersEnergyLogLastHoursTable.setStatus('current')
invertersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastHoursEntry.setStatus('current')
invertersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastHoursIndex.setStatus('current')
invertersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastHoursValue.setStatus('current')
invertersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastDaysNumberOfEntries.setStatus('current')
invertersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5), )
if mibBuilder.loadTexts: invertersEnergyLogLastDaysTable.setStatus('current')
invertersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastDaysEntry.setStatus('current')
invertersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastDaysIndex.setStatus('current')
invertersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastDaysValue.setStatus('current')
invertersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
invertersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7), )
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksTable.setStatus('current')
invertersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksEntry.setStatus('current')
invertersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksIndex.setStatus('current')
invertersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksValue.setStatus('current')
inverterGroupEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14), )
if mibBuilder.loadTexts: inverterGroupEnergyLogTable.setStatus('current')
inverterGroupEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogEntry.setStatus('current')
inverterGroupEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogAccumulated.setStatus('current')
inverterGroupEnergyLogLastHoursNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursNumberOfEntries.setStatus('current')
inverterGroupEnergyLogLastDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysNumberOfEntries.setStatus('current')
inverterGroupEnergyLogLastWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksNumberOfEntries.setStatus('current')
inverterGroupEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursTable.setStatus('current')
inverterGroupEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursEntry.setStatus('current')
inverterGroupEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursIndex.setStatus('current')
inverterGroupEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursValue.setStatus('current')
inverterGroupEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysTable.setStatus('current')
inverterGroupEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysEntry.setStatus('current')
inverterGroupEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysIndex.setStatus('current')
inverterGroupEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysValue.setStatus('current')
inverterGroupEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksTable.setStatus('current')
inverterGroupEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksEntry.setStatus('current')
inverterGroupEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksIndex.setStatus('current')
inverterGroupEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksValue.setStatus('current')
invertersReactiveEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogAccumulated.setStatus('current')
invertersReactiveEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursNumberOfEntries.setStatus('current')
invertersReactiveEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursTable.setStatus('current')
invertersReactiveEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursEntry.setStatus('current')
invertersReactiveEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursIndex.setStatus('current')
invertersReactiveEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursValue.setStatus('current')
invertersReactiveEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysNumberOfEntries.setStatus('current')
invertersReactiveEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysTable.setStatus('current')
invertersReactiveEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysEntry.setStatus('current')
invertersReactiveEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysIndex.setStatus('current')
invertersReactiveEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysValue.setStatus('current')
invertersReactiveEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksNumberOfEntries.setStatus('current')
invertersReactiveEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksTable.setStatus('current')
invertersReactiveEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksEntry.setStatus('current')
invertersReactiveEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksIndex.setStatus('current')
invertersReactiveEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksValue.setStatus('current')
inverterGroupReactiveEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogTable.setStatus('current')
inverterGroupReactiveEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogEntry.setStatus('current')
inverterGroupReactiveEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogAccumulated.setStatus('current')
inverterGroupReactiveEnergyLogLastHoursNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursNoOfEntries.setStatus('current')
inverterGroupReactiveEnergyLogLastDaysNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysNoOfEntries.setStatus('current')
inverterGroupReactiveEnergyLogLastWeeksNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksNoOfEntries.setStatus('current')
inverterGroupReactiveEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursTable.setStatus('current')
inverterGroupReactiveEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursEntry.setStatus('current')
inverterGroupReactiveEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursIndex.setStatus('current')
inverterGroupReactiveEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursValue.setStatus('current')
inverterGroupReactiveEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysTable.setStatus('current')
inverterGroupReactiveEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysEntry.setStatus('current')
inverterGroupReactiveEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysIndex.setStatus('current')
inverterGroupReactiveEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysValue.setStatus('current')
inverterGroupReactiveEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksTable.setStatus('current')
inverterGroupReactiveEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksEntry.setStatus('current')
inverterGroupReactiveEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksIndex.setStatus('current')
inverterGroupReactiveEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksValue.setStatus('current')
powerSystemTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12148, 10, 1, 3)).setObjects(("SP2-MIB", "alarmBatteryTrap"), ("SP2-MIB", "alarmControlSystemTrap"), ("SP2-MIB", "alarmDcDcTrap"), ("SP2-MIB", "alarmGeneratorTrap"), ("SP2-MIB", "alarmInputsTrap"), ("SP2-MIB", "alarmInverterTrap"), ("SP2-MIB", "alarmLoadGroupTrap"), ("SP2-MIB", "alarmMainsTrap"), ("SP2-MIB", "alarmOutputsTrap"), ("SP2-MIB", "alarmPowerSystemTrap"), ("SP2-MIB", "alarmRectifierTrap"), ("SP2-MIB", "alarmSolarChargerTrap"), ("SP2-MIB", "alarmWindChargerTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerSystemTrapsGroup = powerSystemTrapsGroup.setStatus('current')
mibBuilder.exportSymbols("SP2-MIB", batteryEnergyLogLastWeeksTable=batteryEnergyLogLastWeeksTable, batteryTimeLeftDescription=batteryTimeLeftDescription, batteryGroup2CurrentValue=batteryGroup2CurrentValue, batteryTempCompEnable=batteryTempCompEnable, rectifiersErrorTrapRepeatCounter=rectifiersErrorTrapRepeatCounter, dcdcObsolete=dcdcObsolete, mainControlUnitTemperatureMinorHighLevel=mainControlUnitTemperatureMinorHighLevel, generatorEnergyLogLastHoursTable=generatorEnergyLogLastHoursTable, rectifiersTemperature=rectifiersTemperature, mainsGroupMainsFailureTable=mainsGroupMainsFailureTable, rectifierGroupErrorDescription=rectifierGroupErrorDescription, batteryGroup2CycleLogWeeksEntry=batteryGroup2CycleLogWeeksEntry, controlSystemIoUnitTemperatureTrapRepeatCounter=controlSystemIoUnitTemperatureTrapRepeatCounter, rectifierGroupCapacityAlarmEnable=rectifierGroupCapacityAlarmEnable, batteryGroup2FusesStatus=batteryGroup2FusesStatus, batteryTestNumberOfResults=batteryTestNumberOfResults, powerSystemType=powerSystemType, batteryGroup2TemperatureIndex=batteryGroup2TemperatureIndex, generatorTankEntry=generatorTankEntry, loadEnergyLogLastHoursTable=loadEnergyLogLastHoursTable, userSuspended=userSuspended, outputIoUnitOutputEntry=outputIoUnitOutputEntry, controlSystemClock=controlSystemClock, dcdcErrorEnable=dcdcErrorEnable, batteryBankTemperatureTable=batteryBankTemperatureTable, inputIoUnitProgInputEntry=inputIoUnitProgInputEntry, snmpSendOffTraps=snmpSendOffTraps, mainsGroupVoltageMinorLowLevel=mainsGroupVoltageMinorLowLevel, mainsMonitorVoltageEntry=mainsMonitorVoltageEntry, powerSystemCompany=powerSystemCompany, batteryVoltageStatus=batteryVoltageStatus, inputControlUnitInputIndex=inputControlUnitInputIndex, batteryCycleLogMonthsTable=batteryCycleLogMonthsTable, rectifiersEnergyLog=rectifiersEnergyLog, solarChargersErrorMajorAlarmLevel=solarChargersErrorMajorAlarmLevel, controlSystemResetNumberOfModules=controlSystemResetNumberOfModules, mains=mains, batteryVoltageMajorHighLevel=batteryVoltageMajorHighLevel, generatorTankMinorHighLevel=generatorTankMinorHighLevel, inverterGroupsTable=inverterGroupsTable, batteryCurrentMinorLowLevel=batteryCurrentMinorLowLevel, mainsOutageLogMonthsIndex=mainsOutageLogMonthsIndex, generatorEnergyLogLastDaysValue=generatorEnergyLogLastDaysValue, windChargersEnergyLogLastWeeksNumberOfEntries=windChargersEnergyLogLastWeeksNumberOfEntries, deltaTemperatureMinorHighLevel=deltaTemperatureMinorHighLevel, mainsMonitorFrequencyMajorHighLevel=mainsMonitorFrequencyMajorHighLevel, batteryChargeCurrentLimitValue=batteryChargeCurrentLimitValue, batteryGroup2CycleLogMonthsNumberOfEntries=batteryGroup2CycleLogMonthsNumberOfEntries, generatorEnergyLogLastDaysIndex=generatorEnergyLogLastDaysIndex, windChargersEnergyLogAccumulated=windChargersEnergyLogAccumulated, batteryGroup2CycleLogDaysNumberOfEntries=batteryGroup2CycleLogDaysNumberOfEntries, mainsGroupOutageLogDaysTable=mainsGroupOutageLogDaysTable, batteryGroup2CurrentsMinorLowLevel=batteryGroup2CurrentsMinorLowLevel, rectifierGroupEnergyLogLastHoursNumberOfEntries=rectifierGroupEnergyLogLastHoursNumberOfEntries, generatorTankValue=generatorTankValue, batteryGroup2EqualizeCurrentThreshold=batteryGroup2EqualizeCurrentThreshold, userSuspendedValue=userSuspendedValue, alarmSubsysStatusOid=alarmSubsysStatusOid, rectifierGroupTemperatureMajorHighLevel=rectifierGroupTemperatureMajorHighLevel, generatorRunHoursLog=generatorRunHoursLog, batteryGroup2EnergyLogLastWeeksValue=batteryGroup2EnergyLogLastWeeksValue, generatorCapacityControlledStartStopEnable=generatorCapacityControlledStartStopEnable, batteryLVBDDescription=batteryLVBDDescription, inverterGroupInverterOutputPowerValue=inverterGroupInverterOutputPowerValue, batteryEnergyLogAccumulated=batteryEnergyLogAccumulated, rectifierGroupEnergyLogEntry=rectifierGroupEnergyLogEntry, mainControlUnitTemperatureDescription=mainControlUnitTemperatureDescription, userSuspendedTrapRepeatCounter=userSuspendedTrapRepeatCounter, batteryGroup2BankCurrentTable=batteryGroup2BankCurrentTable, loadVoltageEnable=loadVoltageEnable, batteryGroup2ChargeCurrentLimitEnable=batteryGroup2ChargeCurrentLimitEnable, windChargersErrorMinorAlarmLevel=windChargersErrorMinorAlarmLevel, mainsMonitorEnergyLogLastWeeksIndex=mainsMonitorEnergyLogLastWeeksIndex, generatorMonthlyRunEnable=generatorMonthlyRunEnable, batteryEqualizeCommand=batteryEqualizeCommand, mainsMainsFailureAlarmEnable=mainsMainsFailureAlarmEnable, outputIoUnitTable=outputIoUnitTable, loadEnergyLogLastDaysEntry=loadEnergyLogLastDaysEntry, invertersStatus=invertersStatus, inverterGroupEnergyLogTable=inverterGroupEnergyLogTable, rectifierGroupRectifierInputVoltageValue=rectifierGroupRectifierInputVoltageValue, batteryBankFuseTable=batteryBankFuseTable, batteryCycleLogTotalCycles=batteryCycleLogTotalCycles, batteryGroup2CurrentIndex=batteryGroup2CurrentIndex, mainsMonitorEnergyLogLastHoursValue=mainsMonitorEnergyLogLastHoursValue, rectifierOutputCurrentValue=rectifierOutputCurrentValue, alarmControlSystemTrap=alarmControlSystemTrap, mainsGroupVoltageValue=mainsGroupVoltageValue, batteryLVBDEnable=batteryLVBDEnable, windChargers=windChargers, flexiMonitorErrorMinorAlarmLevel=flexiMonitorErrorMinorAlarmLevel, batteryGroup2AhDischargedMinorHighLevel=batteryGroup2AhDischargedMinorHighLevel, batteryGroup2EnergyLogLastDaysNumberOfEntries=batteryGroup2EnergyLogLastDaysNumberOfEntries, batteryGroup2CycleLogDaysValue=batteryGroup2CycleLogDaysValue, ioUnitErrorMajorAlarmLevel=ioUnitErrorMajorAlarmLevel, rectifiersCurrentDescription=rectifiersCurrentDescription, batteryReferenceVoltage=batteryReferenceVoltage, solarChargersStatus=solarChargersStatus, generatorFuelConsumptionLogLastWeeksNoOfEntries=generatorFuelConsumptionLogLastWeeksNoOfEntries, mainControlUnitTemperatureTrapRepeatCounter=mainControlUnitTemperatureTrapRepeatCounter, windChargersEnergyLogLastWeeksIndex=windChargersEnergyLogLastWeeksIndex, batteryBankCurrentTable=batteryBankCurrentTable, rectifiersCapacityDescription=rectifiersCapacityDescription, mainsMonitorVoltageMajorLowLevel=mainsMonitorVoltageMajorLowLevel, rectifierGroupErrorMajorAlarmLevel=rectifierGroupErrorMajorAlarmLevel, alarmGroupStatus=alarmGroupStatus, currentMonitorEnergyLogLastWeeksNumberOfEntries=currentMonitorEnergyLogLastWeeksNumberOfEntries, batteryCurrentMinorHighLevel=batteryCurrentMinorHighLevel, outputIoUnitIndex=outputIoUnitIndex, flexiMonitorsTable=flexiMonitorsTable, batteryRemainingCapacityTrapRepeatCounter=batteryRemainingCapacityTrapRepeatCounter, inverterType=inverterType, inverterGroupReactiveEnergyLogLastHoursTable=inverterGroupReactiveEnergyLogLastHoursTable, mainsStatus=mainsStatus, loadMonitorErrorTrapRepeatCounter=loadMonitorErrorTrapRepeatCounter, batteryUsedCapacityValue=batteryUsedCapacityValue, batteryBankTemperatureEntry=batteryBankTemperatureEntry, batteryUsedCapacity=batteryUsedCapacity, batteryMonitorSymmetryMajorAlarmLevel=batteryMonitorSymmetryMajorAlarmLevel, rectifierGroupCurrentDescription=rectifierGroupCurrentDescription, batteryGroup2CycleLogMonthsTable=batteryGroup2CycleLogMonthsTable, rectifierGroupEnergyLogLastDaysEntry=rectifierGroupEnergyLogLastDaysEntry, mainsVoltageMajorLowLevel=mainsVoltageMajorLowLevel, inputIoUnitNumberOfInputs=inputIoUnitNumberOfInputs, mainControlUnitsErrorMinorAlarmLevel=mainControlUnitsErrorMinorAlarmLevel, controlSystemIoUnitsEntry=controlSystemIoUnitsEntry, batteryGroup2LVBDEnable=batteryGroup2LVBDEnable, batteryAhDischargedDescription=batteryAhDischargedDescription, powerSystemLongitude=powerSystemLongitude, batteryTemperatures=batteryTemperatures, mainsGroupVoltageEntry=mainsGroupVoltageEntry, currentMonitorCurrentMinorAlarmLevel=currentMonitorCurrentMinorAlarmLevel, batteryMonitorTemperatureMajorLowLevel=batteryMonitorTemperatureMajorLowLevel, generatorFuelConsumptionLogLastDaysNoOfEntries=generatorFuelConsumptionLogLastDaysNoOfEntries, inverterGroupInverterSwPartNumber=inverterGroupInverterSwPartNumber, flexiMonitorInputValue=flexiMonitorInputValue, batteryBankNumberOfSymmetries=batteryBankNumberOfSymmetries, loadEnergyLogLastHoursEntry=loadEnergyLogLastHoursEntry, batteryCycleLogDaysIndex=batteryCycleLogDaysIndex, batteryGroup2BoostCurrentThreshold=batteryGroup2BoostCurrentThreshold, outputControlUnitIndex=outputControlUnitIndex, inverterGroupEnergyLogLastDaysTable=inverterGroupEnergyLogLastDaysTable, batteryGroup2TestCommand=batteryGroup2TestCommand, windChargersEnergyLogLastDaysTable=windChargersEnergyLogLastDaysTable, mainsOutageTotal=mainsOutageTotal, mainsVoltageDescription=mainsVoltageDescription, controlUnitSerialNumber=controlUnitSerialNumber, batteryCurrentMajorHighLevel=batteryCurrentMajorHighLevel, inverters=inverters, flexiMonitorsNumberOfUnits=flexiMonitorsNumberOfUnits, batteryBankSymmetryTable=batteryBankSymmetryTable, inverterGroupEnergyLogAccumulated=inverterGroupEnergyLogAccumulated, batteryLVBDStatus=batteryLVBDStatus, generatorVoltageControlStopAfter=generatorVoltageControlStopAfter, batteryVoltageTrapRepeatCounter=batteryVoltageTrapRepeatCounter, controlUnitSwVersion=controlUnitSwVersion, mainsMonitorsEntry=mainsMonitorsEntry, batteryEqualize=batteryEqualize, generatorCapacityStartOnDischargeLimit=generatorCapacityStartOnDischargeLimit, generatorFuelConsumptionLog=generatorFuelConsumptionLog, mainsMonitorVoltageValue=mainsMonitorVoltageValue, mainsGroupOutageLogWeeksValue=mainsGroupOutageLogWeeksValue, rectifiersErrorDescription=rectifiersErrorDescription, batteryGroup2Currents=batteryGroup2Currents, batteryVoltageValue=batteryVoltageValue, mainsGroupOutageLogTable=mainsGroupOutageLogTable, eltekTraps=eltekTraps, outputIoUnitOutputIndex=outputIoUnitOutputIndex, generatorRunHoursLogLastMonthsNumberOfEntries=generatorRunHoursLogLastMonthsNumberOfEntries, mainsMonitorVoltageTable=mainsMonitorVoltageTable, dcdcCurrentEntry=dcdcCurrentEntry, snmpTrapRepeatRate=snmpTrapRepeatRate, smartNodeErrorTrapRepeatCounter=smartNodeErrorTrapRepeatCounter, inverterGroupEnergyLogLastHoursValue=inverterGroupEnergyLogLastHoursValue, batteryMonitorTemperatureMinorLowLevel=batteryMonitorTemperatureMinorLowLevel, rectifierSwPartNumber=rectifierSwPartNumber, inverterOutputPowerValue=inverterOutputPowerValue, mainsGroupsTable=mainsGroupsTable, batteryTemperatureMinorLowLevel=batteryTemperatureMinorLowLevel, controlSystemIoUnitNumberOfFans=controlSystemIoUnitNumberOfFans, rectifierGroupCurrentMinorAlarmLevel=rectifierGroupCurrentMinorAlarmLevel, mainControlUnitEarthFaultMajorAlarmLevel=mainControlUnitEarthFaultMajorAlarmLevel, mainsMonitorFrequencyDescription=mainsMonitorFrequencyDescription, invertersEnergyLog=invertersEnergyLog, windChargerHwPartNumber=windChargerHwPartNumber, outputIoUnitOutputStatus=outputIoUnitOutputStatus, mainsMonitorVoltageDescription=mainsMonitorVoltageDescription, batteryGroup2TemperaturesTrapRepeatCounter=batteryGroup2TemperaturesTrapRepeatCounter, batteryGroup2TestResultDischarged=batteryGroup2TestResultDischarged, alarmOutputsTrap=alarmOutputsTrap, batteryMonitorTemperatureDescription=batteryMonitorTemperatureDescription, inverterGroupReactiveEnergyLogLastDaysIndex=inverterGroupReactiveEnergyLogLastDaysIndex, batteryMonitorSymmetryTrapRepeatCounter=batteryMonitorSymmetryTrapRepeatCounter, batteryEqualizeVoltage=batteryEqualizeVoltage, batteryLVBD=batteryLVBD, mainControlUnitEarthFaultValue=mainControlUnitEarthFaultValue, solarChargersErrorValue=solarChargersErrorValue, rectifierGroupTemperatureMinorHighLevel=rectifierGroupTemperatureMinorHighLevel, batteryTestResultDischarged=batteryTestResultDischarged, inverterGroupCapacityValue=inverterGroupCapacityValue, batteryGroup2FuseAlarmEnable=batteryGroup2FuseAlarmEnable, inverterGroupErrorDescription=inverterGroupErrorDescription, solarChargersEnergyLogLastWeeksNumberOfEntries=solarChargersEnergyLogLastWeeksNumberOfEntries, loadEnergyLogLastHoursNumberOfEntries=loadEnergyLogLastHoursNumberOfEntries, batteryGroup2Voltage=batteryGroup2Voltage, currentMonitorCurrentMajorAlarmLevel=currentMonitorCurrentMajorAlarmLevel, invertersEnergyLogLastHoursEntry=invertersEnergyLogLastHoursEntry, rectifierGroupEnergyLogLastWeeksIndex=rectifierGroupEnergyLogLastWeeksIndex, batteryGroup2CurrentMinorLowLevel=batteryGroup2CurrentMinorLowLevel, ioUnitErrorStatus=ioUnitErrorStatus, batteryGroup2TestNumberOfResults=batteryGroup2TestNumberOfResults, batteryCycleLogMonthsValue=batteryCycleLogMonthsValue, batteryBankSymmetryStatus=batteryBankSymmetryStatus, batteryGroup2CurrentsMajorLowLevel=batteryGroup2CurrentsMajorLowLevel, rectifierGroupsEntry=rectifierGroupsEntry, batteryCurrentDescription=batteryCurrentDescription, generatorEnergyLogLastWeeksTable=generatorEnergyLogLastWeeksTable, batteryBankSymmetryMeasureValue=batteryBankSymmetryMeasureValue, inputControlUnitInputEntry=inputControlUnitInputEntry, generatorFuelConsumptionTotalUsed=generatorFuelConsumptionTotalUsed, batteryEnergyLogLastDaysValue=batteryEnergyLogLastDaysValue, loadCurrentTrapRepeatCounter=loadCurrentTrapRepeatCounter, inputControlUnitInputTable=inputControlUnitInputTable, batteryGroup2CycleLogMonthsIndex=batteryGroup2CycleLogMonthsIndex, inverterGroupInverterIndex=inverterGroupInverterIndex, batteryMonitorTemperatureIndex=batteryMonitorTemperatureIndex, dcdcErrorMajorAlarmLevel=dcdcErrorMajorAlarmLevel, rectifiersEnergyLogLastHoursEntry=rectifiersEnergyLogLastHoursEntry, loadVoltageIndex=loadVoltageIndex, rectifiersTemperatureMinorLowLevel=rectifiersTemperatureMinorLowLevel, invertersErrorStatus=invertersErrorStatus, rectifiersCapacityTrapRepeatCounter=rectifiersCapacityTrapRepeatCounter, solarChargersNumberOfSolarChargers=solarChargersNumberOfSolarChargers, batteryGroup2CurrentStatus=batteryGroup2CurrentStatus, mainsMonitorFrequencyTable=mainsMonitorFrequencyTable, batteryGroup2TestResultQuality=batteryGroup2TestResultQuality, rectifiersCurrentMajorAlarmLevel=rectifiersCurrentMajorAlarmLevel, flexiMonitorErrorAlarmEnable=flexiMonitorErrorAlarmEnable, batteryFuseDescription=batteryFuseDescription, windChargersCurrentMinorAlarmLevel=windChargersCurrentMinorAlarmLevel, controlSystemIoUnitTemperatureMinorLowLevel=controlSystemIoUnitTemperatureMinorLowLevel, mainsGroupOutageLogDaysIndex=mainsGroupOutageLogDaysIndex, batteryDescription=batteryDescription, batteryMonitorFuseStatus=batteryMonitorFuseStatus, rectifierGroupEnergyLogLastHoursIndex=rectifierGroupEnergyLogLastHoursIndex, battery=battery, batteryGroup2ReferenceVoltage=batteryGroup2ReferenceVoltage, invertersCapacity=invertersCapacity, dcdcGroupsTable=dcdcGroupsTable, generatorMonthlyRunStartDayinMonth1=generatorMonthlyRunStartDayinMonth1, currentMonitorFuseTrapRepeatCounter=currentMonitorFuseTrapRepeatCounter, mainsOutageLogWeeksTable=mainsOutageLogWeeksTable, batteryGroup2FuseTrapRepeatCounter=batteryGroup2FuseTrapRepeatCounter, batteryQualityMajorAlarmLevel=batteryQualityMajorAlarmLevel)
mibBuilder.exportSymbols("SP2-MIB", batteryGroup2TemperatureMajorLowLevel=batteryGroup2TemperatureMajorLowLevel, solarChargersCurrentValue=solarChargersCurrentValue, generatorFuelConsumptionLogLastWeeksEntry=generatorFuelConsumptionLogLastWeeksEntry, batteryGroup2VoltageValue=batteryGroup2VoltageValue, batteryMonitorCurrentMinorLowLevel=batteryMonitorCurrentMinorLowLevel, inverterGroupErrorTrapRepeatCounter=inverterGroupErrorTrapRepeatCounter, rectifiersEnergyLogLastHoursNumberOfEntries=rectifiersEnergyLogLastHoursNumberOfEntries, ioUnitErrorMinorAlarmLevel=ioUnitErrorMinorAlarmLevel, loadCurrentValue=loadCurrentValue, solarChargersEnergyLogLastDaysIndex=solarChargersEnergyLogLastDaysIndex, batteryStatus=batteryStatus, batteryGroup2BankStatus=batteryGroup2BankStatus, rectifierGroupEnergyLogLastDaysIndex=rectifierGroupEnergyLogLastDaysIndex, windChargersCurrentValue=windChargersCurrentValue, userSuspendedAlarmEnable=userSuspendedAlarmEnable, batteryGroup2EnergyLogLastWeeksTable=batteryGroup2EnergyLogLastWeeksTable, solarChargersEnergyLogLastHoursValue=solarChargersEnergyLogLastHoursValue, rectifierGroupEnergyLogTable=rectifierGroupEnergyLogTable, batteryTemperaturesAlarmEnable=batteryTemperaturesAlarmEnable, batteryGroup2TestResultEntry=batteryGroup2TestResultEntry, flexiMonitorId=flexiMonitorId, rectifierGroupErrorTrapRepeatCounter=rectifierGroupErrorTrapRepeatCounter, generatorFuelConsumptionLogLastDaysIndex=generatorFuelConsumptionLogLastDaysIndex, inverterGroupReactiveEnergyLogLastDaysValue=inverterGroupReactiveEnergyLogLastDaysValue, inputIoUnitProgInputStatus=inputIoUnitProgInputStatus, generatorFuelConsumptionLogLastMonthsEntry=generatorFuelConsumptionLogLastMonthsEntry, mainsMonitorVoltageTrapRepeatCounter=mainsMonitorVoltageTrapRepeatCounter, batteryCurrentsMinorHighLevel=batteryCurrentsMinorHighLevel, batteryVoltageMinorHighLevel=batteryVoltageMinorHighLevel, dcdcEntry=dcdcEntry, batteryCurrentsMajorHighLevel=batteryCurrentsMajorHighLevel, mainsMonitorFrequencyTrapRepeatCounter=mainsMonitorFrequencyTrapRepeatCounter, loadEnergyLogLastDaysIndex=loadEnergyLogLastDaysIndex, mainsMonitorEnergyLogLastDaysValue=mainsMonitorEnergyLogLastDaysValue, batteryAhChargedTrapRepeatCounter=batteryAhChargedTrapRepeatCounter, powerAlarmVars=powerAlarmVars, mainsMonitors=mainsMonitors, currentMonitorFuseValue=currentMonitorFuseValue, inverterOutputFrequencyValue=inverterOutputFrequencyValue, generatorTankNumberOfTanks=generatorTankNumberOfTanks, loadNumberOfGroups=loadNumberOfGroups, generatorRunHoursLogLastDaysTable=generatorRunHoursLogLastDaysTable, generatorRunHoursLogLastDaysIndex=generatorRunHoursLogLastDaysIndex, generatorFuelConsumptionLogLastWeeksIndex=generatorFuelConsumptionLogLastWeeksIndex, loadEnergyLogLastHoursValue=loadEnergyLogLastHoursValue, batteryCycleLogWeeksEntry=batteryCycleLogWeeksEntry, batteryUsedCapacityTrapRepeatCounter=batteryUsedCapacityTrapRepeatCounter, batteryLVBDConnectVoltage=batteryLVBDConnectVoltage, inverterGroupErrorValue=inverterGroupErrorValue, invertersErrorMinorAlarmLevel=invertersErrorMinorAlarmLevel, flexiMonitorErrorStatus=flexiMonitorErrorStatus, inverterGroupCurrentMinorAlarmLevel=inverterGroupCurrentMinorAlarmLevel, batteryMonitorFuseTrapRepeatCounter=batteryMonitorFuseTrapRepeatCounter, mainControlUnitTemperatureMinorLowLevel=mainControlUnitTemperatureMinorLowLevel, batteryGroup2TotalCapacityDescription=batteryGroup2TotalCapacityDescription, mainsVoltageTable=mainsVoltageTable, rectifiersCurrentTrapRepeatCounter=rectifiersCurrentTrapRepeatCounter, solarChargersErrorEnable=solarChargersErrorEnable, batteryGroup2AhChargedDescription=batteryGroup2AhChargedDescription, batteryGroup2VoltageDescription=batteryGroup2VoltageDescription, smartNodeErrorAlarmEnable=smartNodeErrorAlarmEnable, batteryVoltageAlarmEnable=batteryVoltageAlarmEnable, batteryBoostManualMaxDuration=batteryBoostManualMaxDuration, batteryTotalCapacityAlarmEnable=batteryTotalCapacityAlarmEnable, batteryTemperatureIndex=batteryTemperatureIndex, inverterGroupEnergyLogLastWeeksTable=inverterGroupEnergyLogLastWeeksTable, ambientTemperatureStatus=ambientTemperatureStatus, loadEnergyLogLastWeeksNumberOfEntries=loadEnergyLogLastWeeksNumberOfEntries, loadEnergyLogLastWeeksValue=loadEnergyLogLastWeeksValue, solarChargersCurrentMajorAlarmLevel=solarChargersCurrentMajorAlarmLevel, batteryGroup2BoostVoltage=batteryGroup2BoostVoltage, batteryFuseAlarmEnable=batteryFuseAlarmEnable, loadGroupIndex=loadGroupIndex, batteryBank=batteryBank, generatorFuelConsumptionLogLastDaysEntry=generatorFuelConsumptionLogLastDaysEntry, batteryCurrentsValue=batteryCurrentsValue, dcdcCurrentMajorAlarmLevel=dcdcCurrentMajorAlarmLevel, mainsMainsFailure=mainsMainsFailure, inputIoUnitProgInputDescription=inputIoUnitProgInputDescription, generatorMonthlyRunStartTime=generatorMonthlyRunStartTime, flexiMonitorInputAlarmEnable=flexiMonitorInputAlarmEnable, rectifiersEnergyLogLastDaysEntry=rectifiersEnergyLogLastDaysEntry, dcdcCapacityTrapRepeatCounter=dcdcCapacityTrapRepeatCounter, userSuspendedStatus=userSuspendedStatus, ambientTemperatureMajorLowLevel=ambientTemperatureMajorLowLevel, mainsVoltageEntry=mainsVoltageEntry, batteryMonitorErrorDescription=batteryMonitorErrorDescription, mainsGroupVoltageIndex=mainsGroupVoltageIndex, batteryGroup2VoltageMinorLowLevel=batteryGroup2VoltageMinorLowLevel, generatorFuelConsumptionLogLastMonthsIndex=generatorFuelConsumptionLogLastMonthsIndex, rectifiersEnergyLogLastHoursIndex=rectifiersEnergyLogLastHoursIndex, batteryMonitorCurrentAlarmEnable=batteryMonitorCurrentAlarmEnable, invertersCurrentMinorAlarmLevel=invertersCurrentMinorAlarmLevel, mainsGroupOutageTotal=mainsGroupOutageTotal, alarmSubsysStatusValue=alarmSubsysStatusValue, solarChargerHwPartNumber=solarChargerHwPartNumber, mainsOutageLogWeeksEntry=mainsOutageLogWeeksEntry, mainsOutageLogWeeksIndex=mainsOutageLogWeeksIndex, outputControlUnitNumberOfOutputs=outputControlUnitNumberOfOutputs, batteryAhChargedStatus=batteryAhChargedStatus, batteryGroup2TemperaturesAlarmEnable=batteryGroup2TemperaturesAlarmEnable, mainsMonitorCurrentTrapRepeatCounter=mainsMonitorCurrentTrapRepeatCounter, rectifierGroupCurrentValue=rectifierGroupCurrentValue, powerSystemCurrentDecimalSetting=powerSystemCurrentDecimalSetting, mainsMonitorEnergyLogLastDaysIndex=mainsMonitorEnergyLogLastDaysIndex, smartNodeErrorMajorAlarmLevel=smartNodeErrorMajorAlarmLevel, solarChargersEnergyLogLastHoursIndex=solarChargersEnergyLogLastHoursIndex, currentMonitorFuseAlarmEnable=currentMonitorFuseAlarmEnable, currentMonitorCurrentTable=currentMonitorCurrentTable, inverterSwVersion=inverterSwVersion, batteryGroup2TemperaturesMinorLowLevel=batteryGroup2TemperaturesMinorLowLevel, batteryBankNumberOfTemperatures=batteryBankNumberOfTemperatures, windChargerType=windChargerType, batteryAhChargedMajorHighLevel=batteryAhChargedMajorHighLevel, batteryGroup2RemainingCapacityValue=batteryGroup2RemainingCapacityValue, batteryVoltageMajorLowLevel=batteryVoltageMajorLowLevel, batteryTotalCapacityDescription=batteryTotalCapacityDescription, batteryGroup2TestResultTable=batteryGroup2TestResultTable, loadEnergyLogLastDaysNumberOfEntries=loadEnergyLogLastDaysNumberOfEntries, batteryBoostVoltage=batteryBoostVoltage, loadFuseStatus=loadFuseStatus, mainsGroupMainsFailureMinorAlarmLevel=mainsGroupMainsFailureMinorAlarmLevel, batteryGroup2VoltageMajorHighLevel=batteryGroup2VoltageMajorHighLevel, solarChargers=solarChargers, mainsMonitorIndex=mainsMonitorIndex, mainsGroupOutageLogMonthsValue=mainsGroupOutageLogMonthsValue, generatorRunHoursLogLastMonthsIndex=generatorRunHoursLogLastMonthsIndex, batteryGroup2BankFuseEntry=batteryGroup2BankFuseEntry, inverterGroupInverterStatus=inverterGroupInverterStatus, loadMonitorErrorStatus=loadMonitorErrorStatus, batteryBankEntry=batteryBankEntry, batteryTestResultTable=batteryTestResultTable, powerSystemStatus=powerSystemStatus, mainsGroupOutageLogMonthsEntry=mainsGroupOutageLogMonthsEntry, invertersError=invertersError, inverterGroupErrorTable=inverterGroupErrorTable, flexiMonitorInputEntry=flexiMonitorInputEntry, powerSystemInstallDate=powerSystemInstallDate, batteryRemainingCapacityAlarmEnable=batteryRemainingCapacityAlarmEnable, currentMonitorCurrentIndex=currentMonitorCurrentIndex, flexiMonitorErrorValue=flexiMonitorErrorValue, generatorDailyRunStartHour=generatorDailyRunStartHour, batteryMonitorCurrentDescription=batteryMonitorCurrentDescription, invertersEnergyLogLastWeeksTable=invertersEnergyLogLastWeeksTable, windChargersErrorEnable=windChargersErrorEnable, batteryGroup2EnergyLogLastWeeksNumberOfEntries=batteryGroup2EnergyLogLastWeeksNumberOfEntries, mainsGroupOutageLogDaysNumberOfEntries=mainsGroupOutageLogDaysNumberOfEntries, generatorDailyRunSetupEntry=generatorDailyRunSetupEntry, generatorRunHoursLogLastWeeksNumberOfEntries=generatorRunHoursLogLastWeeksNumberOfEntries, deltaTemperatureDescription=deltaTemperatureDescription, batteryGroup2LVBDDisconnectVoltage=batteryGroup2LVBDDisconnectVoltage, controlUnitHwPartNumber=controlUnitHwPartNumber, rectifierGroupErrorStatus=rectifierGroupErrorStatus, batteryBankCurrentEntry=batteryBankCurrentEntry, rectifierGroupRectifierOutputCurrentValue=rectifierGroupRectifierOutputCurrentValue, controlSystemIoUnitFanSpeedValue=controlSystemIoUnitFanSpeedValue, batteryTemperaturesMinorHighLevel=batteryTemperaturesMinorHighLevel, generatorFuelConsumptionLogLastDaysTable=generatorFuelConsumptionLogLastDaysTable, dcdcNumberOfAlarms=dcdcNumberOfAlarms, mainsGroupOutageLogMonthsIndex=mainsGroupOutageLogMonthsIndex, batteryAhChargedMinorHighLevel=batteryAhChargedMinorHighLevel, batteryMonitorErrorTrapRepeatCounter=batteryMonitorErrorTrapRepeatCounter, batteryTimeLeftMinorAlarmLevel=batteryTimeLeftMinorAlarmLevel, currentMonitorEnergyLogLastDaysValue=currentMonitorEnergyLogLastDaysValue, rectifiersErrorStatus=rectifiersErrorStatus, invertersReactiveEnergyLogLastWeeksNumberOfEntries=invertersReactiveEnergyLogLastWeeksNumberOfEntries, mainControlUnitsTable=mainControlUnitsTable, batteryRemainingCapacityMajorLowLevel=batteryRemainingCapacityMajorLowLevel, rectifiersTemperatureValue=rectifiersTemperatureValue, currentMonitorEnergyLogLastDaysNumberOfEntries=currentMonitorEnergyLogLastDaysNumberOfEntries, batteryTemperaturesStatus=batteryTemperaturesStatus, mainControlUnitsErrorAlarmEnable=mainControlUnitsErrorAlarmEnable, dcdcErrorEntry=dcdcErrorEntry, batteryMonitorNumberOfTemperatures=batteryMonitorNumberOfTemperatures, inverterGroupCapacityTable=inverterGroupCapacityTable, loadFuseTrapRepeatCounter=loadFuseTrapRepeatCounter, inverterHwVersion=inverterHwVersion, inverterGroupEnergyLogLastDaysIndex=inverterGroupEnergyLogLastDaysIndex, batteryGroup2AhChargedValue=batteryGroup2AhChargedValue, mainsOutageLogDaysTable=mainsOutageLogDaysTable, alarmInputsTrap=alarmInputsTrap, batteryRemainingCapacityStatus=batteryRemainingCapacityStatus, batteryFuseValue=batteryFuseValue, batteryGroup2QualityDescription=batteryGroup2QualityDescription, smartNodeErrorDescription=smartNodeErrorDescription, dcdcErrorValue=dcdcErrorValue, inverterGroupStatus=inverterGroupStatus, batteryGroup2AhChargedTrapRepeatCounter=batteryGroup2AhChargedTrapRepeatCounter, flexiMonitorNumberOfOutputs=flexiMonitorNumberOfOutputs, mainsMonitorNumberOfFrequencies=mainsMonitorNumberOfFrequencies, generatorDailyRunDayIndex=generatorDailyRunDayIndex, solarChargersErrorMinorAlarmLevel=solarChargersErrorMinorAlarmLevel, windChargersError=windChargersError, controlSystemIoUnitTemperatureDescription=controlSystemIoUnitTemperatureDescription, mainsMonitorEnergyLogAccumulated=mainsMonitorEnergyLogAccumulated, currentMonitorNumberOfCurrents=currentMonitorNumberOfCurrents, inverterGroupCapacityTrapRepeatCounter=inverterGroupCapacityTrapRepeatCounter, mainControlUnitEarthFaultTrapRepeatCounter=mainControlUnitEarthFaultTrapRepeatCounter, inverterGroupCapacityAlarmEnable=inverterGroupCapacityAlarmEnable, generatorDailyRunSetupTable=generatorDailyRunSetupTable, mainsMonitorErrorDescription=mainsMonitorErrorDescription, windChargersCurrentAlarmEnable=windChargersCurrentAlarmEnable, inputControlUnitIndex=inputControlUnitIndex, windChargerSwPartNumber=windChargerSwPartNumber, windChargersEnergyLogLastWeeksTable=windChargersEnergyLogLastWeeksTable, batteryGroup2CurrentsMajorHighLevel=batteryGroup2CurrentsMajorHighLevel, loadVoltageTable=loadVoltageTable, rectifierGroupIndex=rectifierGroupIndex, alarmMeasuredVarValue=alarmMeasuredVarValue, mainControlUnitsErrorTrapRepeatCounter=mainControlUnitsErrorTrapRepeatCounter, flexiMonitors=flexiMonitors, alarmGroups=alarmGroups, flexiMonitorOutputDescription=flexiMonitorOutputDescription, rectifiersTemperatureMinorHighLevel=rectifiersTemperatureMinorHighLevel, currentMonitorCurrentEntry=currentMonitorCurrentEntry, batteryGroup2TemperatureStatus=batteryGroup2TemperatureStatus, batteryGroup2RemainingCapacityDescription=batteryGroup2RemainingCapacityDescription, windChargersEnergyLogLastHoursIndex=windChargersEnergyLogLastHoursIndex, batteryEnergyLogLastHoursEntry=batteryEnergyLogLastHoursEntry, batteryAhDischargedMinorHighLevel=batteryAhDischargedMinorHighLevel, rectifierGroupEnergyLogAccumulated=rectifierGroupEnergyLogAccumulated, alarmSolarChargerTrap=alarmSolarChargerTrap, batteryGroup2EnergyLogLastHoursIndex=batteryGroup2EnergyLogLastHoursIndex, invertersEnergyLogLastHoursIndex=invertersEnergyLogLastHoursIndex, dcdcCapacityMajorAlarmLevel=dcdcCapacityMajorAlarmLevel, batteryTestResultStartDateTime=batteryTestResultStartDateTime, batteryMonitorSymmetryMeasureValue=batteryMonitorSymmetryMeasureValue, rectifiersNumberOfRectifiers=rectifiersNumberOfRectifiers, rectifierGroupEnergyLogLastHoursEntry=rectifierGroupEnergyLogLastHoursEntry, batteryGroup2AhDischargedStatus=batteryGroup2AhDischargedStatus, currentMonitorEnergyLogLastHoursIndex=currentMonitorEnergyLogLastHoursIndex, batteryGroup2LVBDConnectVoltage=batteryGroup2LVBDConnectVoltage, batteryMonitorTemperatureTrapRepeatCounter=batteryMonitorTemperatureTrapRepeatCounter, outputControlUnitOutputStatus=outputControlUnitOutputStatus, solarChargersCurrentMinorAlarmLevel=solarChargersCurrentMinorAlarmLevel, batteryTestResultDuration=batteryTestResultDuration, dcdcGroupsEntry=dcdcGroupsEntry, generatorFuelConsumptionLogLastWeeksValue=generatorFuelConsumptionLogLastWeeksValue, batteryGroup2=batteryGroup2, dcdcGroupOutputVoltage=dcdcGroupOutputVoltage, controlSystemIoUnitsTable=controlSystemIoUnitsTable, solarChargersCurrentTrapRepeatCounter=solarChargersCurrentTrapRepeatCounter, controlSystemIoUnitFanEntry=controlSystemIoUnitFanEntry, loadLVLDConnectVoltage=loadLVLDConnectVoltage, batteryGroup2TimeLeftAlarmEnable=batteryGroup2TimeLeftAlarmEnable, batteryMonitorFuseEntry=batteryMonitorFuseEntry, mainsGroupVoltageAlarmEnable=mainsGroupVoltageAlarmEnable, batteryGroup2TemperaturesMajorHighLevel=batteryGroup2TemperaturesMajorHighLevel, rectifiersEnergyLogLastDaysNumberOfEntries=rectifiersEnergyLogLastDaysNumberOfEntries, batteryBankSymmetryDeltaValue=batteryBankSymmetryDeltaValue, mainsNumberOfPhases=mainsNumberOfPhases, batteryGroup2BankNumberOfSymmetries=batteryGroup2BankNumberOfSymmetries, loadFuseDescription=loadFuseDescription, mainsNumberOfGroups=mainsNumberOfGroups)
mibBuilder.exportSymbols("SP2-MIB", rectifierGroupTemperatureAlarmEnable=rectifierGroupTemperatureAlarmEnable, batteryMonitorNumberOfCurrents=batteryMonitorNumberOfCurrents, generatorTankIndex=generatorTankIndex, flexiMonitorErrorDescription=flexiMonitorErrorDescription, solarChargersEnergyLogLastHoursTable=solarChargersEnergyLogLastHoursTable, batteryTemperaturesDescription=batteryTemperaturesDescription, loadMonitorErrorDescription=loadMonitorErrorDescription, mainsMonitorVoltageMinorHighLevel=mainsMonitorVoltageMinorHighLevel, mainsOutageLogWeeksValue=mainsOutageLogWeeksValue, invertersCurrentTrapRepeatCounter=invertersCurrentTrapRepeatCounter, inverterGroupCurrentTrapRepeatCounter=inverterGroupCurrentTrapRepeatCounter, mainsGroupOutageLogDaysValue=mainsGroupOutageLogDaysValue, currentMonitorFuseStatus=currentMonitorFuseStatus, controlSystem=controlSystem, solarChargersCurrentAlarmEnable=solarChargersCurrentAlarmEnable, mainsMonitorErrorStatus=mainsMonitorErrorStatus, alarmGroupIndex=alarmGroupIndex, generatorActivation=generatorActivation, controlSystemIoUnitTemperatureAlarmEnable=controlSystemIoUnitTemperatureAlarmEnable, mainControlUnitEarthFaultEntry=mainControlUnitEarthFaultEntry, rectifiersTemperatureMajorLowLevel=rectifiersTemperatureMajorLowLevel, dcdcNumberOfCapacities=dcdcNumberOfCapacities, rectifierGroupErrorEntry=rectifierGroupErrorEntry, rectifiersEnergyLogLastWeeksIndex=rectifiersEnergyLogLastWeeksIndex, currentMonitorIndex=currentMonitorIndex, controlUnitStatus=controlUnitStatus, batteryGroup2RemainingCapacityMinorLowLevel=batteryGroup2RemainingCapacityMinorLowLevel, rectifiersEnergyLogLastHoursValue=rectifiersEnergyLogLastHoursValue, mainsMonitorsNumberOfUnits=mainsMonitorsNumberOfUnits, loadFuseTable=loadFuseTable, dcdcCapacityValue=dcdcCapacityValue, loadEnergyLogLastDaysTable=loadEnergyLogLastDaysTable, inverterGroupErrorEntry=inverterGroupErrorEntry, powerSystemNominalVoltage=powerSystemNominalVoltage, controlUnitHwVersion=controlUnitHwVersion, flexiMonitorInputStatus=flexiMonitorInputStatus, inverterGroupCurrentEntry=inverterGroupCurrentEntry, ioUnitErrorTrapRepeatCounter=ioUnitErrorTrapRepeatCounter, mainsMonitorCurrentDescription=mainsMonitorCurrentDescription, mainControlUnitEarthFaultStatus=mainControlUnitEarthFaultStatus, batteryCurrentValue=batteryCurrentValue, dcdcCurrentAlarmEnable=dcdcCurrentAlarmEnable, batteryTemperaturesTrapRepeatCounter=batteryTemperaturesTrapRepeatCounter, batteryAhChargedDescription=batteryAhChargedDescription, batteryGroup2QualityStatus=batteryGroup2QualityStatus, batteryGroup2UsedCapacityMajorAlarmLevel=batteryGroup2UsedCapacityMajorAlarmLevel, solarChargersEnergyLogLastWeeksTable=solarChargersEnergyLogLastWeeksTable, windChargersEnergyLog=windChargersEnergyLog, batteryCycleLogDaysNumberOfEntries=batteryCycleLogDaysNumberOfEntries, batteryGroup2CurrentDescription=batteryGroup2CurrentDescription, flexiMonitorError=flexiMonitorError, mainsGroupOutageLogEntry=mainsGroupOutageLogEntry, rectifiersErrorEnable=rectifiersErrorEnable, inverterGroupReactiveEnergyLogLastDaysNoOfEntries=inverterGroupReactiveEnergyLogLastDaysNoOfEntries, batteryGroup2AhDischargedDescription=batteryGroup2AhDischargedDescription, mainsMonitorErrorMinorAlarmLevel=mainsMonitorErrorMinorAlarmLevel, batteryTemperatureValue=batteryTemperatureValue, inverterGroupInverterType=inverterGroupInverterType, batteryGroup2CycleLog=batteryGroup2CycleLog, rectifierGroupEnergyLogLastDaysNumberOfEntries=rectifierGroupEnergyLogLastDaysNumberOfEntries, flexiMonitorOutputEntry=flexiMonitorOutputEntry, invertersErrorTrapRepeatCounter=invertersErrorTrapRepeatCounter, currentMonitorsTable=currentMonitorsTable, currentMonitorCurrentValue=currentMonitorCurrentValue, outputIoUnitOutputDescription=outputIoUnitOutputDescription, inverterGroupReactiveEnergyLogLastDaysEntry=inverterGroupReactiveEnergyLogLastDaysEntry, invertersReactiveEnergyLog=invertersReactiveEnergyLog, dcdcIndex=dcdcIndex, mainsMainsFailureMajorAlarmLevel=mainsMainsFailureMajorAlarmLevel, dcdcGroupStatus=dcdcGroupStatus, rectifiers=rectifiers, mainControlUnitsError=mainControlUnitsError, rectifiersCapacityMajorAlarmLevel=rectifiersCapacityMajorAlarmLevel, batteryCycleLogMonthsEntry=batteryCycleLogMonthsEntry, batteryGroup2RemainingCapacityTrapRepeatCounter=batteryGroup2RemainingCapacityTrapRepeatCounter, invertersReactiveEnergyLogLastHoursValue=invertersReactiveEnergyLogLastHoursValue, rectifierGroupErrorAlarmEnable=rectifierGroupErrorAlarmEnable, controlSystemIoUnitTemperatureStatus=controlSystemIoUnitTemperatureStatus, dcdcErrorStatus=dcdcErrorStatus, windChargersEnergyLogLastHoursValue=windChargersEnergyLogLastHoursValue, batteryGroup2FuseDescription=batteryGroup2FuseDescription, currentMonitorFuseDescription=currentMonitorFuseDescription, batteryTotalCapacityMajorLowLevel=batteryTotalCapacityMajorLowLevel, batteryTest=batteryTest, flexiMonitorInputConfiguration=flexiMonitorInputConfiguration, windChargersCurrentDescription=windChargersCurrentDescription, deltaTemperatureMajorHighLevel=deltaTemperatureMajorHighLevel, batteryGroup2UsedCapacity=batteryGroup2UsedCapacity, batteryGroup2ChargeCurrentLimitValue=batteryGroup2ChargeCurrentLimitValue, batteryGroup2TemperaturesValue=batteryGroup2TemperaturesValue, batteryGroup2TemperatureMajorHighLevel=batteryGroup2TemperatureMajorHighLevel, inverterGroupInverterHwPartNumber=inverterGroupInverterHwPartNumber, batteryGroup2LVBDStatus=batteryGroup2LVBDStatus, inverterGroupCapacityDescription=inverterGroupCapacityDescription, loadLVLDEnable=loadLVLDEnable, dcdcCapacityMinorAlarmLevel=dcdcCapacityMinorAlarmLevel, batteryTimeLeftMajorAlarmLevel=batteryTimeLeftMajorAlarmLevel, mainsMonitorEnergyLogLastDaysNumberOfEntries=mainsMonitorEnergyLogLastDaysNumberOfEntries, currentMonitorFuseEntry=currentMonitorFuseEntry, currentMonitorEnergyLogAccumulated=currentMonitorEnergyLogAccumulated, solarChargerEntry=solarChargerEntry, solarChargersEnergyLogLastDaysEntry=solarChargersEnergyLogLastDaysEntry, mainsMonitorEnergyLogLastWeeksTable=mainsMonitorEnergyLogLastWeeksTable, solarChargerIndex=solarChargerIndex, batteryGroup2RemainingCapacity=batteryGroup2RemainingCapacity, flexiMonitorOutputStatus=flexiMonitorOutputStatus, invertersEnergyLogLastWeeksValue=invertersEnergyLogLastWeeksValue, mainsMonitorCurrentValue=mainsMonitorCurrentValue, generatorMonthlyRunStartDayinMonth2=generatorMonthlyRunStartDayinMonth2, invertersEnergyLogLastWeeksNumberOfEntries=invertersEnergyLogLastWeeksNumberOfEntries, solarChargersEnergyLogAccumulated=solarChargersEnergyLogAccumulated, snmpInhibitTraps=snmpInhibitTraps, batteryGroup2RemainingCapacityAlarmEnable=batteryGroup2RemainingCapacityAlarmEnable, inverterGroupCapacityEntry=inverterGroupCapacityEntry, invertersEnergyLogLastHoursNumberOfEntries=invertersEnergyLogLastHoursNumberOfEntries, mainsGroupOutageLogWeeksNumberOfEntries=mainsGroupOutageLogWeeksNumberOfEntries, solarChargersErrorStatus=solarChargersErrorStatus, invertersCapacityMajorAlarmLevel=invertersCapacityMajorAlarmLevel, generatorChargeTime=generatorChargeTime, inverterGroupReactiveEnergyLogLastWeeksValue=inverterGroupReactiveEnergyLogLastWeeksValue, mainsMonitorsTable=mainsMonitorsTable, rectifiersEnergyLogLastDaysValue=rectifiersEnergyLogLastDaysValue, batteryQuality=batteryQuality, alarmLoadGroupTrap=alarmLoadGroupTrap, batteryGroup2EnergyLogLastWeeksIndex=batteryGroup2EnergyLogLastWeeksIndex, loadLVLDEntry=loadLVLDEntry, rectifierGroupCapacityEntry=rectifierGroupCapacityEntry, batteryMonitorCurrentMajorLowLevel=batteryMonitorCurrentMajorLowLevel, batteryGroup2TestResultIndex=batteryGroup2TestResultIndex, invertersEnergyLogLastDaysValue=invertersEnergyLogLastDaysValue, generatorEnergyLogAccumulated=generatorEnergyLogAccumulated, loadMonitorErrorMajorAlarmLevel=loadMonitorErrorMajorAlarmLevel, batteryQualityStatus=batteryQualityStatus, dcdcNumberOfCurrents=dcdcNumberOfCurrents, batteryMonitorNumberOfSymmetries=batteryMonitorNumberOfSymmetries, batteryGroup2BankSymmetryDeltaValue=batteryGroup2BankSymmetryDeltaValue, loadEnergyLogLastHoursIndex=loadEnergyLogLastHoursIndex, alarmInverterTrap=alarmInverterTrap, loadCurrentAlarmEnable=loadCurrentAlarmEnable, batteryCurrentsTrapRepeatCounter=batteryCurrentsTrapRepeatCounter, generatorEnergyLogLastWeeksValue=generatorEnergyLogLastWeeksValue, windChargerSwVersion=windChargerSwVersion, rectifierGroupCurrentStatus=rectifierGroupCurrentStatus, rectifierGroupErrorTable=rectifierGroupErrorTable, batteryCycleLogMonthsIndex=batteryCycleLogMonthsIndex, generatorEnergyLogLastWeeksNumberOfEntries=generatorEnergyLogLastWeeksNumberOfEntries, rectifierGroupRectifierEntry=rectifierGroupRectifierEntry, batteryMonitorCurrentTrapRepeatCounter=batteryMonitorCurrentTrapRepeatCounter, mainsMonitorNumberOfCurrents=mainsMonitorNumberOfCurrents, batteryGroup2CurrentTrapRepeatCounter=batteryGroup2CurrentTrapRepeatCounter, mainControlUnitTemperatureTable=mainControlUnitTemperatureTable, inverterOutputCurrentValue=inverterOutputCurrentValue, loadEnergyLog=loadEnergyLog, mainsVoltageIndex=mainsVoltageIndex, currentMonitorEnergyLogLastHoursTable=currentMonitorEnergyLogLastHoursTable, batteryGroup2Quality=batteryGroup2Quality, invertersCurrentDescription=invertersCurrentDescription, rectifierGroupRectifierStatus=rectifierGroupRectifierStatus, batteryMonitorCurrentTable=batteryMonitorCurrentTable, batteryTemperaturesMinorLowLevel=batteryTemperaturesMinorLowLevel, rectifierGroupCapacityMajorAlarmLevel=rectifierGroupCapacityMajorAlarmLevel, batteryEnergyLogLastHoursIndex=batteryEnergyLogLastHoursIndex, batteryGroup2TotalCapacityMinorLowLevel=batteryGroup2TotalCapacityMinorLowLevel, flexiMonitorIndex=flexiMonitorIndex, batteryTemperaturesMajorHighLevel=batteryTemperaturesMajorHighLevel, solarChargersCurrentDescription=solarChargersCurrentDescription, rectifiersCapacity=rectifiersCapacity, outputControlUnitOutputTable=outputControlUnitOutputTable, generatorTankDescription=generatorTankDescription, mainsMonitorCurrentMinorHighLevel=mainsMonitorCurrentMinorHighLevel, outputIoUnitNumberOfOutputs=outputIoUnitNumberOfOutputs, mainsMonitorEnergyLogAccumulatedEntry=mainsMonitorEnergyLogAccumulatedEntry, dcdcCurrentTable=dcdcCurrentTable, mainControlUnitTemperatureIndex=mainControlUnitTemperatureIndex, inputIoUnitsTable=inputIoUnitsTable, batteryTotalCapacity=batteryTotalCapacity, windChargersEnergyLogLastHoursEntry=windChargersEnergyLogLastHoursEntry, loadEnergyLogLastDaysValue=loadEnergyLogLastDaysValue, mainsGroupVoltageStatus=mainsGroupVoltageStatus, dcdcGroupNumberOfDcdcConverters=dcdcGroupNumberOfDcdcConverters, currentMonitorsEntry=currentMonitorsEntry, mainsMainsFailureDescription=mainsMainsFailureDescription, mainsGroupVoltageMajorHighLevel=mainsGroupVoltageMajorHighLevel, batteryGroup2TemperaturesMinorHighLevel=batteryGroup2TemperaturesMinorHighLevel, dcdc=dcdc, batteryGroup2EnergyLogLastDaysEntry=batteryGroup2EnergyLogLastDaysEntry, mainsMonitorPhaseIndex=mainsMonitorPhaseIndex, dcdcCurrentDescription=dcdcCurrentDescription, batteryTotalCapacityMinorLowLevel=batteryTotalCapacityMinorLowLevel, currentMonitorEnergyLogLastWeeksIndex=currentMonitorEnergyLogLastWeeksIndex, generatorCurrentLimitControlledStopValue=generatorCurrentLimitControlledStopValue, smartNodeError=smartNodeError, outputIoUnitEntry=outputIoUnitEntry, batteryTestResultIndex=batteryTestResultIndex, batteryGroup2BankSymmetryEntry=batteryGroup2BankSymmetryEntry, windChargersCurrentStatus=windChargersCurrentStatus, batteryGroup2BankTemperatureEntry=batteryGroup2BankTemperatureEntry, batteryMonitorErrorMajorAlarmLevel=batteryMonitorErrorMajorAlarmLevel, batteryMonitorCurrentMinorHighLevel=batteryMonitorCurrentMinorHighLevel, rectifierGroupRectifierSwPartNumber=rectifierGroupRectifierSwPartNumber, dcdcSwPartNumber=dcdcSwPartNumber, invertersCapacityAlarmEnable=invertersCapacityAlarmEnable, rectifiersErrorValue=rectifiersErrorValue, batteryEnergyLogLastHoursNumberOfEntries=batteryEnergyLogLastHoursNumberOfEntries, inverterGroupCurrentMajorAlarmLevel=inverterGroupCurrentMajorAlarmLevel, invertersReactiveEnergyLogLastHoursIndex=invertersReactiveEnergyLogLastHoursIndex, batteryGroup2EnergyLogLastDaysTable=batteryGroup2EnergyLogLastDaysTable, batteryMonitorSymmetryDescription=batteryMonitorSymmetryDescription, batteryGroup2QualityMinorAlarmLevel=batteryGroup2QualityMinorAlarmLevel, solarChargerInputVoltageValue=solarChargerInputVoltageValue, snmpHeartBeatTrapRepeatRate=snmpHeartBeatTrapRepeatRate, inverterGroupReactiveEnergyLogAccumulated=inverterGroupReactiveEnergyLogAccumulated, inverterGroupCurrentDescription=inverterGroupCurrentDescription, invertersReactiveEnergyLogLastHoursNumberOfEntries=invertersReactiveEnergyLogLastHoursNumberOfEntries, mainsMonitorFrequencyEntry=mainsMonitorFrequencyEntry, batteryVoltageMinorLowLevel=batteryVoltageMinorLowLevel, batteryMonitorFuseDescription=batteryMonitorFuseDescription, rectifiersEnergyLogAccumulated=rectifiersEnergyLogAccumulated, rectifierGroupStatus=rectifierGroupStatus, windChargersErrorValue=windChargersErrorValue, batteryGroup2CycleLogDaysEntry=batteryGroup2CycleLogDaysEntry, batteryMonitorTemperatureMajorHighLevel=batteryMonitorTemperatureMajorHighLevel, batteryQualityDescription=batteryQualityDescription, rectifierGroupRectifierType=rectifierGroupRectifierType, loadVoltageTrapRepeatCounter=loadVoltageTrapRepeatCounter, batteryGroup2BankNumberOfTemperatures=batteryGroup2BankNumberOfTemperatures, solarChargersEnergyLog=solarChargersEnergyLog, generatorVoltageControlStartVoltage=generatorVoltageControlStartVoltage, batteryGroup2EqualizeVoltage=batteryGroup2EqualizeVoltage, inverterGroupEnergyLogLastWeeksNumberOfEntries=inverterGroupEnergyLogLastWeeksNumberOfEntries, windChargersCurrentTrapRepeatCounter=windChargersCurrentTrapRepeatCounter, batteryCurrentsAlarmEnable=batteryCurrentsAlarmEnable, loadVoltageStatus=loadVoltageStatus, batteryMonitorSymmetryAlarmEnable=batteryMonitorSymmetryAlarmEnable, batteryAhChargedValue=batteryAhChargedValue, mainControlUnitTemperatureValue=mainControlUnitTemperatureValue, invertersCurrentAlarmEnable=invertersCurrentAlarmEnable, inverterGroupInverterOutputVoltageValue=inverterGroupInverterOutputVoltageValue, batteryGroup2AhChargedStatus=batteryGroup2AhChargedStatus, controlSystemInventory=controlSystemInventory, deltaTemperatureMinorLowLevel=deltaTemperatureMinorLowLevel, rectifierHwVersion=rectifierHwVersion, ambientTemperatureAlarmEnable=ambientTemperatureAlarmEnable, batteryGroup2CycleLogDaysIndex=batteryGroup2CycleLogDaysIndex, batteryGroup2TemperaturesDescription=batteryGroup2TemperaturesDescription, batteryBankNumberOfCurrents=batteryBankNumberOfCurrents, inverterGroupErrorMinorAlarmLevel=inverterGroupErrorMinorAlarmLevel, inverterGroupEnergyLogLastHoursNumberOfEntries=inverterGroupEnergyLogLastHoursNumberOfEntries, generatorMainsDelay=generatorMainsDelay, mainsVoltageTrapRepeatCounter=mainsVoltageTrapRepeatCounter, inverterOutputReactivePowerValue=inverterOutputReactivePowerValue, invertersReactiveEnergyLogLastDaysIndex=invertersReactiveEnergyLogLastDaysIndex, batteryGroup2UsedCapacityDescription=batteryGroup2UsedCapacityDescription, rectifierGroupEnergyLogLastWeeksNumberOfEntries=rectifierGroupEnergyLogLastWeeksNumberOfEntries)
mibBuilder.exportSymbols("SP2-MIB", rectifierGroupCapacityDescription=rectifierGroupCapacityDescription, batteryGroup2BankFuseTable=batteryGroup2BankFuseTable, controlUnitDescription=controlUnitDescription, batteryUsedCapacityMajorAlarmLevel=batteryUsedCapacityMajorAlarmLevel, batteryGroup2LVBD=batteryGroup2LVBD, controlSystemIoUnitTemperatureMinorHighLevel=controlSystemIoUnitTemperatureMinorHighLevel, controlSystemIoUnitTemperatureMajorHighLevel=controlSystemIoUnitTemperatureMajorHighLevel, eNexus=eNexus, rectifiersCapacityAlarmEnable=rectifiersCapacityAlarmEnable, inputControlUnitInputValue=inputControlUnitInputValue, batteryCycleLogWeeksValue=batteryCycleLogWeeksValue, powerSystemModel=powerSystemModel, alarmGroupEntry=alarmGroupEntry, windChargersStatus=windChargersStatus, flexiMonitorInputDescription=flexiMonitorInputDescription, windChargersErrorMajorAlarmLevel=windChargersErrorMajorAlarmLevel, mainsMainsFailureStatus=mainsMainsFailureStatus, batteryEnergyLogLastWeeksIndex=batteryEnergyLogLastWeeksIndex, batteryGroup2TotalCapacityTrapRepeatCounter=batteryGroup2TotalCapacityTrapRepeatCounter, batteryTimeLeft=batteryTimeLeft, invertersCapacityMinorAlarmLevel=invertersCapacityMinorAlarmLevel, flexiMonitorType=flexiMonitorType, batteryGroup2CycleLogWeeksIndex=batteryGroup2CycleLogWeeksIndex, controlSystemStatus=controlSystemStatus, batteryTempComp=batteryTempComp, windChargersEnergyLogLastDaysEntry=windChargersEnergyLogLastDaysEntry, dcdcCurrentValue=dcdcCurrentValue, batteryMonitorFuseTable=batteryMonitorFuseTable, alarmMainsTrap=alarmMainsTrap, solarChargerStatus=solarChargerStatus, batteryQualityTrapRepeatCounter=batteryQualityTrapRepeatCounter, invertersEnergyLogLastHoursTable=invertersEnergyLogLastHoursTable, batteryGroup2BankSymmetryStatus=batteryGroup2BankSymmetryStatus, windChargersCurrentMajorAlarmLevel=windChargersCurrentMajorAlarmLevel, batteryEnergyLogLastWeeksNumberOfEntries=batteryEnergyLogLastWeeksNumberOfEntries, mainsMonitorErrorValue=mainsMonitorErrorValue, inverterGroupInverterTable=inverterGroupInverterTable, batteryVoltageDescription=batteryVoltageDescription, mainsGroupMainsFailureStatus=mainsGroupMainsFailureStatus, controlUnitIndex=controlUnitIndex, mainControlUnitTemperatureMajorHighLevel=mainControlUnitTemperatureMajorHighLevel, deltaTemperatureAlarmEnable=deltaTemperatureAlarmEnable, inverterGroupNumberOfInverters=inverterGroupNumberOfInverters, ambientTemperatureMinorLowLevel=ambientTemperatureMinorLowLevel, batteryGroup2CycleLogWeeksNumberOfEntries=batteryGroup2CycleLogWeeksNumberOfEntries, inverterGroupCapacityMinorAlarmLevel=inverterGroupCapacityMinorAlarmLevel, mainsGroupMainsFailureTrapRepeatCounter=mainsGroupMainsFailureTrapRepeatCounter, batteryTimeLeftAlarmEnable=batteryTimeLeftAlarmEnable, flexiMonitorOutputTable=flexiMonitorOutputTable, batteryGroup2CurrentsAlarmEnable=batteryGroup2CurrentsAlarmEnable, batteryQualityMinorAlarmLevel=batteryQualityMinorAlarmLevel, rectifiersCurrent=rectifiersCurrent, batteryGroup2BankSymmetryMeasureValue=batteryGroup2BankSymmetryMeasureValue, generatorDailyRunStopHour=generatorDailyRunStopHour, batteryGroup2EnergyLogLastHoursNumberOfEntries=batteryGroup2EnergyLogLastHoursNumberOfEntries, batteryGroup2TotalCapacity=batteryGroup2TotalCapacity, mainsOutageLogDaysIndex=mainsOutageLogDaysIndex, solarChargerSwVersion=solarChargerSwVersion, batteryEnergyLogLastWeeksEntry=batteryEnergyLogLastWeeksEntry, batteryGroup2AhDischargedTrapRepeatCounter=batteryGroup2AhDischargedTrapRepeatCounter, rectifiersCurrentAlarmEnable=rectifiersCurrentAlarmEnable, mainsMonitorFrequencyMinorHighLevel=mainsMonitorFrequencyMinorHighLevel, batteryGroup2TestResultStartDateTime=batteryGroup2TestResultStartDateTime, batteryMonitorSymmetryMinorAlarmLevel=batteryMonitorSymmetryMinorAlarmLevel, batteryGroup2EnergyLogLastDaysIndex=batteryGroup2EnergyLogLastDaysIndex, batteryFusesStatus=batteryFusesStatus, generatorCapacityStopOnChargeLimit=generatorCapacityStopOnChargeLimit, loadCurrentMajorHighLevel=loadCurrentMajorHighLevel, batteryGroup2TemperaturesMajorLowLevel=batteryGroup2TemperaturesMajorLowLevel, mainsGroupNumberOfPhases=mainsGroupNumberOfPhases, windChargersEnergyLogLastHoursNumberOfEntries=windChargersEnergyLogLastHoursNumberOfEntries, inputControlUnitInputDescription=inputControlUnitInputDescription, generatorFuelConsumptionLogLastMonthsValue=generatorFuelConsumptionLogLastMonthsValue, solarChargersEnergyLogLastWeeksIndex=solarChargersEnergyLogLastWeeksIndex, currentMonitorFuseIndex=currentMonitorFuseIndex, mainControlUnitTemperatureAlarmEnable=mainControlUnitTemperatureAlarmEnable, controlSystemIoUnitIndex=controlSystemIoUnitIndex, invertersErrorValue=invertersErrorValue, inverterGroupErrorAlarmEnable=inverterGroupErrorAlarmEnable, batteryCurrentMajorLowLevel=batteryCurrentMajorLowLevel, windChargerOutputCurrentValue=windChargerOutputCurrentValue, loadCurrent=loadCurrent, generatorFuelConsumptionLogLastMonthsTable=generatorFuelConsumptionLogLastMonthsTable, inverterGroupInverterEntry=inverterGroupInverterEntry, batteryCycleLogDaysEntry=batteryCycleLogDaysEntry, inputControlUnitInputTrapRepeatCounter=inputControlUnitInputTrapRepeatCounter, batteryGroup2AhDischargedMajorHighLevel=batteryGroup2AhDischargedMajorHighLevel, solarChargersError=solarChargersError, flexiMonitorInputTable=flexiMonitorInputTable, batteryGroup2TimeLeftStatus=batteryGroup2TimeLeftStatus, solarChargersEnergyLogLastHoursNumberOfEntries=solarChargersEnergyLogLastHoursNumberOfEntries, generatorEnergyLogLastWeeksEntry=generatorEnergyLogLastWeeksEntry, outputControlUnitOutputDescription=outputControlUnitOutputDescription, currentMonitorEnergyLogLastWeeksValue=currentMonitorEnergyLogLastWeeksValue, invertersReactiveEnergyLogLastDaysValue=invertersReactiveEnergyLogLastDaysValue, currentMonitorsNumberOfUnits=currentMonitorsNumberOfUnits, currentMonitorEnergyLogLastHoursValue=currentMonitorEnergyLogLastHoursValue, inverterGroupReactiveEnergyLogLastWeeksNoOfEntries=inverterGroupReactiveEnergyLogLastWeeksNoOfEntries, flexiMonitorNumberOfInputs=flexiMonitorNumberOfInputs, mainsOutageLogMonthsEntry=mainsOutageLogMonthsEntry, controlSystemIoUnitTemperatureEntry=controlSystemIoUnitTemperatureEntry, generatorRunHoursLogLastWeeksTable=generatorRunHoursLogLastWeeksTable, batteryGroup2Description=batteryGroup2Description, mainsMonitorError=mainsMonitorError, batteryAhDischargedValue=batteryAhDischargedValue, windChargerIndex=windChargerIndex, inputIoUnitProgInputValue=inputIoUnitProgInputValue, batteryEnergyLog=batteryEnergyLog, generatorRunHoursLogLastWeeksEntry=generatorRunHoursLogLastWeeksEntry, batteryCycleLogMonthsNumberOfEntries=batteryCycleLogMonthsNumberOfEntries, flexiMonitorsEntry=flexiMonitorsEntry, batteryCurrentStatus=batteryCurrentStatus, solarChargersEnergyLogLastDaysTable=solarChargersEnergyLogLastDaysTable, inputControlUnitNumberOfInputs=inputControlUnitNumberOfInputs, rectifierGroupCurrentMajorAlarmLevel=rectifierGroupCurrentMajorAlarmLevel, mainsGroupVoltageMajorLowLevel=mainsGroupVoltageMajorLowLevel, ambientTemperatureTrapRepeatCounter=ambientTemperatureTrapRepeatCounter, alarmTrapCounterVarValue=alarmTrapCounterVarValue, dcdcCapacityAlarmEnable=dcdcCapacityAlarmEnable, batteryGroup2ChargeCurrentLimit=batteryGroup2ChargeCurrentLimit, batteryTemperatureAlarmEnable=batteryTemperatureAlarmEnable, windChargerTable=windChargerTable, batteryGroup2TemperatureTrapRepeatCounter=batteryGroup2TemperatureTrapRepeatCounter, dcdcNumberOfGroups=dcdcNumberOfGroups, batteryMonitorCurrentStatus=batteryMonitorCurrentStatus, batteryRemainingCapacityDescription=batteryRemainingCapacityDescription, mainsGroupVoltageDescription=mainsGroupVoltageDescription, currentMonitorId=currentMonitorId, solarChargersEnergyLogLastWeeksValue=solarChargersEnergyLogLastWeeksValue, batteryRemainingCapacityMinorLowLevel=batteryRemainingCapacityMinorLowLevel, alarmGroupDescription=alarmGroupDescription, invertersReactiveEnergyLogLastDaysTable=invertersReactiveEnergyLogLastDaysTable, batteryGroup2EnergyLogLastHoursTable=batteryGroup2EnergyLogLastHoursTable, mainControlUnitTemperatureStatus=mainControlUnitTemperatureStatus, alarmPowerSystemTrap=alarmPowerSystemTrap, controlUnitSwPartNumber=controlUnitSwPartNumber, batteryGroup2TimeLeftMinorAlarmLevel=batteryGroup2TimeLeftMinorAlarmLevel, batteryAhDischargedMajorHighLevel=batteryAhDischargedMajorHighLevel, rectifiersNumberOfGroups=rectifiersNumberOfGroups, rectifierGroupCapacityStatus=rectifierGroupCapacityStatus, deltaTemperatureTrapRepeatCounter=deltaTemperatureTrapRepeatCounter, batteryGroup2BoostManualMaxDuration=batteryGroup2BoostManualMaxDuration, mainsOutageLogWeeksNumberOfEntries=mainsOutageLogWeeksNumberOfEntries, windChargersObsolete=windChargersObsolete, solarChargersErrorDescription=solarChargersErrorDescription, batteryGroup2TemperatureMinorLowLevel=batteryGroup2TemperatureMinorLowLevel, batteryQualityAlarmEnable=batteryQualityAlarmEnable, inverterGroupReactiveEnergyLogLastWeeksTable=inverterGroupReactiveEnergyLogLastWeeksTable, generatorRunHoursLogLastDaysValue=generatorRunHoursLogLastDaysValue, invertersEnergyLogLastWeeksIndex=invertersEnergyLogLastWeeksIndex, batteryBankNumberOfBanks=batteryBankNumberOfBanks, batteryBankFuseEntry=batteryBankFuseEntry, batteryGroup2CurrentsStatus=batteryGroup2CurrentsStatus, generatorTankMinorLowLevel=generatorTankMinorLowLevel, batteryGroup2VoltageMinorHighLevel=batteryGroup2VoltageMinorHighLevel, batteryGroup2CurrentsDescription=batteryGroup2CurrentsDescription, batteryGroup2UsedCapacityTrapRepeatCounter=batteryGroup2UsedCapacityTrapRepeatCounter, batteryGroup2EnergyLogLastWeeksEntry=batteryGroup2EnergyLogLastWeeksEntry, batteryLVBDValue=batteryLVBDValue, loadGroupEntry=loadGroupEntry, inverterGroupEnergyLogLastDaysNumberOfEntries=inverterGroupEnergyLogLastDaysNumberOfEntries, mainsMonitorNumberOfVoltages=mainsMonitorNumberOfVoltages, loadFuseEntry=loadFuseEntry, loadVoltageEntry=loadVoltageEntry, batteryGroup2EnergyLogAccumulated=batteryGroup2EnergyLogAccumulated, mainControlUnitsErrorValue=mainControlUnitsErrorValue, invertersReactiveEnergyLogLastHoursEntry=invertersReactiveEnergyLogLastHoursEntry, invertersErrorEnable=invertersErrorEnable, inverterGroupInverterSwVersion=inverterGroupInverterSwVersion, loadLVLDDescription=loadLVLDDescription, generatorEnergyLogLastHoursEntry=generatorEnergyLogLastHoursEntry, loadEnergyLogLastWeeksEntry=loadEnergyLogLastWeeksEntry, batteryCycleLogWeeksIndex=batteryCycleLogWeeksIndex, dcdcErrorDescription=dcdcErrorDescription, rectifierGroupEnergyLogLastWeeksValue=rectifierGroupEnergyLogLastWeeksValue, batteryGroup2LVBDValue=batteryGroup2LVBDValue, batteryTemperaturesMajorLowLevel=batteryTemperaturesMajorLowLevel, batteryGroup2TimeLeftMajorAlarmLevel=batteryGroup2TimeLeftMajorAlarmLevel, inverterGroupReactiveEnergyLogLastHoursEntry=inverterGroupReactiveEnergyLogLastHoursEntry, rectifiersCapacityMinorAlarmLevel=rectifiersCapacityMinorAlarmLevel, ioUnitErrorAlarmEnable=ioUnitErrorAlarmEnable, mainControlUnitNumberOfTemperatures=mainControlUnitNumberOfTemperatures, batteryGroup2CurrentMajorLowLevel=batteryGroup2CurrentMajorLowLevel, currentMonitorEnergyLogLastDaysTable=currentMonitorEnergyLogLastDaysTable, rectifiersCurrentValue=rectifiersCurrentValue, generatorFuelConsumptionTotalUsedEntry=generatorFuelConsumptionTotalUsedEntry, mainsGroupVoltageTable=mainsGroupVoltageTable, rectifiersError=rectifiersError, mainsMonitorEnergyLogLastDaysTable=mainsMonitorEnergyLogLastDaysTable, rectifierIndex=rectifierIndex, batteryMonitorCurrentMajorHighLevel=batteryMonitorCurrentMajorHighLevel, batteryGroup2BankSymmetryTrapRepeatCounter=batteryGroup2BankSymmetryTrapRepeatCounter, batteryBoostCurrentThreshold=batteryBoostCurrentThreshold, generatorRunHoursLogLastWeeksValue=generatorRunHoursLogLastWeeksValue, loadFuseValue=loadFuseValue, windChargerStatus=windChargerStatus, batteryGroup2Temperatures=batteryGroup2Temperatures, inverterGroupReactiveEnergyLogLastHoursNoOfEntries=inverterGroupReactiveEnergyLogLastHoursNoOfEntries, batteryRemainingCapacityValue=batteryRemainingCapacityValue, rectifierType=rectifierType, batteryGroup2QualityTrapRepeatCounter=batteryGroup2QualityTrapRepeatCounter, batteryEqualizeCurrentThreshold=batteryEqualizeCurrentThreshold, rectifierGroupRectifierIndex=rectifierGroupRectifierIndex, loadFusesStatus=loadFusesStatus, windChargerHwVersion=windChargerHwVersion, loadMonitorError=loadMonitorError, mainsMonitorEnergyLogAccumulatedTable=mainsMonitorEnergyLogAccumulatedTable, invertersEnergyLogLastHoursValue=invertersEnergyLogLastHoursValue, batteryGroup2BoostCommand=batteryGroup2BoostCommand, windChargersErrorDescription=windChargersErrorDescription, invertersEnergyLogLastDaysTable=invertersEnergyLogLastDaysTable, generatorEnergyLogLastWeeksIndex=generatorEnergyLogLastWeeksIndex, ambientTemperatureMajorHighLevel=ambientTemperatureMajorHighLevel, currentMonitorEnergyLogLastDaysEntry=currentMonitorEnergyLogLastDaysEntry, flexiMonitorErrorTrapRepeatCounter=flexiMonitorErrorTrapRepeatCounter, controlSystemIoUnitNumberOfTemperatures=controlSystemIoUnitNumberOfTemperatures, solarChargersEnergyLogLastDaysValue=solarChargersEnergyLogLastDaysValue, loadEnergyLogLastWeeksIndex=loadEnergyLogLastWeeksIndex, dcdcCapacityTable=dcdcCapacityTable, batteryMonitorCurrentValue=batteryMonitorCurrentValue, windChargersEnergyLogLastWeeksValue=windChargersEnergyLogLastWeeksValue, batteryAhDischarged=batteryAhDischarged, inputIoUnitsEntry=inputIoUnitsEntry, batteryTestVoltage=batteryTestVoltage, windChargersEnergyLogLastDaysNumberOfEntries=windChargersEnergyLogLastDaysNumberOfEntries, currentMonitorFuseTable=currentMonitorFuseTable, mainsGroupOutageLogMonthsTable=mainsGroupOutageLogMonthsTable, loadVoltageDescription=loadVoltageDescription, batteryGroup2TemperatureDescription=batteryGroup2TemperatureDescription, batteryAhCharged=batteryAhCharged, rectifierGroupEnergyLogLastWeeksEntry=rectifierGroupEnergyLogLastWeeksEntry, mainsVoltageMajorHighLevel=mainsVoltageMajorHighLevel, batteryMonitorSymmetryTable=batteryMonitorSymmetryTable, batteryFuseTrapRepeatCounter=batteryFuseTrapRepeatCounter, mainsOutageLog=mainsOutageLog, currentMonitorEnergyLogLastHoursNumberOfEntries=currentMonitorEnergyLogLastHoursNumberOfEntries, loadMonitorErrorValue=loadMonitorErrorValue, rectifierGroupCurrentTrapRepeatCounter=rectifierGroupCurrentTrapRepeatCounter, outputControlUnitEntry=outputControlUnitEntry, batteryMonitorErrorStatus=batteryMonitorErrorStatus, inputIoUnitProgInputTrapRepeatCounter=inputIoUnitProgInputTrapRepeatCounter, rectifiersCapacityStatus=rectifiersCapacityStatus, solarChargerHwVersion=solarChargerHwVersion, batteryTemperatureTrapRepeatCounter=batteryTemperatureTrapRepeatCounter, mainControlUnitsErrorStatus=mainControlUnitsErrorStatus, rectifierGroupTemperatureDescription=rectifierGroupTemperatureDescription, batteryMonitorErrorMinorAlarmLevel=batteryMonitorErrorMinorAlarmLevel, batteryGroup2FuseIndex=batteryGroup2FuseIndex, rectifiersErrorMinorAlarmLevel=rectifiersErrorMinorAlarmLevel, inverterGroupErrorStatus=inverterGroupErrorStatus, mainsMonitorCurrentEntry=mainsMonitorCurrentEntry, invertersReactiveEnergyLogLastHoursTable=invertersReactiveEnergyLogLastHoursTable, mainsGroupOutageLogWeeksIndex=mainsGroupOutageLogWeeksIndex, dcdcCapacityStatus=dcdcCapacityStatus)
mibBuilder.exportSymbols("SP2-MIB", batteryGroup2CurrentsTrapRepeatCounter=batteryGroup2CurrentsTrapRepeatCounter, batteryTotalCapacityStatus=batteryTotalCapacityStatus, rectifierGroupErrorValue=rectifierGroupErrorValue, batteryGroup2EnergyLogLastHoursEntry=batteryGroup2EnergyLogLastHoursEntry, powerSystemMode=powerSystemMode, generatorFuelConsumptionTotalUsedTable=generatorFuelConsumptionTotalUsedTable, batteryGroup2TotalCapacityStatus=batteryGroup2TotalCapacityStatus, batteryCycleLogDaysTable=batteryCycleLogDaysTable, rectifierGroupCurrentTable=rectifierGroupCurrentTable, rectifiersTemperatureAlarmEnable=rectifiersTemperatureAlarmEnable, batteryLVBDDisconnectVoltage=batteryLVBDDisconnectVoltage, alarmGeneratorTrap=alarmGeneratorTrap, mainsOutageLogMonthsValue=mainsOutageLogMonthsValue, batteryGroup2LVBDTrapRepeatCounter=batteryGroup2LVBDTrapRepeatCounter, alarmRectifierTrap=alarmRectifierTrap, generatorRunHoursLogLastDaysNumberOfEntries=generatorRunHoursLogLastDaysNumberOfEntries, generatorRunHoursLogLastMonthsValue=generatorRunHoursLogLastMonthsValue, rectifierGroupsTable=rectifierGroupsTable, batteryGroup2UsedCapacityAlarmEnable=batteryGroup2UsedCapacityAlarmEnable, loadLVLDIndex=loadLVLDIndex, rectifierGroupEnergyLogLastHoursTable=rectifierGroupEnergyLogLastHoursTable, generatorEnergyLogLastDaysNumberOfEntries=generatorEnergyLogLastDaysNumberOfEntries, batteryMonitorTemperatureTable=batteryMonitorTemperatureTable, mainsMonitorCurrentStatus=mainsMonitorCurrentStatus, batteryGroup2EnergyLogLastHoursValue=batteryGroup2EnergyLogLastHoursValue, inverterGroupEnergyLogLastWeeksIndex=inverterGroupEnergyLogLastWeeksIndex, alarmDcDcTrap=alarmDcDcTrap, batteryBankSymmetryDescription=batteryBankSymmetryDescription, mainsGroupVoltageMinorHighLevel=mainsGroupVoltageMinorHighLevel, invertersEnergyLogAccumulated=invertersEnergyLogAccumulated, rectifiersTemperatureTrapRepeatCounter=rectifiersTemperatureTrapRepeatCounter, mainsMonitorVoltageMinorLowLevel=mainsMonitorVoltageMinorLowLevel, batteryLVBDTrapRepeatCounter=batteryLVBDTrapRepeatCounter, loadEnergyLogLastWeeksTable=loadEnergyLogLastWeeksTable, windChargersErrorTrapRepeatCounter=windChargersErrorTrapRepeatCounter, powerSystemLatitudeDecimal=powerSystemLatitudeDecimal, loadGroupStatus=loadGroupStatus, inverterGroupInverterHwVersion=inverterGroupInverterHwVersion, rectifierGroupRectifierSwVersion=rectifierGroupRectifierSwVersion, batteryTemperatureMajorLowLevel=batteryTemperatureMajorLowLevel, batteryTemperatureMinorHighLevel=batteryTemperatureMinorHighLevel, inputControlUnitsTable=inputControlUnitsTable, batteryGroup2AhChargedMajorHighLevel=batteryGroup2AhChargedMajorHighLevel, mainsVoltageMinorLowLevel=mainsVoltageMinorLowLevel, batteryUsedCapacityStatus=batteryUsedCapacityStatus, batteryBankSymmetryAlarmEnable=batteryBankSymmetryAlarmEnable, batteryMonitorFuseAlarmEnable=batteryMonitorFuseAlarmEnable, mainsGroupsEntry=mainsGroupsEntry, generatorTankEnable=generatorTankEnable, batteryGroup2EnergyLogLastDaysValue=batteryGroup2EnergyLogLastDaysValue, batteryGroup2BankSymmetryMinorAlarmLevel=batteryGroup2BankSymmetryMinorAlarmLevel, batteryTemperatureStatus=batteryTemperatureStatus, mainsMonitorErrorMajorAlarmLevel=mainsMonitorErrorMajorAlarmLevel, mainsMainsFailureMinorAlarmLevel=mainsMainsFailureMinorAlarmLevel, powerSystemCapacityScale=powerSystemCapacityScale, rectifiersTemperatureStatus=rectifiersTemperatureStatus, invertersCurrent=invertersCurrent, dcdcCapacityDescription=dcdcCapacityDescription, invertersReactiveEnergyLogLastWeeksEntry=invertersReactiveEnergyLogLastWeeksEntry, mainsGroupVoltageTrapRepeatCounter=mainsGroupVoltageTrapRepeatCounter, dcdcSwVersion=dcdcSwVersion, generatorEnergyLogLastDaysTable=generatorEnergyLogLastDaysTable, invertersReactiveEnergyLogAccumulated=invertersReactiveEnergyLogAccumulated, batteryTemperatureDescription=batteryTemperatureDescription, inverterGroupInverterOutputFrequencyValue=inverterGroupInverterOutputFrequencyValue, rectifiersEnergyLogLastWeeksNumberOfEntries=rectifiersEnergyLogLastWeeksNumberOfEntries, batteryMonitorTemperatureMinorHighLevel=batteryMonitorTemperatureMinorHighLevel, solarChargerType=solarChargerType, rectifierInputVoltageValue=rectifierInputVoltageValue, solarChargersEnergyLogLastDaysNumberOfEntries=solarChargersEnergyLogLastDaysNumberOfEntries, currentMonitorEnergyLogLastWeeksEntry=currentMonitorEnergyLogLastWeeksEntry, batteryMonitorTemperatureAlarmEnable=batteryMonitorTemperatureAlarmEnable, inverterGroupCapacityStatus=inverterGroupCapacityStatus, batteryGroup2TimeLeftTrapRepeatCounter=batteryGroup2TimeLeftTrapRepeatCounter, dcdcCurrentMinorAlarmLevel=dcdcCurrentMinorAlarmLevel, batteryGroup2TemperatureMinorHighLevel=batteryGroup2TemperatureMinorHighLevel, generatorRunHoursTotalHours=generatorRunHoursTotalHours, batteryGroup2Boost=batteryGroup2Boost, inverterGroupReactiveEnergyLogTable=inverterGroupReactiveEnergyLogTable, loadCurrentMinorHighLevel=loadCurrentMinorHighLevel, generatorDischargeValue=generatorDischargeValue, batteryGroup2QualityAlarmEnable=batteryGroup2QualityAlarmEnable, batteryGroup2CurrentsValue=batteryGroup2CurrentsValue, rectifiersEnergyLogLastWeeksValue=rectifiersEnergyLogLastWeeksValue, mainControlUnitsEntry=mainControlUnitsEntry, controlSystemIoUnitFanTable=controlSystemIoUnitFanTable, generatorEnergyLogLastDaysEntry=generatorEnergyLogLastDaysEntry, batteryMonitorIndex=batteryMonitorIndex, generatorTankMajorLowLevel=generatorTankMajorLowLevel, rectifierGroupNumberOfRectifiers=rectifierGroupNumberOfRectifiers, batteryGroup2RemainingCapacityStatus=batteryGroup2RemainingCapacityStatus, batteryBankSymmetryMajorAlarmLevel=batteryBankSymmetryMajorAlarmLevel, inverterGroupEnergyLogEntry=inverterGroupEnergyLogEntry, mainControlUnitEarthFaultTable=mainControlUnitEarthFaultTable, batteryGroup2CycleLogTotalCycles=batteryGroup2CycleLogTotalCycles, inverterEntry=inverterEntry, batteryGroup2BankSymmetryMajorAlarmLevel=batteryGroup2BankSymmetryMajorAlarmLevel, powerSystemElevation=powerSystemElevation, generatorRunHoursLogLastMonthsEntry=generatorRunHoursLogLastMonthsEntry, batteryEnergyLogLastHoursTable=batteryEnergyLogLastHoursTable, generatorFailStatus=generatorFailStatus, infoHeartBeatTrap=infoHeartBeatTrap, batteryGroup2BankTemperatureTable=batteryGroup2BankTemperatureTable, rectifierEntry=rectifierEntry, inverterStatus=inverterStatus, batteryGroup2CycleLogWeeksValue=batteryGroup2CycleLogWeeksValue, controlSystemResetManualAlarms=controlSystemResetManualAlarms, mainControlUnitEarthFaultDescription=mainControlUnitEarthFaultDescription, batteryGroup2VoltageStatus=batteryGroup2VoltageStatus, inverterGroupInverterOutputReactivePowerValue=inverterGroupInverterOutputReactivePowerValue, currentMonitorEnergyLogLastHoursEntry=currentMonitorEnergyLogLastHoursEntry, generatorDailyRunEnable=generatorDailyRunEnable, solarChargerOutputCurrentValue=solarChargerOutputCurrentValue, batteryGroup2FuseStatus=batteryGroup2FuseStatus, solarChargersCurrentStatus=solarChargersCurrentStatus, batteryGroup2BankCurrentEntry=batteryGroup2BankCurrentEntry, rectifierGroupEnergyLogLastWeeksTable=rectifierGroupEnergyLogLastWeeksTable, rectifierGroupCapacityTable=rectifierGroupCapacityTable, inputIoUnitIndex=inputIoUnitIndex, batteryMonitorTemperatureValue=batteryMonitorTemperatureValue, batteryMonitorFuseValue=batteryMonitorFuseValue, generatorCurrentLimitControlledStopEnable=generatorCurrentLimitControlledStopEnable, alarmBatteryTrap=alarmBatteryTrap, currentMonitorEnergyLogAccumulatedTable=currentMonitorEnergyLogAccumulatedTable, batteryGroup2CycleLogDaysTable=batteryGroup2CycleLogDaysTable, batteryGroup2AhDischargedValue=batteryGroup2AhDischargedValue, dcdcGroupIndex=dcdcGroupIndex, inverterGroupReactiveEnergyLogLastHoursValue=inverterGroupReactiveEnergyLogLastHoursValue, ioUnitErrorValue=ioUnitErrorValue, batteryChargeCurrentLimitEnable=batteryChargeCurrentLimitEnable, currentMonitorCurrentTrapRepeatCounter=currentMonitorCurrentTrapRepeatCounter, loadVoltageValue=loadVoltageValue, inverterGroupCapacityMajorAlarmLevel=inverterGroupCapacityMajorAlarmLevel, batteryGroup2TempCompEnable=batteryGroup2TempCompEnable, solarChargersObsolete=solarChargersObsolete, windChargersNumberOfWindChargers=windChargersNumberOfWindChargers, deltaTemperatureMajorLowLevel=deltaTemperatureMajorLowLevel, batteryGroup2Equalize=batteryGroup2Equalize, dcdcCurrentTrapRepeatCounter=dcdcCurrentTrapRepeatCounter, batteryCurrentsMinorLowLevel=batteryCurrentsMinorLowLevel, mainsVoltageMinorHighLevel=mainsVoltageMinorHighLevel, mainControlUnitsErrorMajorAlarmLevel=mainControlUnitsErrorMajorAlarmLevel, batteryMonitorError=batteryMonitorError, batteryGroup2AhDischargedAlarmEnable=batteryGroup2AhDischargedAlarmEnable, invertersEnergyLogLastDaysEntry=invertersEnergyLogLastDaysEntry, batteryMonitorSymmetryStatus=batteryMonitorSymmetryStatus, generatorStatus=generatorStatus, generator=generator, batteryMonitorNumberOfFuses=batteryMonitorNumberOfFuses, mainsGroupIndex=mainsGroupIndex, dcdcType=dcdcType, batteryGroup2CurrentMajorHighLevel=batteryGroup2CurrentMajorHighLevel, dcdcErrorMinorAlarmLevel=dcdcErrorMinorAlarmLevel, batteryGroup2BankNumberOfFuses=batteryGroup2BankNumberOfFuses, powerSystemTrapsGroup=powerSystemTrapsGroup, batteryGroup2AhChargedAlarmEnable=batteryGroup2AhChargedAlarmEnable, generatorRunHoursLogLastWeeksIndex=generatorRunHoursLogLastWeeksIndex, batteryCurrentsStatus=batteryCurrentsStatus, mainsMonitorEnergyLogLastWeeksNumberOfEntries=mainsMonitorEnergyLogLastWeeksNumberOfEntries, currentMonitorCurrentDescription=currentMonitorCurrentDescription, batteryGroup2EqualizeCommand=batteryGroup2EqualizeCommand, batteryUsedCapacityAlarmEnable=batteryUsedCapacityAlarmEnable, invertersCapacityDescription=invertersCapacityDescription, currentMonitorEnergyLogLastWeeksTable=currentMonitorEnergyLogLastWeeksTable, inputs=inputs, ioUnitError=ioUnitError, batteryMonitorSymmetryEntry=batteryMonitorSymmetryEntry, invertersEnergyLogLastDaysNumberOfEntries=invertersEnergyLogLastDaysNumberOfEntries, inverterSwPartNumber=inverterSwPartNumber, inverterGroupInverterOutputCurrentValue=inverterGroupInverterOutputCurrentValue, batteryGroup2AhCharged=batteryGroup2AhCharged, mainControlUnitIndex=mainControlUnitIndex, loadMonitorErrorMinorAlarmLevel=loadMonitorErrorMinorAlarmLevel, batteryAhDischargedStatus=batteryAhDischargedStatus, currentMonitorEnergyLogLastDaysIndex=currentMonitorEnergyLogLastDaysIndex, flexiMonitorInputIndex=flexiMonitorInputIndex, alarmSubsysSourceDescr=alarmSubsysSourceDescr, batteryGroup2AhChargedMinorHighLevel=batteryGroup2AhChargedMinorHighLevel, rectifierGroupTemperatureMinorLowLevel=rectifierGroupTemperatureMinorLowLevel, mainsMonitorCurrentAlarmEnable=mainsMonitorCurrentAlarmEnable, batteryAhDischargedTrapRepeatCounter=batteryAhDischargedTrapRepeatCounter, mainsVoltageAlarmEnable=mainsVoltageAlarmEnable, batteryBankSymmetryMinorAlarmLevel=batteryBankSymmetryMinorAlarmLevel, batteryMonitorsEntry=batteryMonitorsEntry, dcdcCurrentStatus=dcdcCurrentStatus, alarmMeasuredVarOid=alarmMeasuredVarOid, generatorFuelConsumptionLogLastWeeksTable=generatorFuelConsumptionLogLastWeeksTable, batteryGroup2VoltageTrapRepeatCounter=batteryGroup2VoltageTrapRepeatCounter, currentMonitorCurrentStatus=currentMonitorCurrentStatus, load=load, dcdcHwPartNumber=dcdcHwPartNumber, controlSystemIoUnitTemperatureTable=controlSystemIoUnitTemperatureTable, controlSystemIoUnitsNumberOfUnits=controlSystemIoUnitsNumberOfUnits, rectifierGroupCapacityValue=rectifierGroupCapacityValue, flexiMonitorInputTrapRepeatCounter=flexiMonitorInputTrapRepeatCounter, batteryEnergyLogLastDaysTable=batteryEnergyLogLastDaysTable, mainsVoltageValue=mainsVoltageValue, inputControlUnitsEntry=inputControlUnitsEntry, mainsGroupMainsFailureValue=mainsGroupMainsFailureValue, dcdcOutputCurrentValue=dcdcOutputCurrentValue, inverterGroupReactiveEnergyLogLastWeeksEntry=inverterGroupReactiveEnergyLogLastWeeksEntry, rectifierTable=rectifierTable, rectifierGroupRectifierTable=rectifierGroupRectifierTable, mainsGroupMainsFailureDescription=mainsGroupMainsFailureDescription, rectifierStatus=rectifierStatus, mainsGroupMainsFailureMajorAlarmLevel=mainsGroupMainsFailureMajorAlarmLevel, invertersCapacityStatus=invertersCapacityStatus, rectifierHwPartNumber=rectifierHwPartNumber, batteryBankStatus=batteryBankStatus, mainsMonitorVoltageMajorHighLevel=mainsMonitorVoltageMajorHighLevel, rectifierGroupRectifierHwVersion=rectifierGroupRectifierHwVersion, mainsGroupMainsFailureEntry=mainsGroupMainsFailureEntry, inverterGroupEnergyLogLastHoursEntry=inverterGroupEnergyLogLastHoursEntry, dcdcCapacityEntry=dcdcCapacityEntry, mainsGroupOutageLogWeeksEntry=mainsGroupOutageLogWeeksEntry, rectifiersCurrentStatus=rectifiersCurrentStatus, batteryTimeLeftTrapRepeatCounter=batteryTimeLeftTrapRepeatCounter, batteryGroup2TestVoltage=batteryGroup2TestVoltage, dcdcErrorTrapRepeatCounter=dcdcErrorTrapRepeatCounter, alarmWindChargerTrap=alarmWindChargerTrap, rectifiersCurrentMinorAlarmLevel=rectifiersCurrentMinorAlarmLevel, batteryBankTable=batteryBankTable, mainsMonitorCurrentTable=mainsMonitorCurrentTable, mainsOutageLogMonthsTable=mainsOutageLogMonthsTable, batteryEnergyLogLastDaysEntry=batteryEnergyLogLastDaysEntry, rectifierGroupEnergyLogLastDaysValue=rectifierGroupEnergyLogLastDaysValue, batteryFuseStatus=batteryFuseStatus, invertersNumberOfInverters=invertersNumberOfInverters, batteryEnergyLogLastDaysNumberOfEntries=batteryEnergyLogLastDaysNumberOfEntries, mainsMonitorEnergyLogLastDaysEntry=mainsMonitorEnergyLogLastDaysEntry, batteryGroup2Test=batteryGroup2Test, batteryGroup2BankNumberOfCurrents=batteryGroup2BankNumberOfCurrents, batteryCurrentsMajorLowLevel=batteryCurrentsMajorLowLevel, batteryGroup2TotalCapacityAlarmEnable=batteryGroup2TotalCapacityAlarmEnable, inverterGroupCurrentStatus=inverterGroupCurrentStatus, inputIoUnitProgInputConfiguration=inputIoUnitProgInputConfiguration, solarChargersEnergyLogLastWeeksEntry=solarChargersEnergyLogLastWeeksEntry, batteryGroup2TestResultDuration=batteryGroup2TestResultDuration, outputControlUnitOutputIndex=outputControlUnitOutputIndex, mainControlUnitEarthFaultAlarmEnable=mainControlUnitEarthFaultAlarmEnable, rectifiersEnergyLogLastDaysTable=rectifiersEnergyLogLastDaysTable, loadGroupTable=loadGroupTable, mainsOutageLogDaysNumberOfEntries=mainsOutageLogDaysNumberOfEntries, batteryGroup2BankSymmetryAlarmEnable=batteryGroup2BankSymmetryAlarmEnable, inverterGroupCurrentAlarmEnable=inverterGroupCurrentAlarmEnable, batteryQualityValue=batteryQualityValue, inputIoUnitProgInputIndex=inputIoUnitProgInputIndex, mainsMonitorFrequencyMinorLowLevel=mainsMonitorFrequencyMinorLowLevel, generatorTankTrapRepeatCounter=generatorTankTrapRepeatCounter, controlSystemIoUnitTemperatureValue=controlSystemIoUnitTemperatureValue, controlSystemIoUnitFanControl=controlSystemIoUnitFanControl, batteryMonitorTemperatureEntry=batteryMonitorTemperatureEntry, batteryBankSymmetryEntry=batteryBankSymmetryEntry, inverterGroupEnergyLogLastHoursIndex=inverterGroupEnergyLogLastHoursIndex)
mibBuilder.exportSymbols("SP2-MIB", inverterGroupEnergyLogLastHoursTable=inverterGroupEnergyLogLastHoursTable, invertersErrorDescription=invertersErrorDescription, batteryGroup2TimeLeft=batteryGroup2TimeLeft, invertersCapacityValue=invertersCapacityValue, mainsGroupOutageLogMonthsNumberOfEntries=mainsGroupOutageLogMonthsNumberOfEntries, batteryTemperaturesValue=batteryTemperaturesValue, batteryMonitorErrorValue=batteryMonitorErrorValue, batteryGroup2TemperatureValue=batteryGroup2TemperatureValue, rectifierGroupCapacityMinorAlarmLevel=rectifierGroupCapacityMinorAlarmLevel, inverterGroupReactiveEnergyLogLastDaysTable=inverterGroupReactiveEnergyLogLastDaysTable, mainsMainsFailureValue=mainsMainsFailureValue, invertersCurrentStatus=invertersCurrentStatus, batteryMonitorSymmetryDeltaValue=batteryMonitorSymmetryDeltaValue, batteryGroup2CurrentMinorHighLevel=batteryGroup2CurrentMinorHighLevel, batteryGroup2QualityMajorAlarmLevel=batteryGroup2QualityMajorAlarmLevel, powerSystemSite=powerSystemSite, batteryGroup2CycleLogWeeksTable=batteryGroup2CycleLogWeeksTable, rectifiersEnergyLogLastHoursTable=rectifiersEnergyLogLastHoursTable, smartNodeErrorValue=smartNodeErrorValue, currentMonitorType=currentMonitorType, mainsGroupStatus=mainsGroupStatus, batteryGroup2TemperaturesStatus=batteryGroup2TemperaturesStatus, mainsMonitorFrequencyMajorLowLevel=mainsMonitorFrequencyMajorLowLevel, rectifierGroupCapacityTrapRepeatCounter=rectifierGroupCapacityTrapRepeatCounter, windChargersEnergyLogLastDaysIndex=windChargersEnergyLogLastDaysIndex, rectifierGroupTemperatureTable=rectifierGroupTemperatureTable, mainsMonitorVoltageStatus=mainsMonitorVoltageStatus, mainsMonitorEnergyLogLastHoursTable=mainsMonitorEnergyLogLastHoursTable, ambientTemperatureValue=ambientTemperatureValue, solarChargersCurrent=solarChargersCurrent, batteryCycleLogWeeksTable=batteryCycleLogWeeksTable, rectifiersEnergyLogLastWeeksTable=rectifiersEnergyLogLastWeeksTable, currentMonitorNumberOfFuses=currentMonitorNumberOfFuses, controlUnitTable=controlUnitTable, batteryGroup2Status=batteryGroup2Status, dcdcStatus=dcdcStatus, mainsMainsFailureTrapRepeatCounter=mainsMainsFailureTrapRepeatCounter, inverterGroupsEntry=inverterGroupsEntry, invertersReactiveEnergyLogLastDaysNumberOfEntries=invertersReactiveEnergyLogLastDaysNumberOfEntries, loadStatus=loadStatus, rectifierGroupTemperatureMajorLowLevel=rectifierGroupTemperatureMajorLowLevel, batteryBankSymmetryTrapRepeatCounter=batteryBankSymmetryTrapRepeatCounter, mainControlUnitTemperatureEntry=mainControlUnitTemperatureEntry, generatorEnergyLogLastHoursNumberOfEntries=generatorEnergyLogLastHoursNumberOfEntries, rectifierSwVersion=rectifierSwVersion, inverterGroupEnergyLogLastWeeksValue=inverterGroupEnergyLogLastWeeksValue, generatorRunHoursLogLastMonthsTable=generatorRunHoursLogLastMonthsTable, batteryGroup2TotalCapacityMajorLowLevel=batteryGroup2TotalCapacityMajorLowLevel, batteryGroup2LVBDDescription=batteryGroup2LVBDDescription, inverterGroupErrorMajorAlarmLevel=inverterGroupErrorMajorAlarmLevel, rectifierGroupTemperatureValue=rectifierGroupTemperatureValue, batteryTimeLeftStatus=batteryTimeLeftStatus, rectifierGroupTemperatureEntry=rectifierGroupTemperatureEntry, rectifiersCapacityValue=rectifiersCapacityValue, batteryEnergyLogLastDaysIndex=batteryEnergyLogLastDaysIndex, windChargersErrorStatus=windChargersErrorStatus, windChargersEnergyLogLastDaysValue=windChargersEnergyLogLastDaysValue, controlSystemIoUnits=controlSystemIoUnits, loadLVLDValue=loadLVLDValue, batteryGroup2TimeLeftDescription=batteryGroup2TimeLeftDescription, loadLVLDTable=loadLVLDTable, batteryCurrents=batteryCurrents, mainsGroupMainsFailureAlarmEnable=mainsGroupMainsFailureAlarmEnable, inputIoUnitProgInputAlarmEnable=inputIoUnitProgInputAlarmEnable, batteryAhDischargedAlarmEnable=batteryAhDischargedAlarmEnable, windChargerInputVoltageValue=windChargerInputVoltageValue, batteryMonitorCurrentEntry=batteryMonitorCurrentEntry, rectifiersTemperatureMajorHighLevel=rectifiersTemperatureMajorHighLevel, batteryTestResultQuality=batteryTestResultQuality, windChargersCurrent=windChargersCurrent, invertersEnergyLogLastDaysIndex=invertersEnergyLogLastDaysIndex, batteryGroup2EqualizeManualMaxDuration=batteryGroup2EqualizeManualMaxDuration, dcdcHwVersion=dcdcHwVersion, batteryBankIndex=batteryBankIndex, inverterIndex=inverterIndex, batteryGroup2TempComp=batteryGroup2TempComp, dcdcErrorTable=dcdcErrorTable, dcdcInputVoltageValue=dcdcInputVoltageValue, batteryEnergyLogLastHoursValue=batteryEnergyLogLastHoursValue, invertersCurrentMajorAlarmLevel=invertersCurrentMajorAlarmLevel, rectifierGroupTemperatureStatus=rectifierGroupTemperatureStatus, inverterGroupIndex=inverterGroupIndex, controlUnitEntry=controlUnitEntry, invertersErrorMajorAlarmLevel=invertersErrorMajorAlarmLevel, inputIoUnitProgInputTable=inputIoUnitProgInputTable, batteryBoost=batteryBoost, inverterHwPartNumber=inverterHwPartNumber, rectifierGroupErrorMinorAlarmLevel=rectifierGroupErrorMinorAlarmLevel, flexiMonitorErrorMajorAlarmLevel=flexiMonitorErrorMajorAlarmLevel, solarChargerSwPartNumber=solarChargerSwPartNumber, windChargersEnergyLogLastHoursTable=windChargersEnergyLogLastHoursTable, powerSystemLatitude=powerSystemLatitude, batteryTemperatureMajorHighLevel=batteryTemperatureMajorHighLevel, inverterGroupEnergyLogLastDaysEntry=inverterGroupEnergyLogLastDaysEntry, generatorTankTable=generatorTankTable, batteryGroup2VoltageAlarmEnable=batteryGroup2VoltageAlarmEnable, batteryRemainingCapacity=batteryRemainingCapacity, mainsOutageLogDaysEntry=mainsOutageLogDaysEntry, deltaTemperatureStatus=deltaTemperatureStatus, batteryGroup2Bank=batteryGroup2Bank, batteryTestResultEntry=batteryTestResultEntry, alarmSubsysStatusOnOff=alarmSubsysStatusOnOff, controlSystemIoUnitTemperatureMajorLowLevel=controlSystemIoUnitTemperatureMajorLowLevel, inverterOutputVoltageValue=inverterOutputVoltageValue, smartNodeErrorMinorAlarmLevel=smartNodeErrorMinorAlarmLevel, loadLVLDStatus=loadLVLDStatus, snmp=snmp, inverterGroupEnergyLogLastDaysValue=inverterGroupEnergyLogLastDaysValue, batteryGroup2EnergyLog=batteryGroup2EnergyLog, batteryGroup2RemainingCapacityMajorLowLevel=batteryGroup2RemainingCapacityMajorLowLevel, mainsOutageLogDaysValue=mainsOutageLogDaysValue, generatorTankStatus=generatorTankStatus, batteryBankSymmetryIndex=batteryBankSymmetryIndex, generatorFuelConsumptionLogLastMonthsNoOfEntries=generatorFuelConsumptionLogLastMonthsNoOfEntries, mainControlUnitsErrorDescription=mainControlUnitsErrorDescription, mainsGroupOutageLogWeeksTable=mainsGroupOutageLogWeeksTable, batteryMonitors=batteryMonitors, powerSystemTemperatureScale=powerSystemTemperatureScale, batteryMonitorCurrentIndex=batteryMonitorCurrentIndex, batteryGroup2UsedCapacityValue=batteryGroup2UsedCapacityValue, mainsMonitorEnergyLogLastWeeksValue=mainsMonitorEnergyLogLastWeeksValue, batteryBoostCommand=batteryBoostCommand, currentMonitorEnergyLogAccumulatedEntry=currentMonitorEnergyLogAccumulatedEntry, windChargerEntry=windChargerEntry, rectifierGroupEnergyLogLastHoursValue=rectifierGroupEnergyLogLastHoursValue, batteryCycleLogWeeksNumberOfEntries=batteryCycleLogWeeksNumberOfEntries, powerSystem=powerSystem, batteryGroup2CycleLogMonthsEntry=batteryGroup2CycleLogMonthsEntry, generatorEnergyLogLastHoursValue=generatorEnergyLogLastHoursValue, batteryGroup2UsedCapacityMinorAlarmLevel=batteryGroup2UsedCapacityMinorAlarmLevel, loadMonitorErrorAlarmEnable=loadMonitorErrorAlarmEnable, batteryCurrentIndex=batteryCurrentIndex, mainsMonitorEnergyLogLastHoursNumberOfEntries=mainsMonitorEnergyLogLastHoursNumberOfEntries, solarChargerTable=solarChargerTable, invertersReactiveEnergyLogLastWeeksValue=invertersReactiveEnergyLogLastWeeksValue, batteryCycleLogDaysValue=batteryCycleLogDaysValue, batteryChargeCurrentLimit=batteryChargeCurrentLimit, inverterGroupReactiveEnergyLogLastHoursIndex=inverterGroupReactiveEnergyLogLastHoursIndex, batteryGroup2BankSymmetryTable=batteryGroup2BankSymmetryTable, batteryGroup2BankSymmetryDescription=batteryGroup2BankSymmetryDescription, batteryEqualizeManualMaxDuration=batteryEqualizeManualMaxDuration, batteryCycleLog=batteryCycleLog, batteryGroup2CurrentsMinorHighLevel=batteryGroup2CurrentsMinorHighLevel, mainsMonitorFrequencyValue=mainsMonitorFrequencyValue, rectifierGroupRectifierHwPartNumber=rectifierGroupRectifierHwPartNumber, loadEnergyLogAccumulated=loadEnergyLogAccumulated, outputControlUnitOutputEntry=outputControlUnitOutputEntry, batteryGroup2UsedCapacityStatus=batteryGroup2UsedCapacityStatus, batteryMonitorErrorAlarmEnable=batteryMonitorErrorAlarmEnable, currentMonitorCurrentAlarmEnable=currentMonitorCurrentAlarmEnable, flexiMonitorOutputIndex=flexiMonitorOutputIndex, deltaTemperature=deltaTemperature, batteryEnergyLogLastWeeksValue=batteryEnergyLogLastWeeksValue, mainsMonitorCurrentMajorHighLevel=mainsMonitorCurrentMajorHighLevel, controlUnitNumberOfUnits=controlUnitNumberOfUnits, batteryTotalCapacityValue=batteryTotalCapacityValue, mainControlUnitTemperatureMajorLowLevel=mainControlUnitTemperatureMajorLowLevel, mainsMonitorEnergyLogLastWeeksEntry=mainsMonitorEnergyLogLastWeeksEntry, batteryGroup2TimeLeftValue=batteryGroup2TimeLeftValue, inverterGroupReactiveEnergyLogLastWeeksIndex=inverterGroupReactiveEnergyLogLastWeeksIndex, inputControlUnitInputAlarmEnable=inputControlUnitInputAlarmEnable, inverterGroupCurrentTable=inverterGroupCurrentTable, currentMonitors=currentMonitors, mainsVoltageStatus=mainsVoltageStatus, batteryCurrentsDescription=batteryCurrentsDescription, rectifiersStatus=rectifiersStatus, ambientTemperatureMinorHighLevel=ambientTemperatureMinorHighLevel, batteryMonitorSymmetryIndex=batteryMonitorSymmetryIndex, generatorEnergyLog=generatorEnergyLog, rectifierGroupCurrentEntry=rectifierGroupCurrentEntry, loadLVLDDisconnectVoltage=loadLVLDDisconnectVoltage, deltaTemperatureValue=deltaTemperatureValue, batteryTestCommand=batteryTestCommand, powerSystemSerialNumber=powerSystemSerialNumber, batteryMonitorFuseIndex=batteryMonitorFuseIndex, batteryAhChargedAlarmEnable=batteryAhChargedAlarmEnable, solarChargersErrorTrapRepeatCounter=solarChargersErrorTrapRepeatCounter, mainsMonitorEnergyLogLastHoursIndex=mainsMonitorEnergyLogLastHoursIndex, batteryTotalCapacityTrapRepeatCounter=batteryTotalCapacityTrapRepeatCounter, batteryMonitorsTable=batteryMonitorsTable, batteryGroup2CycleLogMonthsValue=batteryGroup2CycleLogMonthsValue, windChargersEnergyLogLastWeeksEntry=windChargersEnergyLogLastWeeksEntry, invertersCapacityTrapRepeatCounter=invertersCapacityTrapRepeatCounter, outputIoUnitOutputTable=outputIoUnitOutputTable, batteryGroup2FuseValue=batteryGroup2FuseValue, rectifiersEnergyLogLastDaysIndex=rectifiersEnergyLogLastDaysIndex, loadNumberOfLVLDs=loadNumberOfLVLDs, generatorVoltageControlledStartEnable=generatorVoltageControlledStartEnable, outputs=outputs, mainsMonitorFrequencyStatus=mainsMonitorFrequencyStatus, loadCurrentDescription=loadCurrentDescription, invertersCurrentValue=invertersCurrentValue, batteryTimeLeftValue=batteryTimeLeftValue, rectifierGroupTemperatureTrapRepeatCounter=rectifierGroupTemperatureTrapRepeatCounter, invertersNumberOfGroups=invertersNumberOfGroups, mainsMonitorEnergyLogLastHoursEntry=mainsMonitorEnergyLogLastHoursEntry, ioUnitErrorDescription=ioUnitErrorDescription, batteryGroup2VoltageMajorLowLevel=batteryGroup2VoltageMajorLowLevel, controlSystemIoUnitTemperatureIndex=controlSystemIoUnitTemperatureIndex, rectifierGroupEnergyLogLastDaysTable=rectifierGroupEnergyLogLastDaysTable, mainsMonitorFrequencyAlarmEnable=mainsMonitorFrequencyAlarmEnable, batteryGroup2QualityValue=batteryGroup2QualityValue, invertersEnergyLogLastWeeksEntry=invertersEnergyLogLastWeeksEntry, controlSystemSummary=controlSystemSummary, userSuspendedMajorAlarmLevel=userSuspendedMajorAlarmLevel, solarChargersEnergyLogLastHoursEntry=solarChargersEnergyLogLastHoursEntry, inverterTable=inverterTable, invertersReactiveEnergyLogLastWeeksTable=invertersReactiveEnergyLogLastWeeksTable, mainControlUnits=mainControlUnits, invertersReactiveEnergyLogLastWeeksIndex=invertersReactiveEnergyLogLastWeeksIndex, batteryGroup2CurrentAlarmEnable=batteryGroup2CurrentAlarmEnable, generatorEnergyLogLastHoursIndex=generatorEnergyLogLastHoursIndex, batteryGroup2BankSymmetryIndex=batteryGroup2BankSymmetryIndex, mainsOutageLogMonthsNumberOfEntries=mainsOutageLogMonthsNumberOfEntries, generatorTankMajorHighLevel=generatorTankMajorHighLevel, mainsMonitorErrorTrapRepeatCounter=mainsMonitorErrorTrapRepeatCounter, ambientTemperature=ambientTemperature, loadNumberOfVoltages=loadNumberOfVoltages, powerSystemTraps=powerSystemTraps, inverterGroupReactiveEnergyLogEntry=inverterGroupReactiveEnergyLogEntry, rectifiersTemperatureDescription=rectifiersTemperatureDescription, alarmGroupTable=alarmGroupTable, loadLVLDTrapRepeatCounter=loadLVLDTrapRepeatCounter, inverterGroupCurrentValue=inverterGroupCurrentValue, batteryCurrentAlarmEnable=batteryCurrentAlarmEnable, batteryUsedCapacityMinorAlarmLevel=batteryUsedCapacityMinorAlarmLevel, smartNodeErrorStatus=smartNodeErrorStatus, invertersReactiveEnergyLogLastDaysEntry=invertersReactiveEnergyLogLastDaysEntry, controlSystemIoUnitFanIndex=controlSystemIoUnitFanIndex, ambientTemperatureDescription=ambientTemperatureDescription, batteryGroup2TemperatureAlarmEnable=batteryGroup2TemperatureAlarmEnable, inputControlUnitInputStatus=inputControlUnitInputStatus, powerSystemLongitudeDecimal=powerSystemLongitudeDecimal, outputControlUnitTable=outputControlUnitTable, batteryFuseIndex=batteryFuseIndex, controlSystemIoUnitFanSpeedDeviation=controlSystemIoUnitFanSpeedDeviation, batteryCurrentTrapRepeatCounter=batteryCurrentTrapRepeatCounter, mainsMonitorErrorAlarmEnable=mainsMonitorErrorAlarmEnable, generatorRunHoursLogLastDaysEntry=generatorRunHoursLogLastDaysEntry, batteryMonitorTemperatureStatus=batteryMonitorTemperatureStatus, userSuspendedDescription=userSuspendedDescription, batteryMonitorsNumberOfUnits=batteryMonitorsNumberOfUnits, mainsMonitorVoltageAlarmEnable=mainsMonitorVoltageAlarmEnable, batteryUsedCapacityDescription=batteryUsedCapacityDescription, loadCurrentStatus=loadCurrentStatus, dcdcTable=dcdcTable, inputControlUnitInputConfiguration=inputControlUnitInputConfiguration, batteryVoltage=batteryVoltage, rectifiersErrorMajorAlarmLevel=rectifiersErrorMajorAlarmLevel, rectifierGroupCurrentAlarmEnable=rectifierGroupCurrentAlarmEnable, mainsGroupOutageLogDaysEntry=mainsGroupOutageLogDaysEntry, rectifiersEnergyLogLastWeeksEntry=rectifiersEnergyLogLastWeeksEntry, batteryGroup2AhDischarged=batteryGroup2AhDischarged, batteryGroup2TotalCapacityValue=batteryGroup2TotalCapacityValue)
mibBuilder.exportSymbols("SP2-MIB", generatorFuelConsumptionLogLastDaysValue=generatorFuelConsumptionLogLastDaysValue, loadFuseAlarmEnable=loadFuseAlarmEnable, controlSystemNumberOfControlUnits=controlSystemNumberOfControlUnits, inverterGroupEnergyLogLastWeeksEntry=inverterGroupEnergyLogLastWeeksEntry, batteryBankNumberOfFuses=batteryBankNumberOfFuses)
