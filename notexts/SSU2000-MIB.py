#
# PySNMP MIB module SSU2000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/microsemi/SSU2000-MIB
# Produced by pysmi-1.1.8 at Thu Sep  7 14:19:55 2023
# On host fv-az548-537 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
austron, = mibBuilder.importSymbols("DATUM-MIB", "austron")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, ModuleIdentity, TimeTicks, ObjectIdentity, NotificationType, IpAddress, Counter64, Unsigned32, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress", "Counter64", "Unsigned32", "Counter32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ssu2000 = ModuleIdentity((1, 3, 6, 1, 4, 1, 601, 3, 1, 1))
if mibBuilder.loadTexts: ssu2000.setLastUpdated('0801140000Z')
if mibBuilder.loadTexts: ssu2000.setOrganization('Symmetricom')
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1))
mstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2))
msetup = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4))
event = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6))
ref = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7))
phase = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8))
freq = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9))
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 11))
pqlTable = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12))
ioname = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13))
comm = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14))
snmpman = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17))
who = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18))
ntpq = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19))
route = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20))
mtie = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30))
tdev = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31))
ptpclient = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36))
mTrapReq = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 50))
mTrapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51))
mTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 52))
sInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60))
statusCom = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 1))
statusClk = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2))
statusGps = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5))
statusDs1E1Inp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7))
statusCcInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8))
statusOut = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10))
statusLrm = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11))
statusSineInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12))
statusJccInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13))
statusLrmE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14))
statusPtNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15))
statusPtPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16))
statusSynce = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17))
setupCom = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 1))
setupClk = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2))
setupGps = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5))
setupDs1E1Inp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7))
setupCcInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8))
setupDs1Out = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10))
setupE1Out = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11))
setup2048Out = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12))
setupCCOut = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13))
setup422Out = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14))
setupE12048Out = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15))
setupLrm = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16))
setupSineOut = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17))
setupSineInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18))
setupJccOut = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19))
setupJccInp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20))
setupLrmE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21))
setupPtNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22))
setupPtPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23))
setupSynce = MibIdentifier((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24))
class OkValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ok", 1), ("fault", 2))

class OnValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class YesValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class EnaValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ena", 1), ("dis", 2))

class ActiveValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class ValidValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class TrueValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class DateAndTime(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d-1d-1d,1d:1d:1d.1d,1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class TLocalTimeOffset(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class TModuleCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class TSsm(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TLatAndLon(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a1d:1d:1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class TAntHeight(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a2d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

inventoryTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: inventoryTable.setStatus('current')
inEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "inChassis"), (0, "SSU2000-MIB", "inSlot"))
if mibBuilder.loadTexts: inEntry.setStatus('current')
inChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: inChassis.setStatus('current')
inSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: inSlot.setStatus('current')
inModCode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 3), TModuleCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inModCode.setStatus('current')
inName = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inName.setStatus('current')
inSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSerial.setStatus('current')
inService = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inService.setStatus('current')
inHwPart = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHwPart.setStatus('current')
inHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHwRev.setStatus('current')
inHwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inHwDate.setStatus('current')
inSwPart = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSwPart.setStatus('current')
inSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSwRev.setStatus('current')
inRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inRevision.setStatus('current')
inShelfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inShelfDesc.setStatus('current')
inShelfPart = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inShelfPart.setStatus('current')
inInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 15), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inInstalled.setStatus('current')
inAction = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inAction.setStatus('current')
inAdapterPart = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inAdapterPart.setStatus('current')
inFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 2), )
if mibBuilder.loadTexts: inFeatureTable.setStatus('current')
inFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "inFeatureIndex"))
if mibBuilder.loadTexts: inFeatureEntry.setStatus('current')
inFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: inFeatureIndex.setStatus('current')
inFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 1, 2, 1, 2), EnaValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inFeature.setStatus('current')
staClkTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: staClkTable.setStatus('current')
staCkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "staCkChassis"), (0, "SSU2000-MIB", "staCkSlot"))
if mibBuilder.loadTexts: staCkEntry.setStatus('current')
staCkChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staCkChassis.setStatus('current')
staCkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staCkSlot.setStatus('current')
staCkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCkStatus.setStatus('current')
staCkPLLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("failed", 1), ("warmup", 2), ("acquire", 3), ("holdover", 4), ("lock", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCkPLLMode.setStatus('current')
staCkTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCkTau.setStatus('current')
staCkPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCkPql.setStatus('current')
staCkUtc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 2, 1, 1, 7), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCkUtc.setStatus('current')
staGpsTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: staGpsTable.setStatus('current')
staGpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "staGpsChassis"), (0, "SSU2000-MIB", "staGpsSlot"))
if mibBuilder.loadTexts: staGpsEntry.setStatus('current')
staGpsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staGpsChassis.setStatus('current')
staGpsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staGpsSlot.setStatus('current')
staGpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4), ("reject", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsStatus.setStatus('current')
staGpsPhaseA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsPhaseA.setStatus('current')
staGpsPhaseB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsPhaseB.setStatus('current')
staGpsUtc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 6), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsUtc.setStatus('current')
staGpsMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disable", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsMStatus.setStatus('current')
staGpsMtie1A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsMtie1A.setStatus('current')
staGpsMtie2A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsMtie2A.setStatus('current')
staGpsMtie1B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsMtie1B.setStatus('current')
staGpsMtie2B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsMtie2B.setStatus('current')
staGpsFreqA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 12), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsFreqA.setStatus('current')
staGpsFreqB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 13), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsFreqB.setStatus('current')
staGpsPpsSigma = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGpsPpsSigma.setStatus('current')
staGps3Sigma = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staGps3Sigma.setStatus('current')
stGpsPosTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2), )
if mibBuilder.loadTexts: stGpsPosTable.setStatus('current')
stGpsPosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "stGpsPosChassis"), (0, "SSU2000-MIB", "stGpsPosSlot"))
if mibBuilder.loadTexts: stGpsPosEntry.setStatus('current')
stGpsPosChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: stGpsPosChassis.setStatus('current')
stGpsPosSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stGpsPosSlot.setStatus('current')
stGpsPosValid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 3), ValidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosValid.setStatus('current')
stGpsPosLat = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 4), TLatAndLon()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosLat.setStatus('current')
stGpsPosLon = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 5), TLatAndLon()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosLon.setStatus('current')
stGpsPosHgt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 6), TAntHeight()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosHgt.setStatus('current')
stGpsPosAccurate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("approx", 1), ("d2", 2), ("d3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosAccurate.setStatus('current')
stGpsPosPdop = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosPdop.setStatus('current')
stGpsPosAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsPosAvg.setStatus('current')
stGpsAvailTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3), )
if mibBuilder.loadTexts: stGpsAvailTable.setStatus('current')
stGpsAvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "stGpsAvChassis"), (0, "SSU2000-MIB", "stGpsAvSlot"), (0, "SSU2000-MIB", "stGpsAvChnl"))
if mibBuilder.loadTexts: stGpsAvEntry.setStatus('current')
stGpsAvChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: stGpsAvChassis.setStatus('current')
stGpsAvSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stGpsAvSlot.setStatus('current')
stGpsAvChnl = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: stGpsAvChnl.setStatus('current')
stGpsAvPNCode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsAvPNCode.setStatus('current')
stGpsAvElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsAvElevation.setStatus('current')
stGpsAvAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsAvAzimuth.setStatus('current')
stGpsAvHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 3, 1, 7), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsAvHealthy.setStatus('current')
stGpsTrackTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5), )
if mibBuilder.loadTexts: stGpsTrackTable.setStatus('current')
stGpsTkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "stGpsTkChassis"), (0, "SSU2000-MIB", "stGpsTkSlot"), (0, "SSU2000-MIB", "stGpsTkChnl"))
if mibBuilder.loadTexts: stGpsTkEntry.setStatus('current')
stGpsTkChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: stGpsTkChassis.setStatus('current')
stGpsTkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stGpsTkSlot.setStatus('current')
stGpsTkChnl = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: stGpsTkChnl.setStatus('current')
stGpsTkSv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsTkSv.setStatus('current')
stGpsTkSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsTkSnr.setStatus('current')
stGpsTkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("src", 1), ("acq", 2), ("agc", 3), ("frq", 4), ("cod", 5), ("msg", 6), ("tim", 7), ("eph", 8), ("ok", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stGpsTkStatus.setStatus('current')
staDs1E1InpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2), )
if mibBuilder.loadTexts: staDs1E1InpTable.setStatus('current')
staDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staDiChassis"), (0, "SSU2000-MIB", "staDiSlot"), (0, "SSU2000-MIB", "staDiPort"))
if mibBuilder.loadTexts: staDiEntry.setStatus('current')
staDiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staDiChassis.setStatus('current')
staDiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staDiSlot.setStatus('current')
staDiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: staDiPort.setStatus('current')
staDiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiStatus.setStatus('current')
staDiPhaseA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiPhaseA.setStatus('current')
staDiPhaseB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiPhaseB.setStatus('current')
staDiPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiPql.setStatus('current')
staDiPqlRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 8), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiPqlRcv.setStatus('current')
staDiLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 9), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiLOS.setStatus('current')
staDiAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 10), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiAIS.setStatus('current')
staDiOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 11), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiOOF.setStatus('current')
staDiBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 12), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiBPV.setStatus('current')
staDiCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 13), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiCRC.setStatus('current')
staDiMtie1A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiMtie1A.setStatus('current')
staDiMtie2A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiMtie2A.setStatus('current')
staDiMtie1B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiMtie1B.setStatus('current')
staDiMtie2B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiMtie2B.setStatus('current')
staDiFreqA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 18), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiFreqA.setStatus('current')
staDiFreqB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 19), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiFreqB.setStatus('current')
staLOSErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLOSErCnt.setStatus('current')
staLOSClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLOSClCnt.setStatus('current')
staAISErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAISErCnt.setStatus('current')
staAISClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAISClCnt.setStatus('current')
staOOFErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOOFErCnt.setStatus('current')
staOOFClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOOFClCnt.setStatus('current')
staBPVErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBPVErCnt.setStatus('current')
staBPVClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBPVClCnt.setStatus('current')
staCRCErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCRCErCnt.setStatus('current')
staCRCClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCRCClCnt.setStatus('current')
staDiMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disable", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDiMStatus.setStatus('current')
staCcInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: staCcInpTable.setStatus('current')
staCiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staCiChassis"), (0, "SSU2000-MIB", "staCiSlot"), (0, "SSU2000-MIB", "staCiPort"))
if mibBuilder.loadTexts: staCiEntry.setStatus('current')
staCiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staCiChassis.setStatus('current')
staCiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staCiSlot.setStatus('current')
staCiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: staCiPort.setStatus('current')
staCiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiStatus.setStatus('current')
staCiPhaseA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiPhaseA.setStatus('current')
staCiPhaseB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiPhaseB.setStatus('current')
staCiLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 9), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiLOS.setStatus('current')
staCiBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 12), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiBPV.setStatus('current')
staCiLOSErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiLOSErCnt.setStatus('current')
staCiLOSClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiLOSClCnt.setStatus('current')
staCiBPVErCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiBPVErCnt.setStatus('current')
staCiBPVClCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiBPVClCnt.setStatus('current')
staCiMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disable", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCiMStatus.setStatus('current')
staSineInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2), )
if mibBuilder.loadTexts: staSineInpTable.setStatus('current')
staSineiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staSineiChassis"), (0, "SSU2000-MIB", "staSineiSlot"), (0, "SSU2000-MIB", "staSineiPort"))
if mibBuilder.loadTexts: staSineiEntry.setStatus('current')
staSineiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staSineiChassis.setStatus('current')
staSineiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staSineiSlot.setStatus('current')
staSineiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: staSineiPort.setStatus('current')
staSineiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiStatus.setStatus('current')
staSineiPhaseA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiPhaseA.setStatus('current')
staSineiPhaseB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiPhaseB.setStatus('current')
staSineiLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 7), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiLOS.setStatus('current')
staSineiMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disable", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiMStatus.setStatus('current')
staSineiPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiPql.setStatus('current')
staSineiMtie1A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiMtie1A.setStatus('current')
staSineiMtie2A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiMtie2A.setStatus('current')
staSineiMtie1B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiMtie1B.setStatus('current')
staSineiMtie2B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000, 10000, 100000))).clone(namedValues=NamedValues(("ok", 1), ("mtie10", 10), ("mtie100", 100), ("mtie1000", 1000), ("mtie10000", 10000), ("mtie100000", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiMtie2B.setStatus('current')
staSineiFreqA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 14), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiFreqA.setStatus('current')
staSineiFreqB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 12, 2, 1, 15), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSineiFreqB.setStatus('current')
staJccInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2), )
if mibBuilder.loadTexts: staJccInpTable.setStatus('current')
staJcciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staCiChassis"), (0, "SSU2000-MIB", "staCiSlot"), (0, "SSU2000-MIB", "staCiPort"))
if mibBuilder.loadTexts: staJcciEntry.setStatus('current')
staJcciChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: staJcciChassis.setStatus('current')
staJcciSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staJcciSlot.setStatus('current')
staJcciPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: staJcciPort.setStatus('current')
staJcciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("selected", 2), ("disable", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciStatus.setStatus('current')
staJcciPhaseA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciPhaseA.setStatus('current')
staJcciPhaseB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1999999998, 1999999998), ValueRangeConstraint(1999999999, 1999999999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciPhaseB.setStatus('current')
staJcciLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 7), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciLOS.setStatus('current')
staJcciBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 8), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciBPV.setStatus('current')
staJcci400Hz = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 9), OnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcci400Hz.setStatus('current')
staJcciMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disable", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staJcciMStatus.setStatus('current')
staOutTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2), )
if mibBuilder.loadTexts: staOutTable.setStatus('current')
staOtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staOtChassis"), (0, "SSU2000-MIB", "staOtSlot"))
if mibBuilder.loadTexts: staOtEntry.setStatus('current')
staOtChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staOtChassis.setStatus('current')
staOtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staOtSlot.setStatus('current')
staOtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("disable", 3), ("fault", 4), ("reject", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtStatus.setStatus('current')
staOtClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("clkc", 3), ("clkd", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtClkSel.setStatus('current')
staOtClka = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 5), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtClka.setStatus('current')
staOtClkb = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 6), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtClkb.setStatus('current')
staOtClkc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 7), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtClkc.setStatus('current')
staOtClkd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 8), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtClkd.setStatus('current')
staOtRednt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtRednt.setStatus('current')
staOtPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtPql.setStatus('current')
staOtPortSta = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 10, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOtPortSta.setStatus('current')
staLrmMTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2), )
if mibBuilder.loadTexts: staLrmMTable.setStatus('current')
staLrmMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staLrmMChassis"), (0, "SSU2000-MIB", "staLrmMSlot"))
if mibBuilder.loadTexts: staLrmMEntry.setStatus('current')
staLrmMChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staLrmMChassis.setStatus('current')
staLrmMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staLrmMSlot.setStatus('current')
staLrmMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmMStatus.setStatus('current')
staLrmMRefSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("clkc", 3), ("clkd", 4), ("none", 5), ("pllflt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmMRefSrc.setStatus('current')
staLrmMCtaId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dual", 1), ("quad", 2), ("none", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmMCtaId.setStatus('current')
staLrmPTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3), )
if mibBuilder.loadTexts: staLrmPTable.setStatus('current')
staLrmPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "staLrmPChassis"), (0, "SSU2000-MIB", "staLrmPSlot"), (0, "SSU2000-MIB", "staLrmPPort"))
if mibBuilder.loadTexts: staLrmPEntry.setStatus('current')
staLrmPChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staLrmPChassis.setStatus('current')
staLrmPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staLrmPSlot.setStatus('current')
staLrmPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: staLrmPPort.setStatus('current')
staLrmPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("cut", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPStatus.setStatus('current')
staLrmPFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPFrame.setStatus('current')
staLrmPLos = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 6), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPLos.setStatus('current')
staLrmPAis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 7), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPAis.setStatus('current')
staLrmPLof = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 8), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPLof.setStatus('current')
staLrmPBpv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 9), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpv.setStatus('current')
staLrmPSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 10), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPSlip.setStatus('current')
staLrmPSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPSlips.setStatus('current')
staLrmPLosSide2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 12), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPLosSide2.setStatus('current')
staLrmPBpvTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpvTestTime.setStatus('current')
staLrmPBpv60SRate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpv60SRate.setStatus('current')
staLrmPBpv24HRate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpv24HRate.setStatus('current')
staLrmPBpvErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpvErrSecs.setStatus('current')
staLrmPBpvSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpvSevErrSecs.setStatus('current')
staLrmPBpvSevErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 11, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrmPBpvSevErrRatio.setStatus('current')
staLrme1MTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2), )
if mibBuilder.loadTexts: staLrme1MTable.setStatus('current')
staLrme1MEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "staLrme1MChassis"), (0, "SSU2000-MIB", "staLrme1MSlot"))
if mibBuilder.loadTexts: staLrme1MEntry.setStatus('current')
staLrme1MChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staLrme1MChassis.setStatus('current')
staLrme1MSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staLrme1MSlot.setStatus('current')
staLrme1MStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1MStatus.setStatus('current')
staLrme1MRefSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("clkc", 3), ("clkd", 4), ("none", 5), ("pllflt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1MRefSrc.setStatus('current')
staLrme1MCtaId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dual", 1), ("quad", 2), ("none", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1MCtaId.setStatus('current')
staLrme1PTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3), )
if mibBuilder.loadTexts: staLrme1PTable.setStatus('current')
staLrme1PEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "staLrme1PChassis"), (0, "SSU2000-MIB", "staLrme1PSlot"), (0, "SSU2000-MIB", "staLrme1PPort"))
if mibBuilder.loadTexts: staLrme1PEntry.setStatus('current')
staLrme1PChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staLrme1PChassis.setStatus('current')
staLrme1PSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staLrme1PSlot.setStatus('current')
staLrme1PPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: staLrme1PPort.setStatus('current')
staLrme1PStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("cut", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PStatus.setStatus('current')
staLrme1PFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 5), OnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PFrame.setStatus('current')
staLrme1PLos = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 6), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PLos.setStatus('current')
staLrme1PAis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 7), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PAis.setStatus('current')
staLrme1PLof = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 8), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PLof.setStatus('current')
staLrme1PBpv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 9), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpv.setStatus('current')
staLrme1PSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 10), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PSlip.setStatus('current')
staLrme1PSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PSlips.setStatus('current')
staLrme1PLosSide2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 12), OkValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PLosSide2.setStatus('current')
staLrme1PBpv60SRate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpv60SRate.setStatus('current')
staLrme1PBpv24HRate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpv24HRate.setStatus('current')
staLrme1PBpvErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpvErrSecs.setStatus('current')
staLrme1PBpvSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpvSevErrSecs.setStatus('current')
staLrme1PBpvSevErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 14, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLrme1PBpvSevErrRatio.setStatus('current')
staPtNtpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1), )
if mibBuilder.loadTexts: staPtNtpTable.setStatus('current')
staPtNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "staPtNtpChassis"), (0, "SSU2000-MIB", "staPtNtpSlot"))
if mibBuilder.loadTexts: staPtNtpEntry.setStatus('current')
staPtNtpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staPtNtpChassis.setStatus('current')
staPtNtpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staPtNtpSlot.setStatus('current')
staPtNtpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("disable", 3), ("fault", 4), ("reject", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpStatus.setStatus('current')
staPtNtpClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("clkc", 3), ("clkd", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpClkSel.setStatus('current')
staPtNtpClka = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 5), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpClka.setStatus('current')
staPtNtpClkb = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 6), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpClkb.setStatus('current')
staPtNtpClkc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 7), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpClkc.setStatus('current')
staPtNtpClkd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 8), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpClkd.setStatus('current')
staPtNtpRednt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpRednt.setStatus('current')
staPtNtpModState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("stdby", 2), ("fault", 3), ("stdalone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpModState.setStatus('current')
staPtNtpPAState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("stdby", 2), ("fault", 3), ("stdalone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpPAState.setStatus('current')
staPtNtpPBState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("stdby", 2), ("fault", 3), ("stdalone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpPBState.setStatus('current')
staPtNtpTod = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 13), OnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpTod.setStatus('current')
staPtNtpCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 15, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("done", 1), ("prog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtNtpCommit.setStatus('current')
setCmId = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCmId.setStatus('current')
setCmInfo = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCmInfo.setStatus('current')
setCmVer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCmVer.setStatus('current')
setCmName = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCmName.setStatus('current')
setClkTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: setClkTable.setStatus('current')
setCkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "setCkChassis"), (0, "SSU2000-MIB", "setCkSlot"))
if mibBuilder.loadTexts: setCkEntry.setStatus('current')
setCkChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setCkChassis.setStatus('current')
setCkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setCkSlot.setStatus('current')
setCkWarmup = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(900, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkWarmup.setStatus('current')
setCkMinTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkMinTau.setStatus('current')
setCkMaxTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkMaxTau.setStatus('current')
setCkPLLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("acq", 2), ("lock", 3), ("hold", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkPLLMode.setStatus('current')
setCkTodTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkTodTimeout.setStatus('current')
setCkFreqTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCkFreqTimeout.setStatus('current')
setGpsTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1), )
if mibBuilder.loadTexts: setGpsTable.setStatus('current')
setGpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "setGpsChassis"), (0, "SSU2000-MIB", "setGpsSlot"))
if mibBuilder.loadTexts: setGpsEntry.setStatus('current')
setGpsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setGpsChassis.setStatus('current')
setGpsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setGpsSlot.setStatus('current')
setGpsEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("na", 1), ("unknown", 2), ("mot", 3), ("nvs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setGpsEngine.setStatus('current')
setGpsProvPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsProvPql.setStatus('current')
setGpsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsPriority.setStatus('current')
setGpsPdop = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsPdop.setStatus('current')
setGpsPosel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsPosel.setStatus('current')
setGpsTimel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsTimel.setStatus('current')
setGpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsAvg.setStatus('current')
setGpsLat = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 10), TLatAndLon()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsLat.setStatus('current')
setGpsLon = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 11), TLatAndLon()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsLon.setStatus('current')
setGpsHgt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 12), TAntHeight()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsHgt.setStatus('current')
setGpsZeroPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroPhA", 1), ("zeroPhB", 2), ("zeroPhAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsZeroPhase.setStatus('current')
setGpsTodsrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsTodsrcPriority.setStatus('current')
setGpsTodsrcCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGpsTodsrcCompensation.setStatus('current')
setGnssConsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gps", 1), ("glonass", 2), ("gpsGlonass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setGnssConsMode.setStatus('current')
setAlmThGpsInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: setAlmThGpsInpTable.setStatus('current')
setMgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setMgChassis"), (0, "SSU2000-MIB", "setMgSlot"))
if mibBuilder.loadTexts: setMgEntry.setStatus('current')
setMgChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setMgChassis.setStatus('current')
setMgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setMgSlot.setStatus('current')
setMgMtieStd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("prs", 1), ("ds1", 2), ("g811", 3), ("g823", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtieStd.setStatus('current')
setMgMtie10EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10EL1.setStatus('current')
setMgMtie10EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10EL2.setStatus('current')
setMgMtie10CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10CL1.setStatus('current')
setMgMtie10CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10CL2.setStatus('current')
setMgMtie100EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100EL1.setStatus('current')
setMgMtie100EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100EL2.setStatus('current')
setMgMtie100CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100CL1.setStatus('current')
setMgMtie100CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100CL2.setStatus('current')
setMgMtie1000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie1000EL1.setStatus('current')
setMgMtie1000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie1000EL2.setStatus('current')
setMgMtie1000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie1000CL1.setStatus('current')
setMgMtie1000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie1000CL2.setStatus('current')
setMgMtie10000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10000EL1.setStatus('current')
setMgMtie10000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10000EL2.setStatus('current')
setMgMtie10000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10000CL1.setStatus('current')
setMgMtie10000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie10000CL2.setStatus('current')
setMgMtie100000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100000EL1.setStatus('current')
setMgMtie100000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100000EL2.setStatus('current')
setMgMtie100000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100000CL1.setStatus('current')
setMgMtie100000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgMtie100000CL2.setStatus('current')
setMgFreqAErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqAErrLmt.setStatus('current')
setMgFreqAClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqAClrLmt.setStatus('current')
setMgFreqATau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqATau.setStatus('current')
setMgFreqBErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqBErrLmt.setStatus('current')
setMgFreqBClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqBClrLmt.setStatus('current')
setMgFreqBTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMgFreqBTau.setStatus('current')
setDs1E1InpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2), )
if mibBuilder.loadTexts: setDs1E1InpTable.setStatus('current')
setDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setDiChassis"), (0, "SSU2000-MIB", "setDiSlot"), (0, "SSU2000-MIB", "setDiPort"))
if mibBuilder.loadTexts: setDiEntry.setStatus('current')
setDiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setDiChassis.setStatus('current')
setDiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setDiSlot.setStatus('current')
setDiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setDiPort.setStatus('current')
setDiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiEnable.setStatus('current')
setDiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("ccs", 3), ("cas", 4), ("mhz1", 5), ("khz1544", 6), ("khz2048", 7), ("mhz5", 8), ("mhz10", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiFrame.setStatus('current')
setDiZS = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 6), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiZS.setStatus('current')
setDiCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 7), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiCRC.setStatus('current')
setDiSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 8), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiSSM.setStatus('current')
setDiProvPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiProvPql.setStatus('current')
setDiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiPriority.setStatus('current')
setDiGain = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 11), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiGain.setStatus('current')
setDiCSFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("low", 2), ("high", 3), ("na", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiCSFlt.setStatus('current')
setDiE1SsmBit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiE1SsmBit.setStatus('current')
setDiZeroPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroPhA", 1), ("zeroPhB", 2), ("zeroPhAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiZeroPhase.setStatus('current')
setDiMtieCalc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hz40", 1), ("hz1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDiMtieCalc.setStatus('current')
setAlmThDs1E1InpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4), )
if mibBuilder.loadTexts: setAlmThDs1E1InpTable.setStatus('current')
setMiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "setMiChassis"), (0, "SSU2000-MIB", "setMiSlot"), (0, "SSU2000-MIB", "setMiPort"))
if mibBuilder.loadTexts: setMiEntry.setStatus('current')
setMiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setMiChassis.setStatus('current')
setMiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setMiSlot.setStatus('current')
setMiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setMiPort.setStatus('current')
setMiMtieStd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("prs", 1), ("ds1", 2), ("g811", 3), ("g823", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtieStd.setStatus('current')
setMiMtie10EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10EL1.setStatus('current')
setMiMtie10EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10EL2.setStatus('current')
setMiMtie10CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10CL1.setStatus('current')
setMiMtie10CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10CL2.setStatus('current')
setMiMtie100EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100EL1.setStatus('current')
setMiMtie100EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100EL2.setStatus('current')
setMiMtie100CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100CL1.setStatus('current')
setMiMtie100CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100CL2.setStatus('current')
setMiMtie1000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie1000EL1.setStatus('current')
setMiMtie1000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie1000EL2.setStatus('current')
setMiMtie1000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie1000CL1.setStatus('current')
setMiMtie1000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie1000CL2.setStatus('current')
setMiMtie10000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10000EL1.setStatus('current')
setMiMtie10000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10000EL2.setStatus('current')
setMiMtie10000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10000CL1.setStatus('current')
setMiMtie10000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie10000CL2.setStatus('current')
setMiMtie100000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100000EL1.setStatus('current')
setMiMtie100000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100000EL2.setStatus('current')
setMiMtie100000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100000CL1.setStatus('current')
setMiMtie100000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiMtie100000CL2.setStatus('current')
setMiFreqAErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqAErrLmt.setStatus('current')
setMiFreqAClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqAClrLmt.setStatus('current')
setMiFreqATau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqATau.setStatus('current')
setMiFreqBErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqBErrLmt.setStatus('current')
setMiFreqBClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqBClrLmt.setStatus('current')
setMiFreqBTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiFreqBTau.setStatus('current')
setMiLOSErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiLOSErrCnt.setStatus('current')
setMiLOSClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiLOSClrCnt.setStatus('current')
setMiAISErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiAISErrCnt.setStatus('current')
setMiAISClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiAISClrCnt.setStatus('current')
setMiOOFErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiOOFErrCnt.setStatus('current')
setMiOOFClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiOOFClrCnt.setStatus('current')
setMiBPVErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiBPVErrCnt.setStatus('current')
setMiBPVClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiBPVClrCnt.setStatus('current')
setMiCRCErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiCRCErrCnt.setStatus('current')
setMiCRCClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 7, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMiCRCClrCnt.setStatus('current')
setCcInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2), )
if mibBuilder.loadTexts: setCcInpTable.setStatus('current')
setCiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setCiChassis"), (0, "SSU2000-MIB", "setCiSlot"), (0, "SSU2000-MIB", "setCiPort"))
if mibBuilder.loadTexts: setCiEntry.setStatus('current')
setCiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setCiChassis.setStatus('current')
setCiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setCiSlot.setStatus('current')
setCiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setCiPort.setStatus('current')
setCiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCiEnable.setStatus('current')
setCiProvPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCiProvPql.setStatus('current')
setCiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCiPriority.setStatus('current')
setCiZeroPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroPhA", 1), ("zeroPhB", 2), ("zeroPhAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCiZeroPhase.setStatus('current')
setAlmThCcInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4), )
if mibBuilder.loadTexts: setAlmThCcInpTable.setStatus('current')
setCimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "setCimChassis"), (0, "SSU2000-MIB", "setCimSlot"), (0, "SSU2000-MIB", "setCimPort"))
if mibBuilder.loadTexts: setCimEntry.setStatus('current')
setCimChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setCimChassis.setStatus('current')
setCimSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setCimSlot.setStatus('current')
setCimPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setCimPort.setStatus('current')
setCimLOSErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCimLOSErrCnt.setStatus('current')
setCimLOSClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCimLOSClrCnt.setStatus('current')
setCimBPVErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCimBPVErrCnt.setStatus('current')
setCimBPVClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 8, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCimBPVClrCnt.setStatus('current')
setSineInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2), )
if mibBuilder.loadTexts: setSineInpTable.setStatus('current')
setSineiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setSineiChassis"), (0, "SSU2000-MIB", "setSineiSlot"), (0, "SSU2000-MIB", "setSineiPort"))
if mibBuilder.loadTexts: setSineiEntry.setStatus('current')
setSineiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setSineiChassis.setStatus('current')
setSineiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setSineiSlot.setStatus('current')
setSineiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setSineiPort.setStatus('current')
setSineiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiEnable.setStatus('current')
setSineiFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1544, 1544), ValueRangeConstraint(6312, 6312), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiFrequency.setStatus('current')
setSineiProvPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiProvPql.setStatus('current')
setSineiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiPriority.setStatus('current')
setSineiCSFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("low", 2), ("high", 3), ("na", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiCSFlt.setStatus('current')
setSineiZeroPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroPhA", 1), ("zeroPhB", 2), ("zeroPhAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineiZeroPhase.setStatus('current')
setAlmThSineInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4), )
if mibBuilder.loadTexts: setAlmThSineInpTable.setStatus('current')
setMsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "setMsiChassis"), (0, "SSU2000-MIB", "setMsiSlot"), (0, "SSU2000-MIB", "setMsiPort"))
if mibBuilder.loadTexts: setMsiEntry.setStatus('current')
setMsiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setMsiChassis.setStatus('current')
setMsiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setMsiSlot.setStatus('current')
setMsiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setMsiPort.setStatus('current')
setMsiMtieStd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("prs", 1), ("ds1", 2), ("g811", 3), ("g823", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtieStd.setStatus('current')
setMsiMtie10EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10EL1.setStatus('current')
setMsiMtie10EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10EL2.setStatus('current')
setMsiMtie10CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10CL1.setStatus('current')
setMsiMtie10CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10CL2.setStatus('current')
setMsiMtie100EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100EL1.setStatus('current')
setMsiMtie100EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100EL2.setStatus('current')
setMsiMtie100CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100CL1.setStatus('current')
setMsiMtie100CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100CL2.setStatus('current')
setMsiMtie1000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie1000EL1.setStatus('current')
setMsiMtie1000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie1000EL2.setStatus('current')
setMsiMtie1000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie1000CL1.setStatus('current')
setMsiMtie1000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie1000CL2.setStatus('current')
setMsiMtie10000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10000EL1.setStatus('current')
setMsiMtie10000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10000EL2.setStatus('current')
setMsiMtie10000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10000CL1.setStatus('current')
setMsiMtie10000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie10000CL2.setStatus('current')
setMsiMtie100000EL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100000EL1.setStatus('current')
setMsiMtie100000EL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100000EL2.setStatus('current')
setMsiMtie100000CL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100000CL1.setStatus('current')
setMsiMtie100000CL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiMtie100000CL2.setStatus('current')
setMsiFreqAErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqAErrLmt.setStatus('current')
setMsiFreqAClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqAClrLmt.setStatus('current')
setMsiFreqATau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqATau.setStatus('current')
setMsiFreqBErrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqBErrLmt.setStatus('current')
setMsiFreqBClrLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqBClrLmt.setStatus('current')
setMsiFreqBTau = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 18, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setMsiFreqBTau.setStatus('current')
setJccInpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2), )
if mibBuilder.loadTexts: setJccInpTable.setStatus('current')
setJcciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setJcciChassis"), (0, "SSU2000-MIB", "setJcciSlot"), (0, "SSU2000-MIB", "setJcciPort"))
if mibBuilder.loadTexts: setJcciEntry.setStatus('current')
setJcciChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: setJcciChassis.setStatus('current')
setJcciSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setJcciSlot.setStatus('current')
setJcciPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setJcciPort.setStatus('current')
setJcciEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcciEnable.setStatus('current')
setJcciProvPql = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcciProvPql.setStatus('current')
setJcciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcciPriority.setStatus('current')
setJcci400Hz = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 7), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcci400Hz.setStatus('current')
setJcciZeroPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroPhA", 1), ("zeroPhB", 2), ("zeroPhAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcciZeroPhase.setStatus('current')
setDsTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2), )
if mibBuilder.loadTexts: setDsTable.setStatus('current')
setDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setDsChassis"), (0, "SSU2000-MIB", "setDsSlot"))
if mibBuilder.loadTexts: setDsEntry.setStatus('current')
setDsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setDsChassis.setStatus('current')
setDsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setDsSlot.setStatus('current')
setDsFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDsFrame.setStatus('current')
setDsBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDsBypass.setStatus('current')
setDsZs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 5), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDsZs.setStatus('current')
setDsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDsEnable.setStatus('current')
setDsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 10, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDsLength.setStatus('current')
setE1Table = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2), )
if mibBuilder.loadTexts: setE1Table.setStatus('current')
setE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setE1Chassis"), (0, "SSU2000-MIB", "setE1Slot"))
if mibBuilder.loadTexts: setE1Entry.setStatus('current')
setE1Chassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setE1Chassis.setStatus('current')
setE1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setE1Slot.setStatus('current')
setE1Frame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccs", 1), ("cas", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1Frame.setStatus('current')
setE1Bypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1Bypass.setStatus('current')
setE1Zs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 5), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1Zs.setStatus('current')
setE1Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 6), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1Crc.setStatus('current')
setE1SsmBit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1SsmBit.setStatus('current')
setE1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 11, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE1Enable.setStatus('current')
setCoTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2), )
if mibBuilder.loadTexts: setCoTable.setStatus('current')
setCoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setCoChassis"), (0, "SSU2000-MIB", "setCoSlot"))
if mibBuilder.loadTexts: setCoEntry.setStatus('current')
setCoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setCoChassis.setStatus('current')
setCoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setCoSlot.setStatus('current')
setCoBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCoBypass.setStatus('current')
setCoFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCoFltMode.setStatus('current')
setCoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCoEnable.setStatus('current')
setCoSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 12, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCoSquelch.setStatus('current')
setCcTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2), )
if mibBuilder.loadTexts: setCcTable.setStatus('current')
setCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setCcChassis"), (0, "SSU2000-MIB", "setCcSlot"))
if mibBuilder.loadTexts: setCcEntry.setStatus('current')
setCcChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setCcChassis.setStatus('current')
setCcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setCcSlot.setStatus('current')
setCcBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCcBypass.setStatus('current')
setCcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCcEnable.setStatus('current')
setCcDuty = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCcDuty.setStatus('current')
setCcComp = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 13, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCcComp.setStatus('current')
set422oTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2), )
if mibBuilder.loadTexts: set422oTable.setStatus('current')
set422oEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "set422oChassis"), (0, "SSU2000-MIB", "set422oSlot"))
if mibBuilder.loadTexts: set422oEntry.setStatus('current')
set422oChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: set422oChassis.setStatus('current')
set422oSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: set422oSlot.setStatus('current')
set422oBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: set422oBypass.setStatus('current')
set422oFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: set422oFltMode.setStatus('current')
set422oEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: set422oEnable.setStatus('current')
set422oFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 14, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: set422oFrequency.setStatus('current')
setE12048oTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2), )
if mibBuilder.loadTexts: setE12048oTable.setStatus('current')
setE12048oEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setE12048oChassis"), (0, "SSU2000-MIB", "setE12048oSlot"))
if mibBuilder.loadTexts: setE12048oEntry.setStatus('current')
setE12048oChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setE12048oChassis.setStatus('current')
setE12048oSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setE12048oSlot.setStatus('current')
setE12048oBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oBypass.setStatus('current')
setE12048oZs = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oZs.setStatus('current')
setE12048oSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oSignal.setStatus('current')
setE12048oEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oEnable.setStatus('current')
setE12048oSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oSquelch.setStatus('current')
setE12048oFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccs", 1), ("cas", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oFrame.setStatus('current')
setE12048oCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 9), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oCrc.setStatus('current')
setE12048oSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 10), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oSsm.setStatus('current')
setE12048oSsmBit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setE12048oSsmBit.setStatus('current')
setLrmPTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2), )
if mibBuilder.loadTexts: setLrmPTable.setStatus('current')
setLrmPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setLrmPChassis"), (0, "SSU2000-MIB", "setLrmPSlot"), (0, "SSU2000-MIB", "setLrmPPort"))
if mibBuilder.loadTexts: setLrmPEntry.setStatus('current')
setLrmPChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setLrmPChassis.setStatus('current')
setLrmPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setLrmPSlot.setStatus('current')
setLrmPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: setLrmPPort.setStatus('current')
setLrmPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPEnable.setStatus('current')
setLrmPLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo133ft", 1), ("lbo266ft", 2), ("lbo399ft", 3), ("lbo533ft", 4), ("lbo655ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPLbo.setStatus('current')
setLrmPSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPSlip.setStatus('current')
setLrmPBpv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clr", 1), ("nop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPBpv.setStatus('current')
setLrmPFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("squelch", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPFlt.setStatus('current')
setLrmPCid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 16, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrmPCid.setStatus('current')
setLrme1PTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2), )
if mibBuilder.loadTexts: setLrme1PTable.setStatus('current')
setLrme1PEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setLrme1PChassis"), (0, "SSU2000-MIB", "setLrme1PSlot"), (0, "SSU2000-MIB", "setLrme1PPort"))
if mibBuilder.loadTexts: setLrme1PEntry.setStatus('current')
setLrme1PChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setLrme1PChassis.setStatus('current')
setLrme1PSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setLrme1PSlot.setStatus('current')
setLrme1PPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: setLrme1PPort.setStatus('current')
setLrme1PEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrme1PEnable.setStatus('current')
setLrme1PSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrme1PSlip.setStatus('current')
setLrme1PBpv = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clr", 1), ("nop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrme1PBpv.setStatus('current')
setLrme1PFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("squelch", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrme1PFlt.setStatus('current')
setLrme1PCid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 21, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLrme1PCid.setStatus('current')
setSineoTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2), )
if mibBuilder.loadTexts: setSineoTable.setStatus('current')
setSineoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setSineoChassis"), (0, "SSU2000-MIB", "setSineoSlot"))
if mibBuilder.loadTexts: setSineoEntry.setStatus('current')
setSineoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setSineoChassis.setStatus('current')
setSineoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setSineoSlot.setStatus('current')
setSineoBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineoBypass.setStatus('current')
setSineoFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1544, 1544), ValueRangeConstraint(6312, 6312), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineoFrequency.setStatus('current')
setSineoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineoEnable.setStatus('current')
setSineoSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 17, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSineoSquelch.setStatus('current')
setJccoTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2), )
if mibBuilder.loadTexts: setJccoTable.setStatus('current')
setJccoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setJccoChassis"), (0, "SSU2000-MIB", "setJccoSlot"))
if mibBuilder.loadTexts: setJccoEntry.setStatus('current')
setJccoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setJccoChassis.setStatus('current')
setJccoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setJccoSlot.setStatus('current')
setJccoBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJccoBypass.setStatus('current')
setJcco400Hz = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 4), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJcco400Hz.setStatus('current')
setJccoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJccoEnable.setStatus('current')
setJccoComp = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 19, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setJccoComp.setStatus('current')
setPtNtpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1), )
if mibBuilder.loadTexts: setPtNtpTable.setStatus('current')
setPtNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpChassis"), (0, "SSU2000-MIB", "setPtNtpSlot"))
if mibBuilder.loadTexts: setPtNtpEntry.setStatus('current')
setPtNtpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpChassis.setStatus('current')
setPtNtpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpSlot.setStatus('current')
setPtNtpCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpCommit.setStatus('current')
setPtNtpProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpProbe.setStatus('current')
setPtNtpBond = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 5), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpBond.setStatus('current')
setPtNtpNTPd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 6), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpNTPd.setStatus('current')
setPtNtpTodsrcPrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("todsrc", 1), ("peer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpTodsrcPrefer.setStatus('current')
setPtNtpTodsrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpTodsrcPriority.setStatus('current')
setPtNtpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpWeight.setStatus('current')
setPtNtpCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpCompensation.setStatus('current')
setPtNtpPeerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerTimeout.setStatus('current')
setPtNtpPeerPrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerPrefer.setStatus('current')
setPtNtpBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 13), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpBypass.setStatus('current')
setPtNtpModActive = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 14), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpModActive.setStatus('current')
setPtNtpPAActive = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 15), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPAActive.setStatus('current')
setPtNtpPBActive = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 1, 1, 16), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPBActive.setStatus('current')
setPtNtpPortTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2), )
if mibBuilder.loadTexts: setPtNtpPortTable.setStatus('current')
setPtNtpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpPortChassis"), (0, "SSU2000-MIB", "setPtNtpPortSlot"), (0, "SSU2000-MIB", "setPtNtpPortNum"))
if mibBuilder.loadTexts: setPtNtpPortEntry.setStatus('current')
setPtNtpPortChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpPortChassis.setStatus('current')
setPtNtpPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpPortSlot.setStatus('current')
setPtNtpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: setPtNtpPortNum.setStatus('current')
setPtNtpPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPortAddr.setStatus('current')
setPtNtpPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPortMask.setStatus('current')
setPtNtpPortGate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPortGate.setStatus('current')
setPtNtpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3), )
if mibBuilder.loadTexts: setPtNtpPeerTable.setStatus('current')
setPtNtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpPeerChassis"), (0, "SSU2000-MIB", "setPtNtpPeerSlot"), (0, "SSU2000-MIB", "setPtNtpPeerNum"))
if mibBuilder.loadTexts: setPtNtpPeerEntry.setStatus('current')
setPtNtpPeerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpPeerChassis.setStatus('current')
setPtNtpPeerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpPeerSlot.setStatus('current')
setPtNtpPeerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: setPtNtpPeerNum.setStatus('current')
setPtNtpPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerAddr.setStatus('current')
setPtNtpPeerPmin = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerPmin.setStatus('current')
setPtNtpPeerPmax = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerPmax.setStatus('current')
setPtNtpPeerKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpPeerKeyId.setStatus('current')
setPtNtpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4), )
if mibBuilder.loadTexts: setPtNtpAuthTable.setStatus('current')
setPtNtpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpAuthChassis"), (0, "SSU2000-MIB", "setPtNtpAuthSlot"), (0, "SSU2000-MIB", "setPtNtpAuthNum"))
if mibBuilder.loadTexts: setPtNtpAuthEntry.setStatus('current')
setPtNtpAuthChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpAuthChassis.setStatus('current')
setPtNtpAuthSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpAuthSlot.setStatus('current')
setPtNtpAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: setPtNtpAuthNum.setStatus('current')
setPtNtpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpAuthKeyId.setStatus('current')
setPtNtpAuthKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 4, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpAuthKeyValue.setStatus('current')
setPtNtpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5), )
if mibBuilder.loadTexts: setPtNtpRouteTable.setStatus('current')
setPtNtpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpRouteChassis"), (0, "SSU2000-MIB", "setPtNtpRouteSlot"), (0, "SSU2000-MIB", "setPtNtpRouteNum"))
if mibBuilder.loadTexts: setPtNtpRouteEntry.setStatus('current')
setPtNtpRouteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpRouteChassis.setStatus('current')
setPtNtpRouteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpRouteSlot.setStatus('current')
setPtNtpRouteNum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: setPtNtpRouteNum.setStatus('current')
setPtNtpRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpRouteAddr.setStatus('current')
setPtNtpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpRouteMask.setStatus('current')
setPtNtpRouteGate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpRouteGate.setStatus('current')
setPtNtpRouteIface = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpRouteIface.setStatus('current')
setPtNtpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6), )
if mibBuilder.loadTexts: setPtNtpVlanTable.setStatus('current')
setPtNtpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtNtpVlanChassis"), (0, "SSU2000-MIB", "setPtNtpVlanSlot"))
if mibBuilder.loadTexts: setPtNtpVlanEntry.setStatus('current')
setPtNtpVlanChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtNtpVlanChassis.setStatus('current')
setPtNtpVlanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtNtpVlanSlot.setStatus('current')
setPtNtpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 3), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlan.setStatus('current')
setPtNtpVlanPAId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanPAId.setStatus('current')
setPtNtpVlanPAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanPAPriority.setStatus('current')
setPtNtpVlanPBId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanPBId.setStatus('current')
setPtNtpVlanPBPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanPBPriority.setStatus('current')
setPtNtpVlanBondId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanBondId.setStatus('current')
setPtNtpVlanBondPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 22, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtNtpVlanBondPriority.setStatus('current')
infoTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1), )
if mibBuilder.loadTexts: infoTable.setStatus('current')
giEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "giChassis"), (0, "SSU2000-MIB", "giSlot"))
if mibBuilder.loadTexts: giEntry.setStatus('current')
giChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: giChassis.setStatus('current')
giSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: giSlot.setStatus('current')
giSystime = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: giSystime.setStatus('current')
giElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 500000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: giElevation.setStatus('current')
giSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("user", 2), ("save", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: giSetup.setStatus('current')
giRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 4, 1, 1, 6), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: giRestart.setStatus('current')
evCount = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evCount.setStatus('current')
evType = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm", 1), ("report", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evType.setStatus('current')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 3), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
evEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "evIndex"))
if mibBuilder.loadTexts: evEntry.setStatus('current')
evIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: evIndex.setStatus('current')
evT = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 116))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evT.setStatus('current')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
almEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "almChassis"), (0, "SSU2000-MIB", "almSlot"), (0, "SSU2000-MIB", "almPort"), (0, "SSU2000-MIB", "almIndex"))
if mibBuilder.loadTexts: almEntry.setStatus('current')
almChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: almChassis.setStatus('current')
almSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: almSlot.setStatus('current')
almPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: almPort.setStatus('current')
almIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: almIndex.setStatus('current')
almId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almId.setStatus('current')
almName = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almName.setStatus('current')
almLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3), ("ignore", 4), ("report", 5), ("clear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almLevel.setStatus('current')
almElevate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 8), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: almElevate.setStatus('current')
almStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almStatus.setStatus('current')
setAlmLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAlmLoc.setStatus('current')
setAlmTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3), )
if mibBuilder.loadTexts: setAlmTable.setStatus('current')
salEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "salChassis"), (0, "SSU2000-MIB", "salSlot"), (0, "SSU2000-MIB", "salPort"), (0, "SSU2000-MIB", "salIndex"))
if mibBuilder.loadTexts: salEntry.setStatus('current')
salChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: salChassis.setStatus('current')
salSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: salSlot.setStatus('current')
salPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: salPort.setStatus('current')
salIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: salIndex.setStatus('current')
salId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salId.setStatus('current')
salName = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salName.setStatus('current')
salSet = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 7), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salSet.setStatus('current')
salElevate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 8), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salElevate.setStatus('current')
salLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3), ("ignore", 4), ("report", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salLevel.setStatus('current')
salDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salDelay.setStatus('current')
refClk = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refClk.setStatus('current')
refInp = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refInp.setStatus('current')
refBypass = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refBypass.setStatus('current')
refClkSwitch = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ar", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refClkSwitch.setStatus('current')
refInpSwitch = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ar", 1), ("as", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refInpSwitch.setStatus('current')
refInpSelection = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("pql", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refInpSelection.setStatus('current')
refClkTodsrc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refClkTodsrc.setStatus('current')
phaseTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1), )
if mibBuilder.loadTexts: phaseTable.setStatus('current')
phEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "phChassis"), (0, "SSU2000-MIB", "phSlot"), (0, "SSU2000-MIB", "phPort"))
if mibBuilder.loadTexts: phEntry.setStatus('current')
phChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: phChassis.setStatus('current')
phSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: phSlot.setStatus('current')
phPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: phPort.setStatus('current')
phA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phA.setStatus('current')
phB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phB.setStatus('current')
ph100A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph100A.setStatus('current')
ph100B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph100B.setStatus('current')
ph1000A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph1000A.setStatus('current')
ph1000B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph1000B.setStatus('current')
ph10000A = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph10000A.setStatus('current')
ph10000B = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ph10000B.setStatus('current')
phHisInpLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phHisInpLoc.setStatus('current')
phHisTimeAvg = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 1000, 10000))).clone(namedValues=NamedValues(("t100", 100), ("t1000", 1000), ("t10000", 10000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phHisTimeAvg.setStatus('current')
phHisClk = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phHisClk.setStatus('current')
phHisCnt = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phHisCnt.setStatus('current')
phHisTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6), )
if mibBuilder.loadTexts: phHisTable.setStatus('current')
phHisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1), ).setIndexNames((0, "SSU2000-MIB", "phHisChassis"), (0, "SSU2000-MIB", "phHisSlot"), (0, "SSU2000-MIB", "phHisPort"), (0, "SSU2000-MIB", "phHisIndex"))
if mibBuilder.loadTexts: phHisEntry.setStatus('current')
phHisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: phHisChassis.setStatus('current')
phHisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: phHisSlot.setStatus('current')
phHisPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: phHisPort.setStatus('current')
phHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7000)))
if mibBuilder.loadTexts: phHisIndex.setStatus('current')
phHisV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 8, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phHisV.setStatus('current')
mtInpLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtInpLoc.setStatus('current')
mtFrTime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtFrTime.setStatus('current')
mtToTime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtToTime.setStatus('current')
mtTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5), )
if mibBuilder.loadTexts: mtTable.setStatus('current')
mtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "mtChassis"), (0, "SSU2000-MIB", "mtSlot"), (0, "SSU2000-MIB", "mtPort"))
if mibBuilder.loadTexts: mtEntry.setStatus('current')
mtChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mtChassis.setStatus('current')
mtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mtSlot.setStatus('current')
mtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: mtPort.setStatus('current')
mtA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(76, 76)).setFixedLength(76)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtA.setStatus('current')
mtB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(76, 76)).setFixedLength(76)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtB.setStatus('current')
mtHisInpLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtHisInpLoc.setStatus('current')
mtHisClk = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtHisClk.setStatus('current')
mtHisCnt = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtHisCnt.setStatus('current')
mtHisTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9), )
if mibBuilder.loadTexts: mtHisTable.setStatus('current')
mtHisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1), ).setIndexNames((0, "SSU2000-MIB", "mtHisChassis"), (0, "SSU2000-MIB", "mtHisSlot"), (0, "SSU2000-MIB", "mtHisPort"), (0, "SSU2000-MIB", "mtHisIndex"))
if mibBuilder.loadTexts: mtHisEntry.setStatus('current')
mtHisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mtHisChassis.setStatus('current')
mtHisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mtHisSlot.setStatus('current')
mtHisPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: mtHisPort.setStatus('current')
mtHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mtHisIndex.setStatus('current')
mtHisV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 30, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(76, 76)).setFixedLength(76)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtHisV.setStatus('current')
tdInpLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdInpLoc.setStatus('current')
tdFrTime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdFrTime.setStatus('current')
tdToTime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdToTime.setStatus('current')
tdTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5), )
if mibBuilder.loadTexts: tdTable.setStatus('current')
tdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "tdChassis"), (0, "SSU2000-MIB", "tdSlot"), (0, "SSU2000-MIB", "tdPort"))
if mibBuilder.loadTexts: tdEntry.setStatus('current')
tdChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: tdChassis.setStatus('current')
tdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: tdSlot.setStatus('current')
tdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tdPort.setStatus('current')
tdA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(124, 124)).setFixedLength(124)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdA.setStatus('current')
tdB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(124, 124)).setFixedLength(124)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdB.setStatus('current')
tdHisInpLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdHisInpLoc.setStatus('current')
tdHisClk = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdHisClk.setStatus('current')
tdHisCnt = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdHisCnt.setStatus('current')
tdHisTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9), )
if mibBuilder.loadTexts: tdHisTable.setStatus('current')
tdHisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1), ).setIndexNames((0, "SSU2000-MIB", "tdHisChassis"), (0, "SSU2000-MIB", "tdHisSlot"), (0, "SSU2000-MIB", "tdHisPort"), (0, "SSU2000-MIB", "tdHisIndex"))
if mibBuilder.loadTexts: tdHisEntry.setStatus('current')
tdHisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: tdHisChassis.setStatus('current')
tdHisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: tdHisSlot.setStatus('current')
tdHisPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tdHisPort.setStatus('current')
tdHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tdHisIndex.setStatus('current')
tdHisV = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 31, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(124, 124)).setFixedLength(124)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdHisV.setStatus('current')
freqTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1), )
if mibBuilder.loadTexts: freqTable.setStatus('current')
fqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "fqChassis"), (0, "SSU2000-MIB", "fqSlot"), (0, "SSU2000-MIB", "fqPort"))
if mibBuilder.loadTexts: fqEntry.setStatus('current')
fqChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: fqChassis.setStatus('current')
fqSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: fqSlot.setStatus('current')
fqPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: fqPort.setStatus('current')
fqA = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fqA.setStatus('current')
fqB = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fqB.setStatus('current')
ntpMode = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("server", 1), ("client", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpMode.setStatus('current')
ntpSysPeer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysPeer.setStatus('current')
ntpSysPeerOffset = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSysPeerOffset.setStatus('current')
peerStaTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4), )
if mibBuilder.loadTexts: peerStaTable.setStatus('current')
peerStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "peerStaIndex"))
if mibBuilder.loadTexts: peerStaEntry.setStatus('current')
peerStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: peerStaIndex.setStatus('current')
peerStaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaAddress.setStatus('current')
peerStaHomeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unspect", 0), ("active", 1), ("passive", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("control", 6), ("private", 7), ("bclient", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaHomeMode.setStatus('current')
peerStaParentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unspect", 0), ("active", 1), ("passive", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("control", 6), ("private", 7), ("bclient", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaParentMode.setStatus('current')
peerStaLeap = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("nowarning", 0), ("addsec", 1), ("delsec", 2), ("notinsync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaLeap.setStatus('current')
peerStaStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaStratum.setStatus('current')
peerStaPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaPrecision.setStatus('current')
peerStaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaDelay.setStatus('current')
peerStaDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaDispersion.setStatus('current')
peerStaOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaOffset.setStatus('current')
peerStaSentCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaSentCnt.setStatus('current')
peerStaProcessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaProcessCnt.setStatus('current')
peerStaSanity = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 4, 1, 13), YesValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerStaSanity.setStatus('current')
ntpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5), )
if mibBuilder.loadTexts: ntpTable.setStatus('current')
ntpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "ntpIndex"))
if mibBuilder.loadTexts: ntpEntry.setStatus('current')
ntpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: ntpIndex.setStatus('current')
ntpPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPeer.setStatus('current')
ntpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("broadcast", 2), ("bclient", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPeerType.setStatus('current')
ntpBrdTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32, 64, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("notuse", 0), ("t32", 32), ("t64", 64), ("t128", 128), ("t256", 256), ("t512", 512), ("t1024", 1024)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpBrdTimer.setStatus('current')
ntpAddClient = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAddClient.setStatus('current')
ntpAddBrd = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAddBrd.setStatus('current')
ntpAddBclient = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAddBclient.setStatus('current')
ntpDelPeer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpDelPeer.setStatus('current')
ntpClr = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClr.setStatus('current')
ntpBTimer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("t32", 32), ("t64", 64), ("t128", 128), ("t256", 256), ("t512", 512), ("t1024", 1024)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBTimer.setStatus('current')
ntpPrefer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gps", 1), ("client", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrefer.setStatus('current')
tmCurTime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 11, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmCurTime.setStatus('current')
tmLocalOffset = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 11, 2), TLocalTimeOffset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmLocalOffset.setStatus('current')
pqlDs1Table = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 1), )
if mibBuilder.loadTexts: pqlDs1Table.setStatus('current')
pqlDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "pqlDs1Index"))
if mibBuilder.loadTexts: pqlDs1Entry.setStatus('current')
pqlDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pqlDs1Index.setStatus('current')
pqlDs1Ssm = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 1, 1, 2), TSsm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pqlDs1Ssm.setStatus('current')
pqlDs1Descr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pqlDs1Descr.setStatus('current')
pqlE1Table = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 2), )
if mibBuilder.loadTexts: pqlE1Table.setStatus('current')
pqlE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "pqlE1Index"))
if mibBuilder.loadTexts: pqlE1Entry.setStatus('current')
pqlE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pqlE1Index.setStatus('current')
pqlE1Ssm = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 2, 1, 2), TSsm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pqlE1Ssm.setStatus('current')
pqlE1Descr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pqlE1Descr.setStatus('current')
pqlReset = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("factory", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pqlReset.setStatus('current')
ionameTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1), )
if mibBuilder.loadTexts: ionameTable.setStatus('current')
ionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "ionChassis"), (0, "SSU2000-MIB", "ionSlot"), (0, "SSU2000-MIB", "ionPort"))
if mibBuilder.loadTexts: ionEntry.setStatus('current')
ionChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ionChassis.setStatus('current')
ionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ionSlot.setStatus('current')
ionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ionPort.setStatus('current')
ionName = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ionName.setStatus('current')
ionameLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ionameLoc.setStatus('current')
ionameSet = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ionameSet.setStatus('current')
com232Table = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1), )
if mibBuilder.loadTexts: com232Table.setStatus('current')
comEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "comIndex"))
if mibBuilder.loadTexts: comEntry.setStatus('current')
comIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: comIndex.setStatus('current')
comMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ics", 1), ("tl1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comMode.setStatus('current')
comEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1, 3), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comEcho.setStatus('current')
comEol = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cr", 1), ("lf", 2), ("crlf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comEol.setStatus('current')
comBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("baud1200", 1200), ("baud2400", 2400), ("baud4800", 4800), ("baud9600", 9600), ("baud19200", 19200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comBaud.setStatus('current')
comParmTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 2), )
if mibBuilder.loadTexts: comParmTable.setStatus('current')
comParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "comParmIndex"))
if mibBuilder.loadTexts: comParmEntry.setStatus('current')
comParmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: comParmIndex.setStatus('current')
comType = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("coma", 2), ("comb", 3), ("telnet", 4), ("etl1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comType.setStatus('current')
comTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 43200), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comTimeout.setStatus('current')
comLogoff = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("local", 1), ("coma", 2), ("comb", 3), ("telneta", 4), ("telnetb", 5), ("telnetc", 6), ("telnetd", 7), ("etl1a", 8), ("etl1b", 9), ("etl1c", 10), ("etl1d", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comLogoff.setStatus('current')
snmpv2manTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 1), )
if mibBuilder.loadTexts: snmpv2manTable.setStatus('current')
snmpv2manEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "snmpv2manIndex"))
if mibBuilder.loadTexts: snmpv2manEntry.setStatus('current')
snmpv2manIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: snmpv2manIndex.setStatus('current')
snmpv2manIp = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv2manIp.setStatus('current')
snmpmanInit = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initv2", 1), ("initv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpmanInit.setStatus('current')
snmpmanTrap = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpmanTrap.setStatus('current')
snmpNotification = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNotification.setStatus('current')
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2enable", 1), ("v2disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpv2userTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 6), )
if mibBuilder.loadTexts: snmpv2userTable.setStatus('current')
snmpv2userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 6, 1), ).setIndexNames((0, "SSU2000-MIB", "snmpv2userIndex"))
if mibBuilder.loadTexts: snmpv2userEntry.setStatus('current')
snmpv2userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: snmpv2userIndex.setStatus('current')
snmpv2user = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv2user.setStatus('current')
snmpv3userTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 7), )
if mibBuilder.loadTexts: snmpv3userTable.setStatus('current')
snmpv3userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 7, 1), ).setIndexNames((0, "SSU2000-MIB", "snmpv3userIndex"))
if mibBuilder.loadTexts: snmpv3userEntry.setStatus('current')
snmpv3userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: snmpv3userIndex.setStatus('current')
snmpv3user = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3user.setStatus('current')
snmpv3manTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 8), )
if mibBuilder.loadTexts: snmpv3manTable.setStatus('current')
snmpv3manEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 8, 1), ).setIndexNames((0, "SSU2000-MIB", "snmpv3manIndex"))
if mibBuilder.loadTexts: snmpv3manEntry.setStatus('current')
snmpv3manIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: snmpv3manIndex.setStatus('current')
snmpv3manIp = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3manIp.setStatus('current')
snmpv3manUser = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 15, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3manUser.setStatus('current')
sysPbo = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("event", 1), ("report", 2), ("none", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPbo.setStatus('current')
sysResetClk = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResetClk.setStatus('current')
sysKeepAliveTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 3), )
if mibBuilder.loadTexts: sysKeepAliveTable.setStatus('current')
sysAliveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "sysAliveIndex"))
if mibBuilder.loadTexts: sysAliveEntry.setStatus('current')
sysAliveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sysAliveIndex.setStatus('current')
sysAliveType = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tl1", 1), ("snmp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAliveType.setStatus('current')
sysAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAliveTime.setStatus('current')
sysOpmode = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("subtending", 2), ("japanese", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysOpmode.setStatus('current')
sysTl1Format = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gr831", 1), ("gr833", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTl1Format.setStatus('current')
sysEvtLogin = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogin.setStatus('current')
sysAco = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAco.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17, 1), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
userlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userlevel.setStatus('current')
username = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: username.setStatus('current')
whoTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18, 1), )
if mibBuilder.loadTexts: whoTable.setStatus('current')
whoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "whoIndex"))
if mibBuilder.loadTexts: whoEntry.setStatus('current')
whoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: whoIndex.setStatus('current')
whoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("local", 1), ("coma", 2), ("comb", 3), ("telneta", 4), ("telnetb", 5), ("telnetc", 6), ("telnetd", 7), ("etl1a", 8), ("etl1b", 9), ("etl1c", 10), ("etl1d", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoPort.setStatus('current')
whoName = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 18, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoName.setStatus('current')
ntpqXeq = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpqXeq.setStatus('current')
ntpqSyspeer = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqSyspeer.setStatus('current')
ntpqSysleap = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqSysleap.setStatus('current')
ntpqSysstratum = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqSysstratum.setStatus('current')
ntpqSysprecision = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqSysprecision.setStatus('current')
ntpqRootdelay = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqRootdelay.setStatus('current')
ntpqRootdispersion = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqRootdispersion.setStatus('current')
ntpqSysoffset = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqSysoffset.setStatus('current')
ntpqReftime = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqReftime.setStatus('current')
ntpqTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3), )
if mibBuilder.loadTexts: ntpqTable.setStatus('current')
ntpqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "ntpqChassis"), (0, "SSU2000-MIB", "ntpqSlot"), (0, "SSU2000-MIB", "ntpqIndex"))
if mibBuilder.loadTexts: ntpqEntry.setStatus('current')
ntpqChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: ntpqChassis.setStatus('current')
ntpqSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ntpqSlot.setStatus('current')
ntpqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: ntpqIndex.setStatus('current')
ntpqValid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 4), ValidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqValid.setStatus('current')
ntpqPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqPeer.setStatus('current')
ntpqRefid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqRefid.setStatus('current')
ntpqStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqStratum.setStatus('current')
ntpqPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqPoll.setStatus('current')
ntpqReach = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqReach.setStatus('current')
ntpqDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqDelay.setStatus('current')
ntpqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqOffset.setStatus('current')
ntpqJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 19, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpqJitter.setStatus('current')
rtXeq = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtXeq.setStatus('current')
routeTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3), )
if mibBuilder.loadTexts: routeTable.setStatus('current')
rtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "rtChassis"), (0, "SSU2000-MIB", "rtSlot"), (0, "SSU2000-MIB", "rtIndex"))
if mibBuilder.loadTexts: rtEntry.setStatus('current')
rtChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: rtChassis.setStatus('current')
rtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: rtSlot.setStatus('current')
rtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: rtIndex.setStatus('current')
rtValid = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 4), ValidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtValid.setStatus('current')
rtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDest.setStatus('current')
rtGate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGate.setStatus('current')
rtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMask.setStatus('current')
rtFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtFlags.setStatus('current')
rtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMetric.setStatus('current')
rtRef = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtRef.setStatus('current')
rtUse = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtUse.setStatus('current')
rtIface = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 20, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIface.setStatus('current')
tprTag = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 50, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tprTag.setStatus('current')
tpTag = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTag.setStatus('current')
tpEvt = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autonomous", 1), ("resend", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpEvt.setStatus('current')
tpId = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpId.setStatus('current')
tpMCode = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 4), TModuleCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMCode.setStatus('current')
tpTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTimestamp.setStatus('current')
tpChassis = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpChassis.setStatus('current')
tpSlot = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSlot.setStatus('current')
tpPort = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPort.setStatus('current')
tpAlmCode = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3), ("ignore", 4), ("report", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpAlmCode.setStatus('current')
tpNtfCode = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3), ("report", 5), ("clear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNtfCode.setStatus('current')
tpElevated = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpElevated.setStatus('current')
tpDescr = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 51, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpDescr.setStatus('current')
ssuTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 52, 0))
if mibBuilder.loadTexts: ssuTraps.setStatus('current')
ssuEvent = NotificationType((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 52, 0, 1)).setObjects(("SSU2000-MIB", "tpTag"), ("SSU2000-MIB", "tpEvt"), ("SSU2000-MIB", "tpId"), ("SSU2000-MIB", "tpMCode"), ("SSU2000-MIB", "tpTimestamp"), ("SSU2000-MIB", "tpChassis"), ("SSU2000-MIB", "tpSlot"), ("SSU2000-MIB", "tpPort"), ("SSU2000-MIB", "tpAlmCode"), ("SSU2000-MIB", "tpNtfCode"), ("SSU2000-MIB", "tpElevated"), ("SSU2000-MIB", "tpDescr"))
if mibBuilder.loadTexts: ssuEvent.setStatus('current')
sifNtpNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifNtpNumber.setStatus('current')
sifSnmpv2Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifSnmpv2Number.setStatus('current')
sifSnmpv3Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifSnmpv3Number.setStatus('current')
sifClkNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifClkNumber.setStatus('current')
sifGpsNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifGpsNumber.setStatus('current')
sifInpDs1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifInpDs1Number.setStatus('current')
sifInpE1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifInpE1Number.setStatus('current')
sifInpCcNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifInpCcNumber.setStatus('current')
sifOutDs1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutDs1Number.setStatus('current')
sifOutE1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutE1Number.setStatus('current')
sifOut2048Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOut2048Number.setStatus('current')
sifOutCcNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutCcNumber.setStatus('current')
sifOutE12048Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutE12048Number.setStatus('current')
sifOut422Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOut422Number.setStatus('current')
sifLrmDs1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifLrmDs1Number.setStatus('current')
sifOutJsineNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutJsineNumber.setStatus('current')
sifInpJsineNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifInpJsineNumber.setStatus('current')
sifOutJccNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifOutJccNumber.setStatus('current')
sifInpJccNumber = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifInpJccNumber.setStatus('current')
sifLrmE1Number = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 60, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifLrmE1Number.setStatus('current')
staPtPtpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1), )
if mibBuilder.loadTexts: staPtPtpTable.setStatus('current')
staPtPtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "staPtPtpChassis"), (0, "SSU2000-MIB", "staPtPtpSlot"))
if mibBuilder.loadTexts: staPtPtpEntry.setStatus('current')
staPtPtpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staPtPtpChassis.setStatus('current')
staPtPtpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staPtPtpSlot.setStatus('current')
staPtPtpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("disable", 3), ("fault", 4), ("reject", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpStatus.setStatus('current')
staPtPtpClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clka", 1), ("clkb", 2), ("clkc", 3), ("clkd", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpClkSel.setStatus('current')
staPtPtpClka = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 5), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpClka.setStatus('current')
staPtPtpClkb = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 6), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpClkb.setStatus('current')
staPtPtpClkc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 7), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpClkc.setStatus('current')
staPtPtpClkd = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 8), ActiveValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpClkd.setStatus('current')
staPtPtpRednt = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpRednt.setStatus('current')
staPtPtpModState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("stdby", 2), ("fault", 3), ("stdalone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpModState.setStatus('current')
staPtPtpPAState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("stdby", 2), ("fault", 3), ("stdalone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpPAState.setStatus('current')
staPtPtpTod = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 12), OnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpTod.setStatus('current')
staPtPtpCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("done", 1), ("prog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPtPtpCommit.setStatus('current')
ptpDfltDataSetTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2), )
if mibBuilder.loadTexts: ptpDfltDataSetTable.setStatus('current')
ptpDfltDataSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "ptpDfltDataSetChassis"), (0, "SSU2000-MIB", "ptpDfltDataSetSlot"))
if mibBuilder.loadTexts: ptpDfltDataSetEntry.setStatus('current')
ptpDfltDataSetChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ptpDfltDataSetChassis.setStatus('current')
ptpDfltDataSetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ptpDfltDataSetSlot.setStatus('current')
ptpDfltDataSetClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetClockId.setStatus('current')
ptpDfltDataSetClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetClockClass.setStatus('current')
ptpDfltDataSetClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("within25ns", 32), ("within100ns", 33), ("within250ns", 34), ("within1000ns", 35), ("within2p5us", 36), ("within10us", 37), ("within25us", 38), ("within100us", 39), ("within250us", 40), ("within1ms", 41), ("within2p5ms", 42), ("within10ms", 43), ("within25ms", 44), ("within100ms", 45), ("within250ms", 46), ("within1sec", 47), ("within10sec", 48), ("beyond10sec", 49), ("unknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetClockAccuracy.setStatus('current')
ptpDfltDataSetTimeTraceable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 6), TrueValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetTimeTraceable.setStatus('current')
ptpDfltDataSetFreqTraceable = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 7), TrueValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetFreqTraceable.setStatus('current')
ptpDfltDataSetDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpDfltDataSetDomainNumber.setStatus('current')
ptpClockDescrTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3), )
if mibBuilder.loadTexts: ptpClockDescrTable.setStatus('current')
ptpClockDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "ptpClockDescrChassis"), (0, "SSU2000-MIB", "ptpClockDescrSlot"))
if mibBuilder.loadTexts: ptpClockDescrEntry.setStatus('current')
ptpClockDescrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ptpClockDescrChassis.setStatus('current')
ptpClockDescrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ptpClockDescrSlot.setStatus('current')
ptpClockDescrClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32768))).clone(namedValues=NamedValues(("ordinary", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpClockDescrClockType.setStatus('current')
ptpClockDescrProtocolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpClockDescrProtocolAddress.setStatus('current')
ptpClockDescrManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpClockDescrManufacturerId.setStatus('current')
ptpClockDescrProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpClockDescrProfileId.setStatus('current')
ptpTimeMessageTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4), )
if mibBuilder.loadTexts: ptpTimeMessageTable.setStatus('current')
ptpTimeMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4, 1), ).setIndexNames((0, "SSU2000-MIB", "ptpTimeMessageChassis"), (0, "SSU2000-MIB", "ptpTimeMessageSlot"))
if mibBuilder.loadTexts: ptpTimeMessageEntry.setStatus('current')
ptpTimeMessageChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ptpTimeMessageChassis.setStatus('current')
ptpTimeMessageSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ptpTimeMessageSlot.setStatus('current')
ptpTimeMessageCurrentTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimeMessageCurrentTimeSec.setStatus('current')
ptpTimeMessageCurrentTimeNSec = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimeMessageCurrentTimeNSec.setStatus('current')
ptpPortDataSetTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5), )
if mibBuilder.loadTexts: ptpPortDataSetTable.setStatus('current')
ptpPortDataSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1), ).setIndexNames((0, "SSU2000-MIB", "ptpPortDataSetChassis"), (0, "SSU2000-MIB", "ptpPortDataSetSlot"))
if mibBuilder.loadTexts: ptpPortDataSetEntry.setStatus('current')
ptpPortDataSetChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ptpPortDataSetChassis.setStatus('current')
ptpPortDataSetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ptpPortDataSetSlot.setStatus('current')
ptpPortDataSetClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortDataSetClockId.setStatus('current')
ptpPortDataSetPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortDataSetPortNumber.setStatus('current')
ptpPortDataSetPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 16, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notdefined", 0), ("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("premaster", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortDataSetPortState.setStatus('current')
setPtPtpTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1), )
if mibBuilder.loadTexts: setPtPtpTable.setStatus('current')
setPtPtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtPtpChassis"), (0, "SSU2000-MIB", "setPtPtpSlot"))
if mibBuilder.loadTexts: setPtPtpEntry.setStatus('current')
setPtPtpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtPtpChassis.setStatus('current')
setPtPtpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtPtpSlot.setStatus('current')
setPtPtpCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpCommit.setStatus('current')
setPtPtpService = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpService.setStatus('current')
setPtPtpClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpClockId.setStatus('current')
setPtPtpDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpDomain.setStatus('current')
setPtPtpTimescale = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptp", 1), ("arb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpTimescale.setStatus('current')
setPtPtpSyncLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpSyncLimit.setStatus('current')
setPtPtpAnnounceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpAnnounceLimit.setStatus('current')
setPtPtpDelayLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpDelayLimit.setStatus('current')
setPtPtpDscpState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 11), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpDscpState.setStatus('current')
setPtPtpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpDscpValue.setStatus('current')
setPtPtpMaxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpMaxClient.setStatus('current')
setPtPtpPortPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpPortPriority1.setStatus('current')
setPtPtpPortPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpPortPriority2.setStatus('current')
setPtPtpUniLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpUniLeaseDuration.setStatus('current')
setPtPtpUniNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 17), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpUniNegotiation.setStatus('current')
setPtPtpTwostep = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 18), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpTwostep.setStatus('current')
setPtPtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("telecom2008", 1), ("ituG8265dot1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpProfile.setStatus('current')
setPtPtpSsmOption = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("option1", 1), ("option2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpSsmOption.setStatus('current')
setPtPtpBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 30), OnValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpBypass.setStatus('current')
setPtPtpModActive = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 31), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpModActive.setStatus('current')
setPtPtpEthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("r100", 1), ("r1000", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpEthRate.setStatus('current')
setPtPtpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 33), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpVlan.setStatus('current')
setPtPtpRmvClient = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtPtpRmvClient.setStatus('current')
setPtpPortTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2), )
if mibBuilder.loadTexts: setPtpPortTable.setStatus('current')
setPtpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtpPortChassis"), (0, "SSU2000-MIB", "setPtpPortSlot"), (0, "SSU2000-MIB", "setPtpPortNum"))
if mibBuilder.loadTexts: setPtpPortEntry.setStatus('current')
setPtpPortChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtpPortChassis.setStatus('current')
setPtpPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtpPortSlot.setStatus('current')
setPtpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: setPtpPortNum.setStatus('current')
setPtpPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpPortAddr.setStatus('current')
setPtpPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpPortMask.setStatus('current')
setPtpPortGate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpPortGate.setStatus('current')
setPtpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3), )
if mibBuilder.loadTexts: setPtpVlanTable.setStatus('current')
setPtpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1), ).setIndexNames((0, "SSU2000-MIB", "setPtpVlanChassis"), (0, "SSU2000-MIB", "setPtpVlanSlot"), (0, "SSU2000-MIB", "setPtpVlanIndex"))
if mibBuilder.loadTexts: setPtpVlanEntry.setStatus('current')
setPtpVlanChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setPtpVlanChassis.setStatus('current')
setPtpVlanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setPtpVlanSlot.setStatus('current')
setPtpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: setPtpVlanIndex.setStatus('current')
setPtpVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanState.setStatus('current')
setPtpVlanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanAddr.setStatus('current')
setPtpVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanMask.setStatus('current')
setPtpVlanGate = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanGate.setStatus('current')
setPtpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanId.setStatus('current')
setPtpVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 23, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPtpVlanPriority.setStatus('current')
ptpclientTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 1), )
if mibBuilder.loadTexts: ptpclientTable.setStatus('current')
ptpclientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "ptpclientChassis"), (0, "SSU2000-MIB", "ptpclientSlot"))
if mibBuilder.loadTexts: ptpclientEntry.setStatus('current')
ptpclientChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: ptpclientChassis.setStatus('current')
ptpclientSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ptpclientSlot.setStatus('current')
ptpclientData = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpclientData.setStatus('current')
ptpclientParmLoc = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpclientParmLoc.setStatus('current')
ptpclientCmdXeq = MibScalar((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 36, 3), YesValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpclientCmdXeq.setStatus('current')
staSynceTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: staSynceTable.setStatus('current')
staSynceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "staSynceChassis"), (0, "SSU2000-MIB", "staSynceSlot"))
if mibBuilder.loadTexts: staSynceEntry.setStatus('current')
staSynceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: staSynceChassis.setStatus('current')
staSynceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: staSynceSlot.setStatus('current')
staSyncePortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSyncePortDirection.setStatus('current')
staSynceEthernetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("asynchronous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSynceEthernetMode.setStatus('current')
staSynceRxSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSynceRxSsm.setStatus('current')
staSynceTxSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 2, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSynceTxSsm.setStatus('current')
setSynceTable = MibTable((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1), )
if mibBuilder.loadTexts: setSynceTable.setStatus('current')
setSynceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1), ).setIndexNames((0, "SSU2000-MIB", "setSynceChassis"), (0, "SSU2000-MIB", "setSynceSlot"))
if mibBuilder.loadTexts: setSynceEntry.setStatus('current')
setSynceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: setSynceChassis.setStatus('current')
setSynceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: setSynceSlot.setStatus('current')
setSyncePortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyncePortDirection.setStatus('current')
setSynceEsmc = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 4), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSynceEsmc.setStatus('current')
setSynceQl = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 5), EnaValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSynceQl.setStatus('current')
setSynceOutQl = MibTableColumn((1, 3, 6, 1, 4, 1, 601, 3, 1, 1, 3, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirectional", 1), ("unidirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSynceOutQl.setStatus('current')
mibBuilder.exportSymbols("SSU2000-MIB", setPtNtpNTPd=setPtNtpNTPd, snmpEnable=snmpEnable, setJcciZeroPhase=setJcciZeroPhase, whoTable=whoTable, setPtPtpTimescale=setPtPtpTimescale, setPtNtpRouteEntry=setPtNtpRouteEntry, sysKeepAliveTable=sysKeepAliveTable, setPtpVlanAddr=setPtpVlanAddr, almElevate=almElevate, setSineoBypass=setSineoBypass, inService=inService, snmpv2manTable=snmpv2manTable, ntpMode=ntpMode, setPtPtpDscpValue=setPtPtpDscpValue, staSynceChassis=staSynceChassis, ValidValue=ValidValue, setMiCRCErrCnt=setMiCRCErrCnt, staLrmPStatus=staLrmPStatus, sifOutCcNumber=sifOutCcNumber, setCmId=setCmId, sifOutE1Number=sifOutE1Number, staOtClkd=staOtClkd, ptpTimeMessageCurrentTimeSec=ptpTimeMessageCurrentTimeSec, setMiMtie10CL2=setMiMtie10CL2, salChassis=salChassis, sifInpJccNumber=sifInpJccNumber, rtGate=rtGate, tdToTime=tdToTime, setPtpVlanGate=setPtpVlanGate, almChassis=almChassis, ntpSysPeer=ntpSysPeer, peerStaDispersion=peerStaDispersion, statusCom=statusCom, stGpsPosPdop=stGpsPosPdop, snmpv2userIndex=snmpv2userIndex, staCkStatus=staCkStatus, setGpsAvg=setGpsAvg, setMiBPVErrCnt=setMiBPVErrCnt, setE12048oEnable=setE12048oEnable, giSlot=giSlot, setPtPtpSyncLimit=setPtPtpSyncLimit, ntpqSysleap=ntpqSysleap, ptpclientChassis=ptpclientChassis, snmpv3user=snmpv3user, rtFlags=rtFlags, OnValue=OnValue, snmpv3manIp=snmpv3manIp, staGpsEntry=staGpsEntry, set422oEntry=set422oEntry, staDiMtie1B=staDiMtie1B, infoTable=infoTable, staDs1E1InpTable=staDs1E1InpTable, staPtNtpModState=staPtNtpModState, stGpsTkEntry=stGpsTkEntry, sifOutJccNumber=sifOutJccNumber, ionName=ionName, staDiMtie2A=staDiMtie2A, setPtNtpAuthNum=setPtNtpAuthNum, setDsZs=setDsZs, setMsiMtie100EL2=setMsiMtie100EL2, setPtNtpVlanPBPriority=setPtNtpVlanPBPriority, fqB=fqB, setPtpVlanTable=setPtpVlanTable, staGpsChassis=staGpsChassis, staOutTable=staOutTable, setSineiEntry=setSineiEntry, stGpsTkChnl=stGpsTkChnl, setSineiPort=setSineiPort, ptpClockDescrChassis=ptpClockDescrChassis, mtTable=mtTable, staLrmPBpv24HRate=staLrmPBpv24HRate, staPtPtpClka=staPtPtpClka, staCiPort=staCiPort, setCoSlot=setCoSlot, ptpPortDataSetClockId=ptpPortDataSetClockId, ionameSet=ionameSet, staCiLOS=staCiLOS, almSlot=almSlot, peerStaSentCnt=peerStaSentCnt, ntpIndex=ntpIndex, setMsiMtie100000CL2=setMsiMtie100000CL2, staDiStatus=staDiStatus, tdTable=tdTable, pqlDs1Ssm=pqlDs1Ssm, staCkChassis=staCkChassis, staLrmPBpv60SRate=staLrmPBpv60SRate, inFeature=inFeature, setMsiMtie1000CL1=setMsiMtie1000CL1, setCkEntry=setCkEntry, phSlot=phSlot, staDiFreqA=staDiFreqA, snmpv3manTable=snmpv3manTable, setLrmPBpv=setLrmPBpv, staJcciChassis=staJcciChassis, staLrmPAis=staLrmPAis, setMgMtie100CL2=setMgMtie100CL2, rtValid=rtValid, ntpqXeq=ntpqXeq, setMsiMtie10000EL2=setMsiMtie10000EL2, setJccoEntry=setJccoEntry, staLrmMCtaId=staLrmMCtaId, phHisCnt=phHisCnt, setCcEnable=setCcEnable, inFeatureTable=inFeatureTable, mstatus=mstatus, mtA=mtA, setPtPtpPortPriority2=setPtPtpPortPriority2, setPtPtpUniNegotiation=setPtPtpUniNegotiation, setMiMtie1000EL2=setMiMtie1000EL2, peerStaSanity=peerStaSanity, staLrme1PBpv24HRate=staLrme1PBpv24HRate, tpMCode=tpMCode, setMiChassis=setMiChassis, TAntHeight=TAntHeight, setupSineOut=setupSineOut, setPtNtpModActive=setPtNtpModActive, pqlReset=pqlReset, ntpqTable=ntpqTable, ptpclientTable=ptpclientTable, peerStaHomeMode=peerStaHomeMode, stGpsPosHgt=stGpsPosHgt, staOtPql=staOtPql, setGpsPosel=setGpsPosel, staSyncePortDirection=staSyncePortDirection, setupLrm=setupLrm, setMgMtie100EL1=setMgMtie100EL1, tpId=tpId, staCiBPVClCnt=staCiBPVClCnt, setMiFreqAErrLmt=setMiFreqAErrLmt, setMiAISErrCnt=setMiAISErrCnt, tdPort=tdPort, setMgMtie10EL1=setMgMtie10EL1, setMiMtie10CL1=setMiMtie10CL1, mtSlot=mtSlot, setLrmPEntry=setLrmPEntry, snmpmanTrap=snmpmanTrap, setCkMinTau=setCkMinTau, setMgMtie10CL2=setMgMtie10CL2, setMgFreqATau=setMgFreqATau, giChassis=giChassis, tpTimestamp=tpTimestamp, staLrme1PLosSide2=staLrme1PLosSide2, setPtNtpPBActive=setPtNtpPBActive, setMsiMtie100EL1=setMsiMtie100EL1, ntpqRootdelay=ntpqRootdelay, setLrmPCid=setLrmPCid, ssuTraps=ssuTraps, setMiMtie100000CL1=setMiMtie100000CL1, staPtPtpEntry=staPtPtpEntry, salElevate=salElevate, stGpsTkStatus=stGpsTkStatus, staLrme1MChassis=staLrme1MChassis, almEntry=almEntry, peerStaAddress=peerStaAddress, ph100B=ph100B, staGps3Sigma=staGps3Sigma, phEntry=phEntry, fqSlot=fqSlot, ptpclientEntry=ptpclientEntry, setCkTodTimeout=setCkTodTimeout, setClkTable=setClkTable, rtIface=rtIface, sysAco=sysAco, staLrme1PSlips=staLrme1PSlips, set422oFltMode=set422oFltMode, setAlmThCcInpTable=setAlmThCcInpTable, almName=almName, snmpman=snmpman, staCiBPV=staCiBPV, almStatus=almStatus, setMgMtie10000CL1=setMgMtie10000CL1, mtHisPort=mtHisPort, ptpClockDescrClockType=ptpClockDescrClockType, ptpPortDataSetPortState=ptpPortDataSetPortState, rtXeq=rtXeq, setMiOOFErrCnt=setMiOOFErrCnt, setPtpVlanSlot=setPtpVlanSlot, setPtpVlanMask=setPtpVlanMask, setE1Frame=setE1Frame, tpEvt=tpEvt, tdHisCnt=tdHisCnt, sys=sys, staLrmMRefSrc=staLrmMRefSrc, staLrmPBpv=staLrmPBpv, staPtPtpStatus=staPtPtpStatus, staSineiPort=staSineiPort, setE12048oChassis=setE12048oChassis, ntpqSyspeer=ntpqSyspeer, staLrmPChassis=staLrmPChassis, phA=phA, ph1000A=ph1000A, rtUse=rtUse, mtB=mtB, ionameTable=ionameTable, refClkTodsrc=refClkTodsrc, staSynceTxSsm=staSynceTxSsm, peerStaProcessCnt=peerStaProcessCnt, ptpClockDescrManufacturerId=ptpClockDescrManufacturerId, phase=phase, staJcciPhaseB=staJcciPhaseB, setJcci400Hz=setJcci400Hz, setMsiMtie100000CL1=setMsiMtie100000CL1, setPtNtpRouteMask=setPtNtpRouteMask, setSynceQl=setSynceQl, staClkTable=staClkTable, staSineiEntry=staSineiEntry, tdHisClk=tdHisClk, setSynceOutQl=setSynceOutQl, staOOFClCnt=staOOFClCnt, staPtNtpClkc=staPtNtpClkc, staLrmMStatus=staLrmMStatus, TSsm=TSsm, setMgFreqBErrLmt=setMgFreqBErrLmt, username=username, ntpqOffset=ntpqOffset, setGpsSlot=setGpsSlot, EnaValue=EnaValue, setLrme1PFlt=setLrme1PFlt, stGpsAvChassis=stGpsAvChassis, stGpsTkSlot=stGpsTkSlot, ptpClockDescrSlot=ptpClockDescrSlot, setE12048oEntry=setE12048oEntry, staOtRednt=staOtRednt, staSineiChassis=staSineiChassis, setPtPtpDelayLimit=setPtPtpDelayLimit, staSynceEntry=staSynceEntry, setJcciSlot=setJcciSlot, snmpv2user=snmpv2user, giElevation=giElevation, setSineoSlot=setSineoSlot, ntpqSysstratum=ntpqSysstratum, tmLocalOffset=tmLocalOffset, stGpsTkSv=stGpsTkSv, setPtpPortAddr=setPtpPortAddr, tpNtfCode=tpNtfCode, setMgMtie100CL1=setMgMtie100CL1, setE12048oTable=setE12048oTable, peerStaPrecision=peerStaPrecision, setMiFreqBErrLmt=setMiFreqBErrLmt, ptpDfltDataSetEntry=ptpDfltDataSetEntry, PYSNMP_MODULE_ID=ssu2000, ionSlot=ionSlot, stGpsPosValid=stGpsPosValid, setJcciEntry=setJcciEntry, setMsiMtie10EL2=setMsiMtie10EL2, setMgEntry=setMgEntry, setDiCSFlt=setDiCSFlt, setMsiMtie1000CL2=setMsiMtie1000CL2, setPtNtpVlanBondId=setPtNtpVlanBondId, sysOpmode=sysOpmode, snmpv3userTable=snmpv3userTable, staPtNtpClkSel=staPtNtpClkSel, staLrmMEntry=staLrmMEntry, setLrme1PChassis=setLrme1PChassis)
mibBuilder.exportSymbols("SSU2000-MIB", setE12048oSsmBit=setE12048oSsmBit, setupCcInp=setupCcInp, staJccInpTable=staJccInpTable, setMsiMtieStd=setMsiMtieStd, sifLrmE1Number=sifLrmE1Number, staLrme1PLof=staLrme1PLof, setCiEnable=setCiEnable, ptpclientSlot=ptpclientSlot, setPtNtpChassis=setPtNtpChassis, staPtNtpTable=staPtNtpTable, setPtpPortChassis=setPtpPortChassis, staLrmPFrame=staLrmPFrame, setCimSlot=setCimSlot, setSineInpTable=setSineInpTable, DateAndTime=DateAndTime, ssuEvent=ssuEvent, setDiMtieCalc=setDiMtieCalc, staCkEntry=staCkEntry, setLrmPFlt=setLrmPFlt, setupGps=setupGps, alarmTable=alarmTable, staLrmMSlot=staLrmMSlot, setDiPort=setDiPort, setGpsZeroPhase=setGpsZeroPhase, setupDs1E1Inp=setupDs1E1Inp, phHisInpLoc=phHisInpLoc, setGpsPriority=setGpsPriority, setPtPtpSlot=setPtPtpSlot, ref=ref, inAction=inAction, setMiMtie10000EL2=setMiMtie10000EL2, setPtpVlanId=setPtpVlanId, tdFrTime=tdFrTime, statusLrm=statusLrm, staDiMtie2B=staDiMtie2B, setSineiCSFlt=setSineiCSFlt, sifOut2048Number=sifOut2048Number, setLrme1PEnable=setLrme1PEnable, stGpsAvEntry=stGpsAvEntry, snmpv3manIndex=snmpv3manIndex, setCkFreqTimeout=setCkFreqTimeout, inEntry=inEntry, setJcco400Hz=setJcco400Hz, setMiPort=setMiPort, stGpsPosLon=stGpsPosLon, rtRef=rtRef, sifOut422Number=sifOut422Number, setupClk=setupClk, setupJccInp=setupJccInp, comParmTable=comParmTable, setMgMtie100000EL1=setMgMtie100000EL1, inFeatureEntry=inFeatureEntry, staJcciBPV=staJcciBPV, staDiPhaseB=staDiPhaseB, setPtNtpPortAddr=setPtNtpPortAddr, setupPtNtp=setupPtNtp, setGpsTodsrcCompensation=setGpsTodsrcCompensation, tpElevated=tpElevated, staCkPLLMode=staCkPLLMode, stGpsPosAvg=stGpsPosAvg, setDsEntry=setDsEntry, ntpClr=ntpClr, setMgChassis=setMgChassis, setGpsEngine=setGpsEngine, staBPVClCnt=staBPVClCnt, peerStaIndex=peerStaIndex, setJccoBypass=setJccoBypass, staCRCErCnt=staCRCErCnt, stGpsPosAccurate=stGpsPosAccurate, staJcci400Hz=staJcci400Hz, users=users, staLrmPBpvSevErrSecs=staLrmPBpvSevErrSecs, staLrme1PChassis=staLrme1PChassis, setMsiMtie1000EL2=setMsiMtie1000EL2, ionPort=ionPort, setE1Crc=setE1Crc, setE12048oSlot=setE12048oSlot, setPtNtpPortMask=setPtNtpPortMask, staGpsUtc=staGpsUtc, tdHisIndex=tdHisIndex, statusCcInp=statusCcInp, staLrme1MSlot=staLrme1MSlot, sifInpCcNumber=sifInpCcNumber, setSineoEntry=setSineoEntry, staLrme1PPort=staLrme1PPort, inventory=inventory, setupSynce=setupSynce, setMsiMtie10000CL1=setMsiMtie10000CL1, setDiZeroPhase=setDiZeroPhase, setDiProvPql=setDiProvPql, setE1Enable=setE1Enable, salName=salName, staOtClka=staOtClka, stGpsAvHealthy=stGpsAvHealthy, setJcciPort=setJcciPort, salSet=salSet, comEntry=comEntry, setupDs1Out=setupDs1Out, setPtNtpSlot=setPtNtpSlot, staSineiPhaseB=staSineiPhaseB, staLrme1PFrame=staLrme1PFrame, tpSlot=tpSlot, ntpqRootdispersion=ntpqRootdispersion, staLrmPTable=staLrmPTable, setCmName=setCmName, phHisTimeAvg=phHisTimeAvg, phHisChassis=phHisChassis, tpPort=tpPort, pqlE1Ssm=pqlE1Ssm, setGpsProvPql=setGpsProvPql, ntpqSysoffset=ntpqSysoffset, setPtNtpAuthKeyValue=setPtNtpAuthKeyValue, staJcciMStatus=staJcciMStatus, refClkSwitch=refClkSwitch, tdHisTable=tdHisTable, staPtNtpRednt=staPtNtpRednt, tdA=tdA, setSineoSquelch=setSineoSquelch, setPtNtpRouteGate=setPtNtpRouteGate, ptpTimeMessageSlot=ptpTimeMessageSlot, setPtNtpVlanTable=setPtNtpVlanTable, staLrmMTable=staLrmMTable, setMgFreqAErrLmt=setMgFreqAErrLmt, staLOSErCnt=staLOSErCnt, userlevel=userlevel, ptpclientCmdXeq=ptpclientCmdXeq, statusDs1E1Inp=statusDs1E1Inp, setCcSlot=setCcSlot, inShelfPart=inShelfPart, alarm=alarm, setPtNtpAuthChassis=setPtNtpAuthChassis, setPtNtpPeerTable=setPtNtpPeerTable, ptpPortDataSetPortNumber=ptpPortDataSetPortNumber, setPtNtpPeerNum=setPtNtpPeerNum, setE12048oCrc=setE12048oCrc, mtInpLoc=mtInpLoc, staCRCClCnt=staCRCClCnt, setPtNtpPortEntry=setPtNtpPortEntry, statusPtPtp=statusPtPtp, whoPort=whoPort, setMgMtie10000EL2=setMgMtie10000EL2, setLrmPSlip=setLrmPSlip, setMgFreqAClrLmt=setMgFreqAClrLmt, sysResetClk=sysResetClk, setMgFreqBClrLmt=setMgFreqBClrLmt, setPtPtpUniLeaseDuration=setPtPtpUniLeaseDuration, staLrmPLosSide2=staLrmPLosSide2, staLrme1PTable=staLrme1PTable, staCiStatus=staCiStatus, setDiCRC=setDiCRC, peerStaTable=peerStaTable, pqlE1Table=pqlE1Table, staCiPhaseA=staCiPhaseA, setMgMtie1000EL1=setMgMtie1000EL1, setPtNtpVlanEntry=setPtNtpVlanEntry, fqChassis=fqChassis, setCimLOSErrCnt=setCimLOSErrCnt, staDiSlot=staDiSlot, statusOut=statusOut, sifOutDs1Number=sifOutDs1Number, pqlDs1Entry=pqlDs1Entry, setPtpPortEntry=setPtpPortEntry, setPtNtpPAActive=setPtNtpPAActive, staPtNtpTod=staPtNtpTod, staSynceTable=staSynceTable, staLrmPBpvSevErrRatio=staLrmPBpvSevErrRatio, staLrme1PLos=staLrme1PLos, setMsiMtie10000CL2=setMsiMtie10000CL2, setGpsEntry=setGpsEntry, staGpsMtie2B=staGpsMtie2B, setLrme1PTable=setLrme1PTable, giRestart=giRestart, setE12048oSquelch=setE12048oSquelch, inName=inName, setPtpPortGate=setPtpPortGate, setLrme1PCid=setLrme1PCid, comType=comType, phHisIndex=phHisIndex, mtHisTable=mtHisTable, setMiLOSErrCnt=setMiLOSErrCnt, ptpPortDataSetTable=ptpPortDataSetTable, staLrme1PBpvErrSecs=staLrme1PBpvErrSecs, setMgMtie100000CL1=setMgMtie100000CL1, evEntry=evEntry, ntp=ntp, ntpAddBclient=ntpAddBclient, staPtPtpTable=staPtPtpTable, setPtPtpTable=setPtPtpTable, setGpsTimel=setGpsTimel, staGpsPpsSigma=staGpsPpsSigma, staJcciSlot=staJcciSlot, staCiChassis=staCiChassis, setE12048oBypass=setE12048oBypass, setMgMtieStd=setMgMtieStd, mtie=mtie, setPtNtpAuthKeyId=setPtNtpAuthKeyId, salDelay=salDelay, ntpqJitter=ntpqJitter, ptpDfltDataSetTable=ptpDfltDataSetTable, sifSnmpv3Number=sifSnmpv3Number, staLrme1PAis=staLrme1PAis, setGnssConsMode=setGnssConsMode, set422oEnable=set422oEnable, setCcComp=setCcComp, tdEntry=tdEntry, routeTable=routeTable, salSlot=salSlot, setMiMtie10EL2=setMiMtie10EL2, staDiPhaseA=staDiPhaseA, setCimChassis=setCimChassis, mtFrTime=mtFrTime, setLrme1PSlot=setLrme1PSlot, userEntry=userEntry, statusJccInp=statusJccInp, setSineoFrequency=setSineoFrequency, setAlmTable=setAlmTable, inRevision=inRevision, setMiMtie1000CL1=setMiMtie1000CL1, staPtNtpClka=staPtNtpClka, setMiFreqATau=setMiFreqATau, staLrmPSlot=staLrmPSlot, setMiMtie100000EL1=setMiMtie100000EL1, inHwRev=inHwRev, ptpDfltDataSetChassis=ptpDfltDataSetChassis, setMiMtieStd=setMiMtieStd, staDiPqlRcv=staDiPqlRcv, evT=evT, staGpsStatus=staGpsStatus, staCkUtc=staCkUtc, stGpsPosLat=stGpsPosLat, staSineiMtie2A=staSineiMtie2A, staSineiMtie1B=staSineiMtie1B, phHisTable=phHisTable, staCiPhaseB=staCiPhaseB, ptpTimeMessageTable=ptpTimeMessageTable, phHisV=phHisV, setMsiMtie100000EL2=setMsiMtie100000EL2, ptpclient=ptpclient, setPtNtpVlanPAId=setPtNtpVlanPAId, tdSlot=tdSlot, statusGps=statusGps, setMsiFreqAClrLmt=setMsiFreqAClrLmt, setPtNtpCompensation=setPtNtpCompensation, staSynceSlot=staSynceSlot, sysAliveEntry=sysAliveEntry, staSynceEthernetMode=staSynceEthernetMode, setPtPtpTwostep=setPtPtpTwostep, inSlot=inSlot, ntpBTimer=ntpBTimer, setCimBPVClrCnt=setCimBPVClrCnt, setMiMtie10000CL1=setMiMtie10000CL1, inInstalled=inInstalled, setPtNtpTable=setPtNtpTable, mtHisChassis=mtHisChassis)
mibBuilder.exportSymbols("SSU2000-MIB", staLrme1PBpv=staLrme1PBpv, tpDescr=tpDescr, setGpsTable=setGpsTable, setPtNtpAuthTable=setPtNtpAuthTable, setMiMtie100CL2=setMiMtie100CL2, staCkPql=staCkPql, setDiEnable=setDiEnable, setAlmThDs1E1InpTable=setAlmThDs1E1InpTable, sifLrmDs1Number=sifLrmDs1Number, setPtPtpDscpState=setPtPtpDscpState, staDiPql=staDiPql, sysEvtLogin=sysEvtLogin, staGpsFreqB=staGpsFreqB, staPtPtpCommit=staPtPtpCommit, setPtpVlanState=setPtpVlanState, setCoTable=setCoTable, stGpsPosSlot=stGpsPosSlot, staLrmMChassis=staLrmMChassis, snmpv3manEntry=snmpv3manEntry, staSineiLOS=staSineiLOS, setPtNtpPortSlot=setPtNtpPortSlot, staDiAIS=staDiAIS, mtHisInpLoc=mtHisInpLoc, setMsiMtie10EL1=setMsiMtie10EL1, setPtPtpSsmOption=setPtPtpSsmOption, ntpPrefer=ntpPrefer, setPtNtpVlanBondPriority=setPtNtpVlanBondPriority, ntpqSlot=ntpqSlot, setMgMtie100000EL2=setMgMtie100000EL2, setCmInfo=setCmInfo, setMsiMtie10CL2=setMsiMtie10CL2, mtToTime=mtToTime, setMiAISClrCnt=setMiAISClrCnt, stGpsTkChassis=stGpsTkChassis, staLrmPLof=staLrmPLof, setDsEnable=setDsEnable, ptpClockDescrProtocolAddress=ptpClockDescrProtocolAddress, setPtPtpCommit=setPtPtpCommit, setPtNtpVlanChassis=setPtNtpVlanChassis, staDiFreqB=staDiFreqB, stGpsAvChnl=stGpsAvChnl, setPtPtpDomain=setPtPtpDomain, staLrmPEntry=staLrmPEntry, setE1SsmBit=setE1SsmBit, tdInpLoc=tdInpLoc, setPtNtpPeerChassis=setPtNtpPeerChassis, setCcDuty=setCcDuty, ph10000A=ph10000A, sifClkNumber=sifClkNumber, peerStaDelay=peerStaDelay, setDiEntry=setDiEntry, setE1Zs=setE1Zs, staPtNtpPAState=staPtNtpPAState, staPtPtpClkc=staPtPtpClkc, sifSnmpv2Number=sifSnmpv2Number, setMsiMtie100CL2=setMsiMtie100CL2, mtChassis=mtChassis, ptpDfltDataSetDomainNumber=ptpDfltDataSetDomainNumber, staOtClkb=staOtClkb, ptpClockDescrProfileId=ptpClockDescrProfileId, setupLrmE1=setupLrmE1, setPtPtpProfile=setPtPtpProfile, staOtClkSel=staOtClkSel, setMgMtie1000EL2=setMgMtie1000EL2, stGpsAvSlot=stGpsAvSlot, staGpsMtie1B=staGpsMtie1B, stGpsAvailTable=stGpsAvailTable, setMgMtie10CL1=setMgMtie10CL1, evCount=evCount, phPort=phPort, giEntry=giEntry, setMiSlot=setMiSlot, snmpv2manIp=snmpv2manIp, setJccoChassis=setJccoChassis, userTable=userTable, setPtPtpEthRate=setPtPtpEthRate, staLrmPBpvTestTime=staLrmPBpvTestTime, salId=salId, phHisPort=phHisPort, setPtNtpRouteChassis=setPtNtpRouteChassis, snmpv2userTable=snmpv2userTable, setLrmPLbo=setLrmPLbo, ptpTimeMessageEntry=ptpTimeMessageEntry, set422oTable=set422oTable, fqEntry=fqEntry, staSineiPhaseA=staSineiPhaseA, tdHisV=tdHisV, staPtNtpStatus=staPtNtpStatus, pqlE1Entry=pqlE1Entry, phaseTable=phaseTable, sysAliveTime=sysAliveTime, setPtPtpEntry=setPtPtpEntry, staCiMStatus=staCiMStatus, tdHisPort=tdHisPort, almId=almId, sysPbo=sysPbo, staSineiMStatus=staSineiMStatus, snmpmanInit=snmpmanInit, whoName=whoName, setE12048oZs=setE12048oZs, ntpDelPeer=ntpDelPeer, fqPort=fqPort, sysAliveIndex=sysAliveIndex, setPtNtpPeerPmax=setPtNtpPeerPmax, setPtNtpTodsrcPrefer=setPtNtpTodsrcPrefer, setPtpPortSlot=setPtpPortSlot, setMsiFreqBErrLmt=setMsiFreqBErrLmt, setPtPtpPortPriority1=setPtPtpPortPriority1, setLrmPEnable=setLrmPEnable, com232Table=com232Table, setMsiChassis=setMsiChassis, staLrmPBpvErrSecs=staLrmPBpvErrSecs, setSineiEnable=setSineiEnable, setCiPriority=setCiPriority, setDiFrame=setDiFrame, staPtNtpSlot=staPtNtpSlot, tdHisEntry=tdHisEntry, TrueValue=TrueValue, staPtPtpRednt=staPtPtpRednt, setMsiMtie10000EL1=setMsiMtie10000EL1, statusLrmE1=statusLrmE1, setGpsHgt=setGpsHgt, ssu2000=ssu2000, ntpAddClient=ntpAddClient, setMgMtie1000CL2=setMgMtie1000CL2, setGpsLon=setGpsLon, setupCom=setupCom, refInpSelection=refInpSelection, setCoSquelch=setCoSquelch, tpAlmCode=tpAlmCode, staPtPtpSlot=staPtPtpSlot, tdHisChassis=tdHisChassis, setPtNtpTodsrcPriority=setPtNtpTodsrcPriority, setup422Out=setup422Out, ptpDfltDataSetSlot=ptpDfltDataSetSlot, ntpqDelay=ntpqDelay, staDiMStatus=staDiMStatus, setPtNtpRouteAddr=setPtNtpRouteAddr, staLOSClCnt=staLOSClCnt, setGpsTodsrcPriority=setGpsTodsrcPriority, general=general, setSynceEntry=setSynceEntry, setupCCOut=setupCCOut, mtEntry=mtEntry, staLrme1PSlot=staLrme1PSlot, setCkMaxTau=setCkMaxTau, setMiOOFClrCnt=setMiOOFClrCnt, staPtPtpTod=staPtPtpTod, mtHisV=mtHisV, setMgMtie1000CL1=setMgMtie1000CL1, setPtNtpPeerPrefer=setPtNtpPeerPrefer, staPtNtpChassis=staPtNtpChassis, set422oBypass=set422oBypass, peerStaStratum=peerStaStratum, tpChassis=tpChassis, tprTag=tprTag, ptpDfltDataSetClockAccuracy=ptpDfltDataSetClockAccuracy, staGpsPhaseB=staGpsPhaseB, almLevel=almLevel, setSineiChassis=setSineiChassis, setLrme1PPort=setLrme1PPort, staLrme1PEntry=staLrme1PEntry, sysTl1Format=sysTl1Format, rtEntry=rtEntry, sifGpsNumber=sifGpsNumber, sifInpDs1Number=sifInpDs1Number, setupE12048Out=setupE12048Out, setMiMtie1000CL2=setMiMtie1000CL2, ActiveValue=ActiveValue, setMiFreqAClrLmt=setMiFreqAClrLmt, ntpSysPeerOffset=ntpSysPeerOffset, setSineiPriority=setSineiPriority, event=event, ptpclientData=ptpclientData, mtHisIndex=mtHisIndex, staPtPtpClkSel=staPtPtpClkSel, staLrme1PBpvSevErrSecs=staLrme1PBpvSevErrSecs, stGpsPosChassis=stGpsPosChassis, setAlmLoc=setAlmLoc, ptpClockDescrTable=ptpClockDescrTable, setMsiMtie100000EL1=setMsiMtie100000EL1, setPtNtpPeerEntry=setPtNtpPeerEntry, setCiEntry=setCiEntry, setMgFreqBTau=setMgFreqBTau, phB=phB, setGpsLat=setGpsLat, pqlDs1Descr=pqlDs1Descr, ntpqRefid=ntpqRefid, setLrmPSlot=setLrmPSlot, statusPtNtp=statusPtNtp, staSineiSlot=staSineiSlot, setE1Chassis=setE1Chassis, setPtNtpVlanPAPriority=setPtNtpVlanPAPriority, setCcTable=setCcTable, setAlmThGpsInpTable=setAlmThGpsInpTable, setJcciProvPql=setJcciProvPql, staJcciPhaseA=staJcciPhaseA, ptpPortDataSetEntry=ptpPortDataSetEntry, fqA=fqA, staDiMtie1A=staDiMtie1A, setMiLOSClrCnt=setMiLOSClrCnt, snmpv3userEntry=snmpv3userEntry, setPtPtpService=setPtPtpService, staGpsMtie1A=staGpsMtie1A, setMiEntry=setMiEntry, setPtNtpPeerSlot=setPtNtpPeerSlot, setCoEntry=setCoEntry, setE12048oSsm=setE12048oSsm, setCcEntry=setCcEntry, setMsiFreqAErrLmt=setMsiFreqAErrLmt, setDsLength=setDsLength, setPtNtpPeerKeyId=setPtNtpPeerKeyId, setPtNtpVlan=setPtNtpVlan, peerStaOffset=peerStaOffset, stGpsAvAzimuth=stGpsAvAzimuth, pqlDs1Index=pqlDs1Index, ntpqReach=ntpqReach, setPtpVlanPriority=setPtpVlanPriority, staPtNtpClkd=staPtNtpClkd, setMiMtie1000EL1=setMiMtie1000EL1, staSineiStatus=staSineiStatus, setCiZeroPhase=setCiZeroPhase, peerStaEntry=peerStaEntry, comParmIndex=comParmIndex, setSynceSlot=setSynceSlot, ptpPortDataSetSlot=ptpPortDataSetSlot, setCiChassis=setCiChassis, setJccoEnable=setJccoEnable, setPtNtpRouteTable=setPtNtpRouteTable, setPtNtpRouteSlot=setPtNtpRouteSlot, setMgMtie100000CL2=setMgMtie100000CL2, setPtNtpRouteIface=setPtNtpRouteIface, tpTag=tpTag, staLrme1MStatus=staLrme1MStatus, setMgMtie10EL2=setMgMtie10EL2, setMsiSlot=setMsiSlot, giSetup=giSetup, inSwRev=inSwRev, inAdapterPart=inAdapterPart, stGpsTkSnr=stGpsTkSnr, eventTable=eventTable, setPtPtpAnnounceLimit=setPtPtpAnnounceLimit, sifOutE12048Number=sifOutE12048Number, inSerial=inSerial, setMgMtie10000EL1=setMgMtie10000EL1, stGpsPosEntry=stGpsPosEntry, stGpsAvPNCode=stGpsAvPNCode, setPtNtpProbe=setPtNtpProbe, staGpsFreqA=staGpsFreqA, setPtNtpEntry=setPtNtpEntry, freqTable=freqTable, pqlE1Descr=pqlE1Descr, inHwDate=inHwDate, setDsBypass=setDsBypass)
mibBuilder.exportSymbols("SSU2000-MIB", peerStaLeap=peerStaLeap, ntpqChassis=ntpqChassis, sifNtpNumber=sifNtpNumber, staLrme1PSlip=staLrme1PSlip, setPtNtpVlanPBId=setPtNtpVlanPBId, ptpPortDataSetChassis=ptpPortDataSetChassis, setMiMtie100000CL2=setMiMtie100000CL2, comEcho=comEcho, setPtPtpVlan=setPtPtpVlan, mtHisEntry=mtHisEntry, sifInpJsineNumber=sifInpJsineNumber, tmCurTime=tmCurTime, setPtpVlanChassis=setPtpVlanChassis, salIndex=salIndex, mtHisSlot=mtHisSlot, staCiBPVErCnt=staCiBPVErCnt, staCiSlot=staCiSlot, setPtpVlanIndex=setPtpVlanIndex, setup2048Out=setup2048Out, setLrme1PEntry=setLrme1PEntry, setMgMtie10000CL2=setMgMtie10000CL2, setCoChassis=setCoChassis, setSineoEnable=setSineoEnable, setPtNtpRouteNum=setPtNtpRouteNum, ntpq=ntpq, setupJccOut=setupJccOut, ntpEntry=ntpEntry, comParmEntry=comParmEntry, setPtpPortMask=setPtpPortMask, staOtSlot=staOtSlot, comBaud=comBaud, ptpDfltDataSetClockId=ptpDfltDataSetClockId, setE1Bypass=setE1Bypass, pqlTable=pqlTable, pqlDs1Table=pqlDs1Table, staDiCRC=staDiCRC, ptpclientParmLoc=ptpclientParmLoc, setLrmPChassis=setLrmPChassis, staAISErCnt=staAISErCnt, setCoEnable=setCoEnable, ntpAddBrd=ntpAddBrd, staSineiFreqB=staSineiFreqB, setCmVer=setCmVer, staPtPtpClkb=staPtPtpClkb, TModuleCode=TModuleCode, staLrme1MCtaId=staLrme1MCtaId, mtHisCnt=mtHisCnt, setMiMtie100EL2=setMiMtie100EL2, setLrmPPort=setLrmPPort, setE1Table=setE1Table, staDiBPV=staDiBPV, setPtNtpPortTable=setPtNtpPortTable, staSineiPql=staSineiPql, setMsiMtie1000EL1=setMsiMtie1000EL1, ptpDfltDataSetFreqTraceable=ptpDfltDataSetFreqTraceable, setPtNtpAuthEntry=setPtNtpAuthEntry, staLrme1MEntry=staLrme1MEntry, ph1000B=ph1000B, snmpv2manEntry=snmpv2manEntry, staGpsMtie2A=staGpsMtie2A, phChassis=phChassis, setDiChassis=setDiChassis, ntpqPoll=ntpqPoll, ptpDfltDataSetClockClass=ptpDfltDataSetClockClass, setSineiZeroPhase=setSineiZeroPhase, refInp=refInp, staSineiFreqA=staSineiFreqA, ntpqIndex=ntpqIndex, setCoBypass=setCoBypass, salLevel=salLevel, setLrme1PSlip=setLrme1PSlip, setGpsPdop=setGpsPdop, setPtPtpModActive=setPtPtpModActive, setJccoTable=setJccoTable, setSynceChassis=setSynceChassis, setCcChassis=setCcChassis, setCiSlot=setCiSlot, pqlE1Index=pqlE1Index, setMiMtie10000CL2=setMiMtie10000CL2, staCiLOSClCnt=staCiLOSClCnt, setMiMtie100000EL2=setMiMtie100000EL2, setCiProvPql=setCiProvPql, almIndex=almIndex, setJccInpTable=setJccInpTable, snmpv2userEntry=snmpv2userEntry, setupE1Out=setupE1Out, staCkSlot=staCkSlot, setDiPriority=setDiPriority, setDsTable=setDsTable, evType=evType, setLrmPTable=setLrmPTable, ntpqPeer=ntpqPeer, refBypass=refBypass, tdHisInpLoc=tdHisInpLoc, setSynceEsmc=setSynceEsmc, staPtPtpPAState=staPtPtpPAState, setGpsChassis=setGpsChassis, setPtpPortTable=setPtpPortTable, inShelfDesc=inShelfDesc, phHisEntry=phHisEntry, setPtPtpMaxClient=setPtPtpMaxClient, setPtNtpPeerPmin=setPtNtpPeerPmin, inModCode=inModCode, setMiMtie100EL1=setMiMtie100EL1, tdChassis=tdChassis, ptpClockDescrEntry=ptpClockDescrEntry, inFeatureIndex=inFeatureIndex, YesValue=YesValue, staDiChassis=staDiChassis, mTrapReq=mTrapReq, staAISClCnt=staAISClCnt, staPtNtpPBState=staPtNtpPBState, staOtStatus=staOtStatus, setMsiMtie10CL1=setMsiMtie10CL1, setPtNtpCommit=setPtNtpCommit, rtMask=rtMask, setJccoComp=setJccoComp, staDiEntry=staDiEntry, setDiSSM=setDiSSM, staOtChassis=staOtChassis, setCkPLLMode=setCkPLLMode, staBPVErCnt=staBPVErCnt, setPtNtpVlanSlot=setPtNtpVlanSlot, staPtNtpClkb=staPtNtpClkb, set422oSlot=set422oSlot, almPort=almPort, ionEntry=ionEntry, ntpqReftime=ntpqReftime, setCcBypass=setCcBypass, staSynceRxSsm=staSynceRxSsm, set422oFrequency=set422oFrequency, who=who, setSineiFrequency=setSineiFrequency, staPtNtpEntry=staPtNtpEntry, refInpSwitch=refInpSwitch, stGpsAvElevation=stGpsAvElevation, whoEntry=whoEntry, staDiLOS=staDiLOS, setPtNtpBypass=setPtNtpBypass, setupSineInp=setupSineInp, staDiPort=staDiPort, ntpTable=ntpTable, setDsSlot=setDsSlot, staLrme1MRefSrc=staLrme1MRefSrc, setSineoChassis=setSineoChassis, setJccoSlot=setJccoSlot, staLrme1PBpv60SRate=staLrme1PBpv60SRate, comEol=comEol, setCimLOSClrCnt=setCimLOSClrCnt, setPtNtpPeerAddr=setPtNtpPeerAddr, phHisSlot=phHisSlot, setMsiFreqATau=setMsiFreqATau, setSineiSlot=setSineiSlot, staDiOOF=staDiOOF, comIndex=comIndex, setPtPtpRmvClient=setPtPtpRmvClient, staSineiMtie1A=staSineiMtie1A, staCcInpTable=staCcInpTable, staGpsSlot=staGpsSlot, setMsiFreqBClrLmt=setMsiFreqBClrLmt, staJcciPort=staJcciPort, comLogoff=comLogoff, ptpTimeMessageCurrentTimeNSec=ptpTimeMessageCurrentTimeNSec, setPtNtpAuthSlot=setPtNtpAuthSlot, setPtNtpPeerTimeout=setPtNtpPeerTimeout, sInterfaces=sInterfaces, inChassis=inChassis, setSineiProvPql=setSineiProvPql, tdB=tdB, setPtNtpPortNum=setPtNtpPortNum, statusClk=statusClk, staCiLOSErCnt=staCiLOSErCnt, evIndex=evIndex, salEntry=salEntry, setSynceTable=setSynceTable, setCimPort=setCimPort, ph100A=ph100A, setDiZS=setDiZS, setMiFreqBTau=setMiFreqBTau, setAlmThSineInpTable=setAlmThSineInpTable, comTimeout=comTimeout, sifInpE1Number=sifInpE1Number, comm=comm, time=time, setJcciPriority=setJcciPriority, setPtPtpBypass=setPtPtpBypass, staLrme1PBpvSevErrRatio=staLrme1PBpvSevErrRatio, route=route, rtChassis=rtChassis, staSineiMtie2B=staSineiMtie2B, tdHisSlot=tdHisSlot, staPtPtpClkd=staPtPtpClkd, setCimBPVErrCnt=setCimBPVErrCnt, setSyncePortDirection=setSyncePortDirection, ntpqEntry=ntpqEntry, setLrme1PBpv=setLrme1PBpv, sysAliveType=sysAliveType, ntpqSysprecision=ntpqSysprecision, staGpsMStatus=staGpsMStatus, staCiEntry=staCiEntry, staOOFErCnt=staOOFErCnt, rtMetric=rtMetric, set422oChassis=set422oChassis, setE1Entry=setE1Entry, ptpTimeMessageChassis=ptpTimeMessageChassis, staLrmPSlips=staLrmPSlips, setCiPort=setCiPort, staJcciStatus=staJcciStatus, setPtPtpClockId=setPtPtpClockId, setPtNtpPortGate=setPtNtpPortGate, setMiFreqBClrLmt=setMiFreqBClrLmt, msetup=msetup, userIndex=userIndex, snmpv2manIndex=snmpv2manIndex, setCcInpTable=setCcInpTable, setPtPtpChassis=setPtPtpChassis, setDsFrame=setDsFrame, salPort=salPort, setPtNtpWeight=setPtNtpWeight, setCkChassis=setCkChassis, setupPtPtp=setupPtPtp, staJcciEntry=staJcciEntry, comMode=comMode, setDsChassis=setDsChassis, staGpsTable=staGpsTable, setE12048oFrame=setE12048oFrame, snmpv3manUser=snmpv3manUser, setCkSlot=setCkSlot, setDiE1SsmBit=setDiE1SsmBit, ntpqValid=ntpqValid, rtDest=rtDest, staPtPtpModState=staPtPtpModState, inSwPart=inSwPart, setMsiFreqBTau=setMsiFreqBTau, ptpDfltDataSetTimeTraceable=ptpDfltDataSetTimeTraceable, OkValue=OkValue, mtPort=mtPort, setDiGain=setDiGain, ioname=ioname, rtSlot=rtSlot, setE12048oSignal=setE12048oSignal, ionChassis=ionChassis, staLrmPLos=staLrmPLos, setMiCRCClrCnt=setMiCRCClrCnt, staLrme1PStatus=staLrme1PStatus, staPtPtpChassis=staPtPtpChassis, mTraps=mTraps, staLrmPPort=staLrmPPort, staPtNtpCommit=staPtNtpCommit, setMiMtie10EL1=setMiMtie10EL1, giSystime=giSystime, staLrme1MTable=staLrme1MTable, setMgMtie100EL2=setMgMtie100EL2, refClk=refClk)
mibBuilder.exportSymbols("SSU2000-MIB", setCimEntry=setCimEntry, stGpsPosTable=stGpsPosTable, setCoFltMode=setCoFltMode, setPtpVlanEntry=setPtpVlanEntry, mTrapObjs=mTrapObjs, staSineInpTable=staSineInpTable, setMiMtie10000EL1=setMiMtie10000EL1, ntpBrdTimer=ntpBrdTimer, whoIndex=whoIndex, setMiMtie100CL1=setMiMtie100CL1, setPtNtpBond=setPtNtpBond, rtIndex=rtIndex, setPtNtpPortChassis=setPtNtpPortChassis, staOtClkc=staOtClkc, setCkWarmup=setCkWarmup, setJcciChassis=setJcciChassis, tdev=tdev, statusSynce=statusSynce, setMiBPVClrCnt=setMiBPVClrCnt, sifOutJsineNumber=sifOutJsineNumber, setMgSlot=setMgSlot, freq=freq, staOtEntry=staOtEntry, ntpqStratum=ntpqStratum, phHisClk=phHisClk, mtHisClk=mtHisClk, statusSineInp=statusSineInp, staCkTau=staCkTau, inHwPart=inHwPart, setJcciEnable=setJcciEnable, staGpsPhaseA=staGpsPhaseA, peerStaParentMode=peerStaParentMode, ph10000B=ph10000B, setE1Slot=setE1Slot, setDiSlot=setDiSlot, setSineoTable=setSineoTable, TLatAndLon=TLatAndLon, ionameLoc=ionameLoc, ntpPeer=ntpPeer, staLrmPSlip=staLrmPSlip, ntpPeerType=ntpPeerType, setMsiMtie100CL1=setMsiMtie100CL1, staOtPortSta=staOtPortSta, setMsiEntry=setMsiEntry, snmpv3userIndex=snmpv3userIndex, setPtpPortNum=setPtpPortNum, TLocalTimeOffset=TLocalTimeOffset, staJcciLOS=staJcciLOS, inventoryTable=inventoryTable, setMsiPort=setMsiPort, stGpsTrackTable=stGpsTrackTable, setDs1E1InpTable=setDs1E1InpTable, snmpNotification=snmpNotification)
