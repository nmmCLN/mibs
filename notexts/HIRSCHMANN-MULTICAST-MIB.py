#
# PySNMP MIB module HIRSCHMANN-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmPlatform4Mcast.mib
# Produced by pysmi-1.1.8 at Fri Jul  8 08:55:44 2022
# On host fv-az42-349 platform Linux version 5.13.0-1031-azure by user runner
# Using Python version 3.10.5 (main, Jun  7 2022, 06:49:50) [GCC 9.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hmPlatform4, = mibBuilder.importSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", "hmPlatform4")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, NotificationType, ModuleIdentity, Bits, Counter64, Gauge32, Unsigned32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "NotificationType", "ModuleIdentity", "Bits", "Counter64", "Gauge32", "Unsigned32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "iso")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hmPlatform4Multicast = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 15, 4))
hmPlatform4Multicast.setRevisions(('2006-02-03 12:00', '2002-05-08 14:18',))
if mibBuilder.loadTexts: hmPlatform4Multicast.setLastUpdated('200602031200Z')
if mibBuilder.loadTexts: hmPlatform4Multicast.setOrganization('Hirschmann Automation and Control GmbH')
hmAgentMulticastIGMPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 1))
hmAgentMulticastIGMPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPAdminMode.setStatus('current')
hmAgentMulticastIGMPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2), )
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceTable.setStatus('obsolete')
hmAgentMulticastIGMPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastIGMPInterfaceIfIndex"))
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceEntry.setStatus('obsolete')
hmAgentMulticastIGMPInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceIfIndex.setStatus('obsolete')
hmAgentMulticastIGMPInterfaceAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceAdminMode.setStatus('obsolete')
hmAgentMulticastIGMPSoftwareDSCP = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 210), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPSoftwareDSCP.setStatus('current')
hmAgentMulticastPIMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 2))
hmAgentMulticastPIMConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sparse", 1), ("dense", 2))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMConfigMode.setStatus('obsolete')
hmAgentMulticastPIMPruneHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 64800)).clone(210)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMPruneHoldtime.setStatus('obsolete')
hmAgentMulticastPIMSMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 3))
hmAgentMulticastPIMSMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMAdminMode.setStatus('current')
hmAgentMulticastPIMSMDataThresholdRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMDataThresholdRate.setStatus('current')
hmAgentMulticastPIMSMRegThresholdRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMRegThresholdRate.setStatus('current')
hmAgentMulticastPIMSMStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4), )
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPTable.setStatus('obsolete')
hmAgentMulticastPIMSMStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPGroupIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPGroupIpMask"))
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPEntry.setStatus('obsolete')
hmAgentMulticastPIMSMStaticRPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPIpAddr.setStatus('obsolete')
hmAgentMulticastPIMSMStaticRPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpAddr.setStatus('obsolete')
hmAgentMulticastPIMSMStaticRPGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpMask.setStatus('obsolete')
hmAgentMulticastPIMSMStaticRPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPStatus.setStatus('obsolete')
hmAgentMulticastPIMSMInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5), )
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceTable.setStatus('obsolete')
hmAgentMulticastPIMSMInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMInterfaceIndex"))
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceEntry.setStatus('obsolete')
hmAgentMulticastPIMSMInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceIndex.setStatus('obsolete')
hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength.setStatus('obsolete')
hmAgentMulticastPIMSMInterfaceCRPPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCRPPreference.setStatus('obsolete')
hmAgentMulticastPIMDMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 4))
hmAgentMulticastPIMDMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMDMAdminMode.setStatus('current')
hmAgentMulticastRoutingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 5))
hmAgentMulticastRoutingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastRoutingAdminMode.setStatus('current')
hmAgentMulticastDVMRPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 6))
hmAgentMulticastDVMRPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastDVMRPAdminMode.setStatus('current')
hmAgentSnmpTrapFlagsConfigGroupMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 7))
hmAgentSnmpDVMRPTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpDVMRPTrapFlag.setStatus('current')
hmAgentSnmpPIMTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpPIMTrapFlag.setStatus('current')
hmAgentIpStaticMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 8), )
if mibBuilder.loadTexts: hmAgentIpStaticMRouteTable.setStatus('current')
hmAgentIpStaticMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcAddressType"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcNetMask"))
if mibBuilder.loadTexts: hmAgentIpStaticMRouteEntry.setStatus('current')
hmAgentIpStaticMRouteSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcAddressType.setStatus('current')
hmAgentIpStaticMRouteSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcIpAddr.setStatus('current')
hmAgentIpStaticMRouteSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcNetMask.setStatus('current')
hmAgentIpStaticMRouteRpfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteRpfIpAddr.setStatus('current')
hmAgentIpStaticMRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteIfIndex.setStatus('current')
hmAgentIpStaticMRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRoutePreference.setStatus('current')
hmAgentIpStaticMRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteStatus.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-MULTICAST-MIB", hmAgentMulticastPIMConfigGroup=hmAgentMulticastPIMConfigGroup, hmAgentMulticastIGMPInterfaceTable=hmAgentMulticastIGMPInterfaceTable, hmAgentMulticastPIMSMRegThresholdRate=hmAgentMulticastPIMSMRegThresholdRate, hmAgentMulticastIGMPConfigGroup=hmAgentMulticastIGMPConfigGroup, hmAgentIpStaticMRouteEntry=hmAgentIpStaticMRouteEntry, hmAgentMulticastIGMPSoftwareDSCP=hmAgentMulticastIGMPSoftwareDSCP, hmAgentMulticastPIMPruneHoldtime=hmAgentMulticastPIMPruneHoldtime, hmAgentMulticastPIMSMStaticRPGroupIpAddr=hmAgentMulticastPIMSMStaticRPGroupIpAddr, hmAgentIpStaticMRouteSrcAddressType=hmAgentIpStaticMRouteSrcAddressType, hmAgentMulticastDVMRPAdminMode=hmAgentMulticastDVMRPAdminMode, PYSNMP_MODULE_ID=hmPlatform4Multicast, hmAgentSnmpDVMRPTrapFlag=hmAgentSnmpDVMRPTrapFlag, hmAgentMulticastPIMSMInterfaceEntry=hmAgentMulticastPIMSMInterfaceEntry, hmAgentMulticastPIMDMAdminMode=hmAgentMulticastPIMDMAdminMode, hmAgentIpStaticMRouteSrcNetMask=hmAgentIpStaticMRouteSrcNetMask, hmAgentIpStaticMRouteTable=hmAgentIpStaticMRouteTable, hmAgentIpStaticMRouteStatus=hmAgentIpStaticMRouteStatus, hmAgentSnmpPIMTrapFlag=hmAgentSnmpPIMTrapFlag, hmAgentMulticastDVMRPConfigGroup=hmAgentMulticastDVMRPConfigGroup, hmAgentMulticastIGMPInterfaceAdminMode=hmAgentMulticastIGMPInterfaceAdminMode, hmAgentMulticastPIMSMStaticRPStatus=hmAgentMulticastPIMSMStaticRPStatus, hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength=hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength, hmAgentMulticastPIMDMConfigGroup=hmAgentMulticastPIMDMConfigGroup, hmAgentMulticastPIMSMStaticRPEntry=hmAgentMulticastPIMSMStaticRPEntry, hmAgentMulticastPIMSMStaticRPIpAddr=hmAgentMulticastPIMSMStaticRPIpAddr, hmAgentSnmpTrapFlagsConfigGroupMulticast=hmAgentSnmpTrapFlagsConfigGroupMulticast, hmAgentIpStaticMRouteRpfIpAddr=hmAgentIpStaticMRouteRpfIpAddr, hmAgentIpStaticMRouteIfIndex=hmAgentIpStaticMRouteIfIndex, hmAgentMulticastRoutingAdminMode=hmAgentMulticastRoutingAdminMode, hmAgentMulticastPIMSMStaticRPTable=hmAgentMulticastPIMSMStaticRPTable, hmAgentMulticastPIMSMDataThresholdRate=hmAgentMulticastPIMSMDataThresholdRate, hmAgentMulticastRoutingConfigGroup=hmAgentMulticastRoutingConfigGroup, hmAgentIpStaticMRouteSrcIpAddr=hmAgentIpStaticMRouteSrcIpAddr, hmAgentMulticastPIMSMInterfaceIndex=hmAgentMulticastPIMSMInterfaceIndex, hmAgentMulticastIGMPInterfaceIfIndex=hmAgentMulticastIGMPInterfaceIfIndex, hmAgentMulticastPIMSMInterfaceCRPPreference=hmAgentMulticastPIMSMInterfaceCRPPreference, hmAgentMulticastPIMSMConfigGroup=hmAgentMulticastPIMSMConfigGroup, hmAgentIpStaticMRoutePreference=hmAgentIpStaticMRoutePreference, hmAgentMulticastIGMPAdminMode=hmAgentMulticastIGMPAdminMode, hmAgentMulticastPIMSMInterfaceTable=hmAgentMulticastPIMSMInterfaceTable, hmAgentMulticastIGMPInterfaceEntry=hmAgentMulticastIGMPInterfaceEntry, hmAgentMulticastPIMSMAdminMode=hmAgentMulticastPIMSMAdminMode, hmAgentMulticastPIMSMStaticRPGroupIpMask=hmAgentMulticastPIMSMStaticRPGroupIpMask, hmPlatform4Multicast=hmPlatform4Multicast, hmAgentMulticastPIMConfigMode=hmAgentMulticastPIMConfigMode)
