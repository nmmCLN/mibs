#
# PySNMP MIB module OPENBSD-PF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/openbsd/OPENBSD-PF-MIB
# Produced by pysmi-1.1.8 at Thu Dec 15 08:31:43 2022
# On host fv-az193-683 platform Linux version 5.15.0-1024-azure by user runner
# Using Python version 3.10.8 (main, Oct 18 2022, 06:44:51) [GCC 11.2.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
openBSD, = mibBuilder.importSymbols("OPENBSD-BASE-MIB", "openBSD")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Counter64, NotificationType, Unsigned32, Gauge32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, MibIdentifier, Counter32, TimeTicks, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "NotificationType", "Unsigned32", "Gauge32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "MibIdentifier", "Counter32", "TimeTicks", "Integer32", "enterprises")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
pfMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 30155, 1))
pfMIBObjects.setRevisions(('2015-06-09 17:28', '2013-08-31 04:46', '2013-02-24 20:33', '2012-01-26 00:00',))
if mibBuilder.loadTexts: pfMIBObjects.setLastUpdated('201506091728Z')
if mibBuilder.loadTexts: pfMIBObjects.setOrganization('OpenBSD')
pfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 1))
pfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 2))
pfStateTable = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 3))
pfLogInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 4))
pfSrcTracking = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 5))
pfLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 6))
pfTimeouts = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 7))
pfInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 8))
pfTables = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 9))
pfLabels = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 10))
pfsyncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 11))
pfRunning = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfRunning.setStatus('current')
pfRuntime = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 2), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfRuntime.setStatus('current')
pfDebug = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("err", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfDebug.setStatus('current')
pfHostid = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfHostid.setStatus('current')
pfCntMatch = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntMatch.setStatus('current')
pfCntBadOffset = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntBadOffset.setStatus('current')
pfCntFragment = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntFragment.setStatus('current')
pfCntShort = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntShort.setStatus('current')
pfCntNormalize = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntNormalize.setStatus('current')
pfCntMemory = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntMemory.setStatus('current')
pfCntTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntTimestamp.setStatus('current')
pfCntCongestion = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntCongestion.setStatus('current')
pfCntIpOption = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntIpOption.setStatus('current')
pfCntProtoCksum = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntProtoCksum.setStatus('current')
pfCntStateMismatch = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateMismatch.setStatus('current')
pfCntStateInsert = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateInsert.setStatus('current')
pfCntStateLimit = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateLimit.setStatus('current')
pfCntSrcLimit = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntSrcLimit.setStatus('current')
pfCntSynproxy = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntSynproxy.setStatus('current')
pfCntTranslate = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntTranslate.setStatus('current')
pfCntNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntNoRoute.setStatus('current')
pfStateCount = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateCount.setStatus('current')
pfStateSearches = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateSearches.setStatus('current')
pfStateInserts = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateInserts.setStatus('current')
pfStateRemovals = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateRemovals.setStatus('current')
pfLogIfName = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfName.setStatus('current')
pfLogIfIpBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpBytesIn.setStatus('current')
pfLogIfIpBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpBytesOut.setStatus('current')
pfLogIfIpPktsInPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsInPass.setStatus('current')
pfLogIfIpPktsInDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsInDrop.setStatus('current')
pfLogIfIpPktsOutPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsOutPass.setStatus('current')
pfLogIfIpPktsOutDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsOutDrop.setStatus('current')
pfLogIfIp6BytesIn = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6BytesIn.setStatus('current')
pfLogIfIp6BytesOut = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6BytesOut.setStatus('current')
pfLogIfIp6PktsInPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsInPass.setStatus('current')
pfLogIfIp6PktsInDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsInDrop.setStatus('current')
pfLogIfIp6PktsOutPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsOutPass.setStatus('current')
pfLogIfIp6PktsOutDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsOutDrop.setStatus('current')
pfSrcTrackCount = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackCount.setStatus('current')
pfSrcTrackSearches = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackSearches.setStatus('current')
pfSrcTrackInserts = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackInserts.setStatus('current')
pfSrcTrackRemovals = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackRemovals.setStatus('current')
pfLimitStates = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitStates.setStatus('current')
pfLimitSourceNodes = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitSourceNodes.setStatus('current')
pfLimitFragments = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitFragments.setStatus('current')
pfLimitMaxTables = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitMaxTables.setStatus('current')
pfLimitMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitMaxTableEntries.setStatus('current')
pfTimeoutTcpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpFirst.setStatus('current')
pfTimeoutTcpOpening = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpOpening.setStatus('current')
pfTimeoutTcpEstablished = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpEstablished.setStatus('current')
pfTimeoutTcpClosing = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpClosing.setStatus('current')
pfTimeoutTcpFinWait = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpFinWait.setStatus('current')
pfTimeoutTcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpClosed.setStatus('current')
pfTimeoutUdpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpFirst.setStatus('current')
pfTimeoutUdpSingle = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpSingle.setStatus('current')
pfTimeoutUdpMultiple = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpMultiple.setStatus('current')
pfTimeoutIcmpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutIcmpFirst.setStatus('current')
pfTimeoutIcmpError = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutIcmpError.setStatus('current')
pfTimeoutOtherFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherFirst.setStatus('current')
pfTimeoutOtherSingle = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherSingle.setStatus('current')
pfTimeoutOtherMultiple = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherMultiple.setStatus('current')
pfTimeoutFragment = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutFragment.setStatus('current')
pfTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutInterval.setStatus('current')
pfTimeoutAdaptiveStart = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutAdaptiveStart.setStatus('current')
pfTimeoutAdaptiveEnd = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutAdaptiveEnd.setStatus('current')
pfTimeoutSrcTrack = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutSrcTrack.setStatus('current')
pfIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfNumber.setStatus('current')
pfIfTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128), )
if mibBuilder.loadTexts: pfIfTable.setStatus('current')
pfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfIfIndex"))
if mibBuilder.loadTexts: pfIfEntry.setStatus('current')
pfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIndex.setStatus('current')
pfIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfDescr.setStatus('current')
pfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("group", 0), ("instance", 1), ("detached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfType.setStatus('current')
pfIfRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfRefs.setStatus('current')
pfIfRules = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfRules.setStatus('current')
pfIfIn4PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4PassPkts.setStatus('current')
pfIfIn4PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4PassBytes.setStatus('current')
pfIfIn4BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4BlockPkts.setStatus('current')
pfIfIn4BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4BlockBytes.setStatus('current')
pfIfOut4PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4PassPkts.setStatus('current')
pfIfOut4PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4PassBytes.setStatus('current')
pfIfOut4BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4BlockPkts.setStatus('current')
pfIfOut4BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4BlockBytes.setStatus('current')
pfIfIn6PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6PassPkts.setStatus('current')
pfIfIn6PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6PassBytes.setStatus('current')
pfIfIn6BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6BlockPkts.setStatus('current')
pfIfIn6BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6BlockBytes.setStatus('current')
pfIfOut6PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6PassPkts.setStatus('current')
pfIfOut6PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6PassBytes.setStatus('current')
pfIfOut6BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6BlockPkts.setStatus('current')
pfIfOut6BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6BlockBytes.setStatus('current')
pfTblNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblNumber.setStatus('current')
pfTblTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128), )
if mibBuilder.loadTexts: pfTblTable.setStatus('current')
pfTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfTblIndex"))
if mibBuilder.loadTexts: pfTblEntry.setStatus('current')
pfTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblIndex.setStatus('current')
pfTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblName.setStatus('current')
pfTblAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddresses.setStatus('current')
pfTblAnchorRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAnchorRefs.setStatus('current')
pfTblRuleRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblRuleRefs.setStatus('current')
pfTblEvalsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblEvalsMatch.setStatus('current')
pfTblEvalsNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblEvalsNoMatch.setStatus('current')
pfTblInPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInPassPkts.setStatus('current')
pfTblInPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInPassBytes.setStatus('current')
pfTblInBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInBlockPkts.setStatus('current')
pfTblInBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInBlockBytes.setStatus('current')
pfTblInXPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInXPassPkts.setStatus('current')
pfTblInXPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInXPassBytes.setStatus('current')
pfTblOutPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutPassPkts.setStatus('current')
pfTblOutPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutPassBytes.setStatus('current')
pfTblOutBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutBlockPkts.setStatus('current')
pfTblOutBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutBlockBytes.setStatus('current')
pfTblOutXPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutXPassPkts.setStatus('current')
pfTblOutXPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutXPassBytes.setStatus('current')
pfTblStatsCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 20), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblStatsCleared.setStatus('current')
pfTblInMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInMatchPkts.setStatus('current')
pfTblInMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInMatchBytes.setStatus('current')
pfTblOutMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutMatchPkts.setStatus('current')
pfTblOutMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutMatchBytes.setStatus('current')
pfTblAddrTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129), )
if mibBuilder.loadTexts: pfTblAddrTable.setStatus('current')
pfTblAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfTblAddrTblIndex"), (0, "OPENBSD-PF-MIB", "pfTblAddrNet"), (0, "OPENBSD-PF-MIB", "pfTblAddrMask"))
if mibBuilder.loadTexts: pfTblAddrEntry.setStatus('current')
pfTblAddrTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrTblIndex.setStatus('current')
pfTblAddrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrNet.setStatus('current')
pfTblAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrMask.setStatus('current')
pfTblAddrCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 4), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrCleared.setStatus('current')
pfTblAddrInBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInBlockPkts.setStatus('current')
pfTblAddrInBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInBlockBytes.setStatus('current')
pfTblAddrInPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInPassPkts.setStatus('current')
pfTblAddrInPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInPassBytes.setStatus('current')
pfTblAddrOutBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutBlockPkts.setStatus('current')
pfTblAddrOutBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutBlockBytes.setStatus('current')
pfTblAddrOutPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutPassPkts.setStatus('current')
pfTblAddrOutPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutPassBytes.setStatus('current')
pfTblAddrInMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInMatchPkts.setStatus('current')
pfTblAddrInMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInMatchBytes.setStatus('current')
pfTblAddrOutMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutMatchPkts.setStatus('current')
pfTblAddrOutMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutMatchBytes.setStatus('current')
pfLabelNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelNumber.setStatus('current')
pfLabelTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128), )
if mibBuilder.loadTexts: pfLabelTable.setStatus('current')
pfLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfLabelIndex"))
if mibBuilder.loadTexts: pfLabelEntry.setStatus('current')
pfLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelIndex.setStatus('current')
pfLabelName = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelName.setStatus('current')
pfLabelEvals = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelEvals.setStatus('current')
pfLabelPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelPkts.setStatus('current')
pfLabelBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelBytes.setStatus('current')
pfLabelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelInPkts.setStatus('current')
pfLabelInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelInBytes.setStatus('current')
pfLabelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelOutPkts.setStatus('current')
pfLabelOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelOutBytes.setStatus('current')
pfLabelTotalStates = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelTotalStates.setStatus('current')
pfsyncIpPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIpPktsRecv.setStatus('current')
pfsyncIp6PktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIp6PktsRecv.setStatus('current')
pfsyncPktDiscardsForBadInterface = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadInterface.setStatus('current')
pfsyncPktDiscardsForBadTtl = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadTtl.setStatus('current')
pfsyncPktShorterThanHeader = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktShorterThanHeader.setStatus('current')
pfsyncPktDiscardsForBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadVersion.setStatus('current')
pfsyncPktDiscardsForBadAction = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAction.setStatus('current')
pfsyncPktDiscardsForBadLength = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadLength.setStatus('current')
pfsyncPktDiscardsForBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAuth.setStatus('current')
pfsyncPktDiscardsForStaleState = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForStaleState.setStatus('current')
pfsyncPktDiscardsForBadValues = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadValues.setStatus('current')
pfsyncPktDiscardsForBadState = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadState.setStatus('current')
pfsyncIpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIpPktsSent.setStatus('current')
pfsyncIp6PktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIp6PktsSent.setStatus('current')
pfsyncNoMemory = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncNoMemory.setStatus('current')
pfsyncOutputErrors = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncOutputErrors.setStatus('current')
mibBuilder.exportSymbols("OPENBSD-PF-MIB", pfCntShort=pfCntShort, pfTimeoutOtherFirst=pfTimeoutOtherFirst, pfLabelBytes=pfLabelBytes, pfIfOut4BlockBytes=pfIfOut4BlockBytes, pfsyncPktDiscardsForBadInterface=pfsyncPktDiscardsForBadInterface, pfCntSynproxy=pfCntSynproxy, pfCntIpOption=pfCntIpOption, pfCntCongestion=pfCntCongestion, pfStateCount=pfStateCount, pfLimitStates=pfLimitStates, pfLogIfIp6PktsInPass=pfLogIfIp6PktsInPass, pfTblInXPassBytes=pfTblInXPassBytes, pfLogIfIpBytesOut=pfLogIfIpBytesOut, pfLogIfIpPktsInDrop=pfLogIfIpPktsInDrop, pfTimeoutUdpSingle=pfTimeoutUdpSingle, pfLogIfIp6BytesOut=pfLogIfIp6BytesOut, pfIfEntry=pfIfEntry, pfIfDescr=pfIfDescr, pfTblAddrTblIndex=pfTblAddrTblIndex, pfTblOutPassPkts=pfTblOutPassPkts, pfTblAddrOutPassBytes=pfTblAddrOutPassBytes, pfTblOutXPassBytes=pfTblOutXPassBytes, pfTblAddrInPassBytes=pfTblAddrInPassBytes, pfRunning=pfRunning, pfDebug=pfDebug, pfLimitMaxTables=pfLimitMaxTables, pfTimeoutTcpEstablished=pfTimeoutTcpEstablished, pfLogIfIpPktsOutPass=pfLogIfIpPktsOutPass, pfSrcTracking=pfSrcTracking, pfLabelName=pfLabelName, pfTblEvalsMatch=pfTblEvalsMatch, pfLabelInPkts=pfLabelInPkts, pfCntNoRoute=pfCntNoRoute, pfLogIfIpBytesIn=pfLogIfIpBytesIn, pfLabelNumber=pfLabelNumber, pfIfNumber=pfIfNumber, pfCounters=pfCounters, pfTblAddrMask=pfTblAddrMask, pfTblInBlockBytes=pfTblInBlockBytes, pfIfIn6BlockBytes=pfIfIn6BlockBytes, pfTblAddrOutBlockPkts=pfTblAddrOutBlockPkts, pfTblAddrOutMatchPkts=pfTblAddrOutMatchPkts, pfLogIfIp6PktsOutPass=pfLogIfIp6PktsOutPass, pfIfIn4BlockPkts=pfIfIn4BlockPkts, pfTblAddrCleared=pfTblAddrCleared, pfLabelOutBytes=pfLabelOutBytes, pfCntMatch=pfCntMatch, pfTblAddrEntry=pfTblAddrEntry, pfTblOutXPassPkts=pfTblOutXPassPkts, pfTimeoutTcpOpening=pfTimeoutTcpOpening, pfIfOut6BlockBytes=pfIfOut6BlockBytes, pfIfIn4BlockBytes=pfIfIn4BlockBytes, pfsyncStats=pfsyncStats, pfTimeoutUdpFirst=pfTimeoutUdpFirst, pfIfOut6BlockPkts=pfIfOut6BlockPkts, pfLimitSourceNodes=pfLimitSourceNodes, pfLimitFragments=pfLimitFragments, pfTblOutBlockPkts=pfTblOutBlockPkts, pfIfOut6PassPkts=pfIfOut6PassPkts, pfCntNormalize=pfCntNormalize, pfStateInserts=pfStateInserts, pfTimeoutSrcTrack=pfTimeoutSrcTrack, pfSrcTrackCount=pfSrcTrackCount, pfTblAddrOutPassPkts=pfTblAddrOutPassPkts, pfTblAddrInPassPkts=pfTblAddrInPassPkts, pfsyncPktDiscardsForBadValues=pfsyncPktDiscardsForBadValues, pfsyncIpPktsSent=pfsyncIpPktsSent, pfLabelEntry=pfLabelEntry, pfCntStateMismatch=pfCntStateMismatch, pfTimeoutTcpFirst=pfTimeoutTcpFirst, pfIfOut4BlockPkts=pfIfOut4BlockPkts, pfTblInBlockPkts=pfTblInBlockPkts, pfLogIfIp6PktsInDrop=pfLogIfIp6PktsInDrop, pfTblOutBlockBytes=pfTblOutBlockBytes, pfLimitMaxTableEntries=pfLimitMaxTableEntries, pfIfRules=pfIfRules, pfTblInMatchPkts=pfTblInMatchPkts, pfLabelIndex=pfLabelIndex, pfTimeouts=pfTimeouts, pfIfIn6PassPkts=pfIfIn6PassPkts, pfTblInPassPkts=pfTblInPassPkts, pfCntStateInsert=pfCntStateInsert, pfCntFragment=pfCntFragment, pfIfOut6PassBytes=pfIfOut6PassBytes, pfTblAddrInMatchBytes=pfTblAddrInMatchBytes, pfTblStatsCleared=pfTblStatsCleared, pfTblAddrNet=pfTblAddrNet, pfTblInMatchBytes=pfTblInMatchBytes, pfStateRemovals=pfStateRemovals, pfRuntime=pfRuntime, pfsyncNoMemory=pfsyncNoMemory, pfCntTimestamp=pfCntTimestamp, pfTblInXPassPkts=pfTblInXPassPkts, pfLogInterface=pfLogInterface, pfLabelEvals=pfLabelEvals, pfTimeoutUdpMultiple=pfTimeoutUdpMultiple, pfTimeoutOtherMultiple=pfTimeoutOtherMultiple, pfTblAddrOutBlockBytes=pfTblAddrOutBlockBytes, pfTables=pfTables, pfsyncPktDiscardsForBadTtl=pfsyncPktDiscardsForBadTtl, pfIfTable=pfIfTable, pfTblTable=pfTblTable, pfsyncIp6PktsSent=pfsyncIp6PktsSent, pfHostid=pfHostid, pfLogIfIp6BytesIn=pfLogIfIp6BytesIn, pfLogIfIpPktsOutDrop=pfLogIfIpPktsOutDrop, pfSrcTrackRemovals=pfSrcTrackRemovals, pfTimeoutOtherSingle=pfTimeoutOtherSingle, pfsyncPktDiscardsForStaleState=pfsyncPktDiscardsForStaleState, pfsyncPktDiscardsForBadAction=pfsyncPktDiscardsForBadAction, pfTimeoutTcpClosing=pfTimeoutTcpClosing, pfIfIn6BlockPkts=pfIfIn6BlockPkts, pfTimeoutAdaptiveEnd=pfTimeoutAdaptiveEnd, pfLabelPkts=pfLabelPkts, pfLabelOutPkts=pfLabelOutPkts, pfLabelTotalStates=pfLabelTotalStates, pfTimeoutTcpClosed=pfTimeoutTcpClosed, pfTblIndex=pfTblIndex, pfCntTranslate=pfCntTranslate, pfsyncPktDiscardsForBadState=pfsyncPktDiscardsForBadState, pfIfIn6PassBytes=pfIfIn6PassBytes, pfsyncIpPktsRecv=pfsyncIpPktsRecv, pfLabels=pfLabels, pfInterfaces=pfInterfaces, pfTimeoutIcmpError=pfTimeoutIcmpError, pfIfIn4PassPkts=pfIfIn4PassPkts, pfTimeoutIcmpFirst=pfTimeoutIcmpFirst, pfLabelInBytes=pfLabelInBytes, pfTblOutMatchBytes=pfTblOutMatchBytes, pfTblAddrTable=pfTblAddrTable, pfInfo=pfInfo, pfsyncIp6PktsRecv=pfsyncIp6PktsRecv, pfTimeoutInterval=pfTimeoutInterval, pfTblAnchorRefs=pfTblAnchorRefs, pfTblAddrInMatchPkts=pfTblAddrInMatchPkts, pfTblName=pfTblName, pfCntStateLimit=pfCntStateLimit, pfCntBadOffset=pfCntBadOffset, pfIfOut4PassPkts=pfIfOut4PassPkts, pfTblOutPassBytes=pfTblOutPassBytes, pfSrcTrackSearches=pfSrcTrackSearches, pfTblRuleRefs=pfTblRuleRefs, pfMIBObjects=pfMIBObjects, pfCntSrcLimit=pfCntSrcLimit, pfsyncPktDiscardsForBadAuth=pfsyncPktDiscardsForBadAuth, pfIfIn4PassBytes=pfIfIn4PassBytes, pfSrcTrackInserts=pfSrcTrackInserts, pfsyncOutputErrors=pfsyncOutputErrors, pfTblNumber=pfTblNumber, pfsyncPktDiscardsForBadLength=pfsyncPktDiscardsForBadLength, PYSNMP_MODULE_ID=pfMIBObjects, pfIfIndex=pfIfIndex, pfTblOutMatchPkts=pfTblOutMatchPkts, pfTblAddrOutMatchBytes=pfTblAddrOutMatchBytes, pfsyncPktDiscardsForBadVersion=pfsyncPktDiscardsForBadVersion, pfCntProtoCksum=pfCntProtoCksum, pfTblEvalsNoMatch=pfTblEvalsNoMatch, pfTblAddrInBlockBytes=pfTblAddrInBlockBytes, pfIfOut4PassBytes=pfIfOut4PassBytes, pfLabelTable=pfLabelTable, pfLimits=pfLimits, pfStateSearches=pfStateSearches, pfTblEntry=pfTblEntry, pfsyncPktShorterThanHeader=pfsyncPktShorterThanHeader, pfLogIfIp6PktsOutDrop=pfLogIfIp6PktsOutDrop, pfIfRefs=pfIfRefs, pfIfType=pfIfType, pfTblInPassBytes=pfTblInPassBytes, pfLogIfName=pfLogIfName, pfTblAddresses=pfTblAddresses, pfCntMemory=pfCntMemory, pfTblAddrInBlockPkts=pfTblAddrInBlockPkts, pfTimeoutTcpFinWait=pfTimeoutTcpFinWait, pfTimeoutAdaptiveStart=pfTimeoutAdaptiveStart, pfLogIfIpPktsInPass=pfLogIfIpPktsInPass, pfStateTable=pfStateTable, pfTimeoutFragment=pfTimeoutFragment)
