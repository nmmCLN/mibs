#
# PySNMP MIB module RADLAN-Tuning (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/radlan/RADLAN-Tuning
# Produced by pysmi-1.1.8 at Thu Sep  7 10:22:01 2023
# On host fv-az627-713 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, Bits, Counter32, NotificationType, Integer32, Counter64, ObjectIdentity, TimeTicks, Unsigned32, ModuleIdentity, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "Bits", "Counter32", "NotificationType", "Integer32", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "ModuleIdentity", "Gauge32", "IpAddress")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
DisplayString, = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString")
rsTunning = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 29))
rsTunning.setRevisions(('2004-06-01 00:00',))
if mibBuilder.loadTexts: rsTunning.setLastUpdated('200406010000Z')
if mibBuilder.loadTexts: rsTunning.setOrganization('Radlan Computer Communications Ltd.')
rsHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsHighPriority.setStatus('current')
rsLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLowPriority.setStatus('current')
rsDbgLevel = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDbgLevel.setStatus('current')
rsDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 4), )
if mibBuilder.loadTexts: rsDiagnosticsTable.setStatus('current')
rsDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 4, 1), ).setIndexNames((0, "RADLAN-Tuning", "rsDiagnosticsRequestId"))
if mibBuilder.loadTexts: rsDiagnosticsEntry.setStatus('current')
rsDiagnosticsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsRequestId.setStatus('current')
rsDiagnosticsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsCode.setStatus('current')
rsDiagnosticsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsLocation.setStatus('current')
rsDiagnosticsText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsText.setStatus('current')
rsConfirmMessagTab = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsConfirmMessagTab.setStatus('current')
eventMessageTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 6), )
if mibBuilder.loadTexts: eventMessageTable.setStatus('current')
eventMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 6, 1), ).setIndexNames((0, "RADLAN-Tuning", "eventNum"))
if mibBuilder.loadTexts: eventMessageEntry.setStatus('current')
eventNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNum.setStatus('current')
eventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDesc.setStatus('current')
reaTunning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 7))
reaIpForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpForwardEnable.setStatus('current')
reaIpxForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpxForwardEnable.setStatus('current')
rsMaxEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8))
rsMaxBridgeForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 1))
rsMaxBrgFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxBrgFrwEntries.setStatus('current')
rsMaxBrgFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxBrgFrwEntriesAfterReset.setStatus('current')
rsMaxIpForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 2))
rsMaxIpFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpFrwEntries.setStatus('current')
rsMaxIpFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpFrwEntriesAfterReset.setStatus('current')
rsMaxArpEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 3))
rsMaxArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxArpEntries.setStatus('current')
rsMaxArpEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxArpEntriesAfterReset.setStatus('current')
rsMaxIpxForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 4))
rsMaxIpxFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxFrwEntries.setStatus('current')
rsMaxIpxFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxFrwEntriesAfterReset.setStatus('current')
rsMaxIpxSapEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 5))
rsMaxIpxSapEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSapEntries.setStatus('current')
rsMaxIpxSapEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSapEntriesAfterReset.setStatus('current')
rsMaxDspClntEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 6))
rsMaxDspClntEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDspClntEntries.setStatus('current')
rsMaxDspClntEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDspClntEntriesAfterReset.setStatus('current')
rsMaxIpFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 9))
rsMaxIpSFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpSFftEntries.setStatus('current')
rsMaxIpSFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpSFftEntriesAfterReset.setStatus('current')
rsMaxIpNFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNFftEntries.setStatus('current')
rsMaxIpNFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNFftEntriesAfterReset.setStatus('current')
rsMaxIpSFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpSFftSysEntries.setStatus('current')
rsMaxIpSFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpSFftSysEntriesAfterReset.setStatus('current')
rsMaxIpNFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNFftSysEntries.setStatus('current')
rsMaxIpNFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNFftSysEntriesAfterReset.setStatus('current')
rsMaxIpNextHopEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNextHopEntries.setStatus('current')
rsMaxIpNextHopEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNextHopEntriesAfterReset.setStatus('current')
rsMaxIpxFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 10))
rsMaxIpxSFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSFftEntries.setStatus('current')
rsMaxIpxSFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSFftEntriesAfterReset.setStatus('current')
rsMaxIpxNFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxNFftEntries.setStatus('current')
rsMaxIpxNFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxNFftEntriesAfterReset.setStatus('current')
rsMaxIpxSFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSFftSysEntries.setStatus('current')
rsMaxIpxSFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSFftSysEntriesAfterReset.setStatus('current')
rsMaxIpxNFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxNFftSysEntries.setStatus('current')
rsMaxIpxNFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxNFftSysEntriesAfterReset.setStatus('current')
rsMaxDhcpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 11))
rsMaxDhcpConns = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDhcpConns.setStatus('current')
rsMaxDhcpConnsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDhcpConnsAfterReset.setStatus('current')
rsMaxIpmTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12))
rsMaxIpmFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1))
rsMaxIpmFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpmFftEntries.setStatus('current')
rsMaxIpmFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpmFftEntriesAfterReset.setStatus('current')
rsIpmFftAging = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpmFftAging.setStatus('current')
rsMaxIgmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2))
rsMaxIgmpInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpInterfaceEntries.setStatus('current')
rsMaxIgmpInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpInterfaceEntriesAfterReset.setStatus('current')
rsMaxIgmpCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpCacheEntries.setStatus('current')
rsMaxIgmpCacheEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpCacheEntriesAfterReset.setStatus('current')
rsMaxPimTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3))
rsMaxPimNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimNeighborEntries.setStatus('current')
rsMaxPimNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimNeighborEntriesAfterReset.setStatus('current')
rsMaxPimRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimRouteEntries.setStatus('current')
rsMaxPimRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimRouteEntriesAfterReset.setStatus('current')
rsMaxPimRouteNextHopEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimRouteNextHopEntries.setStatus('current')
rsMaxPimRouteNextHopEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimRouteNextHopEntriesAfterReset.setStatus('current')
rsMaxPimInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimInterfaceEntriesAfterReset.setStatus('current')
rsMaxPimInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimInterfaceEntries.setStatus('current')
rsMaxDvmrpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4))
rsMaxDvmrpNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpNeighborEntries.setStatus('current')
rsMaxDvmrpNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpNeighborEntriesAfterReset.setStatus('current')
rsMaxDvmrpRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpRouteEntries.setStatus('current')
rsMaxDvmrpRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpRouteEntriesAfterReset.setStatus('current')
rsMaxDvmrpMRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpMRouteEntries.setStatus('current')
rsMaxDvmrpMRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpMRouteEntriesAfterReset.setStatus('current')
rsMaxDvmrpInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpInterfaceEntries.setStatus('current')
rsMaxDvmrpInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpInterfaceEntriesAfterReset.setStatus('current')
rsMaxPigmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5))
rsMaxPigmpRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPigmpRouteEntries.setStatus('current')
rsMaxPigmpRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPigmpRouteEntriesAfterReset.setStatus('current')
rsMaxPimSmTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6))
rsMaxPimSmNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmNeighborEntries.setStatus('current')
rsMaxPimSmNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmNeighborEntriesAfterReset.setStatus('current')
rsMaxPimSmRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmRouteEntries.setStatus('current')
rsMaxPimSmRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmRouteEntriesAfterReset.setStatus('current')
rsMaxPimSmInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmInterfaceEntries.setStatus('current')
rsMaxPimSmInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmInterfaceEntriesAfterReset.setStatus('current')
rsMaxPimSmRPSetEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmRPSetEntries.setStatus('current')
rsMaxPimSmRPSetEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmRPSetEntriesAfterReset.setStatus('current')
rsMaxPimSmCRPEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmCRPEntries.setStatus('current')
rsMaxPimSmCRPEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmCRPEntriesAfterReset.setStatus('current')
rsMaxNumberRpAddresesInGroupRange = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxNumberRpAddresesInGroupRange.setStatus('current')
rsMaxNumberRpAddresesInGroupRangeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxNumberRpAddresesInGroupRangeAfterReset.setStatus('current')
rsMaxRmonTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 13))
rsMaxRmonLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxRmonLogEntries.setStatus('current')
rsMaxRmonLogEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxRmonLogEntriesAfterReset.setStatus('current')
rsMaxRmonEtherHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxRmonEtherHistoryEntries.setStatus('current')
rsMaxRmonEtherHistoryEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxRmonEtherHistoryEntriesAfterReset.setStatus('current')
rsMaxIgmpSnoopTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 14))
rsMaxIgmpSnoopGroupEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpSnoopGroupEntries.setStatus('current')
rsMaxIgmpSnoopGroupEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpSnoopGroupEntriesAfterReset.setStatus('current')
rsMaxVlansTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 15))
rsMaxVlansEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxVlansEntries.setStatus('current')
rsMaxVlansEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxVlansEntriesAfterReset.setStatus('current')
rsMaxPolicyTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 16))
rsMaxPolicyMaxRulesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicyMaxRulesEntries.setStatus('current')
rsMaxPolicyMaxRulesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicyMaxRulesEntriesAfterReset.setStatus('current')
rsMaxPolicySimpleMibMaxRulesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxRulesEntries.setStatus('current')
rsMaxPolicySimpleMibMaxRulesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxRulesEntriesAfterReset.setStatus('current')
rsMaxPolicySimpleMibMaxProfilesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxProfilesEntries.setStatus('current')
rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset.setStatus('current')
rsMaxGvrpVlansTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 17))
rsMaxGvrpVlans = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxGvrpVlans.setStatus('current')
rsMaxGvrpVlansAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxGvrpVlansAfterReset.setStatus('current')
rsMaxTraceRouteTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 18))
rsMaxTraceRouteControlEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxTraceRouteControlEntries.setStatus('current')
rsMaxTraceRouteControEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxTraceRouteControEntriesAfterReset.setStatus('current')
rsMaxTraceRouteProbeHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxTraceRouteProbeHistoryEntries.setStatus('current')
rsMaxTraceRouteProbeHistoryEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxTraceRouteProbeHistoryEntriesAfterReset.setStatus('current')
rsMaxSnmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 19))
rsMaxSnmpCommunityEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxSnmpCommunityEntries.setStatus('current')
rsMaxSnmpCommunityEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 19, 2), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxSnmpCommunityEntriesAfterReset.setStatus('current')
rsMaxSocketTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 20))
rsMaxNumberOfSockets = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxNumberOfSockets.setStatus('current')
rsMaxNumberOfSocketsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxNumberOfSocketsAfterReset.setStatus('current')
rsMaxSizeOfSocketDataPool = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxSizeOfSocketDataPool.setStatus('current')
rsMaxSizeOfSocketDataPoolAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxSizeOfSocketDataPoolAfterReset.setStatus('current')
rsMaxIpRouteTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 21))
rsMaxIpPrefixes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpPrefixes.setStatus('current')
rsMaxIpPrefixesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpPrefixesAfterReset.setStatus('current')
rsMaxIpNextHopSetTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 22))
rsMaxIpNextHopSetEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNextHopSetEntries.setStatus('current')
rsMaxIpNextHopSetEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 22, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNextHopSetEntriesAfterReset.setStatus('current')
rsMaxIpEcmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 23))
rsMaxIpEcmpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpEcmpEntrySize.setStatus('current')
rsMaxIpEcmpEntrySizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 23, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpEcmpEntrySizeAfterReset.setStatus('current')
rsMaxdot1xEapRequestTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 24))
rsMaxdot1xEapRequestEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxdot1xEapRequestEntries.setStatus('current')
rsMaxdot1xEapRequestEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 24, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxdot1xEapRequestEntriesAfterReset.setStatus('current')
rsMaxIpInterfaceTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 25))
rsMaxIpInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpInterfaces.setStatus('current')
rsMaxIpInterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 25, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpInterfacesAfterReset.setStatus('current')
rsTcpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 11))
rsTcpMemoryPoolSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTcpMemoryPoolSizeAfterReset.setStatus('current')
rsTcpMemoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTcpMemoryPoolSize.setStatus('current')
rsRadiusTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 12))
rsRadiusMemoryPoolSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRadiusMemoryPoolSizeAfterReset.setStatus('current')
rsRadiusMemoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRadiusMemoryPoolSize.setStatus('current')
rlSyslogTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 13))
rlSyslogFilePercentToDeleteWhenCompacting = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSyslogFilePercentToDeleteWhenCompacting.setStatus('current')
rlSyslogFilePercentToDeleteWhenCompactingAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSyslogFilePercentToDeleteWhenCompactingAfterReset.setStatus('current')
rlSyslogCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSyslogCacheSize.setStatus('current')
rlSyslogCacheSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSyslogCacheSizeAfterReset.setStatus('current')
rlMngInfTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 14))
rlMaxNumberOfAccessRules = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxNumberOfAccessRules.setStatus('current')
rlMaxNumberOfAccessRulesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxNumberOfAccessRulesAfterReset.setStatus('current')
rlSshTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 15))
rlSshMaxAuthorizedKeysAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSshMaxAuthorizedKeysAfterReset.setStatus('current')
rlSshMaxAuthorizedKeys = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSshMaxAuthorizedKeys.setStatus('current')
rsDiagnosticTextSource = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fromCLI", 1), ("fromDiagnosticsTable", 2))).clone('fromCLI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDiagnosticTextSource.setStatus('current')
rsMultiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 17))
rsMultiSessionMaxSessionsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMultiSessionMaxSessionsAfterReset.setStatus('current')
rsMultiSessionMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMultiSessionMaxSessions.setStatus('current')
rlDnsClTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 18))
rlMaxDnsClCacheRREntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClCacheRREntries.setStatus('current')
rlMaxDnsClCacheRREntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClCacheRREntriesAfterReset.setStatus('current')
rlMaxDnsClNCacheErrEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClNCacheErrEntries.setStatus('current')
rlMaxDnsClNCacheErrEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClNCacheErrEntriesAfterReset.setStatus('current')
rlMaxDnsClNamesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClNamesEntries.setStatus('current')
rlMaxDnsClNamesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClNamesEntriesAfterReset.setStatus('current')
rlTuningParamsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 19), )
if mibBuilder.loadTexts: rlTuningParamsTable.setStatus('current')
rlTuningParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 19, 1), ).setIndexNames((1, "RADLAN-Tuning", "rlTuningParamsName"))
if mibBuilder.loadTexts: rlTuningParamsEntry.setStatus('current')
rlTuningParamsName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsName.setStatus('current')
rlTuningParamsCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsCurrentValue.setStatus('current')
rlTuningParamsAfterResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsAfterResetValue.setStatus('current')
rlTuningParamsDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsDefaultValue.setStatus('current')
rlTuningParamsMinimalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsMinimalValue.setStatus('current')
rlTuningParamsMaximalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsMaximalValue.setStatus('current')
rlHostParamTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 20), )
if mibBuilder.loadTexts: rlHostParamTable.setStatus('current')
rlHostParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 20, 1), ).setIndexNames((1, "RADLAN-Tuning", "rlHostParamName"))
if mibBuilder.loadTexts: rlHostParamEntry.setStatus('current')
rlHostParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamName.setStatus('current')
rlHostParamValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamValue.setStatus('current')
rlOspfTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 21))
rlMaxOspfInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfInterfaces.setStatus('current')
rlMaxOspfInterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfInterfacesAfterReset.setStatus('current')
rlMaxOspfAreas = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfAreas.setStatus('current')
rlMaxOspfAreasAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfAreasAfterReset.setStatus('current')
rlMaxOspfNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfNeighbors.setStatus('current')
rlMaxOspfNeighborsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfNeighborsAfterReset.setStatus('current')
rlMaxOspfAbrPerArea = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfAbrPerArea.setStatus('current')
rlMaxOspfAbrPerAreaAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfAbrPerAreaAfterReset.setStatus('current')
rlMaxOspfNetsInAs = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfNetsInAs.setStatus('current')
rlMaxOspfNetsInAsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfNetsInAsAfterReset.setStatus('current')
rlVlanTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 22))
rlVlanDefaultVID = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanDefaultVID.setStatus('current')
rlVlanDefaultVIDAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 22, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanDefaultVIDAfterReset.setStatus('current')
rlDependendFeaturesEnableTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 23))
rlDependendFeaturesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 23, 1), Bits().clone(namedValues=NamedValues(("ipV4routingEnabled", 0), ("policyBasedVlanEnabled", 1), ("qualityOfServiceEnables", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDependendFeaturesEnabled.setStatus('current')
rlDependendFeaturesEnabledAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 23, 2), Bits().clone(namedValues=NamedValues(("ipV4routingEnabled", 0), ("policyBasedVlanEnabled", 1), ("qualityOfServiceEnables", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDependendFeaturesEnabledAfterReset.setStatus('current')
mibBuilder.exportSymbols("RADLAN-Tuning", rsMaxIpNextHopSetTuning=rsMaxIpNextHopSetTuning, rlMaxOspfNeighborsAfterReset=rlMaxOspfNeighborsAfterReset, rsMaxVlansEntriesAfterReset=rsMaxVlansEntriesAfterReset, rlTuningParamsMaximalValue=rlTuningParamsMaximalValue, rsMaxPimTuning=rsMaxPimTuning, rsMaxdot1xEapRequestTuning=rsMaxdot1xEapRequestTuning, rsMaxIpxSapEntries=rsMaxIpxSapEntries, rsMaxRmonEtherHistoryEntries=rsMaxRmonEtherHistoryEntries, rsMaxIpxSFftSysEntriesAfterReset=rsMaxIpxSFftSysEntriesAfterReset, rlDnsClTuning=rlDnsClTuning, rsMaxPimRouteNextHopEntriesAfterReset=rsMaxPimRouteNextHopEntriesAfterReset, rlMaxDnsClNamesEntriesAfterReset=rlMaxDnsClNamesEntriesAfterReset, rsMaxGvrpVlansTuning=rsMaxGvrpVlansTuning, rsMaxIgmpInterfaceEntries=rsMaxIgmpInterfaceEntries, rsMaxDvmrpTuning=rsMaxDvmrpTuning, rsMaxSocketTuning=rsMaxSocketTuning, rsMaxBrgFrwEntries=rsMaxBrgFrwEntries, rsMaxIpNextHopEntries=rsMaxIpNextHopEntries, rsMaxPimSmRPSetEntriesAfterReset=rsMaxPimSmRPSetEntriesAfterReset, rsMaxIpxSapEntriesTuning=rsMaxIpxSapEntriesTuning, rsMaxDvmrpNeighborEntriesAfterReset=rsMaxDvmrpNeighborEntriesAfterReset, rlMaxOspfInterfacesAfterReset=rlMaxOspfInterfacesAfterReset, rsMaxIpNextHopSetEntriesAfterReset=rsMaxIpNextHopSetEntriesAfterReset, rsMaxIpNFftEntries=rsMaxIpNFftEntries, rsRadiusMemoryPoolSizeAfterReset=rsRadiusMemoryPoolSizeAfterReset, rsMaxRmonLogEntriesAfterReset=rsMaxRmonLogEntriesAfterReset, rsDiagnosticTextSource=rsDiagnosticTextSource, rlDependendFeaturesEnabledAfterReset=rlDependendFeaturesEnabledAfterReset, rsMaxDspClntEntriesTuning=rsMaxDspClntEntriesTuning, rsMaxPigmpRouteEntries=rsMaxPigmpRouteEntries, rsMaxIpFrwEntries=rsMaxIpFrwEntries, eventNum=eventNum, rlTuningParamsName=rlTuningParamsName, rsMaxVlansEntries=rsMaxVlansEntries, rlMaxOspfNeighbors=rlMaxOspfNeighbors, rsMaxIgmpCacheEntriesAfterReset=rsMaxIgmpCacheEntriesAfterReset, rsMaxDvmrpMRouteEntries=rsMaxDvmrpMRouteEntries, rlMaxOspfNetsInAs=rlMaxOspfNetsInAs, rsMaxIpmFftEntries=rsMaxIpmFftEntries, rsRadiusTuning=rsRadiusTuning, rlSyslogCacheSize=rlSyslogCacheSize, rsMaxTraceRouteProbeHistoryEntriesAfterReset=rsMaxTraceRouteProbeHistoryEntriesAfterReset, rsTcpTuning=rsTcpTuning, rsMaxIpSFftEntriesAfterReset=rsMaxIpSFftEntriesAfterReset, rsMaxIpxSFftEntries=rsMaxIpxSFftEntries, rsMaxDvmrpInterfaceEntriesAfterReset=rsMaxDvmrpInterfaceEntriesAfterReset, rsDiagnosticsCode=rsDiagnosticsCode, rsMaxIpInterfaces=rsMaxIpInterfaces, rlVlanTuning=rlVlanTuning, rsMaxTraceRouteControEntriesAfterReset=rsMaxTraceRouteControEntriesAfterReset, rsRadiusMemoryPoolSize=rsRadiusMemoryPoolSize, rsMaxSnmpCommunityEntries=rsMaxSnmpCommunityEntries, rsMaxPolicySimpleMibMaxRulesEntriesAfterReset=rsMaxPolicySimpleMibMaxRulesEntriesAfterReset, rlSyslogFilePercentToDeleteWhenCompacting=rlSyslogFilePercentToDeleteWhenCompacting, rsMaxIpxSFftSysEntries=rsMaxIpxSFftSysEntries, rsMaxSnmpTuning=rsMaxSnmpTuning, rsMaxIpEcmpEntrySizeAfterReset=rsMaxIpEcmpEntrySizeAfterReset, rsMaxIpNextHopSetEntries=rsMaxIpNextHopSetEntries, rsMaxArpEntriesTuning=rsMaxArpEntriesTuning, rsTcpMemoryPoolSizeAfterReset=rsTcpMemoryPoolSizeAfterReset, reaIpForwardEnable=reaIpForwardEnable, rsTcpMemoryPoolSize=rsTcpMemoryPoolSize, rsMaxPimNeighborEntriesAfterReset=rsMaxPimNeighborEntriesAfterReset, reaTunning=reaTunning, rsMaxIpxSapEntriesAfterReset=rsMaxIpxSapEntriesAfterReset, rsConfirmMessagTab=rsConfirmMessagTab, rlMaxOspfAbrPerArea=rlMaxOspfAbrPerArea, rsMaxDhcpTuning=rsMaxDhcpTuning, rsMaxPigmpTuning=rsMaxPigmpTuning, rsMaxTraceRouteControlEntries=rsMaxTraceRouteControlEntries, rsMaxPigmpRouteEntriesAfterReset=rsMaxPigmpRouteEntriesAfterReset, rsMaxVlansTuning=rsMaxVlansTuning, rlMaxNumberOfAccessRules=rlMaxNumberOfAccessRules, rsMaxPimInterfaceEntries=rsMaxPimInterfaceEntries, rsMaxSizeOfSocketDataPool=rsMaxSizeOfSocketDataPool, rsMaxArpEntriesAfterReset=rsMaxArpEntriesAfterReset, rsMaxRmonTuning=rsMaxRmonTuning, rlVlanDefaultVID=rlVlanDefaultVID, rlVlanDefaultVIDAfterReset=rlVlanDefaultVIDAfterReset, rsMaxDvmrpRouteEntriesAfterReset=rsMaxDvmrpRouteEntriesAfterReset, rsMaxIpEcmpEntrySize=rsMaxIpEcmpEntrySize, rsMaxEntriesTuning=rsMaxEntriesTuning, rsMaxSnmpCommunityEntriesAfterReset=rsMaxSnmpCommunityEntriesAfterReset, rsDiagnosticsLocation=rsDiagnosticsLocation, rsMaxArpEntries=rsMaxArpEntries, rlTuningParamsTable=rlTuningParamsTable, rsMaxIpNFftSysEntriesAfterReset=rsMaxIpNFftSysEntriesAfterReset, rsMaxNumberOfSocketsAfterReset=rsMaxNumberOfSocketsAfterReset, rsMaxPolicyTuning=rsMaxPolicyTuning, rlMaxDnsClCacheRREntriesAfterReset=rlMaxDnsClCacheRREntriesAfterReset, rsMaxNumberOfSockets=rsMaxNumberOfSockets, rsMultiSessionMaxSessionsAfterReset=rsMultiSessionMaxSessionsAfterReset, rlMaxOspfAreas=rlMaxOspfAreas, rsDiagnosticsText=rsDiagnosticsText, rsMaxDvmrpMRouteEntriesAfterReset=rsMaxDvmrpMRouteEntriesAfterReset, rsMaxIpInterfaceTuning=rsMaxIpInterfaceTuning, rsIpmFftAging=rsIpmFftAging, rlMaxDnsClNCacheErrEntriesAfterReset=rlMaxDnsClNCacheErrEntriesAfterReset, rlTuningParamsDefaultValue=rlTuningParamsDefaultValue, rsMaxIpmFftEntriesAfterReset=rsMaxIpmFftEntriesAfterReset, rsMaxTraceRouteTuning=rsMaxTraceRouteTuning, rlSshTuning=rlSshTuning, rlTuningParamsAfterResetValue=rlTuningParamsAfterResetValue, rsMaxNumberRpAddresesInGroupRangeAfterReset=rsMaxNumberRpAddresesInGroupRangeAfterReset, rsMaxPimSmRouteEntriesAfterReset=rsMaxPimSmRouteEntriesAfterReset, rlMngInfTuning=rlMngInfTuning, rsHighPriority=rsHighPriority, rsMaxIpForwardingEntriesTuning=rsMaxIpForwardingEntriesTuning, rsMaxIpxForwardingEntriesTuning=rsMaxIpxForwardingEntriesTuning, rsMaxIgmpSnoopGroupEntriesAfterReset=rsMaxIgmpSnoopGroupEntriesAfterReset, rsMaxPimRouteNextHopEntries=rsMaxPimRouteNextHopEntries, rsMaxIpNFftSysEntries=rsMaxIpNFftSysEntries, rsMaxIpEcmpTuning=rsMaxIpEcmpTuning, rsMaxIpSFftSysEntriesAfterReset=rsMaxIpSFftSysEntriesAfterReset, rlTuningParamsCurrentValue=rlTuningParamsCurrentValue, rsMaxPimInterfaceEntriesAfterReset=rsMaxPimInterfaceEntriesAfterReset, rsDiagnosticsRequestId=rsDiagnosticsRequestId, rsMaxDspClntEntries=rsMaxDspClntEntries, rsMaxRmonLogEntries=rsMaxRmonLogEntries, rsMaxPimRouteEntries=rsMaxPimRouteEntries, rsMaxIpFrwEntriesAfterReset=rsMaxIpFrwEntriesAfterReset, rsMaxPimRouteEntriesAfterReset=rsMaxPimRouteEntriesAfterReset, rsDiagnosticsEntry=rsDiagnosticsEntry, rsMaxRmonEtherHistoryEntriesAfterReset=rsMaxRmonEtherHistoryEntriesAfterReset, eventMessageTable=eventMessageTable, rlHostParamEntry=rlHostParamEntry, rsMaxIgmpCacheEntries=rsMaxIgmpCacheEntries, rsMaxDvmrpInterfaceEntries=rsMaxDvmrpInterfaceEntries, rsMaxNumberRpAddresesInGroupRange=rsMaxNumberRpAddresesInGroupRange, rsMaxTraceRouteProbeHistoryEntries=rsMaxTraceRouteProbeHistoryEntries, rsMaxPolicyMaxRulesEntries=rsMaxPolicyMaxRulesEntries, rsMaxIpRouteTuning=rsMaxIpRouteTuning, rsMaxDvmrpRouteEntries=rsMaxDvmrpRouteEntries, rsMaxIpNFftEntriesAfterReset=rsMaxIpNFftEntriesAfterReset, rsMaxPolicyMaxRulesEntriesAfterReset=rsMaxPolicyMaxRulesEntriesAfterReset, rsMaxGvrpVlans=rsMaxGvrpVlans, rlDependendFeaturesEnableTuning=rlDependendFeaturesEnableTuning, reaIpxForwardEnable=reaIpxForwardEnable, rlMaxOspfAreasAfterReset=rlMaxOspfAreasAfterReset, rsMaxDvmrpNeighborEntries=rsMaxDvmrpNeighborEntries, rsMaxPimSmRPSetEntries=rsMaxPimSmRPSetEntries, rsMaxPolicySimpleMibMaxProfilesEntries=rsMaxPolicySimpleMibMaxProfilesEntries, rsLowPriority=rsLowPriority, rsMaxIpxFrwEntries=rsMaxIpxFrwEntries, rlDependendFeaturesEnabled=rlDependendFeaturesEnabled, rlHostParamName=rlHostParamName, rsMaxIpmTuning=rsMaxIpmTuning, rsMultiSession=rsMultiSession, rsMaxIpxNFftEntries=rsMaxIpxNFftEntries, rlTuningParamsMinimalValue=rlTuningParamsMinimalValue, eventMessageEntry=eventMessageEntry, rlMaxOspfNetsInAsAfterReset=rlMaxOspfNetsInAsAfterReset, rsMaxGvrpVlansAfterReset=rsMaxGvrpVlansAfterReset, rsMaxIgmpInterfaceEntriesAfterReset=rsMaxIgmpInterfaceEntriesAfterReset, rsDiagnosticsTable=rsDiagnosticsTable, rsMaxPolicySimpleMibMaxRulesEntries=rsMaxPolicySimpleMibMaxRulesEntries, rsTunning=rsTunning, rsMaxIpxSFftEntriesAfterReset=rsMaxIpxSFftEntriesAfterReset, rsMaxIpSFftSysEntries=rsMaxIpSFftSysEntries, rlSshMaxAuthorizedKeysAfterReset=rlSshMaxAuthorizedKeysAfterReset, rsMaxIpInterfacesAfterReset=rsMaxIpInterfacesAfterReset, rlSshMaxAuthorizedKeys=rlSshMaxAuthorizedKeys, rsMaxIpSFftEntries=rsMaxIpSFftEntries, rsMaxIpPrefixesAfterReset=rsMaxIpPrefixesAfterReset, rsMaxPimNeighborEntries=rsMaxPimNeighborEntries, rsMaxDhcpConnsAfterReset=rsMaxDhcpConnsAfterReset, rlMaxDnsClNCacheErrEntries=rlMaxDnsClNCacheErrEntries, rsDbgLevel=rsDbgLevel, rlOspfTuning=rlOspfTuning, rsMaxIpxFftEntriesTuning=rsMaxIpxFftEntriesTuning, rlMaxDnsClNamesEntries=rlMaxDnsClNamesEntries, rsMaxIpxNFftSysEntries=rsMaxIpxNFftSysEntries, rsMaxPimSmCRPEntriesAfterReset=rsMaxPimSmCRPEntriesAfterReset, rsMaxIgmpTuning=rsMaxIgmpTuning, rsMaxIpFftEntriesTuning=rsMaxIpFftEntriesTuning, rsMaxdot1xEapRequestEntriesAfterReset=rsMaxdot1xEapRequestEntriesAfterReset, rlHostParamTable=rlHostParamTable, rlMaxOspfInterfaces=rlMaxOspfInterfaces, rsMaxIpxFrwEntriesAfterReset=rsMaxIpxFrwEntriesAfterReset, rsMaxIgmpSnoopGroupEntries=rsMaxIgmpSnoopGroupEntries, rsMaxPimSmCRPEntries=rsMaxPimSmCRPEntries, rsMaxSizeOfSocketDataPoolAfterReset=rsMaxSizeOfSocketDataPoolAfterReset, rlSyslogCacheSizeAfterReset=rlSyslogCacheSizeAfterReset, eventDesc=eventDesc, rlTuningParamsEntry=rlTuningParamsEntry, rsMaxPimSmRouteEntries=rsMaxPimSmRouteEntries, rsMaxPimSmInterfaceEntriesAfterReset=rsMaxPimSmInterfaceEntriesAfterReset, rsMaxPimSmNeighborEntriesAfterReset=rsMaxPimSmNeighborEntriesAfterReset, rlMaxOspfAbrPerAreaAfterReset=rlMaxOspfAbrPerAreaAfterReset, rsMaxBrgFrwEntriesAfterReset=rsMaxBrgFrwEntriesAfterReset, rsMaxdot1xEapRequestEntries=rsMaxdot1xEapRequestEntries, rsMaxDspClntEntriesAfterReset=rsMaxDspClntEntriesAfterReset, PYSNMP_MODULE_ID=rsTunning, rsMaxIpxNFftSysEntriesAfterReset=rsMaxIpxNFftSysEntriesAfterReset, rsMaxIpPrefixes=rsMaxIpPrefixes, rlSyslogFilePercentToDeleteWhenCompactingAfterReset=rlSyslogFilePercentToDeleteWhenCompactingAfterReset, rlMaxNumberOfAccessRulesAfterReset=rlMaxNumberOfAccessRulesAfterReset, rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset=rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset, rsMaxIpmFftEntriesTuning=rsMaxIpmFftEntriesTuning, rsMultiSessionMaxSessions=rsMultiSessionMaxSessions, rsMaxIgmpSnoopTuning=rsMaxIgmpSnoopTuning, rlMaxDnsClCacheRREntries=rlMaxDnsClCacheRREntries, rsMaxIpNextHopEntriesAfterReset=rsMaxIpNextHopEntriesAfterReset, rsMaxPimSmInterfaceEntries=rsMaxPimSmInterfaceEntries, rsMaxPimSmTuning=rsMaxPimSmTuning, rsMaxBridgeForwardingEntriesTuning=rsMaxBridgeForwardingEntriesTuning, rsMaxDhcpConns=rsMaxDhcpConns, rlSyslogTuning=rlSyslogTuning, rlHostParamValue=rlHostParamValue, rsMaxPimSmNeighborEntries=rsMaxPimSmNeighborEntries, rsMaxIpxNFftEntriesAfterReset=rsMaxIpxNFftEntriesAfterReset)
