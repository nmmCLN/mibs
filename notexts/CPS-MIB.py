#
# PySNMP MIB module CPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cyberpower/CPS-MIB
# Produced by pysmi-1.1.8 at Mon Sep 19 07:24:18 2022
# On host fv-az215-626 platform Linux version 5.15.0-1019-azure by user runner
# Using Python version 3.10.6 (main, Aug  3 2022, 07:09:11) [GCC 9.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, NotificationType, enterprises, Integer32, NotificationType, Gauge32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Bits, IpAddress, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "enterprises", "Integer32", "NotificationType", "Gauge32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Bits", "IpAddress", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cps = MibIdentifier((1, 3, 6, 1, 4, 1, 3808))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1))
cpsmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 1))
mtrapinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 2))
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1))
eswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2))
ePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3))
environmentSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4))
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5))
ePDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6))
battmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7))
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7))
upsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8))
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9))
upsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 10))
upsBaseIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1))
upsAdvanceIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2))
upsBaseBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1))
upsAdvanceBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2))
upsBaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 1))
upsAdvanceInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2))
upsBaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1))
upsAdvanceOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2))
upsBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1))
upsAdvanceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2))
upsBaseControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 1))
upsAdvanceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2))
upsBaseTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 1))
upsAdvanceTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2))
upsBankOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1))
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1))
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2))
upsPhaseBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3))
eSwitchIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1))
eSwitchBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2))
ePDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1))
ePDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2))
ePDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3))
ePDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4))
ePDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5))
ePDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1))
ePDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2))
ePDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3))
ePDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4))
ePDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1))
ePDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2))
ePDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3))
ePDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4))
ePDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5))
ePDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6))
ePDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1))
envirIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1))
envirTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2))
envirHumid = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3))
envirContact = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1))
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2))
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3))
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4))
atsLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5))
atsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6))
atsStatusDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1))
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2))
atsLoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1))
atsLoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2))
atsLoadConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3))
atsOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1))
ePDU2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2))
ePDU2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3))
ePDU2Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4))
ePDU2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5))
ePDU2Outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6))
ePDU2OutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1))
ePDU2OutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2))
ePDU2Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 7))
ePDU2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8))
bmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1))
bmProperty = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2))
bmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3))
bmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4))
bmProbes = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5))
bmFuncRes = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6))
bmFuncEqual = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7))
bmFuncResMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1))
mconfigNumTrapAccepters = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigNumTrapAccepters.setStatus('mandatory')
mconfigTrapAccepterTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2), )
if mibBuilder.loadTexts: mconfigTrapAccepterTable.setStatus('mandatory')
mconfigTrapAccepterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "trapIndex"))
if mibBuilder.loadTexts: mconfigTrapAccepterEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
accepterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accepterAddr.setStatus('mandatory')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('mandatory')
severityDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severityDegree.setStatus('mandatory')
accepterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accepterActive.setStatus('mandatory')
mconfigDHCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigDHCPEnabled.setStatus('mandatory')
mconfigMyAddr = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigMyAddr.setStatus('mandatory')
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockDate.setStatus('mandatory')
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockTime.setStatus('mandatory')
mtrapinfoInteger = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoInteger.setStatus('mandatory')
mtrapinfoIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoIpAddress.setStatus('mandatory')
mtrapinfoString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoString.setStatus('mandatory')
mtrapinfoGauge = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoGauge.setStatus('mandatory')
mtrapinfoTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoTimeTicks.setStatus('mandatory')
mtrapinfoBmEventId = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoBmEventId.setStatus('mandatory')
mcontrolRestart = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("restartCurrentSystem", 2), ("restartCurrentAgent", 3), ("restartCurrentSystemAndAgent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolRestart.setStatus('mandatory')
mcontrolReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("resetCurrentSystem", 2), ("resetCurrentAgent", 3), ("resetCurrentSystemAndAgent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolReset.setStatus('mandatory')
upsBaseIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseIdentModel.setStatus('mandatory')
upsBaseIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseIdentName.setStatus('mandatory')
upsAdvanceIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentFirmwareRevision.setStatus('mandatory')
upsAdvanceIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentDateOfManufacture.setStatus('mandatory')
upsAdvanceIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentSerialNumber.setStatus('mandatory')
upsAdvanceIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentAgentFirmwareRevision.setStatus('mandatory')
upsAdvanceIdentLCDFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentLCDFirmwareVersion.setStatus('mandatory')
upsAdvanceIdentPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentPowerRating.setStatus('mandatory')
upsAdvanceIdentLoadPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentLoadPower.setStatus('mandatory')
upsAdvanceIdentCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentCurrentRating.setStatus('mandatory')
upsAdvanceIdentAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentAgentSerialNumber.setStatus('mandatory')
upsBaseBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryNotPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryStatus.setStatus('mandatory')
upsBaseBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setStatus('mandatory')
upsBaseBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setStatus('mandatory')
upsBaseBatteryAgeRecommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryAgeRecommand.setStatus('mandatory')
upsAdvanceBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryCapacity.setStatus('mandatory')
upsAdvanceBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryVoltage.setStatus('mandatory')
upsAdvanceBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryTemperature.setStatus('mandatory')
upsAdvanceBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryRunTimeRemaining.setStatus('mandatory')
upsAdvanceBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryReplaceIndicator.setStatus('mandatory')
upsAdvanceBatteryFullChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryFullChargeVoltage.setStatus('mandatory')
upsAdvanceBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryCurrent.setStatus('mandatory')
upsAdvanceBatteryVoltageRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryVoltageRating.setStatus('mandatory')
upsAdvanceBatteryLife = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryLife.setStatus('mandatory')
upsBaseInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseInputPhase.setStatus('mandatory')
upsAdvanceInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputLineVoltage.setStatus('mandatory')
upsAdvanceInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputMaxLineVoltage.setStatus('mandatory')
upsAdvanceInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputMinLineVoltage.setStatus('mandatory')
upsAdvanceInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputFrequency.setStatus('mandatory')
upsAdvanceInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("selfTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputLineFailCause.setStatus('mandatory')
upsAdvanceInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("overVoltage", 2), ("underVoltage", 3), ("frequencyFailure", 4), ("blackout", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputStatus.setStatus('mandatory')
upsBaseOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBoost", 4), ("onSleep", 5), ("off", 6), ("rebooting", 7), ("onECO", 8), ("onBypass", 9), ("onBuck", 10), ("onOverload", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputStatus.setStatus('mandatory')
upsBaseOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputPhase.setStatus('mandatory')
upsBaseOutputWorkingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputWorkingFrequency.setStatus('mandatory')
upsAdvanceOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputVoltage.setStatus('mandatory')
upsAdvanceOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputFrequency.setStatus('mandatory')
upsAdvanceOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputLoad.setStatus('mandatory')
upsAdvanceOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputCurrent.setStatus('mandatory')
upsAdvanceOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputPower.setStatus('mandatory')
upsBaseConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setStatus('mandatory')
upsBaseConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setStatus('mandatory')
upsBaseConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "deviceIndex"))
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setStatus('mandatory')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRating.setStatus('mandatory')
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisDevice.setStatus('mandatory')
upsAdvanceConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigOutputVoltage.setStatus('mandatory')
upsAdvanceConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigHighTransferVolt.setStatus('mandatory')
upsAdvanceConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowTransferVolt.setStatus('mandatory')
upsAdvanceConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timed", 1), ("enable", 2), ("disable", 3), ("mute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAlarm.setStatus('mandatory')
upsAdvanceConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAlarmTimer.setStatus('mandatory')
upsAdvanceConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigMinReturnCapacity.setStatus('mandatory')
upsAdvanceConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSensitivity.setStatus('mandatory')
upsAdvanceConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryRunTime.setStatus('mandatory')
upsAdvanceConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigReturnDelay.setStatus('mandatory')
upsAdvanceConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigShutoffDelay.setStatus('mandatory')
upsAdvanceConfigSleepDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSleepDelay.setStatus('mandatory')
upsAdvanceConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSetEEPROMDefaults.setStatus('mandatory')
upsAdvanceConfigAutoRestore = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAutoRestore.setStatus('mandatory')
upsAdvanceConfigRechargedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigRechargedCapacity.setStatus('mandatory')
upsAdvanceConfigColdStart = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigColdStart.setStatus('mandatory')
upsAdvanceConfigDeepDischargeProtection = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigDeepDischargeProtection.setStatus('mandatory')
upsAdvanceConfigSleepAfterAllClientShut = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSleepAfterAllClientShut.setStatus('mandatory')
upsAdvanceConfigLowBatteryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryThreshold.setStatus('mandatory')
upsBaseControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnOffUpsToConserveBattery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setStatus('mandatory')
upsAdvanceControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2), ("turnUpsOffGracefully", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlUpsOff.setStatus('mandatory')
upsAdvanceControlRebootUps = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRebootUps", 1), ("rebootUps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlRebootUps.setStatus('mandatory')
upsAdvanceControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2), ("putUpsToSleepGracefully", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlUpsSleep.setStatus('mandatory')
upsAdvanceControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlSimulatePowerFail.setStatus('mandatory')
upsAdvanceControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlFlashAndBeep.setStatus('mandatory')
upsAdvanceControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnOnUPS", 1), ("turnOnUPS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlTurnOnUPS.setStatus('mandatory')
upsAdvanceSleepAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceSleepAfterDelay.setStatus('mandatory')
upsAdvanceTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("atTurnOn", 4), ("never", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticSchedule.setStatus('mandatory')
upsAdvanceTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestDiagnostics.setStatus('mandatory')
upsAdvanceTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticsResults.setStatus('mandatory')
upsAdvanceTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestLastDiagnosticsDate.setStatus('mandatory')
upsAdvanceTestIndicators = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestIndicators.setStatus('mandatory')
upsAdvanceTestRuntimeEstimation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPerformEstimation", 1), ("performEstimation", 2), ("cancelCurrentEstimation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestRuntimeEstimation.setStatus('mandatory')
upsAdvanceTestEstimationResults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("invalidEstimation", 2), ("estimationInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestEstimationResults.setStatus('mandatory')
upsAdvanceTestEstimationDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestEstimationDate.setStatus('mandatory')
upsBankOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1), )
if mibBuilder.loadTexts: upsBankOutletControlTable.setStatus('mandatory')
upsBankOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1), ).setIndexNames((0, "CPS-MIB", "upsBankControlIndex"))
if mibBuilder.loadTexts: upsBankOutletControlEntry.setStatus('mandatory')
upsBankControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBankControlIndex.setStatus('mandatory')
upsBankControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("bankNotExist", 3), ("criticalBank", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBankControlOutletCommand.setStatus('mandatory')
upsPhaseInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableSize.setStatus('mandatory')
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2), )
if mibBuilder.loadTexts: upsPhaseInputTable.setStatus('mandatory')
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseInputTableIndex"))
if mibBuilder.loadTexts: upsPhaseInputEntry.setStatus('mandatory')
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableIndex.setStatus('mandatory')
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltage.setStatus('mandatory')
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputCurrent.setStatus('mandatory')
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputFrequency.setStatus('mandatory')
upsPhaseInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPowerFactor.setStatus('mandatory')
upsPhaseOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableSize.setStatus('mandatory')
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2), )
if mibBuilder.loadTexts: upsPhaseOutputTable.setStatus('mandatory')
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseOutputTableIndex"))
if mibBuilder.loadTexts: upsPhaseOutputEntry.setStatus('mandatory')
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableIndex.setStatus('mandatory')
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltage.setStatus('mandatory')
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputCurrent.setStatus('mandatory')
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputFrequency.setStatus('mandatory')
upsPhaseOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPowerFactor.setStatus('mandatory')
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPower.setStatus('mandatory')
upsPhaseBypassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassTableSize.setStatus('mandatory')
upsPhaseBypassTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2), )
if mibBuilder.loadTexts: upsPhaseBypassTable.setStatus('mandatory')
upsPhaseBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseBypassTableIndex"))
if mibBuilder.loadTexts: upsPhaseBypassEntry.setStatus('mandatory')
upsPhaseBypassTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassTableIndex.setStatus('mandatory')
upsPhaseBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassVoltage.setStatus('mandatory')
upsPhaseBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassCurrent.setStatus('mandatory')
upsPhaseBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassFrequency.setStatus('mandatory')
upsPhaseBypassPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassPowerFactor.setStatus('mandatory')
upsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overheat", 2), ("hardwarefault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatus.setStatus('mandatory')
eSwitchIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentHardwareRev.setStatus('mandatory')
eSwitchIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentFirmwareRev.setStatus('mandatory')
eSwitchIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentDateOfManufacture.setStatus('mandatory')
eSwitchIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentModelName.setStatus('mandatory')
eSwitchNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchNumber.setStatus('mandatory')
eSwitchBaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: eSwitchBaseTable.setStatus('mandatory')
eSwitchBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "eSwitchID"))
if mibBuilder.loadTexts: eSwitchBaseEntry.setStatus('mandatory')
eSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchID.setStatus('mandatory')
eSwitchOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchOutletNum.setStatus('mandatory')
eSwitchOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchOutletState.setStatus('mandatory')
eSwitchBaseCtrTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: eSwitchBaseCtrTable.setStatus('mandatory')
eSwitchBaseCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "eSwitchCtrID"))
if mibBuilder.loadTexts: eSwitchBaseCtrEntry.setStatus('mandatory')
eSwitchCtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchCtrID.setStatus('mandatory')
eSwitchActOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchActOutlet.setStatus('mandatory')
eSwitchActType = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchActType.setStatus('mandatory')
ePDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentName.setStatus('mandatory')
ePDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentHardwareRev.setStatus('mandatory')
ePDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentFirmwareRev.setStatus('mandatory')
ePDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDateOfManufacture.setStatus('mandatory')
ePDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentModelNumber.setStatus('mandatory')
ePDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentSerialNumber.setStatus('mandatory')
ePDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceRating.setStatus('mandatory')
ePDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumOutlets.setStatus('mandatory')
ePDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumPhases.setStatus('mandatory')
ePDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumBreakers.setStatus('mandatory')
ePDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceBreakerRating.setStatus('mandatory')
ePDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceOrientation.setStatus('mandatory')
ePDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceOutletLayout.setStatus('mandatory')
ePDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ("displayRotate90", 3), ("displayRotate270", 4), ("displayAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentDeviceDisplayOrientation.setStatus('mandatory')
ePDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentDeviceLinetoLineVoltage.setStatus('mandatory')
ePDUIdentIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentIndicator.setStatus('mandatory')
ePDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxPhaseLoad.setStatus('mandatory')
ePDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevNumPhases.setStatus('mandatory')
ePDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxBankLoad.setStatus('mandatory')
ePDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevNumBanks.setStatus('mandatory')
ePDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankTableSize.setStatus('mandatory')
ePDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6), )
if mibBuilder.loadTexts: ePDULoadDevBankTable.setStatus('mandatory')
ePDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadDevBankIndex"))
if mibBuilder.loadTexts: ePDULoadDevBankEntry.setStatus('mandatory')
ePDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankIndex.setStatus('mandatory')
ePDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankNumber.setStatus('mandatory')
ePDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankMaxLoad.setStatus('mandatory')
ePDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTableSize.setStatus('mandatory')
ePDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8), )
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTable.setStatus('mandatory')
ePDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadDevOutletIndex"))
if mibBuilder.loadTexts: ePDULoadDevMaxOutletEntry.setStatus('mandatory')
ePDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevOutletIndex.setStatus('mandatory')
ePDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevOutletNumber.setStatus('mandatory')
ePDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxOutletLoad.setStatus('mandatory')
ePDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: ePDULoadPhaseConfigTable.setStatus('mandatory')
ePDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadPhaseConfigIndex"))
if mibBuilder.loadTexts: ePDULoadPhaseConfigEntry.setStatus('mandatory')
ePDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadPhaseConfigIndex.setStatus('mandatory')
ePDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigLowLoadThreshold.setStatus('mandatory')
ePDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigNearOverloadThreshold.setStatus('mandatory')
ePDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigOverloadThreshold.setStatus('mandatory')
ePDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadPhaseConfigAlarm.setStatus('mandatory')
ePDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: ePDULoadStatusTable.setStatus('mandatory')
ePDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadStatusIndex"))
if mibBuilder.loadTexts: ePDULoadStatusEntry.setStatus('mandatory')
ePDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusIndex.setStatus('mandatory')
ePDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusLoad.setStatus('mandatory')
ePDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loadNormal", 1), ("loadLow", 2), ("loadNearOverload", 3), ("loadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusLoadState.setStatus('mandatory')
ePDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusPhaseNumber.setStatus('mandatory')
ePDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusBankNumber.setStatus('mandatory')
ePDULoadStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusVoltage.setStatus('mandatory')
ePDULoadStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusActivePower.setStatus('mandatory')
ePDULoadStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusApparentPower.setStatus('mandatory')
ePDULoadStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusPowerFactor.setStatus('mandatory')
ePDULoadStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusEnergy.setStatus('mandatory')
ePDULoadStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusEnergyStartTime.setStatus('mandatory')
ePDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: ePDULoadBankConfigTable.setStatus('mandatory')
ePDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadBankConfigIndex"))
if mibBuilder.loadTexts: ePDULoadBankConfigEntry.setStatus('mandatory')
ePDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadBankConfigIndex.setStatus('mandatory')
ePDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigLowLoadThreshold.setStatus('mandatory')
ePDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigNearOverloadThreshold.setStatus('mandatory')
ePDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigOverloadThreshold.setStatus('mandatory')
ePDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadBankConfigAlarm.setStatus('mandatory')
ePDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevCommand.setStatus('mandatory')
ePDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevColdstartDelay.setStatus('mandatory')
ePDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevNumCntrlOutlets.setStatus('mandatory')
ePDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevNumTotalOutlets.setStatus('mandatory')
ePDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevMonitoredOutlets.setStatus('mandatory')
ePDUOutletDevColdstartState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOn", 1), ("previous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevColdstartState.setStatus('mandatory')
ePDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: ePDUOutletPhaseTable.setStatus('mandatory')
ePDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletPhaseIndex"))
if mibBuilder.loadTexts: ePDUOutletPhaseEntry.setStatus('mandatory')
ePDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletPhaseIndex.setStatus('mandatory')
ePDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletPhaseOverloadRestriction.setStatus('mandatory')
ePDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: ePDUOutletControlTable.setStatus('mandatory')
ePDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletControlIndex"))
if mibBuilder.loadTexts: ePDUOutletControlEntry.setStatus('mandatory')
ePDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlIndex.setStatus('mandatory')
ePDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletName.setStatus('mandatory')
ePDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletPhase.setStatus('mandatory')
ePDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7), ("outletIdentify", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletControlOutletCommand.setStatus('mandatory')
ePDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletBank.setStatus('mandatory')
ePDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: ePDUOutletConfigTable.setStatus('mandatory')
ePDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletConfigIndex"))
if mibBuilder.loadTexts: ePDUOutletConfigEntry.setStatus('mandatory')
ePDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigIndex.setStatus('mandatory')
ePDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigOutletName.setStatus('mandatory')
ePDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigOutletPhase.setStatus('mandatory')
ePDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigPowerOnTime.setStatus('mandatory')
ePDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigPowerOffTime.setStatus('mandatory')
ePDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigRebootDuration.setStatus('mandatory')
ePDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigOutletBank.setStatus('mandatory')
ePDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTableSize.setStatus('mandatory')
ePDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTable.setStatus('mandatory')
ePDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletConfigMonitoredIndex"))
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEntry.setStatus('mandatory')
ePDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredIndex.setStatus('mandatory')
ePDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredName.setStatus('mandatory')
ePDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNumber.setStatus('mandatory')
ePDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredLowLoadThreshold.setStatus('mandatory')
ePDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNearOverloadThreshold.setStatus('mandatory')
ePDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredOverloadThreshold.setStatus('mandatory')
ePDUOutletConfigMonitoredPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2), ("notSupport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredPeakLoadReset.setStatus('mandatory')
ePDUOutletConfigMonitoredEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2), ("notSupport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEnergyReset.setStatus('mandatory')
ePDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: ePDUOutletStatusTable.setStatus('mandatory')
ePDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletStatusIndex"))
if mibBuilder.loadTexts: ePDUOutletStatusEntry.setStatus('mandatory')
ePDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusIndex.setStatus('mandatory')
ePDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletName.setStatus('mandatory')
ePDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletPhase.setStatus('mandatory')
ePDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletState.setStatus('mandatory')
ePDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusCommandPending.setStatus('mandatory')
ePDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletBank.setStatus('mandatory')
ePDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusLoad.setStatus('mandatory')
ePDUOutletStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusActivePower.setStatus('mandatory')
ePDUOutletStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusAlarm.setStatus('mandatory')
ePDUOutletStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPower.setStatus('mandatory')
ePDUOutletStatusPeakPowerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerTime.setStatus('mandatory')
ePDUOutletStatusPeakPowerStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerStart.setStatus('mandatory')
ePDUOutletStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusEnergy.setStatus('mandatory')
ePDUOutletStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusEnergyStartTime.setStatus('mandatory')
ePDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1), )
if mibBuilder.loadTexts: ePDUOutletBankTable.setStatus('mandatory')
ePDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletBankIndex"))
if mibBuilder.loadTexts: ePDUOutletBankEntry.setStatus('mandatory')
ePDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletBankIndex.setStatus('mandatory')
ePDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletBankOverloadRestriction.setStatus('mandatory')
ePDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOneOk", 1), ("powerSupplyOneFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupply1Status.setStatus('mandatory')
ePDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powerSupplyTwoOk", 1), ("powerSupplyTwoFailed", 2), ("powerSupplyTwoNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupply2Status.setStatus('mandatory')
ePDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyOneFailed", 2), ("powerSupplyTwoFailed", 3), ("powerSupplyOneandTwoFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupplyAlarm.setStatus('mandatory')
ePDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankTableSize.setStatus('mandatory')
ePDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: ePDUStatusBankTable.setStatus('mandatory')
ePDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusBankIndex"))
if mibBuilder.loadTexts: ePDUStatusBankEntry.setStatus('mandatory')
ePDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankIndex.setStatus('mandatory')
ePDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankNumber.setStatus('mandatory')
ePDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bankLoadNormal", 1), ("bankLoadLow", 2), ("bankLoadNearOverload", 3), ("bankLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankState.setStatus('mandatory')
ePDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseTableSize.setStatus('mandatory')
ePDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4), )
if mibBuilder.loadTexts: ePDUStatusPhaseTable.setStatus('mandatory')
ePDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusPhaseIndex"))
if mibBuilder.loadTexts: ePDUStatusPhaseEntry.setStatus('mandatory')
ePDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseIndex.setStatus('mandatory')
ePDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseNumber.setStatus('mandatory')
ePDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseState.setStatus('mandatory')
ePDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletTableSize.setStatus('mandatory')
ePDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6), )
if mibBuilder.loadTexts: ePDUStatusOutletTable.setStatus('mandatory')
ePDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusOutletIndex"))
if mibBuilder.loadTexts: ePDUStatusOutletEntry.setStatus('mandatory')
ePDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletIndex.setStatus('mandatory')
ePDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletNumber.setStatus('mandatory')
ePDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outletLoadNormal", 1), ("outletLoadLow", 2), ("outletLoadNearOverload", 3), ("outletLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletState.setStatus('mandatory')
ePDUStatusInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusInputVoltage.setStatus('mandatory')
ePDUStatusInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusInputFrequency.setStatus('mandatory')
envirIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirIdentName.setStatus('mandatory')
envirIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirIdentLocation.setStatus('mandatory')
envirTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirTemperature.setStatus('mandatory')
envirTempHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempHighThreshold.setStatus('mandatory')
envirTempLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempLowThreshold.setStatus('mandatory')
envirTempRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempRateOfChange.setStatus('mandatory')
envirTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempHysteresis.setStatus('mandatory')
envirTemperatureCelsius = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirTemperatureCelsius.setStatus('mandatory')
envirTempCelsiusHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusHighThreshold.setStatus('mandatory')
envirTempCelsiusLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusLowThreshold.setStatus('mandatory')
envirTempCelsiusRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusRateOfChange.setStatus('mandatory')
envirTempCelsiusHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusHysteresis.setStatus('mandatory')
envirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirHumidity.setStatus('mandatory')
envirHumidHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidHighThreshold.setStatus('mandatory')
envirHumidLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidLowThreshold.setStatus('mandatory')
envirHumidRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidRateOfChange.setStatus('mandatory')
envirHumidHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidHysteresis.setStatus('mandatory')
envirContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactTableSize.setStatus('mandatory')
envirContactTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2), )
if mibBuilder.loadTexts: envirContactTable.setStatus('mandatory')
envirContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "CPS-MIB", "envirContactIndex"))
if mibBuilder.loadTexts: envirContactEntry.setStatus('mandatory')
envirContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactIndex.setStatus('mandatory')
envirContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirContactName.setStatus('mandatory')
envirContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("contactNormal", 1), ("contactAbnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactStatus.setStatus('mandatory')
envirContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalOpen", 1), ("normalClose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirContactNormalState.setStatus('mandatory')
atsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsIdentName.setStatus('mandatory')
atsIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentModelName.setStatus('mandatory')
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentHardwareRev.setStatus('mandatory')
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareRev.setStatus('mandatory')
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentSerialNumber.setStatus('mandatory')
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDateOfManufacture.setStatus('mandatory')
atsIdentDeviceRatingVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRatingVoltage.setStatus('mandatory')
atsIdentDeviceRatingCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRatingCurrent.setStatus('mandatory')
atsIdentDeviceOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceOutletNum.setStatus('mandatory')
atsIdentAgentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentModelName.setStatus('mandatory')
atsIdentAgentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentHardwareRevision.setStatus('mandatory')
atsIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentFirmwareRevision.setStatus('mandatory')
atsIdentAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentSerialNumber.setStatus('mandatory')
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atsNeverDiscovered", 1), ("atsCommEstablished", 2), ("atsCommLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusCommStatus.setStatus('mandatory')
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSelectedSource.setStatus('mandatory')
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsRedundancyLost", 1), ("atsFullyRedundant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusRedundancyState.setStatus('mandatory')
atsStatusPhaseSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPhaseSyncStatus.setStatus('mandatory')
atsStatusDevSourceRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceRelayNormal", 1), ("sourceRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevSourceRelayStatus.setStatus('mandatory')
atsStatusDevInRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputRelayNormal", 1), ("inputRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevInRelayStatus.setStatus('mandatory')
atsStatusDevOutRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outputRelayNormal", 1), ("outputRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevOutRelayStatus.setStatus('mandatory')
atsStatusDevLCDCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lcdCommNormal", 1), ("lcdCommFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevLCDCommStatus.setStatus('mandatory')
atsStatusDevDB9CommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("db9CommNormal", 1), ("db9CommFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevDB9CommStatus.setStatus('mandatory')
atsStatusPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10), )
if mibBuilder.loadTexts: atsStatusPowerSupplyTable.setStatus('mandatory')
atsStatusPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusPowerSupplyTableIndex"))
if mibBuilder.loadTexts: atsStatusPowerSupplyEntry.setStatus('mandatory')
atsStatusPowerSupplyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupplyTableIndex.setStatus('mandatory')
atsStatusPowerSupplyInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupplyInputSource.setStatus('mandatory')
atsStatusPowerSupply12VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply12VStatus.setStatus('mandatory')
atsStatusPowerSupply5VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply5VStatus.setStatus('mandatory')
atsStatusPowerSupply3p3VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply3p3VStatus.setStatus('mandatory')
atsStatusInputNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputNum.setStatus('mandatory')
atsStatusInputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2), )
if mibBuilder.loadTexts: atsStatusInputTable.setStatus('mandatory')
atsStatusInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusInputTableIndex"))
if mibBuilder.loadTexts: atsStatusInputEntry.setStatus('mandatory')
atsStatusInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputTableIndex.setStatus('mandatory')
atsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsStatusInputName.setStatus('mandatory')
atsStatusNumInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusNumInputPhase.setStatus('mandatory')
atsStatusInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVoltageOrientation.setStatus('mandatory')
atsStatusInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVoltage.setStatus('mandatory')
atsStatusInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputFrequency.setStatus('mandatory')
atsStatusInputVolState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overVoltage", 2), ("underVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVolState.setStatus('mandatory')
atsStatusInputFreqState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overFrequency", 2), ("underFrequency", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputFreqState.setStatus('mandatory')
atsStatusInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3), )
if mibBuilder.loadTexts: atsStatusInputPhaseTable.setStatus('mandatory')
atsStatusInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusInputPhaseTableIndex"), (0, "CPS-MIB", "atsStatusInputPhaseIndex"))
if mibBuilder.loadTexts: atsStatusInputPhaseEntry.setStatus('mandatory')
atsStatusInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseTableIndex.setStatus('mandatory')
atsStatusInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseIndex.setStatus('mandatory')
atsStatusInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseVoltage.setStatus('mandatory')
atsStatusInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseCurrent.setStatus('mandatory')
atsStatusInputPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhasePower.setStatus('mandatory')
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPreferredSource.setStatus('mandatory')
atsConfigNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigNominalVoltage.setStatus('mandatory')
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigVoltageSensitivity.setStatus('mandatory')
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("medium", 2), ("narrow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigTransferVoltageRange.setStatus('mandatory')
atsConfigNarrowRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigNarrowRangeValue.setStatus('mandatory')
atsConfigMediumRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigMediumRangeValue.setStatus('mandatory')
atsConfigWideRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigWideRangeValue.setStatus('mandatory')
atsConfigFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrequencyDeviation.setStatus('mandatory')
atsConfigDevLCDOffTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigDevLCDOffTime.setStatus('mandatory')
atsCtrlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rboot", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsCtrlResetATS.setStatus('mandatory')
atsCtrlClearEventCounts = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsCtrlClearEventCounts.setStatus('mandatory')
atsLoadDevPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseTableSize.setStatus('mandatory')
atsLoadDevPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2), )
if mibBuilder.loadTexts: atsLoadDevPhaseTable.setStatus('mandatory')
atsLoadDevPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadDevPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadDevPhaseEntry.setStatus('mandatory')
atsLoadDevPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseTableIndex.setStatus('mandatory')
atsLoadDevPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhase.setStatus('mandatory')
atsLoadDevPhaseMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseMaxLoad.setStatus('mandatory')
atsLoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankTableSize.setStatus('mandatory')
atsLoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4), )
if mibBuilder.loadTexts: atsLoadDevBankTable.setStatus('mandatory')
atsLoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadDevBankTableIndex"))
if mibBuilder.loadTexts: atsLoadDevBankEntry.setStatus('mandatory')
atsLoadDevBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankTableIndex.setStatus('mandatory')
atsLoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankMaxLoad.setStatus('mandatory')
atsLoadStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseTableSize.setStatus('mandatory')
atsLoadStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2), )
if mibBuilder.loadTexts: atsLoadStatusPhaseTable.setStatus('mandatory')
atsLoadStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadStatusPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadStatusPhaseEntry.setStatus('mandatory')
atsLoadStatusPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseTableIndex.setStatus('mandatory')
atsLoadStatusPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhase.setStatus('mandatory')
atsLoadStatusPhaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseLoad.setStatus('mandatory')
atsLoadStatusPhaseLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverLoad", 3), ("overLoad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseLoadState.setStatus('mandatory')
atsLoadStatusPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhasePower.setStatus('mandatory')
atsLoadStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankTableSize.setStatus('mandatory')
atsLoadStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4), )
if mibBuilder.loadTexts: atsLoadStatusBankTable.setStatus('mandatory')
atsLoadStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadStatusBankTableIndex"))
if mibBuilder.loadTexts: atsLoadStatusBankEntry.setStatus('mandatory')
atsLoadStatusBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankTableIndex.setStatus('mandatory')
atsLoadStatusBankPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankPhase.setStatus('mandatory')
atsLoadStatusBankLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankLoad.setStatus('mandatory')
atsLoadStatusBankLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverLoad", 3), ("overLoad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankLoadState.setStatus('mandatory')
atsLoadStatusBankPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankPower.setStatus('mandatory')
atsLoadStatusBankEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankEnergy.setStatus('mandatory')
atsLoadStatusBankStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankStartTime.setStatus('mandatory')
atsLoadCfgPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhaseTableSize.setStatus('mandatory')
atsLoadCfgPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2), )
if mibBuilder.loadTexts: atsLoadCfgPhaseTable.setStatus('mandatory')
atsLoadCfgPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadCfgPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadCfgPhaseEntry.setStatus('mandatory')
atsLoadCfgPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhaseTableIndex.setStatus('mandatory')
atsLoadCfgPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhase.setStatus('mandatory')
atsLoadCfgPhaseLowLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseLowLoad.setStatus('mandatory')
atsLoadCfgPhaseNearOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseNearOverLoad.setStatus('mandatory')
atsLoadCfgPhaseOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseOverLoad.setStatus('mandatory')
atsLoadCfgPhaseOutletRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseOutletRestriction.setStatus('mandatory')
atsLoadCfgBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgBankTableSize.setStatus('mandatory')
atsLoadCfgBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4), )
if mibBuilder.loadTexts: atsLoadCfgBankTable.setStatus('mandatory')
atsLoadCfgBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadCfgBankTableIndex"))
if mibBuilder.loadTexts: atsLoadCfgBankEntry.setStatus('mandatory')
atsLoadCfgBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgBankTableIndex.setStatus('mandatory')
atsLoadCfgBankLowLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankLowLoad.setStatus('mandatory')
atsLoadCfgBankNearOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankNearOverLoad.setStatus('mandatory')
atsLoadCfgBankOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankOverLoad.setStatus('mandatory')
atsLoadCfgBankOutletRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankOutletRestriction.setStatus('mandatory')
atsOutletDevTotalOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletDevTotalOutletNum.setStatus('mandatory')
atsOutletDevCtrlOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletDevCtrlOutletNum.setStatus('mandatory')
atsOutletDevColdStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevColdStartDelay.setStatus('mandatory')
atsOutletDevColdStartState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOn", 1), ("previous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevColdStartState.setStatus('mandatory')
atsOutletDevLocalCtrl = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevLocalCtrl.setStatus('mandatory')
atsOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevCommand.setStatus('mandatory')
atsOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusTableSize.setStatus('mandatory')
atsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3), )
if mibBuilder.loadTexts: atsOutletStatusTable.setStatus('mandatory')
atsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletStatusTableIndex"))
if mibBuilder.loadTexts: atsOutletStatusEntry.setStatus('mandatory')
atsOutletStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusTableIndex.setStatus('mandatory')
atsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletName.setStatus('mandatory')
atsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletState.setStatus('mandatory')
atsOutletStatusOutletCmdPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletCmdPending.setStatus('mandatory')
atsOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletPhase.setStatus('mandatory')
atsOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletBank.setStatus('mandatory')
atsOutletCtrlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlTableSize.setStatus('mandatory')
atsOutletCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5), )
if mibBuilder.loadTexts: atsOutletCtrlTable.setStatus('mandatory')
atsOutletCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletCtrlTableIndex"))
if mibBuilder.loadTexts: atsOutletCtrlEntry.setStatus('mandatory')
atsOutletCtrlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlTableIndex.setStatus('mandatory')
atsOutletCtrlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlOutletName.setStatus('mandatory')
atsOutletCtrlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("immediateOn", 2), ("immediateOff", 3), ("immediateReboot", 4), ("delayedOn", 5), ("delayedOff", 6), ("delayedReboot", 7), ("cancelPendingCommand", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCtrlCommand.setStatus('mandatory')
atsOutletCfgTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCfgTableSize.setStatus('mandatory')
atsOutletCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7), )
if mibBuilder.loadTexts: atsOutletCfgTable.setStatus('mandatory')
atsOutletCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletCfgTableIndex"))
if mibBuilder.loadTexts: atsOutletCfgEntry.setStatus('mandatory')
atsOutletCfgTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCfgTableIndex.setStatus('mandatory')
atsOutletCfgOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgOutletName.setStatus('mandatory')
atsOutletCfgPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgPowerOnTime.setStatus('mandatory')
atsOutletCfgPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgPowerOffTime.setStatus('mandatory')
atsOutletCfgRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgRebootDuration.setStatus('mandatory')
ePDU2Role = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("host", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2Role.setStatus('mandatory')
ePDU2IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentTableSize.setStatus('mandatory')
ePDU2IdentTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: ePDU2IdentTable.setStatus('mandatory')
ePDU2IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2IdentIndex"))
if mibBuilder.loadTexts: ePDU2IdentEntry.setStatus('mandatory')
ePDU2IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentIndex.setStatus('mandatory')
ePDU2IdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentModuleIndex.setStatus('mandatory')
ePDU2IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentName.setStatus('mandatory')
ePDU2IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentLocation.setStatus('mandatory')
ePDU2IdentContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentContact.setStatus('mandatory')
ePDU2IdentHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentHardwareRev.setStatus('mandatory')
ePDU2IdentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentFirmwareRev.setStatus('mandatory')
ePDU2IdentDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentDateOfManufacture.setStatus('mandatory')
ePDU2IdentModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentModelName.setStatus('mandatory')
ePDU2IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentSerialNumber.setStatus('mandatory')
ePDU2IdentIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2IdentIndicator.setStatus('mandatory')
ePDU2DeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceTableSize.setStatus('mandatory')
ePDU2DeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2), )
if mibBuilder.loadTexts: ePDU2DeviceConfigTable.setStatus('mandatory')
ePDU2DeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceConfigIndex"))
if mibBuilder.loadTexts: ePDU2DeviceConfigEntry.setStatus('mandatory')
ePDU2DeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceConfigIndex.setStatus('mandatory')
ePDU2DeviceConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceConfigModuleIndex.setStatus('mandatory')
ePDU2DeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigName.setStatus('mandatory')
ePDU2DeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigLocation.setStatus('mandatory')
ePDU2DeviceConfigContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigContact.setStatus('mandatory')
ePDU2DeviceConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ("displayRotate90", 3), ("displayRotate270", 4), ("displayAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigDisplayOrientation.setStatus('mandatory')
ePDU2DeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigColdstartDelay.setStatus('mandatory')
ePDU2DeviceConfigCurrentLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentLowLoadThreshold.setStatus('mandatory')
ePDU2DeviceConfigCurrentNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentNearOverloadThreshold.setStatus('mandatory')
ePDU2DeviceConfigCurrentOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentOverloadThreshold.setStatus('mandatory')
ePDU2DeviceConfigPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("resetAll", 2), ("resetDevice", 3), ("resetOutlets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPeakLoadReset.setStatus('mandatory')
ePDU2DeviceConfigEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("resetAll", 2), ("resetDevice", 3), ("resetOutlets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigEnergyReset.setStatus('mandatory')
ePDU2DeviceConfigPowerLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerLowLoadThreshold.setStatus('mandatory')
ePDU2DeviceConfigPowerNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerNearOverloadThreshold.setStatus('mandatory')
ePDU2DeviceConfigPowerOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerOverloadThreshold.setStatus('mandatory')
ePDU2DeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3), )
if mibBuilder.loadTexts: ePDU2DeviceInfoTable.setStatus('mandatory')
ePDU2DeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceInfoIndex"))
if mibBuilder.loadTexts: ePDU2DeviceInfoEntry.setStatus('mandatory')
ePDU2DeviceInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoIndex.setStatus('mandatory')
ePDU2DeviceInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoModuleIndex.setStatus('mandatory')
ePDU2DeviceInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoName.setStatus('mandatory')
ePDU2DeviceInfoRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoRating.setStatus('mandatory')
ePDU2DeviceInfoNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumOutlets.setStatus('mandatory')
ePDU2DeviceInfoSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoSwitchedOutlets.setStatus('mandatory')
ePDU2DeviceInfoMeteredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoMeteredOutlets.setStatus('mandatory')
ePDU2DeviceInfoNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumPhases.setStatus('mandatory')
ePDU2DeviceInfoNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumBreakers.setStatus('mandatory')
ePDU2DeviceInfoBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoBreakerRating.setStatus('mandatory')
ePDU2DeviceInfoOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoOrientation.setStatus('mandatory')
ePDU2DeviceInfoOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoOutletLayout.setStatus('mandatory')
ePDU2DeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4), )
if mibBuilder.loadTexts: ePDU2DeviceStatusTable.setStatus('mandatory')
ePDU2DeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceStatusIndex"))
if mibBuilder.loadTexts: ePDU2DeviceStatusEntry.setStatus('mandatory')
ePDU2DeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusIndex.setStatus('mandatory')
ePDU2DeviceStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusModuleIndex.setStatus('mandatory')
ePDU2DeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusName.setStatus('mandatory')
ePDU2DeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusLoadState.setStatus('mandatory')
ePDU2DeviceStatusCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentLoad.setStatus('mandatory')
ePDU2DeviceStatusCurrentPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentPeakLoad.setStatus('mandatory')
ePDU2DeviceStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadTimestamp.setStatus('mandatory')
ePDU2DeviceStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadStartTime.setStatus('mandatory')
ePDU2DeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergy.setStatus('mandatory')
ePDU2DeviceStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergyStartTime.setStatus('mandatory')
ePDU2DeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCommandPending.setStatus('mandatory')
ePDU2DeviceStatusPowerSupplyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupplyAlarm.setStatus('mandatory')
ePDU2DeviceStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply1Status.setStatus('mandatory')
ePDU2DeviceStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply2Status.setStatus('mandatory')
ePDU2DeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusApparentPower.setStatus('mandatory')
ePDU2DeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerFactor.setStatus('mandatory')
ePDU2DeviceStatusRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("host", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusRoleType.setStatus('mandatory')
ePDU2DeviceStatusPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerLoad.setStatus('mandatory')
ePDU2DeviceStatusPowerPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerPeakLoad.setStatus('mandatory')
ePDU2DeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5), )
if mibBuilder.loadTexts: ePDU2DeviceControlTable.setStatus('mandatory')
ePDU2DeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceControlIndex"))
if mibBuilder.loadTexts: ePDU2DeviceControlEntry.setStatus('mandatory')
ePDU2DeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlIndex.setStatus('mandatory')
ePDU2DeviceControlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlModuleIndex.setStatus('mandatory')
ePDU2DeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlName.setStatus('mandatory')
ePDU2DeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateAllOn", 1), ("immediateAllOff", 2), ("immediateAllReboot", 3), ("delayedAllOn", 4), ("delayedAllOff", 5), ("delayedAllReboot", 6), ("cancelAllPendingCommand", 7), ("noCommand", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceControlCommand.setStatus('mandatory')
ePDU2PhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseTableSize.setStatus('mandatory')
ePDU2PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: ePDU2PhaseConfigTable.setStatus('mandatory')
ePDU2PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseConfigIndex"))
if mibBuilder.loadTexts: ePDU2PhaseConfigEntry.setStatus('mandatory')
ePDU2PhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigIndex.setStatus('mandatory')
ePDU2PhaseConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigModuleIndex.setStatus('mandatory')
ePDU2PhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigNumber.setStatus('mandatory')
ePDU2PhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", -1), ("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadRestriction.setStatus('mandatory')
ePDU2PhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigLowLoadThreshold.setStatus('mandatory')
ePDU2PhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigNearOverloadThreshold.setStatus('mandatory')
ePDU2PhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadThreshold.setStatus('mandatory')
ePDU2PhaseConfigPhasePeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigPhasePeakLoadReset.setStatus('mandatory')
ePDU2PhaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3), )
if mibBuilder.loadTexts: ePDU2PhaseInfoTable.setStatus('mandatory')
ePDU2PhaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseInfoIndex"))
if mibBuilder.loadTexts: ePDU2PhaseInfoEntry.setStatus('mandatory')
ePDU2PhaseInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoIndex.setStatus('mandatory')
ePDU2PhaseInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoModuleIndex.setStatus('mandatory')
ePDU2PhaseInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoNumber.setStatus('mandatory')
ePDU2PhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4), )
if mibBuilder.loadTexts: ePDU2PhaseStatusTable.setStatus('mandatory')
ePDU2PhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseStatusIndex"))
if mibBuilder.loadTexts: ePDU2PhaseStatusEntry.setStatus('mandatory')
ePDU2PhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusIndex.setStatus('mandatory')
ePDU2PhaseStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusModuleIndex.setStatus('mandatory')
ePDU2PhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusNumber.setStatus('mandatory')
ePDU2PhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLoadState.setStatus('mandatory')
ePDU2PhaseStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLoad.setStatus('mandatory')
ePDU2PhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusVoltage.setStatus('mandatory')
ePDU2PhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPower.setStatus('mandatory')
ePDU2PhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusApparentPower.setStatus('mandatory')
ePDU2PhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPowerFactor.setStatus('mandatory')
ePDU2PhaseStatusPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoad.setStatus('mandatory')
ePDU2PhaseStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadTimestamp.setStatus('mandatory')
ePDU2PhaseStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadStartTime.setStatus('mandatory')
ePDU2PhaseStatusLineToLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLineToLineVoltage.setStatus('mandatory')
ePDU2BankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankTableSize.setStatus('mandatory')
ePDU2BankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: ePDU2BankConfigTable.setStatus('mandatory')
ePDU2BankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankConfigIndex"))
if mibBuilder.loadTexts: ePDU2BankConfigEntry.setStatus('mandatory')
ePDU2BankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigIndex.setStatus('mandatory')
ePDU2BankConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigModuleIndex.setStatus('mandatory')
ePDU2BankConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigNumber.setStatus('mandatory')
ePDU2BankConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigOverloadRestriction.setStatus('mandatory')
ePDU2BankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigLowLoadThreshold.setStatus('mandatory')
ePDU2BankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigNearOverloadThreshold.setStatus('mandatory')
ePDU2BankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigOverloadThreshold.setStatus('mandatory')
ePDU2BankConfigPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigPeakLoadReset.setStatus('mandatory')
ePDU2BankInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3), )
if mibBuilder.loadTexts: ePDU2BankInfoTable.setStatus('mandatory')
ePDU2BankInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankInfoIndex"))
if mibBuilder.loadTexts: ePDU2BankInfoEntry.setStatus('mandatory')
ePDU2BankInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoIndex.setStatus('mandatory')
ePDU2BankInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoModuleIndex.setStatus('mandatory')
ePDU2BankInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoNumber.setStatus('mandatory')
ePDU2BankStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4), )
if mibBuilder.loadTexts: ePDU2BankStatusTable.setStatus('mandatory')
ePDU2BankStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankStatusIndex"))
if mibBuilder.loadTexts: ePDU2BankStatusEntry.setStatus('mandatory')
ePDU2BankStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusIndex.setStatus('mandatory')
ePDU2BankStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusModuleIndex.setStatus('mandatory')
ePDU2BankStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusNumber.setStatus('mandatory')
ePDU2BankStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusLoadState.setStatus('mandatory')
ePDU2BankStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusLoad.setStatus('mandatory')
ePDU2BankStatusPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoad.setStatus('mandatory')
ePDU2BankStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadTimestamp.setStatus('mandatory')
ePDU2BankStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadStartTime.setStatus('mandatory')
ePDU2OutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedTableSize.setStatus('mandatory')
ePDU2OutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigTable.setStatus('mandatory')
ePDU2OutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigEntry.setStatus('mandatory')
ePDU2OutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigIndex.setStatus('mandatory')
ePDU2OutletSwitchedConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigModuleIndex.setStatus('mandatory')
ePDU2OutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigNumber.setStatus('mandatory')
ePDU2OutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigName.setStatus('mandatory')
ePDU2OutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOnTime.setStatus('mandatory')
ePDU2OutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOffTime.setStatus('mandatory')
ePDU2OutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigRebootDuration.setStatus('mandatory')
ePDU2OutletSwitchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoTable.setStatus('mandatory')
ePDU2OutletSwitchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedInfoIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoEntry.setStatus('mandatory')
ePDU2OutletSwitchedInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoIndex.setStatus('mandatory')
ePDU2OutletSwitchedInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoModuleIndex.setStatus('mandatory')
ePDU2OutletSwitchedInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoNumber.setStatus('mandatory')
ePDU2OutletSwitchedInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoName.setStatus('mandatory')
ePDU2OutletSwitchedInfoPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoPhaseLayout.setStatus('mandatory')
ePDU2OutletSwitchedInfoBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoBank.setStatus('mandatory')
ePDU2OutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusTable.setStatus('mandatory')
ePDU2OutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusEntry.setStatus('mandatory')
ePDU2OutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusIndex.setStatus('mandatory')
ePDU2OutletSwitchedStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusModuleIndex.setStatus('mandatory')
ePDU2OutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusNumber.setStatus('mandatory')
ePDU2OutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusName.setStatus('mandatory')
ePDU2OutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusState.setStatus('mandatory')
ePDU2OutletSwitchedStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusCommandPending.setStatus('mandatory')
ePDU2OutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlTable.setStatus('mandatory')
ePDU2OutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedControlIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlEntry.setStatus('mandatory')
ePDU2OutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlIndex.setStatus('mandatory')
ePDU2OutletSwitchedControlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlModuleIndex.setStatus('mandatory')
ePDU2OutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlNumber.setStatus('mandatory')
ePDU2OutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlName.setStatus('mandatory')
ePDU2OutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7), ("outletIdentify", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlCommand.setStatus('mandatory')
ePDU2OutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredTableSize.setStatus('mandatory')
ePDU2OutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2), )
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigTable.setStatus('mandatory')
ePDU2OutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredConfigIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigEntry.setStatus('mandatory')
ePDU2OutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigIndex.setStatus('mandatory')
ePDU2OutletMeteredConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigModuleIndex.setStatus('mandatory')
ePDU2OutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNumber.setStatus('mandatory')
ePDU2OutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigName.setStatus('mandatory')
ePDU2OutletMeteredConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigLowLoadThreshold.setStatus('mandatory')
ePDU2OutletMeteredConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNearOverloadThreshold.setStatus('mandatory')
ePDU2OutletMeteredConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigOverloadThreshold.setStatus('mandatory')
ePDU2OutletMeteredInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3), )
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoTable.setStatus('mandatory')
ePDU2OutletMeteredInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredInfoIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoEntry.setStatus('mandatory')
ePDU2OutletMeteredInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoIndex.setStatus('mandatory')
ePDU2OutletMeteredInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoModuleIndex.setStatus('mandatory')
ePDU2OutletMeteredInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoNumber.setStatus('mandatory')
ePDU2OutletMeteredInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoName.setStatus('mandatory')
ePDU2OutletMeteredInfoLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoLayout.setStatus('mandatory')
ePDU2OutletMeteredInfoRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoRating.setStatus('mandatory')
ePDU2OutletMeteredInfoBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoBank.setStatus('mandatory')
ePDU2OutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4), )
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusTable.setStatus('mandatory')
ePDU2OutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredStatusIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEntry.setStatus('mandatory')
ePDU2OutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusIndex.setStatus('mandatory')
ePDU2OutletMeteredStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusModuleIndex.setStatus('mandatory')
ePDU2OutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusNumber.setStatus('mandatory')
ePDU2OutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusName.setStatus('mandatory')
ePDU2OutletMeteredStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusAlarm.setStatus('mandatory')
ePDU2OutletMeteredStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusLoad.setStatus('mandatory')
ePDU2OutletMeteredStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusActivePower.setStatus('mandatory')
ePDU2OutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPower.setStatus('mandatory')
ePDU2OutletMeteredStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerTimestamp.setStatus('mandatory')
ePDU2OutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerStartTime.setStatus('mandatory')
ePDU2OutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergy.setStatus('mandatory')
ePDU2OutletMeteredStatusEnergyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergyStart.setStatus('mandatory')
ePDU2SensorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2SensorTableSize.setStatus('mandatory')
ePDU2GroupNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupNumberOfDevices.setStatus('mandatory')
ePDU2GroupTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupTotalPower.setStatus('mandatory')
ePDU2GroupTotalEnergy = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupTotalEnergy.setStatus('mandatory')
ePDU2GroupEnergyReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2GroupEnergyReset.setStatus('mandatory')
ePDU2GroupPeakRecordReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2GroupPeakRecordReset.setStatus('mandatory')
bmIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentModelName.setStatus('mandatory')
bmIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentHardwareRev.setStatus('mandatory')
bmIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentFirmwareRev.setStatus('mandatory')
bmIdentLCDHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentLCDHardwareRev.setStatus('mandatory')
bmIdentLCDFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentLCDFirmwareRev.setStatus('mandatory')
bmIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentDateOfManufacture.setStatus('mandatory')
bmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentSerialNumber.setStatus('mandatory')
bmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmIdentName.setStatus('mandatory')
bmIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmIdentLocation.setStatus('mandatory')
bmPropertyStringMax = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyStringMax.setStatus('mandatory')
bmPropertyMaxProbeOnString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyMaxProbeOnString.setStatus('mandatory')
bmPropertyInputVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyInputVoltageRange.setStatus('mandatory')
bmPropertyProbesRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("probeUnknown", 1), ("probe2V", 2), ("probe4V", 3), ("probe6V", 4), ("probe12V", 5), ("probeMixed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyProbesRating.setStatus('mandatory')
bmConfigBattAH = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigBattAH.setStatus('mandatory')
bmConfigStringCount = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigStringCount.setStatus('mandatory')
bmConfigProbesCountOnString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigProbesCountOnString.setStatus('mandatory')
bmConfigLowVoltAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold.setStatus('mandatory')
bmConfigHighVoltAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold.setStatus('mandatory')
bmConfigVoltDiffAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigVoltDiffAlarmThreshold.setStatus('mandatory')
bmConfigLowTempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowTempAlarmThreshold.setStatus('mandatory')
bmConfigHighTempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighTempAlarmThreshold.setStatus('mandatory')
bmConfigLowResAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowResAlarmThreshold.setStatus('mandatory')
bmConfigHighResAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighResAlarmThreshold.setStatus('mandatory')
bmConfigLowResWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowResWarnThreshold.setStatus('mandatory')
bmConfigHighResWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighResWarnThreshold.setStatus('mandatory')
bmConfigResHealthAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigResHealthAlarmThreshold.setStatus('mandatory')
bmConfigResHealthWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigResHealthWarnThreshold.setStatus('mandatory')
bmConfigLowVoltAlarmThreshold10mV = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold10mV.setStatus('mandatory')
bmConfigHighVoltAlarmThreshold10mV = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold10mV.setStatus('mandatory')
bmConfigMergeFeature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigMergeFeature.setStatus('mandatory')
bmControlSysytemIdenticator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmControlSysytemIdenticator.setStatus('mandatory')
bmControlProbeIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmControlProbeIndicator.setStatus('mandatory')
bmProbesNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesNum.setStatus('mandatory')
bmProbesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTableSize.setStatus('mandatory')
bmProbesTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3), )
if mibBuilder.loadTexts: bmProbesTable.setStatus('mandatory')
bmProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesIndex"))
if mibBuilder.loadTexts: bmProbesEntry.setStatus('mandatory')
bmProbesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesIndex.setStatus('mandatory')
bmProbesPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesPackIndex.setStatus('mandatory')
bmProbesStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesStringIndex.setStatus('mandatory')
bmProbesBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesBattIndex.setStatus('mandatory')
bmProbesVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageTableSize.setStatus('mandatory')
bmProbesVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5), )
if mibBuilder.loadTexts: bmProbesVoltageTable.setStatus('mandatory')
bmProbesVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesVoltageIndex"))
if mibBuilder.loadTexts: bmProbesVoltageEntry.setStatus('mandatory')
bmProbesVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageIndex.setStatus('mandatory')
bmProbesVoltagePackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltagePackIndex.setStatus('mandatory')
bmProbesVoltageStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageStringIndex.setStatus('mandatory')
bmProbesVoltageBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageBattIndex.setStatus('mandatory')
bmProbesVoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageProbeIndex.setStatus('mandatory')
bmProbesVoltageAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("voltageNormal", 1), ("voltageWarnLow", 2), ("voltageWarnHigh", 3), ("voltageAlarmLow", 4), ("voltageAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageAlarmStatus.setStatus('mandatory')
bmProbesVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltage.setStatus('mandatory')
bmProbesVoltageEqualPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageEqualPercentage.setStatus('mandatory')
bmProbesTempTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempTableSize.setStatus('mandatory')
bmProbesTempTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7), )
if mibBuilder.loadTexts: bmProbesTempTable.setStatus('mandatory')
bmProbesTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesTempIndex"))
if mibBuilder.loadTexts: bmProbesTempEntry.setStatus('mandatory')
bmProbesTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempIndex.setStatus('mandatory')
bmProbesTempPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempPackIndex.setStatus('mandatory')
bmProbesTempStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempStringIndex.setStatus('mandatory')
bmProbesTempBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempBattIndex.setStatus('mandatory')
bmProbesTempProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempProbeIndex.setStatus('mandatory')
bmProbesTempAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temperatureNormal", 1), ("temperatureWarnLow", 2), ("temperatureWarnHigh", 3), ("temperatureAlarmLow", 4), ("temperatureAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempAlarmStatus.setStatus('mandatory')
bmProbesTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTemperature.setStatus('mandatory')
bmProbesResTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResTableSize.setStatus('mandatory')
bmProbesResTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9), )
if mibBuilder.loadTexts: bmProbesResTable.setStatus('mandatory')
bmProbesResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesResIndex"))
if mibBuilder.loadTexts: bmProbesResEntry.setStatus('mandatory')
bmProbesResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResIndex.setStatus('mandatory')
bmProbesResPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResPackIndex.setStatus('mandatory')
bmProbesResStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResStringIndex.setStatus('mandatory')
bmProbesResBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResBattIndex.setStatus('mandatory')
bmProbesResProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResProbeIndex.setStatus('mandatory')
bmProbesResAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("resistanceNormal", 1), ("resistanceWarnLow", 2), ("resistanceWarnHigh", 3), ("resistanceAlarmLow", 4), ("resistanceAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResAlarmStatus.setStatus('mandatory')
bmProbesResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResistance.setStatus('mandatory')
bmProbesResHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResHealth.setStatus('mandatory')
bmFuncResMeasureInterval = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncResMeasureInterval.setStatus('mandatory')
bmFuncResMeasureManualCmd = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noResMeasure", 1), ("resMeasureNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncResMeasureManualCmd.setStatus('mandatory')
bmFuncResMeasureManualResult = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("resNoManualResult", 1), ("resManualProcessing", 2), ("resManualComplete", 3), ("resManualReject", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncResMeasureManualResult.setStatus('mandatory')
bmFuncResMeasureLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncResMeasureLastUpdate.setStatus('mandatory')
bmFuncEqualEnable = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncEqualEnable.setStatus('mandatory')
bmFuncEqualActiveCond = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncEqualActiveCond.setStatus('mandatory')
bmFuncEqualStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("equalActive", 1), ("equalFailed", 2), ("equalNotActive", 3), ("equalNotSupport", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualStatus.setStatus('mandatory')
bmFuncEqualStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualStartTime.setStatus('mandatory')
bmFuncEqualElapseTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualElapseTime.setStatus('mandatory')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,1)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,2)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,3)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,4)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,5)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,6)).setObjects(("CPS-MIB", "mtrapinfoString"))
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,7)).setObjects(("CPS-MIB", "mtrapinfoString"))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,8)).setObjects(("CPS-MIB", "mtrapinfoString"))
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,9)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,10)).setObjects(("CPS-MIB", "mtrapinfoString"))
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,11)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,12)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,13)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,14)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,15)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,16)).setObjects(("CPS-MIB", "mtrapinfoString"))
returnFromOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,17)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBuckOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,18)).setObjects(("CPS-MIB", "mtrapinfoString"))
returnFromOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,19)).setObjects(("CPS-MIB", "mtrapinfoString"))
returnFromDischarged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,20)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsScheduleShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,21)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsEnterSleep = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,22)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,23)).setObjects(("CPS-MIB", "mtrapinfoString"))
returnFromChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,24)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsTurnoffStarted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,25)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,26)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRemoteCommandFailed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,27)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsLostRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,28)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsSignalClientShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,29)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,30)).setObjects(("CPS-MIB", "mtrapinfoString"))
nclBankOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,31)).setObjects(("CPS-MIB", "mtrapinfoString"))
nclBankOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,32)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsCommandCancel = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,33)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsStartBatteryTest = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,34)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRemainRuntimeLowThanThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,35)).setObjects(("CPS-MIB", "mtrapinfoString"))
nclBankStartScheduleOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,36)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsEstimationAbort = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,37)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsHardwareFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,38)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBatteryNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,39)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,40)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsWiringFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,41)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsEnterBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,42)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsReturnFromBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,43)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBypassOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,44)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBypassOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,45)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsEnterECOMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,46)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsReturnFromECOMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,47)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBatteryOverThreeYear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,48)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBatteryExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,49)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsBatteryReplacement = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,50)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsModuleInvertorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,51)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsModuleRectifierAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,52)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsModuleFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,53)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsModuleManualShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,54)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsModuleOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,55)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsFirmwareUpgradeStart = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,56)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsFirmwareUpgradeEnd = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,57)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRFC1628TrapOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,58)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRFC1628TrapTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,59)).setObjects(("CPS-MIB", "mtrapinfoString"))
upsRFC1628TrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,60)).setObjects(("CPS-MIB", "mtrapinfoString"))
failAuthViaHTTP = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,61)).setObjects(("CPS-MIB", "mtrapinfoString"))
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,62)).setObjects(("CPS-MIB", "mtrapinfoString"))
failAuthViaConsole = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,63)).setObjects(("CPS-MIB", "mtrapinfoString"))
configFileUpload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,64)).setObjects(("CPS-MIB", "mtrapinfoString"))
adminLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,65)).setObjects(("CPS-MIB", "mtrapinfoString"))
adminLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,66)).setObjects(("CPS-MIB", "mtrapinfoString"))
deviceLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,67)).setObjects(("CPS-MIB", "mtrapinfoString"))
deviceLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,68)).setObjects(("CPS-MIB", "mtrapinfoString"))
configurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,69)).setObjects(("CPS-MIB", "mtrapinfoString"))
clientRegistered = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,70)).setObjects(("CPS-MIB", "mtrapinfoString"))
clientRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,71)).setObjects(("CPS-MIB", "mtrapinfoString"))
testEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,72)).setObjects(("CPS-MIB", "mtrapinfoString"))
outletUserLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,73)).setObjects(("CPS-MIB", "mtrapinfoString"))
outletUserLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,74)).setObjects(("CPS-MIB", "mtrapinfoString"))
ePDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,100)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,101)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,102)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,103)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,104)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,105)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,106)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,107)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,108)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,109)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,110)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,111)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUDelayOutletOnCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,112)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDUDelayOutletOffCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,113)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDUDelayOutletRebootCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,114)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,115)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
ePDULineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,116)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDULineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,117)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDULineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,118)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDULineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,119)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,120)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,121)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,122)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,123)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,124)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,125)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,126)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,127)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,128)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUBankOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,129)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
ePDUComponentCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,130)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUComponentCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,131)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,132)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,133)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,134)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,135)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,136)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
ePDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,137)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
envHighTemperatureViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,200)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
envHighTemperatureBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,201)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
envLowTemperatureViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,202)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
envLowTempBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,203)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
envHighHumidityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,204)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
envHighHumidityBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,205)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
envLowHumidityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,206)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
envLowHumdBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,207)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
envDryContactAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,208)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirContactIndex"), ("CPS-MIB", "envirContactName"))
envDryContactNormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,209)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirContactIndex"), ("CPS-MIB", "envirContactName"))
envConntected = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,210)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"))
envDisconntected = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,211)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"))
envRateOfTemperatureChangeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,212)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
envRateOfHumdChangeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,213)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
atsSwitchSource = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,301)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusSelectedSource"), ("CPS-MIB", "mtrapinfoString"))
atsSourceFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,302)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
atsSourceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,303)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
atsRedundancyFail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,304)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,305)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
atsInputHighVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,306)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
atsInputHighVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,307)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
atsInputLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,308)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
atsInputLowVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,309)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
atsInputHighFrequency = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,310)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
atsInputHighFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,311)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
atsInputLowFrequency = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,312)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
atsInputLowFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,313)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,314)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,315)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsLCDCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,316)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsLCDCommunicationLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,317)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsDB9CommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,318)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsDB9CommunicationLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,319)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,320)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusPowerSupplyInputSource"), ("CPS-MIB", "mtrapinfoString"))
atsPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,321)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusPowerSupplyInputSource"), ("CPS-MIB", "mtrapinfoString"))
atsDevHardwareFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,322)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsDevHardwareFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,323)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsSourceConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,324)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsDeviceConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,325)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsOutletConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,326)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsEventCountsCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,327)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
atsOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,328)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,329)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,330)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,331)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,332)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,333)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
atsOutletOnCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,334)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
atsOutletOffCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,335)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
atsOutletRebootCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,336)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
atsCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,337)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
atsOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,338)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
atsOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,339)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
pduDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,400)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceConfigIndex"), ("CPS-MIB", "mtrapinfoString"))
pduDeviceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,401)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceStatusIndex"), ("CPS-MIB", "mtrapinfoString"))
pduDeviceAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,402)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceStatusIndex"), ("CPS-MIB", "mtrapinfoString"))
pduPhaseEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,403)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseConfigIndex"), ("CPS-MIB", "ePDU2PhaseConfigNumber"), ("CPS-MIB", "mtrapinfoString"))
pduPhaseAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,404)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseStatusIndex"), ("CPS-MIB", "ePDU2PhaseStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
pduPhaseAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,405)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseStatusIndex"), ("CPS-MIB", "ePDU2PhaseStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
pduBankEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,406)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankConfigIndex"), ("CPS-MIB", "ePDU2BankConfigNumber"), ("CPS-MIB", "mtrapinfoString"))
pduBankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,407)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankStatusIndex"), ("CPS-MIB", "ePDU2BankStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
pduBankAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,408)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankStatusIndex"), ("CPS-MIB", "ePDU2BankStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
pduOutletSwitchedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,409)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedControlIndex"), ("CPS-MIB", "ePDU2OutletSwitchedControlNumber"), ("CPS-MIB", "ePDU2OutletSwitchedControlName"), ("CPS-MIB", "mtrapinfoString"))
pduOutletSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,410)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedStatusIndex"), ("CPS-MIB", "ePDU2OutletSwitchedStatusNumber"), ("CPS-MIB", "ePDU2OutletSwitchedStatusName"), ("CPS-MIB", "mtrapinfoString"))
pduOutletSwitchedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,411)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedStatusIndex"), ("CPS-MIB", "ePDU2OutletSwitchedStatusNumber"), ("CPS-MIB", "ePDU2OutletSwitchedStatusName"), ("CPS-MIB", "mtrapinfoString"))
pduOutletMeteredEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,412)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredConfigIndex"), ("CPS-MIB", "ePDU2OutletMeteredConfigNumber"), ("CPS-MIB", "ePDU2OutletMeteredConfigName"), ("CPS-MIB", "mtrapinfoString"))
pduOutletMeteredAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,413)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredStatusIndex"), ("CPS-MIB", "ePDU2OutletMeteredStatusNumber"), ("CPS-MIB", "ePDU2OutletMeteredStatusName"), ("CPS-MIB", "mtrapinfoString"))
pduOutletMeteredAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,414)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredStatusIndex"), ("CPS-MIB", "ePDU2OutletMeteredStatusNumber"), ("CPS-MIB", "ePDU2OutletMeteredStatusName"), ("CPS-MIB", "mtrapinfoString"))
pduDaisyChainEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,415)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
pduDaisyChainAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,416)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
pduDaisyChainAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,417)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
bmSystemAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,600)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
bmSystemWarning = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,601)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
bmSystemInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,602)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
bmProbesAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,603)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
bmSProbesWarning = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,604)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
bmProbesInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,605)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
mibBuilder.exportSymbols("CPS-MIB", ePDU2DeviceStatusPowerPeakLoad=ePDU2DeviceStatusPowerPeakLoad, ePDUOutletConfigMonitoredLowLoadThreshold=ePDUOutletConfigMonitoredLowLoadThreshold, ePDUPowerSupply2Status=ePDUPowerSupply2Status, envHighTemperatureBack=envHighTemperatureBack, atsOutletCtrlTableIndex=atsOutletCtrlTableIndex, ePDU2OutletMeteredStatusNumber=ePDU2OutletMeteredStatusNumber, atsStatusDevLCDCommStatus=atsStatusDevLCDCommStatus, upsBatteryReplacement=upsBatteryReplacement, ePDUOutletOverloadCleared=ePDUOutletOverloadCleared, ePDU2SensorTableSize=ePDU2SensorTableSize, bmProbesVoltageAlarmStatus=bmProbesVoltageAlarmStatus, upsAdvanceConfigOutputVoltage=upsAdvanceConfigOutputVoltage, ePDU2BankStatusLoad=ePDU2BankStatusLoad, eSwitchID=eSwitchID, ePDUOutletConfig=ePDUOutletConfig, bmProbesVoltageTable=bmProbesVoltageTable, bmProbesTempStringIndex=bmProbesTempStringIndex, upsReturnFromECOMode=upsReturnFromECOMode, returnFromOverLoad=returnFromOverLoad, accepterAddr=accepterAddr, ePDUDelayOutletOnCommand=ePDUDelayOutletOnCommand, atsCommunicationEstablished=atsCommunicationEstablished, ePDU2BankInfoIndex=ePDU2BankInfoIndex, upsEnterECOMode=upsEnterECOMode, atsEventCountsCleared=atsEventCountsCleared, upsAdvanceBatteryCurrent=upsAdvanceBatteryCurrent, upsAdvanceConfigRechargedCapacity=upsAdvanceConfigRechargedCapacity, atsConfigNominalVoltage=atsConfigNominalVoltage, ePDUIdentDeviceBreakerRating=ePDUIdentDeviceBreakerRating, ePDU2OutletMeteredInfoLayout=ePDU2OutletMeteredInfoLayout, ePDU2IdentTable=ePDU2IdentTable, bmConfigProbesCountOnString=bmConfigProbesCountOnString, upsAdvanceConfigShutoffDelay=upsAdvanceConfigShutoffDelay, atsOutletDevCtrlOutletNum=atsOutletDevCtrlOutletNum, upsAdvanceConfig=upsAdvanceConfig, atsNearOverload=atsNearOverload, ePDU2Group=ePDU2Group, ePDU2PhaseConfigTable=ePDU2PhaseConfigTable, upsAdvanceIdentAgentFirmwareRevision=upsAdvanceIdentAgentFirmwareRevision, bmProbesTempTableSize=bmProbesTempTableSize, ePDULineUndervoltage=ePDULineUndervoltage, upsBaseConfigNumDevices=upsBaseConfigNumDevices, atsStatusSelectedSource=atsStatusSelectedSource, bmProbesResProbeIndex=bmProbesResProbeIndex, ePDUOutletNearOverload=ePDUOutletNearOverload, ePDU2PhaseInfoTable=ePDU2PhaseInfoTable, atsStatusInputFreqState=atsStatusInputFreqState, upsBaseConfigDeviceEntry=upsBaseConfigDeviceEntry, atsPowerSupplyFaultCleared=atsPowerSupplyFaultCleared, ePDUIdentHardwareRev=ePDUIdentHardwareRev, bmProbesTable=bmProbesTable, atsLoadStatusBankLoad=atsLoadStatusBankLoad, bmIdentSerialNumber=bmIdentSerialNumber, ePDUOutletStatusEnergyStartTime=ePDUOutletStatusEnergyStartTime, ePDU2OutletSwitchedControlName=ePDU2OutletSwitchedControlName, atsRedundancyRestored=atsRedundancyRestored, upsAdvanceBatteryReplaceIndicator=upsAdvanceBatteryReplaceIndicator, ePDU2DeviceConfigColdstartDelay=ePDU2DeviceConfigColdstartDelay, bmPropertyStringMax=bmPropertyStringMax, ePDU2DeviceInfoNumBreakers=ePDU2DeviceInfoNumBreakers, upsRFC1628TrapOnBattery=upsRFC1628TrapOnBattery, ePDUOutletBankIndex=ePDUOutletBankIndex, atsLoadCfgPhaseTable=atsLoadCfgPhaseTable, ePDU2OutletSwitched=ePDU2OutletSwitched, atsLoadStatusPhaseEntry=atsLoadStatusPhaseEntry, upsConfig=upsConfig, lowBattery=lowBattery, ePDU=ePDU, atsOutletOn=atsOutletOn, ePDU2BankStatusIndex=ePDU2BankStatusIndex, ePDU2DeviceStatusPowerLoad=ePDU2DeviceStatusPowerLoad, ePDULoadStatusTable=ePDULoadStatusTable, atsLoadDevPhaseTableIndex=atsLoadDevPhaseTableIndex, upsBaseBatteryTimeOnBattery=upsBaseBatteryTimeOnBattery, upsBypassOverloadCleared=upsBypassOverloadCleared, ePDUDelayOutletRebootCommand=ePDUDelayOutletRebootCommand, atsStatusInput=atsStatusInput, upsPhaseBypassFrequency=upsPhaseBypassFrequency, ePDUOutletConfigOutletName=ePDUOutletConfigOutletName, ePDU2OutletMeteredStatusEnergyStart=ePDU2OutletMeteredStatusEnergyStart, ePDU2BankConfigPeakLoadReset=ePDU2BankConfigPeakLoadReset, ePDULoadPhaseConfigTable=ePDULoadPhaseConfigTable, ePDUStatusInputFrequency=ePDUStatusInputFrequency, atsLoadCfgPhase=atsLoadCfgPhase, ePDU2OutletMeteredInfoIndex=ePDU2OutletMeteredInfoIndex, upsPhaseBypassCurrent=upsPhaseBypassCurrent, eSwitchNumber=eSwitchNumber, atsStatusPowerSupplyInputSource=atsStatusPowerSupplyInputSource, ePDU2OutletSwitchedConfigModuleIndex=ePDU2OutletSwitchedConfigModuleIndex, ePDU2DeviceStatusPowerFactor=ePDU2DeviceStatusPowerFactor, atsIdentModelName=atsIdentModelName, upsTurnoffStarted=upsTurnoffStarted, upsOnBattery=upsOnBattery, upsAdvanceIdentLoadPower=upsAdvanceIdentLoadPower, ePDU2PhaseConfigPhasePeakLoadReset=ePDU2PhaseConfigPhasePeakLoadReset, upsModuleFanAlarm=upsModuleFanAlarm, eSwitchBaseCtrEntry=eSwitchBaseCtrEntry, ePDUOutletConfigMonitoredOverloadThreshold=ePDUOutletConfigMonitoredOverloadThreshold, upsWiringFaultCleared=upsWiringFaultCleared, ePDU2DeviceStatusEntry=ePDU2DeviceStatusEntry, envirHumidHysteresis=envirHumidHysteresis, ePDU2BankConfigNearOverloadThreshold=ePDU2BankConfigNearOverloadThreshold, atsLoadStatusPhaseTableSize=atsLoadStatusPhaseTableSize, ePDUOutletOverload=ePDUOutletOverload, atsSwitchSource=atsSwitchSource, ePDULoadDevNumPhases=ePDULoadDevNumPhases, atsLoadDevBankTableSize=atsLoadDevBankTableSize, ePDULoadStatusApparentPower=ePDULoadStatusApparentPower, ePDULoadStatusBankNumber=ePDULoadStatusBankNumber, ePDUOutletControlTable=ePDUOutletControlTable, ePDU2OutletSwitchedInfoModuleIndex=ePDU2OutletSwitchedInfoModuleIndex, bmFuncEqualEnable=bmFuncEqualEnable, upsReturnFromBypassMode=upsReturnFromBypassMode, pduPhaseAlarm=pduPhaseAlarm, pduBankAlarmClear=pduBankAlarmClear, ePDU2IdentIndex=ePDU2IdentIndex, ePDUIdentDateOfManufacture=ePDUIdentDateOfManufacture, nclBankOff=nclBankOff, atsIdentDeviceRatingCurrent=atsIdentDeviceRatingCurrent, ePDULineOvervoltageCleared=ePDULineOvervoltageCleared, ePDULoadDevBankTable=ePDULoadDevBankTable, envirTempHighThreshold=envirTempHighThreshold, ePDU2PhaseTableSize=ePDU2PhaseTableSize, ePDU2OutletMeteredInfoTable=ePDU2OutletMeteredInfoTable, ePDUOutletStatusIndex=ePDUOutletStatusIndex, atsLoadCfgPhaseTableIndex=atsLoadCfgPhaseTableIndex, atsCtrlResetATS=atsCtrlResetATS, ePDU2BankStatusTable=ePDU2BankStatusTable, pduOutletSwitchedAlarm=pduOutletSwitchedAlarm, envirIdentLocation=envirIdentLocation, upsEmergencyPowerOff=upsEmergencyPowerOff, ePDUStatusOutletIndex=ePDUStatusOutletIndex, bmControlSysytemIdenticator=bmControlSysytemIdenticator, powerRestored=powerRestored, atsLoadDevPhase=atsLoadDevPhase, ePDUStatusOutletState=ePDUStatusOutletState, upsAdvanceIdentDateOfManufacture=upsAdvanceIdentDateOfManufacture, atsLoadCfgPhaseOverLoad=atsLoadCfgPhaseOverLoad, atsStatusInputPhaseIndex=atsStatusInputPhaseIndex, atsOutletCtrlEntry=atsOutletCtrlEntry, bmConfigHighResWarnThreshold=bmConfigHighResWarnThreshold, nclBankOn=nclBankOn, bmSProbesWarning=bmSProbesWarning, ePDU2BankStatusPeakLoad=ePDU2BankStatusPeakLoad, atsIdentName=atsIdentName, bmSystemWarning=bmSystemWarning, pduDaisyChainAlarm=pduDaisyChainAlarm, ePDU2OutletMeteredTableSize=ePDU2OutletMeteredTableSize, ePDULoadBankConfigTable=ePDULoadBankConfigTable, atsStatusInputFrequency=atsStatusInputFrequency, mtrapinfoTimeTicks=mtrapinfoTimeTicks, ePDU2OutletSwitchedControlCommand=ePDU2OutletSwitchedControlCommand, upsAdvanceControlUpsSleep=upsAdvanceControlUpsSleep, atsControl=atsControl, upsAdvanceBatteryCapacity=upsAdvanceBatteryCapacity, upsAdvanceInputMinLineVoltage=upsAdvanceInputMinLineVoltage, upsAdvanceControlSimulatePowerFail=upsAdvanceControlSimulatePowerFail, atsOutletCfgOutletName=atsOutletCfgOutletName, bmIdentModelName=bmIdentModelName, bmControlProbeIndicator=bmControlProbeIndicator, ePDU2OutletMeteredConfigIndex=ePDU2OutletMeteredConfigIndex, atsStatusPowerSupplyEntry=atsStatusPowerSupplyEntry, envirHumidLowThreshold=envirHumidLowThreshold, ePDU2DeviceStatusPeakLoadStartTime=ePDU2DeviceStatusPeakLoadStartTime, atsCtrlClearEventCounts=atsCtrlClearEventCounts, upsBoostOn=upsBoostOn, envirTemperature=envirTemperature, mconfigNumTrapAccepters=mconfigNumTrapAccepters, pduOutletMeteredAlarm=pduOutletMeteredAlarm, atsCancelPendingCommand=atsCancelPendingCommand, upsBaseConfig=upsBaseConfig, upsAdvanceIdentSerialNumber=upsAdvanceIdentSerialNumber, ePDU2OutletSwitchedInfoBank=ePDU2OutletSwitchedInfoBank, envLowHumidityViolation=envLowHumidityViolation, trapIndex=trapIndex, ePDUOutletPhaseEntry=ePDUOutletPhaseEntry, bmFuncRes=bmFuncRes, ePDUIdentDeviceLinetoLineVoltage=ePDUIdentDeviceLinetoLineVoltage, ePDUOutletControlIndex=ePDUOutletControlIndex, envirContactStatus=envirContactStatus, ePDU2BankInfoNumber=ePDU2BankInfoNumber, returnFromChargerFailure=returnFromChargerFailure, ePDU2OutletMeteredConfigNumber=ePDU2OutletMeteredConfigNumber, upsAdvanceIdentCurrentRating=upsAdvanceIdentCurrentRating, ePDU2DeviceControlCommand=ePDU2DeviceControlCommand, upsAdvanceConfigSleepAfterAllClientShut=upsAdvanceConfigSleepAfterAllClientShut, ePDUIdentDeviceNumOutlets=ePDUIdentDeviceNumOutlets, bmConfigHighTempAlarmThreshold=bmConfigHighTempAlarmThreshold, bmProbesVoltageEntry=bmProbesVoltageEntry, ePDU2OutletSwitchedInfoName=ePDU2OutletSwitchedInfoName, envirHumidRateOfChange=envirHumidRateOfChange, ePDU2BankConfigEntry=ePDU2BankConfigEntry, configurationChanged=configurationChanged, bmProbesTempPackIndex=bmProbesTempPackIndex, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, bmProbesResPackIndex=bmProbesResPackIndex, upsAdvanceIdentPowerRating=upsAdvanceIdentPowerRating, ePDUBankOverloadCleared=ePDUBankOverloadCleared, ePDU2DeviceStatusRoleType=ePDU2DeviceStatusRoleType, ePDU2BankStatusLoadState=ePDU2BankStatusLoadState, ePDUIdent=ePDUIdent, atsLoadStatusPhaseLoad=atsLoadStatusPhaseLoad, upsAdvanceConfigDeepDischargeProtection=upsAdvanceConfigDeepDischargeProtection, ePDUStatusPhaseState=ePDUStatusPhaseState, atsLoadStatusBankPower=atsLoadStatusBankPower, envRateOfHumdChangeAbnormal=envRateOfHumdChangeAbnormal, ePDUStatusBankState=ePDUStatusBankState, ePDU2PhaseStatusPower=ePDU2PhaseStatusPower, bmProbesResBattIndex=bmProbesResBattIndex, ePDULoadBankConfigEntry=ePDULoadBankConfigEntry, communicationEstablished=communicationEstablished, upsAdvanceConfigReturnDelay=upsAdvanceConfigReturnDelay, atsStatusInputPhaseTable=atsStatusInputPhaseTable, ePDULoadDevBankIndex=ePDULoadDevBankIndex, ePDU2DeviceConfigPowerOverloadThreshold=ePDU2DeviceConfigPowerOverloadThreshold, ePDU2DeviceControlName=ePDU2DeviceControlName, upsLostRedundant=upsLostRedundant, atsOverloadCleared=atsOverloadCleared, ePDUIdentName=ePDUIdentName, ePDU2PhaseStatusPeakLoadStartTime=ePDU2PhaseStatusPeakLoadStartTime, ePDUBankLowLoadCleared=ePDUBankLowLoadCleared, ePDU2DeviceConfigContact=ePDU2DeviceConfigContact, ePDULowLoadCleared=ePDULowLoadCleared, atsLoadStatusBankEnergy=atsLoadStatusBankEnergy, ePDUIdentDeviceOrientation=ePDUIdentDeviceOrientation, ePDUOutletStatusTable=ePDUOutletStatusTable, bmProbesResStringIndex=bmProbesResStringIndex, bmIdentLCDHardwareRev=bmIdentLCDHardwareRev, bmFuncResMeasureLastUpdate=bmFuncResMeasureLastUpdate, passwordChange=passwordChange, pduPhaseAlarmClear=pduPhaseAlarmClear, ePDU2IdentHardwareRev=ePDU2IdentHardwareRev, ePDULoadStatusLoadState=ePDULoadStatusLoadState, upsAdvanceInput=upsAdvanceInput, ePDU2DeviceInfoNumPhases=ePDU2DeviceInfoNumPhases, ePDU2OutletMeteredStatusLoad=ePDU2OutletMeteredStatusLoad, ePDU2OutletMeteredInfoEntry=ePDU2OutletMeteredInfoEntry, ePDU2DeviceInfoNumOutlets=ePDU2DeviceInfoNumOutlets, ePDULoadDevBankTableSize=ePDULoadDevBankTableSize, ePDU2DeviceConfigCurrentOverloadThreshold=ePDU2DeviceConfigCurrentOverloadThreshold, ePDU2BankConfigOverloadThreshold=ePDU2BankConfigOverloadThreshold, ePDU2OutletMeteredStatusEnergy=ePDU2OutletMeteredStatusEnergy, atsLoadCfgPhaseLowLoad=atsLoadCfgPhaseLowLoad, ePDU2BankConfigLowLoadThreshold=ePDU2BankConfigLowLoadThreshold, bmProbesTempIndex=bmProbesTempIndex, envRateOfTemperatureChangeAbnormal=envRateOfTemperatureChangeAbnormal, envirTemperatureCelsius=envirTemperatureCelsius, atsInputHighFrequencyCleared=atsInputHighFrequencyCleared, bmConfigResHealthWarnThreshold=bmConfigResHealthWarnThreshold, upsOutput=upsOutput, upsPhaseInputCurrent=upsPhaseInputCurrent, atsLoadStatusBankTable=atsLoadStatusBankTable, atsOutletDevColdStartDelay=atsOutletDevColdStartDelay, ePDU2OutletSwitchedStatusEntry=ePDU2OutletSwitchedStatusEntry)
mibBuilder.exportSymbols("CPS-MIB", upsAdvanceConfigLowBatteryThreshold=upsAdvanceConfigLowBatteryThreshold, ePDUBankNearOverloadCleared=ePDUBankNearOverloadCleared, ePDULowLoad=ePDULowLoad, bmSystemInfo=bmSystemInfo, upsAdvanceTestLastDiagnosticsDate=upsAdvanceTestLastDiagnosticsDate, envHighHumidityViolation=envHighHumidityViolation, upsBankOutletControlTable=upsBankOutletControlTable, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, ePDUOutletConfigEntry=ePDUOutletConfigEntry, bmProbesVoltageStringIndex=bmProbesVoltageStringIndex, ePDU2PhaseConfigOverloadRestriction=ePDU2PhaseConfigOverloadRestriction, ePDU2OutletMeteredStatusEntry=ePDU2OutletMeteredStatusEntry, ePDU2BankStatusPeakLoadTimestamp=ePDU2BankStatusPeakLoadTimestamp, pduDeviceEvent=pduDeviceEvent, ePDUIdentDeviceOutletLayout=ePDUIdentDeviceOutletLayout, ePDUOutletControl=ePDUOutletControl, bmIdentName=bmIdentName, upsAdvanceOutputLoad=upsAdvanceOutputLoad, ePDUIdentSerialNumber=ePDUIdentSerialNumber, atsIdentDeviceRatingVoltage=atsIdentDeviceRatingVoltage, mconfigClock=mconfigClock, ePDULoadDevMaxOutletTable=ePDULoadDevMaxOutletTable, ePDULoadPhaseConfigAlarm=ePDULoadPhaseConfigAlarm, ePDU2PhaseInfoIndex=ePDU2PhaseInfoIndex, envDryContactAbnormal=envDryContactAbnormal, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, atsIdentAgentSerialNumber=atsIdentAgentSerialNumber, ePDU2DeviceControlIndex=ePDU2DeviceControlIndex, upsControl=upsControl, ePDUStatusPhaseNumber=ePDUStatusPhaseNumber, bmConfigLowVoltAlarmThreshold=bmConfigLowVoltAlarmThreshold, ePDUOutletBank=ePDUOutletBank, bmFuncResMeasureInterval=bmFuncResMeasureInterval, ePDU2PhaseStatusPeakLoadTimestamp=ePDU2PhaseStatusPeakLoadTimestamp, atsStatusPowerSupply12VStatus=atsStatusPowerSupply12VStatus, ePDU2PhaseConfigNearOverloadThreshold=ePDU2PhaseConfigNearOverloadThreshold, atsOutletConfigChanged=atsOutletConfigChanged, ePDU2DeviceInfoMeteredOutlets=ePDU2DeviceInfoMeteredOutlets, atsOutletStatusOutletCmdPending=atsOutletStatusOutletCmdPending, battmgr=battmgr, ePDULoadDevMaxOutletTableSize=ePDULoadDevMaxOutletTableSize, ePDUDeviceConfigChange=ePDUDeviceConfigChange, ePDULoadDevice=ePDULoadDevice, eswitch=eswitch, ePDU2IdentIndicator=ePDU2IdentIndicator, atsLoadStatus=atsLoadStatus, ePDUOutletStatusActivePower=ePDUOutletStatusActivePower, atsLoadCfgBankOverLoad=atsLoadCfgBankOverLoad, atsOutletCfgTableIndex=atsOutletCfgTableIndex, ePDU2DeviceInfoEntry=ePDU2DeviceInfoEntry, ePDU2OutletMeteredStatusPeakPowerStartTime=ePDU2OutletMeteredStatusPeakPowerStartTime, upsModuleInvertorAlarm=upsModuleInvertorAlarm, upsDiagnosticsPassed=upsDiagnosticsPassed, eSwitchIdentFirmwareRev=eSwitchIdentFirmwareRev, ePDU2DeviceStatusIndex=ePDU2DeviceStatusIndex, ePDUCancelPendingCommand=ePDUCancelPendingCommand, upsAdvanceOutput=upsAdvanceOutput, ePDU2OutletSwitchedConfigIndex=ePDU2OutletSwitchedConfigIndex, bmProbesStringIndex=bmProbesStringIndex, upsWokeUp=upsWokeUp, atsStatusDevOutRelayStatus=atsStatusDevOutRelayStatus, atsStatusInputPhaseCurrent=atsStatusInputPhaseCurrent, ePDULoadStatusActivePower=ePDULoadStatusActivePower, atsStatus=atsStatus, ePDU2PhaseInfoModuleIndex=ePDU2PhaseInfoModuleIndex, bmConfigLowResAlarmThreshold=bmConfigLowResAlarmThreshold, atsLoadDevPhaseMaxLoad=atsLoadDevPhaseMaxLoad, mtrapinfoString=mtrapinfoString, upsAdvanceTestDiagnosticSchedule=upsAdvanceTestDiagnosticSchedule, upsIdent=upsIdent, upsSignalClientShutdown=upsSignalClientShutdown, eSwitchActOutlet=eSwitchActOutlet, adminLoginInfo=adminLoginInfo, ePDU2OutletMeteredConfigTable=ePDU2OutletMeteredConfigTable, atsOutletDevColdStartState=atsOutletDevColdStartState, ePDU2OutletSwitchedStatusTable=ePDU2OutletSwitchedStatusTable, atsLoadCfgBankOutletRestriction=atsLoadCfgBankOutletRestriction, failAuthViaConsole=failAuthViaConsole, ePDUIdentModelNumber=ePDUIdentModelNumber, ePDU2OutletSwitchedConfigEntry=ePDU2OutletSwitchedConfigEntry, upsAdvanceConfigSetEEPROMDefaults=upsAdvanceConfigSetEEPROMDefaults, ePDUOutletConfigRebootDuration=ePDUOutletConfigRebootDuration, upsAdvanceOutputCurrent=upsAdvanceOutputCurrent, ePDULoadDevBankNumber=ePDULoadDevBankNumber, ePDU2OutletMeteredStatusPeakPower=ePDU2OutletMeteredStatusPeakPower, ePDU2=ePDU2, ePDUOutletControlOutletBank=ePDUOutletControlOutletBank, ePDUOutletPhaseIndex=ePDUOutletPhaseIndex, ePDUDelayOutletOffCommand=ePDUDelayOutletOffCommand, ePDUPowerSupply=ePDUPowerSupply, mtrapinfoBmEventId=mtrapinfoBmEventId, upsBuckOn=upsBuckOn, upsPhaseOutput=upsPhaseOutput, atsLoadStatusBankEntry=atsLoadStatusBankEntry, mcontrolRestart=mcontrolRestart, upsPhaseInputTableIndex=upsPhaseInputTableIndex, ePDU2BankStatusNumber=ePDU2BankStatusNumber, ePDU2OutletSwitchedConfigPowerOffTime=ePDU2OutletSwitchedConfigPowerOffTime, pduDeviceAlarmClear=pduDeviceAlarmClear, atsOutlet=atsOutlet, ePDULoadDevMaxPhaseLoad=ePDULoadDevMaxPhaseLoad, atsLoadCfgPhaseEntry=atsLoadCfgPhaseEntry, upsAdvanceConfigAlarm=upsAdvanceConfigAlarm, upsOverload=upsOverload, bmProbesVoltage=bmProbesVoltage, upsBaseIdent=upsBaseIdent, bmConfigHighVoltAlarmThreshold=bmConfigHighVoltAlarmThreshold, ePDUPowerSupply2Fail=ePDUPowerSupply2Fail, atsDB9CommunicationLostCleared=atsDB9CommunicationLostCleared, atsStatusInputName=atsStatusInputName, ePDU2IdentEntry=ePDU2IdentEntry, mconfigDHCPEnabled=mconfigDHCPEnabled, ePDU2DeviceStatusName=ePDU2DeviceStatusName, upsHardwareFault=upsHardwareFault, atsLoadCfgPhaseOutletRestriction=atsLoadCfgPhaseOutletRestriction, atsInputHighVoltageCleared=atsInputHighVoltageCleared, bmProbesTempProbeIndex=bmProbesTempProbeIndex, bmPropertyProbesRating=bmPropertyProbesRating, ePDU2OutletMeteredStatusTable=ePDU2OutletMeteredStatusTable, atsOutletCfgRebootDuration=atsOutletCfgRebootDuration, bmFuncResMeasureManualResult=bmFuncResMeasureManualResult, accepterActive=accepterActive, upsAdvanceTestEstimationResults=upsAdvanceTestEstimationResults, ePDUOutletPhaseOverloadRestriction=ePDUOutletPhaseOverloadRestriction, upsTurnedOff=upsTurnedOff, deviceName=deviceName, ePDULoadStatusEnergyStartTime=ePDULoadStatusEnergyStartTime, cps=cps, upsDiagnosticsFailed=upsDiagnosticsFailed, deviceLogoutInfo=deviceLogoutInfo, bmControl=bmControl, pduBankAlarm=pduBankAlarm, upsAdvanceConfigLowTransferVolt=upsAdvanceConfigLowTransferVolt, bmPropertyMaxProbeOnString=bmPropertyMaxProbeOnString, atsStatusInputEntry=atsStatusInputEntry, ePDULoadPhaseConfigNearOverloadThreshold=ePDULoadPhaseConfigNearOverloadThreshold, ePDULoadDevBankEntry=ePDULoadDevBankEntry, upsPhaseBypass=upsPhaseBypass, envirHumid=envirHumid, ePDUStatusBankIndex=ePDUStatusBankIndex, ePDUBankLowLoad=ePDUBankLowLoad, atsLoadCfgBankTable=atsLoadCfgBankTable, ePDU2OutletSwitchedConfigPowerOnTime=ePDU2OutletSwitchedConfigPowerOnTime, bmIdentLocation=bmIdentLocation, atsDB9CommunicationLost=atsDB9CommunicationLost, ePDUPowerSupply2Ok=ePDUPowerSupply2Ok, atsCommunicationLost=atsCommunicationLost, ePDULoadPhaseConfigOverloadThreshold=ePDULoadPhaseConfigOverloadThreshold, ePDU2BankConfigTable=ePDU2BankConfigTable, upsBaseOutput=upsBaseOutput, pduDaisyChainEvent=pduDaisyChainEvent, ePDUOutletConfigTable=ePDUOutletConfigTable, atsLoadStatusBankTableSize=atsLoadStatusBankTableSize, atsLoadStatusBankLoadState=atsLoadStatusBankLoadState, ePDUOutletConfigMonitoredTableSize=ePDUOutletConfigMonitoredTableSize, ePDUOutletPhaseTable=ePDUOutletPhaseTable, atsStatusPowerSupplyTable=atsStatusPowerSupplyTable, ePDU2OutletSwitchedConfigRebootDuration=ePDU2OutletSwitchedConfigRebootDuration, bmIdentFirmwareRev=bmIdentFirmwareRev, atsOutletStatusOutletBank=atsOutletStatusOutletBank, bmIdentLCDFirmwareRev=bmIdentLCDFirmwareRev, ePDUStatusBankTableSize=ePDUStatusBankTableSize, pduOutletMeteredAlarmClear=pduOutletMeteredAlarmClear, mtrapinfoInteger=mtrapinfoInteger, atsStatusDevice=atsStatusDevice, atsOutletStatusTableSize=atsOutletStatusTableSize, upsAdvanceConfigMinReturnCapacity=upsAdvanceConfigMinReturnCapacity, ePDU2OutletSwitchedControlTable=ePDU2OutletSwitchedControlTable, upsAdvanceBatteryVoltage=upsAdvanceBatteryVoltage, ePDUOutletConfigOutletPhase=ePDUOutletConfigOutletPhase, ePDUOutletConfigMonitoredTable=ePDUOutletConfigMonitoredTable, atsStatusPowerSupply5VStatus=atsStatusPowerSupply5VStatus, ePDU2PhaseInfoEntry=ePDU2PhaseInfoEntry, ePDU2BankTableSize=ePDU2BankTableSize, ePDU2BankInfoTable=ePDU2BankInfoTable, mconfigClockDate=mconfigClockDate, atsOutletCfgTableSize=atsOutletCfgTableSize, ePDULoadStatusPhaseNumber=ePDULoadStatusPhaseNumber, ePDU2BankConfigModuleIndex=ePDU2BankConfigModuleIndex, bmConfigHighResAlarmThreshold=bmConfigHighResAlarmThreshold, ePDUOutletConfigMonitoredIndex=ePDUOutletConfigMonitoredIndex, upsAdvanceControlRebootUps=upsAdvanceControlRebootUps, bmFuncResMeasureManualCmd=bmFuncResMeasureManualCmd, bmFuncResMeasure=bmFuncResMeasure, pduBankEvent=pduBankEvent, upsPhaseInputPowerFactor=upsPhaseInputPowerFactor, upsStartBatteryTest=upsStartBatteryTest, atsOutletStatusOutletState=atsOutletStatusOutletState, atsInputLowVoltageCleared=atsInputLowVoltageCleared, ePDUStatusOutletNumber=ePDUStatusOutletNumber, ePDULoadStatusLoad=ePDULoadStatusLoad, ePDU2DeviceConfigLocation=ePDU2DeviceConfigLocation, upsAdvanceTest=upsAdvanceTest, upsPhaseBypassEntry=upsPhaseBypassEntry, ePDU2DeviceControlEntry=ePDU2DeviceControlEntry, upsAdvanceConfigSleepDelay=upsAdvanceConfigSleepDelay, bmConfigLowTempAlarmThreshold=bmConfigLowTempAlarmThreshold, bmProbesAlarm=bmProbesAlarm, upsAdvanceTestDiagnosticsResults=upsAdvanceTestDiagnosticsResults, ePDU2PhaseInfoNumber=ePDU2PhaseInfoNumber, ePDU2BankConfigNumber=ePDU2BankConfigNumber, eSwitchOutletNum=eSwitchOutletNum, upsBaseOutputPhase=upsBaseOutputPhase, atsLoadStatusPhase=atsLoadStatusPhase, envirContactTable=envirContactTable, ePDU2DeviceConfigEntry=ePDU2DeviceConfigEntry, atsPowerSupplyFault=atsPowerSupplyFault, upsAdvanceTestDiagnostics=upsAdvanceTestDiagnostics, ePDU2OutletSwitchedConfigTable=ePDU2OutletSwitchedConfigTable, bmProbesTableSize=bmProbesTableSize, atsLowLoadCleared=atsLowLoadCleared, ePDUOutletStatusPeakPowerStart=ePDUOutletStatusPeakPowerStart, eSwitchBaseEntry=eSwitchBaseEntry, ePDU2DeviceConfigModuleIndex=ePDU2DeviceConfigModuleIndex, upsInput=upsInput, eSwitchIdentHardwareRev=eSwitchIdentHardwareRev, atsOutletCfgPowerOffTime=atsOutletCfgPowerOffTime, ePDU2GroupTotalPower=ePDU2GroupTotalPower, products=products, bmProperty=bmProperty, mconfigClockTime=mconfigClockTime, atsLoadDevBankTable=atsLoadDevBankTable, ePDU2OutletMeteredInfoModuleIndex=ePDU2OutletMeteredInfoModuleIndex, ePDU2GroupTotalEnergy=ePDU2GroupTotalEnergy, ePDU2DeviceInfoBreakerRating=ePDU2DeviceInfoBreakerRating, upsPhaseBypassTable=upsPhaseBypassTable, ePDUOverload=ePDUOverload, ePDUOutletPhase=ePDUOutletPhase, atsOutletDevice=atsOutletDevice, upsBaseBatteryAgeRecommand=upsBaseBatteryAgeRecommand, ePDU2IdentName=ePDU2IdentName, bmConfigStringCount=bmConfigStringCount, atsSourceFaultCleared=atsSourceFaultCleared, ePDU2DeviceInfoIndex=ePDU2DeviceInfoIndex, upsAdvanceConfigAutoRestore=upsAdvanceConfigAutoRestore, bmIdent=bmIdent, upsBatteryExpiration=upsBatteryExpiration, ePDU2OutletMeteredStatusActivePower=ePDU2OutletMeteredStatusActivePower, atsLoad=atsLoad, atsOutletStatusEntry=atsOutletStatusEntry, upsModuleRectifierAlarm=upsModuleRectifierAlarm, upsModuleOverload=upsModuleOverload, bmConfigMergeFeature=bmConfigMergeFeature, envConntected=envConntected, ePDULoadDevMaxOutletLoad=ePDULoadDevMaxOutletLoad, mtrapinfoIpAddress=mtrapinfoIpAddress, upsBaseIdentName=upsBaseIdentName, ePDULoadDevMaxOutletEntry=ePDULoadDevMaxOutletEntry, ePDU2GroupPeakRecordReset=ePDU2GroupPeakRecordReset, upsFirmwareUpgradeEnd=upsFirmwareUpgradeEnd, ePDUOutletDevNumTotalOutlets=ePDUOutletDevNumTotalOutlets, upsAdvanceConfigLowBatteryRunTime=upsAdvanceConfigLowBatteryRunTime, atsOutletStatusTable=atsOutletStatusTable, ePDU2DeviceStatusApparentPower=ePDU2DeviceStatusApparentPower)
mibBuilder.exportSymbols("CPS-MIB", upsAdvanceBatteryLife=upsAdvanceBatteryLife, atsStatusPhaseSyncStatus=atsStatusPhaseSyncStatus, upsBatteryOverThreeYear=upsBatteryOverThreeYear, severityDegree=severityDegree, ePDUOutletStatusPeakPowerTime=ePDUOutletStatusPeakPowerTime, environmentSensor=environmentSensor, bmPropertyInputVoltageRange=bmPropertyInputVoltageRange, ePDUOutletLowLoad=ePDUOutletLowLoad, upsAdvanceBatteryFullChargeVoltage=upsAdvanceBatteryFullChargeVoltage, atsStatusCommStatus=atsStatusCommStatus, bmIdentDateOfManufacture=bmIdentDateOfManufacture, bmFuncEqualStatus=bmFuncEqualStatus, ePDU2DeviceStatusCommandPending=ePDU2DeviceStatusCommandPending, ePDU2OutletMeteredConfigName=ePDU2OutletMeteredConfigName, eSwitchBaseCtrTable=eSwitchBaseCtrTable, ePDUOutletDevColdstartState=ePDUOutletDevColdstartState, ePDU2DeviceInfoSwitchedOutlets=ePDU2DeviceInfoSwitchedOutlets, ePDU2OutletMeteredInfoBank=ePDU2OutletMeteredInfoBank, atsLCDCommunicationLostCleared=atsLCDCommunicationLostCleared, ePDULoadBankConfigOverloadThreshold=ePDULoadBankConfigOverloadThreshold, nclBankStartScheduleOff=nclBankStartScheduleOff, upsFirmwareUpgradeStart=upsFirmwareUpgradeStart, ePDUOutletDevCommand=ePDUOutletDevCommand, ePDULoadBankConfigNearOverloadThreshold=ePDULoadBankConfigNearOverloadThreshold, upsScheduleShutdown=upsScheduleShutdown, ePDU2OutletMeteredStatusModuleIndex=ePDU2OutletMeteredStatusModuleIndex, ePDUStatusOutletTable=ePDUStatusOutletTable, upsAdvanceControl=upsAdvanceControl, atsStatusDevInRelayStatus=atsStatusDevInRelayStatus, atsOutletStatusTableIndex=atsOutletStatusTableIndex, bmProbesTempAlarmStatus=bmProbesTempAlarmStatus, ePDU2DeviceConfigPowerLowLoadThreshold=ePDU2DeviceConfigPowerLowLoadThreshold, atsStatusInputVolState=atsStatusInputVolState, atsIdentFirmwareRev=atsIdentFirmwareRev, ePDU2DeviceStatusPowerSupply2Status=ePDU2DeviceStatusPowerSupply2Status, ePDU2DeviceConfigEnergyReset=ePDU2DeviceConfigEnergyReset, ePDU2PhaseStatusIndex=ePDU2PhaseStatusIndex, mcontrolReset=mcontrolReset, ePDU2PhaseStatusLineToLineVoltage=ePDU2PhaseStatusLineToLineVoltage, bmProbesResEntry=bmProbesResEntry, ePDU2BankStatusModuleIndex=ePDU2BankStatusModuleIndex, atsInputLowVoltage=atsInputLowVoltage, atsOutletDevLocalCtrl=atsOutletDevLocalCtrl, upsBaseControl=upsBaseControl, bmProbesResHealth=bmProbesResHealth, bmProbesResIndex=bmProbesResIndex, atsSourceConfigChanged=atsSourceConfigChanged, deviceIndex=deviceIndex, configFileUpload=configFileUpload, eSwitchActType=eSwitchActType, upsPhaseOutputVoltage=upsPhaseOutputVoltage, upsAdvanceOutputPower=upsAdvanceOutputPower, envHighHumidityBack=envHighHumidityBack, pduDaisyChainAlarmClear=pduDaisyChainAlarmClear, ePDUIdentDeviceNumPhases=ePDUIdentDeviceNumPhases, ePDU2BankConfigIndex=ePDU2BankConfigIndex, atsOutletCfgPowerOnTime=atsOutletCfgPowerOnTime, envirIdentName=envirIdentName, envirTempCelsiusRateOfChange=envirTempCelsiusRateOfChange, deviceLoginInfo=deviceLoginInfo, envirTempCelsiusHighThreshold=envirTempCelsiusHighThreshold, atsStatusInputVoltageOrientation=atsStatusInputVoltageOrientation, adminLogoutInfo=adminLogoutInfo, atsOutletStatusOutletName=atsOutletStatusOutletName, ePDUCommunicationLost=ePDUCommunicationLost, mconfigTrapAccepterTable=mconfigTrapAccepterTable, ePDU2OutletSwitchedInfoTable=ePDU2OutletSwitchedInfoTable, eSwitchBaseTable=eSwitchBaseTable, envirTempRateOfChange=envirTempRateOfChange, ePDU2OutletSwitchedInfoIndex=ePDU2OutletSwitchedInfoIndex, upsCommandCancel=upsCommandCancel, upsModuleManualShutdown=upsModuleManualShutdown, atsIdentSerialNumber=atsIdentSerialNumber, envirTempHysteresis=envirTempHysteresis, upsAdvanceIdentFirmwareRevision=upsAdvanceIdentFirmwareRevision, ePDU2OutletSwitchedControlNumber=ePDU2OutletSwitchedControlNumber, ePDULoadDevOutletIndex=ePDULoadDevOutletIndex, envLowHumdBack=envLowHumdBack, bmFuncEqualStartTime=bmFuncEqualStartTime, atsDeviceConfigChanged=atsDeviceConfigChanged, ePDU2Outlet=ePDU2Outlet, ePDU2IdentFirmwareRev=ePDU2IdentFirmwareRev, ePDU2OutletSwitchedStatusNumber=ePDU2OutletSwitchedStatusNumber, upsAdvanceControlTurnOnUPS=upsAdvanceControlTurnOnUPS, ePDU2BankInfoEntry=ePDU2BankInfoEntry, atsLoadDevPhaseEntry=atsLoadDevPhaseEntry, ePDU2PhaseStatusModuleIndex=ePDU2PhaseStatusModuleIndex, ePDUStatusPhaseIndex=ePDUStatusPhaseIndex, atsStatusInputPhasePower=atsStatusInputPhasePower, envLowTemperatureViolation=envLowTemperatureViolation, atsOutletDevTotalOutletNum=atsOutletDevTotalOutletNum, ePDUPowerSupply1Status=ePDUPowerSupply1Status, returnFromOverTemp=returnFromOverTemp, ePDUOutletConfigOutletBank=ePDUOutletConfigOutletBank, atsStatusRedundancyState=atsStatusRedundancyState, atsRedundancyFail=atsRedundancyFail, bmSystemAlarm=bmSystemAlarm, upsOutlet=upsOutlet, atsConfigPreferredSource=atsConfigPreferredSource, ePDUOutletStatusOutletState=ePDUOutletStatusOutletState, ePDUIdentFirmwareRev=ePDUIdentFirmwareRev, ePDU2OutletSwitchedStatusCommandPending=ePDU2OutletSwitchedStatusCommandPending, ePDU2OutletMeteredStatusAlarm=ePDU2OutletMeteredStatusAlarm, bmProbesVoltageIndex=bmProbesVoltageIndex, ePDU2PhaseConfigNumber=ePDU2PhaseConfigNumber, ePDUOutletStatusOutletPhase=ePDUOutletStatusOutletPhase, bmConfigHighVoltAlarmThreshold10mV=bmConfigHighVoltAlarmThreshold10mV, ePDUOutletBankOverloadRestriction=ePDUOutletBankOverloadRestriction, upsWiringFault=upsWiringFault, ePDULineUndervoltageCleared=ePDULineUndervoltageCleared, atsLoadStatusPhaseTable=atsLoadStatusPhaseTable, upsBaseInput=upsBaseInput, upsBaseIdentModel=upsBaseIdentModel, atsLoadCfgPhaseTableSize=atsLoadCfgPhaseTableSize, atsLoadCfgBankTableSize=atsLoadCfgBankTableSize, bmProbesVoltageProbeIndex=bmProbesVoltageProbeIndex, upsAdvanceControlUpsOff=upsAdvanceControlUpsOff, atsSourceFault=atsSourceFault, envirTempCelsiusLowThreshold=envirTempCelsiusLowThreshold, bmProbesBattIndex=bmProbesBattIndex, bmConfigVoltDiffAlarmThreshold=bmConfigVoltDiffAlarmThreshold, ePDU2PhaseStatusPowerFactor=ePDU2PhaseStatusPowerFactor, upsAdvanceInputFrequency=upsAdvanceInputFrequency, ePDUOutletDevColdstartDelay=ePDUOutletDevColdstartDelay, atsStatusDevDB9CommStatus=atsStatusDevDB9CommStatus, upsRFC1628TrapTestCompleted=upsRFC1628TrapTestCompleted, envirContactEntry=envirContactEntry, ePDU2BankStatusPeakLoadStartTime=ePDU2BankStatusPeakLoadStartTime, upsBaseTest=upsBaseTest, atsLoadStatusPhaseTableIndex=atsLoadStatusPhaseTableIndex, upsOverTemp=upsOverTemp, atsLoadConfig=atsLoadConfig, atsInputHighFrequency=atsInputHighFrequency, ePDUIdentDeviceNumBreakers=ePDUIdentDeviceNumBreakers, atsLoadDevBankTableIndex=atsLoadDevBankTableIndex, ePDUOutletStatusAlarm=ePDUOutletStatusAlarm, atsInputLowFrequency=atsInputLowFrequency, ePDUStatusBankNumber=ePDUStatusBankNumber, pduPhaseEvent=pduPhaseEvent, ePDU2OutletSwitchedControlEntry=ePDU2OutletSwitchedControlEntry, atsOutletOff=atsOutletOff, ePDUOutlet=ePDUOutlet, envirContactName=envirContactName, ePDULoadDevMaxBankLoad=ePDULoadDevMaxBankLoad, ePDUOutletConfigMonitoredName=ePDUOutletConfigMonitoredName, atsStatusInputNum=atsStatusInputNum, ePDU2DeviceInfoModuleIndex=ePDU2DeviceInfoModuleIndex, ePDU2PhaseConfigLowLoadThreshold=ePDU2PhaseConfigLowLoadThreshold, bmProbesEntry=bmProbesEntry, ePDUPowerSupply1Ok=ePDUPowerSupply1Ok, ePDU2DeviceStatusEnergyStartTime=ePDU2DeviceStatusEnergyStartTime, upsAdvanceBatteryRunTimeRemaining=upsAdvanceBatteryRunTimeRemaining, ePDUIdentDeviceRating=ePDUIdentDeviceRating, ePDU2OutletSwitchedControlIndex=ePDU2OutletSwitchedControlIndex, bmProbesTempTable=bmProbesTempTable, atsStatusInputPhaseEntry=atsStatusInputPhaseEntry, ePDU2DeviceConfigPeakLoadReset=ePDU2DeviceConfigPeakLoadReset, upsEnterBypassMode=upsEnterBypassMode, upsPhaseBypassPowerFactor=upsPhaseBypassPowerFactor, atsIdentDateOfManufacture=atsIdentDateOfManufacture, atsIdentAgentModelName=atsIdentAgentModelName, atsLoadDevBankMaxLoad=atsLoadDevBankMaxLoad, ePDU2PhaseStatusLoad=ePDU2PhaseStatusLoad, ePDUBankOverload=ePDUBankOverload, mconfigTrapAccepterEntry=mconfigTrapAccepterEntry, upsBaseConfigDeviceTable=upsBaseConfigDeviceTable, bmConfig=bmConfig, ePDUNearOverload=ePDUNearOverload, ePDU2PhaseStatusLoadState=ePDU2PhaseStatusLoadState, envLowTempBack=envLowTempBack, upsDischarged=upsDischarged, ePDULoadPhaseConfigEntry=ePDULoadPhaseConfigEntry, bmProbesResistance=bmProbesResistance, ePDU2OutletSwitchedTableSize=ePDU2OutletSwitchedTableSize, ePDU2OutletSwitchedInfoNumber=ePDU2OutletSwitchedInfoNumber, atsConfigMediumRangeValue=atsConfigMediumRangeValue, ePDU2OutletSwitchedControlModuleIndex=ePDU2OutletSwitchedControlModuleIndex, ePDUStatusOutletEntry=ePDUStatusOutletEntry, upsAdvanceInputLineVoltage=upsAdvanceInputLineVoltage, communicationLost=communicationLost, atsIdentHardwareRev=atsIdentHardwareRev, upsAdvanceOutputFrequency=upsAdvanceOutputFrequency, bmConfigResHealthAlarmThreshold=bmConfigResHealthAlarmThreshold, upsRemainRuntimeLowThanThreshold=upsRemainRuntimeLowThanThreshold, ePDU2DeviceInfoName=ePDU2DeviceInfoName, ePDUPowerSupply1Fail=ePDUPowerSupply1Fail, pduDeviceAlarm=pduDeviceAlarm, envirTemp=envirTemp, ePDU2IdentContact=ePDU2IdentContact, atsConfig=atsConfig, upsAdvanceIdent=upsAdvanceIdent, atsStatusInputTableIndex=atsStatusInputTableIndex, upsPhaseBypassTableIndex=upsPhaseBypassTableIndex, bmProbesNum=bmProbesNum, ePDU2Sensor=ePDU2Sensor, ePDUOutletStatus=ePDUOutletStatus, bmFuncEqualActiveCond=bmFuncEqualActiveCond, atsLoadCfgBankEntry=atsLoadCfgBankEntry, ePDU2PhaseStatusVoltage=ePDU2PhaseStatusVoltage, ePDULoadStatus=ePDULoadStatus, atsStatusPowerSupply3p3VStatus=atsStatusPowerSupply3p3VStatus, atsStatusInputTable=atsStatusInputTable, upsPhase=upsPhase, atsOutletCtrlCommand=atsOutletCtrlCommand, atsStatusInputVoltage=atsStatusInputVoltage, atsLoadStatusBankPhase=atsLoadStatusBankPhase, bmProbesResTable=bmProbesResTable, ePDU2DeviceConfigName=ePDU2DeviceConfigName, ePDU2Device=ePDU2Device, mconfigMyAddr=mconfigMyAddr, ePDU2BankInfoModuleIndex=ePDU2BankInfoModuleIndex, atsOutletCfgTable=atsOutletCfgTable, ePDUStatusBankTable=ePDUStatusBankTable, ePDULoadPhaseConfig=ePDULoadPhaseConfig, upsPhaseOutputTableSize=upsPhaseOutputTableSize, pduOutletSwitchedEvent=pduOutletSwitchedEvent, bmConfigLowVoltAlarmThreshold10mV=bmConfigLowVoltAlarmThreshold10mV, ePDUPowerSupplyAlarm=ePDUPowerSupplyAlarm, ePDUOutletNearOverloadCleared=ePDUOutletNearOverloadCleared, ePDUOutletLowLoadCleared=ePDUOutletLowLoadCleared, ePDU2DeviceStatusPowerSupplyAlarm=ePDU2DeviceStatusPowerSupplyAlarm, upsBaseBatteryLastReplaceDate=upsBaseBatteryLastReplaceDate, ePDU2IdentLocation=ePDU2IdentLocation, atsNearOverloadCleared=atsNearOverloadCleared, ePDU2OutletSwitchedConfigName=ePDU2OutletSwitchedConfigName, upsAdvanceTestIndicators=upsAdvanceTestIndicators, ePDULoadBankConfigAlarm=ePDULoadBankConfigAlarm, mtrapinfoGauge=mtrapinfoGauge, ePDULoadDevNumBanks=ePDULoadDevNumBanks, atsOutletCtrlTable=atsOutletCtrlTable, bmFuncEqualElapseTime=bmFuncEqualElapseTime, envirIdent=envirIdent, atsConfigNarrowRangeValue=atsConfigNarrowRangeValue, upsPhaseInputTableSize=upsPhaseInputTableSize, atsOutletCfgEntry=atsOutletCfgEntry, ePDUStatusPhaseEntry=ePDUStatusPhaseEntry, upsEnterSleep=upsEnterSleep, ePDU2OutletSwitchedStatusName=ePDU2OutletSwitchedStatusName, bmProbesVoltageTableSize=bmProbesVoltageTableSize, ePDU2OutletSwitchedConfigNumber=ePDU2OutletSwitchedConfigNumber, ePDUOutletControlEntry=ePDUOutletControlEntry, ePDULoadStatusEntry=ePDULoadStatusEntry, upsBaseOutputStatus=upsBaseOutputStatus, mcontrol=mcontrol, upsAdvanceConfigSensitivity=upsAdvanceConfigSensitivity, ePDU2DeviceStatusCurrentPeakLoad=ePDU2DeviceStatusCurrentPeakLoad, upsAdvanceOutputVoltage=upsAdvanceOutputVoltage, upsPhaseOutputCurrent=upsPhaseOutputCurrent, ePDUOutletConfigIndex=ePDUOutletConfigIndex, atsLoadDevPhaseTable=atsLoadDevPhaseTable, ePDUOutletControlOutletCommand=ePDUOutletControlOutletCommand, ePDU2DeviceConfigPowerNearOverloadThreshold=ePDU2DeviceConfigPowerNearOverloadThreshold, bmProbesTempEntry=bmProbesTempEntry, ePDU2DeviceControlModuleIndex=ePDU2DeviceControlModuleIndex)
mibBuilder.exportSymbols("CPS-MIB", eSwitchCtrID=eSwitchCtrID, atsDevHardwareFault=atsDevHardwareFault, upsChargerFailure=upsChargerFailure, atsLoadStatusPhaseLoadState=atsLoadStatusPhaseLoadState, ePDU2PhaseStatusNumber=ePDU2PhaseStatusNumber, atsLCDCommunicationLost=atsLCDCommunicationLost, ePDUIdentIndicator=ePDUIdentIndicator, ePDUStatus=ePDUStatus, ePDUOutletControlOutletPhase=ePDUOutletControlOutletPhase, ePDU2IdentSerialNumber=ePDU2IdentSerialNumber, upsTurnedOn=upsTurnedOn, ePDUOutletStatusLoad=ePDUOutletStatusLoad, ePDULoadPhaseConfigLowLoadThreshold=ePDULoadPhaseConfigLowLoadThreshold, eSwitchIdent=eSwitchIdent, ePDUOutletDevMonitoredOutlets=ePDUOutletDevMonitoredOutlets, upsBankOutletControlEntry=upsBankOutletControlEntry, atsStatusDevSourceRelayStatus=atsStatusDevSourceRelayStatus, ePDULineOvervoltage=ePDULineOvervoltage, envDisconntected=envDisconntected, vaRating=vaRating, upsAdvanceConfigAlarmTimer=upsAdvanceConfigAlarmTimer, upsAdvanceControlFlashAndBeep=upsAdvanceControlFlashAndBeep, upsAdvanceTestEstimationDate=upsAdvanceTestEstimationDate, ePDUOutletConfigMonitoredNearOverloadThreshold=ePDUOutletConfigMonitoredNearOverloadThreshold, upsAdvanceInputMaxLineVoltage=upsAdvanceInputMaxLineVoltage, clientRemoved=clientRemoved, upsAdvanceConfigColdStart=upsAdvanceConfigColdStart, ePDU2PhaseStatusTable=ePDU2PhaseStatusTable, ePDUOutletDevNumCntrlOutlets=ePDUOutletDevNumCntrlOutlets, upsPhaseInputEntry=upsPhaseInputEntry, ePDUOutletOff=ePDUOutletOff, upsBaseControlConserveBattery=upsBaseControlConserveBattery, ePDUStatusPhaseTable=ePDUStatusPhaseTable, atsIdent=atsIdent, ePDU2IdentModuleIndex=ePDU2IdentModuleIndex, bmProbesVoltageBattIndex=bmProbesVoltageBattIndex, ePDU2PhaseStatusApparentPower=ePDU2PhaseStatusApparentPower, returnFromDischarged=returnFromDischarged, envDryContactNormal=envDryContactNormal, upsRebootStarted=upsRebootStarted, upsBaseOutputWorkingFrequency=upsBaseOutputWorkingFrequency, ePDUBankNearOverload=ePDUBankNearOverload, ePDUIdentDeviceDisplayOrientation=ePDUIdentDeviceDisplayOrientation, ePDUOutletOn=ePDUOutletOn, ePDU2OutletSwitchedInfoPhaseLayout=ePDU2OutletSwitchedInfoPhaseLayout, ePDU2DeviceStatusEnergy=ePDU2DeviceStatusEnergy, upsSleeping=upsSleeping, upsPhaseOutputPower=upsPhaseOutputPower, ePDU2OutletSwitchedStatusState=ePDU2OutletSwitchedStatusState, upsAdvanceBatteryTemperature=upsAdvanceBatteryTemperature, ePDU2Role=ePDU2Role, ePDU2DeviceTableSize=ePDU2DeviceTableSize, ePDU2PhaseConfigOverloadThreshold=ePDU2PhaseConfigOverloadThreshold, ePDUOutletStatusOutletBank=ePDUOutletStatusOutletBank, mconfig=mconfig, upsPhaseInputFrequency=upsPhaseInputFrequency, ePDUStatusInputVoltage=ePDUStatusInputVoltage, ePDU2DeviceStatusLoadState=ePDU2DeviceStatusLoadState, ePDUComponentCommunicationEstablished=ePDUComponentCommunicationEstablished, ePDU2DeviceConfigTable=ePDU2DeviceConfigTable, ups=ups, upsBypassOverload=upsBypassOverload, acceptThisDevice=acceptThisDevice, upsBankControlOutletCommand=upsBankControlOutletCommand, eSwitchBase=eSwitchBase, atsLowLoad=atsLowLoad, ePDU2DeviceInfoOrientation=ePDU2DeviceInfoOrientation, atsLoadCfgBankLowLoad=atsLoadCfgBankLowLoad, atsStatusInputPhaseTableIndex=atsStatusInputPhaseTableIndex, bmProbes=bmProbes, ePDU2DeviceInfoRating=ePDU2DeviceInfoRating, ePDULoadPhaseConfigIndex=ePDULoadPhaseConfigIndex, ePDUOutletBankEntry=ePDUOutletBankEntry, atsInputHighVoltage=atsInputHighVoltage, atsDevHardwareFaultCleared=atsDevHardwareFaultCleared, ats=ats, ePDULoad=ePDULoad, ePDU2OutletMetered=ePDU2OutletMetered, eSwitchOutletState=eSwitchOutletState, upsPhaseBypassVoltage=upsPhaseBypassVoltage, ePDUOutletBankTable=ePDUOutletBankTable, atsOutletDevCommand=atsOutletDevCommand, bmProbesTempBattIndex=bmProbesTempBattIndex, upsPhaseOutputEntry=upsPhaseOutputEntry, ePDUOutletConfigMonitoredNumber=ePDUOutletConfigMonitoredNumber, ePDU2OutletMeteredInfoRating=ePDU2OutletMeteredInfoRating, communityString=communityString, atsLoadStatusBankTableIndex=atsLoadStatusBankTableIndex, bmIdentHardwareRev=bmIdentHardwareRev, upsRFC1628TrapAlarmEntryAdded=upsRFC1628TrapAlarmEntryAdded, atsLoadStatusPhasePower=atsLoadStatusPhasePower, ePDULoadStatusEnergy=ePDULoadStatusEnergy, ePDUOutletConfigMonitoredEnergyReset=ePDUOutletConfigMonitoredEnergyReset, atsIdentAgentFirmwareRevision=atsIdentAgentFirmwareRevision, atsInputLowFrequencyCleared=atsInputLowFrequencyCleared, cpsmgmt=cpsmgmt, bmProbesInfo=bmProbesInfo, upsPhaseOutputFrequency=upsPhaseOutputFrequency, envirContactIndex=envirContactIndex, ePDULoadBankConfigLowLoadThreshold=ePDULoadBankConfigLowLoadThreshold, atsStatusInputPhaseVoltage=atsStatusInputPhaseVoltage, atsLoadCfgPhaseNearOverLoad=atsLoadCfgPhaseNearOverLoad, envirTempLowThreshold=envirTempLowThreshold, ePDU2DeviceStatusPeakLoadTimestamp=ePDU2DeviceStatusPeakLoadTimestamp, ePDU2Phase=ePDU2Phase, upsAdvanceInputLineFailCause=upsAdvanceInputLineFailCause, ePDU2DeviceInfoTable=ePDU2DeviceInfoTable, ePDU2OutletMeteredConfigModuleIndex=ePDU2OutletMeteredConfigModuleIndex, ePDUComponentCommunicationLost=ePDUComponentCommunicationLost, ePDUOverloadCleared=ePDUOverloadCleared, eSwitchIdentDateOfManufacture=eSwitchIdentDateOfManufacture, ePDU2PhaseConfigEntry=ePDU2PhaseConfigEntry, ePDULoadStatusVoltage=ePDULoadStatusVoltage, ePDUStatusOutletTableSize=ePDUStatusOutletTableSize, upsRemoteCommandFailed=upsRemoteCommandFailed, outletUserLoginInfo=outletUserLoginInfo, hardware=hardware, ePDUCommunicationEstablished=ePDUCommunicationEstablished, ePDU2OutletMeteredInfoNumber=ePDU2OutletMeteredInfoNumber, ePDULoadBankConfig=ePDULoadBankConfig, bmFuncEqual=bmFuncEqual, upsBaseInputPhase=upsBaseInputPhase, ePDUPowerSupplyDevice=ePDUPowerSupplyDevice, upsAdvanceConfigHighTransferVolt=upsAdvanceConfigHighTransferVolt, envirHumidHighThreshold=envirHumidHighThreshold, ePDUStatusPhaseTableSize=ePDUStatusPhaseTableSize, atsOutletCtrlOutletName=atsOutletCtrlOutletName, ePDUStatusBankEntry=ePDUStatusBankEntry, mtrapinfo=mtrapinfo, ePDULoadStatusPowerFactor=ePDULoadStatusPowerFactor, atsOutletOnCommand=atsOutletOnCommand, ePDU2DeviceConfigCurrentLowLoadThreshold=ePDU2DeviceConfigCurrentLowLoadThreshold, ePDUOutletConfigMonitoredEntry=ePDUOutletConfigMonitoredEntry, atsConfigDevLCDOffTime=atsConfigDevLCDOffTime, ePDUOutletStatusCommandPending=ePDUOutletStatusCommandPending, envirContact=envirContact, testEvent=testEvent, ePDU2BankConfigOverloadRestriction=ePDU2BankConfigOverloadRestriction, ePDU2OutletMeteredConfigLowLoadThreshold=ePDU2OutletMeteredConfigLowLoadThreshold, atsIdentDeviceOutletNum=atsIdentDeviceOutletNum, ePDUOutletConfigMonitoredPeakLoadReset=ePDUOutletConfigMonitoredPeakLoadReset, ePDUOutletStatusOutletName=ePDUOutletStatusOutletName, ePDULoadStatusIndex=ePDULoadStatusIndex, ePDU2IdentTableSize=ePDU2IdentTableSize, upsAdvanceIdentAgentSerialNumber=upsAdvanceIdentAgentSerialNumber, upsAdvanceTestRuntimeEstimation=upsAdvanceTestRuntimeEstimation, ePDUOutletConfigPowerOnTime=ePDUOutletConfigPowerOnTime, ePDU2OutletSwitchedInfoEntry=ePDU2OutletSwitchedInfoEntry, upsAdvanceBattery=upsAdvanceBattery, envirContactNormalState=envirContactNormalState, upsBatteryNotPresent=upsBatteryNotPresent, upsAdvanceBatteryVoltageRating=upsAdvanceBatteryVoltageRating, failAuthViaHTTP=failAuthViaHTTP, bmProbesPackIndex=bmProbesPackIndex, atsLoadStatusBankStartTime=atsLoadStatusBankStartTime, bmProbesVoltageEqualPercentage=bmProbesVoltageEqualPercentage, atsLoadCfgBankTableIndex=atsLoadCfgBankTableIndex, bmProbesResAlarmStatus=bmProbesResAlarmStatus, envirContactTableSize=envirContactTableSize, clientRegistered=clientRegistered, ePDU2DeviceConfigCurrentNearOverloadThreshold=ePDU2DeviceConfigCurrentNearOverloadThreshold, atsOutletOffCommand=atsOutletOffCommand, pduOutletMeteredEvent=pduOutletMeteredEvent, upsStatus=upsStatus, ePDUOutletControlOutletName=ePDUOutletControlOutletName, bmConfigBattAH=bmConfigBattAH, ePDU2Bank=ePDU2Bank, atsStatusPowerSupplyTableIndex=atsStatusPowerSupplyTableIndex, ePDU2DeviceConfigIndex=ePDU2DeviceConfigIndex, pduOutletSwitchedAlarmClear=pduOutletSwitchedAlarmClear, returnFromLowBattery=returnFromLowBattery, ePDULoadDevOutletNumber=ePDULoadDevOutletNumber, upsPhaseInputTable=upsPhaseInputTable, ePDU2GroupEnergyReset=ePDU2GroupEnergyReset, atsStatusNumInputPhase=atsStatusNumInputPhase, upsBaseBatteryStatus=upsBaseBatteryStatus, eSwitchIdentModelName=eSwitchIdentModelName, atsOverload=atsOverload, ePDU2DeviceInfoOutletLayout=ePDU2DeviceInfoOutletLayout, ePDU2DeviceStatusTable=ePDU2DeviceStatusTable, upsPhaseOutputTable=upsPhaseOutputTable, upsAdvanceSleepAfterDelay=upsAdvanceSleepAfterDelay, ePDU2Ident=ePDU2Ident, upsPhaseBypassTableSize=upsPhaseBypassTableSize, ePDU2DeviceControlTable=ePDU2DeviceControlTable, ePDUOutletConfigPowerOffTime=ePDUOutletConfigPowerOffTime, upsPhaseInputVoltage=upsPhaseInputVoltage, ePDUOutletStatusPeakPower=ePDUOutletStatusPeakPower, atsLoadDevBankEntry=atsLoadDevBankEntry, atsOutletCtrlTableSize=atsOutletCtrlTableSize, atsIdentAgentHardwareRevision=atsIdentAgentHardwareRevision, ePDU2DeviceStatusCurrentLoad=ePDU2DeviceStatusCurrentLoad, ePDU2PhaseConfigIndex=ePDU2PhaseConfigIndex, ePDU2OutletSwitchedStatusModuleIndex=ePDU2OutletSwitchedStatusModuleIndex, ePDULoadBankConfigIndex=ePDULoadBankConfigIndex, ePDU2OutletMeteredConfigOverloadThreshold=ePDU2OutletMeteredConfigOverloadThreshold, ePDU2DeviceStatusPowerSupply1Status=ePDU2DeviceStatusPowerSupply1Status, bmProbesResTableSize=bmProbesResTableSize, envirTempCelsiusHysteresis=envirTempCelsiusHysteresis, ePDU2PhaseStatusEntry=ePDU2PhaseStatusEntry, ePDU2IdentModelName=ePDU2IdentModelName, ePDU2OutletMeteredStatusIndex=ePDU2OutletMeteredStatusIndex, upsPhaseInput=upsPhaseInput, atsConfigFrequencyDeviation=atsConfigFrequencyDeviation, ePDU2DeviceStatusModuleIndex=ePDU2DeviceStatusModuleIndex, ePDU2IdentDateOfManufacture=ePDU2IdentDateOfManufacture, ePDU2OutletMeteredStatusPeakPowerTimestamp=ePDU2OutletMeteredStatusPeakPowerTimestamp, ePDU2GroupNumberOfDevices=ePDU2GroupNumberOfDevices, ePDUOutletStatusEnergy=ePDUOutletStatusEnergy, bmConfigLowResWarnThreshold=bmConfigLowResWarnThreshold, upsBattery=upsBattery, outletUserLogoutInfo=outletUserLogoutInfo, upsSystem=upsSystem, atsLoadDevice=atsLoadDevice, ePDU2OutletMeteredStatusName=ePDU2OutletMeteredStatusName, envHighTemperatureViolation=envHighTemperatureViolation, upsAdvanceInputStatus=upsAdvanceInputStatus, atsOutletStatusOutletPhase=atsOutletStatusOutletPhase, bmProbesVoltagePackIndex=bmProbesVoltagePackIndex, ePDUOutletStatusEntry=ePDUOutletStatusEntry, upsAdvanceIdentLCDFirmwareVersion=upsAdvanceIdentLCDFirmwareVersion, bmProbesIndex=bmProbesIndex, ePDU2DeviceConfigDisplayOrientation=ePDU2DeviceConfigDisplayOrientation, ePDU2OutletMeteredConfigNearOverloadThreshold=ePDU2OutletMeteredConfigNearOverloadThreshold, upsEstimationAbort=upsEstimationAbort, upsPhaseOutputPowerFactor=upsPhaseOutputPowerFactor, upsBaseBattery=upsBaseBattery, ePDUNearOverloadCleared=ePDUNearOverloadCleared, bmProbesTemperature=bmProbesTemperature, upsBankOutletControl=upsBankOutletControl, ePDUOutletConfigChange=ePDUOutletConfigChange, atsLoadDevPhaseTableSize=atsLoadDevPhaseTableSize, atsLoadCfgBankNearOverLoad=atsLoadCfgBankNearOverLoad, upsBankControlIndex=upsBankControlIndex, envirHumidity=envirHumidity, ePDU2BankStatusEntry=ePDU2BankStatusEntry, ePDU2PhaseConfigModuleIndex=ePDU2PhaseConfigModuleIndex, ePDUOutletDevice=ePDUOutletDevice, upsTest=upsTest, ePDU2OutletMeteredConfigEntry=ePDU2OutletMeteredConfigEntry, ePDU2OutletMeteredInfoName=ePDU2OutletMeteredInfoName, atsOutletRebootCommand=atsOutletRebootCommand, ePDU2PhaseStatusPeakLoad=ePDU2PhaseStatusPeakLoad, atsConfigWideRangeValue=atsConfigWideRangeValue, ePDULoadDevBankMaxLoad=ePDULoadDevBankMaxLoad, ePDU2OutletSwitchedStatusIndex=ePDU2OutletSwitchedStatusIndex)
