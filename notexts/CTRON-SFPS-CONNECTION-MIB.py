#
# PySNMP MIB module CTRON-SFPS-CONNECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-CONNECTION-MIB
# Produced by pysmi-1.1.10 at Mon Oct 30 02:17:24 2023
# On host fv-az443-612 platform Linux version 6.2.0-1015-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
sfpsConnectionTestAPI, sfpsConnectionConfigAPI, sfpsConnectionQueryAPI, sfpsCNXPacketStats, sfpsConnectionAPI, sfpsConnectionStats, sfpsSwitchConnections, sfpsConnectionLookupAPI = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsConnectionTestAPI", "sfpsConnectionConfigAPI", "sfpsConnectionQueryAPI", "sfpsCNXPacketStats", "sfpsConnectionAPI", "sfpsConnectionStats", "sfpsSwitchConnections", "sfpsConnectionLookupAPI")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Gauge32, IpAddress, iso, TimeTicks, MibIdentifier, Unsigned32, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Gauge32", "IpAddress", "iso", "TimeTicks", "MibIdentifier", "Unsigned32", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SfpsSwitchPort(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1), )
if mibBuilder.loadTexts: sfpsConnectionTable.setStatus('mandatory')
sfpsConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-CONNECTION-MIB", "sfpsConnectionDestination"), (0, "CTRON-SFPS-CONNECTION-MIB", "sfpsConnectionSource"))
if mibBuilder.loadTexts: sfpsConnectionEntry.setStatus('mandatory')
sfpsConnectionDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 1), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionDestination.setStatus('mandatory')
sfpsConnectionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionSource.setStatus('mandatory')
sfpsConnectionPrimInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionPrimInPort.setStatus('mandatory')
sfpsConnectionPrimOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionPrimOutPort.setStatus('mandatory')
sfpsConnectionSecInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionSecInPort.setStatus('mandatory')
sfpsConnectionSecOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionSecOutPort.setStatus('mandatory')
sfpsConnectionCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("delete", 3), ("under-creation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionCtrlStatus.setStatus('mandatory')
sfpsConnectionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionAdminStatus.setStatus('mandatory')
sfpsConnectionAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionAge.setStatus('mandatory')
sfpsConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("filter", 1), ("provisioned", 2), ("switched", 3), ("netport-filter", 4), ("self-prog-non-filter", 5), ("vlan", 6), ("tap", 7), ("mcast", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionType.setStatus('mandatory')
sfpsConnectionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionPkts.setStatus('mandatory')
sfpsConnectionBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionBytes.setStatus('mandatory')
sfpsConnectionCanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionCanAge.setStatus('mandatory')
sfpsConnectionPrimOutPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionPrimOutPorts.setStatus('mandatory')
sfpsConnectionSecOutPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionSecOutPorts.setStatus('mandatory')
sfpsAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("map", 2), ("unmap", 3), ("unmapall", 4))).clone('map')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIVerb.setStatus('mandatory')
sfpsAPIInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 2), SfpsSwitchPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIInPort.setStatus('mandatory')
sfpsAPIInHeaderType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mac-da-sa", 2), ("atm-vpi-vci", 3))).clone('mac-da-sa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIInHeaderType.setStatus('mandatory')
sfpsAPIInHeaderLength = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIInHeaderLength.setStatus('mandatory')
sfpsAPIInHeaderValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIInHeaderValue.setStatus('mandatory')
sfpsAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 6), SfpsSwitchPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIOutPort.setStatus('mandatory')
sfpsAPIOutHeaderType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mac-da-sa", 2), ("atm-vpi-vci", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIOutHeaderType.setStatus('mandatory')
sfpsAPIOutHeaderLength = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIOutHeaderLength.setStatus('mandatory')
sfpsAPIOutHeaderValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIOutHeaderValue.setStatus('mandatory')
sfpsAPIArgumentDirection = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bi-directional", 2), ("uni-directional", 3))).clone('bi-directional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIArgumentDirection.setStatus('mandatory')
sfpsAPIArgumentOwner = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("own-the-call", 2), ("dont-own-the-call", 3))).clone('dont-own-the-call')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIArgumentOwner.setStatus('mandatory')
sfpsAPIArgumentPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("priority-1", 2), ("priority-2", 3), ("priority-3", 4), ("priority-4", 5), ("priority-5", 6))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIArgumentPriority.setStatus('mandatory')
sfpsAPIType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("switched", 2), ("filtered", 3), ("provisioned", 4))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsAPIType.setStatus('mandatory')
sfpsConnectionStatsMaxCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsMaxCnxs.setStatus('mandatory')
sfpsConnectionStatsTotalCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsTotalCnxs.setStatus('mandatory')
sfpsConnectionStatsSwitchedCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsSwitchedCnxs.setStatus('mandatory')
sfpsConnectionStatsVlanCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsVlanCnxs.setStatus('mandatory')
sfpsConnectionStatsFilterCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsFilterCnxs.setStatus('mandatory')
sfpsConnectionStatsSelfProgCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsSelfProgCnxs.setStatus('mandatory')
sfpsConnectionStatsProvsnedCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsProvsnedCnxs.setStatus('mandatory')
sfpsConnectionStatsTapCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsTapCnxs.setStatus('mandatory')
sfpsConnectionStatsMcastCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsMcastCnxs.setStatus('mandatory')
sfpsConnectionStatsNetPortFilterCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsNetPortFilterCnxs.setStatus('mandatory')
sfpsConnectionStatsNonCriticalVlans = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsNonCriticalVlans.setStatus('mandatory')
sfpsConnectionStatsAddErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsAddErrors.setStatus('mandatory')
sfpsConnectionStatsDeleteErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionStatsDeleteErrors.setStatus('mandatory')
sfpsConnectionTestAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fillTable", 1), ("reapAllCnxs", 2), ("reapCnxsGivenMac", 3), ("reapCnxsGivenPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionTestAPIVerb.setStatus('mandatory')
sfpsConnectionTestAPIType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("filter", 1), ("provisioned", 2), ("switched", 3), ("netport-filter", 4), ("self-prog-non-filter", 5), ("vlan", 6), ("tap", 7), ("mcast", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionTestAPIType.setStatus('mandatory')
sfpsConnectionTestAPINumCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionTestAPINumCnxs.setStatus('mandatory')
sfpsConnectionTestAPIMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 6, 4), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionTestAPIMacAddr.setStatus('mandatory')
sfpsConnectionTestAPIPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionTestAPIPort.setStatus('mandatory')
sfpsConnectionConfigAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("agePartial", 1), ("ageFull", 2), ("setParameter", 3), ("ageFilters", 4), ("stopAging", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIVerb.setStatus('mandatory')
sfpsConnectionConfigAPICnxHiMark = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 2), Integer32().clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPICnxHiMark.setStatus('mandatory')
sfpsConnectionConfigAPICnxNumToAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 3), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPICnxNumToAge.setStatus('mandatory')
sfpsConnectionConfigAPIAgePeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgePeriod.setStatus('mandatory')
sfpsConnectionConfigAPIAgePassInProgress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgePassInProgress.setStatus('mandatory')
sfpsConnectionConfigAPICurCapacity = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPICurCapacity.setStatus('mandatory')
sfpsConnectionConfigAPILastPassTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPILastPassTime.setStatus('mandatory')
sfpsConnectionConfigAPITimeSinceLastPass = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPITimeSinceLastPass.setStatus('mandatory')
sfpsConnectionConfigAPIAgePassDelta = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgePassDelta.setStatus('mandatory')
sfpsConnectionConfigAPIAgePassCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgePassCount.setStatus('mandatory')
sfpsConnectionConfigAPIAgeStatsHiMark = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgeStatsHiMark.setStatus('mandatory')
sfpsConnectionConfigAPIStatsAgingEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIStatsAgingEnable.setStatus('mandatory')
sfpsConnectionConfigAPIAgeStatsAgingSupported = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIAgeStatsAgingSupported.setStatus('mandatory')
sfpsConnectionConfigAPIIdleCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIIdleCnxs.setStatus('mandatory')
sfpsConnectionConfigAPIActiveCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionConfigAPIActiveCnxs.setStatus('mandatory')
sfpsConnectionQueryAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lookup", 1), ("add", 2), ("delete", 3), ("mapPort", 4), ("unmapPort", 5), ("reapCnxsGivenMac", 6), ("mapPorts", 7), ("unMapPorts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIVerb.setStatus('mandatory')
sfpsConnectionQueryAPIDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIDestAddr.setStatus('mandatory')
sfpsConnectionQueryAPISourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 3), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPISourceAddr.setStatus('mandatory')
sfpsConnectionQueryAPIInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIInPort.setStatus('mandatory')
sfpsConnectionQueryAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIOutPort.setStatus('mandatory')
sfpsConnectionQueryAPICtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("delete", 3), ("under-creation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPICtrlStatus.setStatus('mandatory')
sfpsConnectionQueryAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIAdminStatus.setStatus('mandatory')
sfpsConnectionQueryAPIAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIAge.setStatus('mandatory')
sfpsConnectionQueryAPIQueryType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("filter", 1), ("provisioned", 2), ("switched", 3), ("netport-filter", 4), ("self-prog-non-filter", 5), ("vlan", 6), ("tap", 7), ("mcast", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIQueryType.setStatus('mandatory')
sfpsConnectionQueryAPIOwner = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIOwner.setStatus('mandatory')
sfpsConnectionQueryAPIPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIPkts.setStatus('mandatory')
sfpsConnectionQueryAPIBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIBytes.setStatus('mandatory')
sfpsConnectionQueryAPICanAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPICanAge.setStatus('mandatory')
sfpsConnectionQueryAPIOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIOutPorts.setStatus('mandatory')
sfpsConnectionQueryAPIMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 15), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionQueryAPIMacAddr.setStatus('mandatory')
sfpsConnectionQueryAPISecInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPISecInPort.setStatus('mandatory')
sfpsConnectionQueryAPISecOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPISecOutPort.setStatus('mandatory')
sfpsConnectionQueryAPISecOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 5, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionQueryAPISecOutPorts.setStatus('mandatory')
sfpsConnectionLookupAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("getEntry", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIVerb.setStatus('mandatory')
sfpsConnectionLookupAPIMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 2), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIMacAddr.setStatus('mandatory')
sfpsConnectionLookupAPIDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 3), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIDestAddr.setStatus('mandatory')
sfpsConnectionLookupAPISourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPISourceAddr.setStatus('mandatory')
sfpsConnectionLookupAPIPrimInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIPrimInPort.setStatus('mandatory')
sfpsConnectionLookupAPIPrimOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIPrimOutPort.setStatus('mandatory')
sfpsConnectionLookupAPISecInPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPISecInPort.setStatus('mandatory')
sfpsConnectionLookupAPISecOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPISecOutPort.setStatus('mandatory')
sfpsConnectionLookupAPICtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("delete", 3), ("under-creation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPICtrlStatus.setStatus('mandatory')
sfpsConnectionLookupAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIAdminStatus.setStatus('mandatory')
sfpsConnectionLookupAPIAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIAge.setStatus('mandatory')
sfpsConnectionLookupAPIType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("provisioned", 2), ("switched", 3), ("self-prog-filter", 4), ("self-prog-non-filter", 5), ("vlan", 6), ("tap", 7), ("mcast", 8), ("flood", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIType.setStatus('mandatory')
sfpsConnectionLookupAPIPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIPkts.setStatus('mandatory')
sfpsConnectionLookupAPIBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIBytes.setStatus('mandatory')
sfpsConnectionLookupAPICanAge = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPICanAge.setStatus('mandatory')
sfpsConnectionLookupAPIPrimOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPIPrimOutPorts.setStatus('mandatory')
sfpsConnectionLookupAPISecOutPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 3, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsConnectionLookupAPISecOutPorts.setStatus('mandatory')
sfpsCNXPacketStatsVer1Tx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsVer1Tx.setStatus('mandatory')
sfpsCNXPacketStatsVer2Tx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsVer2Tx.setStatus('mandatory')
sfpsCNXPacketStatsVer1Rx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsVer1Rx.setStatus('mandatory')
sfpsCNXPacketStatsVer2Rx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsVer2Rx.setStatus('mandatory')
sfpsCNXPacketStatsOpCode1Tx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsOpCode1Tx.setStatus('mandatory')
sfpsCNXPacketStatsOpCode2Tx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsOpCode2Tx.setStatus('mandatory')
sfpsCNXPacketStatsOpCode1Rx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsOpCode1Rx.setStatus('mandatory')
sfpsCNXPacketStatsOpCode2Rx = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsOpCode2Rx.setStatus('mandatory')
sfpsCNXPacketStatsRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCNXPacketStatsRxErrors.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-CONNECTION-MIB", sfpsAPIArgumentPriority=sfpsAPIArgumentPriority, sfpsConnectionQueryAPICtrlStatus=sfpsConnectionQueryAPICtrlStatus, sfpsCNXPacketStatsOpCode1Rx=sfpsCNXPacketStatsOpCode1Rx, sfpsConnectionStatsNonCriticalVlans=sfpsConnectionStatsNonCriticalVlans, sfpsConnectionQueryAPIQueryType=sfpsConnectionQueryAPIQueryType, sfpsConnectionTestAPIVerb=sfpsConnectionTestAPIVerb, sfpsAPIInPort=sfpsAPIInPort, sfpsConnectionConfigAPIAgePeriod=sfpsConnectionConfigAPIAgePeriod, sfpsConnectionSecOutPorts=sfpsConnectionSecOutPorts, sfpsConnectionLookupAPISecOutPort=sfpsConnectionLookupAPISecOutPort, sfpsConnectionLookupAPIPrimOutPort=sfpsConnectionLookupAPIPrimOutPort, sfpsConnectionEntry=sfpsConnectionEntry, sfpsConnectionStatsNetPortFilterCnxs=sfpsConnectionStatsNetPortFilterCnxs, sfpsConnectionConfigAPILastPassTime=sfpsConnectionConfigAPILastPassTime, sfpsConnectionLookupAPIType=sfpsConnectionLookupAPIType, sfpsConnectionDestination=sfpsConnectionDestination, sfpsConnectionQueryAPIAge=sfpsConnectionQueryAPIAge, sfpsAPIArgumentOwner=sfpsAPIArgumentOwner, sfpsConnectionConfigAPIAgeStatsHiMark=sfpsConnectionConfigAPIAgeStatsHiMark, sfpsCNXPacketStatsOpCode2Tx=sfpsCNXPacketStatsOpCode2Tx, sfpsConnectionLookupAPICtrlStatus=sfpsConnectionLookupAPICtrlStatus, sfpsConnectionQueryAPIOutPort=sfpsConnectionQueryAPIOutPort, sfpsAPIOutHeaderLength=sfpsAPIOutHeaderLength, sfpsConnectionConfigAPIActiveCnxs=sfpsConnectionConfigAPIActiveCnxs, sfpsConnectionQueryAPISecOutPorts=sfpsConnectionQueryAPISecOutPorts, sfpsConnectionLookupAPISecInPort=sfpsConnectionLookupAPISecInPort, sfpsAPIOutPort=sfpsAPIOutPort, sfpsConnectionStatsMaxCnxs=sfpsConnectionStatsMaxCnxs, sfpsConnectionQueryAPIAdminStatus=sfpsConnectionQueryAPIAdminStatus, SfpsSwitchPort=SfpsSwitchPort, sfpsConnectionConfigAPICnxHiMark=sfpsConnectionConfigAPICnxHiMark, sfpsConnectionBytes=sfpsConnectionBytes, sfpsAPIInHeaderLength=sfpsAPIInHeaderLength, sfpsAPIInHeaderType=sfpsAPIInHeaderType, sfpsCNXPacketStatsRxErrors=sfpsCNXPacketStatsRxErrors, sfpsConnectionAdminStatus=sfpsConnectionAdminStatus, sfpsCNXPacketStatsVer1Rx=sfpsCNXPacketStatsVer1Rx, sfpsAPIOutHeaderValue=sfpsAPIOutHeaderValue, sfpsConnectionSource=sfpsConnectionSource, sfpsConnectionStatsVlanCnxs=sfpsConnectionStatsVlanCnxs, sfpsConnectionConfigAPIAgePassCount=sfpsConnectionConfigAPIAgePassCount, sfpsConnectionQueryAPISourceAddr=sfpsConnectionQueryAPISourceAddr, sfpsCNXPacketStatsVer2Rx=sfpsCNXPacketStatsVer2Rx, sfpsConnectionConfigAPITimeSinceLastPass=sfpsConnectionConfigAPITimeSinceLastPass, sfpsConnectionLookupAPICanAge=sfpsConnectionLookupAPICanAge, sfpsConnectionPrimInPort=sfpsConnectionPrimInPort, sfpsConnectionLookupAPIPkts=sfpsConnectionLookupAPIPkts, sfpsAPIType=sfpsAPIType, SfpsAddress=SfpsAddress, sfpsConnectionLookupAPIAdminStatus=sfpsConnectionLookupAPIAdminStatus, sfpsConnectionConfigAPIAgeStatsAgingSupported=sfpsConnectionConfigAPIAgeStatsAgingSupported, sfpsConnectionQueryAPIBytes=sfpsConnectionQueryAPIBytes, sfpsConnectionLookupAPIBytes=sfpsConnectionLookupAPIBytes, sfpsConnectionConfigAPIAgePassInProgress=sfpsConnectionConfigAPIAgePassInProgress, sfpsConnectionTable=sfpsConnectionTable, sfpsConnectionQueryAPISecInPort=sfpsConnectionQueryAPISecInPort, sfpsConnectionSecInPort=sfpsConnectionSecInPort, sfpsConnectionPrimOutPorts=sfpsConnectionPrimOutPorts, sfpsConnectionTestAPINumCnxs=sfpsConnectionTestAPINumCnxs, sfpsConnectionStatsSelfProgCnxs=sfpsConnectionStatsSelfProgCnxs, sfpsConnectionLookupAPIAge=sfpsConnectionLookupAPIAge, sfpsConnectionTestAPIPort=sfpsConnectionTestAPIPort, sfpsConnectionConfigAPIStatsAgingEnable=sfpsConnectionConfigAPIStatsAgingEnable, sfpsCNXPacketStatsOpCode2Rx=sfpsCNXPacketStatsOpCode2Rx, sfpsConnectionConfigAPICnxNumToAge=sfpsConnectionConfigAPICnxNumToAge, sfpsConnectionStatsAddErrors=sfpsConnectionStatsAddErrors, sfpsAPIVerb=sfpsAPIVerb, sfpsConnectionConfigAPIVerb=sfpsConnectionConfigAPIVerb, sfpsConnectionLookupAPISecOutPorts=sfpsConnectionLookupAPISecOutPorts, sfpsConnectionStatsDeleteErrors=sfpsConnectionStatsDeleteErrors, sfpsConnectionQueryAPIOwner=sfpsConnectionQueryAPIOwner, sfpsConnectionStatsTapCnxs=sfpsConnectionStatsTapCnxs, sfpsConnectionStatsProvsnedCnxs=sfpsConnectionStatsProvsnedCnxs, sfpsConnectionQueryAPIPkts=sfpsConnectionQueryAPIPkts, sfpsConnectionQueryAPIMacAddr=sfpsConnectionQueryAPIMacAddr, sfpsConnectionQueryAPICanAge=sfpsConnectionQueryAPICanAge, sfpsConnectionQueryAPIVerb=sfpsConnectionQueryAPIVerb, sfpsAPIArgumentDirection=sfpsAPIArgumentDirection, sfpsConnectionTestAPIType=sfpsConnectionTestAPIType, sfpsCNXPacketStatsOpCode1Tx=sfpsCNXPacketStatsOpCode1Tx, sfpsConnectionLookupAPISourceAddr=sfpsConnectionLookupAPISourceAddr, sfpsConnectionCtrlStatus=sfpsConnectionCtrlStatus, sfpsConnectionLookupAPIDestAddr=sfpsConnectionLookupAPIDestAddr, sfpsConnectionLookupAPIPrimInPort=sfpsConnectionLookupAPIPrimInPort, sfpsAPIOutHeaderType=sfpsAPIOutHeaderType, sfpsConnectionStatsSwitchedCnxs=sfpsConnectionStatsSwitchedCnxs, sfpsAPIInHeaderValue=sfpsAPIInHeaderValue, sfpsConnectionType=sfpsConnectionType, sfpsConnectionLookupAPIVerb=sfpsConnectionLookupAPIVerb, sfpsConnectionQueryAPISecOutPort=sfpsConnectionQueryAPISecOutPort, sfpsConnectionLookupAPIMacAddr=sfpsConnectionLookupAPIMacAddr, sfpsConnectionCanAge=sfpsConnectionCanAge, sfpsConnectionConfigAPIAgePassDelta=sfpsConnectionConfigAPIAgePassDelta, sfpsConnectionLookupAPIPrimOutPorts=sfpsConnectionLookupAPIPrimOutPorts, sfpsConnectionConfigAPICurCapacity=sfpsConnectionConfigAPICurCapacity, sfpsConnectionStatsFilterCnxs=sfpsConnectionStatsFilterCnxs, sfpsConnectionQueryAPIDestAddr=sfpsConnectionQueryAPIDestAddr, sfpsConnectionStatsMcastCnxs=sfpsConnectionStatsMcastCnxs, sfpsConnectionPkts=sfpsConnectionPkts, sfpsConnectionStatsTotalCnxs=sfpsConnectionStatsTotalCnxs, sfpsConnectionAge=sfpsConnectionAge, sfpsConnectionPrimOutPort=sfpsConnectionPrimOutPort, sfpsConnectionQueryAPIOutPorts=sfpsConnectionQueryAPIOutPorts, sfpsCNXPacketStatsVer1Tx=sfpsCNXPacketStatsVer1Tx, sfpsCNXPacketStatsVer2Tx=sfpsCNXPacketStatsVer2Tx, sfpsConnectionConfigAPIIdleCnxs=sfpsConnectionConfigAPIIdleCnxs, sfpsConnectionSecOutPort=sfpsConnectionSecOutPort, sfpsConnectionTestAPIMacAddr=sfpsConnectionTestAPIMacAddr, sfpsConnectionQueryAPIInPort=sfpsConnectionQueryAPIInPort)
