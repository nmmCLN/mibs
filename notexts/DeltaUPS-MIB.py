#
# PySNMP MIB module DeltaUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/delta/DeltaUPS-MIB
# Produced by pysmi-1.1.8 at Wed Oct 11 10:04:25 2023
# On host fv-az247-435 platform Linux version 6.2.0-1012-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Counter64, NotificationType, Counter32, Integer32, Unsigned32, enterprises, IpAddress, Bits, NotificationType, ObjectIdentity, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "NotificationType", "Counter32", "Integer32", "Unsigned32", "enterprises", "IpAddress", "Bits", "NotificationType", "ObjectIdentity", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
delta = MibIdentifier((1, 3, 6, 1, 4, 1, 2254))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2))
upsv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4))
dupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1))
dupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2))
dupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3))
dupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4))
dupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5))
dupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6))
dupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7))
dupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8))
dupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9))
dupsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10))
dupsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20))
dupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentManufacturer.setStatus('mandatory')
dupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentModel.setStatus('mandatory')
dupsIdentUPSSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentUPSSoftwareVersion.setStatus('mandatory')
dupsIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsIdentAgentSoftwareVersion.setStatus('mandatory')
dupsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsIdentName.setStatus('mandatory')
dupsAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsAttachedDevices.setStatus('mandatory')
dupsRatingOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputVA.setStatus('mandatory')
dupsRatingOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputVoltage.setStatus('mandatory')
dupsRatingOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingOutputFrequency.setStatus('mandatory')
dupsRatingInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingInputVoltage.setStatus('mandatory')
dupsRatingInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingInputFrequency.setStatus('mandatory')
dupsRatingBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsRatingBatteryVoltage.setStatus('mandatory')
dupsLowTransferVoltUpBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 13), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowTransferVoltUpBound.setStatus('mandatory')
dupsLowTransferVoltLowBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 14), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowTransferVoltLowBound.setStatus('mandatory')
dupsHighTransferVoltUpBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 15), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsHighTransferVoltUpBound.setStatus('mandatory')
dupsHighTransferVoltLowBound = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 16), Integer32()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsHighTransferVoltLowBound.setStatus('mandatory')
dupsLowBattTime = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLowBattTime.setStatus('mandatory')
dupsOutletRelays = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutletRelays.setStatus('mandatory')
dupsType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on-line", 1), ("off-line", 2), ("line-interactive", 3), ("3phase", 4), ("splite-phase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsType.setStatus('mandatory')
dupsShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("system", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsShutdownType.setStatus('mandatory')
dupsAutoReboot = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsAutoReboot.setStatus('mandatory')
dupsShutdownAction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsShutdownAction.setStatus('mandatory')
dupsRestartAction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRestartAction.setStatus('mandatory')
dupsSetOutletRelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsSetOutletRelay.setStatus('mandatory')
dupsRelayOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRelayOffDelay.setStatus('mandatory')
dupsRelayOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsRelayOnDelay.setStatus('mandatory')
dupsConfigBuzzerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("silence", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigBuzzerAlarm.setStatus('mandatory')
dupsConfigBuzzerState = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigBuzzerState.setStatus('mandatory')
dupsConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reduced", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigSensitivity.setStatus('mandatory')
dupsConfigLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 4), Integer32()).setUnits('Volt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigLowVoltageTransferPoint.setStatus('mandatory')
dupsConfigHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 5), Integer32()).setUnits('Volt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigHighVoltageTransferPoint.setStatus('mandatory')
dupsConfigShutdownOSDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 6), Integer32()).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigShutdownOSDelay.setStatus('mandatory')
dupsConfigUPSBootDelay = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 7), Integer32()).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigUPSBootDelay.setStatus('mandatory')
dupsConfigExternalBatteryPack = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsConfigExternalBatteryPack.setStatus('mandatory')
dupsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputNumLines.setStatus('mandatory')
dupsInputFrequency1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency1.setStatus('mandatory')
dupsInputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage1.setStatus('mandatory')
dupsInputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent1.setStatus('mandatory')
dupsInputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency2.setStatus('mandatory')
dupsInputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage2.setStatus('mandatory')
dupsInputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent2.setStatus('mandatory')
dupsInputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputFrequency3.setStatus('mandatory')
dupsInputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputVoltage3.setStatus('mandatory')
dupsInputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsInputCurrent3.setStatus('mandatory')
dupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 0), ("battery", 1), ("bypass", 2), ("reducing", 3), ("boosting", 4), ("manualBypass", 5), ("other", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputSource.setStatus('mandatory')
dupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 2), Integer32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputFrequency.setStatus('mandatory')
dupsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputNumLines.setStatus('mandatory')
dupsOutputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage1.setStatus('mandatory')
dupsOutputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent1.setStatus('mandatory')
dupsOutputPower1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower1.setStatus('mandatory')
dupsOutputLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad1.setStatus('mandatory')
dupsOutputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage2.setStatus('mandatory')
dupsOutputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent2.setStatus('mandatory')
dupsOutputPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower2.setStatus('mandatory')
dupsOutputLoad2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad2.setStatus('mandatory')
dupsOutputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputVoltage3.setStatus('mandatory')
dupsOutputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputCurrent3.setStatus('mandatory')
dupsOutputPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputPower3.setStatus('mandatory')
dupsOutputLoad3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsOutputLoad3.setStatus('mandatory')
dupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 1), Integer32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassFrequency.setStatus('mandatory')
dupsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassNumLines.setStatus('mandatory')
dupsBypassVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage1.setStatus('mandatory')
dupsBypassCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent1.setStatus('mandatory')
dupsBypassPower1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower1.setStatus('mandatory')
dupsBypassVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage2.setStatus('mandatory')
dupsBypassCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent2.setStatus('mandatory')
dupsBypassPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower2.setStatus('mandatory')
dupsBypassVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassVoltage3.setStatus('mandatory')
dupsBypassCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassCurrent3.setStatus('mandatory')
dupsBypassPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBypassPower3.setStatus('mandatory')
dupsBatteryCondiction = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("good", 0), ("weak", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCondiction.setStatus('mandatory')
dupsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("low", 1), ("depleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryStatus.setStatus('mandatory')
dupsBatteryCharge = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("floating", 0), ("charging", 1), ("resting", 2), ("discharging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCharge.setStatus('mandatory')
dupsSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsSecondsOnBattery.setStatus('mandatory')
dupsBatteryEstimatedTime = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 5), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryEstimatedTime.setStatus('mandatory')
dupsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 6), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryVoltage.setStatus('mandatory')
dupsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 7), Integer32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCurrent.setStatus('mandatory')
dupsBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsBatteryCapacity.setStatus('mandatory')
dupsTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTemperature.setStatus('mandatory')
dupsLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsLastReplaceDate.setStatus('mandatory')
dupsNextReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsNextReplaceDate.setStatus('mandatory')
dupsTestType = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("abort", 0), ("generalTest", 1), ("batteryTest", 2), ("testFor10sec", 3), ("testUntilBattlow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsTestType.setStatus('mandatory')
dupsTestResultsSummary = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestsInitiated", 0), ("donePass", 1), ("inProgress", 2), ("generalTestFail", 3), ("batteryTestFail", 4), ("deepBatteryTestFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTestResultsSummary.setStatus('mandatory')
dupsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsTestResultsDetail.setStatus('mandatory')
dupsAlarmDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmDisconnect.setStatus('mandatory')
dupsAlarmPowerFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmPowerFail.setStatus('mandatory')
dupsAlarmBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryLow.setStatus('mandatory')
dupsAlarmLoadWarning = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadWarning.setStatus('mandatory')
dupsAlarmLoadSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadSeverity.setStatus('mandatory')
dupsAlarmLoadOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadOnBypass.setStatus('mandatory')
dupsAlarmUPSFault = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSFault.setStatus('mandatory')
dupsAlarmBatteryGroundFault = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryGroundFault.setStatus('mandatory')
dupsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmTestInProgress.setStatus('mandatory')
dupsAlarmBatteryTestFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBatteryTestFail.setStatus('mandatory')
dupsAlarmFuseFailure = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmFuseFailure.setStatus('mandatory')
dupsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOverload.setStatus('mandatory')
dupsAlarmOutputOverCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOverCurrent.setStatus('mandatory')
dupsAlarmInverterAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmInverterAbnormal.setStatus('mandatory')
dupsAlarmRectifierAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmRectifierAbnormal.setStatus('mandatory')
dupsAlarmReserveAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmReserveAbnormal.setStatus('mandatory')
dupsAlarmLoadOnReserve = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmLoadOnReserve.setStatus('mandatory')
dupsAlarmOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverTemperature.setStatus('mandatory')
dupsAlarmOutputBad = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputBad.setStatus('mandatory')
dupsAlarmBypassBad = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmBypassBad.setStatus('mandatory')
dupsAlarmUPSOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSOff.setStatus('mandatory')
dupsAlarmChargerFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmChargerFail.setStatus('mandatory')
dupsAlarmFanFail = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmFanFail.setStatus('mandatory')
dupsAlarmEconomicMode = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEconomicMode.setStatus('mandatory')
dupsAlarmOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOutputOff.setStatus('mandatory')
dupsAlarmSmartShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmSmartShutdown.setStatus('mandatory')
dupsAlarmEmergencyPowerOff = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEmergencyPowerOff.setStatus('mandatory')
dupsAlarmUPSShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 9, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmUPSShutdown.setStatus('mandatory')
dupsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsEnvTemperature.setStatus('mandatory')
dupsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 2), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsEnvHumidity.setStatus('mandatory')
dupsEnvSetTemperatureLimit = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetTemperatureLimit.setStatus('mandatory')
dupsEnvSetHumidityLimit = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 4), Integer32()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetHumidityLimit.setStatus('mandatory')
dupsEnvSetEnvRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay1.setStatus('mandatory')
dupsEnvSetEnvRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay2.setStatus('mandatory')
dupsEnvSetEnvRelay3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay3.setStatus('mandatory')
dupsEnvSetEnvRelay4 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOpen", 0), ("normalClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dupsEnvSetEnvRelay4.setStatus('mandatory')
dupsAlarmOverEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverEnvTemperature.setStatus('mandatory')
dupsAlarmOverEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmOverEnvHumidity.setStatus('mandatory')
dupsAlarmEnvRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay1.setStatus('mandatory')
dupsAlarmEnvRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay2.setStatus('mandatory')
dupsAlarmEnvRelay3 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay3.setStatus('mandatory')
dupsAlarmEnvRelay4 = MibScalar((1, 3, 6, 1, 4, 1, 2254, 2, 4, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dupsAlarmEnvRelay4.setStatus('mandatory')
dupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,1))
dupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,2))
dupsPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,3))
dupsPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,4))
dupsLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,5))
dupsReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,6))
dupsLoadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,7))
dupsNoLongerLoadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,8))
dupsLoadSeverity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,9))
dupsNoLongerLoadSeverity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,10))
dupsLoadOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,11))
dupsNoLongerLoadOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,12))
dupsUPSFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,13))
dupsReturnFromUPSFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,14))
dupsBatteryGroundFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,15))
dupsNoLongerBatteryFault = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,16))
dupsTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,17))
dupsBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,18))
dupsFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,19))
dupsFuseRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,20))
dupsOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,21))
dupsNoLongerOverload = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,22))
dupsOutputOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,23))
dupsNoLongerOutputOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,24))
dupsInverterAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,25))
dupsInverterRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,26))
dupsRectifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,27))
dupsRectifierRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,28))
dupsReserveAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,29))
dupsReserveRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,30))
dupsLoadOnReserve = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,31))
dupsNoLongerLoadOnReserve = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,32))
dupsEnvOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,33))
dupsNoLongerEnvOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,34))
dupsEnvOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,35))
dupsNoLongerEnvOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,36))
dupsEnvRelay1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,37))
dupsEnvRelay1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,38))
dupsEnvRelay2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,39))
dupsEnvRelay2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,40))
dupsEnvRelay3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,41))
dupsEnvRelay3Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,42))
dupsEnvRelay4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,43))
dupsEnvRelay4Normal = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,44))
dupsSmartShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,45))
dupsCancelShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,46))
dupsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,47))
dupsEPOON = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,48))
dupsEPOOFF = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,49))
dupsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,50))
dupsNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,51))
dupsBattReplace = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,52))
dupsReturnFromBattReplace = NotificationType((1, 3, 6, 1, 4, 1, 2254, 2, 4, 20) + (0,53))
mibBuilder.exportSymbols("DeltaUPS-MIB", dupsInputVoltage3=dupsInputVoltage3, dupsBypassNumLines=dupsBypassNumLines, dupsConfigShutdownOSDelay=dupsConfigShutdownOSDelay, dupsEnvSetEnvRelay3=dupsEnvSetEnvRelay3, dupsIdentUPSSoftwareVersion=dupsIdentUPSSoftwareVersion, dupsConfigBuzzerState=dupsConfigBuzzerState, dupsAlarmBatteryGroundFault=dupsAlarmBatteryGroundFault, dupsBatteryCapacity=dupsBatteryCapacity, dupsLoadOnBypass=dupsLoadOnBypass, dupsHighTransferVoltLowBound=dupsHighTransferVoltLowBound, dupsEnvRelay1Normal=dupsEnvRelay1Normal, dupsEPOON=dupsEPOON, dupsTestResultsSummary=dupsTestResultsSummary, dupsOutputPower3=dupsOutputPower3, dupsAlarmLoadOnBypass=dupsAlarmLoadOnBypass, dupsFuseRecovered=dupsFuseRecovered, dupsSmartShutdown=dupsSmartShutdown, dupsEnvRelay1Alarm=dupsEnvRelay1Alarm, dupsShutdownType=dupsShutdownType, dupsBattReplace=dupsBattReplace, dupsOutputVoltage2=dupsOutputVoltage2, dupsLowTransferVoltLowBound=dupsLowTransferVoltLowBound, dupsInputVoltage1=dupsInputVoltage1, dupsAlarmFuseFailure=dupsAlarmFuseFailure, dupsRelayOffDelay=dupsRelayOffDelay, dupsOutputOverload=dupsOutputOverload, dupsLowBattTime=dupsLowBattTime, dupsAlarmOverEnvTemperature=dupsAlarmOverEnvTemperature, dupsAutoReboot=dupsAutoReboot, dupsRectifierRecovered=dupsRectifierRecovered, dupsInverterAbnormal=dupsInverterAbnormal, dupsBattery=dupsBattery, dupsOutputNumLines=dupsOutputNumLines, dupsTest=dupsTest, dupsPowerFail=dupsPowerFail, dupsShutdownAction=dupsShutdownAction, dupsAlarmLoadOnReserve=dupsAlarmLoadOnReserve, dupsNoLongerOutputOverCurrent=dupsNoLongerOutputOverCurrent, dupsEnvSetEnvRelay2=dupsEnvSetEnvRelay2, dupsUPSFault=dupsUPSFault, dupsNoLongerEnvOverTemperature=dupsNoLongerEnvOverTemperature, dupsBypass=dupsBypass, dupsLoadOnReserve=dupsLoadOnReserve, dupsOutputLoad1=dupsOutputLoad1, dupsOutputPower2=dupsOutputPower2, dupsAlarmEnvRelay2=dupsAlarmEnvRelay2, dupsAlarmOutputOverload=dupsAlarmOutputOverload, dupsTestResultsDetail=dupsTestResultsDetail, dupsBatteryCondiction=dupsBatteryCondiction, dupsBypassPower2=dupsBypassPower2, dupsAlarmUPSShutdown=dupsAlarmUPSShutdown, dupsConfigUPSBootDelay=dupsConfigUPSBootDelay, dupsInputFrequency3=dupsInputFrequency3, dupsTestCompleted=dupsTestCompleted, dupsEnvSetEnvRelay4=dupsEnvSetEnvRelay4, dupsInput=dupsInput, dupsEnvOverHumidity=dupsEnvOverHumidity, dupsOutputCurrent2=dupsOutputCurrent2, dupsNoLongerBatteryFault=dupsNoLongerBatteryFault, dupsNoLongerLoadSeverity=dupsNoLongerLoadSeverity, dupsReturnFromBattReplace=dupsReturnFromBattReplace, dupsIdent=dupsIdent, dupsBypassCurrent3=dupsBypassCurrent3, dupsOutputVoltage1=dupsOutputVoltage1, dupsAlarmRectifierAbnormal=dupsAlarmRectifierAbnormal, dupsReserveRecovered=dupsReserveRecovered, dupsLowTransferVoltUpBound=dupsLowTransferVoltUpBound, dupsOutletRelays=dupsOutletRelays, dupsOutputPower1=dupsOutputPower1, dupsAlarmLoadWarning=dupsAlarmLoadWarning, dupsFuseFailure=dupsFuseFailure, dupsTemperature=dupsTemperature, dupsBatteryCurrent=dupsBatteryCurrent, dupsCancelShutdown=dupsCancelShutdown, dupsBypassVoltage1=dupsBypassVoltage1, dupsHighTransferVoltUpBound=dupsHighTransferVoltUpBound, dupsAlarmOutputOff=dupsAlarmOutputOff, dupsAlarmEmergencyPowerOff=dupsAlarmEmergencyPowerOff, dupsEnvTemperature=dupsEnvTemperature, dupsOutputOverCurrent=dupsOutputOverCurrent, dupsAlarmPowerFail=dupsAlarmPowerFail, dupsOutputCurrent3=dupsOutputCurrent3, dupsInputCurrent2=dupsInputCurrent2, dupsEnvRelay3Alarm=dupsEnvRelay3Alarm, dupsNormalTemperature=dupsNormalTemperature, dupsEnvHumidity=dupsEnvHumidity, dupsRatingInputVoltage=dupsRatingInputVoltage, dupsLoadSeverity=dupsLoadSeverity, dupsBypassCurrent2=dupsBypassCurrent2, dupsRatingOutputVoltage=dupsRatingOutputVoltage, dupsRelayOnDelay=dupsRelayOnDelay, dupsAlarmInverterAbnormal=dupsAlarmInverterAbnormal, dupsBypassPower1=dupsBypassPower1, dupsTestInProgress=dupsTestInProgress, dupsIdentManufacturer=dupsIdentManufacturer, dupsConfigExternalBatteryPack=dupsConfigExternalBatteryPack, dupsBatteryGroundFault=dupsBatteryGroundFault, dupsAlarmBypassBad=dupsAlarmBypassBad, dupsNoLongerEnvOverHumidity=dupsNoLongerEnvOverHumidity, dupsAlarmBatteryLow=dupsAlarmBatteryLow, ups=ups, dupsInputFrequency2=dupsInputFrequency2, dupsBypassPower3=dupsBypassPower3, dupsSecondsOnBattery=dupsSecondsOnBattery, dupsConfigLowVoltageTransferPoint=dupsConfigLowVoltageTransferPoint, dupsAlarmTestInProgress=dupsAlarmTestInProgress, dupsBatteryCharge=dupsBatteryCharge, dupsRectifierAbnormal=dupsRectifierAbnormal, dupsTraps=dupsTraps, dupsConfigBuzzerAlarm=dupsConfigBuzzerAlarm, dupsEnvRelay3Normal=dupsEnvRelay3Normal, dupsAttachedDevices=dupsAttachedDevices, dupsRatingOutputFrequency=dupsRatingOutputFrequency, dupsAlarmSmartShutdown=dupsAlarmSmartShutdown, dupsConfigSensitivity=dupsConfigSensitivity, dupsInputCurrent3=dupsInputCurrent3, dupsReturnFromUPSFault=dupsReturnFromUPSFault, dupsOutput=dupsOutput, dupsAlarmFanFail=dupsAlarmFanFail, upsv4=upsv4, dupsOutputLoad3=dupsOutputLoad3, dupsBypassFrequency=dupsBypassFrequency, dupsAlarmOverTemperature=dupsAlarmOverTemperature, dupsEnvSetHumidityLimit=dupsEnvSetHumidityLimit, dupsBypassVoltage2=dupsBypassVoltage2, dupsAlarmOverEnvHumidity=dupsAlarmOverEnvHumidity, dupsControl=dupsControl, dupsConfig=dupsConfig, dupsEnvironment=dupsEnvironment, dupsIdentAgentSoftwareVersion=dupsIdentAgentSoftwareVersion, dupsConfigHighVoltageTransferPoint=dupsConfigHighVoltageTransferPoint, dupsAlarmOutputOverCurrent=dupsAlarmOutputOverCurrent, dupsAlarmReserveAbnormal=dupsAlarmReserveAbnormal, dupsType=dupsType, dupsBatteryStatus=dupsBatteryStatus, dupsOutputSource=dupsOutputSource, dupsTestType=dupsTestType, dupsEnvRelay4Alarm=dupsEnvRelay4Alarm, dupsAlarmEnvRelay3=dupsAlarmEnvRelay3, dupsAlarmUPSOff=dupsAlarmUPSOff, dupsAlarm=dupsAlarm, dupsCommunicationEstablished=dupsCommunicationEstablished, dupsCommunicationLost=dupsCommunicationLost, dupsOutputCurrent1=dupsOutputCurrent1, dupsBypassVoltage3=dupsBypassVoltage3, dupsEnvRelay4Normal=dupsEnvRelay4Normal, dupsInverterRecovered=dupsInverterRecovered, dupsRatingOutputVA=dupsRatingOutputVA, dupsPowerRestored=dupsPowerRestored, dupsAlarmEnvRelay4=dupsAlarmEnvRelay4, dupsAlarmUPSFault=dupsAlarmUPSFault, dupsRestartAction=dupsRestartAction, dupsNextReplaceDate=dupsNextReplaceDate, dupsAlarmEconomicMode=dupsAlarmEconomicMode, dupsAlarmOutputBad=dupsAlarmOutputBad, dupsLowBattery=dupsLowBattery, dupsInputVoltage2=dupsInputVoltage2, dupsIdentName=dupsIdentName, dupsOutputFrequency=dupsOutputFrequency, dupsRatingBatteryVoltage=dupsRatingBatteryVoltage, dupsInputNumLines=dupsInputNumLines, dupsNoLongerOverload=dupsNoLongerOverload, dupsOutputLoad2=dupsOutputLoad2, delta=delta, dupsOutputVoltage3=dupsOutputVoltage3, dupsAlarmDisconnect=dupsAlarmDisconnect, dupsNoLongerLoadWarning=dupsNoLongerLoadWarning, dupsNoLongerLoadOnBypass=dupsNoLongerLoadOnBypass, dupsAlarmChargerFail=dupsAlarmChargerFail, dupsEPOOFF=dupsEPOOFF, dupsBatteryEstimatedTime=dupsBatteryEstimatedTime, dupsAlarmLoadSeverity=dupsAlarmLoadSeverity, dupsInputFrequency1=dupsInputFrequency1, dupsBypassCurrent1=dupsBypassCurrent1, dupsAlarmBatteryTestFail=dupsAlarmBatteryTestFail, dupsEnvSetTemperatureLimit=dupsEnvSetTemperatureLimit, dupsEnvSetEnvRelay1=dupsEnvSetEnvRelay1, dupsLastReplaceDate=dupsLastReplaceDate, dupsEnvRelay2Alarm=dupsEnvRelay2Alarm, dupsRatingInputFrequency=dupsRatingInputFrequency, dupsLoadWarning=dupsLoadWarning, dupsOverTemperature=dupsOverTemperature, dupsIdentModel=dupsIdentModel, dupsEnvOverTemperature=dupsEnvOverTemperature, dupsAlarmEnvRelay1=dupsAlarmEnvRelay1, dupsBatteryVoltage=dupsBatteryVoltage, dupsNoLongerLoadOnReserve=dupsNoLongerLoadOnReserve, dupsReserveAbnormal=dupsReserveAbnormal, dupsEnvRelay2Normal=dupsEnvRelay2Normal, dupsSetOutletRelay=dupsSetOutletRelay, dupsBatteryTestFail=dupsBatteryTestFail, dupsReturnFromLowBattery=dupsReturnFromLowBattery, dupsInputCurrent1=dupsInputCurrent1)
