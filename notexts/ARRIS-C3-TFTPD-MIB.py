#
# PySNMP MIB module ARRIS-C3-TFTPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-TFTPD-MIB
# Produced by pysmi-1.1.8 at Wed Sep 13 02:42:31 2023
# On host fv-az934-274 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Integer32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType, iso, IpAddress, Counter64, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Integer32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType", "iso", "IpAddress", "Counter64", "ObjectIdentity", "MibIdentifier")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cmtsC3TFTPDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9))
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setLastUpdated('200403300000Z')
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setOrganization('Arris International')
dcxTFTPDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1))
dcxTFTPDServerState = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDServerState.setStatus('current')
dcxTFTPDCurrentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDCurrentDirectory.setStatus('current')
dcxTFTPDIpVerification = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDIpVerification.setStatus('current')
dcxTFTPDClearCache = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDClearCache.setStatus('current')
dcxTFTPDReadRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequests.setStatus('current')
dcxTFTPDReadRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsDropped.setStatus('current')
dcxTFTPDReadRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsFailed.setStatus('current')
dcxTFTPDReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadBytes.setStatus('current')
dcxTFTPDWriteRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequests.setStatus('current')
dcxTFTPDWriteRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsDropped.setStatus('current')
dcxTFTPDWriteRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsFailed.setStatus('current')
dcxTFTPDWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteBytes.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-TFTPD-MIB", dcxTFTPDWriteRequests=dcxTFTPDWriteRequests, dcxTFTPDReadRequestsDropped=dcxTFTPDReadRequestsDropped, dcxTFTPDClearCache=dcxTFTPDClearCache, dcxTFTPDWriteRequestsDropped=dcxTFTPDWriteRequestsDropped, dcxTFTPDReadBytes=dcxTFTPDReadBytes, dcxTFTPDWriteBytes=dcxTFTPDWriteBytes, dcxTFTPDReadRequests=dcxTFTPDReadRequests, dcxTFTPDReadRequestsFailed=dcxTFTPDReadRequestsFailed, dcxTFTPDWriteRequestsFailed=dcxTFTPDWriteRequestsFailed, cmtsC3TFTPDMIB=cmtsC3TFTPDMIB, dcxTFTPDServerState=dcxTFTPDServerState, dcxTFTPDObjects=dcxTFTPDObjects, PYSNMP_MODULE_ID=cmtsC3TFTPDMIB, dcxTFTPDCurrentDirectory=dcxTFTPDCurrentDirectory, dcxTFTPDIpVerification=dcxTFTPDIpVerification)
