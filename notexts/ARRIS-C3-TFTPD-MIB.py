#
# PySNMP MIB module ARRIS-C3-TFTPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-TFTPD-MIB
# Produced by pysmi-1.1.8 at Mon Jan  2 13:45:37 2023
# On host fv-az573-247 platform Linux version 5.15.0-1024-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Bits, MibIdentifier, Counter32, iso, Integer32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Bits", "MibIdentifier", "Counter32", "iso", "Integer32", "Unsigned32", "IpAddress")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cmtsC3TFTPDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9))
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setLastUpdated('200403300000Z')
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setOrganization('Arris International')
dcxTFTPDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1))
dcxTFTPDServerState = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDServerState.setStatus('current')
dcxTFTPDCurrentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDCurrentDirectory.setStatus('current')
dcxTFTPDIpVerification = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDIpVerification.setStatus('current')
dcxTFTPDClearCache = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDClearCache.setStatus('current')
dcxTFTPDReadRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequests.setStatus('current')
dcxTFTPDReadRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsDropped.setStatus('current')
dcxTFTPDReadRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsFailed.setStatus('current')
dcxTFTPDReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadBytes.setStatus('current')
dcxTFTPDWriteRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequests.setStatus('current')
dcxTFTPDWriteRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsDropped.setStatus('current')
dcxTFTPDWriteRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsFailed.setStatus('current')
dcxTFTPDWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteBytes.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-TFTPD-MIB", dcxTFTPDServerState=dcxTFTPDServerState, dcxTFTPDObjects=dcxTFTPDObjects, dcxTFTPDClearCache=dcxTFTPDClearCache, dcxTFTPDReadRequestsDropped=dcxTFTPDReadRequestsDropped, dcxTFTPDWriteBytes=dcxTFTPDWriteBytes, dcxTFTPDWriteRequestsDropped=dcxTFTPDWriteRequestsDropped, dcxTFTPDWriteRequestsFailed=dcxTFTPDWriteRequestsFailed, PYSNMP_MODULE_ID=cmtsC3TFTPDMIB, dcxTFTPDCurrentDirectory=dcxTFTPDCurrentDirectory, dcxTFTPDReadBytes=dcxTFTPDReadBytes, dcxTFTPDReadRequests=dcxTFTPDReadRequests, dcxTFTPDReadRequestsFailed=dcxTFTPDReadRequestsFailed, dcxTFTPDIpVerification=dcxTFTPDIpVerification, cmtsC3TFTPDMIB=cmtsC3TFTPDMIB, dcxTFTPDWriteRequests=dcxTFTPDWriteRequests)
