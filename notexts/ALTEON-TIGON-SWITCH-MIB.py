#
# PySNMP MIB module ALTEON-TIGON-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-TIGON-SWITCH-MIB
# Produced by pysmi-1.1.8 at Thu Feb  9 13:52:36 2023
# On host fv-az796-878 platform Linux version 5.15.0-1031-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, Counter32, mgmt, Counter64, NotificationType, Unsigned32, MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, ModuleIdentity, iso, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "mgmt", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "iso", "Bits", "Gauge32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8))
information = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9))
altswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 13))
operCmds = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16))
agGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1))
agGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2))
memStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('mandatory')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('mandatory')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('mandatory')
hwRedundantPSPresent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("notPresent", 3), ("present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSPresent.setStatus('mandatory')
hwRedundantPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSStatus.setStatus('mandatory')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('mandatory')
hwSensor2Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor2Temp.setStatus('mandatory')
hwSensor3Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor3Temp.setStatus('mandatory')
hwSensor4Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor4Temp.setStatus('mandatory')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('mandatory')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('mandatory')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('mandatory')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('mandatory')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('mandatory')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('mandatory')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('mandatory')
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('mandatory')
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('mandatory')
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('mandatory')
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('mandatory')
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('mandatory')
agTftpServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServerIpAddr.setStatus('mandatory')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('mandatory')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('mandatory')
agTftpDownload = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDownload.setStatus('mandatory')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('mandatory')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('mandatory')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('mandatory')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('mandatory')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('mandatory')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('mandatory')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('mandatory')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('mandatory')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('mandatory')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('mandatory')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('mandatory')
agEnabledGslbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledGslbKey.setStatus('mandatory')
agEnabledBwmKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledBwmKey.setStatus('mandatory')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('mandatory')
agEnabledRurlKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledRurlKey.setStatus('mandatory')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('mandatory')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('mandatory')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('mandatory')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('mandatory')
agNewCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSpanningTree.setStatus('mandatory')
agCurCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSpanningTree.setStatus('mandatory')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('mandatory')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('mandatory')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "ALTEON-TIGON-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('mandatory')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('mandatory')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('mandatory')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('mandatory')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('mandatory')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1), ).setIndexNames((0, "ALTEON-TIGON-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('mandatory')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('mandatory')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('mandatory')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('mandatory')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('mandatory')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('mandatory')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('mandatory')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('mandatory')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('mandatory')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('mandatory')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('mandatory')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('mandatory')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('mandatory')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('mandatory')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('mandatory')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('mandatory')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('mandatory')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('mandatory')
agCurCfgMgmtNetwork = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetwork.setStatus('mandatory')
agNewCfgMgmtNetwork = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgMgmtNetwork.setStatus('mandatory')
agCurCfgMgmtMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtMask.setStatus('mandatory')
agNewCfgMgmtMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgMgmtMask.setStatus('mandatory')
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28))
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('mandatory')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('mandatory')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('mandatory')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('mandatory')
agCurCfgNTPTzone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzone.setStatus('mandatory')
agNewCfgNTPTzone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzone.setStatus('mandatory')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('mandatory')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('mandatory')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('mandatory')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 28, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('mandatory')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('mandatory')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('mandatory')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('mandatory')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('mandatory')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('mandatory')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('mandatory')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('mandatory')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('mandatory')
agNewCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setStatus('mandatory')
agCurCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setStatus('mandatory')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('mandatory')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('mandatory')
agNewCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setStatus('mandatory')
agCurCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setStatus('mandatory')
agNewCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setStatus('mandatory')
agCurCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setStatus('mandatory')
agNewCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setStatus('mandatory')
agCurCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setStatus('mandatory')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('mandatory')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('mandatory')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('mandatory')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('mandatory')
agNewCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setStatus('mandatory')
agCurCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setStatus('mandatory')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('mandatory')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('mandatory')
agNewCfgSyslogTrapIsd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIsd.setStatus('mandatory')
agCurCfgSyslogTrapIsd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIsd.setStatus('mandatory')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('mandatory')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('mandatory')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('mandatory')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('mandatory')
agNewCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setStatus('mandatory')
agCurCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setStatus('mandatory')
agNewCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setStatus('mandatory')
agCurCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 29, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setStatus('mandatory')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('mandatory')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('mandatory')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('mandatory')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('mandatory')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('mandatory')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('mandatory')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('mandatory')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('mandatory')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('mandatory')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('mandatory')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('mandatory')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('mandatory')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('mandatory')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('mandatory')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('mandatory')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('mandatory')
memStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocs.setStatus('mandatory')
memStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsFrees.setStatus('mandatory')
memStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocFails.setStatus('mandatory')
memStatsBytesCurr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesCurr.setStatus('mandatory')
memStatsBytesHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesHiwat.setStatus('mandatory')
memStatsPoolBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsPoolBytes.setStatus('mandatory')
memStatsLargest = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsLargest.setStatus('mandatory')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('mandatory')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('mandatory')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('mandatory')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('mandatory')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('mandatory')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('mandatory')
mpCpuAStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil1Second.setStatus('mandatory')
mpCpuBStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil1Second.setStatus('mandatory')
mpCpuAStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil4Seconds.setStatus('mandatory')
mpCpuBStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil4Seconds.setStatus('mandatory')
mpCpuAStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuAStatsUtil64Seconds.setStatus('mandatory')
mpCpuBStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuBStatsUtil64Seconds.setStatus('mandatory')
mibBuilder.exportSymbols("ALTEON-TIGON-SWITCH-MIB", mpCpuAStatsUtil1Second=mpCpuAStatsUtil1Second, agApplyConfiguration=agApplyConfiguration, hwSensor4Temp=hwSensor4Temp, agCurCfgSmtpHost=agCurCfgSmtpHost, agNewCfgNTPDlight=agNewCfgNTPDlight, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, agCurCfgSyslogTrapGslb=agCurCfgSyslogTrapGslb, agImage1Ver=agImage1Ver, agCurCfgSpanningTree=agCurCfgSpanningTree, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, memStatsBytesHiwat=memStatsBytesHiwat, mpCpuStats=mpCpuStats, radNewCfgAuthenString=radNewCfgAuthenString, agNTP=agNTP, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, agNewCfgSyslogTrapFilter=agNewCfgSyslogTrapFilter, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, agGeneral=agGeneral, agRtcDate=agRtcDate, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agNewCfgNTPTzone=agNewCfgNTPTzone, agNewCfgSyslogTrapStp=agNewCfgSyslogTrapStp, agSavePending=agSavePending, altswitchTraps=altswitchTraps, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, agNewCfgHttpServerPort=agNewCfgHttpServerPort, agLog=agLog, radNewCfgTimeout=radNewCfgTimeout, agRtcTime=agRtcTime, agApplyPending=agApplyPending, agCurCfgTrapHostTable=agCurCfgTrapHostTable, mpCpuBStatsUtil1Second=mpCpuBStatsUtil1Second, agent=agent, agCurCfgSyslogTrapTcpLim=agCurCfgSyslogTrapTcpLim, radNewCfgRetries=radNewCfgRetries, memStatsAllocFails=memStatsAllocFails, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, agTftpServerIpAddr=agTftpServerIpAddr, agCurCfgNTPDlight=agCurCfgNTPDlight, mpCpuBStatsUtil4Seconds=mpCpuBStatsUtil4Seconds, agCurCfgSyslogTrapSlb=agCurCfgSyslogTrapSlb, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, agImage2Ver=agImage2Ver, mpCpuBStatsUtil64Seconds=mpCpuBStatsUtil64Seconds, pktStatsAllocFails=pktStatsAllocFails, agNewCfgSpanningTree=agNewCfgSpanningTree, memStatsAllocs=memStatsAllocs, hwSensor2Temp=hwSensor2Temp, agNewCfgBootp=agNewCfgBootp, hwRedundantPSPresent=hwRedundantPSPresent, agNewCfgSyslogTrapSlb=agNewCfgSyslogTrapSlb, pktStatsAllocs=pktStatsAllocs, agCurCfgMgmtNetwork=agCurCfgMgmtNetwork, agNewCfgMgmtNetwork=agNewCfgMgmtNetwork, agCurCfgNTPService=agCurCfgNTPService, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, radNewCfgTelnet=radNewCfgTelnet, hwRevision=hwRevision, agNewCfgSyslogFac=agNewCfgSyslogFac, agSaveConfiguration=agSaveConfiguration, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, agTftpAction=agTftpAction, memStatsLargest=memStatsLargest, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, agClrSyslogMsgs=agClrSyslogMsgs, agCurCfgSyslog2Host=agCurCfgSyslog2Host, agNewCfgConsole=agNewCfgConsole, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, pktStatsFrees=pktStatsFrees, hardware=hardware, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, agCurCfgSyslogFac=agCurCfgSyslogFac, pktStats=pktStats, agImageForNxtReset=agImageForNxtReset, agEnabledSwFeatures=agEnabledSwFeatures, agCurCfgSyslogTrapFilter=agCurCfgSyslogTrapFilter, memStatsPoolBytes=memStatsPoolBytes, agCurCfgMgmtMask=agCurCfgMgmtMask, agReset=agReset, agTftpImageFileName=agTftpImageFileName, mpCpuAStatsUtil64Seconds=mpCpuAStatsUtil64Seconds, agNewCfgSyslogHost=agNewCfgSyslogHost, agNewCfgSyslogTrapBgp=agNewCfgSyslogTrapBgp, agCurCfgNTPTzone=agCurCfgNTPTzone, agNewCfgTrapHostTable=agNewCfgTrapHostTable, radCurCfgRetries=radCurCfgRetries, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, hwSensor1Temp=hwSensor1Temp, agRevert=agRevert, radNewCfgState=radNewCfgState, agLastSetErrorReason=agLastSetErrorReason, hwSensor3Temp=hwSensor3Temp, agEnabledRurlKey=agEnabledRurlKey, agCurCfgSyslogTrapBgp=agCurCfgSyslogTrapBgp, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, radCurCfgTelnet=radCurCfgTelnet, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, agCurCfgSyslogTrapIsd=agCurCfgSyslogTrapIsd, operCmds=operCmds, agCurCfgNTPServer=agCurCfgNTPServer, agCurCfgSyslogTrapSynAtk=agCurCfgSyslogTrapSynAtk, agEnabledGslbKey=agEnabledGslbKey, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, mpCpuAStatsUtil4Seconds=mpCpuAStatsUtil4Seconds, pktStatsMediums=pktStatsMediums, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, agTftpDownload=agTftpDownload, agNewCfgSmtpHost=agNewCfgSmtpHost, agNewCfgSyslogTrapSynAtk=agNewCfgSyslogTrapSynAtk, stats=stats, pktStatsSmalls=pktStatsSmalls, agTftpDumpFileName=agTftpDumpFileName, information=information, agNewCfgNTPServer=agNewCfgNTPServer, agNewCfgSyslogTrapTcpLim=agNewCfgSyslogTrapTcpLim, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, agNewCfgSyslogTrapIsd=agNewCfgSyslogTrapIsd, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, agSoftwareVersion=agSoftwareVersion, agRevertApply=agRevertApply, agCurCfgHttpServerPort=agCurCfgHttpServerPort, agBootVer=agBootVer, radNewCfgPort=radNewCfgPort, hwPowerSupplyStatus=hwPowerSupplyStatus, agGeneralConfig=agGeneralConfig, pktStatsJumbos=pktStatsJumbos, memStatsFrees=memStatsFrees, hwPartNumber=hwPartNumber, radCurCfgState=radCurCfgState, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, agNewCfgMgmtMask=agNewCfgMgmtMask, hwRedundantPSStatus=hwRedundantPSStatus, agNewCfgSyslogTrapGslb=agNewCfgSyslogTrapGslb, agNewCfgLoginBanner=agNewCfgLoginBanner, memStatsBytesCurr=memStatsBytesCurr, agEnabledBwmKey=agEnabledBwmKey, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, agNewCfgNTPService=agNewCfgNTPService, agCurCfgSyslogHost=agCurCfgSyslogHost, memStats=memStats, radCurCfgPort=radCurCfgPort, agTftpCfgFileName=agTftpCfgFileName, radCurCfgTimeout=radCurCfgTimeout, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, agSlotNumber=agSlotNumber, agCurCfgConsole=agCurCfgConsole, agCurCfgSyslogTrapStp=agCurCfgSyslogTrapStp, radCurCfgAuthenString=radCurCfgAuthenString, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, agConfigForNxtReset=agConfigForNxtReset, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, agCurCfgLoginBanner=agCurCfgLoginBanner, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, agTftpServer=agTftpServer, radius=radius, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, agTftpLastActionStatus=agTftpLastActionStatus, agTftpImage=agTftpImage, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, agCurCfgBootp=agCurCfgBootp, agNewCfgSyslog2Host=agNewCfgSyslog2Host)
