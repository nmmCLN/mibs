#
# PySNMP MIB module ADVA-FSPR7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/ADVA-FSPR7-MIB
# Produced by pysmi-1.1.8 at Mon Sep 19 08:24:04 2022
# On host fv-az152-47 platform Linux version 5.15.0-1019-azure by user runner
# Using Python version 3.10.6 (main, Aug  3 2022, 07:09:11) [GCC 9.4.0]
#
FspR7CommandState, FspR7LacpTimeout, FspR7FiberBrand, FspR7Bitrate, FspR7Access, FspR7LLDPChassisType, FspR7PmSnapshotStatus, FspR7SnmpVersion, FspR7DisableEnable, FspR7TopologyType, FspR7OpticalInterfaceReach, EntityClassName, FspR7APSCommand, FspR7LicenseServerStatus, CryptoFspR7EncryptionCommunication, FspR7Acp, FspR7ConnectorType, FspR7OdtuType, FspR7CdPostCompensationRange, FspR7TypeCrs, EntityType, FspR7ApsChannel, FspR7OpticalFiberType, FspR7InterfaceType, FspR7InterfaceFunction, FspR7Baund, FspR7FltrCableType, FspR7LagPortType, FspR7ProtectionType, FspR7SdpType, FspR7PlugDataRate, FspR7OpticalInterfaceReachCaps, Grade, FspR7Category, FspR7EnableDisable, FspR7MpTag, FspR7PortRole, FspR7SshHostKeyEncryptAlgorithm, FspR7MonLevel, FspR7AccessProtocolCaps, FspR7TerminationMode, FspR7UntaggedFrames, FspR7FunctionCrs, FspR7SnmpSecuLevel, FspR7AccState, FspR7NoYes, FspR7PlugType, FspR7TelemetryOutput, FspR7ErrorFwdMode, FspR7DispersionModes, FspR7DispersionCompensation, FspR7OspfMode, FspR7YcableType, FspR7ProtectionRole, FspR7AidType, FspR7GropticsType, FspR7FlowControlMode, FspR7OtdrPeriod, FspR7BidirectionalChannel, FspR7Gain, FspR7TiltSet, FspR7FDStatusCaps, ApsType, FspR7EncapsulationMethod, FspR7ForcedStatus, FspR7SdnInterface, FspR7ChannelSpacing, FspR7LagIdFend, FspR7AccessProtocol, FspR7AlarmListType, FspR7MaxBitErrorRate, FspR7PortMode, FspR7XfpDecisionThres, FspR7IpMode, FspR7PrivacyKeyType, FspR7OduMultiplexStructure, FspR7VSessChangeReason, FspR7OpticalGroup, EquipmentState, FspR7GainRange, FspR7OpticalLanes, FspR7SshHostKeyLength, FspR7ValidityPeriod, FspR7DmsrmtStatus, FspR7EdfaOutputPowerRating, FspR7AlsMode, FspR7DhcpServer, FspR7DeploymentScenario, FspR7VSessStatus, FspR7ColumnMark, FspR7Topology, FspR7ConnectState, FspR7LacpMode, FspR7TerminateSessions, FspR7IPv6Type, FspR7Mapping, FspR7ChannelIdentifier, FspR7FrameFormat, FspR7LagFendState, FspR7SessionStatus, FspR7TimeShort, FspR7LicenseType, FspR7UserInterface, FspR7LagState, FspR7LicenseFilesInstall, FspR7AutosrvLock, FspR7AccessStatus, FspR7SingleFiberLocation, FspR7DCFiberType, FspR7AccessNcuC2, FspR7AccountFlag, FspR7OpuPayloadType, FspR7PlugDataRateCaps, FspR7TransferProtocol, FspR7Command, FspR7LLDPLocation, FspR7LLDPNeighbors, FspR7OpticalMultiplexLevel, FspR7LagSysIdFend, FspR7NumberOfChannels, FspR7GccUsage, FspR7NaasMode, FspR7RoadmNumber, FspR7KeyLength, FspR7PathProt, FspR7AdminState, FspR7RequestAction, FspR7Date, FspR7SignalDirection, FspR7OscUsage, FspR7TypeConnection, FspR7PrivLevel, FspR7NCTRouteType, FfpType, FspR7LLDPManagementType, FspR7RlsAction, FspR7OpticalBand, FspR7TLSSupport, FspR7VSessWriteAccess, FspR7ChannelNumber, FspR7EquipmentAssignState, ConnectionNotation, FspR7RemoteAuth, FspR7InterfaceCrossover, FspR7PmReset, FspR7EntitySecondaryStates, FspR7IpForwarding, FspR7ParityBit, FspR7SupplyType, FspR7SnmpLongString, FspR7TimDetMode, FspR7ManualAuto, FspR7RPFilter, FspR7RequestState, FspR7CodeGain, FspR7RenewMode, FspR7LaserDelayTimer, FspR7VoaMode, FspR7YesNo, FspR7ChannelIdentifierCaps, FspR7PortBehaviour, FspR7LicenseManagement, FspR7PmSnapshotParameterTypes, FspR7FecType, FspR7OscChannel, FspR7RemoteAuthProtocol, FspR7CommandBusy, FspR7ProtectionState, FspR7TxOffOnTm, FspR7ChannelBandwidth, FspR7Protocol, FspR7LineCoding, FspR7MpState, FspR7NtpSyncStatus, FspR7PlugMode, FspR7IpType, FspR7TrafficDirection, FspR7NtpTestStatus, FspR7LLDPManagementInterface, FspR7PathNode, FspR7ApsFarEndModule, FspR7MuxMethod, FspR7Optimize, FspR7ChannelRangeInventory, ApsRevertMode, FspR7OpticalSubBand, FspR7SnmpPrivLevel, FspR7PasswordHashType, FspR7OperState, FspR7TransmissionMode, FspR7Ipv6Address, FspR7EntityType, FspR7CpAuthType, FspR7AlarmProfileList, FspR7InvertTelemetryInputLogic, FspR7LagStandby, FspR7LaneGroupInventory, FspR7NCTraceId, FspR7CapInventory, FspR7StateConnection, FspR7LLDPPortType, FspR7BERThreshold, FspR7DmsrmtOperation, FspR7CdCompensationRange, FspR7FanMode, FspR7PsuOutputPower, FspR7DmLayer, FspR7SwitchOverCause, FspR7Stages, FspR7AccStateTrap, FspR7LagPorts, FspR7SnmpHexString, FspR7Length, FspR7ChannelNumberCaps, FspR7LLDPScope, FspR7AppType, FspR7Conn = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7CommandState", "FspR7LacpTimeout", "FspR7FiberBrand", "FspR7Bitrate", "FspR7Access", "FspR7LLDPChassisType", "FspR7PmSnapshotStatus", "FspR7SnmpVersion", "FspR7DisableEnable", "FspR7TopologyType", "FspR7OpticalInterfaceReach", "EntityClassName", "FspR7APSCommand", "FspR7LicenseServerStatus", "CryptoFspR7EncryptionCommunication", "FspR7Acp", "FspR7ConnectorType", "FspR7OdtuType", "FspR7CdPostCompensationRange", "FspR7TypeCrs", "EntityType", "FspR7ApsChannel", "FspR7OpticalFiberType", "FspR7InterfaceType", "FspR7InterfaceFunction", "FspR7Baund", "FspR7FltrCableType", "FspR7LagPortType", "FspR7ProtectionType", "FspR7SdpType", "FspR7PlugDataRate", "FspR7OpticalInterfaceReachCaps", "Grade", "FspR7Category", "FspR7EnableDisable", "FspR7MpTag", "FspR7PortRole", "FspR7SshHostKeyEncryptAlgorithm", "FspR7MonLevel", "FspR7AccessProtocolCaps", "FspR7TerminationMode", "FspR7UntaggedFrames", "FspR7FunctionCrs", "FspR7SnmpSecuLevel", "FspR7AccState", "FspR7NoYes", "FspR7PlugType", "FspR7TelemetryOutput", "FspR7ErrorFwdMode", "FspR7DispersionModes", "FspR7DispersionCompensation", "FspR7OspfMode", "FspR7YcableType", "FspR7ProtectionRole", "FspR7AidType", "FspR7GropticsType", "FspR7FlowControlMode", "FspR7OtdrPeriod", "FspR7BidirectionalChannel", "FspR7Gain", "FspR7TiltSet", "FspR7FDStatusCaps", "ApsType", "FspR7EncapsulationMethod", "FspR7ForcedStatus", "FspR7SdnInterface", "FspR7ChannelSpacing", "FspR7LagIdFend", "FspR7AccessProtocol", "FspR7AlarmListType", "FspR7MaxBitErrorRate", "FspR7PortMode", "FspR7XfpDecisionThres", "FspR7IpMode", "FspR7PrivacyKeyType", "FspR7OduMultiplexStructure", "FspR7VSessChangeReason", "FspR7OpticalGroup", "EquipmentState", "FspR7GainRange", "FspR7OpticalLanes", "FspR7SshHostKeyLength", "FspR7ValidityPeriod", "FspR7DmsrmtStatus", "FspR7EdfaOutputPowerRating", "FspR7AlsMode", "FspR7DhcpServer", "FspR7DeploymentScenario", "FspR7VSessStatus", "FspR7ColumnMark", "FspR7Topology", "FspR7ConnectState", "FspR7LacpMode", "FspR7TerminateSessions", "FspR7IPv6Type", "FspR7Mapping", "FspR7ChannelIdentifier", "FspR7FrameFormat", "FspR7LagFendState", "FspR7SessionStatus", "FspR7TimeShort", "FspR7LicenseType", "FspR7UserInterface", "FspR7LagState", "FspR7LicenseFilesInstall", "FspR7AutosrvLock", "FspR7AccessStatus", "FspR7SingleFiberLocation", "FspR7DCFiberType", "FspR7AccessNcuC2", "FspR7AccountFlag", "FspR7OpuPayloadType", "FspR7PlugDataRateCaps", "FspR7TransferProtocol", "FspR7Command", "FspR7LLDPLocation", "FspR7LLDPNeighbors", "FspR7OpticalMultiplexLevel", "FspR7LagSysIdFend", "FspR7NumberOfChannels", "FspR7GccUsage", "FspR7NaasMode", "FspR7RoadmNumber", "FspR7KeyLength", "FspR7PathProt", "FspR7AdminState", "FspR7RequestAction", "FspR7Date", "FspR7SignalDirection", "FspR7OscUsage", "FspR7TypeConnection", "FspR7PrivLevel", "FspR7NCTRouteType", "FfpType", "FspR7LLDPManagementType", "FspR7RlsAction", "FspR7OpticalBand", "FspR7TLSSupport", "FspR7VSessWriteAccess", "FspR7ChannelNumber", "FspR7EquipmentAssignState", "ConnectionNotation", "FspR7RemoteAuth", "FspR7InterfaceCrossover", "FspR7PmReset", "FspR7EntitySecondaryStates", "FspR7IpForwarding", "FspR7ParityBit", "FspR7SupplyType", "FspR7SnmpLongString", "FspR7TimDetMode", "FspR7ManualAuto", "FspR7RPFilter", "FspR7RequestState", "FspR7CodeGain", "FspR7RenewMode", "FspR7LaserDelayTimer", "FspR7VoaMode", "FspR7YesNo", "FspR7ChannelIdentifierCaps", "FspR7PortBehaviour", "FspR7LicenseManagement", "FspR7PmSnapshotParameterTypes", "FspR7FecType", "FspR7OscChannel", "FspR7RemoteAuthProtocol", "FspR7CommandBusy", "FspR7ProtectionState", "FspR7TxOffOnTm", "FspR7ChannelBandwidth", "FspR7Protocol", "FspR7LineCoding", "FspR7MpState", "FspR7NtpSyncStatus", "FspR7PlugMode", "FspR7IpType", "FspR7TrafficDirection", "FspR7NtpTestStatus", "FspR7LLDPManagementInterface", "FspR7PathNode", "FspR7ApsFarEndModule", "FspR7MuxMethod", "FspR7Optimize", "FspR7ChannelRangeInventory", "ApsRevertMode", "FspR7OpticalSubBand", "FspR7SnmpPrivLevel", "FspR7PasswordHashType", "FspR7OperState", "FspR7TransmissionMode", "FspR7Ipv6Address", "FspR7EntityType", "FspR7CpAuthType", "FspR7AlarmProfileList", "FspR7InvertTelemetryInputLogic", "FspR7LagStandby", "FspR7LaneGroupInventory", "FspR7NCTraceId", "FspR7CapInventory", "FspR7StateConnection", "FspR7LLDPPortType", "FspR7BERThreshold", "FspR7DmsrmtOperation", "FspR7CdCompensationRange", "FspR7FanMode", "FspR7PsuOutputPower", "FspR7DmLayer", "FspR7SwitchOverCause", "FspR7Stages", "FspR7AccStateTrap", "FspR7LagPorts", "FspR7SnmpHexString", "FspR7Length", "FspR7ChannelNumberCaps", "FspR7LLDPScope", "FspR7AppType", "FspR7Conn")
ApsDirection, RestoreActivation, ApsHoldoffTime, AssignmentState, OtnPayloadType, SonetTraceForm, ProtectionMech, EntityClass, EthDuplexMode, FileArea, LoopConfig, OhTerminationLevel, PgmType, fspR7, FspR7EquipmentTypeCaps, FspR7EquipmentType, SourceIpAddress, ServiceAffecting, VirtualContainerType, FspR7TrapsinkLifetime, FileType, EnableState, OtnTcmLevel, SonetTimingSource, ServiceImpairment, TimMode, TrapAlarmSeverity = mibBuilder.importSymbols("ADVA-MIB", "ApsDirection", "RestoreActivation", "ApsHoldoffTime", "AssignmentState", "OtnPayloadType", "SonetTraceForm", "ProtectionMech", "EntityClass", "EthDuplexMode", "FileArea", "LoopConfig", "OhTerminationLevel", "PgmType", "fspR7", "FspR7EquipmentTypeCaps", "FspR7EquipmentType", "SourceIpAddress", "ServiceAffecting", "VirtualContainerType", "FspR7TrapsinkLifetime", "FileType", "EnableState", "OtnTcmLevel", "SonetTimingSource", "ServiceImpairment", "TimMode", "TrapAlarmSeverity")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, TimeTicks, Integer32, IpAddress, Counter32, Unsigned32, ModuleIdentity, Bits, ObjectIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Integer32", "IpAddress", "Counter32", "Unsigned32", "ModuleIdentity", "Bits", "ObjectIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier")
RowStatus, TextualConvention, MacAddress, DisplayString, DateAndTime, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString", "DateAndTime", "TruthValue", "RowPointer")
advaFspR7 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7))
advaFspR7.setRevisions(('2018-12-14 00:00', '2018-10-30 00:00', '2018-08-09 00:00', '2018-05-28 00:00', '2018-04-17 00:00', '2018-03-15 00:00', '2018-02-26 00:00', '2017-12-07 00:00', '2017-11-01 00:00', '2017-09-11 00:00', '2017-06-06 00:00', '2017-03-23 00:00', '2016-06-01 00:00', '2016-04-01 00:00', '2015-12-10 00:00', '2015-10-01 00:00', '2015-09-03 00:00', '2015-05-06 00:00', '2015-03-20 00:00', '2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))
if mibBuilder.loadTexts: advaFspR7.setLastUpdated('201812140000Z')
if mibBuilder.loadTexts: advaFspR7.setOrganization('ADVA Optical Networking')
containers = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1))
entities = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3))
neMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1))
ipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100))
ospfConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 101))
timeoutConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 102))
specificMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2))
eqptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3))
facilityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4))
dcnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5))
opticalMuxMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6))
shelfConnMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7))
envMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8))
containerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9))
opticalLineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4))
alarmProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5))
fspR7Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6))
performanceFacility = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4))
performanceFacilityThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1))
performanceFacilityMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2))
featureSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7))
fiberMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1))
pmSnapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2))
eci = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3))
serviceDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4))
changeService = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5))
protection = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6))
translation = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7))
advaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8))
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9))
dateAndTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10))
snmpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11))
tools = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12))
files = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90))
hdShelves = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13))
licenses = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200))
relationship = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8))
notAssignables = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10))
containerShelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1), )
if mibBuilder.loadTexts: containerShelfTable.setStatus('current')
containerShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfClassName"))
if mibBuilder.loadTexts: containerShelfEntry.setStatus('current')
containerShelfShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfShelfNo.setStatus('current')
containerShelfSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfSlotNo.setStatus('current')
containerShelfPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfPortNo.setStatus('current')
containerShelfExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfExtNo.setStatus('current')
containerShelfClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfClassName.setStatus('current')
containerShelfAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfAidString.setStatus('current')
containerShelfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfClass.setStatus('current')
containerShelfTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfTableId.setStatus('current')
containerShelfEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfEquipmentState.setStatus('current')
containerShelfParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 1, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfParentId.setStatus('current')
containerFanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2), )
if mibBuilder.loadTexts: containerFanTable.setStatus('current')
containerFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFanPortNo"), (0, "ADVA-FSPR7-MIB", "containerFanExtNo"), (0, "ADVA-FSPR7-MIB", "containerFanClassName"))
if mibBuilder.loadTexts: containerFanEntry.setStatus('current')
containerFanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFanShelfNo.setStatus('current')
containerFanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFanSlotNo.setStatus('current')
containerFanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFanPortNo.setStatus('current')
containerFanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFanExtNo.setStatus('current')
containerFanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFanClassName.setStatus('current')
containerFanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanAidString.setStatus('current')
containerFanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanClass.setStatus('current')
containerFanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanTableId.setStatus('current')
containerFanEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanEquipmentState.setStatus('current')
containerFanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 2, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFanParentId.setStatus('current')
containerPlugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3), )
if mibBuilder.loadTexts: containerPlugTable.setStatus('current')
containerPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPlugShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPlugSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPlugPortNo"), (0, "ADVA-FSPR7-MIB", "containerPlugExtNo"), (0, "ADVA-FSPR7-MIB", "containerPlugClassName"))
if mibBuilder.loadTexts: containerPlugEntry.setStatus('current')
containerPlugShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPlugShelfNo.setStatus('current')
containerPlugSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPlugSlotNo.setStatus('current')
containerPlugPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPlugPortNo.setStatus('current')
containerPlugExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPlugExtNo.setStatus('current')
containerPlugClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPlugClassName.setStatus('current')
containerPlugAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugAidString.setStatus('current')
containerPlugClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugClass.setStatus('current')
containerPlugTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugTableId.setStatus('current')
containerPlugEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugEquipmentState.setStatus('current')
containerPlugParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPlugParentId.setStatus('current')
containerModTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4), )
if mibBuilder.loadTexts: containerModTable.setStatus('current')
containerModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerModShelfNo"), (0, "ADVA-FSPR7-MIB", "containerModSlotNo"), (0, "ADVA-FSPR7-MIB", "containerModPortNo"), (0, "ADVA-FSPR7-MIB", "containerModExtNo"), (0, "ADVA-FSPR7-MIB", "containerModClassName"))
if mibBuilder.loadTexts: containerModEntry.setStatus('current')
containerModShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerModShelfNo.setStatus('current')
containerModSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerModSlotNo.setStatus('current')
containerModPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerModPortNo.setStatus('current')
containerModExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerModExtNo.setStatus('current')
containerModClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerModClassName.setStatus('current')
containerModAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModAidString.setStatus('current')
containerModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModClass.setStatus('current')
containerModTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModTableId.setStatus('current')
containerModEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModEquipmentState.setStatus('current')
containerModParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 4, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerModParentId.setStatus('current')
containerVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7), )
if mibBuilder.loadTexts: containerVchTable.setStatus('current')
containerVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVchPortNo"), (0, "ADVA-FSPR7-MIB", "containerVchExtNo"), (0, "ADVA-FSPR7-MIB", "containerVchClassName"))
if mibBuilder.loadTexts: containerVchEntry.setStatus('current')
containerVchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVchShelfNo.setStatus('current')
containerVchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVchSlotNo.setStatus('current')
containerVchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVchPortNo.setStatus('current')
containerVchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVchExtNo.setStatus('current')
containerVchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVchClassName.setStatus('current')
containerVchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchAidString.setStatus('current')
containerVchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchClass.setStatus('current')
containerVchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchTableId.setStatus('current')
containerVchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVchParentId.setStatus('current')
containerCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8), )
if mibBuilder.loadTexts: containerCrossConnTable.setStatus('current')
containerCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrossConnClassName"))
if mibBuilder.loadTexts: containerCrossConnEntry.setStatus('current')
containerCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromShelfNo.setStatus('current')
containerCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromSlotNo.setStatus('current')
containerCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPortNo.setStatus('current')
containerCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromExtNo.setStatus('current')
containerCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromClassName.setStatus('current')
containerCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToShelfNo.setStatus('current')
containerCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToSlotNo.setStatus('current')
containerCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToPortNo.setStatus('current')
containerCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnToExtNo.setStatus('current')
containerCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnToClassName.setStatus('current')
containerCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnClassName.setStatus('current')
containerCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnAidString.setStatus('current')
containerCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromId.setStatus('current')
containerCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnToId.setStatus('current')
containerCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnClass.setStatus('current')
containerCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnTableId.setStatus('current')
containerCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnParentId.setStatus('current')
containerCrossConnFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9), )
if mibBuilder.loadTexts: containerCrossConnFromPointTable.setStatus('current')
containerCrossConnFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossConnFromPointClassName"))
if mibBuilder.loadTexts: containerCrossConnFromPointEntry.setStatus('current')
containerCrossConnFromPointShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointShelfNo.setStatus('current')
containerCrossConnFromPointSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointSlotNo.setStatus('current')
containerCrossConnFromPointPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointPortNo.setStatus('current')
containerCrossConnFromPointExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossConnFromPointExtNo.setStatus('current')
containerCrossConnFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossConnFromPointClassName.setStatus('current')
containerCrossConnFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointAidString.setStatus('current')
containerCrossConnFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointFromId.setStatus('current')
containerCrossConnFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointClass.setStatus('current')
containerCrossConnFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointTableId.setStatus('current')
containerCrossConnFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 9, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossConnFromPointParentId.setStatus('current')
containerTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10), )
if mibBuilder.loadTexts: containerTerminPointTable.setStatus('current')
containerTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerTerminPointClassName"))
if mibBuilder.loadTexts: containerTerminPointEntry.setStatus('current')
containerTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo1.setStatus('current')
containerTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo2.setStatus('current')
containerTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo3.setStatus('current')
containerTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerTerminPointIndexNo4.setStatus('current')
containerTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerTerminPointClassName.setStatus('current')
containerTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointAidString.setStatus('current')
containerTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointClass.setStatus('current')
containerTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointTableId.setStatus('current')
containerTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerTerminPointParentId.setStatus('current')
containerConnectStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11), )
if mibBuilder.loadTexts: containerConnectStdTable.setStatus('current')
containerConnectStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectStdClassName"))
if mibBuilder.loadTexts: containerConnectStdEntry.setStatus('current')
containerConnectStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectStdNotation.setStatus('current')
containerConnectStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo1.setStatus('current')
containerConnectStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo2.setStatus('current')
containerConnectStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo3.setStatus('current')
containerConnectStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdFromIndexNo4.setStatus('current')
containerConnectStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdFromClassName.setStatus('current')
containerConnectStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo1.setStatus('current')
containerConnectStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo2.setStatus('current')
containerConnectStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo3.setStatus('current')
containerConnectStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectStdToIndexNo4.setStatus('current')
containerConnectStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdToClassName.setStatus('current')
containerConnectStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectStdClassName.setStatus('current')
containerConnectStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdAidString.setStatus('current')
containerConnectStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdFromId.setStatus('current')
containerConnectStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdToId.setStatus('current')
containerConnectStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdClass.setStatus('current')
containerConnectStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdTableId.setStatus('current')
containerConnectStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 11, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectStdParentId.setStatus('current')
containerConnectNonStdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12), )
if mibBuilder.loadTexts: containerConnectNonStdTable.setStatus('current')
containerConnectNonStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerConnectNonStdNotation"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdFromClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdToClassName"), (0, "ADVA-FSPR7-MIB", "containerConnectNonStdClassName"))
if mibBuilder.loadTexts: containerConnectNonStdEntry.setStatus('current')
containerConnectNonStdNotation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 1), ConnectionNotation())
if mibBuilder.loadTexts: containerConnectNonStdNotation.setStatus('current')
containerConnectNonStdFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo1.setStatus('current')
containerConnectNonStdFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo2.setStatus('current')
containerConnectNonStdFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo3.setStatus('current')
containerConnectNonStdFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 5), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdFromIndexNo4.setStatus('current')
containerConnectNonStdFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 6), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdFromClassName.setStatus('current')
containerConnectNonStdToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo1.setStatus('current')
containerConnectNonStdToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo2.setStatus('current')
containerConnectNonStdToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo3.setStatus('current')
containerConnectNonStdToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 10), Unsigned32())
if mibBuilder.loadTexts: containerConnectNonStdToIndexNo4.setStatus('current')
containerConnectNonStdToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdToClassName.setStatus('current')
containerConnectNonStdClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 12), EntityClassName())
if mibBuilder.loadTexts: containerConnectNonStdClassName.setStatus('current')
containerConnectNonStdAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdAidString.setStatus('current')
containerConnectNonStdFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdFromId.setStatus('current')
containerConnectNonStdToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdToId.setStatus('current')
containerConnectNonStdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 16), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdClass.setStatus('current')
containerConnectNonStdTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdTableId.setStatus('current')
containerConnectNonStdParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 12, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerConnectNonStdParentId.setStatus('current')
containerExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13), )
if mibBuilder.loadTexts: containerExternalPortTable.setStatus('current')
containerExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalPortClassName"))
if mibBuilder.loadTexts: containerExternalPortEntry.setStatus('current')
containerExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortShelfNo.setStatus('current')
containerExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortSlotNo.setStatus('current')
containerExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortPortNo.setStatus('current')
containerExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalPortExtNo.setStatus('current')
containerExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalPortClassName.setStatus('current')
containerExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortAidString.setStatus('current')
containerExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortClass.setStatus('current')
containerExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortTableId.setStatus('current')
containerExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 13, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalPortParentId.setStatus('current')
containerCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14), )
if mibBuilder.loadTexts: containerCrsOptLineTable.setStatus('current')
containerCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineClassName"))
if mibBuilder.loadTexts: containerCrsOptLineEntry.setStatus('current')
containerCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo1.setStatus('current')
containerCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo2.setStatus('current')
containerCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo3.setStatus('current')
containerCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromIndexNo4.setStatus('current')
containerCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromClassName.setStatus('current')
containerCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo1.setStatus('current')
containerCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo2.setStatus('current')
containerCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 8), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo3.setStatus('current')
containerCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 9), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineToIndexNo4.setStatus('current')
containerCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 10), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineToClassName.setStatus('current')
containerCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 11), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineClassName.setStatus('current')
containerCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineAidString.setStatus('current')
containerCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromId.setStatus('current')
containerCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineToId.setStatus('current')
containerCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 15), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineClass.setStatus('current')
containerCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineTableId.setStatus('current')
containerCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 14, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineParentId.setStatus('current')
containerCrsOptLineFromPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15), )
if mibBuilder.loadTexts: containerCrsOptLineFromPointTable.setStatus('current')
containerCrsOptLineFromPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerCrsOptLineFromPointClassName"))
if mibBuilder.loadTexts: containerCrsOptLineFromPointEntry.setStatus('current')
containerCrsOptLineFromPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo1.setStatus('current')
containerCrsOptLineFromPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo2.setStatus('current')
containerCrsOptLineFromPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo3.setStatus('current')
containerCrsOptLineFromPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrsOptLineFromPointIndexNo4.setStatus('current')
containerCrsOptLineFromPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrsOptLineFromPointClassName.setStatus('current')
containerCrsOptLineFromPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointAidString.setStatus('current')
containerCrsOptLineFromPointFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointFromId.setStatus('current')
containerCrsOptLineFromPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointClass.setStatus('current')
containerCrsOptLineFromPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointTableId.setStatus('current')
containerCrsOptLineFromPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 15, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrsOptLineFromPointParentId.setStatus('current')
containerExternalOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16), )
if mibBuilder.loadTexts: containerExternalOmTable.setStatus('current')
containerExternalOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalOmShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalOmClassName"))
if mibBuilder.loadTexts: containerExternalOmEntry.setStatus('current')
containerExternalOmShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmShelfNo.setStatus('current')
containerExternalOmSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmSlotNo.setStatus('current')
containerExternalOmPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmPortNo.setStatus('current')
containerExternalOmExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalOmExtNo.setStatus('current')
containerExternalOmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalOmClassName.setStatus('current')
containerExternalOmAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmAidString.setStatus('current')
containerExternalOmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmClass.setStatus('current')
containerExternalOmTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmTableId.setStatus('current')
containerExternalOmParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 16, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalOmParentId.setStatus('current')
containerExternalVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17), )
if mibBuilder.loadTexts: containerExternalVchTable.setStatus('current')
containerExternalVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerExternalVchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchPortNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchExtNo"), (0, "ADVA-FSPR7-MIB", "containerExternalVchClassName"))
if mibBuilder.loadTexts: containerExternalVchEntry.setStatus('current')
containerExternalVchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchShelfNo.setStatus('current')
containerExternalVchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchSlotNo.setStatus('current')
containerExternalVchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchPortNo.setStatus('current')
containerExternalVchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerExternalVchExtNo.setStatus('current')
containerExternalVchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerExternalVchClassName.setStatus('current')
containerExternalVchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchAidString.setStatus('current')
containerExternalVchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchClass.setStatus('current')
containerExternalVchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchTableId.setStatus('current')
containerExternalVchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 17, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerExternalVchParentId.setStatus('current')
containerChTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20), )
if mibBuilder.loadTexts: containerChTable.setStatus('current')
containerChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerChShelfNo"), (0, "ADVA-FSPR7-MIB", "containerChSlotNo"), (0, "ADVA-FSPR7-MIB", "containerChPortNo"), (0, "ADVA-FSPR7-MIB", "containerChExtNo"), (0, "ADVA-FSPR7-MIB", "containerChClassName"))
if mibBuilder.loadTexts: containerChEntry.setStatus('current')
containerChShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerChShelfNo.setStatus('current')
containerChSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerChSlotNo.setStatus('current')
containerChPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerChPortNo.setStatus('current')
containerChExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerChExtNo.setStatus('current')
containerChClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerChClassName.setStatus('current')
containerChAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChAidString.setStatus('current')
containerChClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChClass.setStatus('current')
containerChTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChTableId.setStatus('current')
containerChParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerChParentId.setStatus('current')
containerEthTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21), )
if mibBuilder.loadTexts: containerEthTable.setStatus('current')
containerEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEthShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEthSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEthPortNo"), (0, "ADVA-FSPR7-MIB", "containerEthExtNo"), (0, "ADVA-FSPR7-MIB", "containerEthClassName"))
if mibBuilder.loadTexts: containerEthEntry.setStatus('current')
containerEthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEthShelfNo.setStatus('current')
containerEthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEthSlotNo.setStatus('current')
containerEthPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEthPortNo.setStatus('current')
containerEthExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEthExtNo.setStatus('current')
containerEthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEthClassName.setStatus('current')
containerEthAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthAidString.setStatus('current')
containerEthClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthClass.setStatus('current')
containerEthTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthTableId.setStatus('current')
containerEthParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEthParentId.setStatus('current')
containerVethTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22), )
if mibBuilder.loadTexts: containerVethTable.setStatus('current')
containerVethEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVethShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVethSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVethPortNo"), (0, "ADVA-FSPR7-MIB", "containerVethExtNo"), (0, "ADVA-FSPR7-MIB", "containerVethClassName"))
if mibBuilder.loadTexts: containerVethEntry.setStatus('current')
containerVethShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVethShelfNo.setStatus('current')
containerVethSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVethSlotNo.setStatus('current')
containerVethPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVethPortNo.setStatus('current')
containerVethExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVethExtNo.setStatus('current')
containerVethClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVethClassName.setStatus('current')
containerVethAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethAidString.setStatus('current')
containerVethClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethClass.setStatus('current')
containerVethTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethTableId.setStatus('current')
containerVethParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVethParentId.setStatus('current')
containerOtlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23), )
if mibBuilder.loadTexts: containerOtlgTable.setStatus('current')
containerOtlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOtlgShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgPortNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgExtNo"), (0, "ADVA-FSPR7-MIB", "containerOtlgClassName"))
if mibBuilder.loadTexts: containerOtlgEntry.setStatus('current')
containerOtlgShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOtlgShelfNo.setStatus('current')
containerOtlgSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOtlgSlotNo.setStatus('current')
containerOtlgPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOtlgPortNo.setStatus('current')
containerOtlgExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOtlgExtNo.setStatus('current')
containerOtlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOtlgClassName.setStatus('current')
containerOtlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgAidString.setStatus('current')
containerOtlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgClass.setStatus('current')
containerOtlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgTableId.setStatus('current')
containerOtlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 23, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOtlgParentId.setStatus('current')
containerPchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24), )
if mibBuilder.loadTexts: containerPchTable.setStatus('current')
containerPchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerPchShelfNo"), (0, "ADVA-FSPR7-MIB", "containerPchSlotNo"), (0, "ADVA-FSPR7-MIB", "containerPchPortNo"), (0, "ADVA-FSPR7-MIB", "containerPchExtNo"), (0, "ADVA-FSPR7-MIB", "containerPchClassName"))
if mibBuilder.loadTexts: containerPchEntry.setStatus('current')
containerPchShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerPchShelfNo.setStatus('current')
containerPchSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerPchSlotNo.setStatus('current')
containerPchPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerPchPortNo.setStatus('current')
containerPchExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerPchExtNo.setStatus('current')
containerPchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerPchClassName.setStatus('current')
containerPchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchAidString.setStatus('current')
containerPchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchClass.setStatus('current')
containerPchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchTableId.setStatus('current')
containerPchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 24, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerPchParentId.setStatus('current')
containerVschTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25), )
if mibBuilder.loadTexts: containerVschTable.setStatus('current')
containerVschEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVschShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVschSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVschPortNo"), (0, "ADVA-FSPR7-MIB", "containerVschExtNo"), (0, "ADVA-FSPR7-MIB", "containerVschClassName"))
if mibBuilder.loadTexts: containerVschEntry.setStatus('current')
containerVschShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVschShelfNo.setStatus('current')
containerVschSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVschSlotNo.setStatus('current')
containerVschPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVschPortNo.setStatus('current')
containerVschExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVschExtNo.setStatus('current')
containerVschClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVschClassName.setStatus('current')
containerVschAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschAidString.setStatus('current')
containerVschClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschClass.setStatus('current')
containerVschTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschTableId.setStatus('current')
containerVschParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 25, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVschParentId.setStatus('current')
containerVch1Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26), )
if mibBuilder.loadTexts: containerVch1Table.setStatus('current')
containerVch1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVch1ShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVch1SlotNo"), (0, "ADVA-FSPR7-MIB", "containerVch1PortNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ExtNo"), (0, "ADVA-FSPR7-MIB", "containerVch1ClassName"))
if mibBuilder.loadTexts: containerVch1Entry.setStatus('current')
containerVch1ShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVch1ShelfNo.setStatus('current')
containerVch1SlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVch1SlotNo.setStatus('current')
containerVch1PortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVch1PortNo.setStatus('current')
containerVch1ExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVch1ExtNo.setStatus('current')
containerVch1ClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVch1ClassName.setStatus('current')
containerVch1AidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1AidString.setStatus('current')
containerVch1Class = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1Class.setStatus('current')
containerVch1TableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1TableId.setStatus('current')
containerVch1ParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 26, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVch1ParentId.setStatus('current')
containerOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40), )
if mibBuilder.loadTexts: containerOmTable.setStatus('current')
containerOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOmShelfNo"), (0, "ADVA-FSPR7-MIB", "containerOmSlotNo"), (0, "ADVA-FSPR7-MIB", "containerOmPortNo"), (0, "ADVA-FSPR7-MIB", "containerOmExtNo"), (0, "ADVA-FSPR7-MIB", "containerOmClassName"))
if mibBuilder.loadTexts: containerOmEntry.setStatus('current')
containerOmShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOmShelfNo.setStatus('current')
containerOmSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOmSlotNo.setStatus('current')
containerOmPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOmPortNo.setStatus('current')
containerOmExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOmExtNo.setStatus('current')
containerOmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOmClassName.setStatus('current')
containerOmAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmAidString.setStatus('current')
containerOmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmClass.setStatus('current')
containerOmTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmTableId.setStatus('current')
containerOmParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 40, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOmParentId.setStatus('current')
containerVomTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41), )
if mibBuilder.loadTexts: containerVomTable.setStatus('current')
containerVomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerVomShelfNo"), (0, "ADVA-FSPR7-MIB", "containerVomSlotNo"), (0, "ADVA-FSPR7-MIB", "containerVomPortNo"), (0, "ADVA-FSPR7-MIB", "containerVomExtNo"), (0, "ADVA-FSPR7-MIB", "containerVomClassName"))
if mibBuilder.loadTexts: containerVomEntry.setStatus('current')
containerVomShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerVomShelfNo.setStatus('current')
containerVomSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerVomSlotNo.setStatus('current')
containerVomPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerVomPortNo.setStatus('current')
containerVomExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerVomExtNo.setStatus('current')
containerVomClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerVomClassName.setStatus('current')
containerVomAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomAidString.setStatus('current')
containerVomClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomClass.setStatus('current')
containerVomTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomTableId.setStatus('current')
containerVomParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 41, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVomParentId.setStatus('current')
containerShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50), )
if mibBuilder.loadTexts: containerShelfConnTable.setStatus('current')
containerShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "containerShelfConnClassName"))
if mibBuilder.loadTexts: containerShelfConnEntry.setStatus('current')
containerShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnShelfNo.setStatus('current')
containerShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnSlotNo.setStatus('current')
containerShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnPortNo.setStatus('current')
containerShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerShelfConnExtNo.setStatus('current')
containerShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerShelfConnClassName.setStatus('current')
containerShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnAidString.setStatus('current')
containerShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnClass.setStatus('current')
containerShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnTableId.setStatus('current')
containerShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 50, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfConnParentId.setStatus('current')
containerFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60), )
if mibBuilder.loadTexts: containerFfpTable.setStatus('current')
containerFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "containerFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "containerFfpPortNo"), (0, "ADVA-FSPR7-MIB", "containerFfpExtNo"), (0, "ADVA-FSPR7-MIB", "containerFfpClassName"))
if mibBuilder.loadTexts: containerFfpEntry.setStatus('current')
containerFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerFfpShelfNo.setStatus('current')
containerFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerFfpSlotNo.setStatus('current')
containerFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerFfpPortNo.setStatus('current')
containerFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerFfpExtNo.setStatus('current')
containerFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerFfpClassName.setStatus('current')
containerFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpAidString.setStatus('current')
containerFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpClass.setStatus('current')
containerFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpTableId.setStatus('current')
containerFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 60, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerFfpParentId.setStatus('current')
containerEccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70), )
if mibBuilder.loadTexts: containerEccTable.setStatus('current')
containerEccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEccShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEccSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEccPortNo"), (0, "ADVA-FSPR7-MIB", "containerEccExtNo"), (0, "ADVA-FSPR7-MIB", "containerEccClassName"))
if mibBuilder.loadTexts: containerEccEntry.setStatus('current')
containerEccShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEccShelfNo.setStatus('current')
containerEccSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEccSlotNo.setStatus('current')
containerEccPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEccPortNo.setStatus('current')
containerEccExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEccExtNo.setStatus('current')
containerEccClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEccClassName.setStatus('current')
containerEccAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccAidString.setStatus('current')
containerEccClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccClass.setStatus('current')
containerEccTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccTableId.setStatus('current')
containerEccParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 70, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEccParentId.setStatus('current')
containerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71), )
if mibBuilder.loadTexts: containerLinkTable.setStatus('current')
containerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLinkShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLinkSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLinkPortNo"), (0, "ADVA-FSPR7-MIB", "containerLinkExtNo"), (0, "ADVA-FSPR7-MIB", "containerLinkClassName"))
if mibBuilder.loadTexts: containerLinkEntry.setStatus('current')
containerLinkShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLinkShelfNo.setStatus('current')
containerLinkSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLinkSlotNo.setStatus('current')
containerLinkPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLinkPortNo.setStatus('current')
containerLinkExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLinkExtNo.setStatus('current')
containerLinkClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLinkClassName.setStatus('current')
containerLinkAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkAidString.setStatus('current')
containerLinkClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkClass.setStatus('current')
containerLinkTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkTableId.setStatus('current')
containerLinkParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 71, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLinkParentId.setStatus('current')
containerScTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72), )
if mibBuilder.loadTexts: containerScTable.setStatus('current')
containerScEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerScShelfNo"), (0, "ADVA-FSPR7-MIB", "containerScSlotNo"), (0, "ADVA-FSPR7-MIB", "containerScPortNo"), (0, "ADVA-FSPR7-MIB", "containerScExtNo"), (0, "ADVA-FSPR7-MIB", "containerScClassName"))
if mibBuilder.loadTexts: containerScEntry.setStatus('current')
containerScShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerScShelfNo.setStatus('current')
containerScSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerScSlotNo.setStatus('current')
containerScPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerScPortNo.setStatus('current')
containerScExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerScExtNo.setStatus('current')
containerScClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerScClassName.setStatus('current')
containerScAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScAidString.setStatus('current')
containerScClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScClass.setStatus('current')
containerScTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScTableId.setStatus('current')
containerScParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 72, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerScParentId.setStatus('current')
containerLanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73), )
if mibBuilder.loadTexts: containerLanTable.setStatus('current')
containerLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerLanShelfNo"), (0, "ADVA-FSPR7-MIB", "containerLanSlotNo"), (0, "ADVA-FSPR7-MIB", "containerLanPortNo"), (0, "ADVA-FSPR7-MIB", "containerLanExtNo"), (0, "ADVA-FSPR7-MIB", "containerLanClassName"))
if mibBuilder.loadTexts: containerLanEntry.setStatus('current')
containerLanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerLanShelfNo.setStatus('current')
containerLanSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerLanSlotNo.setStatus('current')
containerLanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerLanPortNo.setStatus('current')
containerLanExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerLanExtNo.setStatus('current')
containerLanClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerLanClassName.setStatus('current')
containerLanAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanAidString.setStatus('current')
containerLanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanClass.setStatus('current')
containerLanTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanTableId.setStatus('current')
containerLanParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 73, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerLanParentId.setStatus('current')
containerEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80), )
if mibBuilder.loadTexts: containerEnvTable.setStatus('current')
containerEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "containerEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "containerEnvPortNo"), (0, "ADVA-FSPR7-MIB", "containerEnvExtNo"), (0, "ADVA-FSPR7-MIB", "containerEnvClassName"))
if mibBuilder.loadTexts: containerEnvEntry.setStatus('current')
containerEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerEnvShelfNo.setStatus('current')
containerEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerEnvSlotNo.setStatus('current')
containerEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerEnvPortNo.setStatus('current')
containerEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerEnvExtNo.setStatus('current')
containerEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerEnvClassName.setStatus('current')
containerEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvAidString.setStatus('current')
containerEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvClass.setStatus('current')
containerEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvTableId.setStatus('current')
containerEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 80, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerEnvParentId.setStatus('current')
containerWchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90), )
if mibBuilder.loadTexts: containerWchTable.setStatus('current')
containerWchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerWchIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerWchIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerWchClassName"))
if mibBuilder.loadTexts: containerWchEntry.setStatus('current')
containerWchIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo1.setStatus('current')
containerWchIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo2.setStatus('current')
containerWchIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo3.setStatus('current')
containerWchIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerWchIndexNo4.setStatus('current')
containerWchClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerWchClassName.setStatus('current')
containerWchAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchAidString.setStatus('current')
containerWchClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchClass.setStatus('current')
containerWchTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchTableId.setStatus('current')
containerWchParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 90, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerWchParentId.setStatus('current')
containerOlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91), )
if mibBuilder.loadTexts: containerOlTable.setStatus('current')
containerOlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOlIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOlIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOlClassName"))
if mibBuilder.loadTexts: containerOlEntry.setStatus('current')
containerOlIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo1.setStatus('current')
containerOlIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo2.setStatus('current')
containerOlIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo3.setStatus('current')
containerOlIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOlIndexNo4.setStatus('current')
containerOlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOlClassName.setStatus('current')
containerOlAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlAidString.setStatus('current')
containerOlClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlClass.setStatus('current')
containerOlTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlTableId.setStatus('current')
containerOlParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 91, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOlParentId.setStatus('current')
containerOwlgTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92), )
if mibBuilder.loadTexts: containerOwlgTable.setStatus('current')
containerOwlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo1"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo2"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo3"), (0, "ADVA-FSPR7-MIB", "containerOwlgIndexNo4"), (0, "ADVA-FSPR7-MIB", "containerOwlgClassName"))
if mibBuilder.loadTexts: containerOwlgEntry.setStatus('current')
containerOwlgIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo1.setStatus('current')
containerOwlgIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo2.setStatus('current')
containerOwlgIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo3.setStatus('current')
containerOwlgIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerOwlgIndexNo4.setStatus('current')
containerOwlgClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerOwlgClassName.setStatus('current')
containerOwlgAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgAidString.setStatus('current')
containerOwlgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgClass.setStatus('current')
containerOwlgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgTableId.setStatus('current')
containerOwlgParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 92, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOwlgParentId.setStatus('current')
containerCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93), )
if mibBuilder.loadTexts: containerCrossDcnTable.setStatus('current')
containerCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "containerCrossDcnClassName"))
if mibBuilder.loadTexts: containerCrossDcnEntry.setStatus('current')
containerCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 1), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnShelfNo.setStatus('current')
containerCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 2), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnSlotNo.setStatus('current')
containerCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 3), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnPortNo.setStatus('current')
containerCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 4), Unsigned32())
if mibBuilder.loadTexts: containerCrossDcnExtNo.setStatus('current')
containerCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 5), EntityClassName())
if mibBuilder.loadTexts: containerCrossDcnClassName.setStatus('current')
containerCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnAidString.setStatus('current')
containerCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnClass.setStatus('current')
containerCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnTableId.setStatus('current')
containerCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 93, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCrossDcnParentId.setStatus('current')
nextUnusedPc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 94), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedPc.setStatus('current')
nextUnusedFc = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 95), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextUnusedFc.setStatus('current')
endOfContainers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainers.setStatus('current')
entitySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1), )
if mibBuilder.loadTexts: entitySysTable.setStatus('current')
entitySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"))
if mibBuilder.loadTexts: entitySysEntry.setStatus('current')
entitySysShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entitySysShelfNo.setStatus('current')
entitySysSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entitySysSlotNo.setStatus('current')
entitySysPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entitySysPortNo.setStatus('current')
entitySysExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entitySysExtNo.setStatus('current')
entitySysClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entitySysClassName.setStatus('current')
entitySysAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysAidString.setStatus('current')
entitySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysType.setStatus('current')
entitySysTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysTableId.setStatus('current')
entitySysParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysParentId.setStatus('current')
entitySysClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysClass.setStatus('current')
entitySysOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysOneIndex.setStatus('current')
entitySysEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 1, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entitySysEquipmentState.setStatus('current')
entityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2), )
if mibBuilder.loadTexts: entityEqptTable.setStatus('current')
entityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: entityEqptEntry.setStatus('current')
entityEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEqptShelfNo.setStatus('current')
entityEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEqptSlotNo.setStatus('current')
entityEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEqptPortNo.setStatus('current')
entityEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEqptExtNo.setStatus('current')
entityEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEqptClassName.setStatus('current')
entityEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptAidString.setStatus('current')
entityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptType.setStatus('current')
entityEqptTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptTableId.setStatus('current')
entityEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptParentId.setStatus('current')
entityEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptClass.setStatus('current')
entityEqptOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptOneIndex.setStatus('current')
entityEqptEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 12), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptEquipmentState.setStatus('current')
entityEqptMtosiParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 2, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEqptMtosiParentId.setStatus('current')
entityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3), )
if mibBuilder.loadTexts: entityDcnTable.setStatus('current')
entityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: entityDcnEntry.setStatus('current')
entityDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityDcnShelfNo.setStatus('current')
entityDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityDcnSlotNo.setStatus('current')
entityDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityDcnPortNo.setStatus('current')
entityDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityDcnExtNo.setStatus('current')
entityDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityDcnClassName.setStatus('current')
entityDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnAidString.setStatus('current')
entityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnType.setStatus('current')
entityDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnTableId.setStatus('current')
entityDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnParentId.setStatus('current')
entityDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnClass.setStatus('current')
entityDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityDcnOneIndex.setStatus('current')
entityOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4), )
if mibBuilder.loadTexts: entityOptLineTable.setStatus('current')
entityOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: entityOptLineEntry.setStatus('current')
entityOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo1.setStatus('current')
entityOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo2.setStatus('current')
entityOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo3.setStatus('current')
entityOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOptLineIndexNo4.setStatus('current')
entityOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOptLineClassName.setStatus('current')
entityOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineAidString.setStatus('current')
entityOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineType.setStatus('current')
entityOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineTableId.setStatus('current')
entityOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineParentId.setStatus('current')
entityOptLineOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineOneIndex.setStatus('current')
entityOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 4, 1, 11), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOptLineClass.setStatus('current')
entityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5), )
if mibBuilder.loadTexts: entityEnvTable.setStatus('current')
entityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"))
if mibBuilder.loadTexts: entityEnvEntry.setStatus('current')
entityEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityEnvShelfNo.setStatus('current')
entityEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityEnvSlotNo.setStatus('current')
entityEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityEnvPortNo.setStatus('current')
entityEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityEnvExtNo.setStatus('current')
entityEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityEnvClassName.setStatus('current')
entityEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvAidString.setStatus('current')
entityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvType.setStatus('current')
entityEnvTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvTableId.setStatus('current')
entityEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvParentId.setStatus('current')
entityEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvClass.setStatus('current')
entityEnvOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEnvOneIndex.setStatus('current')
entityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7), )
if mibBuilder.loadTexts: entityFacilityTable.setStatus('current')
entityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: entityFacilityEntry.setStatus('current')
entityFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFacilityShelfNo.setStatus('current')
entityFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFacilitySlotNo.setStatus('current')
entityFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFacilityPortNo.setStatus('current')
entityFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFacilityExtNo.setStatus('current')
entityFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFacilityClassName.setStatus('current')
entityFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityAidString.setStatus('current')
entityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityType.setStatus('current')
entityFacilityTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityTableId.setStatus('current')
entityFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityParentId.setStatus('current')
entityFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityClass.setStatus('current')
entityFacilityOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFacilityOneIndex.setStatus('current')
entityCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8), )
if mibBuilder.loadTexts: entityCrossConnTable.setStatus('current')
entityCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: entityCrossConnEntry.setStatus('current')
entityCrossConnFromShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromShelfNo.setStatus('current')
entityCrossConnFromSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromSlotNo.setStatus('current')
entityCrossConnFromPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromPortNo.setStatus('current')
entityCrossConnFromExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnFromExtNo.setStatus('current')
entityCrossConnFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnFromClassName.setStatus('current')
entityCrossConnToShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToShelfNo.setStatus('current')
entityCrossConnToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToSlotNo.setStatus('current')
entityCrossConnToPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToPortNo.setStatus('current')
entityCrossConnToExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrossConnToExtNo.setStatus('current')
entityCrossConnToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnToClassName.setStatus('current')
entityCrossConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrossConnClassName.setStatus('current')
entityCrossConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnAidString.setStatus('current')
entityCrossConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnType.setStatus('current')
entityCrossConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnTableId.setStatus('current')
entityCrossConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnParentId.setStatus('current')
entityCrossConnFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnFromId.setStatus('current')
entityCrossConnToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnToId.setStatus('current')
entityCrossConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 8, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossConnClass.setStatus('current')
entityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10), )
if mibBuilder.loadTexts: entityTerminPointTable.setStatus('current')
entityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: entityTerminPointEntry.setStatus('current')
entityTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo1.setStatus('current')
entityTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo2.setStatus('current')
entityTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo3.setStatus('current')
entityTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityTerminPointIndexNo4.setStatus('current')
entityTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityTerminPointClassName.setStatus('current')
entityTerminPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAidString.setStatus('current')
entityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointType.setStatus('current')
entityTerminPointAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 8), AssignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointAssignState.setStatus('current')
entityTerminPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointTableId.setStatus('current')
entityTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointParentId.setStatus('current')
entityTerminPointOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointOneIndex.setStatus('current')
entityTerminPointReferencedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 12), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointReferencedTo.setStatus('current')
entityTerminPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 13), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointClass.setStatus('current')
entityTerminPointPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10, 1, 14), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityTerminPointPortClass.setStatus('current')
entityConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11), )
if mibBuilder.loadTexts: entityConnectionTable.setStatus('current')
entityConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: entityConnectionEntry.setStatus('current')
entityConnectionClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 1), EntityClassName())
if mibBuilder.loadTexts: entityConnectionClassName.setStatus('current')
entityConnectionAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionAidString.setStatus('current')
entityConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 3), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionType.setStatus('current')
entityConnectionTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionTableId.setStatus('current')
entityConnectionParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionParentId.setStatus('current')
entityConnectionFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionFromId.setStatus('current')
entityConnectionToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionToId.setStatus('current')
entityConnectionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityConnectionClass.setStatus('current')
entityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12), )
if mibBuilder.loadTexts: entityExternalPortTable.setStatus('current')
entityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: entityExternalPortEntry.setStatus('current')
entityExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortShelfNo.setStatus('current')
entityExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortSlotNo.setStatus('current')
entityExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortPortNo.setStatus('current')
entityExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityExternalPortExtNo.setStatus('current')
entityExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityExternalPortClassName.setStatus('current')
entityExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortAidString.setStatus('current')
entityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortType.setStatus('current')
entityExternalPortTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortTableId.setStatus('current')
entityExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortParentId.setStatus('current')
entityExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortClass.setStatus('current')
entityExternalPortOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 12, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityExternalPortOneIndex.setStatus('current')
entityCrsOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13), )
if mibBuilder.loadTexts: entityCrsOptLineTable.setStatus('current')
entityCrsOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: entityCrsOptLineEntry.setStatus('current')
entityCrsOptLineFromIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo1.setStatus('current')
entityCrsOptLineFromIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo2.setStatus('current')
entityCrsOptLineFromIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo3.setStatus('current')
entityCrsOptLineFromIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineFromIndexNo4.setStatus('current')
entityCrsOptLineFromClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineFromClassName.setStatus('current')
entityCrsOptLineToIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo1.setStatus('current')
entityCrsOptLineToIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 7), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo2.setStatus('current')
entityCrsOptLineToIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 8), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo3.setStatus('current')
entityCrsOptLineToIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 9), Unsigned32())
if mibBuilder.loadTexts: entityCrsOptLineToIndexNo4.setStatus('current')
entityCrsOptLineToClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 10), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineToClassName.setStatus('current')
entityCrsOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 11), EntityClassName())
if mibBuilder.loadTexts: entityCrsOptLineClassName.setStatus('current')
entityCrsOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineAidString.setStatus('current')
entityCrsOptLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 13), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineType.setStatus('current')
entityCrsOptLineTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineTableId.setStatus('current')
entityCrsOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 15), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineParentId.setStatus('current')
entityCrsOptLineFromId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineFromId.setStatus('current')
entityCrsOptLineToId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineToId.setStatus('current')
entityCrsOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 13, 1, 18), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrsOptLineClass.setStatus('current')
entityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16), )
if mibBuilder.loadTexts: entityContainerTable.setStatus('current')
entityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: entityContainerEntry.setStatus('current')
entityContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityContainerShelfNo.setStatus('current')
entityContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityContainerSlotNo.setStatus('current')
entityContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityContainerPortNo.setStatus('current')
entityContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityContainerExtNo.setStatus('current')
entityContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityContainerClassName.setStatus('current')
entityContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerAidString.setStatus('current')
entityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerType.setStatus('current')
entityContainerTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerTableId.setStatus('current')
entityContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerParentId.setStatus('current')
entityContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerClass.setStatus('current')
entityContainerOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityContainerOneIndex.setStatus('current')
entityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17), )
if mibBuilder.loadTexts: entityOpticalMuxTable.setStatus('current')
entityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: entityOpticalMuxEntry.setStatus('current')
entityOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxShelfNo.setStatus('current')
entityOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxSlotNo.setStatus('current')
entityOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxPortNo.setStatus('current')
entityOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityOpticalMuxExtNo.setStatus('current')
entityOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityOpticalMuxClassName.setStatus('current')
entityOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxAidString.setStatus('current')
entityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxType.setStatus('current')
entityOpticalMuxTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxTableId.setStatus('current')
entityOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxParentId.setStatus('current')
entityOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxClass.setStatus('current')
entityOpticalMuxOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 17, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityOpticalMuxOneIndex.setStatus('current')
entityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18), )
if mibBuilder.loadTexts: entityShelfConnTable.setStatus('current')
entityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: entityShelfConnEntry.setStatus('current')
entityShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnShelfNo.setStatus('current')
entityShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnSlotNo.setStatus('current')
entityShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnPortNo.setStatus('current')
entityShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityShelfConnExtNo.setStatus('current')
entityShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityShelfConnClassName.setStatus('current')
entityShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnAidString.setStatus('current')
entityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnType.setStatus('current')
entityShelfConnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnTableId.setStatus('current')
entityShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnParentId.setStatus('current')
entityShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnClass.setStatus('current')
entityShelfConnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityShelfConnOneIndex.setStatus('current')
entityFfpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19), )
if mibBuilder.loadTexts: entityFfpTable.setStatus('current')
entityFfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: entityFfpEntry.setStatus('current')
entityFfpShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFfpShelfNo.setStatus('current')
entityFfpSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFfpSlotNo.setStatus('current')
entityFfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFfpPortNo.setStatus('current')
entityFfpExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFfpExtNo.setStatus('current')
entityFfpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFfpClassName.setStatus('current')
entityFfpAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpAidString.setStatus('current')
entityFfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpType.setStatus('current')
entityFfpTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpTableId.setStatus('current')
entityFfpParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpParentId.setStatus('current')
entityFfpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpClass.setStatus('current')
entityFfpOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 19, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFfpOneIndex.setStatus('current')
entityCrossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20), )
if mibBuilder.loadTexts: entityCrossDcnTable.setStatus('current')
entityCrossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: entityCrossDcnEntry.setStatus('current')
entityCrossDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnShelfNo.setStatus('current')
entityCrossDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnSlotNo.setStatus('current')
entityCrossDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnPortNo.setStatus('current')
entityCrossDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityCrossDcnExtNo.setStatus('current')
entityCrossDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityCrossDcnClassName.setStatus('current')
entityCrossDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnAidString.setStatus('current')
entityCrossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnType.setStatus('current')
entityCrossDcnTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnTableId.setStatus('current')
entityCrossDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnParentId.setStatus('current')
entityCrossDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnClass.setStatus('current')
entityCrossDcnOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 20, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCrossDcnOneIndex.setStatus('current')
entityProtectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21), )
if mibBuilder.loadTexts: entityProtectionCableTable.setStatus('current')
entityProtectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: entityProtectionCableEntry.setStatus('current')
entityProtectionCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex1.setStatus('current')
entityProtectionCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex2.setStatus('current')
entityProtectionCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex3.setStatus('current')
entityProtectionCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityProtectionCableIndex4.setStatus('current')
entityProtectionCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityProtectionCableClassName.setStatus('current')
entityProtectionCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableAidString.setStatus('current')
entityProtectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableType.setStatus('current')
entityProtectionCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableTableId.setStatus('current')
entityProtectionCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableParentId.setStatus('current')
entityProtectionCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 21, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityProtectionCableClass.setStatus('current')
entityFilterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22), )
if mibBuilder.loadTexts: entityFilterCableTable.setStatus('current')
entityFilterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: entityFilterCableEntry.setStatus('current')
entityFilterCableIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex1.setStatus('current')
entityFilterCableIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex2.setStatus('current')
entityFilterCableIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex3.setStatus('current')
entityFilterCableIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityFilterCableIndex4.setStatus('current')
entityFilterCableClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityFilterCableClassName.setStatus('current')
entityFilterCableAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableAidString.setStatus('current')
entityFilterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 7), FspR7EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableType.setStatus('current')
entityFilterCableTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableTableId.setStatus('current')
entityFilterCableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableParentId.setStatus('current')
entityFilterCableClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 22, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityFilterCableClass.setStatus('current')
entityMtosiSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100), )
if mibBuilder.loadTexts: entityMtosiSlotsTable.setStatus('current')
entityMtosiSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityMtosiSlotsShelfNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsSlotNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsPortNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsExtNo"), (0, "ADVA-FSPR7-MIB", "entityMtosiSlotsClassName"))
if mibBuilder.loadTexts: entityMtosiSlotsEntry.setStatus('current')
entityMtosiSlotsShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsShelfNo.setStatus('current')
entityMtosiSlotsSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsSlotNo.setStatus('current')
entityMtosiSlotsPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsPortNo.setStatus('current')
entityMtosiSlotsExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: entityMtosiSlotsExtNo.setStatus('current')
entityMtosiSlotsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: entityMtosiSlotsClassName.setStatus('current')
entityMtosiSlotsAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsAidString.setStatus('current')
entityMtosiSlotsParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsParentId.setStatus('current')
entityMtosiSlotsClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsClass.setStatus('current')
entityMtosiSlotsChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 100, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMtosiSlotsChildId.setStatus('current')
endOfEntities = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEntities.setStatus('current')
trapModeLegacy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 1), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapModeLegacy.setStatus('current')
artificialEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 2), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artificialEntity.setStatus('current')
identifyTraps = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identifyTraps.setStatus('current')
controlPlane = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 4), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlPlane.setStatus('current')
autoRestart = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 5), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRestart.setStatus('current')
autoRestartMax = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRestartMax.setStatus('current')
autoRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoRestartCount.setStatus('current')
cpRest = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 8), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpRest.setStatus('current')
autoProvisionOL = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 9), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoProvisionOL.setStatus('current')
uidEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1096), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('day').setMaxAccess("readwrite")
if mibBuilder.loadTexts: uidEraseTime.setStatus('current')
restConf = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 11), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restConf.setStatus('deprecated')
netConf = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 12), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConf.setStatus('deprecated')
networkIntelligence = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 13), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkIntelligence.setStatus('current')
channelSpacing = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 14), FspR7ChannelSpacing()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSpacing.setStatus('current')
sdnInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 15), FspR7SdnInterface()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdnInterface.setStatus('current')
webInterface = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webInterface.setStatus('current')
updateFwpOnInstall = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 17), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateFwpOnInstall.setStatus('current')
mpFilePointer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 18), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpFilePointer.setStatus('current')
ipv6Control = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 1), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Control.setStatus('current')
ipv6DefGateway = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6DefGateway.setStatus('current')
ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6.setStatus('current')
ipv6PrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 128), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PrefixLen.setStatus('current')
dnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1.setStatus('current')
dnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 100, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2.setStatus('current')
naasMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 101, 3), FspR7NaasMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naasMode.setStatus('current')
netConfTmout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 102, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(30, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfTmout.setStatus('current')
endOfNeMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNeMgmt.setStatus('current')
crossConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionTable.setStatus('current')
crossConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionEntry.setStatus('current')
crossConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRowStatus.setStatus('current')
crossConnectionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 2), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAdmin.setStatus('current')
crossConnectionRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 3), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionRedLineState.setStatus('current')
crossConnectionCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 4), FspR7FunctionCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFunction.setStatus('current')
crossConnectionConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 5), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionConn.setStatus('current')
crossConnectionCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 6), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsType.setStatus('current')
crossConnectionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionAlias.setStatus('current')
crossConnectionPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 8), FspR7PathNode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionPathNode.setStatus('current')
crossConnectionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionTunnelAid.setStatus('current')
crossConnectionIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressTid.setStatus('current')
crossConnectionIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionIngressNodeIp.setStatus('current')
crossConnectionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionOperState.setStatus('current')
crossConnectionSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionSecondaryStates.setStatus('current')
crossConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 14), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionType.setStatus('current')
crossConnectionPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 15), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionPathProtection.setStatus('current')
crossConnectionCrsFromAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 16), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsFromAidTwo.setStatus('current')
crossConnectionCrsToAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 17), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsToAidTwo.setStatus('current')
crossConnectionCrsMcAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 18), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsMcAidList.setStatus('current')
crossConnectionCrsContAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 19), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidList.setStatus('current')
crossConnectionCrsContAidListTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 6, 1, 20), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossConnectionCrsContAidListTwo.setStatus('current')
crossOpticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineTable.setStatus('current')
crossOpticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineEntry.setStatus('current')
crossOpticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRowStatus.setStatus('current')
crossOpticalLineRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 2), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineRedLineState.setStatus('current')
crossOpticalLineCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 3), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCrsFunction.setStatus('current')
crossOpticalLineConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 4), FspR7Conn()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineConn.setStatus('current')
crossOpticalLineCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 5), FspR7TypeCrs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineCrsType.setStatus('current')
crossOpticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineAlias.setStatus('current')
crossOpticalLineTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossOpticalLineTunnelAid.setStatus('current')
crossOpticalLineIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressTid.setStatus('current')
crossOpticalLineIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineIngressNodeIp.setStatus('current')
crossOpticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 7, 1, 10), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineSecondaryStates.setStatus('current')
endOfCrossOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineTable.setStatus('current')
crossDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnTable.setStatus('current')
crossDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnEntry.setStatus('current')
crossDcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnRowStatus.setStatus('current')
crossDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnType.setStatus('current')
crossDcnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnLink.setStatus('current')
crossDcnEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crossDcnEcc.setStatus('current')
endOfCrossDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnTable.setStatus('current')
endOfSpecificMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmt.setStatus('current')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
shelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRowStatus.setStatus('current')
shelfNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfNetworkPorts.setStatus('current')
shelfInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugs.setStatus('current')
shelfConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 4), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectionType.setStatus('current')
shelfOscPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscPorts.setStatus('current')
shelfShelfHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 6), Unsigned32()).setUnits('HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfHeight.setStatus('current')
shelfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 7), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannel.setStatus('current')
shelfPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 8), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPsuOutputPower.setStatus('current')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 9), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfType.setStatus('current')
shelfChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 10), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelsNumber.setStatus('current')
shelfRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRack.setStatus('current')
shelfInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 12), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPlugRates.setStatus('current')
shelfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 13), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnectorType.setStatus('current')
shelfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 14), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSupply.setStatus('current')
shelfClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfClientPorts.setStatus('current')
shelfFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 16), FspR7FiberBrand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberBrand.setStatus('current')
shelfTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 17), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTransmitChannel.setStatus('current')
shelfBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfBandProvision.setStatus('current')
shelfUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfUpgradePorts.setStatus('current')
shelfStandardSlotHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 20), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlotHeight.setStatus('current')
shelfStandardSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStandardSlots.setStatus('current')
shelfChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 22), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelBandwith.setStatus('current')
shelfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 23), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAdmin.setStatus('current')
shelfInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInternalPorts.setStatus('current')
shelfRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackNumber.setStatus('current')
shelfRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('HU').setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRackOrder.setStatus('current')
shelfOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 27), FspR7OscChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscChannel.setStatus('current')
shelfMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 28), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMaxPowerConsumption.setStatus('current')
shelfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAlias.setStatus('current')
shelfFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 30), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFiberType.setStatus('current')
shelfChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 31), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelSpacing.setStatus('current')
shelfSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 32), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSecondaryStates.setStatus('current')
shelfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 33), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperState.setStatus('current')
shelfScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 34), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfScuRing.setStatus('current')
shelfShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfShelfId.setStatus('current')
shelfFDports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFDports.setStatus('current')
shelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfSlot.setStatus('current')
shelfChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 38), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChannelRangeProvision.setStatus('current')
shelfPowerSupplyProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 39), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerSupplyProtection.setStatus('current')
shelfAirFilterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 40), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAirFilterClear.setStatus('current')
shelfAirFilterChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 41), Unsigned32()).setUnits('day').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfAirFilterChange.setStatus('current')
shelfAirFilterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('month').setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAirFilterCycle.setStatus('current')
endOfShelfTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfTable.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanRowStatus.setStatus('current')
fanForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanForceDestroy.setStatus('current')
fanMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 3), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanMaxPowerConsumption.setStatus('current')
fanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 4), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAdmin.setStatus('current')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 5), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanType.setStatus('current')
fanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanAlias.setStatus('current')
fanOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 7), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanOutputReset.setStatus('current')
fanFanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanPorts.setStatus('current')
fanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 9), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSecondaryStates.setStatus('current')
fanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOperState.setStatus('current')
fanFanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 3, 1, 11), FspR7FanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFanProfile.setStatus('current')
endOfFanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanTable.setStatus('current')
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
plugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugRowStatus.setStatus('current')
plugConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 2), FspR7ConnectorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugConnector.setStatus('current')
plugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 3), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugType.setStatus('current')
plugReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugReach.setStatus('current')
plugLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLoopbackAttenuation.setStatus('current')
plugGenericPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGenericPorts.setStatus('current')
plugConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 7), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugConnectorType.setStatus('current')
plugFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 8), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugFiberType.setStatus('current')
plugTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugTransmitChannel.setStatus('current')
plugAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAlias.setStatus('current')
plugLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 11), FspR7LaneGroupInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLaneGroup.setStatus('current')
plugMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 12), FspR7PlugDataRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugMaxDataRate.setStatus('current')
plugThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugThirdPartyUsage.setStatus('current')
plugAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 14), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugAdmin.setStatus('current')
plugSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugSecondaryStates.setStatus('current')
plugOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugOperState.setStatus('current')
plugBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 17), FspR7BidirectionalChannel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugBidirectionalChannel.setStatus('current')
plugChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 18), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugChannelSpacingProvision.setStatus('current')
plugChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 19), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugChannelRangeProvision.setStatus('current')
plugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 20), FspR7Length()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugLength.setStatus('current')
plugPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 21), FspR7PlugType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugPlugType.setStatus('current')
plugPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 5, 1, 22), FspR7PlugMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plugPlugMode.setStatus('current')
endOfPlugTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugTable.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
moduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRowStatus.setStatus('current')
moduleForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 2), FspR7ForcedStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleForceDestroy.setStatus('current')
moduleCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 3), FspR7Category()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCategory.setStatus('current')
moduleNetworkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNetworkPorts.setStatus('current')
moduleInternalPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 5), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugs.setStatus('current')
modulePsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 6), FspR7PsuOutputPower()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePsuOutputPower.setStatus('current')
moduleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 7), Unsigned32()).setUnits('0.1 HP').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleWidth.setStatus('current')
modulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 8), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePower.setStatus('current')
moduleReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 9), FspR7OpticalInterfaceReach()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleReach.setStatus('current')
moduleInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 10), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleInitEqlz.setStatus('current')
moduleSuppClientPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 11), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugTypes.setStatus('current')
moduleSuppNetworkPlugTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 12), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugTypes.setStatus('current')
moduleLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLanAid.setStatus('current')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 14), FspR7EquipmentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleType.setStatus('current')
moduleMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 15), FspR7Mapping()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMapping.setStatus('current')
moduleGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 16), FspR7GainRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGainRange.setStatus('current')
moduleInternalPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 17), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugRates.setStatus('current')
moduleSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 18), FspR7SingleFiberLocation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSfProvision.setStatus('current')
moduleInternalPlugsReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 19), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPlugsReach.setStatus('current')
moduleCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 20), FspR7CapInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleCapabilityLevelProvision.setStatus('current')
moduleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 21), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConnector.setStatus('current')
moduleDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 22), FspR7DCFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDCFiberType.setStatus('current')
moduleChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 23), FspR7NumberOfChannels()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsProvision.setStatus('current')
moduleFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 24), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberDetect.setStatus('current')
moduleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescription.setStatus('current')
moduleSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 26), FspR7SupplyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSupply.setStatus('current')
moduleSuppClientPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 27), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppClientPlugRates.setStatus('current')
moduleClientPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleClientPorts.setStatus('current')
moduleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 29), FspR7OpticalGroup()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleGroup.setStatus('current')
moduleDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 30), FspR7DeploymentScenario()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDeploy.setStatus('current')
moduleLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleLagSysPrio.setStatus('current')
moduleMaxPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 32), Unsigned32()).setUnits('0.1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxPowerConsumption.setStatus('current')
moduleTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 33), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTransmitChannel.setStatus('current')
moduleBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 34), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleBand.setStatus('current')
moduleUpgradePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpgradePorts.setStatus('current')
moduleTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 36), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTrafficDirection.setStatus('current')
moduleMidstagePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMidstagePorts.setStatus('current')
moduleStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 38), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleStages.setStatus('current')
moduleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 39), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleIpAddr.setStatus('current')
moduleDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 40), FspR7DispersionCompensation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleDispersionCompensation.setStatus('current')
moduleActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleActivateDetect.setStatus('current')
moduleOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 42), FspR7OscUsage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleOscUsage.setStatus('current')
moduleInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInternalPorts.setStatus('current')
moduleAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 44), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAdmin.setStatus('current')
moduleScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 45), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleScrambling.setStatus('current')
moduleTerminationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 46), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTerminationType.setStatus('current')
moduleChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 47), FspR7NumberOfChannels()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelsNumber.setStatus('current')
moduleLanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLanPorts.setStatus('current')
moduleChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 49), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacingProvision.setStatus('current')
moduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 50), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMode.setStatus('current')
moduleEccPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEccPorts.setStatus('current')
moduleSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 52), FspR7OpticalSubBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleSubBandProvision.setStatus('current')
moduleSuppNetworkPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 53), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSuppNetworkPlugRates.setStatus('current')
moduleHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 54), Unsigned32()).setUnits('0.1 HU').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHeight.setStatus('current')
moduleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 55), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAlias.setStatus('current')
moduleFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 56), FspR7OpticalFiberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleFiberType.setStatus('current')
moduleChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 57), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleChannelSpacing.setStatus('current')
moduleOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 58), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleOutputReset.setStatus('current')
moduleSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialPorts.setStatus('current')
moduleRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 60), FspR7RoadmNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRoadmNumber.setStatus('current')
moduleSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 61), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSecondaryStates.setStatus('current')
moduleOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 62), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOperState.setStatus('current')
moduleAlsConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 63), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAlsConf.setStatus('current')
moduleTopologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 64), FspR7TopologyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTopologyType.setStatus('current')
moduleScuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 65), FspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScuRing.setStatus('current')
moduleNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 66), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNodeIpAddress.setStatus('current')
moduleInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 67), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInventoryDescription.setStatus('current')
moduleGenericPlugRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 68), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleGenericPlugRates.setStatus('current')
moduleTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 69), FspR7Topology()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleTopology.setStatus('current')
moduleForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 70), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleForceConfig.setStatus('current')
moduleRamUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 71), Unsigned32()).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRamUsage.setStatus('current')
moduleFanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 72), FspR7FanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFanMode.setStatus('current')
moduleMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 73), FspR7MuxMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleMuxMethod.setStatus('current')
moduleNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 74), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleNdpCleanup.setStatus('current')
moduleAvlndpGbeTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeTxcrs.setStatus('current')
moduleAvlndpGbeRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpGbeRxcrs.setStatus('current')
moduleAvlndpF125Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Txcrs.setStatus('current')
moduleAvlndpF125Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 78), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF125Rxcrs.setStatus('current')
moduleAvlndpF270Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 79), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Txcrs.setStatus('current')
moduleAvlndpF270Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF270Rxcrs.setStatus('current')
moduleAvlndpF1483Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Txcrs.setStatus('current')
moduleAvlndpF1483Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 82), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1483Rxcrs.setStatus('current')
moduleAvlndpF1485Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Txcrs.setStatus('current')
moduleAvlndpF1485Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF1485Rxcrs.setStatus('current')
moduleAvlndpF2967Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Txcrs.setStatus('current')
moduleAvlndpF2967Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2967Rxcrs.setStatus('current')
moduleAvlndpF2970Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Txcrs.setStatus('current')
moduleAvlndpF2970Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 88), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpF2970Rxcrs.setStatus('current')
moduleAvlmdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 89), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlmdp.setStatus('current')
moduleRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 90), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleRstp.setStatus('current')
moduleRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 91), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleRemoteReset.setStatus('current')
moduleChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 92), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChannelRangeProvision.setStatus('current')
modulePartner1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 93), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner1.setStatus('current')
modulePartner2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 94), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner2.setStatus('current')
modulePartner3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 95), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner3.setStatus('current')
modulePartner4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 96), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modulePartner4.setStatus('current')
moduleAcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 97), FspR7Acp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: moduleAcp.setStatus('current')
moduleAvlSwCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 98), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlSwCap.setStatus('current')
moduleAvlMapCapUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 99), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlMapCapUp.setStatus('current')
moduleAvlMapCapDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 100), Unsigned32()).setUnits('0.01 Gbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlMapCapDown.setStatus('current')
moduleAvlndpAdapt1485Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Txcrs.setStatus('current')
moduleAvlndpAdapt1485Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt1485Rxcrs.setStatus('current')
moduleAvlndpAdapt2970Txcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Txcrs.setStatus('current')
moduleAvlndpAdapt2970Rxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAvlndpAdapt2970Rxcrs.setStatus('current')
moduleManagementPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 7, 1, 105), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleManagementPorts.setStatus('current')
endOfModuleTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleTable.setStatus('current')
protectionCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9), )
if mibBuilder.loadTexts: protectionCableTable.setStatus('current')
protectionCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: protectionCableEntry.setStatus('current')
protectionCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableRowStatus.setStatus('current')
protectionCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 9, 1, 2), FspR7YcableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protectionCableType.setStatus('current')
endOfProtectionCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCableTable.setStatus('current')
filterCableTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11), )
if mibBuilder.loadTexts: filterCableTable.setStatus('current')
filterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: filterCableEntry.setStatus('current')
filterCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableRowStatus.setStatus('current')
filterCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 11, 1, 2), FspR7FltrCableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterCableType.setStatus('current')
endOfFilterCableTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFilterCableTable.setStatus('current')
endOfEqptMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmt.setStatus('current')
physicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortTable.setStatus('current')
physicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortEntry.setStatus('current')
physicalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRowStatus.setStatus('current')
physicalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortType.setStatus('current')
physicalPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAdmin.setStatus('current')
physicalPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 4), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnector.setStatus('current')
physicalPortFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 5), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFiber.setStatus('current')
physicalPortConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 6), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnType.setStatus('current')
physicalPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOperState.setStatus('current')
physicalPortLaneChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel.setStatus('current')
physicalPortLaserBiasCurrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 9), Unsigned32()).setUnits('0.001 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserBiasCurrLevel.setStatus('current')
physicalPortLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 10), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserTemp.setStatus('current')
physicalPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 11), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortInputPower.setStatus('deprecated')
physicalPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 12), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortOutputPower.setStatus('deprecated')
physicalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 13), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSecondaryStates.setStatus('current')
physicalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlias.setStatus('current')
physicalPortAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 15), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAlsMode.setStatus('current')
physicalPortAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 16), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortAutoThresReset.setStatus('current')
physicalPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 17), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutonegotiation.setStatus('current')
physicalPortBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 18), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBand.setStatus('current')
physicalPortPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 19), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPhysIfBaseType.setStatus('current')
physicalPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 20), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortConnState.setStatus('current')
physicalPortBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 21), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortBehaviour.setStatus('current')
physicalPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 22), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortRate.setStatus('current')
physicalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 23), FspR7Bitrate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBitrate.setStatus('current')
physicalPortDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 24), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDispertionConfig.setStatus('current')
physicalPortDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionSetting.setStatus('current')
physicalPortDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 26), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDispersionMode.setStatus('current')
physicalPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 27), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelSpacing.setStatus('current')
physicalPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelProv.setStatus('current')
physicalPortWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 29), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortWdmRxChannel.setStatus('current')
physicalPortCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 30), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCodeGain.setStatus('current')
physicalPortXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 31), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortXfpDecisionThres.setStatus('current')
physicalPortDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 32), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortDisparityCorrection.setStatus('current')
physicalPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 33), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDuplexMode.setStatus('current')
physicalPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 34), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortEqlzAdmin.setStatus('current')
physicalPortErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 35), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortErrorForwarding.setStatus('current')
physicalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 36), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFecType.setStatus('current')
physicalPortFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 37), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFarEndCommunication.setStatus('current')
physicalPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 38), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortFlowControl.setStatus('current')
physicalPortForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 39), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortForceLaserOn.setStatus('current')
physicalPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 40), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFrequency.setStatus('current')
physicalPortReceiverFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 41), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverFrequency.setStatus('current')
physicalPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 42), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToProt.setStatus('current')
physicalPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 43), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInhibitSwitchToWork.setStatus('current')
physicalPortTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 44), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitWavelength.setStatus('current')
physicalPortReceiverWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 45), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReceiverWavelength.setStatus('current')
physicalPortLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 46), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannelSetting.setStatus('current')
physicalPortLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 47), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannel1.setStatus('current')
physicalPortLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 48), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaneChannel2.setStatus('current')
physicalPortLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 49), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel3.setStatus('current')
physicalPortLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 50), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneChannel4.setStatus('current')
physicalPortLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 51), FspR7LaneGroupInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaneGroup.setStatus('current')
physicalPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 52), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLoopConfig.setStatus('current')
physicalPortLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 53), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserDelayTimer.setStatus('current')
physicalPortLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffTimer.setStatus('current')
physicalPortLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOnTimer.setStatus('current')
physicalPortLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 56), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLaserOffDelayFunction.setStatus('current')
physicalPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 57), FspR7MonLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortMonLevel.setStatus('current')
physicalPortSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortSumTransmited.setStatus('current')
physicalPortAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 59), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortAutoPTassignment.setStatus('current')
physicalPortTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 60), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTributarySlotMethod.setStatus('current')
physicalPortTributaryFreeSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryFreeSlotNo.setStatus('current')
physicalPortTributaryAssignedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTributaryAssignedSlotNo.setStatus('current')
physicalPortInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 63), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortInitiateEqualization.setStatus('current')
physicalPortLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 64), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortLossAttenuation.setStatus('current')
physicalPortOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPoint.setStatus('current')
physicalPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 66), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDataLayerPmReset.setStatus('current')
physicalPortPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 67), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortPrbsPmReset.setStatus('current')
physicalPortTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 68), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsRcvMode.setStatus('current')
physicalPortTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 69), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTestPrbsTrmtMode.setStatus('current')
physicalPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 70), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortSwitchCommand.setStatus('current')
physicalPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 71), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpuPayloadType.setStatus('current')
physicalPortReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 72), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortReach.setStatus('current')
physicalPortSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 73), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetLine.setStatus('current')
physicalPortSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhMs.setStatus('current')
physicalPortSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOtu.setStatus('current')
physicalPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOdu.setStatus('current')
physicalPortSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 77), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThreshold.setStatus('current')
physicalPortSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 78), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPcslThreshold.setStatus('current')
physicalPortSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 79), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSonetSection.setStatus('current')
physicalPortSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresSdhSection.setStatus('current')
physicalPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmA.setStatus('current')
physicalPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmB.setStatus('current')
physicalPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegThresOduTcmC.setStatus('current')
physicalPortSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSignalDegradePeriod.setStatus('current')
physicalPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 85), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOdu.setStatus('current')
physicalPortSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOtu.setStatus('current')
physicalPortSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodIntegration.setStatus('current')
physicalPortSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 88), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodSdhSection.setStatus('current')
physicalPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 89), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmA.setStatus('current')
physicalPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 90), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmB.setStatus('current')
physicalPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortSigDegPeriodOduTcmC.setStatus('current')
physicalPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 92), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOtnStuffing.setStatus('current')
physicalPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 93), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmALevel.setStatus('current')
physicalPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 94), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmBLevel.setStatus('current')
physicalPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 95), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTcmCLevel.setStatus('current')
physicalPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 96), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTerminationLevel.setStatus('current')
physicalPortTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 97), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimingSource.setStatus('current')
physicalPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 98), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOdu.setStatus('current')
physicalPortTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 99), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOtu.setStatus('current')
physicalPortTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 100), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeSonetSection.setStatus('current')
physicalPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 101), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmA.setStatus('current')
physicalPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 102), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmB.setStatus('current')
physicalPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 103), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimModeOduTcmC.setStatus('current')
physicalPortTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 104), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceFormSonetSection.setStatus('current')
physicalPortTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 105), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedSonetSection.setStatus('current')
physicalPortTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 106), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSonetSection.setStatus('current')
physicalPortTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 107), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOtu.setStatus('current')
physicalPortTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 108), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOtu.setStatus('current')
physicalPortTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 109), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOtu.setStatus('current')
physicalPortTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 110), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOtu.setStatus('current')
physicalPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 111), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOdu.setStatus('current')
physicalPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 112), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOdu.setStatus('current')
physicalPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 113), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOdu.setStatus('current')
physicalPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 114), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOdu.setStatus('current')
physicalPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 115), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmA.setStatus('current')
physicalPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 116), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmA.setStatus('current')
physicalPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 117), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmA.setStatus('current')
physicalPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 118), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmA.setStatus('current')
physicalPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 119), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmB.setStatus('current')
physicalPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 120), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmB.setStatus('current')
physicalPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 121), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmB.setStatus('current')
physicalPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 122), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmB.setStatus('current')
physicalPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 123), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOduTcmC.setStatus('current')
physicalPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 124), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitSapiOduTcmC.setStatus('current')
physicalPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 125), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitDapiOduTcmC.setStatus('current')
physicalPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 126), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceTransmitOpspOduTcmC.setStatus('current')
physicalPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 127), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOdu.setStatus('current')
physicalPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 128), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOdu.setStatus('current')
physicalPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 129), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOdu.setStatus('current')
physicalPortTraceRcvSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 130), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiOtu.setStatus('current')
physicalPortTraceRcvDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 131), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiOtu.setStatus('current')
physicalPortTraceRcvOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 132), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspOtu.setStatus('current')
physicalPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 133), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcma.setStatus('current')
physicalPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 134), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcma.setStatus('current')
physicalPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 135), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcma.setStatus('current')
physicalPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 136), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmb.setStatus('current')
physicalPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 137), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmb.setStatus('current')
physicalPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 138), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmb.setStatus('current')
physicalPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 139), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvSapiTcmc.setStatus('current')
physicalPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 140), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvDapiTcmc.setStatus('current')
physicalPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 141), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceRcvOpspTcmc.setStatus('current')
physicalPortTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 142), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTraceReceived.setStatus('current')
physicalPortTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 143), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortTurnupConfig.setStatus('current')
physicalPortTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 144), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffDelay.setStatus('current')
physicalPortVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 145), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaMode.setStatus('current')
physicalPortVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVoaSetpoint.setStatus('current')
physicalPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsRcv.setStatus('current')
physicalPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCbsTrmt.setStatus('current')
physicalPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 149), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirRcv.setStatus('current')
physicalPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 150), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCirTrmt.setStatus('current')
physicalPortLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 151), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLagPrio.setStatus('current')
physicalPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 152), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMacAddress.setStatus('current')
physicalPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 153), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortMaxFrameSize.setStatus('current')
physicalPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 154), OtnPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPayload.setStatus('current')
physicalPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 155), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortMode.setStatus('current')
physicalPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 156), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPortRole.setStatus('current')
physicalPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 157), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPriority.setStatus('current')
physicalPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 158), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortPvid.setStatus('current')
physicalPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 159), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortStagType.setStatus('current')
physicalPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 160), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortUtag.setStatus('current')
physicalPortVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 161), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortVethAid.setStatus('current')
physicalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 162), FspR7ChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelBandwith.setStatus('current')
physicalPortFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 163), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFacilities.setStatus('current')
physicalPortLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 164), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLanes.setStatus('current')
physicalPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 165), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortProtectionRole.setStatus('current')
physicalPortMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 166), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortMonitoredBitrate.setStatus('current')
physicalPortLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 167), FspR7LagState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagState.setStatus('current')
physicalPortLagIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 168), FspR7LagIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagIdFend.setStatus('current')
physicalPortLagFendState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 169), FspR7LagFendState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagFendState.setStatus('current')
physicalPortLagPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 170), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagPortNo.setStatus('current')
physicalPortLagKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 171), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLagKey.setStatus('current')
physicalPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 172), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortValidSigTimer.setStatus('current')
physicalPortLaserReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 173), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortLaserReleaseTimer.setStatus('current')
physicalPortBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 174), FspR7BidirectionalChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortBidirectionalChannel.setStatus('current')
physicalPortTransmitterWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 175), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterWavelength.setStatus('current')
physicalPortTransmitterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 176), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTransmitterFrequency.setStatus('current')
physicalPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 177), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRedLineState.setStatus('current')
physicalPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 178), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTunnelAid.setStatus('current')
physicalPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 179), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressTid.setStatus('current')
physicalPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 180), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortIngressNodeIp.setStatus('current')
physicalPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 181), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortRateLimit.setStatus('current')
physicalPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 182), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortPathProtection.setStatus('current')
physicalPortGropticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 183), FspR7GropticsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortGropticsType.setStatus('current')
physicalPortAvlntsTxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 184), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsTxcrs.setStatus('current')
physicalPortAvlntsRxcrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 185), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAvlntsRxcrs.setStatus('current')
physicalPortTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 186), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffOnTm.setStatus('current')
physicalPortTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 187), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOffTimer.setStatus('current')
physicalPortTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 188), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTxOnTimer.setStatus('current')
physicalPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 189), FspR7TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortTrafficDirection.setStatus('current')
physicalPortChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 190), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelSpacingProvision.setStatus('current')
physicalPortChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 191), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortChannelRangeProvision.setStatus('current')
physicalPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 192), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortMode.setStatus('current')
physicalPortNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 193), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortNearEndProtectionState.setStatus('current')
physicalPortFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 194), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortFarEndProtectionState.setStatus('current')
physicalPortChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 195), FspR7ChannelRangeInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortChannelPlan.setStatus('current')
physicalPortAutosrvLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 196), FspR7AutosrvLock()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortAutosrvLock.setStatus('current')
physicalPortOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 197), FspR7Optimize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOptimize.setStatus('current')
physicalPortEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 198), CryptoFspR7EncryptionCommunication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortEncryptionChannel.setStatus('current')
physicalPortLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 199), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLinkSetup.setStatus('current')
physicalPortCdCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 200), FspR7CdCompensationRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCdCompensationRange.setStatus('current')
physicalPortLLDPNeighborsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 201), FspR7LLDPNeighbors()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLLDPNeighborsRx.setStatus('current')
physicalPortLLDPNeighborsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 202), FspR7LLDPNeighbors()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortLLDPNeighborsTx.setStatus('current')
physicalPortCdPostCompensationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 203), FspR7CdPostCompensationRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortCdPostCompensationRange.setStatus('current')
physicalPortOpticalSetPointLane1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 204), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane1.setStatus('current')
physicalPortOpticalSetPointLane2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 205), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOpticalSetPointLane2.setStatus('current')
physicalPortOduMultiplexStructure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 206), FspR7OduMultiplexStructure()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortOduMultiplexStructure.setStatus('current')
physicalPortTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 207), FspR7TerminationMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTerminationMode.setStatus('current')
physicalPortTimDetModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 208), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimDetModeOtu.setStatus('current')
physicalPortTimActionOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 209), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimActionOtu.setStatus('current')
physicalPortTraceExpectedDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 210), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOtu.setStatus('current')
physicalPortTraceExpectedOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 211), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOtu.setStatus('current')
physicalPortTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 212), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimDetModeOdu.setStatus('current')
physicalPortTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 213), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTimActionOdu.setStatus('current')
physicalPortTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 214), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedDapiOdu.setStatus('current')
physicalPortTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 215), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortTraceExpectedOpspOdu.setStatus('current')
physicalPortReportAisLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 216), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportAisLine.setStatus('current')
physicalPortReportSsfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 217), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportSsfLine.setStatus('current')
physicalPortReportSsfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 218), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalPortReportSsfSection.setStatus('current')
physicalPortDelayMeasurementLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 219), FspR7DmLayer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementLayer.setStatus('current')
physicalPortDelayMeasurementOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 220), FspR7DmsrmtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalPortDelayMeasurementOperation.setStatus('current')
physicalPortDelayMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 221), FspR7DmsrmtStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementStatus.setStatus('current')
physicalPortDelayMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 1, 1, 222), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortDelayMeasurementTime.setStatus('current')
virtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortTable.setStatus('current')
virtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortEntry.setStatus('current')
virtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRowStatus.setStatus('current')
virtualPortChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 2), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelBand.setStatus('current')
virtualPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortType.setStatus('current')
virtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAlias.setStatus('current')
virtualPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 5), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFunction.setStatus('current')
virtualPortChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelProv.setStatus('current')
virtualPortLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLambda.setStatus('current')
virtualPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFrequency.setStatus('current')
virtualPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 9), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortAdmin.setStatus('current')
virtualPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 10), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOperState.setStatus('current')
virtualPortConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 11), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortConnState.setStatus('current')
virtualPortEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 12), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortEqlzAdmin.setStatus('current')
virtualPortInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 13), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInitEqlz.setStatus('current')
virtualPortInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortInputPower.setStatus('deprecated')
virtualPortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 15), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOutputPower.setStatus('deprecated')
virtualPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 16), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortSecondaryStates.setStatus('current')
virtualPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 17), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortRate.setStatus('current')
virtualPortCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 18), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirRcv.setStatus('current')
virtualPortCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214400))).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsRcv.setStatus('current')
virtualPortCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 20), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCirTrmt.setStatus('current')
virtualPortCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25600))).setUnits('kByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCbsTrmt.setStatus('current')
virtualPortLagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 22), FspR7LagPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagPorts.setStatus('current')
virtualPortLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 23), FspR7LagPortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagPortType.setStatus('current')
virtualPortLagStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 24), FspR7LagStandby()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagStandby.setStatus('current')
virtualPortLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 25), FspR7LacpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpMode.setStatus('current')
virtualPortLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 26), FspR7LacpTimeout()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLacpTimeout.setStatus('current')
virtualPortLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortLagActivePorts.setStatus('current')
virtualPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 28), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMacAddress.setStatus('current')
virtualPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortMaxFrameSize.setStatus('current')
virtualPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 30), FspR7PortMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortMode.setStatus('current')
virtualPortDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 31), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortDataLayerPmReset.setStatus('current')
virtualPortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 32), FspR7PortRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPortRole.setStatus('current')
virtualPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPriority.setStatus('current')
virtualPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPvid.setStatus('current')
virtualPortRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 35), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRevertiveMode.setStatus('current')
virtualPortStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 36), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortStagType.setStatus('current')
virtualPortUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 37), FspR7UntaggedFrames()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortUtag.setStatus('current')
virtualPortBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 38), FspR7SnmpLongString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortBundle.setStatus('current')
virtualPortSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 39), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortSwitchCommand.setStatus('current')
virtualPortInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 40), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToWork.setStatus('current')
virtualPortInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 41), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortInhibitSwitchToProt.setStatus('current')
virtualPortMonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 42), FspR7MonLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortMonLevel.setStatus('current')
virtualPortOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 43), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribPortNo.setStatus('current')
virtualPortOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 44), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOduTribTimeSlottNo.setStatus('current')
virtualPortSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOdu.setStatus('current')
virtualPortSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOdu.setStatus('current')
virtualPortTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOdu.setStatus('current')
virtualPortTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOdu.setStatus('current')
virtualPortTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOdu.setStatus('current')
virtualPortTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOdu.setStatus('current')
virtualPortTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 51), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOdu.setStatus('current')
virtualPortSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmA.setStatus('current')
virtualPortSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmA.setStatus('current')
virtualPortSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmB.setStatus('current')
virtualPortSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmB.setStatus('current')
virtualPortSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegThresOduTcmC.setStatus('current')
virtualPortSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortSigDegPeriodOduTcmC.setStatus('current')
virtualPortTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 58), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmALevel.setStatus('current')
virtualPortTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 59), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmBLevel.setStatus('current')
virtualPortTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 60), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTcmCLevel.setStatus('current')
virtualPortTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmA.setStatus('current')
virtualPortTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmA.setStatus('current')
virtualPortTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmA.setStatus('current')
virtualPortTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmA.setStatus('current')
virtualPortTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 65), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmA.setStatus('current')
virtualPortTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmB.setStatus('current')
virtualPortTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmB.setStatus('current')
virtualPortTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmB.setStatus('current')
virtualPortTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmB.setStatus('current')
virtualPortTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 70), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmB.setStatus('current')
virtualPortTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOduTcmC.setStatus('current')
virtualPortTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitSapiOduTcmC.setStatus('current')
virtualPortTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitDapiOduTcmC.setStatus('current')
virtualPortTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceTransmitOpspOduTcmC.setStatus('current')
virtualPortTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 75), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimModeOduTcmC.setStatus('current')
virtualPortTraceRcvSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiOdu.setStatus('current')
virtualPortTraceRcvDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiOdu.setStatus('current')
virtualPortTraceRcvOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspOdu.setStatus('current')
virtualPortTraceRcvSapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcma.setStatus('current')
virtualPortTraceRcvDapiTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcma.setStatus('current')
virtualPortTraceRcvOpspTcma = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcma.setStatus('current')
virtualPortTraceRcvSapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmb.setStatus('current')
virtualPortTraceRcvDapiTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmb.setStatus('current')
virtualPortTraceRcvOpspTcmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmb.setStatus('current')
virtualPortTraceRcvSapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvSapiTcmc.setStatus('current')
virtualPortTraceRcvDapiTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvDapiTcmc.setStatus('current')
virtualPortTraceRcvOpspTcmc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 87), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTraceRcvOpspTcmc.setStatus('current')
virtualPortTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 88), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTerminationLevel.setStatus('current')
virtualPortChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 89), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortChannelSpacing.setStatus('current')
virtualPortCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 90), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortCir.setStatus('current')
virtualPortLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 91), LoopConfig()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortLoopConfig.setStatus('current')
virtualPortOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 92), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOwnerAid.setStatus('current')
virtualPortPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 93), OtnPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortPayload.setStatus('current')
virtualPortVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 94), VirtualContainerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortVcType.setStatus('current')
virtualPortOdtuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 95), FspR7OdtuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOdtuType.setStatus('current')
virtualPortProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 96), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortProtectionRole.setStatus('current')
virtualPortLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysPrio.setStatus('current')
virtualPortOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 98), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOpuPayloadType.setStatus('current')
virtualPortLagSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 99), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysMac.setStatus('current')
virtualPortLagSysIdFend = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 100), FspR7LagSysIdFend()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortLagSysIdFend.setStatus('current')
virtualPortValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 101), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortValidSigTimer.setStatus('current')
virtualPortOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 102), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOtnStuffing.setStatus('current')
virtualPortRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 103), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortRedLineState.setStatus('current')
virtualPortTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 104), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTunnelAid.setStatus('current')
virtualPortIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 105), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressTid.setStatus('current')
virtualPortIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 106), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortIngressNodeIp.setStatus('current')
virtualPortEncapsulationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 107), FspR7EncapsulationMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortEncapsulationMethod.setStatus('current')
virtualPortPathProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 108), FspR7PathProt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortPathProtection.setStatus('current')
virtualPortTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 109), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTimeslot.setStatus('current')
virtualPortOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetHigh.setStatus('current')
virtualPortOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortOffsetLow.setStatus('current')
virtualPortTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 112), FspR7TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTrafficDirection.setStatus('current')
virtualPortChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 113), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortChannelId.setStatus('current')
virtualPortNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 114), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortNearEndProtectionState.setStatus('current')
virtualPortFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 115), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortFarEndProtectionState.setStatus('current')
virtualPortAutosrvLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 116), FspR7AutosrvLock()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortAutosrvLock.setStatus('current')
virtualPortOptSetDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortOptSetDeviation.setStatus('current')
virtualPortPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 118), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortPrbsPmReset.setStatus('current')
virtualPortTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 119), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortTestPrbsRcvMode.setStatus('current')
virtualPortTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 120), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortTestPrbsTrmtMode.setStatus('current')
virtualPortTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 121), FspR7TerminationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortTerminationMode.setStatus('current')
virtualPortTimDetModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 122), FspR7TimDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimDetModeOdu.setStatus('current')
virtualPortTimActionOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 123), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTimActionOdu.setStatus('current')
virtualPortTraceExpectedDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 124), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedDapiOdu.setStatus('current')
virtualPortTraceExpectedOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 2, 1, 125), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualPortTraceExpectedOpspOdu.setStatus('current')
lldpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3), )
if mibBuilder.loadTexts: lldpTable.setStatus('current')
lldpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lldpEntry.setStatus('current')
lldpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpRowStatus.setStatus('current')
lldpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpType.setStatus('current')
lldpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpAlias.setStatus('current')
lldpDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 4), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpDataLayerPmReset.setStatus('current')
lldpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 5), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpAdmin.setStatus('current')
lldpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 6), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOperState.setStatus('current')
lldpLLDPScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 7), FspR7LLDPScope()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpLLDPScope.setStatus('current')
lldpLLDPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 8), FspR7LLDPLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLLDPLocation.setStatus('current')
lldpAgeOutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 9), Unsigned32()).setUnits('S').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpAgeOutPeriod.setStatus('current')
lldpTimeTillAgeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 10), Unsigned32()).setUnits('S').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpTimeTillAgeOut.setStatus('current')
lldpLLDPChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 11), FspR7LLDPChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLLDPChassisType.setStatus('current')
lldpChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpChassisID.setStatus('current')
lldpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 13), FspR7LLDPPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortType.setStatus('current')
lldpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortID.setStatus('current')
lldpPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortDescription.setStatus('current')
lldpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemName.setStatus('current')
lldpSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemDescription.setStatus('current')
lldpSystemCapabilityList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemCapabilityList.setStatus('current')
lldpSystemOperationList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpSystemOperationList.setStatus('current')
lldpManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 20), FspR7LLDPManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementType.setStatus('current')
lldpManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementAddress.setStatus('current')
lldpManagementInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 22), FspR7LLDPManagementInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementInterface.setStatus('current')
lldpManagementReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementReference.setStatus('current')
lldpManagementObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 3, 1, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpManagementObjectID.setStatus('current')
endOfFacilityMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmt.setStatus('current')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
linkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRowStatus.setStatus('current')
linkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkType.setStatus('current')
linkAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAdmin.setStatus('current')
linkAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAlias.setStatus('current')
linkAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthString.setStatus('current')
linkConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkConnector.setStatus('current')
linkProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 7), FspR7NoYes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProxyArp.setStatus('current')
linkOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 8), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkOspf.setStatus('current')
linkBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 9), FspR7Baund()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBaud.setStatus('current')
linkAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 10), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAuthType.setStatus('current')
linkIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 11), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIpType.setStatus('current')
linkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkMetric.setStatus('current')
linkAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAreaAid.setStatus('current')
linkEccAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkEccAid.setStatus('current')
linkNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNearEndIp.setStatus('current')
linkFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkFarEndIp.setStatus('current')
linkBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 13702))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBitrate.setStatus('current')
linkParityBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 18), FspR7ParityBit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkParityBit.setStatus('current')
linkSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 19), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSecondaryStates.setStatus('current')
linkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 20), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperState.setStatus('current')
linkNendIpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNendIpMonitor.setStatus('current')
linkValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkValidSigTimer.setStatus('current')
linkIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 23), FspR7IPv6Type()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkIPv6Type.setStatus('current')
linkNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 24), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkNendIPv6.setStatus('current')
linkFendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFendIPv6.setStatus('current')
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkMtu.setStatus('current')
linkHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkHelloInterval.setStatus('current')
linkDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkDeadInterval.setStatus('current')
linkRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRetransmitInterval.setStatus('current')
linkNendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNendLogicalIpAddr.setStatus('current')
linkFendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 1, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkFendLogicalIpAddr.setStatus('current')
endOfLinkTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkTable.setStatus('current')
scTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3), )
if mibBuilder.loadTexts: scTable.setStatus('current')
scEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scEntry.setStatus('current')
scRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scRowStatus.setStatus('current')
scType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scType.setStatus('current')
scAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAdmin.setStatus('current')
scAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlias.setStatus('current')
scAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthString.setStatus('current')
scConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 6), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnector.setStatus('current')
scOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 7), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scOspf.setStatus('current')
scAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 8), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAuthType.setStatus('current')
scIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 9), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpType.setStatus('current')
scMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMetric.setStatus('current')
scAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAreaAid.setStatus('current')
scAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 12), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAlsMode.setStatus('current')
scSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 13), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scSigDegThresReceiver.setStatus('current')
scAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 14), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAutonegotiation.setStatus('current')
scPhysIfBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 15), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPhysIfBaseType.setStatus('current')
scBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 16), FspR7Bitrate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scBitrate.setStatus('current')
scConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 17), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scConnectionType.setStatus('current')
scChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scChannel.setStatus('current')
scDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 19), EthDuplexMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDuplex.setStatus('current')
scFarEndTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndTid.setStatus('current')
scFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 21), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFiberType.setStatus('current')
scTrmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 22), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtFrequency.setStatus('current')
scAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scAttGradientTh.setStatus('current')
scIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpAddr.setStatus('current')
scTrmtWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 25), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrmtWavelength.setStatus('current')
scLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 26), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scLanAid.setStatus('current')
scIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 27), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMask.setStatus('current')
scDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 28), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDataLayerPmReset.setStatus('current')
scPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scPriority.setStatus('current')
scReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 30), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scReach.setStatus('current')
scSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 31), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSecondaryStates.setStatus('current')
scOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 32), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scOperState.setStatus('current')
scIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpAddrMonitor.setStatus('current')
scMonitoredDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 34), EthDuplexMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredDuplexMode.setStatus('current')
scMonitoredBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 35), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: scMonitoredBitrate.setStatus('current')
scIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpMaskMonitor.setStatus('current')
scFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndPort.setStatus('current')
scFendTransportTermPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 38), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFendTransportTermPoint.setStatus('current')
scFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndIp.setStatus('current')
scFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 40), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scFarEndSigDegThres.setStatus('current')
scValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scValidSigTimer.setStatus('current')
scIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 42), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6.setStatus('current')
scIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIPv6PrefixLen.setStatus('current')
scIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIPv6LinkLocal.setStatus('current')
scIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 45), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scIpMode.setStatus('current')
scGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 46), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scGatewayProxyArp.setStatus('current')
scMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMtu.setStatus('current')
scHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scHelloInterval.setStatus('current')
scDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDeadInterval.setStatus('current')
scRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: scRetransmitInterval.setStatus('current')
scDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 51), FspR7DhcpServer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpServer.setStatus('current')
scDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 52), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpStartAddr.setStatus('current')
scDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 53), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpStopAddr.setStatus('current')
scDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 54), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scDhcpMask.setStatus('current')
scFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 55), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scFrcdLogin.setStatus('current')
scMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 3, 1, 56), FspR7InterfaceCrossover()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scMdix.setStatus('current')
endOfScTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScTable.setStatus('current')
lanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5), )
if mibBuilder.loadTexts: lanTable.setStatus('current')
lanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanEntry.setStatus('current')
lanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanRowStatus.setStatus('current')
lanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanType.setStatus('current')
lanAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAdmin.setStatus('current')
lanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAlias.setStatus('current')
lanAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthString.setStatus('current')
lanOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 6), FspR7OspfMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanOspf.setStatus('current')
lanAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 7), FspR7CpAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAuthType.setStatus('current')
lanIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 8), FspR7IpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpType.setStatus('current')
lanMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanMetric.setStatus('current')
lanAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanAreaAid.setStatus('current')
lanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpAddr.setStatus('current')
lanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMask.setStatus('current')
lanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanPriority.setStatus('current')
lanLanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanLanMembers.setStatus('current')
lanSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanSecondaryStates.setStatus('current')
lanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanOperState.setStatus('current')
lanIpAddrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpAddrMonitor.setStatus('current')
lanIpMaskMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIpMaskMonitor.setStatus('current')
lanValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: lanValidSigTimer.setStatus('current')
lanIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 20), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6.setStatus('current')
lanIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIPv6PrefixLen.setStatus('current')
lanIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIPv6LinkLocal.setStatus('current')
lanIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 23), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanIpMode.setStatus('current')
lanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1500))).setUnits('Byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanMtu.setStatus('current')
lanHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanHelloInterval.setStatus('current')
lanDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDeadInterval.setStatus('current')
lanRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanRetransmitInterval.setStatus('current')
lanDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 28), FspR7DhcpServer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpServer.setStatus('current')
lanDhcpStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 29), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpStartAddr.setStatus('current')
lanDhcpStopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 30), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpStopAddr.setStatus('current')
lanDhcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanDhcpMask.setStatus('current')
lanFrcdLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 5, 1, 32), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lanFrcdLogin.setStatus('current')
endOfLanTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanTable.setStatus('current')
eccTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7), )
if mibBuilder.loadTexts: eccTable.setStatus('current')
eccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccEntry.setStatus('current')
eccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccRowStatus.setStatus('current')
eccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccType.setStatus('current')
eccAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAdmin.setStatus('current')
eccAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccAlias.setStatus('current')
eccConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 5), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnectionType.setStatus('current')
eccLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccLanAid.setStatus('current')
eccExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccExternalVid.setStatus('current')
eccpppIpLinkAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccpppIpLinkAid.setStatus('current')
eccMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 9), Unsigned32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccMaxDataRate.setStatus('current')
eccProtAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 10), FspR7NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccProtAvailability.setStatus('current')
eccSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccSecondaryStates.setStatus('current')
eccConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 12), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccConnState.setStatus('current')
eccOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 13), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccOperState.setStatus('current')
eccValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: eccValidSigTimer.setStatus('current')
eccGccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 7, 1, 15), FspR7GccUsage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eccGccUsage.setStatus('current')
endOfEccTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccTable.setStatus('current')
endOfDcnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmt.setStatus('current')
opticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxTable.setStatus('current')
opticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxEntry.setStatus('current')
opticalMuxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxRowStatus.setStatus('current')
opticalMuxConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectionType.setStatus('current')
opticalMuxChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 3), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsNumber.setStatus('current')
opticalMuxPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(115, 138))).setUnits('0.2 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxPumpPower.setStatus('current')
opticalMuxInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 5), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToWork.setStatus('current')
opticalMuxForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 6), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceLaserOn.setStatus('current')
opticalMuxAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 7), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxAseTabCreation.setStatus('current')
opticalMuxTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 8), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitFrequency.setStatus('current')
opticalMuxMultiplexLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 9), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMultiplexLevel.setStatus('current')
opticalMuxOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOpticalSetPoint.setStatus('current')
opticalMuxInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 11), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInitiateEqualization.setStatus('current')
opticalMuxConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 12), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnectorType.setStatus('current')
opticalMuxFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 13), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFiberType.setStatus('current')
opticalMuxTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 0))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTilt.setStatus('current')
opticalMuxOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 50))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOscOpticalSetpoint.setStatus('current')
opticalMuxOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffset.setStatus('current')
opticalMuxSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 17), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxSwitchCommand.setStatus('current')
opticalMuxTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitChannel.setStatus('current')
opticalMuxBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 19), FspR7OpticalBand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxBandProvision.setStatus('current')
opticalMuxAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 20), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlsMode.setStatus('current')
opticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 21), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxType.setStatus('current')
opticalMuxAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 990))).setUnits('0.1 dB/min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAttenuationGradient.setStatus('current')
opticalMuxTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 23), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTransmitWavelength.setStatus('current')
opticalMuxInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 24), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxInhibitSwitchToProt.setStatus('current')
opticalMuxTrmtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 25), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxTrmtChannel.setStatus('current')
opticalMuxVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGain.setStatus('current')
opticalMuxSumTransmited = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSumTransmited.setStatus('current')
opticalMuxRcvChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 28), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxRcvChannel.setStatus('current')
opticalMuxAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 29), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAdmin.setStatus('current')
opticalMuxTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 30), FspR7OtdrPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxTimePeriod.setStatus('current')
opticalMuxSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 31), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxSigDegThresReceiver.setStatus('current')
opticalMuxChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 32), FspR7NumberOfChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelsProvision.setStatus('current')
opticalMuxAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 33), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxAlias.setStatus('current')
opticalMuxChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 34), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelSpacing.setStatus('current')
opticalMuxDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 35), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxDataLayerPmReset.setStatus('current')
opticalMuxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 36), FspR7Gain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxGain.setStatus('current')
opticalMuxSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 37), FspR7SignalDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSignalDirection.setStatus('current')
opticalMuxEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 38), FspR7EdfaOutputPowerRating()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxEdfaPwrOut.setStatus('current')
opticalMuxVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVoaSetpoint.setStatus('current')
opticalMuxFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 40), FspR7FiberBrand()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxFiberBrand.setStatus('current')
opticalMuxStages = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 41), FspR7Stages()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxStages.setStatus('current')
opticalMuxTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 42), FspR7TiltSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxTiltSet.setStatus('current')
opticalMuxForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 43), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxForceFwdAsePilotOn.setStatus('current')
opticalMuxSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 44), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxSecondaryStates.setStatus('current')
opticalMuxConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 45), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxConnState.setStatus('current')
opticalMuxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 46), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxOperState.setStatus('current')
opticalMuxProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 47), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxProtectionRole.setStatus('current')
opticalMuxFarEndSigDegThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 48), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFarEndSigDegThres.setStatus('current')
opticalMuxMaxRamanGainMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 49), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxMaxRamanGainMon.setStatus('current')
opticalMuxValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxValidSigTimer.setStatus('current')
opticalMuxGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 51), FspR7GainRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxGainRange.setStatus('current')
opticalMuxPpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-220, 150))).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxPpc.setStatus('current')
opticalMuxOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetHigh.setStatus('current')
opticalMuxOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 210))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxOffsetLow.setStatus('current')
opticalMuxOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 55), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalMuxOptUpdate.setStatus('current')
opticalMuxChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 56), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxChannelRangeProvision.setStatus('current')
opticalMuxNearEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 57), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxNearEndProtectionState.setStatus('current')
opticalMuxFarEndProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 58), FspR7ProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxFarEndProtectionState.setStatus('current')
opticalMuxVariableGainNtoR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGainNtoR.setStatus('current')
opticalMuxVariableGainNtoC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxVariableGainNtoC.setStatus('current')
opticalMuxVariableGainRtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalMuxVariableGainRtoN.setStatus('current')
opticalMuxVariableGainCtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 350))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxVariableGainCtoN.setStatus('current')
endOfOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxTable.setStatus('current')
endOfOpticalMuxMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmt.setStatus('current')
shelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnTable.setStatus('current')
shelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnEntry.setStatus('current')
shelfConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnRowStatus.setStatus('current')
shelfConnConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 2), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnectionType.setStatus('current')
shelfConnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 3), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnConnector.setStatus('current')
shelfConnFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 4), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnFiber.setStatus('current')
shelfConnReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 5), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnReach.setStatus('current')
shelfConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 6), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnRate.setStatus('current')
shelfConnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAdmin.setStatus('current')
shelfConnAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAlias.setStatus('current')
shelfConnTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnTransmitChannel.setStatus('current')
shelfConnFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 10), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnFacilityType.setStatus('current')
shelfConnSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 11), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnSecondaryStates.setStatus('current')
shelfConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnOperState.setStatus('current')
shelfConnValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnValidSigTimer.setStatus('current')
shelfConnDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 14), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfConnDataLayerPmReset.setStatus('current')
shelfConnAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 15), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnAutonegotiation.setStatus('current')
shelfConnBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 16), FspR7Bitrate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnBitrate.setStatus('current')
shelfConnDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 17), EthDuplexMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnDuplex.setStatus('current')
shelfConnMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 1, 1, 18), FspR7InterfaceCrossover()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfConnMdix.setStatus('current')
endOfShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnTable.setStatus('current')
endOfShelfConnMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmt.setStatus('current')
envPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1), )
if mibBuilder.loadTexts: envPortTable.setStatus('current')
envPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortEntry.setStatus('current')
envPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortRowStatus.setStatus('current')
envPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 2), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortConnectorType.setStatus('current')
envPortTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 3), FspR7TelemetryOutput()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTelemetry.setStatus('current')
envPortFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortFacilityType.setStatus('current')
envPortTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmType.setStatus('current')
envPortTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortTifAlarmMessage.setStatus('current')
envPortInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 1, 1, 7), FspR7InvertTelemetryInputLogic()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: envPortInvertTifInputLogic.setStatus('current')
endOfEnvPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortTable.setStatus('current')
endOfEnvMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmt.setStatus('current')
containerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1), )
if mibBuilder.loadTexts: containerTable.setStatus('current')
containerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerEntry.setStatus('current')
containerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerRowStatus.setStatus('current')
containerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 2), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerAdmin.setStatus('current')
containerSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSequenceNumber.setStatus('current')
containerFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 4), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: containerFacilityType.setStatus('current')
containerContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerContainer.setStatus('current')
containerVSContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerVSContainer.setStatus('current')
containerSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 7), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSecondaryStates.setStatus('current')
containerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 1, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOperState.setStatus('current')
endOfContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerTable.setStatus('current')
endOfContainerMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmt.setStatus('current')
opticalLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineTable.setStatus('current')
opticalLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineEntry.setStatus('current')
opticalLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRowStatus.setStatus('current')
opticalLineTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineTxLineAttenuation.setStatus('current')
opticalLineRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineRxLineAttenuation.setStatus('current')
opticalLineAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineAlias.setStatus('current')
opticalLineFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineFarEndLocation.setStatus('current')
opticalLineLaneChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 6), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel1.setStatus('current')
opticalLineLaneChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 7), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel2.setStatus('current')
opticalLineLaneChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 8), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel3.setStatus('current')
opticalLineLaneChannel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLaneChannel4.setStatus('current')
opticalLineLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 10), FspR7OpticalLanes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLanes.setStatus('current')
opticalLineChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 11), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineChannelBandwith.setStatus('current')
opticalLineChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 12), FspR7ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineChannelSpacing.setStatus('current')
opticalLineFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineFacilities.setStatus('current')
opticalLineSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 14), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineSecondaryStates.setStatus('current')
opticalLineConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 15), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineConnState.setStatus('current')
opticalLineLogicalInterfaceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineLogicalInterfaceAid.setStatus('current')
opticalLineOwnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineOwnerAid.setStatus('current')
opticalLineTransmitWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 18), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitWavelength.setStatus('current')
opticalLineTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 19), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitFrequency.setStatus('current')
opticalLineTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 20), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineTransmitChannel.setStatus('current')
opticalLineFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('km').setMaxAccess("readcreate")
if mibBuilder.loadTexts: opticalLineFiberLength.setStatus('current')
endOfOpticalLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineTable.setStatus('current')
endOfOpticalLineMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmt.setStatus('current')
alarmSysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1), )
if mibBuilder.loadTexts: alarmSysTable.setStatus('current')
alarmSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSysType"))
if mibBuilder.loadTexts: alarmSysEntry.setStatus('current')
alarmSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSysType.setStatus('current')
alarmSysSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysSeverity.setStatus('current')
alarmSysAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysAffect.setStatus('current')
alarmSysTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSysTimeStamp.setStatus('current')
endOfAlarmSysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSysTable.setStatus('current')
alarmSeveritySysTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3), )
if mibBuilder.loadTexts: alarmSeveritySysTable.setStatus('current')
alarmSeveritySysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entitySysShelfNo"), (0, "ADVA-FSPR7-MIB", "entitySysSlotNo"), (0, "ADVA-FSPR7-MIB", "entitySysPortNo"), (0, "ADVA-FSPR7-MIB", "entitySysExtNo"), (0, "ADVA-FSPR7-MIB", "entitySysClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeveritySysType"))
if mibBuilder.loadTexts: alarmSeveritySysEntry.setStatus('current')
alarmSeveritySysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeveritySysType.setStatus('current')
alarmSeveritySysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeveritySysValue.setStatus('current')
endOfAlarmSeveritySysTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeveritySysTable.setStatus('current')
alarmEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5), )
if mibBuilder.loadTexts: alarmEqptTable.setStatus('current')
alarmEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmEqptType"))
if mibBuilder.loadTexts: alarmEqptEntry.setStatus('current')
alarmEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEqptType.setStatus('current')
alarmEqptSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptSeverity.setStatus('current')
alarmEqptAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptAffect.setStatus('current')
alarmEqptTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 5, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptTimeStamp.setStatus('current')
endOfAlarmEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEqptTable.setStatus('current')
alarmFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7), )
if mibBuilder.loadTexts: alarmFacilityTable.setStatus('current')
alarmFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmFacilityType"))
if mibBuilder.loadTexts: alarmFacilityEntry.setStatus('current')
alarmFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmFacilityType.setStatus('current')
alarmFacilitySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilitySeverity.setStatus('current')
alarmFacilityAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityAffect.setStatus('current')
alarmFacilityTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFacilityTimeStamp.setStatus('current')
alarmSeverityFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8), )
if mibBuilder.loadTexts: alarmSeverityFacilityTable.setStatus('current')
alarmSeverityFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityFacilityType"))
if mibBuilder.loadTexts: alarmSeverityFacilityEntry.setStatus('current')
alarmSeverityFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityFacilityType.setStatus('current')
alarmSeverityFacilityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 8, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityFacilityValue.setStatus('current')
alarmTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9), )
if mibBuilder.loadTexts: alarmTerminPointTable.setStatus('current')
alarmTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmTerminPointType"))
if mibBuilder.loadTexts: alarmTerminPointEntry.setStatus('current')
alarmTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmTerminPointType.setStatus('current')
alarmTerminPointSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointSeverity.setStatus('current')
alarmTerminPointAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointAffect.setStatus('current')
alarmTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTerminPointTimeStamp.setStatus('current')
alarmSeverityTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10), )
if mibBuilder.loadTexts: alarmSeverityTerminPointTable.setStatus('current')
alarmSeverityTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityTerminPointType"))
if mibBuilder.loadTexts: alarmSeverityTerminPointEntry.setStatus('current')
alarmSeverityTerminPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityTerminPointType.setStatus('current')
alarmSeverityTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityTerminPointValue.setStatus('current')
alarmExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11), )
if mibBuilder.loadTexts: alarmExternalPortTable.setStatus('current')
alarmExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmExternalPortType"))
if mibBuilder.loadTexts: alarmExternalPortEntry.setStatus('current')
alarmExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmExternalPortType.setStatus('current')
alarmExternalPortSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortSeverity.setStatus('current')
alarmExternalPortAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortAffect.setStatus('current')
alarmExternalPortTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmExternalPortTimeStamp.setStatus('current')
alarmSeverityExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12), )
if mibBuilder.loadTexts: alarmSeverityExternalPortTable.setStatus('current')
alarmSeverityExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityExternalPortType"))
if mibBuilder.loadTexts: alarmSeverityExternalPortEntry.setStatus('current')
alarmSeverityExternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityExternalPortType.setStatus('current')
alarmSeverityExternalPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 12, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityExternalPortValue.setStatus('current')
endOfAlarmSeverityExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityExternalPortTable.setStatus('current')
alarmSeverityEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14), )
if mibBuilder.loadTexts: alarmSeverityEqptTable.setStatus('current')
alarmSeverityEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEqptType"))
if mibBuilder.loadTexts: alarmSeverityEqptEntry.setStatus('current')
alarmSeverityEqptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEqptType.setStatus('current')
alarmSeverityEqptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 14, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEqptValue.setStatus('current')
endOfAlarmSeverityEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEqptTable.setStatus('current')
alarmDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16), )
if mibBuilder.loadTexts: alarmDcnTable.setStatus('current')
alarmDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmDcnType"))
if mibBuilder.loadTexts: alarmDcnEntry.setStatus('current')
alarmDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmDcnType.setStatus('current')
alarmDcnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnSeverity.setStatus('current')
alarmDcnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnAffect.setStatus('current')
alarmDcnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 16, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDcnTimeStamp.setStatus('current')
endOfAlarmDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmDcnTable.setStatus('current')
alarmSeverityDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18), )
if mibBuilder.loadTexts: alarmSeverityDcnTable.setStatus('current')
alarmSeverityDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityDcnType"))
if mibBuilder.loadTexts: alarmSeverityDcnEntry.setStatus('current')
alarmSeverityDcnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityDcnType.setStatus('current')
alarmSeverityDcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 18, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityDcnValue.setStatus('current')
endOfAlarmSeverityDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityDcnTable.setStatus('current')
alarmEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20), )
if mibBuilder.loadTexts: alarmEnvTable.setStatus('current')
alarmEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmEnvType"))
if mibBuilder.loadTexts: alarmEnvEntry.setStatus('current')
alarmEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmEnvType.setStatus('current')
alarmEnvSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvSeverity.setStatus('current')
alarmEnvAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvAffect.setStatus('current')
alarmEnvTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 20, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEnvTimeStamp.setStatus('current')
endOfAlarmEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmEnvTable.setStatus('current')
alarmSeverityEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22), )
if mibBuilder.loadTexts: alarmSeverityEnvTable.setStatus('current')
alarmSeverityEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEnvPortNo"), (0, "ADVA-FSPR7-MIB", "entityEnvExtNo"), (0, "ADVA-FSPR7-MIB", "entityEnvClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityEnvType"))
if mibBuilder.loadTexts: alarmSeverityEnvEntry.setStatus('current')
alarmSeverityEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityEnvType.setStatus('current')
alarmSeverityEnvValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 22, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityEnvValue.setStatus('current')
endOfAlarmSeverityEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityEnvTable.setStatus('current')
alarmContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24), )
if mibBuilder.loadTexts: alarmContainerTable.setStatus('current')
alarmContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmContainerType"))
if mibBuilder.loadTexts: alarmContainerEntry.setStatus('current')
alarmContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmContainerType.setStatus('current')
alarmContainerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerSeverity.setStatus('current')
alarmContainerAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerAffect.setStatus('current')
alarmContainerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmContainerTimeStamp.setStatus('current')
endOfAlarmContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmContainerTable.setStatus('current')
alarmSeverityContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26), )
if mibBuilder.loadTexts: alarmSeverityContainerTable.setStatus('current')
alarmSeverityContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityContainerType"))
if mibBuilder.loadTexts: alarmSeverityContainerEntry.setStatus('current')
alarmSeverityContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityContainerType.setStatus('current')
alarmSeverityContainerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 26, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityContainerValue.setStatus('current')
endOfAlarmSeverityContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityContainerTable.setStatus('current')
alarmOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28), )
if mibBuilder.loadTexts: alarmOpticalMuxTable.setStatus('current')
alarmOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmOpticalMuxType"))
if mibBuilder.loadTexts: alarmOpticalMuxEntry.setStatus('current')
alarmOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmOpticalMuxType.setStatus('current')
alarmOpticalMuxSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxSeverity.setStatus('current')
alarmOpticalMuxAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxAffect.setStatus('current')
alarmOpticalMuxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 28, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOpticalMuxTimeStamp.setStatus('current')
endOfAlarmOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmOpticalMuxTable.setStatus('current')
alarmSeverityOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30), )
if mibBuilder.loadTexts: alarmSeverityOpticalMuxTable.setStatus('current')
alarmSeverityOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityOpticalMuxType"))
if mibBuilder.loadTexts: alarmSeverityOpticalMuxEntry.setStatus('current')
alarmSeverityOpticalMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityOpticalMuxType.setStatus('current')
alarmSeverityOpticalMuxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 30, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityOpticalMuxValue.setStatus('current')
endOfAlarmSeverityOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityOpticalMuxTable.setStatus('current')
alarmShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32), )
if mibBuilder.loadTexts: alarmShelfConnTable.setStatus('current')
alarmShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmShelfConnType"))
if mibBuilder.loadTexts: alarmShelfConnEntry.setStatus('current')
alarmShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmShelfConnType.setStatus('current')
alarmShelfConnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnSeverity.setStatus('current')
alarmShelfConnAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnAffect.setStatus('current')
alarmShelfConnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 32, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfConnTimeStamp.setStatus('current')
endOfAlarmShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmShelfConnTable.setStatus('current')
alarmSeverityShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34), )
if mibBuilder.loadTexts: alarmSeverityShelfConnTable.setStatus('current')
alarmSeverityShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityShelfConnType"))
if mibBuilder.loadTexts: alarmSeverityShelfConnEntry.setStatus('current')
alarmSeverityShelfConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityShelfConnType.setStatus('current')
alarmSeverityShelfConnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 34, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityShelfConnValue.setStatus('current')
endOfAlarmSeverityShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmSeverityShelfConnTable.setStatus('current')
alarmNtpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36), )
if mibBuilder.loadTexts: alarmNtpIPv4Table.setStatus('current')
alarmNtpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"), (0, "ADVA-FSPR7-MIB", "alarmNtpIPv4Type"))
if mibBuilder.loadTexts: alarmNtpIPv4Entry.setStatus('current')
alarmNtpIPv4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmNtpIPv4Type.setStatus('current')
alarmNtpIPv4Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4Severity.setStatus('current')
alarmNtpIPv4Affect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4Affect.setStatus('current')
alarmNtpIPv4TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 36, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv4TimeStamp.setStatus('current')
alarmSeverityNtpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38), )
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Table.setStatus('current')
alarmSeverityNtpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"), (0, "ADVA-FSPR7-MIB", "alarmSeverityNtpIPv4Type"))
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Entry.setStatus('current')
alarmSeverityNtpIPv4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Type.setStatus('current')
alarmSeverityNtpIPv4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 38, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityNtpIPv4Value.setStatus('current')
alarmNtpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40), )
if mibBuilder.loadTexts: alarmNtpIPv6Table.setStatus('current')
alarmNtpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"), (0, "ADVA-FSPR7-MIB", "alarmNtpIPv6Type"))
if mibBuilder.loadTexts: alarmNtpIPv6Entry.setStatus('current')
alarmNtpIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmNtpIPv6Type.setStatus('current')
alarmNtpIPv6Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6Severity.setStatus('current')
alarmNtpIPv6Affect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6Affect.setStatus('current')
alarmNtpIPv6TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 40, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNtpIPv6TimeStamp.setStatus('current')
alarmSeverityNtpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42), )
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Table.setStatus('current')
alarmSeverityNtpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"), (0, "ADVA-FSPR7-MIB", "alarmSeverityNtpIPv6Type"))
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Entry.setStatus('current')
alarmSeverityNtpIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Type.setStatus('current')
alarmSeverityNtpIPv6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 42, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityNtpIPv6Value.setStatus('current')
alarmProfileSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1), )
if mibBuilder.loadTexts: alarmProfileSeverityTable.setStatus('current')
alarmProfileSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmProfileSeverityAidType"), (0, "ADVA-FSPR7-MIB", "alarmProfileSeverityType"))
if mibBuilder.loadTexts: alarmProfileSeverityEntry.setStatus('current')
alarmProfileSeverityAidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 1), FspR7AidType())
if mibBuilder.loadTexts: alarmProfileSeverityAidType.setStatus('current')
alarmProfileSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 2), FspR7AlarmProfileList())
if mibBuilder.loadTexts: alarmProfileSeverityType.setStatus('current')
alarmProfileSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 3), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmProfileSeverityValue.setStatus('current')
alarmProfileSeverityDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 1, 1, 4), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProfileSeverityDefaultValue.setStatus('current')
endOfAlarmProfileSeverityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfileSeverityTable.setStatus('current')
endOfAlarmProfile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 100, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarmProfile.setStatus('current')
serviceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 1000), ServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: serviceAffecting.setStatus('current')
endOfAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAlarm.setStatus('current')
fspR7CreationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 1))
if mibBuilder.loadTexts: fspR7CreationTrap.setStatus('current')
fspR7DeletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 2))
if mibBuilder.loadTexts: fspR7DeletionTrap.setStatus('current')
fspR7StateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 3))
if mibBuilder.loadTexts: fspR7StateChangeTrap.setStatus('current')
fspR7ObjectChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 4))
if mibBuilder.loadTexts: fspR7ObjectChangeTrap.setStatus('current')
alarmTerminalLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 5))
if mibBuilder.loadTexts: alarmTerminalLoopback.setStatus('current')
alarmOosDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 6))
if mibBuilder.loadTexts: alarmOosDisabled.setStatus('current')
alarmOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 7))
if mibBuilder.loadTexts: alarmOosManagement.setStatus('current')
alarmOosMaintenance = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 8))
if mibBuilder.loadTexts: alarmOosMaintenance.setStatus('current')
alarmOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 9))
if mibBuilder.loadTexts: alarmOosAins.setStatus('current')
alarmRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10))
if mibBuilder.loadTexts: alarmRemoved.setStatus('current')
alarmLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 11))
if mibBuilder.loadTexts: alarmLossOfSignal.setStatus('current')
alarmOptInputPwrReceivedTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 12))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooLow.setStatus('current')
alarmOptInputPwrReceivedTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 13))
if mibBuilder.loadTexts: alarmOptInputPwrReceivedTooHigh.setStatus('current')
alarmLaserTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 14))
if mibBuilder.loadTexts: alarmLaserTemperatureTooHigh.setStatus('current')
alarmLaserTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 15))
if mibBuilder.loadTexts: alarmLaserTemperatureTooLow.setStatus('current')
alarmOptOutputPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 16))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooLow.setStatus('current')
alarmOptOutputPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 17))
if mibBuilder.loadTexts: alarmOptOutputPowerTransTooHigh.setStatus('current')
alarmAutoShutdownToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 18))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTemp.setStatus('current')
alarmAutoShutdownToHighTxPwr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 19))
if mibBuilder.loadTexts: alarmAutoShutdownToHighTxPwr.setStatus('current')
alarmLaserEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 20))
if mibBuilder.loadTexts: alarmLaserEndOfLife.setStatus('current')
alarmServerSignalFailureVf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 21))
if mibBuilder.loadTexts: alarmServerSignalFailureVf.setStatus('current')
alarmEqualizationProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 22))
if mibBuilder.loadTexts: alarmEqualizationProgress.setStatus('current')
alarmUPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 23))
if mibBuilder.loadTexts: alarmUPortFailure.setStatus('current')
alarmAutoShutdownBlock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 24))
if mibBuilder.loadTexts: alarmAutoShutdownBlock.setStatus('current')
alarmAutoPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 25))
if mibBuilder.loadTexts: alarmAutoPowerShutdown.setStatus('current')
alarmConfOutPowerTransTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 26))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooHigh.setStatus('current')
alarmConfOutPowerTransTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 27))
if mibBuilder.loadTexts: alarmConfOutPowerTransTooLow.setStatus('current')
alarmOptSignalFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 28))
if mibBuilder.loadTexts: alarmOptSignalFailure.setStatus('current')
alarmDsbdChannelPowerTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 29))
if mibBuilder.loadTexts: alarmDsbdChannelPowerTooHigh.setStatus('current')
alarmLossOfSignalCPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 30))
if mibBuilder.loadTexts: alarmLossOfSignalCPort.setStatus('current')
alarmLossOfSignalNPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 31))
if mibBuilder.loadTexts: alarmLossOfSignalNPort.setStatus('current')
alarmOutputPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 32))
if mibBuilder.loadTexts: alarmOutputPowerFault.setStatus('current')
alarmEqlzAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 33))
if mibBuilder.loadTexts: alarmEqlzAdjust.setStatus('current')
alarmAmpFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 34))
if mibBuilder.loadTexts: alarmAmpFailure.setStatus('current')
alarmEqptProvMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 35))
if mibBuilder.loadTexts: alarmEqptProvMismatch.setStatus('current')
alarmBackreflectionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 36))
if mibBuilder.loadTexts: alarmBackreflectionTooHigh.setStatus('current')
transientEqlzStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 37))
if mibBuilder.loadTexts: transientEqlzStart.setStatus('current')
transientEqlzFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 38))
if mibBuilder.loadTexts: transientEqlzFailed.setStatus('current')
transientEqlzCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 39))
if mibBuilder.loadTexts: transientEqlzCompleted.setStatus('current')
transientEqlzRequestDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 40))
if mibBuilder.loadTexts: transientEqlzRequestDenied.setStatus('current')
transientEqlzNotRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 41))
if mibBuilder.loadTexts: transientEqlzNotRequired.setStatus('current')
transientEqlzProcessPassed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 42))
if mibBuilder.loadTexts: transientEqlzProcessPassed.setStatus('current')
transientEqlzProcessWait = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 43))
if mibBuilder.loadTexts: transientEqlzProcessWait.setStatus('current')
transientPmSnapshotStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 44))
if mibBuilder.loadTexts: transientPmSnapshotStarted.setStatus('current')
transientEqlzAuto = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 45))
if mibBuilder.loadTexts: transientEqlzAuto.setStatus('current')
transientEqlzRamanAdjust = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 46))
if mibBuilder.loadTexts: transientEqlzRamanAdjust.setStatus('current')
alarmFiberConnLos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 48))
if mibBuilder.loadTexts: alarmFiberConnLos.setStatus('current')
alarmFiberConnOptFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 49))
if mibBuilder.loadTexts: alarmFiberConnOptFault.setStatus('current')
alarmFiberConnInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 50))
if mibBuilder.loadTexts: alarmFiberConnInvalid.setStatus('current')
alarmFiberConnMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 51))
if mibBuilder.loadTexts: alarmFiberConnMismatch.setStatus('current')
alarmFiberConnCommError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 52))
if mibBuilder.loadTexts: alarmFiberConnCommError.setStatus('current')
alarmFiberConnProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 53))
if mibBuilder.loadTexts: alarmFiberConnProtocolFailure.setStatus('current')
alarmFiberConnDataFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 54))
if mibBuilder.loadTexts: alarmFiberConnDataFailure.setStatus('current')
alarmFiberAttenuationHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 55))
if mibBuilder.loadTexts: alarmFiberAttenuationHigh.setStatus('current')
transientFiberConnStatChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 56))
if mibBuilder.loadTexts: transientFiberConnStatChange.setStatus('current')
alarmLaserBiasCurrAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 57))
if mibBuilder.loadTexts: alarmLaserBiasCurrAbnormal.setStatus('current')
alarmFiberConnInvalidTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 58))
if mibBuilder.loadTexts: alarmFiberConnInvalidTx.setStatus('current')
alarmFiberConnMismatchTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 59))
if mibBuilder.loadTexts: alarmFiberConnMismatchTx.setStatus('current')
alarmFiberAttenuationHighTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 60))
if mibBuilder.loadTexts: alarmFiberAttenuationHighTx.setStatus('current')
alarmLaserFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 61))
if mibBuilder.loadTexts: alarmLaserFailure.setStatus('current')
alarmLossOfReceiverClockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 62))
if mibBuilder.loadTexts: alarmLossOfReceiverClockRecovery.setStatus('current')
alarmFiberAttenuationCond = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 63))
if mibBuilder.loadTexts: alarmFiberAttenuationCond.setStatus('current')
alarmChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 64))
if mibBuilder.loadTexts: alarmChannelMismatch.setStatus('current')
alarmAlarmIndicationSignalLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 65))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLine.setStatus('current')
alarmAlarmIndicationSignalLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 66))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalLowerOrderPath.setStatus('current')
alarmAlarmIndicationSignalOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 67))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOdu.setStatus('current')
alarmAlarmIndicationSignalOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 68))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOpu.setStatus('current')
alarmAlarmIndicationSignalOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 69))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOtu.setStatus('current')
alarmAlarmIndicationSignalHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 70))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalHigherOrderPath.setStatus('current')
alarmAlarmIndicationSignalOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 71))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmA.setStatus('current')
alarmAlarmIndicationSignalOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 72))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmB.setStatus('current')
alarmAlarmIndicationSignalOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 73))
if mibBuilder.loadTexts: alarmAlarmIndicationSignalOduTcmC.setStatus('current')
alarmVirtualChannelAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 74))
if mibBuilder.loadTexts: alarmVirtualChannelAis.setStatus('current')
alarmAmplifierAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 75))
if mibBuilder.loadTexts: alarmAmplifierAbnormal.setStatus('current')
alarmAutomaticPowerReduction = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 76))
if mibBuilder.loadTexts: alarmAutomaticPowerReduction.setStatus('current')
alarmAutomaticPowerReductionForEyeSafety = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 77))
if mibBuilder.loadTexts: alarmAutomaticPowerReductionForEyeSafety.setStatus('current')
transientAlpSettingFinished = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 78))
if mibBuilder.loadTexts: transientAlpSettingFinished.setStatus('current')
transientAlpSettingStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 79))
if mibBuilder.loadTexts: transientAlpSettingStarted.setStatus('current')
alarmApsConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 80))
if mibBuilder.loadTexts: alarmApsConfigMismatch.setStatus('current')
alarmApsProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 81))
if mibBuilder.loadTexts: alarmApsProtocolFailure.setStatus('current')
alarmAseLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 82))
if mibBuilder.loadTexts: alarmAseLow.setStatus('current')
alarmAseTableGenFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 83))
if mibBuilder.loadTexts: alarmAseTableGenFailLow.setStatus('current')
alarmAseTableGenFailHighBackreflection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 84))
if mibBuilder.loadTexts: alarmAseTableGenFailHighBackreflection.setStatus('current')
alarmAseTableGenFailOscMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 85))
if mibBuilder.loadTexts: alarmAseTableGenFailOscMissing.setStatus('current')
alarmAseTableGenFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 86))
if mibBuilder.loadTexts: alarmAseTableGenFailPilot.setStatus('current')
alarmAseTableGenFailSignalinput = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 87))
if mibBuilder.loadTexts: alarmAseTableGenFailSignalinput.setStatus('current')
alarmAseTableNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 88))
if mibBuilder.loadTexts: alarmAseTableNotAvailable.setStatus('current')
alarmAseTableGenProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 89))
if mibBuilder.loadTexts: alarmAseTableGenProgress.setStatus('current')
alarmEncryptionPortAuthPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 90))
if mibBuilder.loadTexts: alarmEncryptionPortAuthPasswdMissing.setStatus('current')
transientCryptoAuthPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 91))
if mibBuilder.loadTexts: transientCryptoAuthPasswdChanged.setStatus('current')
alarmBackwardDefectIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 92))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOdu.setStatus('current')
alarmBackwardDefectIndicationOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 93))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOtu.setStatus('current')
alarmBackwardDefectIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 94))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmA.setStatus('current')
alarmBackwardDefectIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 95))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmB.setStatus('current')
alarmBackwardDefectIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 96))
if mibBuilder.loadTexts: alarmBackwardDefectIndicationOduTcmC.setStatus('current')
alarmTopologyDataCalculationInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 97))
if mibBuilder.loadTexts: alarmTopologyDataCalculationInProgress.setStatus('current')
transientDispersionCompFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 98))
if mibBuilder.loadTexts: transientDispersionCompFailed.setStatus('current')
alarmDispertionTunningCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 99))
if mibBuilder.loadTexts: alarmDispertionTunningCondition.setStatus('current')
alarmLossOfCharSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 100))
if mibBuilder.loadTexts: alarmLossOfCharSync.setStatus('current')
alarmLossOfCharSyncFromFarEnd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 101))
if mibBuilder.loadTexts: alarmLossOfCharSyncFromFarEnd.setStatus('current')
transientCryptoAuthPasswdInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 102))
if mibBuilder.loadTexts: transientCryptoAuthPasswdInvalid.setStatus('current')
alarmEncryptionPortEncryptionSwitchOffEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 103))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchOffEnabled.setStatus('current')
alarmEncryptionModuleCryPasswdMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 104))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdMissing.setStatus('current')
transientCryptoPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 105))
if mibBuilder.loadTexts: transientCryptoPasswdChanged.setStatus('current')
transientCryptoRtf = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 106))
if mibBuilder.loadTexts: transientCryptoRtf.setStatus('current')
alarmEncryptionModuleSelfTestStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 107))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestStarted.setStatus('current')
alarmEncryptionPortEncryptionSwitchedOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 108))
if mibBuilder.loadTexts: alarmEncryptionPortEncryptionSwitchedOff.setStatus('current')
alarmOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 109))
if mibBuilder.loadTexts: alarmOpuClientSignalFail.setStatus('current')
alarmDatabaseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 110))
if mibBuilder.loadTexts: alarmDatabaseMismatch.setStatus('current')
alarmDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 111))
if mibBuilder.loadTexts: alarmDatabaseFailure.setStatus('current')
alarmDatabaseNcuMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 112))
if mibBuilder.loadTexts: alarmDatabaseNcuMismatch.setStatus('current')
alarmDbReplicationIncompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 113))
if mibBuilder.loadTexts: alarmDbReplicationIncompleted.setStatus('current')
alarmDatabaseVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 114))
if mibBuilder.loadTexts: alarmDatabaseVersionMismatch.setStatus('current')
alarmXfpDecisionThresSetFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 115))
if mibBuilder.loadTexts: alarmXfpDecisionThresSetFailed.setStatus('current')
alarmDuplexLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 116))
if mibBuilder.loadTexts: alarmDuplexLinkFailure.setStatus('current')
transientFarEndDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 117))
if mibBuilder.loadTexts: transientFarEndDyingGasp.setStatus('current')
alarmSingleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 118))
if mibBuilder.loadTexts: alarmSingleFanFailure.setStatus('current')
alarmMultipleFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 119))
if mibBuilder.loadTexts: alarmMultipleFanFailure.setStatus('current')
alarmLossOfSignalTransmitter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 120))
if mibBuilder.loadTexts: alarmLossOfSignalTransmitter.setStatus('current')
transientFarEndChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 121))
if mibBuilder.loadTexts: transientFarEndChanged.setStatus('current')
alarmFarEndIpAddressUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 122))
if mibBuilder.loadTexts: alarmFarEndIpAddressUnknown.setStatus('current')
alarmFarEndCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 123))
if mibBuilder.loadTexts: alarmFarEndCommFailure.setStatus('current')
transientTopologyDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 124))
if mibBuilder.loadTexts: transientTopologyDataInvalid.setStatus('current')
alarmBackupForcedToHalt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 125))
if mibBuilder.loadTexts: alarmBackupForcedToHalt.setStatus('current')
transientForcedReboot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 126))
if mibBuilder.loadTexts: transientForcedReboot.setStatus('current')
alarmFacilityForcedOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 127))
if mibBuilder.loadTexts: alarmFacilityForcedOn.setStatus('current')
alarmFwdAseTableFailPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 128))
if mibBuilder.loadTexts: alarmFwdAseTableFailPilot.setStatus('current')
alarmFwdAseTableOnPilot = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 129))
if mibBuilder.loadTexts: alarmFwdAseTableOnPilot.setStatus('current')
transientCryptoFwpUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 130))
if mibBuilder.loadTexts: transientCryptoFwpUpdate.setStatus('current')
alarmEncryptionModuleFwpUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 131))
if mibBuilder.loadTexts: alarmEncryptionModuleFwpUpdateEnabled.setStatus('current')
alarmFwpMismatchDownloadNotServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 132))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadNotServiceAffecting.setStatus('current')
alarmFwpMismatchDownloadServiceAffecting = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 133))
if mibBuilder.loadTexts: alarmFwpMismatchDownloadServiceAffecting.setStatus('current')
transientCryptoFwpRevChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 134))
if mibBuilder.loadTexts: transientCryptoFwpRevChanged.setStatus('current')
alarmGainTiltNotSettable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 135))
if mibBuilder.loadTexts: alarmGainTiltNotSettable.setStatus('current')
alarmHighBer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 136))
if mibBuilder.loadTexts: alarmHighBer.setStatus('current')
alarmReceiverOverloadProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 137))
if mibBuilder.loadTexts: alarmReceiverOverloadProtection.setStatus('current')
alarmHwInitializing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 138))
if mibBuilder.loadTexts: alarmHwInitializing.setStatus('current')
alarmHwOprReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 139))
if mibBuilder.loadTexts: alarmHwOprReachedHT.setStatus('current')
alarmHwDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 140))
if mibBuilder.loadTexts: alarmHwDegrade.setStatus('current')
alarmHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 141))
if mibBuilder.loadTexts: alarmHwFailure.setStatus('current')
alarmSwitchtoProtectionInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 142))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibited.setStatus('current')
alarmSwitchtoWorkingInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 143))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibited.setStatus('current')
transientIntrusionRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 144))
if mibBuilder.loadTexts: transientIntrusionRx.setStatus('current')
transientIntrusionTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 145))
if mibBuilder.loadTexts: transientIntrusionTx.setStatus('current')
transientEncryptionPortSingleKeyExchgFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 146))
if mibBuilder.loadTexts: transientEncryptionPortSingleKeyExchgFailed.setStatus('current')
transientCryptoKeyExchgFailCondClr = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 147))
if mibBuilder.loadTexts: transientCryptoKeyExchgFailCondClr.setStatus('current')
alarmEncryptionPortKeyInitExchgMissed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 148))
if mibBuilder.loadTexts: alarmEncryptionPortKeyInitExchgMissed.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedIs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 149))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedIs.setStatus('current')
alarmEncryptionPortMaxKeyExchgFailuresReachedOos = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 150))
if mibBuilder.loadTexts: alarmEncryptionPortMaxKeyExchgFailuresReachedOos.setStatus('current')
alarmEncryptionPortKeyExchangedForced = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 151))
if mibBuilder.loadTexts: alarmEncryptionPortKeyExchangedForced.setStatus('current')
alarmLaserOnDelay = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 152))
if mibBuilder.loadTexts: alarmLaserOnDelay.setStatus('current')
alarmLockedDefectOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 153))
if mibBuilder.loadTexts: alarmLockedDefectOdu.setStatus('current')
alarmLockedDefectOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 154))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmA.setStatus('current')
alarmLockedDefectOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 155))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmB.setStatus('current')
alarmLockedDefectOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 156))
if mibBuilder.loadTexts: alarmLockedDefectOduTcmC.setStatus('current')
alarmLinkControlProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 157))
if mibBuilder.loadTexts: alarmLinkControlProtocolFailure.setStatus('current')
alarmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 158))
if mibBuilder.loadTexts: alarmLinkDown.setStatus('current')
alarmAutoShutdownSendingAisLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 159))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisLine.setStatus('current')
alarmAutoShutdownSendingAisOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 160))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOdu.setStatus('current')
alarmAutoShutdownSendingAisOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 161))
if mibBuilder.loadTexts: alarmAutoShutdownSendingAisOpu.setStatus('current')
alarmClientFailForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 162))
if mibBuilder.loadTexts: alarmClientFailForwarding.setStatus('current')
alarmAutoShutdownAls = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 163))
if mibBuilder.loadTexts: alarmAutoShutdownAls.setStatus('current')
alarmAutoAmpShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 164))
if mibBuilder.loadTexts: alarmAutoAmpShutdown.setStatus('current')
alarmAutoShutdownAmpAps = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 165))
if mibBuilder.loadTexts: alarmAutoShutdownAmpAps.setStatus('current')
alarmAseTableBuild = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 166))
if mibBuilder.loadTexts: alarmAseTableBuild.setStatus('current')
alarmAutoShutdownOpuClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 167))
if mibBuilder.loadTexts: alarmAutoShutdownOpuClientSignalFail.setStatus('current')
alarmAutoShutdownSendingEPC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 168))
if mibBuilder.loadTexts: alarmAutoShutdownSendingEPC.setStatus('current')
alarmAutoShutdownSendingLckOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 169))
if mibBuilder.loadTexts: alarmAutoShutdownSendingLckOdu.setStatus('current')
alarmAutoShutdownSendingOciOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 170))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOdu.setStatus('current')
alarmAutoShutdownLaserOffDueToErrFwd = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 171))
if mibBuilder.loadTexts: alarmAutoShutdownLaserOffDueToErrFwd.setStatus('current')
alarmAutoShutdownTxRxLasersDueToHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 172))
if mibBuilder.loadTexts: alarmAutoShutdownTxRxLasersDueToHighTemp.setStatus('current')
alarmLocalFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 173))
if mibBuilder.loadTexts: alarmLocalFault.setStatus('current')
alarmLocalOscLevelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 174))
if mibBuilder.loadTexts: alarmLocalOscLevelAbnormal.setStatus('current')
alarmLossOfGfpFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 175))
if mibBuilder.loadTexts: alarmLossOfGfpFrame.setStatus('current')
alarmLossOfFrameMux = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 176))
if mibBuilder.loadTexts: alarmLossOfFrameMux.setStatus('current')
alarmLossOfFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 177))
if mibBuilder.loadTexts: alarmLossOfFrameOtu.setStatus('current')
alarmLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 178))
if mibBuilder.loadTexts: alarmLossOfFrame.setStatus('current')
alarmLossOfFrameLossOfMultiFrameOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 179))
if mibBuilder.loadTexts: alarmLossOfFrameLossOfMultiFrameOdu.setStatus('current')
alarmLossOfLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 180))
if mibBuilder.loadTexts: alarmLossOfLane.setStatus('current')
alarmLossofMultiframeLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 181))
if mibBuilder.loadTexts: alarmLossofMultiframeLowerOrderPath.setStatus('current')
alarmLossOfMultiFrameOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 182))
if mibBuilder.loadTexts: alarmLossOfMultiFrameOtu.setStatus('current')
alarmLossofMultiframeHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 183))
if mibBuilder.loadTexts: alarmLossofMultiframeHigherOrderPath.setStatus('current')
alarmLossOfPointerLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 184))
if mibBuilder.loadTexts: alarmLossOfPointerLowerOrderPath.setStatus('current')
alarmLossOfPointerHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 185))
if mibBuilder.loadTexts: alarmLossOfPointerHigherOrderPath.setStatus('current')
alarmLosAttProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 186))
if mibBuilder.loadTexts: alarmLosAttProgress.setStatus('current')
alarmLossOsc = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 187))
if mibBuilder.loadTexts: alarmLossOsc.setStatus('current')
alarmGfpLossOfClientSig = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 188))
if mibBuilder.loadTexts: alarmGfpLossOfClientSig.setStatus('current')
alarmLoopbackError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 189))
if mibBuilder.loadTexts: alarmLoopbackError.setStatus('current')
alarmFacilityLoopback = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 190))
if mibBuilder.loadTexts: alarmFacilityLoopback.setStatus('current')
alarmLossofTandemConnectionOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 191))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmA.setStatus('current')
alarmLossofTandemConnectionOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 192))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmB.setStatus('current')
alarmLossofTandemConnectionOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 193))
if mibBuilder.loadTexts: alarmLossofTandemConnectionOduTcmC.setStatus('current')
alarmMansw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 194))
if mibBuilder.loadTexts: alarmMansw.setStatus('current')
transientManualWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 195))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorking.setStatus('current')
transientManualWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 196))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtection.setStatus('current')
alarmEquipmentNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 197))
if mibBuilder.loadTexts: alarmEquipmentNotAccepted.setStatus('current')
alarmEquipmentNotApproved = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 198))
if mibBuilder.loadTexts: alarmEquipmentNotApproved.setStatus('current')
alarmCapabilityLevelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 199))
if mibBuilder.loadTexts: alarmCapabilityLevelMismatch.setStatus('current')
alarmEquipmentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 200))
if mibBuilder.loadTexts: alarmEquipmentMismatch.setStatus('current')
alarmEquipmentNotSupportedByPhysicalLayer = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 201))
if mibBuilder.loadTexts: alarmEquipmentNotSupportedByPhysicalLayer.setStatus('current')
alarmMeaSwRevision = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 202))
if mibBuilder.loadTexts: alarmMeaSwRevision.setStatus('current')
alarmMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 203))
if mibBuilder.loadTexts: alarmMismatch.setStatus('current')
alarmMidstageFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 204))
if mibBuilder.loadTexts: alarmMidstageFault.setStatus('current')
alarmMultiplexStructureIdentifierMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 205))
if mibBuilder.loadTexts: alarmMultiplexStructureIdentifierMismatchOPU.setStatus('current')
alarmBackupNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 206))
if mibBuilder.loadTexts: alarmBackupNotResponding.setStatus('current')
alarmOpenConnectionIndicationOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 207))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOdu.setStatus('current')
alarmOpenConnectionIndicationOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 208))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmA.setStatus('current')
alarmOpenConnectionIndicationOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 209))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmB.setStatus('current')
alarmOpenConnectionIndicationOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 210))
if mibBuilder.loadTexts: alarmOpenConnectionIndicationOduTcmC.setStatus('current')
alarmOduTribMsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 211))
if mibBuilder.loadTexts: alarmOduTribMsiMismatch.setStatus('current')
alarmTransmitterDisabledOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 212))
if mibBuilder.loadTexts: alarmTransmitterDisabledOff.setStatus('current')
alarmReceiverDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 213))
if mibBuilder.loadTexts: alarmReceiverDisabled.setStatus('current')
alarmOpmAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 214))
if mibBuilder.loadTexts: alarmOpmAbnormalCondition.setStatus('current')
alarmFaultOnOpm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 215))
if mibBuilder.loadTexts: alarmFaultOnOpm.setStatus('current')
alarmThresOptPowerCtrlFailureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 216))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureHigh.setStatus('current')
alarmThresOptPowerCtrlFailureLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 217))
if mibBuilder.loadTexts: alarmThresOptPowerCtrlFailureLow.setStatus('current')
alarmTxPowerLimited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 218))
if mibBuilder.loadTexts: alarmTxPowerLimited.setStatus('current')
alarmOscOpticalPowerControlFailHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 219))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailHigh.setStatus('current')
alarmOscOpticalPowerControlFailLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 220))
if mibBuilder.loadTexts: alarmOscOpticalPowerControlFailLow.setStatus('current')
alarmOTDRMeasuringinProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 221))
if mibBuilder.loadTexts: alarmOTDRMeasuringinProgress.setStatus('current')
alarmEncryptionModuleCryPasswdError = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 222))
if mibBuilder.loadTexts: alarmEncryptionModuleCryPasswdError.setStatus('current')
alarmPeerLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 223))
if mibBuilder.loadTexts: alarmPeerLink.setStatus('current')
alarmPilotReceiveLevelHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 224))
if mibBuilder.loadTexts: alarmPilotReceiveLevelHigh.setStatus('current')
alarmLossOfPilotSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 225))
if mibBuilder.loadTexts: alarmLossOfPilotSignal.setStatus('current')
alarmPayloadMismatchGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 226))
if mibBuilder.loadTexts: alarmPayloadMismatchGfp.setStatus('current')
alarmPayloadMismatchLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 227))
if mibBuilder.loadTexts: alarmPayloadMismatchLowerOrderPath.setStatus('current')
alarmPayloadMismatchOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 228))
if mibBuilder.loadTexts: alarmPayloadMismatchOPU.setStatus('current')
alarmPayloadMismatchHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 229))
if mibBuilder.loadTexts: alarmPayloadMismatchHigherOrderPath.setStatus('current')
alarmProvPayloadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 230))
if mibBuilder.loadTexts: alarmProvPayloadMismatch.setStatus('current')
alarmPrbsLossOfSeqSynch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 231))
if mibBuilder.loadTexts: alarmPrbsLossOfSeqSynch.setStatus('current')
alarmPrbsRcvActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 232))
if mibBuilder.loadTexts: alarmPrbsRcvActivated.setStatus('current')
alarmPrbsTrmtActivated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 233))
if mibBuilder.loadTexts: alarmPrbsTrmtActivated.setStatus('current')
alarmProtectionNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 234))
if mibBuilder.loadTexts: alarmProtectionNotAvailable.setStatus('current')
alarmPowerSupplyUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 235))
if mibBuilder.loadTexts: alarmPowerSupplyUnitFailure.setStatus('current')
alarmMaxPowerConsProvModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 236))
if mibBuilder.loadTexts: alarmMaxPowerConsProvModulesToHigh.setStatus('current')
alarmMaxPowerConsEquipModulesToHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 237))
if mibBuilder.loadTexts: alarmMaxPowerConsEquipModulesToHigh.setStatus('current')
alarmPowerMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 238))
if mibBuilder.loadTexts: alarmPowerMissing.setStatus('current')
alarmRemoteDefectIndicationLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 239))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLine.setStatus('current')
alarmRemoteDefectIndicationLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 240))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationLowerOrderPath.setStatus('current')
alarmRemoteDefectIndicationHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 241))
if mibBuilder.loadTexts: alarmRemoteDefectIndicationHigherOrderPath.setStatus('current')
transientPmSnapshotEnded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 242))
if mibBuilder.loadTexts: transientPmSnapshotEnded.setStatus('current')
alarmDcnCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 243))
if mibBuilder.loadTexts: alarmDcnCommunicationFail.setStatus('current')
alarmNtpForSchedEqlzRequired = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 244))
if mibBuilder.loadTexts: alarmNtpForSchedEqlzRequired.setStatus('current')
alarmSignalDegradeOlm = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 245))
if mibBuilder.loadTexts: alarmSignalDegradeOlm.setStatus('current')
alarmSignalDegradeLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 246))
if mibBuilder.loadTexts: alarmSignalDegradeLine.setStatus('current')
alarmSignalDegradationonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 247))
if mibBuilder.loadTexts: alarmSignalDegradationonLinkVector.setStatus('current')
alarmSignalDegradeOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 248))
if mibBuilder.loadTexts: alarmSignalDegradeOdu.setStatus('current')
alarmSignalDegradeOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 249))
if mibBuilder.loadTexts: alarmSignalDegradeOtu.setStatus('current')
alarmPcsSignalDegrade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 250))
if mibBuilder.loadTexts: alarmPcsSignalDegrade.setStatus('current')
alarmSignalDegradeScn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 251))
if mibBuilder.loadTexts: alarmSignalDegradeScn.setStatus('current')
alarmSignalDegradeOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 252))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmA.setStatus('current')
alarmSignalDegradeOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 253))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmB.setStatus('current')
alarmSignalDegradeOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 254))
if mibBuilder.loadTexts: alarmSignalDegradeOduTcmC.setStatus('current')
alarmEncryptionModuleSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 255))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFail.setStatus('current')
alarmEncryptionModuleSelfTestFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 256))
if mibBuilder.loadTexts: alarmEncryptionModuleSelfTestFailCritical.setStatus('current')
alarmSignalFailureOnLink = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 257))
if mibBuilder.loadTexts: alarmSignalFailureOnLink.setStatus('current')
alarmSignalFailureonLinkVector = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 258))
if mibBuilder.loadTexts: alarmSignalFailureonLinkVector.setStatus('current')
alarmSignalFailureOPU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 259))
if mibBuilder.loadTexts: alarmSignalFailureOPU.setStatus('current')
alarmClientOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 260))
if mibBuilder.loadTexts: alarmClientOutage.setStatus('current')
alarmFacilityDataRateNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 261))
if mibBuilder.loadTexts: alarmFacilityDataRateNotSupported.setStatus('current')
transientCryptoSessKeyLifetimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 262))
if mibBuilder.loadTexts: transientCryptoSessKeyLifetimeChanged.setStatus('current')
alarmLossofSequenceLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 263))
if mibBuilder.loadTexts: alarmLossofSequenceLowerOrderPath.setStatus('current')
alarmLossofSequenceHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 264))
if mibBuilder.loadTexts: alarmLossofSequenceHigherOrderPath.setStatus('current')
alarmServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 265))
if mibBuilder.loadTexts: alarmServerSignalFail.setStatus('current')
alarmServerSignalFailureGfp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 266))
if mibBuilder.loadTexts: alarmServerSignalFailureGfp.setStatus('current')
alarmServerSignalFailureODU = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 267))
if mibBuilder.loadTexts: alarmServerSignalFailureODU.setStatus('current')
alarmServerSignalFailurePath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 268))
if mibBuilder.loadTexts: alarmServerSignalFailurePath.setStatus('current')
alarmServerSignalFailureSectionRS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 269))
if mibBuilder.loadTexts: alarmServerSignalFailureSectionRS.setStatus('current')
transientProtSwToDuplexCompl = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 270))
if mibBuilder.loadTexts: transientProtSwToDuplexCompl.setStatus('current')
transientProtSwToDuplexFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 271))
if mibBuilder.loadTexts: transientProtSwToDuplexFail.setStatus('current')
alarmSwitchToDuplexInhibited = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 272))
if mibBuilder.loadTexts: alarmSwitchToDuplexInhibited.setStatus('current')
transientProtSwToDuplexStart = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 273))
if mibBuilder.loadTexts: transientProtSwToDuplexStart.setStatus('current')
alarmSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 274))
if mibBuilder.loadTexts: alarmSwitchFailed.setStatus('current')
transientSwResetReload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 275))
if mibBuilder.loadTexts: transientSwResetReload.setStatus('current')
alarmCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 276))
if mibBuilder.loadTexts: alarmCurrentTooHigh.setStatus('current')
alarmAttOnReceiverFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 277))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberHigherThanMonitor.setStatus('current')
alarmAttOnReceiverFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 278))
if mibBuilder.loadTexts: alarmAttOnReceiverFiberLowerThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberHigherThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 279))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberHigherThanMonitor.setStatus('current')
alarmAttOnTransmitterFiberLowerThanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 280))
if mibBuilder.loadTexts: alarmAttOnTransmitterFiberLowerThanMonitor.setStatus('current')
alarmThres15MinExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 281))
if mibBuilder.loadTexts: alarmThres15MinExceededOduBbe.setStatus('current')
transientThres1DayExceededOduBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 282))
if mibBuilder.loadTexts: transientThres1DayExceededOduBbe.setStatus('current')
alarmThres15MinExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 283))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuBbe.setStatus('current')
transientThres1DayExceededOtuBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 284))
if mibBuilder.loadTexts: transientThres1DayExceededOtuBbe.setStatus('current')
alarmThres15MinExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 285))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmABbe.setStatus('current')
transientThres1DayExceededOduTcmABbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 286))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmABbe.setStatus('current')
alarmThres15MinExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 287))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBBbe.setStatus('current')
transientThres1DayExceededOduTcmBBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 288))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBBbe.setStatus('current')
alarmThres15MinExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 289))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCBbe.setStatus('current')
transientThres1DayExceededOduTcmCBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 290))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCBbe.setStatus('current')
alarmThres15MinExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 291))
if mibBuilder.loadTexts: alarmThres15MinExceededFecBERCE.setStatus('current')
transientThres1DayExceededFecBERCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 292))
if mibBuilder.loadTexts: transientThres1DayExceededFecBERCE.setStatus('current')
alarmBrPwrRxTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 293))
if mibBuilder.loadTexts: alarmBrPwrRxTooHigh.setStatus('current')
alarmChromaticDispersionTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 294))
if mibBuilder.loadTexts: alarmChromaticDispersionTooHigh.setStatus('current')
alarmChromaticDispersionTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 295))
if mibBuilder.loadTexts: alarmChromaticDispersionTooLow.setStatus('current')
alarmDispersionCompensationTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 296))
if mibBuilder.loadTexts: alarmDispersionCompensationTooHigh.setStatus('current')
alarmDispersionCompensationTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 297))
if mibBuilder.loadTexts: alarmDispersionCompensationTooLow.setStatus('current')
alarmThres15MinExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 298))
if mibBuilder.loadTexts: alarmThres15MinExceededFecCE.setStatus('current')
transientThres1DayExceededFecCE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 299))
if mibBuilder.loadTexts: transientThres1DayExceededFecCE.setStatus('current')
alarmCarrierFreqOffsetTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 300))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooHigh.setStatus('current')
alarmCarrierFreqOffsetTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 301))
if mibBuilder.loadTexts: alarmCarrierFreqOffsetTooLow.setStatus('current')
alarmThres15MinExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 302))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineCV.setStatus('current')
transientThres1DayExceededSonetLineCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 303))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineCV.setStatus('current')
alarmThres15MinExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 304))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCV.setStatus('current')
transientThres1DayExceededPhysConvCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 305))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCV.setStatus('current')
alarmThres15MinExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 306))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectCV.setStatus('current')
transientThres1DayExceededSonetSectCV = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 307))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectCV.setStatus('current')
alarmThres15MinExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 308))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvDE.setStatus('current')
transientThres1DayExceededPhysConvDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 309))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvDE.setStatus('current')
alarmDifferentialGroupDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 310))
if mibBuilder.loadTexts: alarmDifferentialGroupDelayTooHigh.setStatus('current')
alarmThres15MinExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 311))
if mibBuilder.loadTexts: alarmThres15MinExceededFecES.setStatus('current')
transientThres1DayExceededFecES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 312))
if mibBuilder.loadTexts: transientThres1DayExceededFecES.setStatus('current')
alarmThres15MinExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 313))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineES.setStatus('current')
transientThres1DayExceededSonetLineES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 314))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineES.setStatus('current')
alarmThres15MinExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 315))
if mibBuilder.loadTexts: alarmThres15MinExceededOduES.setStatus('current')
transientThres1DayExceededOduES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 316))
if mibBuilder.loadTexts: transientThres1DayExceededOduES.setStatus('current')
alarmThres15MinExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 317))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuES.setStatus('current')
transientThres1DayExceededOtuES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 318))
if mibBuilder.loadTexts: transientThres1DayExceededOtuES.setStatus('current')
alarmThres15MinExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 319))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvES.setStatus('current')
transientThres1DayExceededPhysConvES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 320))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvES.setStatus('current')
alarmThres15MinExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 321))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectES.setStatus('current')
transientThres1DayExceededSonetSectES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 322))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectES.setStatus('current')
alarmThres15MinExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 323))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAES.setStatus('current')
transientThres1DayExceededOduTcmAES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 324))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAES.setStatus('current')
alarmThres15MinExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 325))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBES.setStatus('current')
transientThres1DayExceededOduTcmBES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 326))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBES.setStatus('current')
alarmThres15MinExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 327))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCES.setStatus('current')
transientThres1DayExceededOduTcmCES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 328))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCES.setStatus('current')
alarmLatencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 329))
if mibBuilder.loadTexts: alarmLatencyTooHigh.setStatus('current')
alarmLatencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 330))
if mibBuilder.loadTexts: alarmLatencyTooLow.setStatus('current')
alarmLaserBiasCurrentNormalizedtooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 331))
if mibBuilder.loadTexts: alarmLaserBiasCurrentNormalizedtooHigh.setStatus('current')
alarmLocalOscTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 332))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooHigh.setStatus('current')
alarmLocalOscTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 333))
if mibBuilder.loadTexts: alarmLocalOscTemperatureTooLow.setStatus('current')
alarmPumpLaser1TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 334))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooHigh.setStatus('current')
alarmPumpLaser1TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 335))
if mibBuilder.loadTexts: alarmPumpLaser1TempTooLow.setStatus('current')
alarmPumpLaser2TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 336))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooHigh.setStatus('current')
alarmPumpLaser2TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 337))
if mibBuilder.loadTexts: alarmPumpLaser2TempTooLow.setStatus('current')
alarmPumpLaser3TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 338))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooHigh.setStatus('current')
alarmPumpLaser3TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 339))
if mibBuilder.loadTexts: alarmPumpLaser3TempTooLow.setStatus('current')
alarmPumpLaser4TempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 340))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooHigh.setStatus('current')
alarmPumpLaser4TempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 341))
if mibBuilder.loadTexts: alarmPumpLaser4TempTooLow.setStatus('current')
alarmOscPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 342))
if mibBuilder.loadTexts: alarmOscPwrTooHigh.setStatus('current')
alarmOscPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 343))
if mibBuilder.loadTexts: alarmOscPwrTooLow.setStatus('current')
alarmRamanPumpPwrTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 344))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooHigh.setStatus('current')
alarmRamanPumpPwrTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 345))
if mibBuilder.loadTexts: alarmRamanPumpPwrTooLow.setStatus('current')
alarmRoundTripDelayTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 346))
if mibBuilder.loadTexts: alarmRoundTripDelayTooHigh.setStatus('current')
alarmRoundTripDelayTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 347))
if mibBuilder.loadTexts: alarmRoundTripDelayTooLow.setStatus('current')
alarmThres15MinExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 348))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSEFS.setStatus('current')
transientThres1DayExceededSonetSectSEFS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 349))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSEFS.setStatus('current')
alarmThres15MinExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 350))
if mibBuilder.loadTexts: alarmThres15MinExceededFecSES.setStatus('current')
transientThres1DayExceededFecSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 351))
if mibBuilder.loadTexts: transientThres1DayExceededFecSES.setStatus('current')
alarmThres15MinExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 352))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineSES.setStatus('current')
transientThres1DayExceededSonetLineSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 353))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineSES.setStatus('current')
alarmThres15MinExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 354))
if mibBuilder.loadTexts: alarmThres15MinExceededOduSES.setStatus('current')
transientThres1DayExceededOduSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 355))
if mibBuilder.loadTexts: transientThres1DayExceededOduSES.setStatus('current')
alarmThres15MinExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 356))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuSES.setStatus('current')
transientThres1DayExceededOtuSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 357))
if mibBuilder.loadTexts: transientThres1DayExceededOtuSES.setStatus('current')
alarmThres15MinExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 358))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectSES.setStatus('current')
transientThres1DayExceededSonetSectSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 359))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectSES.setStatus('current')
alarmThres15MinExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 360))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmASES.setStatus('current')
transientThres1DayExceededOduTcmASES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 361))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmASES.setStatus('current')
alarmThres15MinExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 362))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBSES.setStatus('current')
transientThres1DayExceededOduTcmBSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 363))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBSES.setStatus('current')
alarmThres15MinExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 364))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCSES.setStatus('current')
transientThres1DayExceededOduTcmCSES = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 365))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCSES.setStatus('current')
alarmLogicalLanesSkewTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 366))
if mibBuilder.loadTexts: alarmLogicalLanesSkewTooHigh.setStatus('current')
alarmSignalToNoiseRatioTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 367))
if mibBuilder.loadTexts: alarmSignalToNoiseRatioTooLow.setStatus('current')
alarmSubModuleTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 368))
if mibBuilder.loadTexts: alarmSubModuleTempTooHigh.setStatus('current')
alarmTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 369))
if mibBuilder.loadTexts: alarmTemperatureTooHigh.setStatus('current')
alarmTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 370))
if mibBuilder.loadTexts: alarmTemperatureTooLow.setStatus('current')
alarmThres15MinExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 371))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineUAS.setStatus('current')
transientThres1DayExceededSonetLineUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 372))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineUAS.setStatus('current')
alarmThres15MinExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 373))
if mibBuilder.loadTexts: alarmThres15MinExceededOduUAS.setStatus('current')
transientThres1DayExceededOduUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 374))
if mibBuilder.loadTexts: transientThres1DayExceededOduUAS.setStatus('current')
alarmThres15MinExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 375))
if mibBuilder.loadTexts: alarmThres15MinExceededOtuUAS.setStatus('current')
transientThres1DayExceededOtuUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 376))
if mibBuilder.loadTexts: transientThres1DayExceededOtuUAS.setStatus('current')
alarmThres15MinExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 377))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmAUAS.setStatus('current')
transientThres1DayExceededOduTcmAUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 378))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmAUAS.setStatus('current')
alarmThres15MinExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 379))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmBUAS.setStatus('current')
transientThres1DayExceededOduTcmBUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 380))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmBUAS.setStatus('current')
alarmThres15MinExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 381))
if mibBuilder.loadTexts: alarmThres15MinExceededOduTcmCUAS.setStatus('current')
transientThres1DayExceededOduTcmCUAS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 382))
if mibBuilder.loadTexts: transientThres1DayExceededOduTcmCUAS.setStatus('current')
alarmThres15MinExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 383))
if mibBuilder.loadTexts: alarmThres15MinExceededFecUBE.setStatus('current')
transientThres1DayExceededFecUBE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 384))
if mibBuilder.loadTexts: transientThres1DayExceededFecUBE.setStatus('current')
alarmEncryptionModuleTamperDetected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 385))
if mibBuilder.loadTexts: alarmEncryptionModuleTamperDetected.setStatus('current')
alarmThermoElectricCoolerEndOfLife = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 386))
if mibBuilder.loadTexts: alarmThermoElectricCoolerEndOfLife.setStatus('current')
alarmInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 387))
if mibBuilder.loadTexts: alarmInputTIF.setStatus('current')
transientHardwareResetInputTIF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 388))
if mibBuilder.loadTexts: transientHardwareResetInputTIF.setStatus('current')
alarmTraceIdentifierMismatchOdu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 389))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOdu.setStatus('current')
alarmTraceIdentifierMismatchOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 390))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOtu.setStatus('current')
alarmSectionTraceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 391))
if mibBuilder.loadTexts: alarmSectionTraceMismatch.setStatus('current')
alarmTraceIdentifierMismatchOduTcmA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 392))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmA.setStatus('current')
alarmTraceIdentifierMismatchOduTcmB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 393))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmB.setStatus('current')
alarmTraceIdentifierMismatchOduTcmC = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 394))
if mibBuilder.loadTexts: alarmTraceIdentifierMismatchOduTcmC.setStatus('current')
alarmTurnupFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 395))
if mibBuilder.loadTexts: alarmTurnupFailed.setStatus('current')
alarmTurnupCondition = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 396))
if mibBuilder.loadTexts: alarmTurnupCondition.setStatus('current')
alarmUnequippedLowerOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 397))
if mibBuilder.loadTexts: alarmUnequippedLowerOrderPath.setStatus('current')
alarmUnequippedHigherOrderPath = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 398))
if mibBuilder.loadTexts: alarmUnequippedHigherOrderPath.setStatus('current')
alarmVoaControlFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 399))
if mibBuilder.loadTexts: alarmVoaControlFail.setStatus('current')
alarmVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 400))
if mibBuilder.loadTexts: alarmVoltageOutOfRange.setStatus('current')
alarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 401))
if mibBuilder.loadTexts: alarmInputVoltageFailure.setStatus('current')
alarmInputVoltageFailurePort1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 402))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort1.setStatus('current')
alarmInputVoltageFailurePort2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 403))
if mibBuilder.loadTexts: alarmInputVoltageFailurePort2.setStatus('current')
transientWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 404))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorking.setStatus('current')
transientWorkingSwitchedtoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 405))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtection.setStatus('current')
alarmWtrTimerRunning = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 406))
if mibBuilder.loadTexts: alarmWtrTimerRunning.setStatus('current')
alarmLossOfLaneOtu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 407))
if mibBuilder.loadTexts: alarmLossOfLaneOtu.setStatus('current')
alarmLossOfTestSeqSynchOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 408))
if mibBuilder.loadTexts: alarmLossOfTestSeqSynchOpu.setStatus('current')
alarmLossOfMfiOpu = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 409))
if mibBuilder.loadTexts: alarmLossOfMfiOpu.setStatus('current')
alarmOosDisabledLckOduTrmt = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 410))
if mibBuilder.loadTexts: alarmOosDisabledLckOduTrmt.setStatus('current')
alarmConfigurationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 411))
if mibBuilder.loadTexts: alarmConfigurationMismatch.setStatus('current')
alarmOduAutoShutdownRxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 412))
if mibBuilder.loadTexts: alarmOduAutoShutdownRxAIS.setStatus('current')
alarmOduAutoShutdownTxAIS = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 413))
if mibBuilder.loadTexts: alarmOduAutoShutdownTxAIS.setStatus('current')
alarmOosDisabledLckOduRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 414))
if mibBuilder.loadTexts: alarmOosDisabledLckOduRx.setStatus('current')
transientBootUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 415))
if mibBuilder.loadTexts: transientBootUpFailed.setStatus('current')
transientBootUpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 416))
if mibBuilder.loadTexts: transientBootUpCompleted.setStatus('current')
transientBootUpStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 417))
if mibBuilder.loadTexts: transientBootUpStarted.setStatus('current')
transientInstallFwpCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 418))
if mibBuilder.loadTexts: transientInstallFwpCompleted.setStatus('current')
transientBootUpRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 419))
if mibBuilder.loadTexts: transientBootUpRejected.setStatus('current')
alarmThres15MinExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 420))
if mibBuilder.loadTexts: alarmThres15MinExceededBbePcs.setStatus('current')
transientThres15DayExceededBbePcs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 421))
if mibBuilder.loadTexts: transientThres15DayExceededBbePcs.setStatus('current')
alarmAutoShutdownGAis = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 422))
if mibBuilder.loadTexts: alarmAutoShutdownGAis.setStatus('current')
alarmEquipmentMismatchAllow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 423))
if mibBuilder.loadTexts: alarmEquipmentMismatchAllow.setStatus('current')
alarmWarmUp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 424))
if mibBuilder.loadTexts: alarmWarmUp.setStatus('current')
transientFwpInstallStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 425))
if mibBuilder.loadTexts: transientFwpInstallStarted.setStatus('current')
transientFwpInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 426))
if mibBuilder.loadTexts: transientFwpInstallFailed.setStatus('current')
transientFwpInstallCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 427))
if mibBuilder.loadTexts: transientFwpInstallCompleted.setStatus('current')
transientFwpSwitchStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 428))
if mibBuilder.loadTexts: transientFwpSwitchStarted.setStatus('current')
transientFwpSwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 429))
if mibBuilder.loadTexts: transientFwpSwitchFailed.setStatus('current')
transientFwpSwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 430))
if mibBuilder.loadTexts: transientFwpSwitchCompleted.setStatus('current')
transientFwpSwitchRejected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 431))
if mibBuilder.loadTexts: transientFwpSwitchRejected.setStatus('current')
alarmNetworkPathRestricted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 432))
if mibBuilder.loadTexts: alarmNetworkPathRestricted.setStatus('current')
transientPathCleanupComplete = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 433))
if mibBuilder.loadTexts: transientPathCleanupComplete.setStatus('current')
alarmVfClientSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 434))
if mibBuilder.loadTexts: alarmVfClientSignalFail.setStatus('current')
alarmAutoShutdownVfCSF = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 435))
if mibBuilder.loadTexts: alarmAutoShutdownVfCSF.setStatus('current')
transientNtpSrvTestSuccessed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 436))
if mibBuilder.loadTexts: transientNtpSrvTestSuccessed.setStatus('current')
transientNtpSrvTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 437))
if mibBuilder.loadTexts: transientNtpSrvTestFailed.setStatus('current')
transientNtpSrvSyncChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 438))
if mibBuilder.loadTexts: transientNtpSrvSyncChanged.setStatus('current')
alarmLinkFailToPartner1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 439))
if mibBuilder.loadTexts: alarmLinkFailToPartner1.setStatus('current')
alarmLinkFailToPartner2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 440))
if mibBuilder.loadTexts: alarmLinkFailToPartner2.setStatus('current')
alarmLinkFailToPartner3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 441))
if mibBuilder.loadTexts: alarmLinkFailToPartner3.setStatus('current')
alarmLinkFailToPartner4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 442))
if mibBuilder.loadTexts: alarmLinkFailToPartner4.setStatus('current')
alarmPartnerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 443))
if mibBuilder.loadTexts: alarmPartnerUnavailable.setStatus('current')
transientCommunicationFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 444))
if mibBuilder.loadTexts: transientCommunicationFail.setStatus('current')
alarmPartner1Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 445))
if mibBuilder.loadTexts: alarmPartner1Deleted.setStatus('current')
alarmPartner2Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 446))
if mibBuilder.loadTexts: alarmPartner2Deleted.setStatus('current')
alarmPartner3Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 447))
if mibBuilder.loadTexts: alarmPartner3Deleted.setStatus('current')
alarmPartner4Deleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 448))
if mibBuilder.loadTexts: alarmPartner4Deleted.setStatus('current')
transientEqlzReport = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 449))
if mibBuilder.loadTexts: transientEqlzReport.setStatus('current')
alarmThres15MinExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 450))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvSE.setStatus('current')
transientThres1DayExceededPhysConvSE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 451))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvSE.setStatus('current')
alarmThres15MinExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 452))
if mibBuilder.loadTexts: alarmThres15MinExceededPhysConvCVDE.setStatus('current')
transientThres1DayExceededPhysConvCVDE = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 453))
if mibBuilder.loadTexts: transientThres1DayExceededPhysConvCVDE.setStatus('current')
transientForcedWorkingSwitchedBacktoWorking = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 454))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoWorking.setStatus('current')
transientForcedWorkingSwitchedBacktoProtection = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 455))
if mibBuilder.loadTexts: transientForcedWorkingSwitchedBacktoProtection.setStatus('current')
alarmAutoShutdownSendingOciOduTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 456))
if mibBuilder.loadTexts: alarmAutoShutdownSendingOciOduTx.setStatus('current')
alarmAcpLinkLoss = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 457))
if mibBuilder.loadTexts: alarmAcpLinkLoss.setStatus('current')
alarmAcpChannelUnAvail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 458))
if mibBuilder.loadTexts: alarmAcpChannelUnAvail.setStatus('current')
alarmAcpPartnerUnassigned = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 459))
if mibBuilder.loadTexts: alarmAcpPartnerUnassigned.setStatus('current')
alarmAcpPartnerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 460))
if mibBuilder.loadTexts: alarmAcpPartnerDeleted.setStatus('current')
alarmThres15MinExceededCrcErrorsRcv = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 461))
if mibBuilder.loadTexts: alarmThres15MinExceededCrcErrorsRcv.setStatus('current')
transientThres1DayExceededCrcErrorsRcv = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 462))
if mibBuilder.loadTexts: transientThres1DayExceededCrcErrorsRcv.setStatus('current')
alarmThres15MinExceededCrcFramesEgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 463))
if mibBuilder.loadTexts: alarmThres15MinExceededCrcFramesEgress.setStatus('current')
transientThres1DayExceededCrcFramesEgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 464))
if mibBuilder.loadTexts: transientThres1DayExceededCrcFramesEgress.setStatus('current')
alarmAutoServiceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 465))
if mibBuilder.loadTexts: alarmAutoServiceMismatch.setStatus('current')
alarmBatteryNoCharge = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 466))
if mibBuilder.loadTexts: alarmBatteryNoCharge.setStatus('current')
transientFwpHashPass = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 467))
if mibBuilder.loadTexts: transientFwpHashPass.setStatus('current')
transientFwpHashFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 468))
if mibBuilder.loadTexts: transientFwpHashFail.setStatus('current')
alarmTagReceiveFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 469))
if mibBuilder.loadTexts: alarmTagReceiveFail.setStatus('current')
alarmTagReceiveFailMaxReached = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 470))
if mibBuilder.loadTexts: alarmTagReceiveFailMaxReached.setStatus('current')
transientTagCounterReset = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 471))
if mibBuilder.loadTexts: transientTagCounterReset.setStatus('current')
transientTagCounterResetFw = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 472))
if mibBuilder.loadTexts: transientTagCounterResetFw.setStatus('current')
alarmInternalEncryptionFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 473))
if mibBuilder.loadTexts: alarmInternalEncryptionFail.setStatus('current')
transientCryptoTagFailureLimitChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 474))
if mibBuilder.loadTexts: transientCryptoTagFailureLimitChanged.setStatus('current')
transientCryptoTagFailurePeriodChanged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 475))
if mibBuilder.loadTexts: transientCryptoTagFailurePeriodChanged.setStatus('current')
alarmInsufficientPower = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 476))
if mibBuilder.loadTexts: alarmInsufficientPower.setStatus('current')
alarmPowerConsumptionHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 477))
if mibBuilder.loadTexts: alarmPowerConsumptionHigh.setStatus('current')
alarmLossOfOverhead = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 478))
if mibBuilder.loadTexts: alarmLossOfOverhead.setStatus('current')
alarmLossOfInputSignal = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 479))
if mibBuilder.loadTexts: alarmLossOfInputSignal.setStatus('current')
alarmOtuServerSignalFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 480))
if mibBuilder.loadTexts: alarmOtuServerSignalFail.setStatus('current')
alarmLossOfPRBSonaLane = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 481))
if mibBuilder.loadTexts: alarmLossOfPRBSonaLane.setStatus('current')
alarmLossOfAlignment = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 482))
if mibBuilder.loadTexts: alarmLossOfAlignment.setStatus('current')
alarmLocalFaultRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 483))
if mibBuilder.loadTexts: alarmLocalFaultRx.setStatus('current')
alarmLocalFaultTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 484))
if mibBuilder.loadTexts: alarmLocalFaultTx.setStatus('current')
alarmServerSignalFailRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 485))
if mibBuilder.loadTexts: alarmServerSignalFailRx.setStatus('current')
alarmServerSignalFailTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 486))
if mibBuilder.loadTexts: alarmServerSignalFailTx.setStatus('current')
alarmLossOfBlockLock = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 487))
if mibBuilder.loadTexts: alarmLossOfBlockLock.setStatus('current')
alarmInputVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 488))
if mibBuilder.loadTexts: alarmInputVoltageLow.setStatus('current')
alarmOutputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 489))
if mibBuilder.loadTexts: alarmOutputVoltageFailure.setStatus('current')
alarmOutputPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 490))
if mibBuilder.loadTexts: alarmOutputPowerHigh.setStatus('current')
alarmCommunicationLoss = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 491))
if mibBuilder.loadTexts: alarmCommunicationLoss.setStatus('current')
alarmIncompatibleVersion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 492))
if mibBuilder.loadTexts: alarmIncompatibleVersion.setStatus('current')
alarmAirDustFilterClogged = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 493))
if mibBuilder.loadTexts: alarmAirDustFilterClogged.setStatus('current')
alarmPsmRedundancyMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 494))
if mibBuilder.loadTexts: alarmPsmRedundancyMismatch.setStatus('current')
alarmLossOfModemSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 495))
if mibBuilder.loadTexts: alarmLossOfModemSync.setStatus('current')
alarmServerSignalFailPayload = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 496))
if mibBuilder.loadTexts: alarmServerSignalFailPayload.setStatus('current')
alarmOutputCurrentDrawHigh = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 497))
if mibBuilder.loadTexts: alarmOutputCurrentDrawHigh.setStatus('current')
alarmRAndCPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 498))
if mibBuilder.loadTexts: alarmRAndCPortOutage.setStatus('current')
alarmRPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 499))
if mibBuilder.loadTexts: alarmRPortOutage.setStatus('current')
alarmPPortOutage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 500))
if mibBuilder.loadTexts: alarmPPortOutage.setStatus('current')
alarmHwOptReachedHT = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 501))
if mibBuilder.loadTexts: alarmHwOptReachedHT.setStatus('current')
alarmExcessLLDPNeighborsRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 502))
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsRx.setStatus('current')
alarmExcessLLDPNeighborsTx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 503))
if mibBuilder.loadTexts: alarmExcessLLDPNeighborsTx.setStatus('current')
alarmConfigurationFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 504))
if mibBuilder.loadTexts: alarmConfigurationFault.setStatus('current')
alarmChannelMismatchRx = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 505))
if mibBuilder.loadTexts: alarmChannelMismatchRx.setStatus('current')
alarmLossOfCoupling = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 506))
if mibBuilder.loadTexts: alarmLossOfCoupling.setStatus('current')
alarmHardwareUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 507))
if mibBuilder.loadTexts: alarmHardwareUnavailable.setStatus('current')
transientCryBootStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 508))
if mibBuilder.loadTexts: transientCryBootStarted.setStatus('current')
transientCryAuthKeyMade = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 509))
if mibBuilder.loadTexts: transientCryAuthKeyMade.setStatus('current')
transientCryAuthKeyReceived = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 510))
if mibBuilder.loadTexts: transientCryAuthKeyReceived.setStatus('current')
alarmCryAuthKeyMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 511))
if mibBuilder.loadTexts: alarmCryAuthKeyMissing.setStatus('current')
alarmCryDataInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 512))
if mibBuilder.loadTexts: alarmCryDataInvalid.setStatus('current')
alarmLossOfSignalDcPort = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 513))
if mibBuilder.loadTexts: alarmLossOfSignalDcPort.setStatus('current')
alarmAmpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 514))
if mibBuilder.loadTexts: alarmAmpDisabled.setStatus('current')
transientEncryptionModuleSelfTestPass = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 515))
if mibBuilder.loadTexts: transientEncryptionModuleSelfTestPass.setStatus('current')
alarmLicenseMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 516))
if mibBuilder.loadTexts: alarmLicenseMissing.setStatus('current')
alarmHwConfigFault = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 517))
if mibBuilder.loadTexts: alarmHwConfigFault.setStatus('current')
alarmThres15MinExceededSonetSectBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 518))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectBbe.setStatus('current')
transientThres1DayExceededSonetSectBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 519))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectBbe.setStatus('current')
alarmThres15MinExceededSonetLineBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 520))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetLineBbe.setStatus('current')
transientThres1DayExceededSonetLineBbe = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 521))
if mibBuilder.loadTexts: transientThres1DayExceededSonetLineBbe.setStatus('current')
alarmServerSignalFailLine = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 522))
if mibBuilder.loadTexts: alarmServerSignalFailLine.setStatus('current')
alarmThres15MinExceededSonetSectOofs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 523))
if mibBuilder.loadTexts: alarmThres15MinExceededSonetSectOofs.setStatus('current')
transientThres1DayExceededSonetSectOofs = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 524))
if mibBuilder.loadTexts: transientThres1DayExceededSonetSectOofs.setStatus('current')
alarmNoLicenseFile = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 525))
if mibBuilder.loadTexts: alarmNoLicenseFile.setStatus('current')
alarmLicenseServerDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 526))
if mibBuilder.loadTexts: alarmLicenseServerDisconnected.setStatus('current')
alarmLicenseServerNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 527))
if mibBuilder.loadTexts: alarmLicenseServerNotConfigured.setStatus('current')
alarmLicenseInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 528))
if mibBuilder.loadTexts: alarmLicenseInvalid.setStatus('current')
alarmLicenseOverdraft = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 529))
if mibBuilder.loadTexts: alarmLicenseOverdraft.setStatus('current')
alarmLicenseMissingMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 530))
if mibBuilder.loadTexts: alarmLicenseMissingMismatch.setStatus('current')
alarmQualityFactorTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 531))
if mibBuilder.loadTexts: alarmQualityFactorTooLow.setStatus('current')
transientCryBootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 532))
if mibBuilder.loadTexts: transientCryBootCompleted.setStatus('current')
transientCryBootFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 533))
if mibBuilder.loadTexts: transientCryBootFailed.setStatus('current')
transientCrySwitchStarted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 534))
if mibBuilder.loadTexts: transientCrySwitchStarted.setStatus('current')
transientCrySwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 535))
if mibBuilder.loadTexts: transientCrySwitchCompleted.setStatus('current')
transientCrySwitchFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 536))
if mibBuilder.loadTexts: transientCrySwitchFailed.setStatus('current')
alarmReplaceAirFilter = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 537))
if mibBuilder.loadTexts: alarmReplaceAirFilter.setStatus('current')
alarmAutoShutdownSendingIdle = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 538))
if mibBuilder.loadTexts: alarmAutoShutdownSendingIdle.setStatus('current')
transientMpReleased = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 539)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpReleased.setStatus('current')
transientMpLocked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 540)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpLocked.setStatus('current')
alarmMpFileMissing = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 541))
if mibBuilder.loadTexts: alarmMpFileMissing.setStatus('current')
transientMpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 542))
if mibBuilder.loadTexts: transientMpDeleted.setStatus('current')
transientMpCreated = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 543)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpCreated.setStatus('current')
transientMpParameterSetFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 544)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "errorMessage"))
if mibBuilder.loadTexts: transientMpParameterSetFail.setStatus('current')
transientMpImported = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 545)).setObjects(("ADVA-FSPR7-MIB", "entitySysAidString"), ("ADVA-FSPR7-MIB", "fileDataMpName"), ("ADVA-FSPR7-MIB", "fileDataComment"), ("ADVA-FSPR7-MIB", "fileDataMpTag"), ("ADVA-FSPR7-MIB", "fileDataRevision"), ("ADVA-FSPR7-MIB", "fileDataVersion"), ("ADVA-FSPR7-MIB", "fileDataCreationTime"))
if mibBuilder.loadTexts: transientMpImported.setStatus('current')
alarmDelayMeasurementProgress = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 546))
if mibBuilder.loadTexts: alarmDelayMeasurementProgress.setStatus('current')
transientDelayMeasurementCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 547))
if mibBuilder.loadTexts: transientDelayMeasurementCompleted.setStatus('current')
transientDelayMeasurementFailed = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 548))
if mibBuilder.loadTexts: transientDelayMeasurementFailed.setStatus('current')
fspR7EquipmentInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10001))
if mibBuilder.loadTexts: fspR7EquipmentInsertedTrap.setStatus('current')
fspR7EquipmentRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10002))
if mibBuilder.loadTexts: fspR7EquipmentRemovedTrap.setStatus('current')
fspR7WriteAccessRequest = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10010))
if mibBuilder.loadTexts: fspR7WriteAccessRequest.setStatus('current')
fspR7WriteAccessGranted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10011))
if mibBuilder.loadTexts: fspR7WriteAccessGranted.setStatus('current')
fspR7WriteAccessRevoked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10012))
if mibBuilder.loadTexts: fspR7WriteAccessRevoked.setStatus('current')
fspR7WriteAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10013))
if mibBuilder.loadTexts: fspR7WriteAccessDenied.setStatus('current')
fspR7WriteAccessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10014))
if mibBuilder.loadTexts: fspR7WriteAccessTimeout.setStatus('current')
fspR7WriteAccessRequestTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10015))
if mibBuilder.loadTexts: fspR7WriteAccessRequestTimeout.setStatus('current')
fspR7TrapSinkCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10020)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"))
if mibBuilder.loadTexts: fspR7TrapSinkCreation.setStatus('current')
fspR7TrapSinkDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10021)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"))
if mibBuilder.loadTexts: fspR7TrapSinkDeletion.setStatus('current')
fspR7TrapSinkChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10022)).setObjects(("ADVA-FSPR7-MIB", "trapSinkIPv4"), ("ADVA-FSPR7-MIB", "trapSinkIPv6"), ("ADVA-FSPR7-MIB", "trapSinkCommunity"), ("ADVA-FSPR7-MIB", "trapSinkUserName"))
if mibBuilder.loadTexts: fspR7TrapSinkChange.setStatus('current')
fspR7AccountStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10023)).setObjects(("ADVA-FSPR7-MIB", "authTrapUserName"), ("ADVA-FSPR7-MIB", "authTrapAccountState"))
if mibBuilder.loadTexts: fspR7AccountStateChange.setStatus('current')
fspR7CommunityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10024)).setObjects(("ADVA-FSPR7-MIB", "communityName"))
if mibBuilder.loadTexts: fspR7CommunityCreation.setStatus('current')
fspR7CommunityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10025)).setObjects(("ADVA-FSPR7-MIB", "communityName"))
if mibBuilder.loadTexts: fspR7CommunityDeletion.setStatus('current')
fspR7PrivilegeChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10026)).setObjects(("ADVA-FSPR7-MIB", "privilegeChangeState"), ("ADVA-FSPR7-MIB", "privilegeChangeUserName"), ("ADVA-FSPR7-MIB", "privilegeChangeIpAddress"), ("ADVA-FSPR7-MIB", "privilegeChangeInterface"), ("ADVA-FSPR7-MIB", "privilegeChangeCurrentPrivilege"), ("ADVA-FSPR7-MIB", "privilegeChangeRequestedPrivilege"), ("ADVA-FSPR7-MIB", "privilegeChangeDuration"))
if mibBuilder.loadTexts: fspR7PrivilegeChange.setStatus('current')
fspR7AuthenticationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10027)).setObjects(("ADVA-FSPR7-MIB", "authTrapSrcIp"), ("ADVA-FSPR7-MIB", "authTrapStatus"), ("ADVA-FSPR7-MIB", "authTrapSessionId"), ("ADVA-FSPR7-MIB", "authTrapProtocol"), ("ADVA-FSPR7-MIB", "authTrapPort"), ("ADVA-FSPR7-MIB", "authTrapUserName"), ("ADVA-FSPR7-MIB", "authTrapAccess"))
if mibBuilder.loadTexts: fspR7AuthenticationNotification.setStatus('current')
fspR7AuthenticationNotificationSummary = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 5, 0, 10028)).setObjects(("ADVA-FSPR7-MIB", "authTrapProtocol"), ("ADVA-FSPR7-MIB", "authTrapSuccessfulAuthCount"), ("ADVA-FSPR7-MIB", "authTrapUnsuccessfulAuthCount"))
if mibBuilder.loadTexts: fspR7AuthenticationNotificationSummary.setStatus('current')
optThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigTable.setStatus('deprecated')
optThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigEntry.setStatus('deprecated')
optThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigLowFixed.setStatus('deprecated')
optThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigHighFixed.setStatus('deprecated')
optThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigLowConfig.setStatus('deprecated')
optThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 300))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optThresholdConfigHighConfig.setStatus('deprecated')
oprThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigTable.setStatus('deprecated')
oprThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigEntry.setStatus('deprecated')
oprThresholdConfigLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 260))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigLowConfig.setStatus('deprecated')
oprThresholdConfigHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-450, 270))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oprThresholdConfigHighConfig.setStatus('deprecated')
lsrtempThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3), )
if mibBuilder.loadTexts: lsrtempThresholdConfigTable.setStatus('deprecated')
lsrtempThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lsrtempThresholdConfigEntry.setStatus('deprecated')
lsrtempThresholdConfigLowFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 1), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigLowFixed.setStatus('deprecated')
lsrtempThresholdConfigHighFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 1, 3, 1, 2), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsrtempThresholdConfigHighFixed.setStatus('deprecated')
optIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1), )
if mibBuilder.loadTexts: optIntervalPm15minTable.setStatus('deprecated')
optIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm15minNumber"))
if mibBuilder.loadTexts: optIntervalPm15minEntry.setStatus('deprecated')
optIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: optIntervalPm15minNumber.setStatus('current')
optIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minLow.setStatus('deprecated')
optIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minMean.setStatus('deprecated')
optIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minHigh.setStatus('deprecated')
optIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minValidFlag.setStatus('deprecated')
optIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm15minTimeStamp.setStatus('deprecated')
optIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2), )
if mibBuilder.loadTexts: optIntervalPm1dayTable.setStatus('deprecated')
optIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1dayNumber"))
if mibBuilder.loadTexts: optIntervalPm1dayEntry.setStatus('deprecated')
optIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: optIntervalPm1dayNumber.setStatus('current')
optIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayLow.setStatus('deprecated')
optIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayMean.setStatus('deprecated')
optIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayHigh.setStatus('deprecated')
optIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayValidFlag.setStatus('deprecated')
optIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1dayTimeStamp.setStatus('deprecated')
optIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3), )
if mibBuilder.loadTexts: optIntervalPm1weekTable.setStatus('deprecated')
optIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "optIntervalPm1weekNumber"))
if mibBuilder.loadTexts: optIntervalPm1weekEntry.setStatus('deprecated')
optIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: optIntervalPm1weekNumber.setStatus('current')
optIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekLow.setStatus('deprecated')
optIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekMean.setStatus('deprecated')
optIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekHigh.setStatus('deprecated')
optIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekValidFlag.setStatus('deprecated')
optIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIntervalPm1weekTimeStamp.setStatus('deprecated')
oprIntervalPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4), )
if mibBuilder.loadTexts: oprIntervalPm15minTable.setStatus('deprecated')
oprIntervalPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm15minNumber"))
if mibBuilder.loadTexts: oprIntervalPm15minEntry.setStatus('deprecated')
oprIntervalPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: oprIntervalPm15minNumber.setStatus('current')
oprIntervalPm15minLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minLow.setStatus('deprecated')
oprIntervalPm15minMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minMean.setStatus('deprecated')
oprIntervalPm15minHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minHigh.setStatus('deprecated')
oprIntervalPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minValidFlag.setStatus('deprecated')
oprIntervalPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm15minTimeStamp.setStatus('deprecated')
oprIntervalPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5), )
if mibBuilder.loadTexts: oprIntervalPm1dayTable.setStatus('deprecated')
oprIntervalPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1dayNumber"))
if mibBuilder.loadTexts: oprIntervalPm1dayEntry.setStatus('deprecated')
oprIntervalPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: oprIntervalPm1dayNumber.setStatus('current')
oprIntervalPm1dayLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayLow.setStatus('deprecated')
oprIntervalPm1dayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayMean.setStatus('deprecated')
oprIntervalPm1dayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayHigh.setStatus('deprecated')
oprIntervalPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayValidFlag.setStatus('deprecated')
oprIntervalPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1dayTimeStamp.setStatus('deprecated')
oprIntervalPm1weekTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6), )
if mibBuilder.loadTexts: oprIntervalPm1weekTable.setStatus('deprecated')
oprIntervalPm1weekEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "oprIntervalPm1weekNumber"))
if mibBuilder.loadTexts: oprIntervalPm1weekEntry.setStatus('deprecated')
oprIntervalPm1weekNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: oprIntervalPm1weekNumber.setStatus('current')
oprIntervalPm1weekLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekLow.setStatus('deprecated')
oprIntervalPm1weekMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 3), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekMean.setStatus('deprecated')
oprIntervalPm1weekHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 4), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekHigh.setStatus('deprecated')
oprIntervalPm1weekValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekValidFlag.setStatus('deprecated')
oprIntervalPm1weekTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 4, 2, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oprIntervalPm1weekTimeStamp.setStatus('deprecated')
endOfPerformance = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformance.setStatus('current')
terminationPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointTable.setStatus('current')
terminationPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointEntry.setStatus('current')
terminationPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointRowStatus.setStatus('current')
terminationPointPartnerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointPartnerAid.setStatus('current')
terminationPointAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointAdmin.setStatus('current')
terminationPointFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: terminationPointFiberDetect.setStatus('current')
terminationPointFiberDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 5), FspR7FDStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberDetectStatus.setStatus('current')
terminationPointFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 6), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFunction.setStatus('current')
terminationPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminationPointAlias.setStatus('current')
terminationPointValidSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5760))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointValidSigTimer.setStatus('current')
terminationPointConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 9), FspR7ConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnector.setStatus('current')
terminationPointFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 10), FspR7OpticalFiberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiber.setStatus('current')
terminationPointConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 11), FspR7TypeConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnType.setStatus('current')
terminationPointOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 12), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOper.setStatus('current')
terminationPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 13), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointOutputPower.setStatus('current')
terminationPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 14), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointInputPower.setStatus('current')
terminationPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFiberConnAtten.setStatus('current')
terminationPointConnEqptState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 16), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointConnEqptState.setStatus('current')
terminationPointTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 17), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointTermType.setStatus('current')
terminationPointChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 18), FspR7ChannelIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointChannel.setStatus('current')
terminationPointLambda = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 19), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLambda.setStatus('current')
terminationPointFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 20), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointFrequency.setStatus('current')
terminationPointReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 21), FspR7OpticalInterfaceReach()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointReach.setStatus('current')
terminationPointBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 22), FspR7OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointBand.setStatus('current')
terminationPointSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 23), FspR7OpticalSubBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSubBand.setStatus('current')
terminationPointGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 24), FspR7OpticalGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointGroup.setStatus('current')
terminationPointSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 25), FspR7SingleFiberLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSfProvision.setStatus('current')
terminationPointDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 26), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointDirection.setStatus('current')
terminationPointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 27), FspR7OpticalMultiplexLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointLevel.setStatus('current')
terminationPointSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 28), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointSecondaryStates.setStatus('current')
terminationPointChannelRangeProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 1, 1, 29), FspR7ChannelRangeInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointChannelRangeProvision.setStatus('current')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
connectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionEntry.setStatus('current')
connectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionRowStatus.setStatus('current')
connectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 2), FspR7TypeConnection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionType.setStatus('current')
connectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 3), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionState.setStatus('current')
connectionCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 2, 1, 4), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: connectionCreationMethod.setStatus('current')
facilityReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3), )
if mibBuilder.loadTexts: facilityReferByTable.setStatus('current')
facilityReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: facilityReferByEntry.setStatus('current')
facilityReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 3, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityReferByTerminPoint.setStatus('current')
externalPortReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4), )
if mibBuilder.loadTexts: externalPortReferByTable.setStatus('current')
externalPortReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortReferByEntry.setStatus('current')
externalPortReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 4, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReferByTerminPoint.setStatus('current')
endOfExternalPortReferByTabke = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortReferByTabke.setStatus('current')
dcnReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6), )
if mibBuilder.loadTexts: dcnReferByTable.setStatus('current')
dcnReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: dcnReferByEntry.setStatus('current')
dcnReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 6, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnReferByTerminPoint.setStatus('current')
endOfDcnReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnReferByTable.setStatus('current')
opticalMuxReferByTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8), )
if mibBuilder.loadTexts: opticalMuxReferByTable.setStatus('current')
opticalMuxReferByEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxReferByEntry.setStatus('current')
opticalMuxReferByTerminPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 8, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxReferByTerminPoint.setStatus('current')
endOfOpticalMuxReferByTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxReferByTable.setStatus('current')
endOfFiberMap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMap.setStatus('current')
startPmSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 1), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startPmSnapshot.setStatus('current')
pmSnapshotStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 2), FspR7PmSnapshotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotStatus.setStatus('current')
pmSnapshotCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3), )
if mibBuilder.loadTexts: pmSnapshotCurrentTable.setStatus('current')
pmSnapshotCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentEntry.setStatus('current')
pmSnapshotCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOutputPower.setStatus('current')
pmSnapshotCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentInputPower.setStatus('current')
pmSnapshotCurrentAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenuation.setStatus('current')
pmSnapshotCurrentAttenOfVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 4), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentAttenOfVoa.setStatus('current')
pmSnapshotCurrentOscGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 5), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscGain.setStatus('current')
pmSnapshotCurrentBckreflecPwrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentBckreflecPwrRx.setStatus('current')
pmSnapshotCurrentRamanPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 7), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRamanPumpPower.setStatus('current')
pmSnapshotCurrentOscPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 8), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentOscPwrReceived.setStatus('current')
pmSnapshotCurrentVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 9), Unsigned32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentVariableGain.setStatus('current')
pmSnapshotCurrentTxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 10), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTxLineAtten.setStatus('current')
pmSnapshotCurrentRxLineAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 3, 1, 11), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentRxLineAtten.setStatus('current')
pmSnapshotHistoricalTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTable.setStatus('current')
pmSnapshotHistoricalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalParameter"), (0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalEntry.setStatus('current')
pmSnapshotHistoricalParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalParameter.setStatus('current')
pmSnapshotHistoricalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalNumber.setStatus('current')
pmSnapshotHistoricalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValue.setStatus('current')
pmSnapshotHistoricalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalValidFlag.setStatus('current')
pmSnapshotHistoricalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTimeStamp.setStatus('current')
pmSnapshotCurrentTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5), )
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointTable.setStatus('deprecated')
pmSnapshotCurrentTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointEntry.setStatus('deprecated')
pmSnapshotCurrentTerminPointOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 1), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointOutputPower.setStatus('deprecated')
pmSnapshotCurrentTerminPointInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 2), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointInputPower.setStatus('deprecated')
pmSnapshotCurrentTerminPointFiberConnAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 5, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotCurrentTerminPointFiberConnAtten.setStatus('deprecated')
pmSnapshotHistoricalTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6), )
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTable.setStatus('deprecated')
pmSnapshotHistoricalTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointParameter"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "pmSnapshotHistoricalTerminPointNumber"))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointEntry.setStatus('deprecated')
pmSnapshotHistoricalTerminPointParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 1), FspR7PmSnapshotParameterTypes())
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointParameter.setStatus('deprecated')
pmSnapshotHistoricalTerminPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointNumber.setStatus('deprecated')
pmSnapshotHistoricalTerminPointValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 3), Integer32()).setUnits('0.1').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValue.setStatus('deprecated')
pmSnapshotHistoricalTerminPointValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointValidFlag.setStatus('deprecated')
pmSnapshotHistoricalTerminPointTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmSnapshotHistoricalTerminPointTimeStamp.setStatus('deprecated')
endOfPmSnampshot = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmSnampshot.setStatus('current')
externalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortTable.setStatus('current')
externalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortEntry.setStatus('current')
externalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortRowStatus.setStatus('current')
externalPortConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 2), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortConnectionState.setStatus('current')
externalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortType.setStatus('current')
externalPortTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 4), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortTransmitChannel.setStatus('current')
externalPortChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 5), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChannelBandwith.setStatus('current')
externalPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortAlias.setStatus('current')
externalPortFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFarEndLocation.setStatus('current')
externalPortBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortBitrate.setStatus('current')
externalPortFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 9), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFecType.setStatus('current')
externalPortLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 10), FspR7LineCoding()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortLineCoding.setStatus('current')
externalPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 11), FspR7FrameFormat()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortFrameFormat.setStatus('current')
externalPortOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOpticalPowerTx.setStatus('current')
externalPortOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortOsnrTransmit.setStatus('current')
externalPortPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortPmdTransmit.setStatus('current')
externalPortChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortChromDisperTx.setStatus('current')
externalPortMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOsnrRcv.setStatus('current')
externalPortMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinOptPowerRcv.setStatus('current')
externalPortMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxOptPowerRcv.setStatus('current')
externalPortMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxPmdRcv.setStatus('current')
externalPortMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMinChromDisperRcv.setStatus('current')
externalPortMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxChromDisperRcv.setStatus('current')
externalPortMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 22), FspR7MaxBitErrorRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortMaxBitErrorRate.setStatus('current')
externalPortSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 23), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalPortSourceProfile.setStatus('current')
externalPortSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 1, 1, 24), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortSecondaryStates.setStatus('current')
externalOmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3), )
if mibBuilder.loadTexts: externalOmTable.setStatus('current')
externalOmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalOmEntry.setStatus('current')
externalOmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmRowStatus.setStatus('current')
externalOmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmType.setStatus('current')
externalOmHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalOmHostName.setStatus('current')
externalVchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5), )
if mibBuilder.loadTexts: externalVchTable.setStatus('current')
externalVchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalVchEntry.setStatus('current')
externalVchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchRowStatus.setStatus('current')
externalVchConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 2), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalVchConnectionState.setStatus('current')
externalVchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 3), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchType.setStatus('current')
externalVchTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 4), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchTransmitChannel.setStatus('current')
externalVchChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 5), FspR7ChannelBandwidth()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchChannelBandwith.setStatus('current')
externalVchAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchAlias.setStatus('current')
externalVchFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFarEndLocation.setStatus('current')
externalVchBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchBitrate.setStatus('current')
externalVchFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 9), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFecType.setStatus('current')
externalVchLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 10), FspR7LineCoding()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchLineCoding.setStatus('current')
externalVchFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 11), FspR7FrameFormat()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchFrameFormat.setStatus('current')
externalVchOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9900, 600))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchOpticalPowerTx.setStatus('current')
externalVchOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchOsnrTransmit.setStatus('current')
externalVchPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchPmdTransmit.setStatus('current')
externalVchChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchChromDisperTx.setStatus('current')
externalVchMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 58))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinOsnrRcv.setStatus('current')
externalVchMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinOptPowerRcv.setStatus('current')
externalVchMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2500, 1000))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxOptPowerRcv.setStatus('current')
externalVchMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('ps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxPmdRcv.setStatus('current')
externalVchMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMinChromDisperRcv.setStatus('current')
externalVchMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60000, 60000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxChromDisperRcv.setStatus('current')
externalVchMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 5, 1, 22), FspR7MaxBitErrorRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: externalVchMaxBitErrorRate.setStatus('current')
endOfEci = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEci.setStatus('current')
channelTracesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1), )
if mibBuilder.loadTexts: channelTracesTable.setStatus('current')
channelTracesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "channelTracesIndexNo1"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo2"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo3"), (0, "ADVA-FSPR7-MIB", "channelTracesIndexNo4"), (0, "ADVA-FSPR7-MIB", "channelTracesClassName"), (0, "ADVA-FSPR7-MIB", "channelTracesChannelNumber"), (0, "ADVA-FSPR7-MIB", "channelTracesRouteId"), (0, "ADVA-FSPR7-MIB", "channelTracesElementId"))
if mibBuilder.loadTexts: channelTracesEntry.setStatus('current')
channelTracesIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo1.setStatus('current')
channelTracesIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo2.setStatus('current')
channelTracesIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo3.setStatus('current')
channelTracesIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: channelTracesIndexNo4.setStatus('current')
channelTracesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: channelTracesClassName.setStatus('current')
channelTracesChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 6), FspR7ChannelNumber())
if mibBuilder.loadTexts: channelTracesChannelNumber.setStatus('current')
channelTracesRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 7), FspR7NCTraceId())
if mibBuilder.loadTexts: channelTracesRouteId.setStatus('current')
channelTracesElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: channelTracesElementId.setStatus('current')
channelTracesFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesFromAid.setStatus('current')
channelTracesToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesToAid.setStatus('current')
channelTracesRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 11), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesRouteType.setStatus('current')
channelTracesChannelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 12), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelRx.setStatus('current')
channelTracesChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 1, 1, 13), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTracesChannelTx.setStatus('current')
endOfchannelTracesTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfchannelTracesTable.setStatus('current')
ratFrom = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratFrom.setStatus('current')
ratTo = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratTo.setStatus('current')
ratChIngress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 5), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChIngress.setStatus('current')
ratChEgress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 6), FspR7ChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratChEgress.setStatus('current')
ratSuperChannel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 7), FspR7NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannel.setStatus('current')
ratSuperChannelFq = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 8), FspR7ChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ratSuperChannelFq.setStatus('current')
ratStartPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10), )
if mibBuilder.loadTexts: ratStartPointTable.setStatus('current')
ratStartPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "ratStartPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "ratStartPointClassName"))
if mibBuilder.loadTexts: ratStartPointEntry.setStatus('current')
ratStartPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo1.setStatus('current')
ratStartPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo2.setStatus('current')
ratStartPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo3.setStatus('current')
ratStartPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ratStartPointIndexNo4.setStatus('current')
ratStartPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 5), EntityClassName())
if mibBuilder.loadTexts: ratStartPointClassName.setStatus('current')
ratStartPointAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointAidString.setStatus('current')
ratStartPointTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointTableId.setStatus('current')
ratStartPointChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 8), FspR7ChannelNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelNumber.setStatus('current')
ratStartPointChannelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 9), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointChannelGroup.setStatus('current')
ratStartPointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10, 1, 10), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratStartPointClass.setStatus('current')
endOfRatStartPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatStartPointTable.setStatus('current')
ratAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12), )
if mibBuilder.loadTexts: ratAnalyzerTable.setStatus('current')
ratAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratAnalyzerRouteId"), (0, "ADVA-FSPR7-MIB", "ratAnalyzerElementId"))
if mibBuilder.loadTexts: ratAnalyzerEntry.setStatus('current')
ratAnalyzerRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerRouteId.setStatus('current')
ratAnalyzerElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ratAnalyzerElementId.setStatus('current')
ratAnalyzerFromAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerFromAid.setStatus('current')
ratAnalyzerToAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerToAid.setStatus('current')
ratAnalyzerChannelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 5), FspR7ChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerChannelTx.setStatus('current')
ratAnalyzerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 6), FspR7StateConnection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerState.setStatus('current')
ratAnalyzerRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 12, 1, 7), FspR7NCTRouteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratAnalyzerRouteType.setStatus('current')
endOfRatAnalyzerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatAnalyzerTable.setStatus('current')
ratBlockingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14), )
if mibBuilder.loadTexts: ratBlockingTable.setStatus('current')
ratBlockingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ratBlockingElementId"))
if mibBuilder.loadTexts: ratBlockingEntry.setStatus('current')
ratBlockingElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ratBlockingElementId.setStatus('current')
ratBlockingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 2), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingType.setStatus('current')
ratBlockingConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 3), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingConnState.setStatus('current')
ratBlockingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 14, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratBlockingAid.setStatus('current')
endOfRatBlockingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRatBlockingTable.setStatus('current')
endOfserviceDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfserviceDiagnostics.setStatus('current')
changePhysicalPortServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceTable.setStatus('current')
changePhysicalPortServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceEntry.setStatus('current')
changePhysicalPortServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceRowStatus.setStatus('current')
changePhysicalPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceType.setStatus('current')
changePhysicalPortServiceAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAdmin.setStatus('current')
changePhysicalPortServiceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlias.setStatus('current')
changePhysicalPortServiceAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 5), FspR7AlsMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAlsMode.setStatus('current')
changePhysicalPortServiceBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 6), FspR7PortBehaviour()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceBehaviour.setStatus('current')
changePhysicalPortServiceDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50000, 50000))).setUnits('ps/nm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionSetting.setStatus('current')
changePhysicalPortServiceDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 8), FspR7DispersionModes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDispersionMode.setStatus('current')
changePhysicalPortServiceChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 9), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelProv.setStatus('current')
changePhysicalPortServiceWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 10), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceWdmRxChannel.setStatus('current')
changePhysicalPortServiceCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 11), FspR7CodeGain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceCodeGain.setStatus('current')
changePhysicalPortServiceXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 12), FspR7XfpDecisionThres()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceXfpDecisionThres.setStatus('current')
changePhysicalPortServiceDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 13), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceDisparityCorrection.setStatus('current')
changePhysicalPortServiceEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 14), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceEqlzAdmin.setStatus('current')
changePhysicalPortServiceErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 15), FspR7ErrorFwdMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceErrorForwarding.setStatus('current')
changePhysicalPortServiceFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 16), FspR7FecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFecType.setStatus('current')
changePhysicalPortServiceFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 17), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFarEndCommunication.setStatus('current')
changePhysicalPortServiceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 18), FspR7FlowControlMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceFlowControl.setStatus('current')
changePhysicalPortServiceLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 19), FspR7ChannelIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaneChannelSetting.setStatus('current')
changePhysicalPortServiceLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 20), FspR7LaserDelayTimer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserDelayTimer.setStatus('current')
changePhysicalPortServiceLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffTimer.setStatus('current')
changePhysicalPortServiceLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOnTimer.setStatus('current')
changePhysicalPortServiceLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 23), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLaserOffDelayFunction.setStatus('current')
changePhysicalPortServiceAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 24), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceAutoPTassignment.setStatus('current')
changePhysicalPortServiceTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 25), FspR7ManualAuto()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTributarySlotMethod.setStatus('current')
changePhysicalPortServiceOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 100))).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpticalSetPoint.setStatus('current')
changePhysicalPortServiceOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 27), FspR7OpuPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOpuPayloadType.setStatus('current')
changePhysicalPortServiceSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 28), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetLine.setStatus('current')
changePhysicalPortServiceSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhMs.setStatus('current')
changePhysicalPortServiceSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOtu.setStatus('current')
changePhysicalPortServiceSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOdu.setStatus('current')
changePhysicalPortServiceSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThreshold.setStatus('current')
changePhysicalPortServiceSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPcslThreshold.setStatus('current')
changePhysicalPortServiceSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 34), FspR7BERThreshold()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSonetSection.setStatus('current')
changePhysicalPortServiceSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresSdhSection.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmA.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmB.setStatus('current')
changePhysicalPortServiceSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegThresOduTcmC.setStatus('current')
changePhysicalPortServiceSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSignalDegradePeriod.setStatus('current')
changePhysicalPortServiceSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOdu.setStatus('current')
changePhysicalPortServiceSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOtu.setStatus('current')
changePhysicalPortServiceSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodIntegration.setStatus('current')
changePhysicalPortServiceSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodSdhSection.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmA.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmB.setStatus('current')
changePhysicalPortServiceSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceSigDegPeriodOduTcmC.setStatus('current')
changePhysicalPortServiceOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 47), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOtnStuffing.setStatus('current')
changePhysicalPortServiceTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 48), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmALevel.setStatus('current')
changePhysicalPortServiceTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 49), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmBLevel.setStatus('current')
changePhysicalPortServiceTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 50), OtnTcmLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTcmCLevel.setStatus('current')
changePhysicalPortServiceTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 51), OhTerminationLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTerminationLevel.setStatus('current')
changePhysicalPortServiceTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 52), SonetTimingSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimingSource.setStatus('current')
changePhysicalPortServiceTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 53), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOdu.setStatus('current')
changePhysicalPortServiceTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 54), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOtu.setStatus('current')
changePhysicalPortServiceTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 55), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeSonetSection.setStatus('current')
changePhysicalPortServiceTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 56), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmA.setStatus('current')
changePhysicalPortServiceTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 57), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmB.setStatus('current')
changePhysicalPortServiceTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 58), TimMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTimModeOduTcmC.setStatus('current')
changePhysicalPortServiceTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 59), SonetTraceForm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceFormSonetSection.setStatus('current')
changePhysicalPortServiceTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedSonetSection.setStatus('current')
changePhysicalPortServiceTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSonetSection.setStatus('current')
changePhysicalPortServiceTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOtu.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOtu.setStatus('current')
changePhysicalPortServiceTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 66), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOdu.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOdu.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmA.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmA.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmB.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmB.setStatus('current')
changePhysicalPortServiceTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceExpectedOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitSapiOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitDapiOduTcmC.setStatus('current')
changePhysicalPortServiceTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTraceTransmitOpspOduTcmC.setStatus('current')
changePhysicalPortServiceTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 82), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffDelay.setStatus('current')
changePhysicalPortServiceVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 83), FspR7VoaMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaMode.setStatus('current')
changePhysicalPortServiceVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceVoaSetpoint.setStatus('current')
changePhysicalPortServiceTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 85), FspR7TxOffOnTm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffOnTm.setStatus('current')
changePhysicalPortServiceTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 86), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOffTimer.setStatus('current')
changePhysicalPortServiceTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 87), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceTxOnTimer.setStatus('current')
changePhysicalPortServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 88), FspR7TransmissionMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceMode.setStatus('current')
changePhysicalPortServiceChannelPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 89), FspR7ChannelRangeInventory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelPlan.setStatus('current')
changePhysicalPortServiceOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 90), FspR7Optimize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceOptimize.setStatus('current')
changePhysicalPortServiceLinkSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 91), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceLinkSetup.setStatus('current')
changePhysicalPortServiceChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 1, 1, 92), FspR7ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: changePhysicalPortServiceChannelSpacing.setStatus('current')
endOfChangeService = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeService.setStatus('current')
haTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1), )
if mibBuilder.loadTexts: haTable.setStatus('current')
haEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: haEntry.setStatus('current')
haProtectionIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haProtectionIndexAid.setStatus('current')
haInhSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 2), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haInhSwitching.setStatus('current')
haSwitchToDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 3), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: haSwitchToDuplex.setStatus('current')
haSwitchOverCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 4), FspR7SwitchOverCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSwitchOverCause.setStatus('current')
haSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSoftwareVersion.setStatus('current')
endOfHaTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfHaTable.setStatus('current')
ffpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3), )
if mibBuilder.loadTexts: ffpTable.setStatus('current')
ffpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpEntry.setStatus('current')
ffpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRowStatus.setStatus('current')
ffpCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 2), FfpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpCreationMethod.setStatus('current')
ffpSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 3), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSDswitching.setStatus('current')
ffpHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 4), ApsHoldoffTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpHoldOffTime.setStatus('current')
ffpProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 5), ProtectionMech()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionMech.setStatus('current')
ffpWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWorkingAid.setStatus('current')
ffpProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpProtectionAid.setStatus('current')
ffpSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 8), EnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpSignalDegradeSwitching.setStatus('current')
ffpSignalFailureSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 9), EnableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpSignalFailureSwitching.setStatus('current')
ffpFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpFarEndIp.setStatus('current')
ffpPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpPeerAid.setStatus('current')
ffpApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 12), ApsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpApsType.setStatus('current')
ffpRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 13), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpRevertMode.setStatus('current')
ffpWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setUnits('min').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpWaitToRestore.setStatus('current')
ffpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 15), ApsDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpDirection.setStatus('current')
ffpProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 16), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpProtectionType.setStatus('current')
ffpApsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 17), FspR7ApsChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpApsChannel.setStatus('current')
ffpApsFarEndModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 3, 1, 18), FspR7ApsFarEndModule()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ffpApsFarEndModule.setStatus('current')
endOfFfpTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpTable.setStatus('current')
endOfProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtection.setStatus('current')
aidMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1), )
if mibBuilder.loadTexts: aidMappingTable.setStatus('current')
aidMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "aidMappingAidString"))
if mibBuilder.loadTexts: aidMappingEntry.setStatus('current')
aidMappingAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: aidMappingAidString.setStatus('current')
aidMappingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingId.setStatus('current')
aidMappingString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aidMappingString.setStatus('current')
endOfAidMappingTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfAidMappingTable.setStatus('current')
endOfTranslation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTranslation.setStatus('current')
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 1), FspR7SshHostKeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('current')
newSshHostKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 2), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSshHostKey.setStatus('current')
accessWarning = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 3), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarning.setStatus('current')
accessWarningMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 4), FspR7SnmpLongString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessWarningMessage.setStatus('current')
showLastLoginSuccess = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 5), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginSuccess.setStatus('current')
showLastLoginFail = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 6), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: showLastLoginFail.setStatus('current')
writeAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 7), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessStatus.setStatus('current')
writeAccessRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(60, 3600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeAccessRequestTimeout.setStatus('current')
virtualSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15), )
if mibBuilder.loadTexts: virtualSessionTable.setStatus('current')
virtualSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "virtualSessionId"))
if mibBuilder.loadTexts: virtualSessionEntry.setStatus('current')
virtualSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: virtualSessionId.setStatus('current')
virtualSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 2), FspR7VSessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionStatus.setStatus('current')
virtualSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionTimeout.setStatus('current')
virtualSessionWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 4), FspR7VSessWriteAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSessionWriteAccess.setStatus('current')
virtualSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionUserName.setStatus('current')
virtualSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionIpAddress.setStatus('current')
virtualSessionChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 7), FspR7VSessChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeReason.setStatus('current')
virtualSessionChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 15, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSessionChangeTime.setStatus('current')
packetFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 16), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFiltering.setStatus('current')
whitelistFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 17), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whitelistFiltering.setStatus('current')
restrictToSysIP = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 18), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restrictToSysIP.setStatus('current')
icmpFiltering = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 19), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpFiltering.setStatus('current')
icmpEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 20), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpEchoRequests.setStatus('current')
icmpSourceQuench = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 21), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpSourceQuench.setStatus('current')
icmpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 22), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpRedirect.setStatus('current')
ocmpTimestampRequest = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 23), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocmpTimestampRequest.setStatus('current')
icmpAddrMask = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 24), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpAddrMask.setStatus('current')
dosProtection = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 25), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosProtection.setStatus('current')
isolateInbandChan = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 26), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isolateInbandChan.setStatus('current')
ipForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 27), FspR7IpForwarding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('current')
whitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30), )
if mibBuilder.loadTexts: whitelistTable.setStatus('current')
whitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "whitelistId"))
if mibBuilder.loadTexts: whitelistEntry.setStatus('current')
whitelistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: whitelistId.setStatus('current')
whitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistRowStatus.setStatus('current')
whitelistAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 3), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistAdmin.setStatus('current')
whitelistIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpMask.setStatus('current')
whitelistIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 30, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: whitelistIpAddr.setStatus('current')
lockSafety = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 31), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lockSafety.setStatus('current')
unlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: unlockTime.setStatus('current')
sslRenewMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 33), FspR7RenewMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslRenewMode.setStatus('current')
sslKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 34), FspR7KeyLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslKeyLength.setStatus('current')
sslValidityPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 35), FspR7ValidityPeriod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslValidityPeriod.setStatus('current')
sslCertApply = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 36), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertApply.setStatus('current')
sslCertIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 37), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertIp.setStatus('current')
trapSource = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 38), FspR7AppType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSource.setStatus('current')
trapUser = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 39), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapUser.setStatus('current')
removeUsers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 40), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeUsers.setStatus('current')
authTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 41), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapUserName.setStatus('current')
authTrapAccountState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 42), FspR7AccStateTrap()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapAccountState.setStatus('current')
privilegeChangeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43), )
if mibBuilder.loadTexts: privilegeChangeTable.setStatus('current')
privilegeChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "privilegeChangeId"))
if mibBuilder.loadTexts: privilegeChangeEntry.setStatus('current')
privilegeChangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: privilegeChangeId.setStatus('current')
privilegeChangeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeUserName.setStatus('current')
privilegeChangeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeIpAddress.setStatus('current')
privilegeChangeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 4), FspR7UserInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeInterface.setStatus('current')
privilegeChangeCurrentPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 5), FspR7PrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeCurrentPrivilege.setStatus('current')
privilegeChangeRequestedPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 6), FspR7PrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRequestedPrivilege.setStatus('current')
privilegeChangeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeDuration.setStatus('current')
privilegeChangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 8), FspR7RequestAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privilegeChangeAction.setStatus('current')
privilegeChangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 9), FspR7RequestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeState.setStatus('current')
privilegeChangeRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 10), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRemainingTime.setStatus('current')
privilegeChangeRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 43, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privilegeChangeRemoteName.setStatus('current')
authTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 45), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSrcIp.setStatus('current')
authTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 46), FspR7AccessStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapStatus.setStatus('current')
authTrapSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 47), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSessionId.setStatus('current')
authTrapProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 48), FspR7AccessProtocol()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapProtocol.setStatus('current')
authTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 49), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapPort.setStatus('current')
authTrapAccess = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 50), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapAccess.setStatus('current')
authTrapSuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 51), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapSuccessfulAuthCount.setStatus('current')
authTrapUnsuccessfulAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 52), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authTrapUnsuccessfulAuthCount.setStatus('current')
userManagementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53), )
if mibBuilder.loadTexts: userManagementTable.setStatus('current')
userManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "userManagementUsername"))
if mibBuilder.loadTexts: userManagementEntry.setStatus('current')
userManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementRowStatus.setStatus('current')
userManagementUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementUsername.setStatus('current')
userManagementPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 3), FspR7SnmpPrivLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivilegeLevel.setStatus('current')
userManagementSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 4), FspR7SnmpSecuLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementSecurityLevel.setStatus('current')
userManagementAuthPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAuthPrivKey.setStatus('current')
userManagementAuthPrivKeyOld = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAuthPrivKeyOld.setStatus('current')
userManagementTl1TimeoutAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 7), FspR7YesNo()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementTl1TimeoutAvailable.setStatus('current')
userManagementTl1TimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementTl1TimeoutValue.setStatus('current')
userManagementSnmpTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600))).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementSnmpTimeoutValue.setStatus('current')
userManagementUdpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 10), FspR7SessionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementUdpSessionStatus.setStatus('current')
userManagementAccountFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 11), FspR7AccountFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccountFlag.setStatus('current')
userManagementPasswordMinAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordMinAge.setStatus('current')
userManagementPasswordMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordMaxAge.setStatus('current')
userManagementPasswordExpirationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPasswordExpirationPeriod.setStatus('current')
userManagementAccountState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 15), FspR7AccState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccountState.setStatus('current')
userManagementPasswordExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordExpirationDate.setStatus('current')
userManagementPasswordLastChangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordLastChangeDate.setStatus('current')
userManagementFailedLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementFailedLoginAttempts.setStatus('current')
userManagementLastLoginFailInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementLastLoginFailInfo.setStatus('current')
userManagementLastLoginSuccessInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementLastLoginSuccessInfo.setStatus('current')
userManagementInactivityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('day').setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementInactivityPeriod.setStatus('current')
userManagementAccessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 22), FspR7TimeShort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessStartTime.setStatus('current')
userManagementAccessEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 23), FspR7TimeShort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessEndTime.setStatus('current')
userManagementAccessDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 24), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementAccessDays.setStatus('current')
userManagementExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 25), FspR7Date()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementExpirationDate.setStatus('current')
userManagementSso2fa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 26), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementSso2fa.setStatus('current')
userManagementPasswordHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 27), FspR7PasswordHashType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userManagementPasswordHashType.setStatus('current')
userManagementPrivacyKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 28), FspR7PrivacyKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivacyKeyType.setStatus('current')
userManagementPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 53, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userManagementPrivacyKey.setStatus('current')
activeUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54), )
if mibBuilder.loadTexts: activeUsersTable.setStatus('current')
activeUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "activeUsersSessionGroupName"))
if mibBuilder.loadTexts: activeUsersEntry.setStatus('current')
activeUsersSessionGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUsersSessionGroupName.setStatus('current')
activeUsersInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 2), FspR7AccessProtocolCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUsersInterfaces.setStatus('current')
activeUsersTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 54, 1, 3), FspR7TerminateSessions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeUsersTerminate.setStatus('current')
ncuPortC2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 55), FspR7AccessNcuC2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncuPortC2.setStatus('current')
rpFilter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 56), FspR7RPFilter()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpFilter.setStatus('current')
sso2fa = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 57), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sso2fa.setStatus('current')
remoteAuth = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 60), FspR7RemoteAuth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAuth.setStatus('current')
remoteAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 61), FspR7RemoteAuthProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAuthProtocol.setStatus('current')
tlsSupport = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 8, 62), FspR7TLSSupport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlsSupport.setStatus('current')
knownHostIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3), )
if mibBuilder.loadTexts: knownHostIPv6Table.setStatus('current')
knownHostIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "knownHostIPv6IP"), (0, "ADVA-FSPR7-MIB", "knownHostIPv6KeyEncryptAlgorithm"))
if mibBuilder.loadTexts: knownHostIPv6Entry.setStatus('current')
knownHostIPv6IP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: knownHostIPv6IP.setStatus('current')
knownHostIPv6KeyEncryptAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 2), FspR7SshHostKeyEncryptAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownHostIPv6KeyEncryptAlgorithm.setStatus('current')
knownHostIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6RowStatus.setStatus('current')
knownHostIPv6FingerPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 3, 1, 4), FspR7SnmpHexString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownHostIPv6FingerPrint.setStatus('current')
ipv6ActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14), )
if mibBuilder.loadTexts: ipv6ActRoutesTable.setStatus('current')
ipv6ActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6ActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6ActRoutesClassName"))
if mibBuilder.loadTexts: ipv6ActRoutesEntry.setStatus('current')
ipv6ActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesDestination.setStatus('current')
ipv6ActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6ActRoutesPrefix.setStatus('current')
ipv6ActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6ActRoutesNextHop.setStatus('current')
ipv6ActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesShelfNo.setStatus('current')
ipv6ActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesSlotNo.setStatus('current')
ipv6ActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesPortNo.setStatus('current')
ipv6ActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6ActRoutesExtNo.setStatus('current')
ipv6ActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6ActRoutesClassName.setStatus('current')
ipv6ActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesRowStatus.setStatus('current')
ipv6ActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesType.setStatus('current')
ipv6ActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6ActRoutesMetric.setStatus('current')
ipv6ActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesDestIp.setStatus('current')
ipv6ActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPrefixLen.setStatus('current')
ipv6ActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesNextHopIp.setStatus('current')
ipv6ActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 14, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ActRoutesPort.setStatus('current')
ipv6InActRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16), )
if mibBuilder.loadTexts: ipv6InActRoutesTable.setStatus('current')
ipv6InActRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ipv6InActRoutesDestination"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPrefix"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesNextHop"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesShelfNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesSlotNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesPortNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesExtNo"), (0, "ADVA-FSPR7-MIB", "ipv6InActRoutesClassName"))
if mibBuilder.loadTexts: ipv6InActRoutesEntry.setStatus('current')
ipv6InActRoutesDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 1), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesDestination.setStatus('current')
ipv6InActRoutesPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ipv6InActRoutesPrefix.setStatus('current')
ipv6InActRoutesNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 3), FspR7Ipv6Address())
if mibBuilder.loadTexts: ipv6InActRoutesNextHop.setStatus('current')
ipv6InActRoutesShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesShelfNo.setStatus('current')
ipv6InActRoutesSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 5), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesSlotNo.setStatus('current')
ipv6InActRoutesPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesPortNo.setStatus('current')
ipv6InActRoutesExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 7), Unsigned32())
if mibBuilder.loadTexts: ipv6InActRoutesExtNo.setStatus('current')
ipv6InActRoutesClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 8), EntityClassName())
if mibBuilder.loadTexts: ipv6InActRoutesClassName.setStatus('current')
ipv6InActRoutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesRowStatus.setStatus('current')
ipv6InActRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 10), FspR7Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesType.setStatus('current')
ipv6InActRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6InActRoutesMetric.setStatus('current')
ipv6InActRoutesDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesDestIp.setStatus('current')
ipv6InActRoutesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPrefixLen.setStatus('current')
ipv6InActRoutesNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesNextHopIp.setStatus('current')
ipv6InActRoutesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 16, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InActRoutesPort.setStatus('current')
syslogIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30), )
if mibBuilder.loadTexts: syslogIPv4Table.setStatus('current')
syslogIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv4Ip"))
if mibBuilder.loadTexts: syslogIPv4Entry.setStatus('current')
syslogIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv4Ip.setStatus('current')
syslogIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4RowStatus.setStatus('current')
syslogIPv4Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4Reporting.setStatus('current')
syslogIPv4DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4DbchgReports.setStatus('current')
syslogIPv4SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4SecurityReports.setStatus('current')
syslogIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv4IpAddr.setStatus('current')
syslogIPv4SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 30, 1, 7), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv4SourceIp.setStatus('current')
syslogIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32), )
if mibBuilder.loadTexts: syslogIPv6Table.setStatus('current')
syslogIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "syslogIPv6Ip"))
if mibBuilder.loadTexts: syslogIPv6Entry.setStatus('current')
syslogIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogIPv6Ip.setStatus('current')
syslogIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6RowStatus.setStatus('current')
syslogIPv6Reporting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 3), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6Reporting.setStatus('current')
syslogIPv6DbchgReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 4), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6DbchgReports.setStatus('current')
syslogIPv6SecurityReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6SecurityReports.setStatus('current')
syslogIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogIPv6IpAddr.setStatus('current')
syslogIPv6SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 9, 32, 1, 7), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogIPv6SourceIp.setStatus('current')
ntpIPv4Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20), )
if mibBuilder.loadTexts: ntpIPv4Table.setStatus('current')
ntpIPv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv4Ip"))
if mibBuilder.loadTexts: ntpIPv4Entry.setStatus('current')
ntpIPv4Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv4Ip.setStatus('current')
ntpIPv4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4RowStatus.setStatus('current')
ntpIPv4SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4SourceIp.setStatus('current')
ntpIPv4Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 4), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv4Test.setStatus('current')
ntpIPv4TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4TestStatus.setStatus('current')
ntpIPv4SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4SyncStatus.setStatus('current')
ntpIPv4Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv4Admin.setStatus('current')
ntpIPv4OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4OperState.setStatus('current')
ntpIPv4IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 20, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv4IpAddr.setStatus('current')
ntpIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22), )
if mibBuilder.loadTexts: ntpIPv6Table.setStatus('current')
ntpIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "ntpIPv6Ip"))
if mibBuilder.loadTexts: ntpIPv6Entry.setStatus('current')
ntpIPv6Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 1), FspR7Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpIPv6Ip.setStatus('current')
ntpIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6RowStatus.setStatus('current')
ntpIPv6SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 3), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6SourceIp.setStatus('current')
ntpIPv6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 4), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIPv6Test.setStatus('current')
ntpIPv6TestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 5), FspR7NtpTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6TestStatus.setStatus('current')
ntpIPv6SyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 6), FspR7NtpSyncStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6SyncStatus.setStatus('current')
ntpIPv6Admin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 7), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpIPv6Admin.setStatus('current')
ntpIPv6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 8), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6OperState.setStatus('current')
ntpIPv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10, 22, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpIPv6IpAddr.setStatus('current')
unusedTrapSinkId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedTrapSinkId.setStatus('current')
trapSinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30), )
if mibBuilder.loadTexts: trapSinkTable.setStatus('current')
trapSinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "trapSinkId"))
if mibBuilder.loadTexts: trapSinkEntry.setStatus('current')
trapSinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSinkId.setStatus('current')
trapSinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkRowStatus.setStatus('current')
trapSinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 3), FspR7SnmpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkVersion.setStatus('current')
trapSinkIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 4), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIpMode.setStatus('current')
trapSinkIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIPv4.setStatus('current')
trapSinkIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIPv6.setStatus('current')
trapSinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkPort.setStatus('current')
trapSinkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkCommunity.setStatus('current')
trapSinkUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkUserName.setStatus('current')
trapSinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 10), FspR7TrapsinkLifetime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkDuration.setStatus('current')
trapSinkIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 30, 1, 11), SourceIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapSinkIpSubnet.setStatus('current')
unusedCommunityId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unusedCommunityId.setStatus('current')
communityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40), )
if mibBuilder.loadTexts: communityTable.setStatus('current')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "communityId"))
if mibBuilder.loadTexts: communityEntry.setStatus('current')
communityId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: communityId.setStatus('current')
communityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityRowStatus.setStatus('current')
communityIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 3), FspR7IpMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIpMode.setStatus('current')
communityIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv4.setStatus('current')
communityIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIpMask.setStatus('current')
communityIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv6.setStatus('current')
communityIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityIPv6PrefixLen.setStatus('current')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityName.setStatus('current')
communityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 11, 40, 1, 9), FspR7Access()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: communityAccess.setStatus('current')
neCommand = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 1), FspR7Command()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommand.setStatus('current')
neCommandState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 2), FspR7CommandState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCommandState.setStatus('current')
neCommandBusy = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 3), FspR7CommandBusy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCommandBusy.setStatus('current')
neCommandIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandIp.setStatus('current')
neCommandLogin = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandLogin.setStatus('current')
neCommandPass = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandPass.setStatus('current')
neCommandPath = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandPath.setStatus('current')
neCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandFile.setStatus('current')
neCommandProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 11), FspR7TransferProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandProtocol.setStatus('current')
neCommandSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 12), SourceIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neCommandSourceIp.setStatus('current')
neSdpType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 13), FspR7SdpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSdpType.setStatus('current')
neDbOnActivate = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 14), RestoreActivation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDbOnActivate.setStatus('current')
neAutoDhcp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 15), FspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDhcp.setStatus('current')
errorMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 16), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorMessage.setStatus('current')
fileDataTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1), )
if mibBuilder.loadTexts: fileDataTable.setStatus('current')
fileDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "fileDataArea"), (0, "ADVA-FSPR7-MIB", "fileDataId"))
if mibBuilder.loadTexts: fileDataEntry.setStatus('current')
fileDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileDataId.setStatus('current')
fileDataArea = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 2), FileArea()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataArea.setStatus('current')
fileDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 3), FileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataType.setStatus('current')
fileDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 4), Unsigned32()).setUnits('Byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataSize.setStatus('current')
fileDataCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataCreationTime.setStatus('current')
fileDataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataVersion.setStatus('current')
fileDataGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 7), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataGrade.setStatus('current')
fileDataComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataComment.setStatus('current')
fileDataFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataFileName.setStatus('current')
fileDataPgmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 10), PgmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataPgmType.setStatus('current')
fileDataMpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataMpName.setStatus('current')
fileDataRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDataRevision.setStatus('current')
fileDataMpTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 13), FspR7MpTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataMpTag.setStatus('current')
fileDataMpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 12, 90, 1, 1, 14), FspR7MpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDataMpState.setStatus('current')
containerHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20), )
if mibBuilder.loadTexts: containerHdSystemTable.setStatus('current')
containerHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerHdSystemId"))
if mibBuilder.loadTexts: containerHdSystemEntry.setStatus('current')
containerHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: containerHdSystemId.setStatus('current')
containerHdSystemAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemAidString.setStatus('current')
containerHdSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemClass.setStatus('current')
containerHdSystemParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 20, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerHdSystemParentId.setStatus('current')
hdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21), )
if mibBuilder.loadTexts: hdSystemTable.setStatus('current')
hdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "hdSystemId"))
if mibBuilder.loadTexts: hdSystemEntry.setStatus('current')
hdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hdSystemId.setStatus('current')
hdSystemAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemAidString.setStatus('current')
hdSystemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemRowStatus.setStatus('current')
hdSystemDcnAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemDcnAid.setStatus('current')
hdSystemAdopt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 5), FspR7EnableDisable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemAdopt.setStatus('deprecated')
hdSystemAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 6), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemAdmin.setStatus('current')
hdSystemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 7), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemOperState.setStatus('current')
hdSystemSerialNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 8), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemSerialNumbers.setStatus('current')
hdSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 9), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemClass.setStatus('current')
hdSystemParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSystemParentId.setStatus('current')
hdSystemNendLogicalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 21, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdSystemNendLogicalIpAddr.setStatus('current')
containerShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40), )
if mibBuilder.loadTexts: containerShelfmapTable.setStatus('current')
containerShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "containerShelfmapId"))
if mibBuilder.loadTexts: containerShelfmapEntry.setStatus('current')
containerShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: containerShelfmapId.setStatus('current')
containerShelfmapAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapAidString.setStatus('current')
containerShelfmapSerialNumInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapSerialNumInv.setStatus('current')
containerShelfmapTypeInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 4), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapTypeInv.setStatus('current')
containerShelfmapEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 5), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapEquipmentState.setStatus('current')
containerShelfmapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 6), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapClass.setStatus('current')
containerShelfmapParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 40, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerShelfmapParentId.setStatus('current')
shelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41), )
if mibBuilder.loadTexts: shelfmapTable.setStatus('current')
shelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "shelfmapId"))
if mibBuilder.loadTexts: shelfmapEntry.setStatus('current')
shelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfmapId.setStatus('current')
shelfmapAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapAidString.setStatus('current')
shelfmapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapRowStatus.setStatus('current')
shelfmapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapIpAddr.setStatus('current')
shelfmapEqptIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapEqptIdentifier.setStatus('current')
shelfmapSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapSerialNum.setStatus('current')
shelfmapSerialNumInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapSerialNumInv.setStatus('current')
shelfmapTypeInv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 8), FspR7EquipmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapTypeInv.setStatus('current')
shelfmapEquipmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 9), EquipmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapEquipmentState.setStatus('current')
shelfmapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 10), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfmapAdmin.setStatus('current')
shelfmapOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 11), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapOperState.setStatus('current')
shelfmapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 12), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapClass.setStatus('current')
shelfmapParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 41, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfmapParentId.setStatus('current')
alarmHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100), )
if mibBuilder.loadTexts: alarmHdSystemTable.setStatus('current')
alarmHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmHdSystemId"), (0, "ADVA-FSPR7-MIB", "alarmHdSystemType"))
if mibBuilder.loadTexts: alarmHdSystemEntry.setStatus('current')
alarmHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmHdSystemId.setStatus('current')
alarmHdSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmHdSystemType.setStatus('current')
alarmHdSystemSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemSeverity.setStatus('current')
alarmHdSystemAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 4), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemAffect.setStatus('current')
alarmHdSystemTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 100, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHdSystemTimeStamp.setStatus('current')
alarmSeverityHdSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101), )
if mibBuilder.loadTexts: alarmSeverityHdSystemTable.setStatus('current')
alarmSeverityHdSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmSeverityHdSystemId"), (0, "ADVA-FSPR7-MIB", "alarmSeverityHdSystemType"))
if mibBuilder.loadTexts: alarmSeverityHdSystemEntry.setStatus('current')
alarmSeverityHdSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSeverityHdSystemId.setStatus('current')
alarmSeverityHdSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityHdSystemType.setStatus('current')
alarmSeverityHdSystemValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 101, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverityHdSystemValue.setStatus('current')
alarmShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102), )
if mibBuilder.loadTexts: alarmShelfmapTable.setStatus('current')
alarmShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmShelfmapId"), (0, "ADVA-FSPR7-MIB", "alarmShelfmapType"))
if mibBuilder.loadTexts: alarmShelfmapEntry.setStatus('current')
alarmShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmShelfmapId.setStatus('current')
alarmShelfmapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmShelfmapType.setStatus('current')
alarmShelfmapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapSeverity.setStatus('current')
alarmShelfmapAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 4), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapAffect.setStatus('current')
alarmShelfmapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 102, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmShelfmapTimeStamp.setStatus('current')
alarmSeverityShelfmapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103), )
if mibBuilder.loadTexts: alarmSeverityShelfmapTable.setStatus('current')
alarmSeverityShelfmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "alarmSeverityShelfmapId"), (0, "ADVA-FSPR7-MIB", "alarmSeverityShelfmapType"))
if mibBuilder.loadTexts: alarmSeverityShelfmapEntry.setStatus('current')
alarmSeverityShelfmapId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSeverityShelfmapId.setStatus('current')
alarmSeverityShelfmapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 2), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityShelfmapType.setStatus('current')
alarmSeverityShelfmapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 103, 1, 3), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverityShelfmapValue.setStatus('current')
licenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1), )
if mibBuilder.loadTexts: licenseManagerTable.setStatus('current')
licenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"))
if mibBuilder.loadTexts: licenseManagerEntry.setStatus('current')
licenseManagerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: licenseManagerShelfNo.setStatus('current')
licenseManagerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: licenseManagerSlotNo.setStatus('current')
licenseManagerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: licenseManagerPortNo.setStatus('current')
licenseManagerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: licenseManagerExtNo.setStatus('current')
licenseManagerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: licenseManagerClassName.setStatus('current')
licenseManagerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerAidString.setStatus('current')
licenseManagerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerClass.setStatus('current')
licenseManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerRowStatus.setStatus('current')
licenseManagerLicenseManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 9), FspR7LicenseManagement()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: licenseManagerLicenseManagement.setStatus('current')
licenseManagerLicenseServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: licenseManagerLicenseServer.setStatus('current')
licenseManagerLicenseServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 11), FspR7LicenseServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerLicenseServerStatus.setStatus('current')
licenseManagerLicenseFilesInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 12), FspR7LicenseFilesInstall()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseManagerLicenseFilesInstall.setStatus('current')
licenseManagerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 13), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerAdmin.setStatus('current')
licenseManagerSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 14), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerSecondaryStates.setStatus('current')
licenseManagerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 15), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerOperState.setStatus('current')
licenseManagerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 1, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseManagerParentId.setStatus('current')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: licenseShelfNo.setStatus('current')
licenseSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: licenseSlotNo.setStatus('current')
licensePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: licensePortNo.setStatus('current')
licenseExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: licenseExtNo.setStatus('current')
licenseClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: licenseClassName.setStatus('current')
licenseAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAidString.setStatus('current')
licenseClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 7), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseClass.setStatus('current')
licenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRowStatus.setStatus('current')
licenseLicenseName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseName.setStatus('current')
licenseLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 10), FspR7LicenseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseType.setStatus('current')
licenseLicenseCountAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountAvailable.setStatus('current')
licenseLicenseCountUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountUsed.setStatus('current')
licenseLicenseCountGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLicenseCountGranted.setStatus('current')
licenseAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 14), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAdmin.setStatus('current')
licenseSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 15), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSecondaryStates.setStatus('current')
licenseOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 16), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseOperState.setStatus('current')
licenseParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 2, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseParentId.setStatus('current')
alarmLicenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100), )
if mibBuilder.loadTexts: alarmLicenseManagerTable.setStatus('current')
alarmLicenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"), (0, "ADVA-FSPR7-MIB", "alarmLicenseManagerType"))
if mibBuilder.loadTexts: alarmLicenseManagerEntry.setStatus('current')
alarmLicenseManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmLicenseManagerType.setStatus('current')
alarmLicenseManagerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerSeverity.setStatus('current')
alarmLicenseManagerAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerAffect.setStatus('current')
alarmLicenseManagerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 100, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseManagerTimeStamp.setStatus('current')
alarmSeverityLicenseManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101), )
if mibBuilder.loadTexts: alarmSeverityLicenseManagerTable.setStatus('current')
alarmSeverityLicenseManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseManagerShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerSlotNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerPortNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerExtNo"), (0, "ADVA-FSPR7-MIB", "licenseManagerClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityLicenseManagerType"))
if mibBuilder.loadTexts: alarmSeverityLicenseManagerEntry.setStatus('current')
alarmSeverityLicenseManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityLicenseManagerType.setStatus('current')
alarmSeverityLicenseManagerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 101, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityLicenseManagerValue.setStatus('current')
alarmLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102), )
if mibBuilder.loadTexts: alarmLicenseTable.setStatus('current')
alarmLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"), (0, "ADVA-FSPR7-MIB", "alarmLicenseType"))
if mibBuilder.loadTexts: alarmLicenseEntry.setStatus('current')
alarmLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmLicenseType.setStatus('current')
alarmLicenseSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseSeverity.setStatus('current')
alarmLicenseAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseAffect.setStatus('current')
alarmLicenseTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 102, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLicenseTimeStamp.setStatus('current')
alarmSeverityLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103), )
if mibBuilder.loadTexts: alarmSeverityLicenseTable.setStatus('current')
alarmSeverityLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "licenseShelfNo"), (0, "ADVA-FSPR7-MIB", "licenseSlotNo"), (0, "ADVA-FSPR7-MIB", "licensePortNo"), (0, "ADVA-FSPR7-MIB", "licenseExtNo"), (0, "ADVA-FSPR7-MIB", "licenseClassName"), (0, "ADVA-FSPR7-MIB", "alarmSeverityLicenseType"))
if mibBuilder.loadTexts: alarmSeverityLicenseEntry.setStatus('current')
alarmSeverityLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1, 1), FspR7AlarmListType())
if mibBuilder.loadTexts: alarmSeverityLicenseType.setStatus('current')
alarmSeverityLicenseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 103, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityLicenseValue.setStatus('current')
endOfLicensesMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 200, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLicensesMgmt.setStatus('current')
endOfHdShelvesMgmt = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 13, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfHdShelvesMgmt.setStatus('current')
endOfFeatureSpecific = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFeatureSpecific.setStatus('current')
upwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1), )
if mibBuilder.loadTexts: upwardEqptTable.setStatus('current')
upwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "upwardEqptIndex"))
if mibBuilder.loadTexts: upwardEqptEntry.setStatus('current')
upwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEqptShelfNo.setStatus('current')
upwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEqptSlotNo.setStatus('current')
upwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEqptPortNo.setStatus('current')
upwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEqptExtNo.setStatus('current')
upwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEqptClassName.setStatus('current')
upwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEqptIndex.setStatus('current')
upwardEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEqptParentId.setStatus('current')
endOfUpwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEqptTable.setStatus('current')
downwardEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3), )
if mibBuilder.loadTexts: downwardEqptTable.setStatus('current')
downwardEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEqptClassName"), (0, "ADVA-FSPR7-MIB", "downwardEqptIndex"))
if mibBuilder.loadTexts: downwardEqptEntry.setStatus('current')
downwardEqptShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEqptShelfNo.setStatus('current')
downwardEqptSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEqptSlotNo.setStatus('current')
downwardEqptPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEqptPortNo.setStatus('current')
downwardEqptExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEqptExtNo.setStatus('current')
downwardEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEqptClassName.setStatus('current')
downwardEqptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEqptIndex.setStatus('current')
downwardEqptChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 3, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEqptChildId.setStatus('current')
endOfDownwardEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEqptTable.setStatus('current')
upwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5), )
if mibBuilder.loadTexts: upwardDcnTable.setStatus('current')
upwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "upwardDcnIndex"))
if mibBuilder.loadTexts: upwardDcnEntry.setStatus('current')
upwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardDcnShelfNo.setStatus('current')
upwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardDcnSlotNo.setStatus('current')
upwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardDcnPortNo.setStatus('current')
upwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardDcnExtNo.setStatus('current')
upwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardDcnClassName.setStatus('current')
upwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardDcnIndex.setStatus('current')
upwardDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 5, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardDcnParentId.setStatus('current')
endOfUpwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardDcnTable.setStatus('current')
downwardDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7), )
if mibBuilder.loadTexts: downwardDcnTable.setStatus('current')
downwardDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardDcnClassName"), (0, "ADVA-FSPR7-MIB", "downwardDcnIndex"))
if mibBuilder.loadTexts: downwardDcnEntry.setStatus('current')
downwardDcnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardDcnShelfNo.setStatus('current')
downwardDcnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardDcnSlotNo.setStatus('current')
downwardDcnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardDcnPortNo.setStatus('current')
downwardDcnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardDcnExtNo.setStatus('current')
downwardDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardDcnClassName.setStatus('current')
downwardDcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardDcnIndex.setStatus('current')
downwardDcnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardDcnChildId.setStatus('current')
endOfDownwardDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardDcnTable.setStatus('current')
upwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9), )
if mibBuilder.loadTexts: upwardEnvTable.setStatus('current')
upwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "upwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "upwardEnvIndex"))
if mibBuilder.loadTexts: upwardEnvEntry.setStatus('current')
upwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardEnvShelfNo.setStatus('current')
upwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardEnvSlotNo.setStatus('current')
upwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardEnvPortNo.setStatus('current')
upwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardEnvExtNo.setStatus('current')
upwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardEnvClassName.setStatus('current')
upwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardEnvIndex.setStatus('current')
upwardEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardEnvParentId.setStatus('current')
endOfUpwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardEnvTable.setStatus('current')
downwardEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11), )
if mibBuilder.loadTexts: downwardEnvTable.setStatus('current')
downwardEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardEnvShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvPortNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvExtNo"), (0, "ADVA-FSPR7-MIB", "downwardEnvClassName"), (0, "ADVA-FSPR7-MIB", "downwardEnvIndex"))
if mibBuilder.loadTexts: downwardEnvEntry.setStatus('current')
downwardEnvShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardEnvShelfNo.setStatus('current')
downwardEnvSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardEnvSlotNo.setStatus('current')
downwardEnvPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardEnvPortNo.setStatus('current')
downwardEnvExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardEnvExtNo.setStatus('current')
downwardEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardEnvClassName.setStatus('current')
downwardEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardEnvIndex.setStatus('current')
downwardEnvChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardEnvChildId.setStatus('current')
endOfDownwardEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardEnvTable.setStatus('current')
upwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13), )
if mibBuilder.loadTexts: upwardFacilityTable.setStatus('current')
upwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "upwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "upwardFacilityIndex"))
if mibBuilder.loadTexts: upwardFacilityEntry.setStatus('current')
upwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityShelfNo.setStatus('current')
upwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardFacilitySlotNo.setStatus('current')
upwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityPortNo.setStatus('current')
upwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityExtNo.setStatus('current')
upwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardFacilityClassName.setStatus('current')
upwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardFacilityIndex.setStatus('current')
upwardFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardFacilityParentId.setStatus('current')
downwardFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14), )
if mibBuilder.loadTexts: downwardFacilityTable.setStatus('current')
downwardFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "downwardFacilityClassName"), (0, "ADVA-FSPR7-MIB", "downwardFacilityIndex"))
if mibBuilder.loadTexts: downwardFacilityEntry.setStatus('current')
downwardFacilityShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityShelfNo.setStatus('current')
downwardFacilitySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardFacilitySlotNo.setStatus('current')
downwardFacilityPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityPortNo.setStatus('current')
downwardFacilityExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityExtNo.setStatus('current')
downwardFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardFacilityClassName.setStatus('current')
downwardFacilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardFacilityIndex.setStatus('current')
downwardFacilityChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 14, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardFacilityChildId.setStatus('current')
endOfDownwardFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardFacilityTable.setStatus('current')
upwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16), )
if mibBuilder.loadTexts: upwardOptLineTable.setStatus('current')
upwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "upwardOptLineIndex"))
if mibBuilder.loadTexts: upwardOptLineEntry.setStatus('current')
upwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineShelfNo.setStatus('current')
upwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineSlotNo.setStatus('current')
upwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOptLinePortNo.setStatus('current')
upwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineExtNo.setStatus('current')
upwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOptLineClassName.setStatus('current')
upwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOptLineIndex.setStatus('current')
upwardOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 16, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOptLineParentId.setStatus('current')
endOfUpwardOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOptLineTable.setStatus('current')
downwardOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18), )
if mibBuilder.loadTexts: downwardOptLineTable.setStatus('current')
downwardOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOptLineShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLinePortNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOptLineClassName"), (0, "ADVA-FSPR7-MIB", "downwardOptLineIndex"))
if mibBuilder.loadTexts: downwardOptLineEntry.setStatus('current')
downwardOptLineShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineShelfNo.setStatus('current')
downwardOptLineSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineSlotNo.setStatus('current')
downwardOptLinePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOptLinePortNo.setStatus('current')
downwardOptLineExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineExtNo.setStatus('current')
downwardOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOptLineClassName.setStatus('current')
downwardOptLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOptLineIndex.setStatus('current')
downwardOptLineChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 18, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOptLineChildId.setStatus('current')
upwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19), )
if mibBuilder.loadTexts: upwardTerminPointTable.setStatus('current')
upwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "upwardTerminPointIndex"))
if mibBuilder.loadTexts: upwardTerminPointEntry.setStatus('current')
upwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo1.setStatus('current')
upwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo2.setStatus('current')
upwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo3.setStatus('current')
upwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndexNo4.setStatus('current')
upwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardTerminPointClassName.setStatus('current')
upwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardTerminPointIndex.setStatus('current')
upwardTerminPointParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 19, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardTerminPointParentId.setStatus('current')
downwardTerminPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20), )
if mibBuilder.loadTexts: downwardTerminPointTable.setStatus('current')
downwardTerminPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "downwardTerminPointIndex"))
if mibBuilder.loadTexts: downwardTerminPointEntry.setStatus('current')
downwardTerminPointIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo1.setStatus('current')
downwardTerminPointIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo2.setStatus('current')
downwardTerminPointIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo3.setStatus('current')
downwardTerminPointIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndexNo4.setStatus('current')
downwardTerminPointClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardTerminPointClassName.setStatus('current')
downwardTerminPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardTerminPointIndex.setStatus('current')
downwardTerminPointChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardTerminPointChildId.setStatus('current')
endOfDownwardTerminPointTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardTerminPointTable.setStatus('current')
upwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23), )
if mibBuilder.loadTexts: upwardExternalPortTable.setStatus('current')
upwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "upwardExternalPortIndex"))
if mibBuilder.loadTexts: upwardExternalPortEntry.setStatus('current')
upwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortShelfNo.setStatus('current')
upwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortSlotNo.setStatus('current')
upwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortPortNo.setStatus('current')
upwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortExtNo.setStatus('current')
upwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardExternalPortClassName.setStatus('current')
upwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardExternalPortIndex.setStatus('current')
upwardExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 23, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardExternalPortParentId.setStatus('current')
downwardExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24), )
if mibBuilder.loadTexts: downwardExternalPortTable.setStatus('current')
downwardExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortClassName"), (0, "ADVA-FSPR7-MIB", "downwardExternalPortIndex"))
if mibBuilder.loadTexts: downwardExternalPortEntry.setStatus('current')
downwardExternalPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortShelfNo.setStatus('current')
downwardExternalPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortSlotNo.setStatus('current')
downwardExternalPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortPortNo.setStatus('current')
downwardExternalPortExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortExtNo.setStatus('current')
downwardExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardExternalPortClassName.setStatus('current')
downwardExternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardExternalPortIndex.setStatus('current')
downwardExternalPortChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 24, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardExternalPortChildId.setStatus('current')
endOfDownwardExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardExternalPortTable.setStatus('current')
upwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27), )
if mibBuilder.loadTexts: upwardContainerTable.setStatus('current')
upwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "upwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "upwardContainerIndex"))
if mibBuilder.loadTexts: upwardContainerEntry.setStatus('current')
upwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardContainerShelfNo.setStatus('current')
upwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardContainerSlotNo.setStatus('current')
upwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardContainerPortNo.setStatus('current')
upwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardContainerExtNo.setStatus('current')
upwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardContainerClassName.setStatus('current')
upwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardContainerIndex.setStatus('current')
upwardContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 27, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardContainerParentId.setStatus('current')
endOfUpwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardContainerTable.setStatus('current')
downwardContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29), )
if mibBuilder.loadTexts: downwardContainerTable.setStatus('current')
downwardContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerPortNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerExtNo"), (0, "ADVA-FSPR7-MIB", "downwardContainerClassName"), (0, "ADVA-FSPR7-MIB", "downwardContainerIndex"))
if mibBuilder.loadTexts: downwardContainerEntry.setStatus('current')
downwardContainerShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardContainerShelfNo.setStatus('current')
downwardContainerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardContainerSlotNo.setStatus('current')
downwardContainerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardContainerPortNo.setStatus('current')
downwardContainerExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardContainerExtNo.setStatus('current')
downwardContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardContainerClassName.setStatus('current')
downwardContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardContainerIndex.setStatus('current')
downwardContainerChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 29, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardContainerChildId.setStatus('current')
endOfDownwardContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardContainerTable.setStatus('current')
upwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31), )
if mibBuilder.loadTexts: upwardOpticalMuxTable.setStatus('current')
upwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "upwardOpticalMuxIndex"))
if mibBuilder.loadTexts: upwardOpticalMuxEntry.setStatus('current')
upwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxShelfNo.setStatus('current')
upwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxSlotNo.setStatus('current')
upwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxPortNo.setStatus('current')
upwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxExtNo.setStatus('current')
upwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardOpticalMuxClassName.setStatus('current')
upwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardOpticalMuxIndex.setStatus('current')
upwardOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 31, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardOpticalMuxParentId.setStatus('current')
endOfUpwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardOpticalMuxTable.setStatus('current')
downwardOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33), )
if mibBuilder.loadTexts: downwardOpticalMuxTable.setStatus('current')
downwardOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxClassName"), (0, "ADVA-FSPR7-MIB", "downwardOpticalMuxIndex"))
if mibBuilder.loadTexts: downwardOpticalMuxEntry.setStatus('current')
downwardOpticalMuxShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxShelfNo.setStatus('current')
downwardOpticalMuxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxSlotNo.setStatus('current')
downwardOpticalMuxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxPortNo.setStatus('current')
downwardOpticalMuxExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxExtNo.setStatus('current')
downwardOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardOpticalMuxClassName.setStatus('current')
downwardOpticalMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardOpticalMuxIndex.setStatus('current')
downwardOpticalMuxChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 33, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardOpticalMuxChildId.setStatus('current')
endOfDownwardOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardOpticalMuxTable.setStatus('current')
upwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35), )
if mibBuilder.loadTexts: upwardShelfConnTable.setStatus('current')
upwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "upwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "upwardShelfConnIndex"))
if mibBuilder.loadTexts: upwardShelfConnEntry.setStatus('current')
upwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 1), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnShelfNo.setStatus('current')
upwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 2), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnSlotNo.setStatus('current')
upwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 3), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnPortNo.setStatus('current')
upwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 4), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnExtNo.setStatus('current')
upwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 5), EntityClassName())
if mibBuilder.loadTexts: upwardShelfConnClassName.setStatus('current')
upwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 6), Unsigned32())
if mibBuilder.loadTexts: upwardShelfConnIndex.setStatus('current')
upwardShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 35, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upwardShelfConnParentId.setStatus('current')
endOfUpwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfUpwardShelfConnTable.setStatus('current')
downwardShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37), )
if mibBuilder.loadTexts: downwardShelfConnTable.setStatus('current')
downwardShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "downwardShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnClassName"), (0, "ADVA-FSPR7-MIB", "downwardShelfConnIndex"))
if mibBuilder.loadTexts: downwardShelfConnEntry.setStatus('current')
downwardShelfConnShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 1), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnShelfNo.setStatus('current')
downwardShelfConnSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 2), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnSlotNo.setStatus('current')
downwardShelfConnPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 3), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnPortNo.setStatus('current')
downwardShelfConnExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 4), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnExtNo.setStatus('current')
downwardShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 5), EntityClassName())
if mibBuilder.loadTexts: downwardShelfConnClassName.setStatus('current')
downwardShelfConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 6), Unsigned32())
if mibBuilder.loadTexts: downwardShelfConnIndex.setStatus('current')
downwardShelfConnChildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 37, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downwardShelfConnChildId.setStatus('current')
endOfDownwardShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDownwardShelfConnTable.setStatus('current')
dependentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100), )
if mibBuilder.loadTexts: dependentTable.setStatus('current')
dependentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "dependentIndexNo1"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo2"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo3"), (0, "ADVA-FSPR7-MIB", "dependentIndexNo4"), (0, "ADVA-FSPR7-MIB", "dependentClassName"), (0, "ADVA-FSPR7-MIB", "dependentIndex"))
if mibBuilder.loadTexts: dependentEntry.setStatus('current')
dependentIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo1.setStatus('current')
dependentIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo2.setStatus('current')
dependentIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 3), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo3.setStatus('current')
dependentIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 4), Unsigned32())
if mibBuilder.loadTexts: dependentIndexNo4.setStatus('current')
dependentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 5), EntityClassName())
if mibBuilder.loadTexts: dependentClassName.setStatus('current')
dependentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 6), Unsigned32())
if mibBuilder.loadTexts: dependentIndex.setStatus('current')
dependentAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentAid.setStatus('current')
dependentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 100, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dependentId.setStatus('current')
endOfDependentTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDependentTable.setStatus('current')
endOfRelationship = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfRelationship.setStatus('current')
notAssignableEqptTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2), )
if mibBuilder.loadTexts: notAssignableEqptTable.setStatus('current')
notAssignableEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEqptClassName"))
if mibBuilder.loadTexts: notAssignableEqptEntry.setStatus('current')
notAssignableEqptIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo1.setStatus('current')
notAssignableEqptIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo2.setStatus('current')
notAssignableEqptIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo3.setStatus('current')
notAssignableEqptIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEqptIndexNo4.setStatus('current')
notAssignableEqptClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEqptClassName.setStatus('current')
notAssignableEqptAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptAidString.setStatus('current')
notAssignableEqptParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptParentId.setStatus('current')
notAssignableEqptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 2, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEqptClass.setStatus('current')
endOfNotAssignableEqptTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEqptTable.setStatus('current')
notAssignableDcnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4), )
if mibBuilder.loadTexts: notAssignableDcnTable.setStatus('current')
notAssignableDcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableDcnClassName"))
if mibBuilder.loadTexts: notAssignableDcnEntry.setStatus('current')
notAssignableDcnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo1.setStatus('current')
notAssignableDcnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo2.setStatus('current')
notAssignableDcnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo3.setStatus('current')
notAssignableDcnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableDcnIndexNo4.setStatus('current')
notAssignableDcnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableDcnClassName.setStatus('current')
notAssignableDcnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnAidString.setStatus('current')
notAssignableDcnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnParentId.setStatus('current')
notAssignableDcnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 4, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableDcnClass.setStatus('current')
endOfNotAssignableDcnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableDcnTable.setStatus('current')
notAssignableFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7), )
if mibBuilder.loadTexts: notAssignableFacilityTable.setStatus('current')
notAssignableFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableFacilityClassName"))
if mibBuilder.loadTexts: notAssignableFacilityEntry.setStatus('current')
notAssignableFacilityIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo1.setStatus('current')
notAssignableFacilityIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo2.setStatus('current')
notAssignableFacilityIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo3.setStatus('current')
notAssignableFacilityIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableFacilityIndexNo4.setStatus('current')
notAssignableFacilityClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableFacilityClassName.setStatus('current')
notAssignableFacilityAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityAidString.setStatus('current')
notAssignableFacilityParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityParentId.setStatus('current')
notAssignableFacilityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 7, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableFacilityClass.setStatus('current')
endOfNotAssignableFacilityTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableFacilityTable.setStatus('current')
notAssignableOptLineTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9), )
if mibBuilder.loadTexts: notAssignableOptLineTable.setStatus('current')
notAssignableOptLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOptLineClassName"))
if mibBuilder.loadTexts: notAssignableOptLineEntry.setStatus('current')
notAssignableOptLineIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo1.setStatus('current')
notAssignableOptLineIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo2.setStatus('current')
notAssignableOptLineIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo3.setStatus('current')
notAssignableOptLineIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOptLineIndexNo4.setStatus('current')
notAssignableOptLineClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOptLineClassName.setStatus('current')
notAssignableOptLineAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineAidString.setStatus('current')
notAssignableOptLineParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineParentId.setStatus('current')
notAssignableOptLineClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 9, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOptLineClass.setStatus('current')
endOfNotAssignableOptLineTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOptLineTable.setStatus('current')
notAssignableEnvTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11), )
if mibBuilder.loadTexts: notAssignableEnvTable.setStatus('current')
notAssignableEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableEnvClassName"))
if mibBuilder.loadTexts: notAssignableEnvEntry.setStatus('current')
notAssignableEnvIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo1.setStatus('current')
notAssignableEnvIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo2.setStatus('current')
notAssignableEnvIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo3.setStatus('current')
notAssignableEnvIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableEnvIndexNo4.setStatus('current')
notAssignableEnvClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableEnvClassName.setStatus('current')
notAssignableEnvAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvAidString.setStatus('current')
notAssignableEnvParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvParentId.setStatus('current')
notAssignableEnvClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 11, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableEnvClass.setStatus('current')
endOfNotAssignableEnvTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableEnvTable.setStatus('current')
notAssignableExternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13), )
if mibBuilder.loadTexts: notAssignableExternalPortTable.setStatus('current')
notAssignableExternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableExternalPortClassName"))
if mibBuilder.loadTexts: notAssignableExternalPortEntry.setStatus('current')
notAssignableExternalPortIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo1.setStatus('current')
notAssignableExternalPortIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo2.setStatus('current')
notAssignableExternalPortIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo3.setStatus('current')
notAssignableExternalPortIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableExternalPortIndexNo4.setStatus('current')
notAssignableExternalPortClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableExternalPortClassName.setStatus('current')
notAssignableExternalPortAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortAidString.setStatus('current')
notAssignableExternalPortParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortParentId.setStatus('current')
notAssignableExternalPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 13, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableExternalPortClass.setStatus('current')
endOfNotAssignableExternalPortTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableExternalPortTable.setStatus('current')
notAssignableContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15), )
if mibBuilder.loadTexts: notAssignableContainerTable.setStatus('current')
notAssignableContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableContainerClassName"))
if mibBuilder.loadTexts: notAssignableContainerEntry.setStatus('current')
notAssignableContainerIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo1.setStatus('current')
notAssignableContainerIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo2.setStatus('current')
notAssignableContainerIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo3.setStatus('current')
notAssignableContainerIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableContainerIndexNo4.setStatus('current')
notAssignableContainerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableContainerClassName.setStatus('current')
notAssignableContainerAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerAidString.setStatus('current')
notAssignableContainerParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerParentId.setStatus('current')
notAssignableContainerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 15, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableContainerClass.setStatus('current')
endOfNotAssignableContainerTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableContainerTable.setStatus('current')
notAssignableOpticalMuxTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17), )
if mibBuilder.loadTexts: notAssignableOpticalMuxTable.setStatus('current')
notAssignableOpticalMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableOpticalMuxClassName"))
if mibBuilder.loadTexts: notAssignableOpticalMuxEntry.setStatus('current')
notAssignableOpticalMuxIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo1.setStatus('current')
notAssignableOpticalMuxIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo2.setStatus('current')
notAssignableOpticalMuxIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo3.setStatus('current')
notAssignableOpticalMuxIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableOpticalMuxIndexNo4.setStatus('current')
notAssignableOpticalMuxClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableOpticalMuxClassName.setStatus('current')
notAssignableOpticalMuxAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxAidString.setStatus('current')
notAssignableOpticalMuxParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxParentId.setStatus('current')
notAssignableOpticalMuxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 17, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableOpticalMuxClass.setStatus('current')
endOfNotAssignableOpticalMuxTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableOpticalMuxTable.setStatus('current')
notAssignableShelfConnTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20), )
if mibBuilder.loadTexts: notAssignableShelfConnTable.setStatus('current')
notAssignableShelfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo1"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo2"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo3"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnIndexNo4"), (0, "ADVA-FSPR7-MIB", "notAssignableShelfConnClassName"))
if mibBuilder.loadTexts: notAssignableShelfConnEntry.setStatus('current')
notAssignableShelfConnIndexNo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo1.setStatus('current')
notAssignableShelfConnIndexNo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 2), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo2.setStatus('current')
notAssignableShelfConnIndexNo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 3), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo3.setStatus('current')
notAssignableShelfConnIndexNo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 4), Unsigned32())
if mibBuilder.loadTexts: notAssignableShelfConnIndexNo4.setStatus('current')
notAssignableShelfConnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 5), EntityClassName())
if mibBuilder.loadTexts: notAssignableShelfConnClassName.setStatus('current')
notAssignableShelfConnAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnAidString.setStatus('current')
notAssignableShelfConnParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnParentId.setStatus('current')
notAssignableShelfConnClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 20, 1, 8), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notAssignableShelfConnClass.setStatus('current')
endOfNotAssignableShelfConnTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignableShelfConnTable.setStatus('current')
endOfNotAssignables = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfNotAssignables.setStatus('current')
advaInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1), )
if mibBuilder.loadTexts: advaInventoryTable.setStatus('current')
advaInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: advaInventoryEntry.setStatus('current')
advaInventoryShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: advaInventoryShelfNo.setStatus('current')
advaInventorySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: advaInventorySlotNo.setStatus('current')
advaInventoryPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: advaInventoryPortNo.setStatus('current')
advaInventoryExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: advaInventoryExtNo.setStatus('current')
advaInventoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 5), EntityClassName())
if mibBuilder.loadTexts: advaInventoryClassName.setStatus('current')
advaInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryAidString.setStatus('current')
advaInventoryUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUnitName.setStatus('current')
advaInventoryFirmwarePackageRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFirmwarePackageRev.setStatus('current')
advaInventoryHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryHardwareRev.setStatus('current')
advaInventorySoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySoftwareRev.setStatus('current')
advaInventoryFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryFpgaRev.setStatus('current')
advaInventorySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventorySerialNum.setStatus('current')
advaInventoryPartnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryPartnumber.setStatus('current')
advaInventoryCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCleiCode.setStatus('current')
advaInventoryVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryVendorId.setStatus('current')
advaInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 16), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryType.setStatus('current')
advaInventoryUniversalSerialIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryUniversalSerialIdent.setStatus('current')
advaInventoryGradeInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 18), Grade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryGradeInventory.setStatus('current')
advaInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 19), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryClass.setStatus('current')
advaInventoryInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryInventoryDescription.setStatus('current')
advaInventoryCapabilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 21), FspR7CapInventory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCapabilityLevel.setStatus('current')
advaInventoryCfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCfSerialNum.setStatus('current')
advaInventoryCfModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 1, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: advaInventoryCfModel.setStatus('current')
unassignedInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2), )
if mibBuilder.loadTexts: unassignedInventoryTable.setStatus('current')
unassignedInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "advaInventoryShelfNo"), (0, "ADVA-FSPR7-MIB", "advaInventorySlotNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryPortNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryExtNo"), (0, "ADVA-FSPR7-MIB", "advaInventoryClassName"))
if mibBuilder.loadTexts: unassignedInventoryEntry.setStatus('current')
unassignedInventoryAidString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAidString.setStatus('current')
unassignedInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 2), EntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryType.setStatus('current')
unassignedInventoryParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryParentId.setStatus('current')
unassignedInventoryClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryClass.setStatus('current')
unassignedInventoryAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 5), FspR7EquipmentAssignState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryAssignState.setStatus('current')
unassignedInventoryOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryOneIndex.setStatus('current')
unassignedInventoryTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryTableId.setStatus('current')
unassignedInventoryMtosiParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 7, 10, 2, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unassignedInventoryMtosiParentId.setStatus('current')
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", ocmpTimestampRequest=ocmpTimestampRequest, fileDataVersion=fileDataVersion, fanRowStatus=fanRowStatus, scFiberType=scFiberType, physicalPortOpuPayloadType=physicalPortOpuPayloadType, knownHostIPv6IP=knownHostIPv6IP, physicalPortEncryptionChannel=physicalPortEncryptionChannel, physicalPortTxOffTimer=physicalPortTxOffTimer, alarmAseTableGenFailPilot=alarmAseTableGenFailPilot, alarmEncryptionPortEncryptionSwitchOffEnabled=alarmEncryptionPortEncryptionSwitchOffEnabled, scConnector=scConnector, endOfAlarmSeverityShelfConnTable=endOfAlarmSeverityShelfConnTable, changePhysicalPortServiceCodeGain=changePhysicalPortServiceCodeGain, ipv6PrefixLen=ipv6PrefixLen, containerEthAidString=containerEthAidString, eccGccUsage=eccGccUsage, fspR7StateChangeTrap=fspR7StateChangeTrap, physicalPortAlsMode=physicalPortAlsMode, alarmOutputPowerFault=alarmOutputPowerFault, externalPortTransmitChannel=externalPortTransmitChannel, alarmNetworkPathRestricted=alarmNetworkPathRestricted, alarmNoLicenseFile=alarmNoLicenseFile, physicalPortSigDegPeriodOduTcmC=physicalPortSigDegPeriodOduTcmC, containerScAidString=containerScAidString, alarmTraceIdentifierMismatchOduTcmC=alarmTraceIdentifierMismatchOduTcmC, entityExternalPortTable=entityExternalPortTable, upwardOpticalMuxTable=upwardOpticalMuxTable, haSwitchToDuplex=haSwitchToDuplex, dependentIndexNo2=dependentIndexNo2, alarmLaserBiasCurrentNormalizedtooHigh=alarmLaserBiasCurrentNormalizedtooHigh, entityTerminPointParentId=entityTerminPointParentId, whitelistRowStatus=whitelistRowStatus, alarmProfileSeverityEntry=alarmProfileSeverityEntry, opticalMuxProtectionRole=opticalMuxProtectionRole, advaInventoryCfModel=advaInventoryCfModel, crossConnectionRowStatus=crossConnectionRowStatus, oprIntervalPm1dayHigh=oprIntervalPm1dayHigh, transientManualWorkingSwitchedtoProtection=transientManualWorkingSwitchedtoProtection, pmSnapshotCurrentRamanPumpPower=pmSnapshotCurrentRamanPumpPower, icmpAddrMask=icmpAddrMask, endOfChangeService=endOfChangeService, downwardShelfConnChildId=downwardShelfConnChildId, connectionType=connectionType, containerConnectNonStdTable=containerConnectNonStdTable, changePhysicalPortServiceTerminationLevel=changePhysicalPortServiceTerminationLevel, notAssignableDcnIndexNo1=notAssignableDcnIndexNo1, optIntervalPm1weekTable=optIntervalPm1weekTable, downwardOptLineExtNo=downwardOptLineExtNo, oprIntervalPm1dayTable=oprIntervalPm1dayTable, entityDcnType=entityDcnType, advaInventoryFirmwarePackageRev=advaInventoryFirmwarePackageRev, entityCrsOptLineFromClassName=entityCrsOptLineFromClassName, changePhysicalPortServiceSigDegPcslThreshold=changePhysicalPortServiceSigDegPcslThreshold, alarmInternalEncryptionFail=alarmInternalEncryptionFail, entityCrossDcnAidString=entityCrossDcnAidString, alarmEquipmentMismatch=alarmEquipmentMismatch, oprThresholdConfigLowConfig=oprThresholdConfigLowConfig, transientThres1DayExceededSonetLineCV=transientThres1DayExceededSonetLineCV, unassignedInventoryParentId=unassignedInventoryParentId, transientThres1DayExceededOduTcmBBbe=transientThres1DayExceededOduTcmBBbe, endOfLicensesMgmt=endOfLicensesMgmt, transientThres1DayExceededPhysConvDE=transientThres1DayExceededPhysConvDE, virtualPortTrafficDirection=virtualPortTrafficDirection, physicalPortTimModeOdu=physicalPortTimModeOdu, optIntervalPm1dayHigh=optIntervalPm1dayHigh, containerVchAidString=containerVchAidString, containerCrossConnToExtNo=containerCrossConnToExtNo, alarmDatabaseVersionMismatch=alarmDatabaseVersionMismatch, entitySysSlotNo=entitySysSlotNo, physicalPortLaserOnTimer=physicalPortLaserOnTimer, alarmChannelMismatchRx=alarmChannelMismatchRx, upwardContainerIndex=upwardContainerIndex, notAssignableOpticalMuxTable=notAssignableOpticalMuxTable, advaInventoryClassName=advaInventoryClassName, transientBootUpCompleted=transientBootUpCompleted, containerVch1PortNo=containerVch1PortNo, containerEccAidString=containerEccAidString, alarmUnequippedHigherOrderPath=alarmUnequippedHigherOrderPath, shelfmapTable=shelfmapTable, ratStartPointTable=ratStartPointTable, alarmThres15MinExceededSonetSectES=alarmThres15MinExceededSonetSectES, physicalPortSumTransmited=physicalPortSumTransmited, alarmPayloadMismatchLowerOrderPath=alarmPayloadMismatchLowerOrderPath, externalOmTable=externalOmTable, fanFanPorts=fanFanPorts, physicalPortFecType=physicalPortFecType, userManagementPrivilegeLevel=userManagementPrivilegeLevel, physicalPortPrbsPmReset=physicalPortPrbsPmReset, entityEnvClass=entityEnvClass, changePhysicalPortServiceLaserOnTimer=changePhysicalPortServiceLaserOnTimer, notAssignableEqptIndexNo1=notAssignableEqptIndexNo1, transientCryptoFwpUpdate=transientCryptoFwpUpdate, linkTable=linkTable, alarmEqptSeverity=alarmEqptSeverity, virtualPortType=virtualPortType, containerExternalPortAidString=containerExternalPortAidString, alarmLossOfModemSync=alarmLossOfModemSync, alarmTerminPointAffect=alarmTerminPointAffect, linkProxyArp=linkProxyArp, filterCableEntry=filterCableEntry, whitelistId=whitelistId, alarmSysSeverity=alarmSysSeverity, downwardEqptClassName=downwardEqptClassName, containerOmShelfNo=containerOmShelfNo, notAssignableOptLineParentId=notAssignableOptLineParentId, fanAlias=fanAlias, downwardEnvExtNo=downwardEnvExtNo, containerExternalPortShelfNo=containerExternalPortShelfNo, changePhysicalPortServiceOpticalSetPoint=changePhysicalPortServiceOpticalSetPoint, endOfDcnMgmt=endOfDcnMgmt, shelfFiberType=shelfFiberType, alarmPayloadMismatchGfp=alarmPayloadMismatchGfp, terminationPointSfProvision=terminationPointSfProvision, communityId=communityId, aidMappingString=aidMappingString, entityExternalPortEntry=entityExternalPortEntry, containerOmParentId=containerOmParentId, physicalPortTraceTransmitSapiOduTcmA=physicalPortTraceTransmitSapiOduTcmA, alarmAlarmIndicationSignalOdu=alarmAlarmIndicationSignalOdu, entityExternalPortType=entityExternalPortType, physicalPortTraceRcvOpspTcmc=physicalPortTraceRcvOpspTcmc, syslogIPv4RowStatus=syslogIPv4RowStatus, containerOwlgClassName=containerOwlgClassName, alarmSeverityExternalPortTable=alarmSeverityExternalPortTable, opticalMuxChannelSpacing=opticalMuxChannelSpacing, changePhysicalPortServiceChannelProv=changePhysicalPortServiceChannelProv, ffpEntry=ffpEntry, entityOpticalMuxTableId=entityOpticalMuxTableId, alarmLossOfAlignment=alarmLossOfAlignment, crossOpticalLineTunnelAid=crossOpticalLineTunnelAid, ffpCreationMethod=ffpCreationMethod, userManagementAuthPrivKeyOld=userManagementAuthPrivKeyOld, eccExternalVid=eccExternalVid, notAssignableContainerClass=notAssignableContainerClass, lanIPv6PrefixLen=lanIPv6PrefixLen, changePhysicalPortServiceFarEndCommunication=changePhysicalPortServiceFarEndCommunication, containerSecondaryStates=containerSecondaryStates, cpRest=cpRest, communityIpMode=communityIpMode, transientThres1DayExceededSonetLineSES=transientThres1DayExceededSonetLineSES, entityContainerOneIndex=entityContainerOneIndex, moduleInternalPlugsReach=moduleInternalPlugsReach, virtualPortTraceTransmitDapiOdu=virtualPortTraceTransmitDapiOdu, alarmThres15MinExceededPhysConvCVDE=alarmThres15MinExceededPhysConvCVDE, containerAdmin=containerAdmin, ratStartPointIndexNo1=ratStartPointIndexNo1, entityCrsOptLineToIndexNo2=entityCrsOptLineToIndexNo2, opticalMuxTimePeriod=opticalMuxTimePeriod, fileDataMpName=fileDataMpName, eccType=eccType, containerOlEntry=containerOlEntry, entityCrossConnFromId=entityCrossConnFromId, containerVschExtNo=containerVschExtNo, containerVch1AidString=containerVch1AidString, entityOpticalMuxSlotNo=entityOpticalMuxSlotNo, virtualPortPayload=virtualPortPayload, lanHelloInterval=lanHelloInterval, advaInventoryPartnumber=advaInventoryPartnumber, entityShelfConnClass=entityShelfConnClass, moduleAvlndpF270Txcrs=moduleAvlndpF270Txcrs, physicalPortNearEndProtectionState=physicalPortNearEndProtectionState, physicalPortTraceTransmitSonetSection=physicalPortTraceTransmitSonetSection, alarmLocalFaultTx=alarmLocalFaultTx, ratStartPointClassName=ratStartPointClassName, virtualPortRevertiveMode=virtualPortRevertiveMode, lanEntry=lanEntry, containerModParentId=containerModParentId, entityCrossConnParentId=entityCrossConnParentId, licenseManagerParentId=licenseManagerParentId, alarmMaxPowerConsProvModulesToHigh=alarmMaxPowerConsProvModulesToHigh, alarmExternalPortTable=alarmExternalPortTable, entityConnectionType=entityConnectionType, physicalPortTransmitterWavelength=physicalPortTransmitterWavelength, alarmSeverityOpticalMuxValue=alarmSeverityOpticalMuxValue, pmSnapshotCurrentOutputPower=pmSnapshotCurrentOutputPower, containerOmSlotNo=containerOmSlotNo, userManagementAuthPrivKey=userManagementAuthPrivKey, endOfAlarmSeverityExternalPortTable=endOfAlarmSeverityExternalPortTable, virtualPortTcmBLevel=virtualPortTcmBLevel, entityShelfConnAidString=entityShelfConnAidString, physicalPortChannelRangeProvision=physicalPortChannelRangeProvision, pmSnapshotStatus=pmSnapshotStatus, changePhysicalPortServiceTimModeOduTcmA=changePhysicalPortServiceTimModeOduTcmA, entityProtectionCableClass=entityProtectionCableClass, virtualPortCirRcv=virtualPortCirRcv, transientCryptoAuthPasswdChanged=transientCryptoAuthPasswdChanged, moduleLanAid=moduleLanAid, containerVethTable=containerVethTable, fspR7WriteAccessRequest=fspR7WriteAccessRequest, eccpppIpLinkAid=eccpppIpLinkAid, opticalMuxTable=opticalMuxTable, endOfEnvMgmt=endOfEnvMgmt, licensePortNo=licensePortNo, containerOtlgParentId=containerOtlgParentId, containerModPortNo=containerModPortNo, hdSystemAdmin=hdSystemAdmin, physicalPortUtag=physicalPortUtag, alarmContainerSeverity=alarmContainerSeverity, endOfAlarmEnvTable=endOfAlarmEnvTable, alarmServerSignalFailPayload=alarmServerSignalFailPayload, containerExternalPortSlotNo=containerExternalPortSlotNo, alarmFwdAseTableFailPilot=alarmFwdAseTableFailPilot, oprIntervalPm1dayEntry=oprIntervalPm1dayEntry, containerLanShelfNo=containerLanShelfNo, containerModClass=containerModClass, licenseManagerAdmin=licenseManagerAdmin, trapUser=trapUser, upwardOpticalMuxShelfNo=upwardOpticalMuxShelfNo, alarmThres15MinExceededOduTcmBBbe=alarmThres15MinExceededOduTcmBBbe, containerCrossDcnClass=containerCrossDcnClass, containerOtlgClassName=containerOtlgClassName, physicalPortSigDegThresOtu=physicalPortSigDegThresOtu, physicalPortFlowControl=physicalPortFlowControl, physicalPortVethAid=physicalPortVethAid, pmSnapshotCurrentTerminPointTable=pmSnapshotCurrentTerminPointTable, externalVchBitrate=externalVchBitrate, changePhysicalPortServiceTcmCLevel=changePhysicalPortServiceTcmCLevel, opticalMuxReferByTable=opticalMuxReferByTable, alarmTraceIdentifierMismatchOtu=alarmTraceIdentifierMismatchOtu, ffpRowStatus=ffpRowStatus, downwardContainerEntry=downwardContainerEntry, opticalMuxConnState=opticalMuxConnState, alarmThres15MinExceededOduTcmAES=alarmThres15MinExceededOduTcmAES, terminationPointChannelRangeProvision=terminationPointChannelRangeProvision, specificMgmt=specificMgmt, opticalMuxInhibitSwitchToWork=opticalMuxInhibitSwitchToWork, alarmExternalPortAffect=alarmExternalPortAffect, licenseManagerPortNo=licenseManagerPortNo, unassignedInventoryClass=unassignedInventoryClass, physicalPortTimingSource=physicalPortTimingSource, shelfStandardSlots=shelfStandardSlots, transientForcedReboot=transientForcedReboot, activeUsersTable=activeUsersTable, licenseEntry=licenseEntry, transientThres1DayExceededOduTcmAUAS=transientThres1DayExceededOduTcmAUAS, virtualPortTraceRcvSapiTcmc=virtualPortTraceRcvSapiTcmc, alarmProfileSeverityAidType=alarmProfileSeverityAidType, entityEnvEntry=entityEnvEntry, endOfCrossDcnTable=endOfCrossDcnTable, alarmFwpMismatchDownloadNotServiceAffecting=alarmFwpMismatchDownloadNotServiceAffecting, physicalPortLaneChannel=physicalPortLaneChannel, rpFilter=rpFilter, alarmLicenseOverdraft=alarmLicenseOverdraft, moduleAvlndpF125Txcrs=moduleAvlndpF125Txcrs, containerCrossConnTableId=containerCrossConnTableId, userManagementAccountState=userManagementAccountState, virtualPortInputPower=virtualPortInputPower, containerOwlgIndexNo4=containerOwlgIndexNo4, dnsServer1=dnsServer1, opticalMuxGainRange=opticalMuxGainRange, containerVethParentId=containerVethParentId, alarmLossOfSignal=alarmLossOfSignal, crossOpticalLineCrsType=crossOpticalLineCrsType, lanIPv6=lanIPv6)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", linkNearEndIp=linkNearEndIp, containerConnectStdToIndexNo3=containerConnectStdToIndexNo3, alarmOutputPowerHigh=alarmOutputPowerHigh, containerCrossConnToClassName=containerCrossConnToClassName, shelfChannel=shelfChannel, alarmSeverityEqptEntry=alarmSeverityEqptEntry, containerVschParentId=containerVschParentId, pmSnapshotHistoricalTerminPointNumber=pmSnapshotHistoricalTerminPointNumber, crossConnectionAdmin=crossConnectionAdmin, alarmAttOnReceiverFiberLowerThanMonitor=alarmAttOnReceiverFiberLowerThanMonitor, entityOptLineAidString=entityOptLineAidString, upwardOpticalMuxEntry=upwardOpticalMuxEntry, entityCrsOptLineTable=entityCrsOptLineTable, entityFacilityShelfNo=entityFacilityShelfNo, containerCrossConnFromExtNo=containerCrossConnFromExtNo, alarmThermoElectricCoolerEndOfLife=alarmThermoElectricCoolerEndOfLife, pmSnapshotHistoricalTable=pmSnapshotHistoricalTable, containerHdSystemId=containerHdSystemId, eccAlias=eccAlias, endOfAidMappingTable=endOfAidMappingTable, alarmBackwardDefectIndicationOtu=alarmBackwardDefectIndicationOtu, containerCrossDcnTableId=containerCrossDcnTableId, externalPortFarEndLocation=externalPortFarEndLocation, alarmDcnType=alarmDcnType, moduleTerminationType=moduleTerminationType, scDhcpStopAddr=scDhcpStopAddr, transientInstallFwpCompleted=transientInstallFwpCompleted, transientThres1DayExceededOtuES=transientThres1DayExceededOtuES, ipv6InActRoutesSlotNo=ipv6InActRoutesSlotNo, privilegeChangeId=privilegeChangeId, protectionCableEntry=protectionCableEntry, whitelistAdmin=whitelistAdmin, containerVomTableId=containerVomTableId, transientMpImported=transientMpImported, lanAlias=lanAlias, physicalPortLagPrio=physicalPortLagPrio, linkType=linkType, entityFilterCableIndex4=entityFilterCableIndex4, eccProtAvailability=eccProtAvailability, terminationPointAlias=terminationPointAlias, alarmLossofMultiframeLowerOrderPath=alarmLossofMultiframeLowerOrderPath, containerShelfTable=containerShelfTable, licenseTable=licenseTable, containerCrsOptLineFromIndexNo4=containerCrsOptLineFromIndexNo4, virtualPortPrbsPmReset=virtualPortPrbsPmReset, envPortTelemetry=envPortTelemetry, entityCrsOptLineToIndexNo1=entityCrsOptLineToIndexNo1, trapSinkEntry=trapSinkEntry, opticalMuxOpticalSetPoint=opticalMuxOpticalSetPoint, alarmShelfConnAffect=alarmShelfConnAffect, fileDataGrade=fileDataGrade, physicalPortConnState=physicalPortConnState, alarmHardwareUnavailable=alarmHardwareUnavailable, virtualPortOtnStuffing=virtualPortOtnStuffing, filterCableRowStatus=filterCableRowStatus, shelfType=shelfType, containerCrsOptLineClass=containerCrsOptLineClass, pmSnapshotHistoricalTerminPointParameter=pmSnapshotHistoricalTerminPointParameter, containerVch1Class=containerVch1Class, userManagementTl1TimeoutAvailable=userManagementTl1TimeoutAvailable, virtualPortOffsetLow=virtualPortOffsetLow, lldpType=lldpType, entityTerminPointIndexNo2=entityTerminPointIndexNo2, notAssignableEnvIndexNo1=notAssignableEnvIndexNo1, physicalPortChannelPlan=physicalPortChannelPlan, oprIntervalPm1weekHigh=oprIntervalPm1weekHigh, containerPlugTable=containerPlugTable, shelfOscPorts=shelfOscPorts, alarmThres15MinExceededSonetLineSES=alarmThres15MinExceededSonetLineSES, containerExternalPortTable=containerExternalPortTable, containerOlClass=containerOlClass, alarmLocalFaultRx=alarmLocalFaultRx, virtualPortTraceRcvDapiTcma=virtualPortTraceRcvDapiTcma, scTrmtWavelength=scTrmtWavelength, containerVch1TableId=containerVch1TableId, fileDataMpState=fileDataMpState, shelfAlias=shelfAlias, moduleAvlndpF1485Rxcrs=moduleAvlndpF1485Rxcrs, physicalPortSignalDegradePeriod=physicalPortSignalDegradePeriod, containerConnectNonStdToIndexNo1=containerConnectNonStdToIndexNo1, advaInventoryCfSerialNum=advaInventoryCfSerialNum, endOfAlarmShelfConnTable=endOfAlarmShelfConnTable, alarmAttOnTransmitterFiberHigherThanMonitor=alarmAttOnTransmitterFiberHigherThanMonitor, alarmEquipmentNotAccepted=alarmEquipmentNotAccepted, downwardEqptChildId=downwardEqptChildId, shelfConnRate=shelfConnRate, unassignedInventoryTable=unassignedInventoryTable, authTrapSessionId=authTrapSessionId, physicalPortTurnupConfig=physicalPortTurnupConfig, containerLanExtNo=containerLanExtNo, physicalPortReportSsfSection=physicalPortReportSsfSection, serviceAffecting=serviceAffecting, transientForcedWorkingSwitchedBacktoWorking=transientForcedWorkingSwitchedBacktoWorking, transientTagCounterResetFw=transientTagCounterResetFw, oprIntervalPm15minNumber=oprIntervalPm15minNumber, alarmAutoShutdownVfCSF=alarmAutoShutdownVfCSF, scPriority=scPriority, syslogIPv6SourceIp=syslogIPv6SourceIp, alarmDispersionCompensationTooLow=alarmDispersionCompensationTooLow, physicalPortTxOnTimer=physicalPortTxOnTimer, physicalPortFiber=physicalPortFiber, downwardExternalPortIndex=downwardExternalPortIndex, containerConnectStdTable=containerConnectStdTable, physicalPortLaneChannel2=physicalPortLaneChannel2, containerExternalPortClassName=containerExternalPortClassName, oprThresholdConfigTable=oprThresholdConfigTable, moduleUpgradePorts=moduleUpgradePorts, containerOlIndexNo1=containerOlIndexNo1, shelfConnectionType=shelfConnectionType, externalVchFecType=externalVchFecType, lanAuthString=lanAuthString, alarmAutoAmpShutdown=alarmAutoAmpShutdown, containerPchShelfNo=containerPchShelfNo, changePhysicalPortServiceTraceTransmitDapiOdu=changePhysicalPortServiceTraceTransmitDapiOdu, crossOpticalLineTable=crossOpticalLineTable, alarmFwpMismatchDownloadServiceAffecting=alarmFwpMismatchDownloadServiceAffecting, notAssignableOptLineIndexNo1=notAssignableOptLineIndexNo1, entityOpticalMuxEntry=entityOpticalMuxEntry, containerCrossConnFromPointShelfNo=containerCrossConnFromPointShelfNo, downwardShelfConnPortNo=downwardShelfConnPortNo, alarmApsConfigMismatch=alarmApsConfigMismatch, shelfStandardSlotHeight=shelfStandardSlotHeight, shelfConnFiber=shelfConnFiber, entityShelfConnParentId=entityShelfConnParentId, changePhysicalPortServiceTraceTransmitSapiOtu=changePhysicalPortServiceTraceTransmitSapiOtu, ratFrom=ratFrom, entityMtosiSlotsParentId=entityMtosiSlotsParentId, transientFarEndChanged=transientFarEndChanged, alarmLicenseTable=alarmLicenseTable, externalVchLineCoding=externalVchLineCoding, alarmSeverityNtpIPv4Type=alarmSeverityNtpIPv4Type, virtualPortSigDegThresOdu=virtualPortSigDegThresOdu, downwardExternalPortTable=downwardExternalPortTable, alarmEncryptionModuleFwpUpdateEnabled=alarmEncryptionModuleFwpUpdateEnabled, endOfContainers=endOfContainers, endOfLinkTable=endOfLinkTable, shelfNetworkPorts=shelfNetworkPorts, entityFfpAidString=entityFfpAidString, physicalPortBitrate=physicalPortBitrate, scIpAddrMonitor=scIpAddrMonitor, ipv6ActRoutesPortNo=ipv6ActRoutesPortNo, eccEntry=eccEntry, physicalPortTraceTransmitOpspOdu=physicalPortTraceTransmitOpspOdu, alarmFiberAttenuationHigh=alarmFiberAttenuationHigh, virtualPortLagSysIdFend=virtualPortLagSysIdFend, scIpMask=scIpMask, syslogIPv6Reporting=syslogIPv6Reporting, containerTerminPointTableId=containerTerminPointTableId, physicalPortTransmitterFrequency=physicalPortTransmitterFrequency, licenseManagerTable=licenseManagerTable, advaInventoryType=advaInventoryType, containerScTableId=containerScTableId, lanDhcpStartAddr=lanDhcpStartAddr, containerSequenceNumber=containerSequenceNumber, opticalMuxAlsMode=opticalMuxAlsMode, alarmFarEndIpAddressUnknown=alarmFarEndIpAddressUnknown, ratStartPointIndexNo3=ratStartPointIndexNo3, containerPlugClassName=containerPlugClassName, entityCrossConnToPortNo=entityCrossConnToPortNo, channelTracesRouteId=channelTracesRouteId, containerOmExtNo=containerOmExtNo, dcnReferByTable=dcnReferByTable, icmpSourceQuench=icmpSourceQuench, unlockTime=unlockTime, transientCryptoFwpRevChanged=transientCryptoFwpRevChanged, errorMessage=errorMessage, licenseShelfNo=licenseShelfNo, containerEccShelfNo=containerEccShelfNo, privilegeChangeIpAddress=privilegeChangeIpAddress, containerOwlgEntry=containerOwlgEntry, neCommandProtocol=neCommandProtocol, alarmLaserFailure=alarmLaserFailure, endOfUpwardOptLineTable=endOfUpwardOptLineTable, physicalPortLaneGroup=physicalPortLaneGroup, scFendTransportTermPoint=scFendTransportTermPoint, changePhysicalPortServiceTraceTransmitSapiOduTcmB=changePhysicalPortServiceTraceTransmitSapiOduTcmB, trapSinkTable=trapSinkTable, containerCrsOptLineFromPointParentId=containerCrsOptLineFromPointParentId, notAssignableShelfConnEntry=notAssignableShelfConnEntry, entityConnectionToId=entityConnectionToId, shelfmapSerialNum=shelfmapSerialNum, alarmThres15MinExceededOtuUAS=alarmThres15MinExceededOtuUAS, endOfShelfConnTable=endOfShelfConnTable, lanIpMaskMonitor=lanIpMaskMonitor, upwardEnvExtNo=upwardEnvExtNo, containerCrsOptLineToClassName=containerCrsOptLineToClassName, containerEntry=containerEntry, trapSinkIPv4=trapSinkIPv4, containerFanEntry=containerFanEntry, virtualPortPvid=virtualPortPvid, containerOwlgIndexNo2=containerOwlgIndexNo2, changePhysicalPortServiceWdmRxChannel=changePhysicalPortServiceWdmRxChannel, endOfFfpTable=endOfFfpTable, virtualPortStagType=virtualPortStagType, entityCrsOptLineToClassName=entityCrsOptLineToClassName, entityEqptClass=entityEqptClass, alarmFiberConnOptFault=alarmFiberConnOptFault, alarmPumpLaser1TempTooLow=alarmPumpLaser1TempTooLow, linkOspf=linkOspf, alarmEquipmentNotApproved=alarmEquipmentNotApproved, crossDcnType=crossDcnType, entitySysExtNo=entitySysExtNo, moduleAvlndpF1483Txcrs=moduleAvlndpF1483Txcrs, alarmEquipmentNotSupportedByPhysicalLayer=alarmEquipmentNotSupportedByPhysicalLayer, syslogIPv6Entry=syslogIPv6Entry, licenseManagerLicenseManagement=licenseManagerLicenseManagement, alarmCryAuthKeyMissing=alarmCryAuthKeyMissing, moduleRoadmNumber=moduleRoadmNumber, upwardOpticalMuxSlotNo=upwardOpticalMuxSlotNo, physicalPortTraceExpectedOduTcmA=physicalPortTraceExpectedOduTcmA, envPortTifAlarmType=envPortTifAlarmType, containerCrossConnFromClassName=containerCrossConnFromClassName, upwardDcnShelfNo=upwardDcnShelfNo, externalPortLineCoding=externalPortLineCoding, channelTracesChannelTx=channelTracesChannelTx, physicalPortAutoThresReset=physicalPortAutoThresReset, entityDcnClassName=entityDcnClassName, containerShelfConnEntry=containerShelfConnEntry, alarmLicenseManagerTable=alarmLicenseManagerTable, advaInventorySoftwareRev=advaInventorySoftwareRev, alarmClientFailForwarding=alarmClientFailForwarding, ffpApsFarEndModule=ffpApsFarEndModule, alarmAcpChannelUnAvail=alarmAcpChannelUnAvail, containerVschSlotNo=containerVschSlotNo, containerVchClassName=containerVchClassName, privilegeChangeInterface=privilegeChangeInterface, containerWchTableId=containerWchTableId, transientFwpSwitchFailed=transientFwpSwitchFailed, changePhysicalPortServiceOptimize=changePhysicalPortServiceOptimize, alarmCarrierFreqOffsetTooLow=alarmCarrierFreqOffsetTooLow, shelfChannelBandwith=shelfChannelBandwith, containerConnectStdFromIndexNo1=containerConnectStdFromIndexNo1, notAssignableEnvTable=notAssignableEnvTable, optIntervalPm15minEntry=optIntervalPm15minEntry, alarmMeaSwRevision=alarmMeaSwRevision, ipv6Control=ipv6Control, changePhysicalPortServiceAlias=changePhysicalPortServiceAlias, alarmLockedDefectOduTcmB=alarmLockedDefectOduTcmB, entityCrossDcnEntry=entityCrossDcnEntry, virtualPortTraceTransmitOpspOduTcmA=virtualPortTraceTransmitOpspOduTcmA, userManagementTl1TimeoutValue=userManagementTl1TimeoutValue, transientThres1DayExceededOduSES=transientThres1DayExceededOduSES, containerOtlgAidString=containerOtlgAidString, containerPchTableId=containerPchTableId, opticalMuxSignalDirection=opticalMuxSignalDirection, alarmShelfmapEntry=alarmShelfmapEntry, downwardTerminPointIndexNo2=downwardTerminPointIndexNo2, downwardContainerTable=downwardContainerTable, alarmPartner4Deleted=alarmPartner4Deleted, management=management, upwardTerminPointEntry=upwardTerminPointEntry, entityFfpSlotNo=entityFfpSlotNo, moduleSupply=moduleSupply, icmpEchoRequests=icmpEchoRequests)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", userManagementPasswordLastChangeDate=userManagementPasswordLastChangeDate, fspR7WriteAccessRequestTimeout=fspR7WriteAccessRequestTimeout, alarmEqptProvMismatch=alarmEqptProvMismatch, eccSecondaryStates=eccSecondaryStates, alarmNtpIPv4Affect=alarmNtpIPv4Affect, externalVchOsnrTransmit=externalVchOsnrTransmit, changePhysicalPortServiceSigDegPeriodIntegration=changePhysicalPortServiceSigDegPeriodIntegration, downwardFacilityEntry=downwardFacilityEntry, pmSnapshotHistoricalTerminPointValidFlag=pmSnapshotHistoricalTerminPointValidFlag, physicalPortPortMode=physicalPortPortMode, virtualPortTraceExpectedOdu=virtualPortTraceExpectedOdu, containerFfpTableId=containerFfpTableId, containerCrsOptLineClassName=containerCrsOptLineClassName, linkBitrate=linkBitrate, alarmDatabaseNcuMismatch=alarmDatabaseNcuMismatch, containerShelfClassName=containerShelfClassName, ipv6InActRoutesPrefixLen=ipv6InActRoutesPrefixLen, startPmSnapshot=startPmSnapshot, syslogIPv4Reporting=syslogIPv4Reporting, dependentTable=dependentTable, unassignedInventoryAidString=unassignedInventoryAidString, entityDcnPortNo=entityDcnPortNo, alarmProfileSeverityTable=alarmProfileSeverityTable, dcnReferByTerminPoint=dcnReferByTerminPoint, notAssignableOpticalMuxIndexNo3=notAssignableOpticalMuxIndexNo3, changePhysicalPortServiceSigDegThresOduTcmA=changePhysicalPortServiceSigDegThresOduTcmA, alarmSeveritySysTable=alarmSeveritySysTable, changePhysicalPortServiceTxOffTimer=changePhysicalPortServiceTxOffTimer, linkIPv6Type=linkIPv6Type, externalVchMinOptPowerRcv=externalVchMinOptPowerRcv, scTrmtFrequency=scTrmtFrequency, alarmEqptTimeStamp=alarmEqptTimeStamp, entityCrsOptLineFromIndexNo4=entityCrsOptLineFromIndexNo4, containerPchExtNo=containerPchExtNo, containerExternalPortParentId=containerExternalPortParentId, linkFendLogicalIpAddr=linkFendLogicalIpAddr, alarmThres15MinExceededOduTcmBSES=alarmThres15MinExceededOduTcmBSES, physicalPortSigDegThresOduTcmC=physicalPortSigDegThresOduTcmC, containerCrossConnFromPointTable=containerCrossConnFromPointTable, physicalPortDelayMeasurementLayer=physicalPortDelayMeasurementLayer, physicalPortLagFendState=physicalPortLagFendState, moduleLagSysPrio=moduleLagSysPrio, plugMaxDataRate=plugMaxDataRate, endOfFilterCableTable=endOfFilterCableTable, alarmSeverityContainerValue=alarmSeverityContainerValue, oprIntervalPm15minLow=oprIntervalPm15minLow, moduleAvlndpAdapt1485Txcrs=moduleAvlndpAdapt1485Txcrs, channelTracesToAid=channelTracesToAid, notAssignableEnvIndexNo4=notAssignableEnvIndexNo4, endOfNotAssignableContainerTable=endOfNotAssignableContainerTable, upwardEqptShelfNo=upwardEqptShelfNo, neCommandBusy=neCommandBusy, physicalPortCbsRcv=physicalPortCbsRcv, moduleConnector=moduleConnector, pmSnapshotCurrentVariableGain=pmSnapshotCurrentVariableGain, opticalLineLanes=opticalLineLanes, alarmLossOfReceiverClockRecovery=alarmLossOfReceiverClockRecovery, upwardDcnPortNo=upwardDcnPortNo, entityFfpExtNo=entityFfpExtNo, transientDispersionCompFailed=transientDispersionCompFailed, entityCrsOptLineFromIndexNo2=entityCrsOptLineFromIndexNo2, alarmFwdAseTableOnPilot=alarmFwdAseTableOnPilot, virtualPortTimDetModeOdu=virtualPortTimDetModeOdu, alarmOpenConnectionIndicationOduTcmA=alarmOpenConnectionIndicationOduTcmA, facilityReferByTerminPoint=facilityReferByTerminPoint, eccTable=eccTable, lanIpMode=lanIpMode, ratAnalyzerRouteId=ratAnalyzerRouteId, physicalPortSigDegThresSonetLine=physicalPortSigDegThresSonetLine, linkValidSigTimer=linkValidSigTimer, alarmThres15MinExceededSonetSectSEFS=alarmThres15MinExceededSonetSectSEFS, entityShelfConnEntry=entityShelfConnEntry, alarmSysType=alarmSysType, hdSystemAidString=hdSystemAidString, containerOtlgPortNo=containerOtlgPortNo, lldpSystemName=lldpSystemName, virtualPortTraceTransmitOpspOduTcmC=virtualPortTraceTransmitOpspOduTcmC, pmSnapshotCurrentTable=pmSnapshotCurrentTable, endOfDcnReferByTable=endOfDcnReferByTable, notAssignableExternalPortParentId=notAssignableExternalPortParentId, physicalPortSigDegThresOduTcmA=physicalPortSigDegThresOduTcmA, alarmServerSignalFailureODU=alarmServerSignalFailureODU, physicalPortTributarySlotMethod=physicalPortTributarySlotMethod, crossConnectionTunnelAid=crossConnectionTunnelAid, endOfEntities=endOfEntities, physicalPortDispertionConfig=physicalPortDispertionConfig, entityExternalPortShelfNo=entityExternalPortShelfNo, crossOpticalLineAlias=crossOpticalLineAlias, physicalPortSigDegPcslThreshold=physicalPortSigDegPcslThreshold, alarmEnvAffect=alarmEnvAffect, upwardEnvPortNo=upwardEnvPortNo, physicalPortTestPrbsRcvMode=physicalPortTestPrbsRcvMode, containerChTableId=containerChTableId, alarmGfpLossOfClientSig=alarmGfpLossOfClientSig, transientThres1DayExceededOduES=transientThres1DayExceededOduES, physicalPortLaserOffTimer=physicalPortLaserOffTimer, alarmSeverityTerminPointEntry=alarmSeverityTerminPointEntry, scOperState=scOperState, alarmThres15MinExceededOduBbe=alarmThres15MinExceededOduBbe, physicalPortTcmBLevel=physicalPortTcmBLevel, alarmSignalDegradeOduTcmB=alarmSignalDegradeOduTcmB, containerShelfmapClass=containerShelfmapClass, scOspf=scOspf, notAssignableExternalPortEntry=notAssignableExternalPortEntry, containerModSlotNo=containerModSlotNo, opticalMuxOscOpticalSetpoint=opticalMuxOscOpticalSetpoint, physicalPortAutonegotiation=physicalPortAutonegotiation, upwardOptLinePortNo=upwardOptLinePortNo, shelfConnAlias=shelfConnAlias, changePhysicalPortServiceBehaviour=changePhysicalPortServiceBehaviour, physicalPortSigDegThresSonetSection=physicalPortSigDegThresSonetSection, physicalPortTraceRcvSapiTcmb=physicalPortTraceRcvSapiTcmb, moduleInternalPlugs=moduleInternalPlugs, opticalMuxValidSigTimer=opticalMuxValidSigTimer, physicalPortTrafficDirection=physicalPortTrafficDirection, upwardContainerExtNo=upwardContainerExtNo, physicalPortTraceRcvSapiTcma=physicalPortTraceRcvSapiTcma, opticalMuxDataLayerPmReset=opticalMuxDataLayerPmReset, alarmLossOfLaneOtu=alarmLossOfLaneOtu, haProtectionIndexAid=haProtectionIndexAid, virtualPortTraceRcvOpspOdu=virtualPortTraceRcvOpspOdu, upwardTerminPointIndexNo1=upwardTerminPointIndexNo1, trapSinkIPv6=trapSinkIPv6, alarmLossOfSignalNPort=alarmLossOfSignalNPort, virtualPortRedLineState=virtualPortRedLineState, alarmSingleFanFailure=alarmSingleFanFailure, icmpFiltering=icmpFiltering, advaInventorySlotNo=advaInventorySlotNo, alarmContainerAffect=alarmContainerAffect, changePhysicalPortServiceLinkSetup=changePhysicalPortServiceLinkSetup, ipv6InActRoutesNextHop=ipv6InActRoutesNextHop, alarmSeverityLicenseManagerValue=alarmSeverityLicenseManagerValue, alarmPrbsLossOfSeqSynch=alarmPrbsLossOfSeqSynch, sso2fa=sso2fa, licenseRowStatus=licenseRowStatus, transientThres1DayExceededOduTcmBSES=transientThres1DayExceededOduTcmBSES, containerOwlgIndexNo1=containerOwlgIndexNo1, entityFilterCableClassName=entityFilterCableClassName, upwardExternalPortTable=upwardExternalPortTable, entityFacilityExtNo=entityFacilityExtNo, scRetransmitInterval=scRetransmitInterval, virtualSessionUserName=virtualSessionUserName, physicalPortTxOffDelay=physicalPortTxOffDelay, containerShelfEntry=containerShelfEntry, scDhcpMask=scDhcpMask, oprIntervalPm1weekTimeStamp=oprIntervalPm1weekTimeStamp, containerTerminPointAidString=containerTerminPointAidString, ratBlockingElementId=ratBlockingElementId, physicalPortCdPostCompensationRange=physicalPortCdPostCompensationRange, ntpIPv4Test=ntpIPv4Test, entityCrsOptLineEntry=entityCrsOptLineEntry, downwardEnvPortNo=downwardEnvPortNo, terminationPointSubBand=terminationPointSubBand, ntpIPv6Ip=ntpIPv6Ip, alarmOpenConnectionIndicationOduTcmB=alarmOpenConnectionIndicationOduTcmB, entityShelfConnShelfNo=entityShelfConnShelfNo, containerCrsOptLineFromIndexNo2=containerCrsOptLineFromIndexNo2, alarmSeverityNtpIPv6Entry=alarmSeverityNtpIPv6Entry, alarmThres15MinExceededCrcFramesEgress=alarmThres15MinExceededCrcFramesEgress, terminationPointReach=terminationPointReach, opticalMuxAlias=opticalMuxAlias, downwardEqptSlotNo=downwardEqptSlotNo, endOfDownwardOpticalMuxTable=endOfDownwardOpticalMuxTable, containerEthTable=containerEthTable, terminationPointFunction=terminationPointFunction, containerOperState=containerOperState, containerOtlgEntry=containerOtlgEntry, scAdmin=scAdmin, alarmEncryptionPortEncryptionSwitchedOff=alarmEncryptionPortEncryptionSwitchedOff, removeUsers=removeUsers, downwardOpticalMuxClassName=downwardOpticalMuxClassName, endOfModuleTable=endOfModuleTable, physicalPortSigDegPeriodSdhSection=physicalPortSigDegPeriodSdhSection, shelfChannelsNumber=shelfChannelsNumber, physicalPortLinkSetup=physicalPortLinkSetup, upwardShelfConnSlotNo=upwardShelfConnSlotNo, alarmConfigurationMismatch=alarmConfigurationMismatch, fileDataMpTag=fileDataMpTag, endOfAlarmDcnTable=endOfAlarmDcnTable, containerVschShelfNo=containerVschShelfNo, moduleAvlndpAdapt1485Rxcrs=moduleAvlndpAdapt1485Rxcrs, transientNtpSrvSyncChanged=transientNtpSrvSyncChanged, opticalMuxMgmt=opticalMuxMgmt, neDbOnActivate=neDbOnActivate, entityTerminPointClassName=entityTerminPointClassName, entityExternalPortParentId=entityExternalPortParentId, alarmLinkFailToPartner4=alarmLinkFailToPartner4, fspR7TrapSinkDeletion=fspR7TrapSinkDeletion, entityDcnTableId=entityDcnTableId, alarmOduTribMsiMismatch=alarmOduTribMsiMismatch, haSwitchOverCause=haSwitchOverCause, isolateInbandChan=isolateInbandChan, notAssignableFacilityTable=notAssignableFacilityTable, notAssignableOpticalMuxEntry=notAssignableOpticalMuxEntry, entityCrossConnFromExtNo=entityCrossConnFromExtNo, alarmThres15MinExceededOduTcmCSES=alarmThres15MinExceededOduTcmCSES, virtualPortPathProtection=virtualPortPathProtection, containerCrsOptLineAidString=containerCrsOptLineAidString, containerShelfConnAidString=containerShelfConnAidString, containerVschTableId=containerVschTableId, eccAdmin=eccAdmin, ipv6ActRoutesMetric=ipv6ActRoutesMetric, upwardDcnExtNo=upwardDcnExtNo, networkIntelligence=networkIntelligence, entityConnectionEntry=entityConnectionEntry, moduleRemoteReset=moduleRemoteReset, physicalPortLanes=physicalPortLanes, alarmMaxPowerConsEquipModulesToHigh=alarmMaxPowerConsEquipModulesToHigh, alarmSeverityTerminPointTable=alarmSeverityTerminPointTable, alarmFacilityDataRateNotSupported=alarmFacilityDataRateNotSupported, downwardOptLineIndex=downwardOptLineIndex, plugThirdPartyUsage=plugThirdPartyUsage, containerOlClassName=containerOlClassName, physicalPortTraceRcvDapiTcmb=physicalPortTraceRcvDapiTcmb, containerCrsOptLineFromPointIndexNo4=containerCrsOptLineFromPointIndexNo4, upwardFacilitySlotNo=upwardFacilitySlotNo, downwardContainerExtNo=downwardContainerExtNo, physicalPortLaserOffDelayFunction=physicalPortLaserOffDelayFunction, crossConnectionCrsContAidListTwo=crossConnectionCrsContAidListTwo, alarmLossofTandemConnectionOduTcmB=alarmLossofTandemConnectionOduTcmB, physicalPortReceiverWavelength=physicalPortReceiverWavelength, entityTerminPointTableId=entityTerminPointTableId, physicalPortLagPortNo=physicalPortLagPortNo, transientProtSwToDuplexCompl=transientProtSwToDuplexCompl, changePhysicalPortServiceTraceExpectedOtu=changePhysicalPortServiceTraceExpectedOtu, opticalLineEntry=opticalLineEntry, alarmEqptTable=alarmEqptTable, alarmPumpLaser4TempTooLow=alarmPumpLaser4TempTooLow, scMetric=scMetric, entityTerminPointReferencedTo=entityTerminPointReferencedTo, lanType=lanType, alarmMidstageFault=alarmMidstageFault, changePhysicalPortServiceLaneChannelSetting=changePhysicalPortServiceLaneChannelSetting, alarmAutoShutdownSendingOciOdu=alarmAutoShutdownSendingOciOdu, containerEccExtNo=containerEccExtNo, terminationPointSecondaryStates=terminationPointSecondaryStates, physicalPortSigDegPeriodOduTcmB=physicalPortSigDegPeriodOduTcmB, containerConnectStdClass=containerConnectStdClass, alarmLossOfCharSyncFromFarEnd=alarmLossOfCharSyncFromFarEnd, opticalMuxVariableGain=opticalMuxVariableGain, changePhysicalPortServiceTributarySlotMethod=changePhysicalPortServiceTributarySlotMethod, sdnInterface=sdnInterface, shelfConnConnectionType=shelfConnConnectionType, optIntervalPm1weekMean=optIntervalPm1weekMean, communityEntry=communityEntry, endOfEccTable=endOfEccTable, notAssignableOpticalMuxIndexNo2=notAssignableOpticalMuxIndexNo2, newSshHostKey=newSshHostKey, physicalPortAutosrvLock=physicalPortAutosrvLock, shelfInternalPlugRates=shelfInternalPlugRates, transientEncryptionPortSingleKeyExchgFailed=transientEncryptionPortSingleKeyExchgFailed, physicalPortTraceTransmitSapiOduTcmB=physicalPortTraceTransmitSapiOduTcmB, alarmLossofTandemConnectionOduTcmC=alarmLossofTandemConnectionOduTcmC, licenseAidString=licenseAidString)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", entityFfpTable=entityFfpTable, transientThres1DayExceededOtuUAS=transientThres1DayExceededOtuUAS, alarmMansw=alarmMansw, virtualPortTraceRcvOpspTcmc=virtualPortTraceRcvOpspTcmc, entityEqptEquipmentState=entityEqptEquipmentState, containerVschPortNo=containerVschPortNo, containerExternalOmShelfNo=containerExternalOmShelfNo, pmSnapshot=pmSnapshot, scAttGradientTh=scAttGradientTh, alarmPartnerUnavailable=alarmPartnerUnavailable, alarmMismatch=alarmMismatch, ipv6ActRoutesExtNo=ipv6ActRoutesExtNo, endOfPerformance=endOfPerformance, containerFanEquipmentState=containerFanEquipmentState, alarmOpticalMuxAffect=alarmOpticalMuxAffect, ratAnalyzerElementId=ratAnalyzerElementId, entityShelfConnClassName=entityShelfConnClassName, alarmUPortFailure=alarmUPortFailure, upwardShelfConnEntry=upwardShelfConnEntry, pmSnapshotHistoricalValidFlag=pmSnapshotHistoricalValidFlag, naasMode=naasMode, moduleFanMode=moduleFanMode, physicalPortPriority=physicalPortPriority, transientThres1DayExceededOduBbe=transientThres1DayExceededOduBbe, externalVchMaxBitErrorRate=externalVchMaxBitErrorRate, opticalLineMgmt=opticalLineMgmt, entityOptLineEntry=entityOptLineEntry, containerCrossConnAidString=containerCrossConnAidString, opticalMuxVoaSetpoint=opticalMuxVoaSetpoint, moduleLanPorts=moduleLanPorts, shelfConnOperState=shelfConnOperState, alarmTransmitterDisabledOff=alarmTransmitterDisabledOff, alarmThresOptPowerCtrlFailureHigh=alarmThresOptPowerCtrlFailureHigh, scIpAddr=scIpAddr, endOfContainerTable=endOfContainerTable, alarmProtectionNotAvailable=alarmProtectionNotAvailable, alarmLockedDefectOduTcmC=alarmLockedDefectOduTcmC, alarmPartner1Deleted=alarmPartner1Deleted, privilegeChangeRemainingTime=privilegeChangeRemainingTime, entityContainerClass=entityContainerClass, changePhysicalPortServiceTraceTransmitOpspOdu=changePhysicalPortServiceTraceTransmitOpspOdu, downwardEnvChildId=downwardEnvChildId, notAssignableDcnParentId=notAssignableDcnParentId, ratStartPointTableId=ratStartPointTableId, physicalPortDelayMeasurementOperation=physicalPortDelayMeasurementOperation, oprThresholdConfigEntry=oprThresholdConfigEntry, transientThres1DayExceededFecUBE=transientThres1DayExceededFecUBE, upwardOptLineTable=upwardOptLineTable, changePhysicalPortServiceVoaMode=changePhysicalPortServiceVoaMode, notAssignableOptLineClassName=notAssignableOptLineClassName, alarmThres15MinExceededOduTcmCES=alarmThres15MinExceededOduTcmCES, containerEthParentId=containerEthParentId, endOfDownwardShelfConnTable=endOfDownwardShelfConnTable, physicalPortStagType=physicalPortStagType, alarmVirtualChannelAis=alarmVirtualChannelAis, containerVchTable=containerVchTable, transientFiberConnStatChange=transientFiberConnStatChange, shelfConnReach=shelfConnReach, facilityReferByEntry=facilityReferByEntry, communityRowStatus=communityRowStatus, changePhysicalPortServiceSigDegPeriodOduTcmA=changePhysicalPortServiceSigDegPeriodOduTcmA, alarmThres15MinExceededOduTcmBES=alarmThres15MinExceededOduTcmBES, virtualPortTimModeOduTcmB=virtualPortTimModeOduTcmB, advaInventoryGradeInventory=advaInventoryGradeInventory, endOfUpwardDcnTable=endOfUpwardDcnTable, alarmAseTableGenFailSignalinput=alarmAseTableGenFailSignalinput, lldpManagementAddress=lldpManagementAddress, opticalMuxChannelRangeProvision=opticalMuxChannelRangeProvision, containerCrsOptLineTableId=containerCrsOptLineTableId, shelfConnMdix=shelfConnMdix, containerCrossConnTable=containerCrossConnTable, entityEnvType=entityEnvType, virtualPortLacpTimeout=virtualPortLacpTimeout, containerVomPortNo=containerVomPortNo, containerVethTableId=containerVethTableId, endOfUpwardShelfConnTable=endOfUpwardShelfConnTable, containerVethClass=containerVethClass, entitySysAidString=entitySysAidString, moduleChannelRangeProvision=moduleChannelRangeProvision, opticalMuxOperState=opticalMuxOperState, optThresholdConfigLowFixed=optThresholdConfigLowFixed, notAssignableEnvIndexNo2=notAssignableEnvIndexNo2, lldpPortDescription=lldpPortDescription, alarmHighBer=alarmHighBer, physicalPortSigDegPeriodOdu=physicalPortSigDegPeriodOdu, pmSnapshotCurrentAttenOfVoa=pmSnapshotCurrentAttenOfVoa, containerScParentId=containerScParentId, alarmLicenseServerDisconnected=alarmLicenseServerDisconnected, virtualPortLagPorts=virtualPortLagPorts, lanIpMask=lanIpMask, physicalPortSigDegPeriodOtu=physicalPortSigDegPeriodOtu, opticalLineSecondaryStates=opticalLineSecondaryStates, virtualPortTraceTransmitSapiOduTcmB=virtualPortTraceTransmitSapiOduTcmB, containerVomExtNo=containerVomExtNo, alarmOpticalMuxEntry=alarmOpticalMuxEntry, terminationPointPartnerAid=terminationPointPartnerAid, virtualSessionEntry=virtualSessionEntry, entityMtosiSlotsTable=entityMtosiSlotsTable, downwardTerminPointIndexNo3=downwardTerminPointIndexNo3, containerCrossConnClassName=containerCrossConnClassName, advaInventoryShelfNo=advaInventoryShelfNo, lldpLLDPLocation=lldpLLDPLocation, physicalPortFacilities=physicalPortFacilities, alarmLossOfGfpFrame=alarmLossOfGfpFrame, hdSystemAdopt=hdSystemAdopt, moduleAcp=moduleAcp, alarmLicenseEntry=alarmLicenseEntry, terminationPointFiberDetectStatus=terminationPointFiberDetectStatus, entityFacilityAidString=entityFacilityAidString, endOfchannelTracesTable=endOfchannelTracesTable, transientEncryptionModuleSelfTestPass=transientEncryptionModuleSelfTestPass, alarmSeverityLicenseTable=alarmSeverityLicenseTable, authTrapPort=authTrapPort, transientThres1DayExceededCrcErrorsRcv=transientThres1DayExceededCrcErrorsRcv, shelfmapId=shelfmapId, upwardOptLineShelfNo=upwardOptLineShelfNo, transientThres1DayExceededOduTcmBUAS=transientThres1DayExceededOduTcmBUAS, terminationPointConnector=terminationPointConnector, notAssignableOptLineIndexNo2=notAssignableOptLineIndexNo2, downwardExternalPortShelfNo=downwardExternalPortShelfNo, containerModShelfNo=containerModShelfNo, containerLinkAidString=containerLinkAidString, neMgmt=neMgmt, crossOpticalLineEntry=crossOpticalLineEntry, endOfContainerMgmt=endOfContainerMgmt, downwardEnvSlotNo=downwardEnvSlotNo, performance=performance, haTable=haTable, entityDcnEntry=entityDcnEntry, opticalLineLaneChannel4=opticalLineLaneChannel4, physicalPortDelayMeasurementTime=physicalPortDelayMeasurementTime, licenseManagerClass=licenseManagerClass, upwardEnvTable=upwardEnvTable, virtualPortSigDegPeriodOduTcmB=virtualPortSigDegPeriodOduTcmB, ratTo=ratTo, containerLinkTableId=containerLinkTableId, hdShelves=hdShelves, alarmAutoShutdownOpuClientSignalFail=alarmAutoShutdownOpuClientSignalFail, pmSnapshotHistoricalTerminPointTable=pmSnapshotHistoricalTerminPointTable, entityCrossConnToSlotNo=entityCrossConnToSlotNo, moduleMidstagePorts=moduleMidstagePorts, fspR7EquipmentRemovedTrap=fspR7EquipmentRemovedTrap, endOfDownwardEnvTable=endOfDownwardEnvTable, pmSnapshotCurrentTerminPointInputPower=pmSnapshotCurrentTerminPointInputPower, containerScPortNo=containerScPortNo, alarmSignalDegradeOdu=alarmSignalDegradeOdu, ratAnalyzerChannelTx=ratAnalyzerChannelTx, ipv6ActRoutesPort=ipv6ActRoutesPort, alarmOptInputPwrReceivedTooLow=alarmOptInputPwrReceivedTooLow, communityIpMask=communityIpMask, physicalPortRateLimit=physicalPortRateLimit, licenseManagerOperState=licenseManagerOperState, containerConnectNonStdAidString=containerConnectNonStdAidString, advaFspR7=advaFspR7, shelfmapOperState=shelfmapOperState, entityExternalPortAidString=entityExternalPortAidString, transientCryBootFailed=transientCryBootFailed, entityEqptMtosiParentId=entityEqptMtosiParentId, containerCrsOptLineFromPointAidString=containerCrsOptLineFromPointAidString, shelfConnRowStatus=shelfConnRowStatus, transientThres1DayExceededOduTcmCBbe=transientThres1DayExceededOduTcmCBbe, entityOptLineIndexNo2=entityOptLineIndexNo2, alarmLicenseManagerTimeStamp=alarmLicenseManagerTimeStamp, containerExternalVchClassName=containerExternalVchClassName, licenseManagerRowStatus=licenseManagerRowStatus, alarmDcnTimeStamp=alarmDcnTimeStamp, fanFanProfile=fanFanProfile, lanDhcpStopAddr=lanDhcpStopAddr, unassignedInventoryMtosiParentId=unassignedInventoryMtosiParentId, alarmSeverityFacilityValue=alarmSeverityFacilityValue, containerVomEntry=containerVomEntry, eccRowStatus=eccRowStatus, transientThres1DayExceededPhysConvSE=transientThres1DayExceededPhysConvSE, opticalMuxPumpPower=opticalMuxPumpPower, upwardEnvSlotNo=upwardEnvSlotNo, containerShelfConnTable=containerShelfConnTable, downwardContainerShelfNo=downwardContainerShelfNo, alarmTurnupCondition=alarmTurnupCondition, containerShelfPortNo=containerShelfPortNo, changePhysicalPortServiceTimModeOduTcmB=changePhysicalPortServiceTimModeOduTcmB, containerEccTableId=containerEccTableId, alarmReceiverOverloadProtection=alarmReceiverOverloadProtection, containerCrsOptLineFromPointFromId=containerCrsOptLineFromPointFromId, lldpPortID=lldpPortID, notAssignableEnvParentId=notAssignableEnvParentId, containerTerminPointEntry=containerTerminPointEntry, containerConnectStdParentId=containerConnectStdParentId, notAssignableExternalPortClassName=notAssignableExternalPortClassName, physicalPortChannelProv=physicalPortChannelProv, downwardFacilityExtNo=downwardFacilityExtNo, physicalPortReach=physicalPortReach, hdSystemId=hdSystemId, alarmContainerType=alarmContainerType, containerExternalOmParentId=containerExternalOmParentId, physicalPortXfpDecisionThres=physicalPortXfpDecisionThres, containerChClassName=containerChClassName, physicalPortTraceExpectedOpspOdu=physicalPortTraceExpectedOpspOdu, containerConnectNonStdToClassName=containerConnectNonStdToClassName, scBitrate=scBitrate, opticalMuxFiberBrand=opticalMuxFiberBrand, userManagementAccessEndTime=userManagementAccessEndTime, connectionRowStatus=connectionRowStatus, containerOtlgExtNo=containerOtlgExtNo, alarmDelayMeasurementProgress=alarmDelayMeasurementProgress, privilegeChangeEntry=privilegeChangeEntry, notAssignableFacilityClassName=notAssignableFacilityClassName, externalVchOpticalPowerTx=externalVchOpticalPowerTx, containerCrsOptLineFromIndexNo1=containerCrsOptLineFromIndexNo1, physicalPortTraceExpectedSonetSection=physicalPortTraceExpectedSonetSection, alarmThres15MinExceededOduUAS=alarmThres15MinExceededOduUAS, upwardContainerPortNo=upwardContainerPortNo, lanLanMembers=lanLanMembers, containerWchIndexNo2=containerWchIndexNo2, ffpFarEndIp=ffpFarEndIp, alarmContainerTable=alarmContainerTable, neSdpType=neSdpType, hdSystemRowStatus=hdSystemRowStatus, upwardEqptEntry=upwardEqptEntry, upwardDcnSlotNo=upwardDcnSlotNo, filterCableTable=filterCableTable, entityDcnAidString=entityDcnAidString, transientEqlzProcessWait=transientEqlzProcessWait, containerEthClassName=containerEthClassName, moduleAvlndpF270Rxcrs=moduleAvlndpF270Rxcrs, alarmPumpLaser3TempTooHigh=alarmPumpLaser3TempTooHigh, activeUsersEntry=activeUsersEntry, downwardTerminPointTable=downwardTerminPointTable, artificialEntity=artificialEntity, virtualPortOwnerAid=virtualPortOwnerAid, linkMetric=linkMetric, changePhysicalPortServiceSigDegThresOdu=changePhysicalPortServiceSigDegThresOdu, virtualPortNearEndProtectionState=virtualPortNearEndProtectionState, notAssignableContainerParentId=notAssignableContainerParentId, containerOtlgShelfNo=containerOtlgShelfNo, virtualPortEncapsulationMethod=virtualPortEncapsulationMethod, entityOpticalMuxExtNo=entityOpticalMuxExtNo, crossConnectionOperState=crossConnectionOperState, containerHdSystemTable=containerHdSystemTable, alarmSeverityEqptType=alarmSeverityEqptType, notAssignableFacilityClass=notAssignableFacilityClass, containerWchIndexNo4=containerWchIndexNo4, containerOwlgTable=containerOwlgTable, physicalPortTraceTransmitDapiOduTcmA=physicalPortTraceTransmitDapiOduTcmA, physicalPortTraceRcvOpspOtu=physicalPortTraceRcvOpspOtu, knownHostIPv6RowStatus=knownHostIPv6RowStatus, entityTerminPointIndexNo1=entityTerminPointIndexNo1, oprIntervalPm1dayLow=oprIntervalPm1dayLow, downwardOpticalMuxShelfNo=downwardOpticalMuxShelfNo, alarmSeveritySysValue=alarmSeveritySysValue, alarmDcnAffect=alarmDcnAffect, alarmNtpIPv4Severity=alarmNtpIPv4Severity, entityOptLineTableId=entityOptLineTableId, plugFiberType=plugFiberType, endOfUpwardContainerTable=endOfUpwardContainerTable)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", containerEnvShelfNo=containerEnvShelfNo, entityExternalPortClassName=entityExternalPortClassName, changePhysicalPortServiceTraceFormSonetSection=changePhysicalPortServiceTraceFormSonetSection, downwardEqptEntry=downwardEqptEntry, notAssignableExternalPortTable=notAssignableExternalPortTable, entityTerminPointIndexNo4=entityTerminPointIndexNo4, fspR7WriteAccessTimeout=fspR7WriteAccessTimeout, moduleMaxPowerConsumption=moduleMaxPowerConsumption, fspR7TrapSinkCreation=fspR7TrapSinkCreation, containerVomAidString=containerVomAidString, physicalPortTerminationMode=physicalPortTerminationMode, alarmGainTiltNotSettable=alarmGainTiltNotSettable, optIntervalPm15minTimeStamp=optIntervalPm15minTimeStamp, moduleGainRange=moduleGainRange, alarmThres15MinExceededOduTcmABbe=alarmThres15MinExceededOduTcmABbe, virtualSessionChangeTime=virtualSessionChangeTime, physicalPortReportSsfLine=physicalPortReportSsfLine, alarmOpticalMuxTimeStamp=alarmOpticalMuxTimeStamp, virtualPortTraceTransmitSapiOduTcmC=virtualPortTraceTransmitSapiOduTcmC, changePhysicalPortServiceDispersionMode=changePhysicalPortServiceDispersionMode, ipv6InActRoutesPort=ipv6InActRoutesPort, containerConnectNonStdClassName=containerConnectNonStdClassName, downwardShelfConnTable=downwardShelfConnTable, alarmEncryptionModuleTamperDetected=alarmEncryptionModuleTamperDetected, containerFfpClassName=containerFfpClassName, alarmTagReceiveFail=alarmTagReceiveFail, containerShelfAidString=containerShelfAidString, moduleWidth=moduleWidth, containerOlIndexNo3=containerOlIndexNo3, changePhysicalPortServiceSigDegThresOtu=changePhysicalPortServiceSigDegThresOtu, containerPlugShelfNo=containerPlugShelfNo, alarmPcsSignalDegrade=alarmPcsSignalDegrade, externalPortMaxBitErrorRate=externalPortMaxBitErrorRate, dependentClassName=dependentClassName, alarmPumpLaser3TempTooLow=alarmPumpLaser3TempTooLow, endOfNotAssignableDcnTable=endOfNotAssignableDcnTable, entityDcnSlotNo=entityDcnSlotNo, optIntervalPm1dayValidFlag=optIntervalPm1dayValidFlag, alarmLaserBiasCurrAbnormal=alarmLaserBiasCurrAbnormal, containerEnvClass=containerEnvClass, translation=translation, shelfConnValidSigTimer=shelfConnValidSigTimer, containerHdSystemParentId=containerHdSystemParentId, entityEqptParentId=entityEqptParentId, alarmChromaticDispersionTooLow=alarmChromaticDispersionTooLow, userManagementAccessDays=userManagementAccessDays, notAssignableEqptClass=notAssignableEqptClass, ratStartPointChannelNumber=ratStartPointChannelNumber, entityCrossConnFromSlotNo=entityCrossConnFromSlotNo, entityCrsOptLineParentId=entityCrsOptLineParentId, envPortFacilityType=envPortFacilityType, containerVchTableId=containerVchTableId, plugAlias=plugAlias, userManagementInactivityPeriod=userManagementInactivityPeriod, transientEqlzRamanAdjust=transientEqlzRamanAdjust, ffpApsChannel=ffpApsChannel, physicalPortChannelSpacing=physicalPortChannelSpacing, externalPortRowStatus=externalPortRowStatus, advaInventorySerialNum=advaInventorySerialNum, virtualPortLagPortType=virtualPortLagPortType, trapSinkVersion=trapSinkVersion, ipv6InActRoutesDestIp=ipv6InActRoutesDestIp, entityProtectionCableTable=entityProtectionCableTable, aidMappingEntry=aidMappingEntry, shelfSlot=shelfSlot, virtualPortOutputPower=virtualPortOutputPower, containerModAidString=containerModAidString, virtualPortTraceRcvOpspTcmb=virtualPortTraceRcvOpspTcmb, opticalMuxBandProvision=opticalMuxBandProvision, authTrapAccountState=authTrapAccountState, alarmThres15MinExceededFecES=alarmThres15MinExceededFecES, alarmSignalDegradeOduTcmC=alarmSignalDegradeOduTcmC, moduleSuppClientPlugTypes=moduleSuppClientPlugTypes, opticalMuxInhibitSwitchToProt=opticalMuxInhibitSwitchToProt, externalPortFrameFormat=externalPortFrameFormat, fanForceDestroy=fanForceDestroy, alarmFiberConnMismatch=alarmFiberConnMismatch, alarmInputTIF=alarmInputTIF, ntpIPv4Admin=ntpIPv4Admin, containerExternalPortExtNo=containerExternalPortExtNo, userManagementPasswordHashType=userManagementPasswordHashType, opticalMuxTilt=opticalMuxTilt, alarmEqptEntry=alarmEqptEntry, showLastLoginSuccess=showLastLoginSuccess, licenseOperState=licenseOperState, shelfmapEntry=shelfmapEntry, physicalPortTraceTransmitDapiOdu=physicalPortTraceTransmitDapiOdu, terminationPointOper=terminationPointOper, changePhysicalPortServiceTcmALevel=changePhysicalPortServiceTcmALevel, ntpIPv4SourceIp=ntpIPv4SourceIp, upwardOptLineSlotNo=upwardOptLineSlotNo, virtualPortChannelProv=virtualPortChannelProv, upwardEnvClassName=upwardEnvClassName, externalVchRowStatus=externalVchRowStatus, containerCrsOptLineTable=containerCrsOptLineTable, containerLinkTable=containerLinkTable, optThresholdConfigEntry=optThresholdConfigEntry, transientThres1DayExceededOtuSES=transientThres1DayExceededOtuSES, physicalPortDispersionSetting=physicalPortDispersionSetting, pmSnapshotCurrentInputPower=pmSnapshotCurrentInputPower, entityCrossConnToId=entityCrossConnToId, alarmLossOfFrame=alarmLossOfFrame, downwardEnvEntry=downwardEnvEntry, alarmAseTableGenFailLow=alarmAseTableGenFailLow, notAssignableDcnClass=notAssignableDcnClass, upwardEqptPortNo=upwardEqptPortNo, pmSnapshotHistoricalTerminPointTimeStamp=pmSnapshotHistoricalTerminPointTimeStamp, physicalPortVoaMode=physicalPortVoaMode, alarmSeverityDcnEntry=alarmSeverityDcnEntry, transientThres1DayExceededOtuBbe=transientThres1DayExceededOtuBbe, moduleRstp=moduleRstp, containerVomSlotNo=containerVomSlotNo, virtualPortAdmin=virtualPortAdmin, containerCrsOptLineToIndexNo4=containerCrsOptLineToIndexNo4, alarmThres15MinExceededSonetSectSES=alarmThres15MinExceededSonetSectSES, notAssignableOpticalMuxParentId=notAssignableOpticalMuxParentId, opticalMuxChannelsProvision=opticalMuxChannelsProvision, scAlsMode=scAlsMode, containerVschClassName=containerVschClassName, ffpProtectionType=ffpProtectionType, shelfAirFilterClear=shelfAirFilterClear, transientThres1DayExceededOduTcmCES=transientThres1DayExceededOduTcmCES, alarmPowerSupplyUnitFailure=alarmPowerSupplyUnitFailure, oprIntervalPm1dayNumber=oprIntervalPm1dayNumber, downwardContainerChildId=downwardContainerChildId, terminationPointConnType=terminationPointConnType, transientFarEndDyingGasp=transientFarEndDyingGasp, licenseManagerShelfNo=licenseManagerShelfNo, ipConf=ipConf, physicalPortIngressTid=physicalPortIngressTid, terminationPointFiber=terminationPointFiber, alarmInputVoltageFailure=alarmInputVoltageFailure, alarmSeverityNtpIPv6Type=alarmSeverityNtpIPv6Type, alarmRAndCPortOutage=alarmRAndCPortOutage, optIntervalPm1dayLow=optIntervalPm1dayLow, downwardFacilityTable=downwardFacilityTable, alarmSignalDegradeOlm=alarmSignalDegradeOlm, endOfPlugTable=endOfPlugTable, virtualPortTraceExpectedOduTcmB=virtualPortTraceExpectedOduTcmB, eccLanAid=eccLanAid, virtualPortIngressTid=virtualPortIngressTid, alarmSeverityLicenseEntry=alarmSeverityLicenseEntry, optIntervalPm1dayNumber=optIntervalPm1dayNumber, containerExternalOmTable=containerExternalOmTable, containerVethAidString=containerVethAidString, moduleRowStatus=moduleRowStatus, fspR7AccountStateChange=fspR7AccountStateChange, endOfHaTable=endOfHaTable, upwardTerminPointTable=upwardTerminPointTable, lanValidSigTimer=lanValidSigTimer, alarmOosManagement=alarmOosManagement, downwardDcnSlotNo=downwardDcnSlotNo, alarmSeverityDcnType=alarmSeverityDcnType, alarmSeverityFacilityType=alarmSeverityFacilityType, ffpHoldOffTime=ffpHoldOffTime, alarmAlarmIndicationSignalLine=alarmAlarmIndicationSignalLine, ipv6ActRoutesNextHopIp=ipv6ActRoutesNextHopIp, trapSinkCommunity=trapSinkCommunity, licenseManagerSecondaryStates=licenseManagerSecondaryStates, alarmLossOfFrameOtu=alarmLossOfFrameOtu, containerShelfConnParentId=containerShelfConnParentId, containerLinkExtNo=containerLinkExtNo, eccOperState=eccOperState, alarmClientOutage=alarmClientOutage, ntpIPv4Ip=ntpIPv4Ip, entityEqptAidString=entityEqptAidString, dnsServer2=dnsServer2, fanType=fanType, moduleAvlndpF2967Rxcrs=moduleAvlndpF2967Rxcrs, shelfPowerSupplyProtection=shelfPowerSupplyProtection, downwardFacilityShelfNo=downwardFacilityShelfNo, upwardDcnParentId=upwardDcnParentId, containerConnectStdToIndexNo2=containerConnectStdToIndexNo2, transientPmSnapshotStarted=transientPmSnapshotStarted, physicalPortLaserBiasCurrLevel=physicalPortLaserBiasCurrLevel, containerCrsOptLineToIndexNo1=containerCrsOptLineToIndexNo1, alarmFacilityForcedOn=alarmFacilityForcedOn, alarmOosDisabledLckOduRx=alarmOosDisabledLckOduRx, oprIntervalPm15minHigh=oprIntervalPm15minHigh, trapSource=trapSource, alarmOpuClientSignalFail=alarmOpuClientSignalFail, containerPchTable=containerPchTable, containerWchAidString=containerWchAidString, alarmShelfmapType=alarmShelfmapType, containerCrossDcnEntry=containerCrossDcnEntry, externalPortSourceProfile=externalPortSourceProfile, alarmPumpLaser4TempTooHigh=alarmPumpLaser4TempTooHigh, physicalPortLagState=physicalPortLagState, containerHdSystemAidString=containerHdSystemAidString, transientFwpHashPass=transientFwpHashPass, physicalPortMonLevel=physicalPortMonLevel, fileDataCreationTime=fileDataCreationTime, entityShelfConnPortNo=entityShelfConnPortNo, alarmFiberAttenuationCond=alarmFiberAttenuationCond, endOfSpecificMgmt=endOfSpecificMgmt, inventory=inventory, transientThres1DayExceededSonetSectCV=transientThres1DayExceededSonetSectCV, terminationPointTable=terminationPointTable, virtualPortPortRole=virtualPortPortRole, alarmLossOfPRBSonaLane=alarmLossOfPRBSonaLane, virtualPortTerminationMode=virtualPortTerminationMode, scIPv6=scIPv6, alarmEnvTimeStamp=alarmEnvTimeStamp, entityOpticalMuxClass=entityOpticalMuxClass, plugLoopbackAttenuation=plugLoopbackAttenuation, containerConnectStdNotation=containerConnectStdNotation, alarmAirDustFilterClogged=alarmAirDustFilterClogged, advaInventoryHardwareRev=advaInventoryHardwareRev, changePhysicalPortServiceTcmBLevel=changePhysicalPortServiceTcmBLevel, moduleScuRing=moduleScuRing, lldpManagementInterface=lldpManagementInterface, physicalPortTraceTransmitOpspOtu=physicalPortTraceTransmitOpspOtu, lanIPv6LinkLocal=lanIPv6LinkLocal, containerCrossDcnSlotNo=containerCrossDcnSlotNo, aidMappingAidString=aidMappingAidString, protectionCableType=protectionCableType, channelTracesIndexNo4=channelTracesIndexNo4, physicalPortBehaviour=physicalPortBehaviour, fspR7WriteAccessDenied=fspR7WriteAccessDenied, dependentEntry=dependentEntry, physicalPortMonitoredBitrate=physicalPortMonitoredBitrate, virtualPortSwitchCommand=virtualPortSwitchCommand, alarmOosMaintenance=alarmOosMaintenance, alarmSignalDegradeScn=alarmSignalDegradeScn, alarmLossOfInputSignal=alarmLossOfInputSignal, alarmEncryptionModuleSelfTestStarted=alarmEncryptionModuleSelfTestStarted, containerCrsOptLineFromPointTableId=containerCrsOptLineFromPointTableId, terminationPointBand=terminationPointBand, entityTerminPointPortClass=entityTerminPointPortClass, upwardTerminPointIndexNo3=upwardTerminPointIndexNo3, physicalPortTraceTransmitDapiOduTcmC=physicalPortTraceTransmitDapiOduTcmC, virtualPortLagActivePorts=virtualPortLagActivePorts, ipv6InActRoutesRowStatus=ipv6InActRoutesRowStatus, whitelistIpAddr=whitelistIpAddr, alarmWtrTimerRunning=alarmWtrTimerRunning, physicalPortSigDegPeriodIntegration=physicalPortSigDegPeriodIntegration, physicalPortMacAddress=physicalPortMacAddress, envPortEntry=envPortEntry, containerEccEntry=containerEccEntry, scMonitoredDuplexMode=scMonitoredDuplexMode, oprIntervalPm1weekTable=oprIntervalPm1weekTable, shelfOscChannel=shelfOscChannel, upwardShelfConnPortNo=upwardShelfConnPortNo, plugChannelRangeProvision=plugChannelRangeProvision, physicalPortTable=physicalPortTable, trapSinkUserName=trapSinkUserName, plugGenericPorts=plugGenericPorts, endOfAlarmEqptTable=endOfAlarmEqptTable, entitySysEquipmentState=entitySysEquipmentState, alarmSeverityContainerType=alarmSeverityContainerType, changePhysicalPortServiceTraceTransmitSapiOduTcmA=changePhysicalPortServiceTraceTransmitSapiOduTcmA, terminationPointFrequency=terminationPointFrequency, neCommandPass=neCommandPass, physicalPortSwitchCommand=physicalPortSwitchCommand)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", alarmPumpLaser2TempTooHigh=alarmPumpLaser2TempTooHigh, lsrtempThresholdConfigLowFixed=lsrtempThresholdConfigLowFixed, moduleAlsConf=moduleAlsConf, lldpOperState=lldpOperState, ratBlockingConnState=ratBlockingConnState, ntpIPv4OperState=ntpIPv4OperState, shelfmapAdmin=shelfmapAdmin, containerOmAidString=containerOmAidString, downwardOptLineChildId=downwardOptLineChildId, containerFanShelfNo=containerFanShelfNo, alarmThres15MinExceededBbePcs=alarmThres15MinExceededBbePcs, physicalPortAutoPTassignment=physicalPortAutoPTassignment, alarmPilotReceiveLevelHigh=alarmPilotReceiveLevelHigh, entityFfpParentId=entityFfpParentId, shelfBandProvision=shelfBandProvision, physicalPortType=physicalPortType, transientThres1DayExceededOduUAS=transientThres1DayExceededOduUAS, containerConnectStdFromId=containerConnectStdFromId, ffpRevertMode=ffpRevertMode, licenseSlotNo=licenseSlotNo, containerTerminPointIndexNo1=containerTerminPointIndexNo1, notAssignableEnvIndexNo3=notAssignableEnvIndexNo3, virtualPortTcmALevel=virtualPortTcmALevel, endOfDownwardFacilityTable=endOfDownwardFacilityTable, containerCrsOptLineToId=containerCrsOptLineToId, containerEthSlotNo=containerEthSlotNo, ntpIPv4Table=ntpIPv4Table, transientThres1DayExceededOduTcmABbe=transientThres1DayExceededOduTcmABbe, entityOptLineClassName=entityOptLineClassName, upwardDcnClassName=upwardDcnClassName, trapSinkIpMode=trapSinkIpMode, entityConnectionFromId=entityConnectionFromId, opticalMuxOffset=opticalMuxOffset, scReach=scReach, containerOlParentId=containerOlParentId, containerVomClassName=containerVomClassName, moduleMode=moduleMode, alarmPowerMissing=alarmPowerMissing, endOfOpticalMuxMgmt=endOfOpticalMuxMgmt, optIntervalPm1weekNumber=optIntervalPm1weekNumber, pmSnapshotHistoricalTerminPointEntry=pmSnapshotHistoricalTerminPointEntry, entitySysShelfNo=entitySysShelfNo, entitySysParentId=entitySysParentId, ffpSignalDegradeSwitching=ffpSignalDegradeSwitching, transientMpDeleted=transientMpDeleted, notAssignableDcnTable=notAssignableDcnTable, notAssignableExternalPortIndexNo2=notAssignableExternalPortIndexNo2, notAssignableOptLineTable=notAssignableOptLineTable, ratAnalyzerTable=ratAnalyzerTable, entitySysType=entitySysType, virtualPortTraceTransmitOpspOduTcmB=virtualPortTraceTransmitOpspOduTcmB, entityCrossConnToExtNo=entityCrossConnToExtNo, containerVomTable=containerVomTable, alarmInsufficientPower=alarmInsufficientPower, ntpIPv4SyncStatus=ntpIPv4SyncStatus, transientThres1DayExceededOduTcmCUAS=transientThres1DayExceededOduTcmCUAS, userManagementTable=userManagementTable, licenseSecondaryStates=licenseSecondaryStates, entityFfpShelfNo=entityFfpShelfNo, virtualPortRowStatus=virtualPortRowStatus, virtualPortTimModeOdu=virtualPortTimModeOdu, userManagementAccountFlag=userManagementAccountFlag, containerLinkSlotNo=containerLinkSlotNo, containerExternalPortEntry=containerExternalPortEntry, alarmDatabaseFailure=alarmDatabaseFailure, moduleNodeIpAddress=moduleNodeIpAddress, containerCrossConnFromPointExtNo=containerCrossConnFromPointExtNo, notAssignableDcnIndexNo4=notAssignableDcnIndexNo4, containerFfpPortNo=containerFfpPortNo, alarmSeverityTerminPointValue=alarmSeverityTerminPointValue, fspR7CommunityCreation=fspR7CommunityCreation, alarmAutoShutdownBlock=alarmAutoShutdownBlock, entityCrossConnToShelfNo=entityCrossConnToShelfNo, containerExternalOmEntry=containerExternalOmEntry, dependentId=dependentId, physicalPortPayload=physicalPortPayload, notAssignableEnvEntry=notAssignableEnvEntry, userManagementPasswordMaxAge=userManagementPasswordMaxAge, entityFfpType=entityFfpType, upwardExternalPortEntry=upwardExternalPortEntry, containerEccSlotNo=containerEccSlotNo, lldpManagementObjectID=lldpManagementObjectID, opticalLineLogicalInterfaceAid=opticalLineLogicalInterfaceAid, containerVschEntry=containerVschEntry, alarmPsmRedundancyMismatch=alarmPsmRedundancyMismatch, moduleAvlmdp=moduleAvlmdp, physicalPortTraceExpectedDapiOtu=physicalPortTraceExpectedDapiOtu, notAssignableFacilityEntry=notAssignableFacilityEntry, transientThres1DayExceededSonetLineES=transientThres1DayExceededSonetLineES, containerCrossConnToPortNo=containerCrossConnToPortNo, channelTracesFromAid=channelTracesFromAid, dependentIndexNo3=dependentIndexNo3, transientCryAuthKeyReceived=transientCryAuthKeyReceived, linkNendIpMonitor=linkNendIpMonitor, notAssignableContainerIndexNo4=notAssignableContainerIndexNo4, terminationPointConnEqptState=terminationPointConnEqptState, externalVchTransmitChannel=externalVchTransmitChannel, syslogIPv4Table=syslogIPv4Table, licenses=licenses, alarmSysTimeStamp=alarmSysTimeStamp, alarmUnequippedLowerOrderPath=alarmUnequippedLowerOrderPath, upwardEnvShelfNo=upwardEnvShelfNo, autoRestart=autoRestart, plugLength=plugLength, externalVchFarEndLocation=externalVchFarEndLocation, changePhysicalPortServiceLaserDelayTimer=changePhysicalPortServiceLaserDelayTimer, ffpPeerAid=ffpPeerAid, connectionState=connectionState, externalPortMaxChromDisperRcv=externalPortMaxChromDisperRcv, activeUsersTerminate=activeUsersTerminate, alarmDbReplicationIncompleted=alarmDbReplicationIncompleted, alarmOptSignalFailure=alarmOptSignalFailure, containerConnectStdToIndexNo1=containerConnectStdToIndexNo1, alarmContainerEntry=alarmContainerEntry, alarmThres15MinExceededSonetSectBbe=alarmThres15MinExceededSonetSectBbe, physicalPortTraceTransmitOpspOduTcmC=physicalPortTraceTransmitOpspOduTcmC, externalVchMaxChromDisperRcv=externalVchMaxChromDisperRcv, physicalPortSigDegThresSdhSection=physicalPortSigDegThresSdhSection, ffpSDswitching=ffpSDswitching, downwardDcnTable=downwardDcnTable, fanMaxPowerConsumption=fanMaxPowerConsumption, shelfFDports=shelfFDports, containerConnectNonStdFromClassName=containerConnectNonStdFromClassName, entityCrsOptLineClassName=entityCrsOptLineClassName, physicalPortAvlntsTxcrs=physicalPortAvlntsTxcrs, fspR7WriteAccessRevoked=fspR7WriteAccessRevoked, PYSNMP_MODULE_ID=advaFspR7, physicalPortTimModeSonetSection=physicalPortTimModeSonetSection, physicalPortTraceRcvDapiTcma=physicalPortTraceRcvDapiTcma, alarmRamanPumpPwrTooLow=alarmRamanPumpPwrTooLow, entityDcnExtNo=entityDcnExtNo, entityFacilityOneIndex=entityFacilityOneIndex, fspR7PrivilegeChange=fspR7PrivilegeChange, alarmEncryptionPortMaxKeyExchgFailuresReachedIs=alarmEncryptionPortMaxKeyExchgFailuresReachedIs, entityOptLineIndexNo3=entityOptLineIndexNo3, fspR7DeletionTrap=fspR7DeletionTrap, alarmAlarmIndicationSignalLowerOrderPath=alarmAlarmIndicationSignalLowerOrderPath, opticalMuxOffsetHigh=opticalMuxOffsetHigh, terminationPointRowStatus=terminationPointRowStatus, alarmPowerConsumptionHigh=alarmPowerConsumptionHigh, containerOtlgClass=containerOtlgClass, physicalPortTraceTransmitSapiOtu=physicalPortTraceTransmitSapiOtu, communityName=communityName, containerCrsOptLineFromPointEntry=containerCrsOptLineFromPointEntry, containerFfpEntry=containerFfpEntry, notAssignableContainerIndexNo3=notAssignableContainerIndexNo3, terminationPointValidSigTimer=terminationPointValidSigTimer, privilegeChangeDuration=privilegeChangeDuration, upwardShelfConnShelfNo=upwardShelfConnShelfNo, containerCrsOptLineFromPointClassName=containerCrsOptLineFromPointClassName, alarmAutoShutdownToHighTxPwr=alarmAutoShutdownToHighTxPwr, externalVchChromDisperTx=externalVchChromDisperTx, opticalLineTransmitWavelength=opticalLineTransmitWavelength, endOfNotAssignableOpticalMuxTable=endOfNotAssignableOpticalMuxTable, performanceFacilityMonitoring=performanceFacilityMonitoring, containerCrossConnParentId=containerCrossConnParentId, virtualSessionTable=virtualSessionTable, moduleBand=moduleBand, linkMtu=linkMtu, alarmChromaticDispersionTooHigh=alarmChromaticDispersionTooHigh, changePhysicalPortServiceTimModeSonetSection=changePhysicalPortServiceTimModeSonetSection, alarmSeverityExternalPortType=alarmSeverityExternalPortType, externalVchConnectionState=externalVchConnectionState, changePhysicalPortServiceTraceTransmitDapiOduTcmC=changePhysicalPortServiceTraceTransmitDapiOduTcmC, alarmAutoShutdownSendingLckOdu=alarmAutoShutdownSendingLckOdu, fileDataEntry=fileDataEntry, physicalPortTraceExpectedOdu=physicalPortTraceExpectedOdu, downwardDcnIndex=downwardDcnIndex, alarmServerSignalFail=alarmServerSignalFail, lanAreaAid=lanAreaAid, notAssignableEqptIndexNo2=notAssignableEqptIndexNo2, containerCrossDcnAidString=containerCrossDcnAidString, moduleDCFiberType=moduleDCFiberType, opticalLineLaneChannel3=opticalLineLaneChannel3, transientFwpInstallCompleted=transientFwpInstallCompleted, shelfmapSerialNumInv=shelfmapSerialNumInv, containerConnectStdClassName=containerConnectStdClassName, alarmSignalFailureOnLink=alarmSignalFailureOnLink, alarmSeverityShelfmapTable=alarmSeverityShelfmapTable, changePhysicalPortServiceFlowControl=changePhysicalPortServiceFlowControl, fileDataSize=fileDataSize, envPortRowStatus=envPortRowStatus, alarmThres15MinExceededOtuES=alarmThres15MinExceededOtuES, downwardOpticalMuxEntry=downwardOpticalMuxEntry, containerScTable=containerScTable, lanIpAddr=lanIpAddr, crossOpticalLineRowStatus=crossOpticalLineRowStatus, upwardEnvEntry=upwardEnvEntry, performanceFacilityThreshold=performanceFacilityThreshold, entityCrossConnFromPortNo=entityCrossConnFromPortNo, entityOpticalMuxTable=entityOpticalMuxTable, opticalMuxSigDegThresReceiver=opticalMuxSigDegThresReceiver, transientCrySwitchFailed=transientCrySwitchFailed, endOfserviceDiagnostics=endOfserviceDiagnostics, notAssignableDcnIndexNo3=notAssignableDcnIndexNo3, entityFilterCableEntry=entityFilterCableEntry, containerEthPortNo=containerEthPortNo, entityEnvClassName=entityEnvClassName, oprIntervalPm1dayMean=oprIntervalPm1dayMean, containerShelfConnClassName=containerShelfConnClassName, modulePsuOutputPower=modulePsuOutputPower, endOfAlarmSeverityOpticalMuxTable=endOfAlarmSeverityOpticalMuxTable, alarmLossOfTestSeqSynchOpu=alarmLossOfTestSeqSynchOpu, containerTerminPointClassName=containerTerminPointClassName, notAssignableOptLineIndexNo3=notAssignableOptLineIndexNo3, notAssignableShelfConnClassName=notAssignableShelfConnClassName, mpFilePointer=mpFilePointer, sslKeyLength=sslKeyLength, containerFanAidString=containerFanAidString, entityOpticalMuxAidString=entityOpticalMuxAidString, ipv6ActRoutesPrefixLen=ipv6ActRoutesPrefixLen, alarmDsbdChannelPowerTooHigh=alarmDsbdChannelPowerTooHigh, upwardEqptParentId=upwardEqptParentId, moduleAdmin=moduleAdmin, advaInventoryFpgaRev=advaInventoryFpgaRev, lldpSystemDescription=lldpSystemDescription, modulePartner4=modulePartner4, syslogIPv6Table=syslogIPv6Table, moduleCapabilityLevelProvision=moduleCapabilityLevelProvision, downwardOptLineEntry=downwardOptLineEntry, moduleTable=moduleTable, physicalPortSigDegThresOduTcmB=physicalPortSigDegThresOduTcmB, alarmHdSystemTimeStamp=alarmHdSystemTimeStamp, virtualPortTimModeOduTcmC=virtualPortTimModeOduTcmC, upwardFacilityShelfNo=upwardFacilityShelfNo, containerCrsOptLineFromPointIndexNo2=containerCrsOptLineFromPointIndexNo2, entityOptLineClass=entityOptLineClass, entityCrsOptLineType=entityCrsOptLineType, ratStartPointIndexNo4=ratStartPointIndexNo4, dependentIndexNo4=dependentIndexNo4, endOfOpticalMuxTable=endOfOpticalMuxTable, notAssignableOptLineClass=notAssignableOptLineClass, alarmReceiverDisabled=alarmReceiverDisabled, lldpChassisID=lldpChassisID, shelfShelfId=shelfShelfId, alarmLinkControlProtocolFailure=alarmLinkControlProtocolFailure, alarmLinkFailToPartner3=alarmLinkFailToPartner3, alarmAseTableGenFailOscMissing=alarmAseTableGenFailOscMissing, terminationPointGroup=terminationPointGroup, containerLanParentId=containerLanParentId, notAssignableFacilityIndexNo3=notAssignableFacilityIndexNo3, notAssignableShelfConnTable=notAssignableShelfConnTable, containerPlugAidString=containerPlugAidString, dcnReferByEntry=dcnReferByEntry, ipv6InActRoutesPortNo=ipv6InActRoutesPortNo, entityEqptPortNo=entityEqptPortNo, files=files, lldpAlias=lldpAlias, alarmOpmAbnormalCondition=alarmOpmAbnormalCondition, containerCrossConnToSlotNo=containerCrossConnToSlotNo, alarmShelfConnEntry=alarmShelfConnEntry, virtualPortOduTribTimeSlottNo=virtualPortOduTribTimeSlottNo, transientProtSwToDuplexStart=transientProtSwToDuplexStart, changePhysicalPortServiceTraceTransmitDapiOtu=changePhysicalPortServiceTraceTransmitDapiOtu)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", ffpDirection=ffpDirection, alarmThres15MinExceededOtuSES=alarmThres15MinExceededOtuSES, alarmSeverityShelfmapEntry=alarmSeverityShelfmapEntry, containerShelfEquipmentState=containerShelfEquipmentState, upwardFacilityPortNo=upwardFacilityPortNo, virtualPortEntry=virtualPortEntry, changePhysicalPortServiceAdmin=changePhysicalPortServiceAdmin, moduleAvlndpF2967Txcrs=moduleAvlndpF2967Txcrs, alarmLosAttProgress=alarmLosAttProgress, alarmReplaceAirFilter=alarmReplaceAirFilter, ipv6ActRoutesEntry=ipv6ActRoutesEntry, virtualPortLacpMode=virtualPortLacpMode, containerCrsOptLineToIndexNo2=containerCrsOptLineToIndexNo2, alarmThres15MinExceededOtuBbe=alarmThres15MinExceededOtuBbe, shelfConnEntry=shelfConnEntry, downwardShelfConnExtNo=downwardShelfConnExtNo, alarmHwOprReachedHT=alarmHwOprReachedHT, changePhysicalPortServiceTraceTransmitOpspOduTcmB=changePhysicalPortServiceTraceTransmitOpspOduTcmB, externalPortMinOptPowerRcv=externalPortMinOptPowerRcv, virtualPortChannelBand=virtualPortChannelBand, licenseLicenseCountAvailable=licenseLicenseCountAvailable, entityContainerExtNo=entityContainerExtNo, alarmSectionTraceMismatch=alarmSectionTraceMismatch, containerCrossConnFromPointFromId=containerCrossConnFromPointFromId, syslogIPv4SecurityReports=syslogIPv4SecurityReports, upwardEnvParentId=upwardEnvParentId, licenseManagerAidString=licenseManagerAidString, pmSnapshotHistoricalTerminPointValue=pmSnapshotHistoricalTerminPointValue, externalVchMinOsnrRcv=externalVchMinOsnrRcv, containerConnectStdToIndexNo4=containerConnectStdToIndexNo4, modulePartner2=modulePartner2, transientSwResetReload=transientSwResetReload, alarmLocalOscTemperatureTooLow=alarmLocalOscTemperatureTooLow, entityFacilityParentId=entityFacilityParentId, userManagementLastLoginFailInfo=userManagementLastLoginFailInfo, virtualPortProtectionRole=virtualPortProtectionRole, alarmThres15MinExceededOduTcmCUAS=alarmThres15MinExceededOduTcmCUAS, physicalPortMaxFrameSize=physicalPortMaxFrameSize, upwardContainerShelfNo=upwardContainerShelfNo, entityFilterCableIndex1=entityFilterCableIndex1, plugChannelSpacingProvision=plugChannelSpacingProvision, containerWchIndexNo3=containerWchIndexNo3, notAssignableEqptAidString=notAssignableEqptAidString, ntpIPv6RowStatus=ntpIPv6RowStatus, containerOwlgAidString=containerOwlgAidString, containerOtlgTableId=containerOtlgTableId, virtualSessionStatus=virtualSessionStatus, alarmThres15MinExceededFecUBE=alarmThres15MinExceededFecUBE, ratChIngress=ratChIngress, fanAdmin=fanAdmin, crossConnectionAlias=crossConnectionAlias, alarmThres15MinExceededSonetSectCV=alarmThres15MinExceededSonetSectCV, alarmThres15MinExceededOduSES=alarmThres15MinExceededOduSES, virtualPortTable=virtualPortTable, entityEnvSlotNo=entityEnvSlotNo, alarmProfileSeverityDefaultValue=alarmProfileSeverityDefaultValue, fanTable=fanTable, privilegeChangeTable=privilegeChangeTable, shelfConnMgmt=shelfConnMgmt, moduleGenericPlugRates=moduleGenericPlugRates, advaInventoryUnitName=advaInventoryUnitName, containerScClassName=containerScClassName, alarmLossOfMultiFrameOtu=alarmLossOfMultiFrameOtu, physicalPortOpticalSetPointLane2=physicalPortOpticalSetPointLane2, containerCrsOptLineFromPointIndexNo3=containerCrsOptLineFromPointIndexNo3, alarmSeverityNtpIPv6Value=alarmSeverityNtpIPv6Value, fileDataTable=fileDataTable, moduleIpAddr=moduleIpAddr, ipv6InActRoutesType=ipv6InActRoutesType, physicalPortCirRcv=physicalPortCirRcv, eqptMgmt=eqptMgmt, alarmExcessLLDPNeighborsTx=alarmExcessLLDPNeighborsTx, alarmSeverityLicenseValue=alarmSeverityLicenseValue, containerPlugParentId=containerPlugParentId, containerLanSlotNo=containerLanSlotNo, opticalLineFarEndLocation=opticalLineFarEndLocation, alarmDuplexLinkFailure=alarmDuplexLinkFailure, alarmLinkFailToPartner1=alarmLinkFailToPartner1, crossConnectionIngressNodeIp=crossConnectionIngressNodeIp, entityDcnClass=entityDcnClass, containerCrsOptLineFromPointTable=containerCrsOptLineFromPointTable, knownHostIPv6Table=knownHostIPv6Table, upwardEnvIndex=upwardEnvIndex, alarmTemperatureTooHigh=alarmTemperatureTooHigh, physicalPortTraceExpectedOpspOtu=physicalPortTraceExpectedOpspOtu, ffpProtectionAid=ffpProtectionAid, alarmTurnupFailed=alarmTurnupFailed, alarmPPortOutage=alarmPPortOutage, plugReach=plugReach, lldpManagementType=lldpManagementType, userManagementFailedLoginAttempts=userManagementFailedLoginAttempts, upwardOptLineExtNo=upwardOptLineExtNo, alarmFiberConnCommError=alarmFiberConnCommError, notAssignableFacilityIndexNo4=notAssignableFacilityIndexNo4, containerExternalVchExtNo=containerExternalVchExtNo, lanFrcdLogin=lanFrcdLogin, fspR7WriteAccessGranted=fspR7WriteAccessGranted, ipv6ActRoutesDestIp=ipv6ActRoutesDestIp, crossConnectionCrsFunction=crossConnectionCrsFunction, upwardExternalPortParentId=upwardExternalPortParentId, physicalPortOduMultiplexStructure=physicalPortOduMultiplexStructure, notAssignableExternalPortIndexNo4=notAssignableExternalPortIndexNo4, entityOptLineParentId=entityOptLineParentId, externalPortMaxOptPowerRcv=externalPortMaxOptPowerRcv, linkAuthType=linkAuthType, entityShelfConnTableId=entityShelfConnTableId, modulePartner3=modulePartner3, moduleOutputReset=moduleOutputReset, containerLinkEntry=containerLinkEntry, endOfNotAssignableExternalPortTable=endOfNotAssignableExternalPortTable, opticalMuxVariableGainNtoC=opticalMuxVariableGainNtoC, upwardExternalPortSlotNo=upwardExternalPortSlotNo, scChannel=scChannel, terminationPointDirection=terminationPointDirection, alarmLossOfCoupling=alarmLossOfCoupling, containerVschClass=containerVschClass, entityShelfConnOneIndex=entityShelfConnOneIndex, alarmLatencyTooLow=alarmLatencyTooLow, transientThres1DayExceededOduTcmCSES=transientThres1DayExceededOduTcmCSES, changePhysicalPortServiceSigDegThresSdhMs=changePhysicalPortServiceSigDegThresSdhMs, userManagementPrivacyKeyType=userManagementPrivacyKeyType, performanceFacility=performanceFacility, moduleForceConfig=moduleForceConfig, transientWorkingSwitchedtoProtection=transientWorkingSwitchedtoProtection, oprIntervalPm1weekValidFlag=oprIntervalPm1weekValidFlag, entityEnvParentId=entityEnvParentId, notAssignableContainerIndexNo2=notAssignableContainerIndexNo2, notAssignableEqptClassName=notAssignableEqptClassName, channelTracesElementId=channelTracesElementId, entityOpticalMuxType=entityOpticalMuxType, crossConnectionCrsMcAidList=crossConnectionCrsMcAidList, alarmAutoShutdownAls=alarmAutoShutdownAls, transientThres1DayExceededOduTcmAES=transientThres1DayExceededOduTcmAES, containerShelfmapTypeInv=containerShelfmapTypeInv, entityFfpClassName=entityFfpClassName, scHelloInterval=scHelloInterval, ipv6ActRoutesSlotNo=ipv6ActRoutesSlotNo, entityFilterCableTable=entityFilterCableTable, alarmLossOfPointerLowerOrderPath=alarmLossOfPointerLowerOrderPath, writeAccessStatus=writeAccessStatus, entitySysOneIndex=entitySysOneIndex, alarmTerminalLoopback=alarmTerminalLoopback, alarmRemoteDefectIndicationLowerOrderPath=alarmRemoteDefectIndicationLowerOrderPath, upwardExternalPortExtNo=upwardExternalPortExtNo, physicalPortFarEndProtectionState=physicalPortFarEndProtectionState, moduleClientPorts=moduleClientPorts, entityMtosiSlotsClassName=entityMtosiSlotsClassName, containerVchClass=containerVchClass, downwardTerminPointIndexNo1=downwardTerminPointIndexNo1, virtualPortTraceRcvDapiTcmb=virtualPortTraceRcvDapiTcmb, entityDcnParentId=entityDcnParentId, pmSnapshotHistoricalNumber=pmSnapshotHistoricalNumber, moduleGroup=moduleGroup, physicalPortLaneChannel1=physicalPortLaneChannel1, moduleSecondaryStates=moduleSecondaryStates, containerVchParentId=containerVchParentId, entityCrsOptLineToIndexNo3=entityCrsOptLineToIndexNo3, fspR7TrapSinkChange=fspR7TrapSinkChange, neCommandPath=neCommandPath, optIntervalPm1weekLow=optIntervalPm1weekLow, upwardOptLineParentId=upwardOptLineParentId, notAssignableDcnIndexNo2=notAssignableDcnIndexNo2, containerModTableId=containerModTableId, virtualPortDataLayerPmReset=virtualPortDataLayerPmReset, alarmFacilityTimeStamp=alarmFacilityTimeStamp, alarmSwitchtoProtectionInhibited=alarmSwitchtoProtectionInhibited, upwardOpticalMuxIndex=upwardOpticalMuxIndex, physicalPortCbsTrmt=physicalPortCbsTrmt, transientNtpSrvTestFailed=transientNtpSrvTestFailed, authTrapAccess=authTrapAccess, notAssignableShelfConnAidString=notAssignableShelfConnAidString, autoProvisionOL=autoProvisionOL, transientPathCleanupComplete=transientPathCleanupComplete, alarmOosAins=alarmOosAins, transientPmSnapshotEnded=transientPmSnapshotEnded, entityFilterCableIndex2=entityFilterCableIndex2, privilegeChangeCurrentPrivilege=privilegeChangeCurrentPrivilege, notAssignableContainerTable=notAssignableContainerTable, notAssignableEqptEntry=notAssignableEqptEntry, notAssignableContainerIndexNo1=notAssignableContainerIndexNo1, alarmSeverityExternalPortValue=alarmSeverityExternalPortValue, alarmDispertionTunningCondition=alarmDispertionTunningCondition, entityContainerEntry=entityContainerEntry, linkDeadInterval=linkDeadInterval, scSecondaryStates=scSecondaryStates, trapSinkRowStatus=trapSinkRowStatus, physicalPortCodeGain=physicalPortCodeGain, physicalPortAvlntsRxcrs=physicalPortAvlntsRxcrs, alarmLossofSequenceLowerOrderPath=alarmLossofSequenceLowerOrderPath, physicalPortTraceExpectedDapiOdu=physicalPortTraceExpectedDapiOdu, endOfUpwardEnvTable=endOfUpwardEnvTable, fspR7AuthenticationNotificationSummary=fspR7AuthenticationNotificationSummary, scRowStatus=scRowStatus, changePhysicalPortServiceSigDegPeriodOtu=changePhysicalPortServiceSigDegPeriodOtu, scLanAid=scLanAid, alarmNtpIPv6Type=alarmNtpIPv6Type, externalPortAlias=externalPortAlias, physicalPortGropticsType=physicalPortGropticsType, transientCryptoPasswdChanged=transientCryptoPasswdChanged, alarmLinkDown=alarmLinkDown, downwardFacilityChildId=downwardFacilityChildId, entityProtectionCableIndex4=entityProtectionCableIndex4, containerShelfExtNo=containerShelfExtNo, transientThres1DayExceededSonetSectSEFS=transientThres1DayExceededSonetSectSEFS, snmpSettings=snmpSettings, entityContainerTable=entityContainerTable, virtualPortVcType=virtualPortVcType, linkRowStatus=linkRowStatus, alarmConfigurationFault=alarmConfigurationFault, alarmProfile=alarmProfile, upwardTerminPointParentId=upwardTerminPointParentId, downwardEnvIndex=downwardEnvIndex, alarmNtpIPv6Table=alarmNtpIPv6Table, shelfTable=shelfTable, endOfRatStartPointTable=endOfRatStartPointTable, shelfPsuOutputPower=shelfPsuOutputPower, downwardShelfConnShelfNo=downwardShelfConnShelfNo, virtualPortSigDegPeriodOdu=virtualPortSigDegPeriodOdu, plugTable=plugTable, entityCrossConnType=entityCrossConnType, entityEqptTableId=entityEqptTableId, containerCrsOptLineToIndexNo3=containerCrsOptLineToIndexNo3, entityDcnShelfNo=entityDcnShelfNo, shelfAdmin=shelfAdmin, endOfShelfConnMgmt=endOfShelfConnMgmt, virtualSessionId=virtualSessionId, moduleChannelsNumber=moduleChannelsNumber, alarmLossOfFrameLossOfMultiFrameOdu=alarmLossOfFrameLossOfMultiFrameOdu, ipv6ActRoutesPrefix=ipv6ActRoutesPrefix, fspR7EquipmentInsertedTrap=fspR7EquipmentInsertedTrap, moduleAvlndpF1485Txcrs=moduleAvlndpF1485Txcrs, entityProtectionCableIndex3=entityProtectionCableIndex3, containerFfpAidString=containerFfpAidString, entityEnvTable=entityEnvTable, webInterface=webInterface, unusedTrapSinkId=unusedTrapSinkId, physicalPortDelayMeasurementStatus=physicalPortDelayMeasurementStatus, containerOtlgTable=containerOtlgTable, opticalMuxEntry=opticalMuxEntry, alarmSeverityHdSystemValue=alarmSeverityHdSystemValue, alarmSeverityEqptValue=alarmSeverityEqptValue, containerShelfmapEquipmentState=containerShelfmapEquipmentState, notAssignableContainerClassName=notAssignableContainerClassName, moduleDescription=moduleDescription, upwardContainerParentId=upwardContainerParentId, containerOlTable=containerOlTable, downwardShelfConnClassName=downwardShelfConnClassName, changePhysicalPortServiceSigDegPeriodOdu=changePhysicalPortServiceSigDegPeriodOdu, downwardTerminPointIndex=downwardTerminPointIndex, alarmTxPowerLimited=alarmTxPowerLimited, lldpDataLayerPmReset=lldpDataLayerPmReset, alarmSignalDegradeOtu=alarmSignalDegradeOtu, entityOptLineTable=entityOptLineTable, entityEqptEntry=entityEqptEntry)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", pmSnapshotCurrentOscGain=pmSnapshotCurrentOscGain, opticalMuxOffsetLow=opticalMuxOffsetLow, downwardTerminPointChildId=downwardTerminPointChildId, shelfShelfHeight=shelfShelfHeight, endOfAlarmProfile=endOfAlarmProfile, externalPortMinChromDisperRcv=externalPortMinChromDisperRcv, lanDhcpMask=lanDhcpMask, entityMtosiSlotsEntry=entityMtosiSlotsEntry, alarmSeverityEnvEntry=alarmSeverityEnvEntry, containerVch1SlotNo=containerVch1SlotNo, entitySysTableId=entitySysTableId, alarmNtpIPv4Table=alarmNtpIPv4Table, terminationPointAdmin=terminationPointAdmin, moduleSuppNetworkPlugRates=moduleSuppNetworkPlugRates, virtualPortOptSetDeviation=virtualPortOptSetDeviation, neAutoDhcp=neAutoDhcp, alarmShelfmapId=alarmShelfmapId, alarmNtpIPv6Entry=alarmNtpIPv6Entry, ntpIPv6OperState=ntpIPv6OperState, entityFacilityPortNo=entityFacilityPortNo, entityFacilityClass=entityFacilityClass, oprIntervalPm15minTable=oprIntervalPm15minTable, alarmLossOfMfiOpu=alarmLossOfMfiOpu, physicalPortTraceTransmitDapiOduTcmB=physicalPortTraceTransmitDapiOduTcmB, physicalPortDispersionMode=physicalPortDispersionMode, envPortTifAlarmMessage=envPortTifAlarmMessage, containerOmTable=containerOmTable, physicalPortAdmin=physicalPortAdmin, endOfDependentTable=endOfDependentTable, lanAdmin=lanAdmin, eccConnectionType=eccConnectionType, entityTerminPointOneIndex=entityTerminPointOneIndex, crossConnectionCrsContAidList=crossConnectionCrsContAidList, moduleAvlndpF125Rxcrs=moduleAvlndpF125Rxcrs, downwardFacilityClassName=downwardFacilityClassName, containerVchEntry=containerVchEntry, upwardContainerEntry=upwardContainerEntry, entityMtosiSlotsClass=entityMtosiSlotsClass, advaInventoryExtNo=advaInventoryExtNo, alarmLicenseTimeStamp=alarmLicenseTimeStamp, entityEqptTable=entityEqptTable, alarmAlarmIndicationSignalOduTcmC=alarmAlarmIndicationSignalOduTcmC, opticalMuxTransmitWavelength=opticalMuxTransmitWavelength, unusedCommunityId=unusedCommunityId, virtualPortTraceTransmitDapiOduTcmA=virtualPortTraceTransmitDapiOduTcmA, moduleTrafficDirection=moduleTrafficDirection, physicalPortConnType=physicalPortConnType, scTable=scTable, fileDataArea=fileDataArea, syslogIPv6DbchgReports=syslogIPv6DbchgReports, shelfConnectorType=shelfConnectorType, upwardFacilityTable=upwardFacilityTable, upwardShelfConnIndex=upwardShelfConnIndex, userManagementSso2fa=userManagementSso2fa, containerLinkShelfNo=containerLinkShelfNo, packetFiltering=packetFiltering, moduleTopology=moduleTopology, containerOwlgParentId=containerOwlgParentId, upwardExternalPortShelfNo=upwardExternalPortShelfNo, virtualPortTimActionOdu=virtualPortTimActionOdu, notAssignables=notAssignables, transientTopologyDataInvalid=transientTopologyDataInvalid, linkEccAid=linkEccAid, alarmServerSignalFailureVf=alarmServerSignalFailureVf, containerCrossConnFromPointParentId=containerCrossConnFromPointParentId, containerWchIndexNo1=containerWchIndexNo1, syslogIPv4Entry=syslogIPv4Entry, containerLanTableId=containerLanTableId, alarmHdSystemAffect=alarmHdSystemAffect, modulePower=modulePower, virtualPortChannelId=virtualPortChannelId, containerPlugSlotNo=containerPlugSlotNo, ipv6InActRoutesPrefix=ipv6InActRoutesPrefix, changePhysicalPortServiceTxOffDelay=changePhysicalPortServiceTxOffDelay, notAssignableShelfConnClass=notAssignableShelfConnClass, containerConnectNonStdToIndexNo2=containerConnectNonStdToIndexNo2, alarmNtpIPv4TimeStamp=alarmNtpIPv4TimeStamp, neCommandState=neCommandState, changePhysicalPortServiceTimModeOtu=changePhysicalPortServiceTimModeOtu, upwardOpticalMuxParentId=upwardOpticalMuxParentId, downwardExternalPortChildId=downwardExternalPortChildId, entityProtectionCableType=entityProtectionCableType, physicalPortInputPower=physicalPortInputPower, ipv6InActRoutesExtNo=ipv6InActRoutesExtNo, entityContainerPortNo=entityContainerPortNo, transientForcedWorkingSwitchedBacktoProtection=transientForcedWorkingSwitchedBacktoProtection, licenseManagerLicenseServer=licenseManagerLicenseServer, endOfNotAssignableEqptTable=endOfNotAssignableEqptTable, shelfConnDuplex=shelfConnDuplex, alarmEqptAffect=alarmEqptAffect, entityCrsOptLineFromIndexNo1=entityCrsOptLineFromIndexNo1, changePhysicalPortServiceTraceExpectedOduTcmC=changePhysicalPortServiceTraceExpectedOduTcmC, upwardOptLineClassName=upwardOptLineClassName, shelfmapIpAddr=shelfmapIpAddr, transientCryptoTagFailureLimitChanged=transientCryptoTagFailureLimitChanged, physicalPortTimActionOdu=physicalPortTimActionOdu, transientCryptoRtf=transientCryptoRtf, lsrtempThresholdConfigEntry=lsrtempThresholdConfigEntry, alarmQualityFactorTooLow=alarmQualityFactorTooLow, alarmOtuServerSignalFail=alarmOtuServerSignalFail, alarmThres15MinExceededFecCE=alarmThres15MinExceededFecCE, containerVch1ParentId=containerVch1ParentId, pmSnapshotCurrentTerminPointOutputPower=pmSnapshotCurrentTerminPointOutputPower, physicalPortLLDPNeighborsRx=physicalPortLLDPNeighborsRx, unassignedInventoryTableId=unassignedInventoryTableId, nextUnusedFc=nextUnusedFc, notAssignableExternalPortClass=notAssignableExternalPortClass, crossConnectionCrsType=crossConnectionCrsType, containerConnectNonStdFromIndexNo1=containerConnectNonStdFromIndexNo1, alarmAlarmIndicationSignalHigherOrderPath=alarmAlarmIndicationSignalHigherOrderPath, oprIntervalPm1dayValidFlag=oprIntervalPm1dayValidFlag, lldpAdmin=lldpAdmin, dosProtection=dosProtection, alarmOosDisabledLckOduTrmt=alarmOosDisabledLckOduTrmt, advaSecurity=advaSecurity, privilegeChangeRemoteName=privilegeChangeRemoteName, alarmSeverityDcnTable=alarmSeverityDcnTable, downwardOpticalMuxExtNo=downwardOpticalMuxExtNo, opticalMuxTrmtChannel=opticalMuxTrmtChannel, alarmThres15MinExceededPhysConvCV=alarmThres15MinExceededPhysConvCV, virtualPortTraceExpectedOpspOdu=virtualPortTraceExpectedOpspOdu, userManagementUdpSessionStatus=userManagementUdpSessionStatus, moduleEccPorts=moduleEccPorts, plugType=plugType, entityOpticalMuxShelfNo=entityOpticalMuxShelfNo, linkIpType=linkIpType, physicalPortTestPrbsTrmtMode=physicalPortTestPrbsTrmtMode, alarmHdSystemType=alarmHdSystemType, entityConnectionTableId=entityConnectionTableId, endOfLanTable=endOfLanTable, externalOmEntry=externalOmEntry, neCommandIp=neCommandIp, channelSpacing=channelSpacing, entityCrsOptLineToId=entityCrsOptLineToId, transientThres1DayExceededPhysConvCV=transientThres1DayExceededPhysConvCV, containerVch1ExtNo=containerVch1ExtNo, authTrapStatus=authTrapStatus, eci=eci, entityEqptType=entityEqptType, entityCrossConnFromShelfNo=entityCrossConnFromShelfNo, externalVchPmdTransmit=externalVchPmdTransmit, entityFfpPortNo=entityFfpPortNo, physicalPortOpticalSetPointLane1=physicalPortOpticalSetPointLane1, containerCrsOptLineFromClassName=containerCrsOptLineFromClassName, changeService=changeService, entityContainerShelfNo=entityContainerShelfNo, changePhysicalPortServiceTimModeOdu=changePhysicalPortServiceTimModeOdu, ratBlockingEntry=ratBlockingEntry, containerEnvExtNo=containerEnvExtNo, alarmConfOutPowerTransTooLow=alarmConfOutPowerTransTooLow, containerChEntry=containerChEntry, neCommandSourceIp=neCommandSourceIp, transientThres1DayExceededSonetLineBbe=transientThres1DayExceededSonetLineBbe, entityFilterCableIndex3=entityFilterCableIndex3, syslogIPv6RowStatus=syslogIPv6RowStatus, opticalMuxVariableGainRtoN=opticalMuxVariableGainRtoN, moduleAlias=moduleAlias, downwardTerminPointEntry=downwardTerminPointEntry, containerLanAidString=containerLanAidString, moduleOscUsage=moduleOscUsage, pmSnapshotCurrentTerminPointEntry=pmSnapshotCurrentTerminPointEntry, physicalPortTraceReceived=physicalPortTraceReceived, alarmFacilityTable=alarmFacilityTable, entityTerminPointClass=entityTerminPointClass, entityCrossDcnTable=entityCrossDcnTable, downwardEqptShelfNo=downwardEqptShelfNo, containerConnectNonStdEntry=containerConnectNonStdEntry, physicalPortTraceRcvDapiTcmc=physicalPortTraceRcvDapiTcmc, syslogIPv4DbchgReports=syslogIPv4DbchgReports, alarmTemperatureTooLow=alarmTemperatureTooLow, physicalPortConnector=physicalPortConnector, ratChEgress=ratChEgress, containerEthShelfNo=containerEthShelfNo, alarmFacilityType=alarmFacilityType, notAssignableOpticalMuxAidString=notAssignableOpticalMuxAidString, moduleActivateDetect=moduleActivateDetect, changePhysicalPortServiceEqlzAdmin=changePhysicalPortServiceEqlzAdmin, endOfDownwardEqptTable=endOfDownwardEqptTable, alarmWarmUp=alarmWarmUp, endOfDownwardContainerTable=endOfDownwardContainerTable, virtualPortLagSysMac=virtualPortLagSysMac, endOfAlarmSeverityEqptTable=endOfAlarmSeverityEqptTable, physicalPortOutputPower=physicalPortOutputPower, notAssignableExternalPortAidString=notAssignableExternalPortAidString, transientFwpSwitchRejected=transientFwpSwitchRejected, virtualPortOffsetHigh=virtualPortOffsetHigh, userManagementPasswordMinAge=userManagementPasswordMinAge, ratStartPointChannelGroup=ratStartPointChannelGroup, remoteAuth=remoteAuth, downwardContainerPortNo=downwardContainerPortNo, transientFwpInstallStarted=transientFwpInstallStarted, containerPchClassName=containerPchClassName, alarmSeverityOpticalMuxTable=alarmSeverityOpticalMuxTable, downwardOpticalMuxSlotNo=downwardOpticalMuxSlotNo, crossOpticalLineRedLineState=crossOpticalLineRedLineState, fanSecondaryStates=fanSecondaryStates, changePhysicalPortServiceDispersionSetting=changePhysicalPortServiceDispersionSetting, alarmEnvType=alarmEnvType, containerConnectStdFromIndexNo3=containerConnectStdFromIndexNo3, entityMtosiSlotsExtNo=entityMtosiSlotsExtNo, physicalPortTraceRcvOpspTcma=physicalPortTraceRcvOpspTcma, shelfmapParentId=shelfmapParentId, downwardFacilitySlotNo=downwardFacilitySlotNo, transientThres1DayExceededOduTcmASES=transientThres1DayExceededOduTcmASES, plugBidirectionalChannel=plugBidirectionalChannel, containerVchShelfNo=containerVchShelfNo, containerWchClassName=containerWchClassName, nextUnusedPc=nextUnusedPc, notAssignableOptLineEntry=notAssignableOptLineEntry, moduleInternalPlugRates=moduleInternalPlugRates, optIntervalPm15minNumber=optIntervalPm15minNumber, transientThres1DayExceededFecCE=transientThres1DayExceededFecCE, pmSnapshotHistoricalEntry=pmSnapshotHistoricalEntry, licenseClass=licenseClass, containerChClass=containerChClass, ffpTable=ffpTable, entityShelfConnType=entityShelfConnType, moduleNdpCleanup=moduleNdpCleanup, alarmPartner2Deleted=alarmPartner2Deleted, pmSnapshotHistoricalParameter=pmSnapshotHistoricalParameter, containerWchClass=containerWchClass, alarmEnvSeverity=alarmEnvSeverity, containerExternalVchTableId=containerExternalVchTableId, changePhysicalPortServiceTraceExpectedOdu=changePhysicalPortServiceTraceExpectedOdu, aidMappingId=aidMappingId, containerShelfTableId=containerShelfTableId, lldpLLDPChassisType=lldpLLDPChassisType, changePhysicalPortServiceTraceTransmitOpspOduTcmA=changePhysicalPortServiceTraceTransmitOpspOduTcmA, containerOmClass=containerOmClass, moduleInternalPorts=moduleInternalPorts, alarmEqualizationProgress=alarmEqualizationProgress, alarmSysEntry=alarmSysEntry, alarmThres15MinExceededOduTcmBUAS=alarmThres15MinExceededOduTcmBUAS, shelfScuRing=shelfScuRing, entityProtectionCableIndex1=entityProtectionCableIndex1, alarmOscOpticalPowerControlFailLow=alarmOscOpticalPowerControlFailLow, opticalMuxSwitchCommand=opticalMuxSwitchCommand, licenseLicenseCountUsed=licenseLicenseCountUsed, virtualPortTimeslot=virtualPortTimeslot, syslogIPv4SourceIp=syslogIPv4SourceIp, downwardEqptTable=downwardEqptTable, ratSuperChannelFq=ratSuperChannelFq, alarmCurrentTooHigh=alarmCurrentTooHigh, shelfConnAutonegotiation=shelfConnAutonegotiation, containerScSlotNo=containerScSlotNo, physicalPortRedLineState=physicalPortRedLineState, containerVSContainer=containerVSContainer, entityTerminPointAidString=entityTerminPointAidString, physicalPortTraceRcvSapiOdu=physicalPortTraceRcvSapiOdu, changePhysicalPortServiceTraceExpectedOduTcmB=changePhysicalPortServiceTraceExpectedOduTcmB, downwardEnvShelfNo=downwardEnvShelfNo, licenseManagerClassName=licenseManagerClassName, transientFwpSwitchCompleted=transientFwpSwitchCompleted, containerExternalOmAidString=containerExternalOmAidString)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", opticalLineConnState=opticalLineConnState, alarmSeverityEnvTable=alarmSeverityEnvTable, lanRowStatus=lanRowStatus, transientThres1DayExceededPhysConvCVDE=transientThres1DayExceededPhysConvCVDE, alarmAutoShutdownSendingAisLine=alarmAutoShutdownSendingAisLine, entityExternalPortPortNo=entityExternalPortPortNo, physicalPortLaneChannel4=physicalPortLaneChannel4, transientCryBootStarted=transientCryBootStarted, entityFilterCableType=entityFilterCableType, endOfTranslation=endOfTranslation, alarmHdSystemTable=alarmHdSystemTable, containerOwlgClass=containerOwlgClass, alarmThres15MinExceededFecBERCE=alarmThres15MinExceededFecBERCE, ntpIPv4IpAddr=ntpIPv4IpAddr, pmSnapshotCurrentTerminPointFiberConnAtten=pmSnapshotCurrentTerminPointFiberConnAtten, optIntervalPm15minHigh=optIntervalPm15minHigh, alarmSeverityNtpIPv4Table=alarmSeverityNtpIPv4Table, virtualPortMacAddress=virtualPortMacAddress, alarmDifferentialGroupDelayTooHigh=alarmDifferentialGroupDelayTooHigh, containerEnvTableId=containerEnvTableId, transientMpLocked=transientMpLocked, alarmFaultOnOpm=alarmFaultOnOpm, opticalMuxFiberType=opticalMuxFiberType, containerEnvAidString=containerEnvAidString, entityCrsOptLineFromIndexNo3=entityCrsOptLineFromIndexNo3, physicalPortSigDegPeriodOduTcmA=physicalPortSigDegPeriodOduTcmA, transientCryptoAuthPasswdInvalid=transientCryptoAuthPasswdInvalid, endOfPmSnampshot=endOfPmSnampshot, endOfAlarmSeveritySysTable=endOfAlarmSeveritySysTable, alarmServerSignalFailurePath=alarmServerSignalFailurePath, communityIPv6=communityIPv6, entityShelfConnTable=entityShelfConnTable, changePhysicalPortServiceTable=changePhysicalPortServiceTable, containerCrossDcnParentId=containerCrossDcnParentId, virtualPortFarEndProtectionState=virtualPortFarEndProtectionState, containerLinkClass=containerLinkClass, shelfConnAdmin=shelfConnAdmin, terminationPointFiberConnAtten=terminationPointFiberConnAtten, plugConnector=plugConnector, externalVchMaxPmdRcv=externalVchMaxPmdRcv, transientBootUpRejected=transientBootUpRejected, trapSinkId=trapSinkId, alarmThres15MinExceededFecSES=alarmThres15MinExceededFecSES, virtualPortTestPrbsTrmtMode=virtualPortTestPrbsTrmtMode, notAssignableOptLineIndexNo4=notAssignableOptLineIndexNo4, ipv6InActRoutesClassName=ipv6InActRoutesClassName, physicalPortProtectionRole=physicalPortProtectionRole, containerWchTable=containerWchTable, entityProtectionCableAidString=entityProtectionCableAidString, containerConnectNonStdNotation=containerConnectNonStdNotation, containerVomClass=containerVomClass, changePhysicalPortServiceType=changePhysicalPortServiceType, physicalPortTxOffOnTm=physicalPortTxOffOnTm, neCommand=neCommand, opticalMuxType=opticalMuxType, alarmHdSystemId=alarmHdSystemId, shelfmapAidString=shelfmapAidString, alarmRoundTripDelayTooLow=alarmRoundTripDelayTooLow, plugPlugMode=plugPlugMode, alarmLicenseType=alarmLicenseType, fileDataId=fileDataId, licenseParentId=licenseParentId, notAssignableExternalPortIndexNo3=notAssignableExternalPortIndexNo3, containerOtlgSlotNo=containerOtlgSlotNo, physicalPortTimModeOduTcmC=physicalPortTimModeOduTcmC, communityTable=communityTable, virtualPortLagStandby=virtualPortLagStandby, notAssignableFacilityIndexNo2=notAssignableFacilityIndexNo2, endOfShelfTable=endOfShelfTable, alarmThres15MinExceededOduTcmCBbe=alarmThres15MinExceededOduTcmCBbe, alarmAlarmIndicationSignalOtu=alarmAlarmIndicationSignalOtu, transientAlpSettingFinished=transientAlpSettingFinished, alarmRemoteDefectIndicationHigherOrderPath=alarmRemoteDefectIndicationHigherOrderPath, alarmHdSystemSeverity=alarmHdSystemSeverity, alarmLicenseManagerType=alarmLicenseManagerType, entitySysTable=entitySysTable, entityEqptExtNo=entityEqptExtNo, aidMappingTable=aidMappingTable, scPhysIfBaseType=scPhysIfBaseType, alarmChannelMismatch=alarmChannelMismatch, transientTagCounterReset=transientTagCounterReset, alarmAmpFailure=alarmAmpFailure, endOfProtectionCableTable=endOfProtectionCableTable, alarmTraceIdentifierMismatchOdu=alarmTraceIdentifierMismatchOdu, ratBlockingType=ratBlockingType, entityOpticalMuxClassName=entityOpticalMuxClassName, neCommandLogin=neCommandLogin, containerFanClass=containerFanClass, crossOpticalLineIngressTid=crossOpticalLineIngressTid, shelfAirFilterCycle=shelfAirFilterCycle, alarmProfileSeverityValue=alarmProfileSeverityValue, virtualPortCbsTrmt=virtualPortCbsTrmt, alarmInputVoltageLow=alarmInputVoltageLow, knownHostIPv6FingerPrint=knownHostIPv6FingerPrint, opticalMuxEdfaPwrOut=opticalMuxEdfaPwrOut, endOfUpwardOpticalMuxTable=endOfUpwardOpticalMuxTable, notAssignableShelfConnParentId=notAssignableShelfConnParentId, changePhysicalPortServiceTxOnTimer=changePhysicalPortServiceTxOnTimer, alarmEncryptionPortKeyInitExchgMissed=alarmEncryptionPortKeyInitExchgMissed, communityIPv4=communityIPv4, scDhcpServer=scDhcpServer, alarmExcessLLDPNeighborsRx=alarmExcessLLDPNeighborsRx, externalVchTable=externalVchTable, oprIntervalPm15minEntry=oprIntervalPm15minEntry, alarmNtpIPv4Entry=alarmNtpIPv4Entry, trapSinkIpSubnet=trapSinkIpSubnet, alarmEncryptionModuleCryPasswdError=alarmEncryptionModuleCryPasswdError, entityCrossDcnClassName=entityCrossDcnClassName, moduleRamUsage=moduleRamUsage, physicalPortTerminationLevel=physicalPortTerminationLevel, opticalLineChannelBandwith=opticalLineChannelBandwith, ntpIPv4RowStatus=ntpIPv4RowStatus, downwardOpticalMuxPortNo=downwardOpticalMuxPortNo, dependentIndexNo1=dependentIndexNo1, downwardExternalPortPortNo=downwardExternalPortPortNo, moduleAvlndpF2970Txcrs=moduleAvlndpF2970Txcrs, containerEccClass=containerEccClass, entityEqptOneIndex=entityEqptOneIndex, containerModTable=containerModTable, alarmLicenseManagerAffect=alarmLicenseManagerAffect, alarmFiberConnDataFailure=alarmFiberConnDataFailure, entityOpticalMuxOneIndex=entityOpticalMuxOneIndex, containerPchSlotNo=containerPchSlotNo, lanSecondaryStates=lanSecondaryStates, ipv6InActRoutesMetric=ipv6InActRoutesMetric, containerConnectStdFromIndexNo2=containerConnectStdFromIndexNo2, containerScClass=containerScClass, optIntervalPm1dayEntry=optIntervalPm1dayEntry, alarmSeveritySysType=alarmSeveritySysType, entityCrossDcnOneIndex=entityCrossDcnOneIndex, notAssignableEqptTable=notAssignableEqptTable, containerChPortNo=containerChPortNo, alarmSwitchFailed=alarmSwitchFailed, containerFanTable=containerFanTable, containerShelfConnSlotNo=containerShelfConnSlotNo, opticalMuxFarEndSigDegThres=opticalMuxFarEndSigDegThres, alarmLaserOnDelay=alarmLaserOnDelay, opticalLineFacilities=opticalLineFacilities, moduleTopologyType=moduleTopologyType, optIntervalPm15minLow=optIntervalPm15minLow, containerOwlgIndexNo3=containerOwlgIndexNo3, opticalLineAlias=opticalLineAlias, trapSinkDuration=trapSinkDuration, entityProtectionCableIndex2=entityProtectionCableIndex2, physicalPortLoopConfig=physicalPortLoopConfig, endOfNotAssignableOptLineTable=endOfNotAssignableOptLineTable, alarmOpticalMuxTable=alarmOpticalMuxTable, entityContainerClassName=entityContainerClassName, syslogIPv4Ip=syslogIPv4Ip, alarmAcpPartnerDeleted=alarmAcpPartnerDeleted, containerCrossConnFromId=containerCrossConnFromId, virtualPortTraceTransmitDapiOduTcmC=virtualPortTraceTransmitDapiOduTcmC, alarmBackreflectionTooHigh=alarmBackreflectionTooHigh, transientEqlzNotRequired=transientEqlzNotRequired, transientEqlzProcessPassed=transientEqlzProcessPassed, entityExternalPortClass=entityExternalPortClass, alarmFacilityEntry=alarmFacilityEntry, endOfHdShelvesMgmt=endOfHdShelvesMgmt, alarmAutoShutdownSendingAisOpu=alarmAutoShutdownSendingAisOpu, entityContainerParentId=entityContainerParentId, containerCrossConnFromPointAidString=containerCrossConnFromPointAidString, linkAlias=linkAlias, entityConnectionClassName=entityConnectionClassName, physicalPortPathProtection=physicalPortPathProtection, alarmOduAutoShutdownRxAIS=alarmOduAutoShutdownRxAIS, autoRestartMax=autoRestartMax, lanIpType=lanIpType, endOfExternalPortReferByTabke=endOfExternalPortReferByTabke, scIpType=scIpType, endOfAlarmSeverityContainerTable=endOfAlarmSeverityContainerTable, containerShelfmapTable=containerShelfmapTable, transientDelayMeasurementFailed=transientDelayMeasurementFailed, alarmFiberConnInvalidTx=alarmFiberConnInvalidTx, shelfChannelRangeProvision=shelfChannelRangeProvision, remoteAuthProtocol=remoteAuthProtocol, shelfConnTransmitChannel=shelfConnTransmitChannel, physicalPortTimDetModeOtu=physicalPortTimDetModeOtu, entityFilterCableTableId=entityFilterCableTableId, opticalLineOwnerAid=opticalLineOwnerAid, channelTracesIndexNo2=channelTracesIndexNo2, alarmRamanPumpPwrTooHigh=alarmRamanPumpPwrTooHigh, alarmLossOfBlockLock=alarmLossOfBlockLock, containerConnectStdToId=containerConnectStdToId, containerShelfmapParentId=containerShelfmapParentId, containerEccTable=containerEccTable, downwardDcnEntry=downwardDcnEntry, entityFacilityTable=entityFacilityTable, shelfmapClass=shelfmapClass, alarmExternalPortType=alarmExternalPortType, alarmEqlzAdjust=alarmEqlzAdjust, externalOmRowStatus=externalOmRowStatus, endOfAlarmProfileSeverityTable=endOfAlarmProfileSeverityTable, ospfConf=ospfConf, moduleAvlMapCapDown=moduleAvlMapCapDown, unassignedInventoryEntry=unassignedInventoryEntry, alarmSignalDegradeLine=alarmSignalDegradeLine, containerVchSlotNo=containerVchSlotNo, scAreaAid=scAreaAid, entities=entities, containerEnvPortNo=containerEnvPortNo, virtualSessionTimeout=virtualSessionTimeout, advaInventoryCleiCode=advaInventoryCleiCode, changePhysicalPortServiceTraceTransmitDapiOduTcmA=changePhysicalPortServiceTraceTransmitDapiOduTcmA, alarmSeverityNtpIPv6Table=alarmSeverityNtpIPv6Table, eccConnState=eccConnState, containerExternalVchClass=containerExternalVchClass, ratAnalyzerEntry=ratAnalyzerEntry, opticalLineFiberLength=opticalLineFiberLength, externalPortPmdTransmit=externalPortPmdTransmit, alarmThres15MinExceededPhysConvES=alarmThres15MinExceededPhysConvES, containerExternalVchShelfNo=containerExternalVchShelfNo, entitySysEntry=entitySysEntry, alarmMultiplexStructureIdentifierMismatchOPU=alarmMultiplexStructureIdentifierMismatchOPU, transientHardwareResetInputTIF=transientHardwareResetInputTIF, alarmAcpLinkLoss=alarmAcpLinkLoss, containerVchExtNo=containerVchExtNo, scFarEndSigDegThres=scFarEndSigDegThres, alarmEnvEntry=alarmEnvEntry, alarmCryDataInvalid=alarmCryDataInvalid, notAssignableEnvClass=notAssignableEnvClass, updateFwpOnInstall=updateFwpOnInstall, containerFfpExtNo=containerFfpExtNo, ffpProtectionMech=ffpProtectionMech, upwardEqptExtNo=upwardEqptExtNo, alarmOscPwrTooHigh=alarmOscPwrTooHigh, endOfAlarmContainerTable=endOfAlarmContainerTable, changePhysicalPortServiceTxOffOnTm=changePhysicalPortServiceTxOffOnTm, alarmSeverityNtpIPv4Entry=alarmSeverityNtpIPv4Entry, envMgmt=envMgmt, moduleInventoryDescription=moduleInventoryDescription, advaInventoryEntry=advaInventoryEntry, envPortConnectorType=envPortConnectorType, ratAnalyzerToAid=ratAnalyzerToAid, alarmSeverityShelfConnType=alarmSeverityShelfConnType, alarmDcnTable=alarmDcnTable, linkEntry=linkEntry, entityCrossDcnPortNo=entityCrossDcnPortNo, dateAndTime=dateAndTime, physicalPortErrorForwarding=physicalPortErrorForwarding, virtualPortSigDegThresOduTcmC=virtualPortSigDegThresOduTcmC, alarmSeverityShelfmapValue=alarmSeverityShelfmapValue, alarmAutoShutdownSendingIdle=alarmAutoShutdownSendingIdle, linkNendLogicalIpAddr=linkNendLogicalIpAddr, alarmXfpDecisionThresSetFailed=alarmXfpDecisionThresSetFailed, alarmLocalFault=alarmLocalFault, containerEthTableId=containerEthTableId, entityCrossDcnShelfNo=entityCrossDcnShelfNo, physicalPortSigDegThresOdu=physicalPortSigDegThresOdu, virtualPortLoopConfig=virtualPortLoopConfig, virtualPortInhibitSwitchToWork=virtualPortInhibitSwitchToWork, virtualPortCir=virtualPortCir, opticalMuxMultiplexLevel=opticalMuxMultiplexLevel, endOfNotAssignableShelfConnTable=endOfNotAssignableShelfConnTable, containerChExtNo=containerChExtNo)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", changePhysicalPortServiceDisparityCorrection=changePhysicalPortServiceDisparityCorrection, downwardDcnChildId=downwardDcnChildId, alarmSeverityHdSystemTable=alarmSeverityHdSystemTable, fspR7CreationTrap=fspR7CreationTrap, advaInventoryClass=advaInventoryClass, communityIPv6PrefixLen=communityIPv6PrefixLen, alarmDcnCommunicationFail=alarmDcnCommunicationFail, transientMpParameterSetFail=transientMpParameterSetFail, physicalPortDuplexMode=physicalPortDuplexMode, virtualPortSigDegPeriodOduTcmC=virtualPortSigDegPeriodOduTcmC, notAssignableOpticalMuxIndexNo1=notAssignableOpticalMuxIndexNo1, containerVschTable=containerVschTable, hdSystemOperState=hdSystemOperState, entityCrsOptLineClass=entityCrsOptLineClass, containerConnectNonStdFromIndexNo3=containerConnectNonStdFromIndexNo3, containerShelfClass=containerShelfClass, licenseLicenseCountGranted=licenseLicenseCountGranted, entityTerminPointAssignState=entityTerminPointAssignState, alarmBrPwrRxTooHigh=alarmBrPwrRxTooHigh, transientEqlzRequestDenied=transientEqlzRequestDenied, alarmAutoServiceMismatch=alarmAutoServiceMismatch, ffpWorkingAid=ffpWorkingAid, transientEqlzFailed=transientEqlzFailed, endOfEci=endOfEci, sslCertIp=sslCertIp, opticalMuxTransmitFrequency=opticalMuxTransmitFrequency, scSigDegThresReceiver=scSigDegThresReceiver, alarmThres15MinExceededCrcErrorsRcv=alarmThres15MinExceededCrcErrorsRcv, plugEntry=plugEntry, scIPv6PrefixLen=scIPv6PrefixLen, alarmSignalDegradationonLinkVector=alarmSignalDegradationonLinkVector, entityFilterCableParentId=entityFilterCableParentId, transientThres1DayExceededSonetLineUAS=transientThres1DayExceededSonetLineUAS, alarmSeverityShelfmapId=alarmSeverityShelfmapId, changePhysicalPortServiceVoaSetpoint=changePhysicalPortServiceVoaSetpoint, upwardOpticalMuxPortNo=upwardOpticalMuxPortNo, moduleStages=moduleStages, containerLinkParentId=containerLinkParentId, entityContainerType=entityContainerType, filterCableType=filterCableType, oprThresholdConfigHighConfig=oprThresholdConfigHighConfig, hdSystemSerialNumbers=hdSystemSerialNumbers, containerShelfSlotNo=containerShelfSlotNo, virtualPortTraceExpectedOduTcmC=virtualPortTraceExpectedOduTcmC, alarmTerminPointTimeStamp=alarmTerminPointTimeStamp, scFarEndTid=scFarEndTid, entityFilterCableClass=entityFilterCableClass, moduleChannelSpacingProvision=moduleChannelSpacingProvision, upwardFacilityIndex=upwardFacilityIndex, scAuthString=scAuthString, virtualSessionIpAddress=virtualSessionIpAddress, channelTracesEntry=channelTracesEntry, opticalMuxGain=opticalMuxGain, alarmSeveritySysEntry=alarmSeveritySysEntry, alarmLockedDefectOdu=alarmLockedDefectOdu, writeAccessRequestTimeout=writeAccessRequestTimeout, containerPlugTableId=containerPlugTableId, entityTerminPointType=entityTerminPointType, plugConnectorType=plugConnectorType, opticalMuxRcvChannel=opticalMuxRcvChannel, ratSuperChannel=ratSuperChannel, alarmShelfConnTable=alarmShelfConnTable, physicalPortDisparityCorrection=physicalPortDisparityCorrection, alarmLogicalLanesSkewTooHigh=alarmLogicalLanesSkewTooHigh, dcnMgmt=dcnMgmt, transientDelayMeasurementCompleted=transientDelayMeasurementCompleted, containerTerminPointTable=containerTerminPointTable, alarmVoltageOutOfRange=alarmVoltageOutOfRange, hdSystemTable=hdSystemTable, alarmBackwardDefectIndicationOduTcmA=alarmBackwardDefectIndicationOduTcmA, moduleSuppClientPlugRates=moduleSuppClientPlugRates, moduleAvlndpAdapt2970Rxcrs=moduleAvlndpAdapt2970Rxcrs, containerWchParentId=containerWchParentId, physicalPortLagKey=physicalPortLagKey, externalPortType=externalPortType, entityCrossConnAidString=entityCrossConnAidString, changePhysicalPortServiceSigDegThresOduTcmC=changePhysicalPortServiceSigDegThresOduTcmC, alarmPartner3Deleted=alarmPartner3Deleted, hdSystemParentId=hdSystemParentId, physicalPortTraceExpectedOtu=physicalPortTraceExpectedOtu, ffpSignalFailureSwitching=ffpSignalFailureSwitching, upwardEqptClassName=upwardEqptClassName, privilegeChangeRequestedPrivilege=privilegeChangeRequestedPrivilege, physicalPortReceiverFrequency=physicalPortReceiverFrequency, knownHostIPv6KeyEncryptAlgorithm=knownHostIPv6KeyEncryptAlgorithm, changePhysicalPortServiceChannelSpacing=changePhysicalPortServiceChannelSpacing, entityExternalPortOneIndex=entityExternalPortOneIndex, alarmFarEndCommFailure=alarmFarEndCommFailure, containerVch1ClassName=containerVch1ClassName, entityEnvExtNo=entityEnvExtNo, containerFfpSlotNo=containerFfpSlotNo, changePhysicalPortServiceFecType=changePhysicalPortServiceFecType, transientCrySwitchCompleted=transientCrySwitchCompleted, userManagementLastLoginSuccessInfo=userManagementLastLoginSuccessInfo, crossConnectionRedLineState=crossConnectionRedLineState, containerEthEntry=containerEthEntry, notAssignableEqptParentId=notAssignableEqptParentId, linkRetransmitInterval=linkRetransmitInterval, containerTable=containerTable, moduleType=moduleType, containerEthExtNo=containerEthExtNo, entityConnectionTable=entityConnectionTable, physicalPortChannelSpacingProvision=physicalPortChannelSpacingProvision, entityMtosiSlotsAidString=entityMtosiSlotsAidString, timeoutConf=timeoutConf, crossConnectionType=crossConnectionType, virtualPortUtag=virtualPortUtag, entityCrossDcnClass=entityCrossDcnClass, containerOmTableId=containerOmTableId, entityDcnTable=entityDcnTable, virtualPortTraceRcvDapiTcmc=virtualPortTraceRcvDapiTcmc, changePhysicalPortServiceEntry=changePhysicalPortServiceEntry, tlsSupport=tlsSupport, licenseManagerLicenseFilesInstall=licenseManagerLicenseFilesInstall, upwardShelfConnExtNo=upwardShelfConnExtNo, upwardEqptTable=upwardEqptTable, notAssignableEnvAidString=notAssignableEnvAidString, alarmSeverityContainerTable=alarmSeverityContainerTable, shelfEntry=shelfEntry, virtualPortOpuPayloadType=virtualPortOpuPayloadType, containerChAidString=containerChAidString, notAssignableEqptIndexNo3=notAssignableEqptIndexNo3, containerFanTableId=containerFanTableId, dependentAid=dependentAid, containerChTable=containerChTable, authTrapUnsuccessfulAuthCount=authTrapUnsuccessfulAuthCount, entityFfpEntry=entityFfpEntry, endOfNotAssignables=endOfNotAssignables, containerPlugClass=containerPlugClass, alarmSeverityExternalPortEntry=alarmSeverityExternalPortEntry, alarmEncryptionPortKeyExchangedForced=alarmEncryptionPortKeyExchangedForced, ntpIPv6TestStatus=ntpIPv6TestStatus, endOfEqptMgmt=endOfEqptMgmt, ntpIPv6Entry=ntpIPv6Entry, entityConnectionParentId=entityConnectionParentId, virtualPortTraceRcvSapiTcma=virtualPortTraceRcvSapiTcma, scDhcpStartAddr=scDhcpStartAddr, alarmAutoShutdownAmpAps=alarmAutoShutdownAmpAps, ipv6InActRoutesDestination=ipv6InActRoutesDestination, ntpIPv6IpAddr=ntpIPv6IpAddr, optIntervalPm1dayTable=optIntervalPm1dayTable, alarmAlarmIndicationSignalOduTcmA=alarmAlarmIndicationSignalOduTcmA, shelfmapTypeInv=shelfmapTypeInv, advaInventoryCapabilityLevel=advaInventoryCapabilityLevel, shelfRack=shelfRack, pmSnapshotCurrentRxLineAtten=pmSnapshotCurrentRxLineAtten, trapSinkPort=trapSinkPort, alarmSeverityEnvType=alarmSeverityEnvType, entityShelfConnExtNo=entityShelfConnExtNo, virtualPortTcmCLevel=virtualPortTcmCLevel, licenseManagerEntry=licenseManagerEntry, terminationPointEntry=terminationPointEntry, alarmSignalToNoiseRatioTooLow=alarmSignalToNoiseRatioTooLow, optIntervalPm1weekEntry=optIntervalPm1weekEntry, scEntry=scEntry, alarmSeverityFacilityEntry=alarmSeverityFacilityEntry, containerVethExtNo=containerVethExtNo, physicalPortTransmitWavelength=physicalPortTransmitWavelength, alarmAlarmIndicationSignalOpu=alarmAlarmIndicationSignalOpu, physicalPortReportAisLine=physicalPortReportAisLine, changePhysicalPortServiceSigDegThresSdhSection=changePhysicalPortServiceSigDegThresSdhSection, syslogIPv4IpAddr=syslogIPv4IpAddr, eccMaxDataRate=eccMaxDataRate, physicalPortFrequency=physicalPortFrequency, entityMtosiSlotsPortNo=entityMtosiSlotsPortNo, moduleFiberType=moduleFiberType, alarmThres15MinExceededOduTcmASES=alarmThres15MinExceededOduTcmASES, externalPortMaxPmdRcv=externalPortMaxPmdRcv, alarmOptOutputPowerTransTooLow=alarmOptOutputPowerTransTooLow, alarmTerminPointTable=alarmTerminPointTable, alarmLossOfSignalTransmitter=alarmLossOfSignalTransmitter, containerCrossDcnPortNo=containerCrossDcnPortNo, physicalPortPhysIfBaseType=physicalPortPhysIfBaseType, downwardShelfConnEntry=downwardShelfConnEntry, alarmServerSignalFailTx=alarmServerSignalFailTx, ntpIPv4TestStatus=ntpIPv4TestStatus, alarmInputVoltageFailurePort2=alarmInputVoltageFailurePort2, entityFacilityClassName=entityFacilityClassName, upwardContainerTable=upwardContainerTable, fileDataType=fileDataType, entityExternalPortExtNo=entityExternalPortExtNo, virtualPortSecondaryStates=virtualPortSecondaryStates, virtualPortTunnelAid=virtualPortTunnelAid, upwardFacilityExtNo=upwardFacilityExtNo, notAssignableFacilityIndexNo1=notAssignableFacilityIndexNo1, transientNtpSrvTestSuccessed=transientNtpSrvTestSuccessed, downwardOptLineSlotNo=downwardOptLineSlotNo, moduleInitEqlz=moduleInitEqlz, alarmAutoShutdownLaserOffDueToErrFwd=alarmAutoShutdownLaserOffDueToErrFwd, crossConnectionTable=crossConnectionTable, lanDhcpServer=lanDhcpServer, containerHdSystemEntry=containerHdSystemEntry, containerConnectStdAidString=containerConnectStdAidString, alarmThres15MinExceededSonetLineUAS=alarmThres15MinExceededSonetLineUAS, optThresholdConfigHighConfig=optThresholdConfigHighConfig, opticalMuxRowStatus=opticalMuxRowStatus, linkFarEndIp=linkFarEndIp, opticalMuxInitiateEqualization=opticalMuxInitiateEqualization, crossConnectionSecondaryStates=crossConnectionSecondaryStates, userManagementSnmpTimeoutValue=userManagementSnmpTimeoutValue, endOfDownwardTerminPointTable=endOfDownwardTerminPointTable, alarmOduAutoShutdownTxAIS=alarmOduAutoShutdownTxAIS, facilityMgmt=facilityMgmt, containerPlugPortNo=containerPlugPortNo, opticalMuxOptUpdate=opticalMuxOptUpdate, containerExternalVchParentId=containerExternalVchParentId, fspR7CommunityDeletion=fspR7CommunityDeletion, externalVchChannelBandwith=externalVchChannelBandwith, virtualPortCbsRcv=virtualPortCbsRcv, transientFwpHashFail=transientFwpHashFail, alarmDispersionCompensationTooHigh=alarmDispersionCompensationTooHigh, activeUsersSessionGroupName=activeUsersSessionGroupName, lanOperState=lanOperState, alarmLossOfFrameMux=alarmLossOfFrameMux, opticalMuxVariableGainCtoN=opticalMuxVariableGainCtoN, externalPortConnectionState=externalPortConnectionState, physicalPortCdCompensationRange=physicalPortCdCompensationRange, containerFanClassName=containerFanClassName, virtualPortOduTribPortNo=virtualPortOduTribPortNo, fanEntry=fanEntry, containerPchAidString=containerPchAidString, netConf=netConf, entityEnvPortNo=entityEnvPortNo, entityContainerSlotNo=entityContainerSlotNo, linkAuthString=linkAuthString, lockSafety=lockSafety, entityDcnOneIndex=entityDcnOneIndex, moduleAvlMapCapUp=moduleAvlMapCapUp, alarmEncryptionModuleSelfTestFail=alarmEncryptionModuleSelfTestFail, entityMtosiSlotsChildId=entityMtosiSlotsChildId, containerTerminPointIndexNo3=containerTerminPointIndexNo3, alarmPeerLink=alarmPeerLink, alarmSeverityEnvValue=alarmSeverityEnvValue, transientThres1DayExceededOduTcmBES=transientThres1DayExceededOduTcmBES, sshHostKeyLength=sshHostKeyLength, containerVch1Entry=containerVch1Entry, plugSecondaryStates=plugSecondaryStates, ntpIPv6Admin=ntpIPv6Admin, alarmServerSignalFailLine=alarmServerSignalFailLine, containerCrsOptLineFromIndexNo3=containerCrsOptLineFromIndexNo3, containerVethSlotNo=containerVethSlotNo, containerVch1Table=containerVch1Table, physicalPortTcmALevel=physicalPortTcmALevel, scIPv6LinkLocal=scIPv6LinkLocal, upwardShelfConnClassName=upwardShelfConnClassName, changePhysicalPortServiceOpuPayloadType=changePhysicalPortServiceOpuPayloadType, upwardTerminPointIndex=upwardTerminPointIndex, moduleManagementPorts=moduleManagementPorts, oprIntervalPm1weekLow=oprIntervalPm1weekLow, alarmSeverityLicenseManagerEntry=alarmSeverityLicenseManagerEntry, containerEccParentId=containerEccParentId, opticalMuxConnectionType=opticalMuxConnectionType, containerShelfmapSerialNumInv=containerShelfmapSerialNumInv, fspR7AuthenticationNotification=fspR7AuthenticationNotification)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", externalPortChannelBandwith=externalPortChannelBandwith, containerExternalOmSlotNo=containerExternalOmSlotNo, channelTracesChannelNumber=channelTracesChannelNumber, advaInventoryTable=advaInventoryTable, entityEnvAidString=entityEnvAidString, userManagementPasswordExpirationPeriod=userManagementPasswordExpirationPeriod, notAssignableShelfConnIndexNo2=notAssignableShelfConnIndexNo2, containerLinkPortNo=containerLinkPortNo, lanMtu=lanMtu, entityOptLineIndexNo1=entityOptLineIndexNo1, alarmLockedDefectOduTcmA=alarmLockedDefectOduTcmA, lanAuthType=lanAuthType, entityCrsOptLineToIndexNo4=entityCrsOptLineToIndexNo4, endOfScTable=endOfScTable, changePhysicalPortServiceSignalDegradePeriod=changePhysicalPortServiceSignalDegradePeriod, containerRowStatus=containerRowStatus, endOfFacilityMgmt=endOfFacilityMgmt, crossDcnRowStatus=crossDcnRowStatus, entitySysPortNo=entitySysPortNo, physicalPortTraceTransmitSapiOdu=physicalPortTraceTransmitSapiOdu, virtualPortValidSigTimer=virtualPortValidSigTimer, alarmSysTable=alarmSysTable, ntpIPv4Entry=ntpIPv4Entry, containerEccPortNo=containerEccPortNo, terminationPointChannel=terminationPointChannel, scIpMaskMonitor=scIpMaskMonitor, virtualPortConnState=virtualPortConnState, transientThres15DayExceededBbePcs=transientThres15DayExceededBbePcs, physicalPortTimDetModeOdu=physicalPortTimDetModeOdu, alarmFacilityLoopback=alarmFacilityLoopback, shelfUpgradePorts=shelfUpgradePorts, alarmLinkFailToPartner2=alarmLinkFailToPartner2, changePhysicalPortServiceTraceTransmitSonetSection=changePhysicalPortServiceTraceTransmitSonetSection, upwardDcnEntry=upwardDcnEntry, alarmSeverityShelfmapType=alarmSeverityShelfmapType, crossConnectionPathProtection=crossConnectionPathProtection, plugLaneGroup=plugLaneGroup, moduleMapping=moduleMapping, optThresholdConfigHighFixed=optThresholdConfigHighFixed, fspR7ObjectChangeTrap=fspR7ObjectChangeTrap, upwardFacilityClassName=upwardFacilityClassName, containerOwlgTableId=containerOwlgTableId, moduleDispersionCompensation=moduleDispersionCompensation, containerChSlotNo=containerChSlotNo, userManagementSecurityLevel=userManagementSecurityLevel, containerShelfConnExtNo=containerShelfConnExtNo, ipv6ActRoutesShelfNo=ipv6ActRoutesShelfNo, upwardFacilityParentId=upwardFacilityParentId, upwardExternalPortPortNo=upwardExternalPortPortNo, moduleSuppNetworkPlugTypes=moduleSuppNetworkPlugTypes, ratStartPointClass=ratStartPointClass, alarmSeverityHdSystemEntry=alarmSeverityHdSystemEntry, changePhysicalPortServiceTraceExpectedSonetSection=changePhysicalPortServiceTraceExpectedSonetSection, alarmServerSignalFailureGfp=alarmServerSignalFailureGfp, alarmShelfmapTimeStamp=alarmShelfmapTimeStamp, transientEqlzStart=transientEqlzStart, authTrapSrcIp=authTrapSrcIp, alarmSignalDegradeOduTcmA=alarmSignalDegradeOduTcmA, externalPortOsnrTransmit=externalPortOsnrTransmit, transientThres1DayExceededPhysConvES=transientThres1DayExceededPhysConvES, alarmHwOptReachedHT=alarmHwOptReachedHT, physicalPortLossAttenuation=physicalPortLossAttenuation, entitySysClassName=entitySysClassName, haSoftwareVersion=haSoftwareVersion, entityCrossConnTableId=entityCrossConnTableId, shelfConnSecondaryStates=shelfConnSecondaryStates, plugPlugType=plugPlugType, alarmSeverityOpticalMuxEntry=alarmSeverityOpticalMuxEntry, physicalPortInhibitSwitchToWork=physicalPortInhibitSwitchToWork, crossOpticalLineConn=crossOpticalLineConn, lldpSystemOperationList=lldpSystemOperationList, ipSettings=ipSettings, upwardOpticalMuxExtNo=upwardOpticalMuxExtNo, containerFfpTable=containerFfpTable, physicalPortRate=physicalPortRate, physicalPortLLDPNeighborsTx=physicalPortLLDPNeighborsTx, linkBaud=linkBaud, alarmOutputVoltageFailure=alarmOutputVoltageFailure, alarmTopologyDataCalculationInProgress=alarmTopologyDataCalculationInProgress, shelfmapEquipmentState=shelfmapEquipmentState, downwardOptLineTable=downwardOptLineTable, alarmSeverityShelfConnTable=alarmSeverityShelfConnTable, alarmOptOutputPowerTransTooHigh=alarmOptOutputPowerTransTooHigh, virtualPortRate=virtualPortRate, oprIntervalPm1dayTimeStamp=oprIntervalPm1dayTimeStamp, alarmShelfConnType=alarmShelfConnType, opticalLineRxLineAttenuation=opticalLineRxLineAttenuation, alarmBackupForcedToHalt=alarmBackupForcedToHalt, containerCrossConnFromSlotNo=containerCrossConnFromSlotNo, alarmMultipleFanFailure=alarmMultipleFanFailure, containerVomParentId=containerVomParentId, physicalPortValidSigTimer=physicalPortValidSigTimer, channelTracesChannelRx=channelTracesChannelRx, moduleCategory=moduleCategory, containerConnectStdTableId=containerConnectStdTableId, entityExternalPortTableId=entityExternalPortTableId, changePhysicalPortServiceSigDegThresSonetSection=changePhysicalPortServiceSigDegThresSonetSection, upwardDcnIndex=upwardDcnIndex, virtualSessionChangeReason=virtualSessionChangeReason, protectionCableRowStatus=protectionCableRowStatus, containerLinkClassName=containerLinkClassName, endOfEnvPortTable=endOfEnvPortTable, userManagementPasswordExpirationDate=userManagementPasswordExpirationDate, shelfFiberBrand=shelfFiberBrand, userManagementUsername=userManagementUsername, alarmTagReceiveFailMaxReached=alarmTagReceiveFailMaxReached, entityTerminPointTable=entityTerminPointTable, upwardShelfConnTable=upwardShelfConnTable, containerFanExtNo=containerFanExtNo, physicalPortLaserTemp=physicalPortLaserTemp, ratAnalyzerState=ratAnalyzerState, shelfRowStatus=shelfRowStatus, containerPlugEntry=containerPlugEntry, moduleAvlndpGbeRxcrs=moduleAvlndpGbeRxcrs, virtualPortInhibitSwitchToProt=virtualPortInhibitSwitchToProt, alarmLossOfSignalDcPort=alarmLossOfSignalDcPort, changePhysicalPortServiceAutoPTassignment=changePhysicalPortServiceAutoPTassignment, virtualSessionWriteAccess=virtualSessionWriteAccess, containerEnvEntry=containerEnvEntry, containerShelfConnShelfNo=containerShelfConnShelfNo, linkHelloInterval=linkHelloInterval, ntpIPv6Test=ntpIPv6Test, endOfAlarm=endOfAlarm, lanRetransmitInterval=lanRetransmitInterval, alarmOscPwrTooLow=alarmOscPwrTooLow, ntpIPv6SourceIp=ntpIPv6SourceIp, alarmBackwardDefectIndicationOdu=alarmBackwardDefectIndicationOdu, privilegeChangeUserName=privilegeChangeUserName, connectionTable=connectionTable, alarmOscOpticalPowerControlFailHigh=alarmOscOpticalPowerControlFailHigh, alarmLicenseAffect=alarmLicenseAffect, alarmPrbsRcvActivated=alarmPrbsRcvActivated, alarmServerSignalFailRx=alarmServerSignalFailRx, downwardDcnClassName=downwardDcnClassName, physicalPortLaneChannelSetting=physicalPortLaneChannelSetting, moduleScrambling=moduleScrambling, lldpTable=lldpTable, alarmNtpForSchedEqlzRequired=alarmNtpForSchedEqlzRequired, scGatewayProxyArp=scGatewayProxyArp, transientThres1DayExceededSonetSectBbe=transientThres1DayExceededSonetSectBbe, entityFfpOneIndex=entityFfpOneIndex, containerCrossConnEntry=containerCrossConnEntry, containerExternalVchTable=containerExternalVchTable, alarmLossofMultiframeHigherOrderPath=alarmLossofMultiframeHigherOrderPath, changePhysicalPortServiceTraceTransmitSapiOduTcmC=changePhysicalPortServiceTraceTransmitSapiOduTcmC, endOfAlarmSysTable=endOfAlarmSysTable, entityCrossDcnParentId=entityCrossDcnParentId, physicalPortBidirectionalChannel=physicalPortBidirectionalChannel, endOfOpticalLineTable=endOfOpticalLineTable, alarmFiberConnMismatchTx=alarmFiberConnMismatchTx, changePhysicalPortServiceErrorForwarding=changePhysicalPortServiceErrorForwarding, physicalPortInhibitSwitchToProt=physicalPortInhibitSwitchToProt, containerOmPortNo=containerOmPortNo, opticalMuxTiltSet=opticalMuxTiltSet, alarmContainerTimeStamp=alarmContainerTimeStamp, containerExternalVchAidString=containerExternalVchAidString, changePhysicalPortServiceTraceExpectedOduTcmA=changePhysicalPortServiceTraceExpectedOduTcmA, physicalPortTunnelAid=physicalPortTunnelAid, alarmSeverityLicenseManagerType=alarmSeverityLicenseManagerType, downwardEqptIndex=downwardEqptIndex, pmSnapshotHistoricalTimeStamp=pmSnapshotHistoricalTimeStamp, downwardOptLineClassName=downwardOptLineClassName, notAssignableFacilityParentId=notAssignableFacilityParentId, externalOmType=externalOmType, alarm=alarm, virtualPortTraceRcvOpspTcma=virtualPortTraceRcvOpspTcma, physicalPortEqlzAdmin=physicalPortEqlzAdmin, containerVch1ShelfNo=containerVch1ShelfNo, crossConnectionCrsFromAidTwo=crossConnectionCrsFromAidTwo, shelfClientPorts=shelfClientPorts, moduleDeploy=moduleDeploy, optIntervalPm15minMean=optIntervalPm15minMean, channelTracesIndexNo1=channelTracesIndexNo1, physicalPortTraceRcvOpspTcmb=physicalPortTraceRcvOpspTcmb, physicalPortMode=physicalPortMode, endOfUpwardEqptTable=endOfUpwardEqptTable, opticalMuxForceLaserOn=opticalMuxForceLaserOn, virtualPortTraceRcvSapiTcmb=virtualPortTraceRcvSapiTcmb, alarmSignalFailureonLinkVector=alarmSignalFailureonLinkVector, lanOspf=lanOspf, downwardContainerClassName=downwardContainerClassName, lanTable=lanTable, upwardEqptIndex=upwardEqptIndex, alarmLossOfCharSync=alarmLossOfCharSync, lsrtempThresholdConfigHighFixed=lsrtempThresholdConfigHighFixed, downwardOptLinePortNo=downwardOptLinePortNo, alarmAseLow=alarmAseLow, opticalLineLaneChannel1=opticalLineLaneChannel1, opticalMuxAttenuationGradient=opticalMuxAttenuationGradient, accessWarning=accessWarning, downwardContainerIndex=downwardContainerIndex, licenseExtNo=licenseExtNo, alarmThres15MinExceededSonetLineES=alarmThres15MinExceededSonetLineES, containerScEntry=containerScEntry, alarmSwitchtoWorkingInhibited=alarmSwitchtoWorkingInhibited, alarmLicenseServerNotConfigured=alarmLicenseServerNotConfigured, ipv6ActRoutesRowStatus=ipv6ActRoutesRowStatus, notAssignableEnvClassName=notAssignableEnvClassName, virtualPortSigDegThresOduTcmB=virtualPortSigDegThresOduTcmB, shelfTransmitChannel=shelfTransmitChannel, physicalPortAlias=physicalPortAlias, shelfmapEqptIdentifier=shelfmapEqptIdentifier, advaInventoryAidString=advaInventoryAidString, entityProtectionCableParentId=entityProtectionCableParentId, containerCrsOptLineFromId=containerCrsOptLineFromId, virtualPortTerminationLevel=virtualPortTerminationLevel, alarmAmplifierAbnormal=alarmAmplifierAbnormal, notAssignableExternalPortIndexNo1=notAssignableExternalPortIndexNo1, entityFfpTableId=entityFfpTableId, alarmLicenseMissingMismatch=alarmLicenseMissingMismatch, alarmRoundTripDelayTooHigh=alarmRoundTripDelayTooHigh, opticalMuxStages=opticalMuxStages, alarmLossofSequenceHigherOrderPath=alarmLossofSequenceHigherOrderPath, externalPortReferByTable=externalPortReferByTable, pmSnapshotCurrentEntry=pmSnapshotCurrentEntry, transientThres1DayExceededCrcFramesEgress=transientThres1DayExceededCrcFramesEgress, channelTracesRouteType=channelTracesRouteType, crossDcnEntry=crossDcnEntry, physicalPortTraceRcvSapiTcmc=physicalPortTraceRcvSapiTcmc, containerOlAidString=containerOlAidString, entityFilterCableAidString=entityFilterCableAidString, plugTransmitChannel=plugTransmitChannel, hdSystemDcnAid=hdSystemDcnAid, entityCrossDcnSlotNo=entityCrossDcnSlotNo, restConf=restConf, alarmCapabilityLevelMismatch=alarmCapabilityLevelMismatch, containerFfpClass=containerFfpClass, ipv6ActRoutesClassName=ipv6ActRoutesClassName, entityProtectionCableTableId=entityProtectionCableTableId, alarmVfClientSignalFail=alarmVfClientSignalFail, userManagementPrivacyKey=userManagementPrivacyKey, ipv6ActRoutesDestination=ipv6ActRoutesDestination, unassignedInventoryOneIndex=unassignedInventoryOneIndex, opticalMuxAdmin=opticalMuxAdmin, alarmOpenConnectionIndicationOdu=alarmOpenConnectionIndicationOdu, transientCrySwitchStarted=transientCrySwitchStarted, alarmOpenConnectionIndicationOduTcmC=alarmOpenConnectionIndicationOduTcmC, endOfNotAssignableFacilityTable=endOfNotAssignableFacilityTable, lldpAgeOutPeriod=lldpAgeOutPeriod, linkParityBit=linkParityBit, transientCommunicationFail=transientCommunicationFail, physicalPortInitiateEqualization=physicalPortInitiateEqualization, upwardTerminPointIndexNo2=upwardTerminPointIndexNo2, alarmTerminPointType=alarmTerminPointType, ncuPortC2=ncuPortC2, virtualPortTraceTransmitDapiOduTcmB=virtualPortTraceTransmitDapiOduTcmB, physicalPortTributaryAssignedSlotNo=physicalPortTributaryAssignedSlotNo, licenseManagerExtNo=licenseManagerExtNo, containerEnvSlotNo=containerEnvSlotNo, featureSpecific=featureSpecific, containerOlIndexNo4=containerOlIndexNo4, alarmThres15MinExceededSonetLineCV=alarmThres15MinExceededSonetLineCV, ipv6DefGateway=ipv6DefGateway, scMtu=scMtu)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", licenseManagerSlotNo=licenseManagerSlotNo, downwardEqptPortNo=downwardEqptPortNo, entityEnvTableId=entityEnvTableId, alarmAutomaticPowerReduction=alarmAutomaticPowerReduction, alarmSysAffect=alarmSysAffect, alarmRemoteDefectIndicationLine=alarmRemoteDefectIndicationLine, containerOmClassName=containerOmClassName, containerCrossConnFromPointEntry=containerCrossConnFromPointEntry, containerExternalOmExtNo=containerExternalOmExtNo, containerCrossConnFromPointTableId=containerCrossConnFromPointTableId, shelfMaxPowerConsumption=shelfMaxPowerConsumption, alarmExternalPortEntry=alarmExternalPortEntry, syslogIPv6IpAddr=syslogIPv6IpAddr, controlPlane=controlPlane, opticalLineTransmitChannel=opticalLineTransmitChannel, lldpTimeTillAgeOut=lldpTimeTillAgeOut, containerConnectNonStdTableId=containerConnectNonStdTableId, entityCrossDcnTableId=entityCrossDcnTableId, alarmAmpDisabled=alarmAmpDisabled, sslCertApply=sslCertApply, privilegeChangeAction=privilegeChangeAction, externalPortSecondaryStates=externalPortSecondaryStates, virtualPortBundle=virtualPortBundle, containerConnectStdFromClassName=containerConnectStdFromClassName, alarmLossOfSignalCPort=alarmLossOfSignalCPort, containerWchEntry=containerWchEntry, linkOperState=linkOperState, lldpSystemCapabilityList=lldpSystemCapabilityList, scDataLayerPmReset=scDataLayerPmReset, alarmSeverityOpticalMuxType=alarmSeverityOpticalMuxType, transientBootUpFailed=transientBootUpFailed, alarmSeverityFacilityTable=alarmSeverityFacilityTable, entityCrossDcnType=entityCrossDcnType, linkConnector=linkConnector, alarmSubModuleTempTooHigh=alarmSubModuleTempTooHigh, alarmIncompatibleVersion=alarmIncompatibleVersion, changePhysicalPortServiceChannelPlan=changePhysicalPortServiceChannelPlan, whitelistIpMask=whitelistIpMask, alarmInputVoltageFailurePort1=alarmInputVoltageFailurePort1, entityOptLineIndexNo4=entityOptLineIndexNo4, physicalPortLaserDelayTimer=physicalPortLaserDelayTimer, alarmHdSystemEntry=alarmHdSystemEntry, alarmServerSignalFailureSectionRS=alarmServerSignalFailureSectionRS, externalPortBitrate=externalPortBitrate, sslValidityPeriod=sslValidityPeriod, pmSnapshotCurrentTxLineAtten=pmSnapshotCurrentTxLineAtten, alarmLicenseManagerSeverity=alarmLicenseManagerSeverity, containerOlTableId=containerOlTableId, authTrapUserName=authTrapUserName, externalVchType=externalVchType, containerEthClass=containerEthClass, alarmHwDegrade=alarmHwDegrade, terminationPointOutputPower=terminationPointOutputPower, opticalMuxSecondaryStates=opticalMuxSecondaryStates, alarmOpticalMuxType=alarmOpticalMuxType, haInhSwitching=haInhSwitching, containerPlugExtNo=containerPlugExtNo, containerPchPortNo=containerPchPortNo, containerExternalOmTableId=containerExternalOmTableId, containerChParentId=containerChParentId, alarmThres15MinExceededOduTcmAUAS=alarmThres15MinExceededOduTcmAUAS, optIntervalPm1weekHigh=optIntervalPm1weekHigh, downwardTerminPointClassName=downwardTerminPointClassName, upwardShelfConnParentId=upwardShelfConnParentId, containerTerminPointIndexNo2=containerTerminPointIndexNo2, opticalMuxNearEndProtectionState=opticalMuxNearEndProtectionState, scMonitoredBitrate=scMonitoredBitrate, alarmNtpIPv6Affect=alarmNtpIPv6Affect, alarmTerminPointEntry=alarmTerminPointEntry, alarmLossOfOverhead=alarmLossOfOverhead, changePhysicalPortServiceTraceTransmitDapiOduTcmB=changePhysicalPortServiceTraceTransmitDapiOduTcmB, containerHdSystemClass=containerHdSystemClass, entityCrsOptLineTableId=entityCrsOptLineTableId, physicalPortForceLaserOn=physicalPortForceLaserOn, physicalPortLagIdFend=physicalPortLagIdFend, shelfChannelSpacing=shelfChannelSpacing, ipv6ActRoutesType=ipv6ActRoutesType, modulePartner1=modulePartner1, physicalPortTributaryFreeSlotNo=physicalPortTributaryFreeSlotNo, virtualPortOperState=virtualPortOperState, alarmBatteryNoCharge=alarmBatteryNoCharge, physicalPortPvid=physicalPortPvid, containerExternalVchSlotNo=containerExternalVchSlotNo, containerVschAidString=containerVschAidString, opticalMuxFarEndProtectionState=opticalMuxFarEndProtectionState, pmSnapshotHistoricalValue=pmSnapshotHistoricalValue, externalPortEntry=externalPortEntry, externalVchAlias=externalVchAlias, ratStartPointIndexNo2=ratStartPointIndexNo2, opticalMuxPpc=opticalMuxPpc, alarmAutoShutdownSendingEPC=alarmAutoShutdownSendingEPC, alarmLossOfLane=alarmLossOfLane, advaInventoryInventoryDescription=advaInventoryInventoryDescription, virtualPortPortMode=virtualPortPortMode, shelfConnBitrate=shelfConnBitrate, physicalPortOptimize=physicalPortOptimize, ratStartPointAidString=ratStartPointAidString, moduleTransmitChannel=moduleTransmitChannel, moduleReach=moduleReach, alarmRemoved=alarmRemoved, endOfCrossOpticalLineTable=endOfCrossOpticalLineTable, alarmEncryptionModuleCryPasswdMissing=alarmEncryptionModuleCryPasswdMissing, transientCryptoSessKeyLifetimeChanged=transientCryptoSessKeyLifetimeChanged, transientFwpInstallFailed=transientFwpInstallFailed, alarmExternalPortTimeStamp=alarmExternalPortTimeStamp, alarmSwitchToDuplexInhibited=alarmSwitchToDuplexInhibited, downwardExternalPortClassName=downwardExternalPortClassName, entityEqptSlotNo=entityEqptSlotNo, downwardEnvTable=downwardEnvTable, crossConnectionConn=crossConnectionConn, optThresholdConfigTable=optThresholdConfigTable, optIntervalPm1weekTimeStamp=optIntervalPm1weekTimeStamp, plugAdmin=plugAdmin, shelfConnTable=shelfConnTable, containerShelfShelfNo=containerShelfShelfNo, opticalMuxAseTabCreation=opticalMuxAseTabCreation, alarmPumpLaser1TempTooHigh=alarmPumpLaser1TempTooHigh, alarmApsProtocolFailure=alarmApsProtocolFailure, containerMgmt=containerMgmt, containerEnvClassName=containerEnvClassName, oprIntervalPm1weekEntry=oprIntervalPm1weekEntry, physicalPortRowStatus=physicalPortRowStatus, opticalMuxSumTransmited=opticalMuxSumTransmited, alarmShelfmapSeverity=alarmShelfmapSeverity, alarmThres15MinExceededSonetLineBbe=alarmThres15MinExceededSonetLineBbe, optIntervalPm1dayTimeStamp=optIntervalPm1dayTimeStamp, alarmAseTableGenProgress=alarmAseTableGenProgress, optIntervalPm1dayMean=optIntervalPm1dayMean, changePhysicalPortServiceLaserOffTimer=changePhysicalPortServiceLaserOffTimer, transientIntrusionRx=transientIntrusionRx, upwardEqptSlotNo=upwardEqptSlotNo, upwardOpticalMuxClassName=upwardOpticalMuxClassName, alarmSeverityLicenseType=alarmSeverityLicenseType, containerFanSlotNo=containerFanSlotNo, alarmDcnSeverity=alarmDcnSeverity, alarmExternalPortSeverity=alarmExternalPortSeverity, containerShelfConnClass=containerShelfConnClass, scType=scType, alarmNtpIPv6TimeStamp=alarmNtpIPv6TimeStamp, entityCrossConnTable=entityCrossConnTable, entityCrossConnClass=entityCrossConnClass, notAssignableDcnClassName=notAssignableDcnClassName, upwardOptLineIndex=upwardOptLineIndex, moduleHeight=moduleHeight, entityConnectionClass=entityConnectionClass, eccValidSigTimer=eccValidSigTimer, endOfAlarmSeverityDcnTable=endOfAlarmSeverityDcnTable, downwardExternalPortEntry=downwardExternalPortEntry, externalVchEntry=externalVchEntry, communityAccess=communityAccess, entityCrossConnToClassName=entityCrossConnToClassName, alarmShelfConnTimeStamp=alarmShelfConnTimeStamp, physicalPortVoaSetpoint=physicalPortVoaSetpoint, serviceDiagnostics=serviceDiagnostics, alarmHwConfigFault=alarmHwConfigFault, containerCrsOptLineFromPointClass=containerCrsOptLineFromPointClass, channelTracesClassName=channelTracesClassName, moduleEntry=moduleEntry, alarmSignalFailureOPU=alarmSignalFailureOPU, moduleMuxMethod=moduleMuxMethod, entityTerminPointEntry=entityTerminPointEntry, containerFacilityType=containerFacilityType, opticalMuxChannelsNumber=opticalMuxChannelsNumber, alarmEncryptionPortMaxKeyExchgFailuresReachedOos=alarmEncryptionPortMaxKeyExchgFailuresReachedOos, ratAnalyzerFromAid=ratAnalyzerFromAid, scAlias=scAlias, entityCrossConnClassName=entityCrossConnClassName, containerCrossDcnClassName=containerCrossDcnClassName, alarmBackwardDefectIndicationOduTcmC=alarmBackwardDefectIndicationOduTcmC, privilegeChangeState=privilegeChangeState, crossDcnEcc=crossDcnEcc, plugRowStatus=plugRowStatus, fspR7Trap=fspR7Trap, changePhysicalPortServiceXfpDecisionThres=changePhysicalPortServiceXfpDecisionThres, advaInventoryUniversalSerialIdent=advaInventoryUniversalSerialIdent, downwardOptLineShelfNo=downwardOptLineShelfNo, containerConnectNonStdToId=containerConnectNonStdToId, changePhysicalPortServiceTraceTransmitOpspOduTcmC=changePhysicalPortServiceTraceTransmitOpspOduTcmC, physicalPortTraceTransmitOpspOduTcmB=physicalPortTraceTransmitOpspOduTcmB, transientManualWorkingSwitchedBacktoWorking=transientManualWorkingSwitchedBacktoWorking, oprIntervalPm1weekNumber=oprIntervalPm1weekNumber, downwardOpticalMuxIndex=downwardOpticalMuxIndex, containerExternalPortClass=containerExternalPortClass, alarmEnvTable=alarmEnvTable, alarmPumpLaser2TempTooLow=alarmPumpLaser2TempTooLow, containerFfpShelfNo=containerFfpShelfNo, restrictToSysIP=restrictToSysIP, moduleSubBandProvision=moduleSubBandProvision, virtualPortLagSysPrio=virtualPortLagSysPrio, transientMpReleased=transientMpReleased, transientEqlzReport=transientEqlzReport, alarmLocalOscTemperatureTooHigh=alarmLocalOscTemperatureTooHigh, ratAnalyzerRouteType=ratAnalyzerRouteType, containerCrossDcnExtNo=containerCrossDcnExtNo, entityConnectionAidString=entityConnectionAidString, containerTerminPointIndexNo4=containerTerminPointIndexNo4, moduleNetworkPorts=moduleNetworkPorts, transientCryptoTagFailurePeriodChanged=transientCryptoTagFailurePeriodChanged, alarmHwInitializing=alarmHwInitializing, ipv6InActRoutesEntry=ipv6InActRoutesEntry, entityEqptClassName=entityEqptClassName, moduleAvlndpGbeTxcrs=moduleAvlndpGbeTxcrs, moduleFiberDetect=moduleFiberDetect, upwardDcnTable=upwardDcnTable, alarmTraceIdentifierMismatchOduTcmB=alarmTraceIdentifierMismatchOduTcmB, plugOperState=plugOperState, transientAlpSettingStarted=transientAlpSettingStarted, protectionCableTable=protectionCableTable, oprIntervalPm15minTimeStamp=oprIntervalPm15minTimeStamp, alarmShelfConnSeverity=alarmShelfConnSeverity, alarmLaserEndOfLife=alarmLaserEndOfLife, externalVchMaxOptPowerRcv=externalVchMaxOptPowerRcv, containerVethShelfNo=containerVethShelfNo, notAssignableEqptIndexNo4=notAssignableEqptIndexNo4, endOfOpticalMuxReferByTable=endOfOpticalMuxReferByTable, downwardFacilityPortNo=downwardFacilityPortNo, downwardEqptExtNo=downwardEqptExtNo, entityShelfConnSlotNo=entityShelfConnSlotNo, transientWorkingSwitchedBacktoWorking=transientWorkingSwitchedBacktoWorking, entityCrossConnEntry=entityCrossConnEntry, alarmLaserTemperatureTooHigh=alarmLaserTemperatureTooHigh, shelfAirFilterChange=shelfAirFilterChange, physicalPortSecondaryStates=physicalPortSecondaryStates, entityOptLineType=entityOptLineType, entityFacilitySlotNo=entityFacilitySlotNo, physicalPortTraceRcvDapiOdu=physicalPortTraceRcvDapiOdu, alarmBackupNotResponding=alarmBackupNotResponding, shelfConnConnector=shelfConnConnector, linkFendIPv6=linkFendIPv6, scMdix=scMdix, containerShelfParentId=containerShelfParentId, virtualPortChannelSpacing=virtualPortChannelSpacing, alarmSeverityDcnValue=alarmSeverityDcnValue, licenseAdmin=licenseAdmin, upwardOptLineEntry=upwardOptLineEntry, terminationPointLambda=terminationPointLambda, alarmAttOnReceiverFiberHigherThanMonitor=alarmAttOnReceiverFiberHigherThanMonitor, entityEqptShelfNo=entityEqptShelfNo, endOfNotAssignableEnvTable=endOfNotAssignableEnvTable, transientMpCreated=transientMpCreated, upwardTerminPointIndexNo4=upwardTerminPointIndexNo4, physicalPortIngressNodeIp=physicalPortIngressNodeIp, icmpRedirect=icmpRedirect, containerLanPortNo=containerLanPortNo, downwardShelfConnIndex=downwardShelfConnIndex, physicalPortPortRole=physicalPortPortRole, whitelistTable=whitelistTable, containerPchEntry=containerPchEntry, virtualPortMaxFrameSize=virtualPortMaxFrameSize, externalPortReferByTerminPoint=externalPortReferByTerminPoint, optThresholdConfigLowConfig=optThresholdConfigLowConfig, containerCrossConnFromPortNo=containerCrossConnFromPortNo, scDuplex=scDuplex, containerModClassName=containerModClassName)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", physicalPortTimActionOtu=physicalPortTimActionOtu, alarmThresOptPowerCtrlFailureLow=alarmThresOptPowerCtrlFailureLow, haEntry=haEntry, virtualPortTraceRcvDapiOdu=virtualPortTraceRcvDapiOdu, shelfSecondaryStates=shelfSecondaryStates, fiberMap=fiberMap, crossOpticalLineSecondaryStates=crossOpticalLineSecondaryStates, lldpManagementReference=lldpManagementReference, containerFanPortNo=containerFanPortNo, containerModEntry=containerModEntry, lanDeadInterval=lanDeadInterval, alarmOTDRMeasuringinProgress=alarmOTDRMeasuringinProgress, virtualPortSigDegPeriodOduTcmA=virtualPortSigDegPeriodOduTcmA, lldpRowStatus=lldpRowStatus, shelfInternalPlugs=shelfInternalPlugs, containerCrossConnFromShelfNo=containerCrossConnFromShelfNo, alarmLoopbackError=alarmLoopbackError, containerCrossDcnTable=containerCrossDcnTable, authTrapProtocol=authTrapProtocol, entityOptLineOneIndex=entityOptLineOneIndex, alarmThres15MinExceededOduES=alarmThres15MinExceededOduES, shelfInternalPorts=shelfInternalPorts, moduleSfProvision=moduleSfProvision, pmSnapshotCurrentOscPwrReceived=pmSnapshotCurrentOscPwrReceived, terminationPointInputPower=terminationPointInputPower, linkAdmin=linkAdmin, endOfFeatureSpecific=endOfFeatureSpecific, alarmLicenseManagerEntry=alarmLicenseManagerEntry, alarmLicenseInvalid=alarmLicenseInvalid, moduleOperState=moduleOperState, identifyTraps=identifyTraps, containers=containers, physicalPortDataLayerPmReset=physicalPortDataLayerPmReset, lldpEntry=lldpEntry, alarmLatencyTooHigh=alarmLatencyTooHigh, alarmAseTableNotAvailable=alarmAseTableNotAvailable, trap=trap, containerExternalOmClassName=containerExternalOmClassName, alarmSeverityEqptTable=alarmSeverityEqptTable, externalPortChromDisperTx=externalPortChromDisperTx, trapModeLegacy=trapModeLegacy, containerCrossConnFromPointClassName=containerCrossConnFromPointClassName, scFarEndPort=scFarEndPort, containerConnectNonStdFromIndexNo4=containerConnectNonStdFromIndexNo4, moduleSerialPorts=moduleSerialPorts, containerVethEntry=containerVethEntry, licenseManagerLicenseServerStatus=licenseManagerLicenseServerStatus, virtualPortTraceTransmitOpspOdu=virtualPortTraceTransmitOpspOdu, containerOlIndexNo2=containerOlIndexNo2, alarmDcnEntry=alarmDcnEntry, ratStartPointEntry=ratStartPointEntry, physicalPortTraceTransmitSapiOduTcmC=physicalPortTraceTransmitSapiOduTcmC, alarmAlarmIndicationSignalOduTcmB=alarmAlarmIndicationSignalOduTcmB, containerVomShelfNo=containerVomShelfNo, entityCrsOptLineAidString=entityCrsOptLineAidString, containerVchPortNo=containerVchPortNo, endOfOpticalLineMgmt=endOfOpticalLineMgmt, uidEraseTime=uidEraseTime, alarmSeverityHdSystemType=alarmSeverityHdSystemType, relationship=relationship, entityFacilityTableId=entityFacilityTableId, entityFacilityEntry=entityFacilityEntry, moduleAvlndpAdapt2970Txcrs=moduleAvlndpAdapt2970Txcrs, alarmOpticalMuxSeverity=alarmOpticalMuxSeverity, changePhysicalPortServiceTraceTransmitSapiOdu=changePhysicalPortServiceTraceTransmitSapiOdu, notAssignableOpticalMuxIndexNo4=notAssignableOpticalMuxIndexNo4, containerExternalVchEntry=containerExternalVchEntry, moduleAvlSwCap=moduleAvlSwCap, neCommandFile=neCommandFile, facilityReferByTable=facilityReferByTable, containerShelfmapAidString=containerShelfmapAidString, containerCrsOptLineFromPointIndexNo1=containerCrsOptLineFromPointIndexNo1, virtualPortOdtuType=virtualPortOdtuType, virtualPortCirTrmt=virtualPortCirTrmt, pmSnapshotCurrentAttenuation=pmSnapshotCurrentAttenuation, opticalMuxTransmitChannel=opticalMuxTransmitChannel, activeUsersInterfaces=activeUsersInterfaces, alarmLicenseMissing=alarmLicenseMissing, crossConnectionEntry=crossConnectionEntry, alarmTerminPointSeverity=alarmTerminPointSeverity, shelfmapRowStatus=shelfmapRowStatus, endOfNeMgmt=endOfNeMgmt, notAssignableShelfConnIndexNo3=notAssignableShelfConnIndexNo3, containerCrossConnClass=containerCrossConnClass, syslogIPv6SecurityReports=syslogIPv6SecurityReports, connectionCreationMethod=connectionCreationMethod, downwardDcnPortNo=downwardDcnPortNo, endOfDownwardExternalPortTable=endOfDownwardExternalPortTable, containerLanClassName=containerLanClassName, alarmPrbsTrmtActivated=alarmPrbsTrmtActivated, optIntervalPm15minValidFlag=optIntervalPm15minValidFlag, notAssignableShelfConnIndexNo1=notAssignableShelfConnIndexNo1, virtualPortAlias=virtualPortAlias, showLastLoginFail=showLastLoginFail, changePhysicalPortServiceLaserOffDelayFunction=changePhysicalPortServiceLaserOffDelayFunction, alarmEncryptionModuleSelfTestFailCritical=alarmEncryptionModuleSelfTestFailCritical, envPortTable=envPortTable, alarmLossOfPointerHigherOrderPath=alarmLossOfPointerHigherOrderPath, netConfTmout=netConfTmout, upwardTerminPointClassName=upwardTerminPointClassName, alarmLaserTemperatureTooLow=alarmLaserTemperatureTooLow, physicalPortTraceRcvDapiOtu=physicalPortTraceRcvDapiOtu, virtualPortFunction=virtualPortFunction, containerConnectStdToClassName=containerConnectStdToClassName, physicalPortFarEndCommunication=physicalPortFarEndCommunication, shelfConnFacilityType=shelfConnFacilityType, alarmAutoShutdownSendingAisOdu=alarmAutoShutdownSendingAisOdu, notAssignableShelfConnIndexNo4=notAssignableShelfConnIndexNo4, connectionEntry=connectionEntry, opticalLineRowStatus=opticalLineRowStatus, physicalPortEntry=physicalPortEntry, physicalPortWdmRxChannel=physicalPortWdmRxChannel, alarmEncryptionPortAuthPasswdMissing=alarmEncryptionPortAuthPasswdMissing, alarmFiberAttenuationHighTx=alarmFiberAttenuationHighTx, transientBootUpStarted=transientBootUpStarted, physicalPortBand=physicalPortBand, transientThres1DayExceededFecES=transientThres1DayExceededFecES, userManagementExpirationDate=userManagementExpirationDate, moduleAvlndpF2970Rxcrs=moduleAvlndpF2970Rxcrs, virtualPortSigDegThresOduTcmA=virtualPortSigDegThresOduTcmA, externalPortFecType=externalPortFecType, upwardExternalPortIndex=upwardExternalPortIndex, entityOpticalMuxPortNo=entityOpticalMuxPortNo, containerShelfmapId=containerShelfmapId, physicalPortLaneChannel3=physicalPortLaneChannel3, physicalPortTraceFormSonetSection=physicalPortTraceFormSonetSection, entityExternalPortSlotNo=entityExternalPortSlotNo, opticalLineLaneChannel2=opticalLineLaneChannel2, optIntervalPm1weekValidFlag=optIntervalPm1weekValidFlag, externalPortReferByEntry=externalPortReferByEntry, endOfFiberMap=endOfFiberMap, externalPortOpticalPowerTx=externalPortOpticalPowerTx, containerContainer=containerContainer, downwardFacilityIndex=downwardFacilityIndex, channelTracesTable=channelTracesTable, upwardFacilityEntry=upwardFacilityEntry, oprIntervalPm15minMean=oprIntervalPm15minMean, containerEnvTable=containerEnvTable, containerEccClassName=containerEccClassName, containerExternalOmPortNo=containerExternalOmPortNo, downwardOpticalMuxTable=downwardOpticalMuxTable, alarmEquipmentMismatchAllow=alarmEquipmentMismatchAllow, unassignedInventoryType=unassignedInventoryType, endOfProtection=endOfProtection, licenseClassName=licenseClassName, containerConnectNonStdParentId=containerConnectNonStdParentId, virtualPortInitEqlz=virtualPortInitEqlz, oprIntervalPm1weekMean=oprIntervalPm1weekMean, entityMtosiSlotsSlotNo=entityMtosiSlotsSlotNo, pmSnapshotCurrentBckreflecPwrRx=pmSnapshotCurrentBckreflecPwrRx, alarmVoaControlFail=alarmVoaControlFail, licenseLicenseType=licenseLicenseType, alarmOutputCurrentDrawHigh=alarmOutputCurrentDrawHigh, alarmFacilitySeverity=alarmFacilitySeverity, virtualPortPriority=virtualPortPriority, containerConnectStdEntry=containerConnectStdEntry, notAssignableDcnEntry=notAssignableDcnEntry, virtualPortMonLevel=virtualPortMonLevel, entityCrossConnFromClassName=entityCrossConnFromClassName, physicalPortSigDegThreshold=physicalPortSigDegThreshold, optIntervalPm15minTable=optIntervalPm15minTable, physicalPortTraceRcvSapiOtu=physicalPortTraceRcvSapiOtu, entitySysClass=entitySysClass, terminationPointTermType=terminationPointTermType, containerConnectNonStdToIndexNo4=containerConnectNonStdToIndexNo4, shelfSupply=shelfSupply, virtualPortFrequency=virtualPortFrequency, opticalMuxConnectorType=opticalMuxConnectorType, virtualPortTestPrbsRcvMode=virtualPortTestPrbsRcvMode, physicalPortTraceExpectedOduTcmB=physicalPortTraceExpectedOduTcmB, opticalMuxMaxRamanGainMon=opticalMuxMaxRamanGainMon, scAutonegotiation=scAutonegotiation, containerConnectNonStdFromId=containerConnectNonStdFromId, moduleAvlndpF1483Rxcrs=moduleAvlndpF1483Rxcrs, downwardContainerSlotNo=downwardContainerSlotNo, entityMtosiSlotsShelfNo=entityMtosiSlotsShelfNo, lldpPortType=lldpPortType, ntpIPv6SyncStatus=ntpIPv6SyncStatus, alarmSeverityTerminPointType=alarmSeverityTerminPointType, containerOmEntry=containerOmEntry, downwardOpticalMuxChildId=downwardOpticalMuxChildId, opticalLineChannelSpacing=opticalLineChannelSpacing, alarmDatabaseMismatch=alarmDatabaseMismatch, lanMetric=lanMetric, alarmAutoShutdownToHighTemp=alarmAutoShutdownToHighTemp, entityProtectionCableClassName=entityProtectionCableClassName, autoRestartCount=autoRestartCount, fileDataComment=fileDataComment, notAssignableOpticalMuxClassName=notAssignableOpticalMuxClassName, physicalPortOtnStuffing=physicalPortOtnStuffing, moduleChannelsProvision=moduleChannelsProvision, alarmAutomaticPowerReductionForEyeSafety=alarmAutomaticPowerReductionForEyeSafety, notAssignableFacilityAidString=notAssignableFacilityAidString, alarmThres15MinExceededSonetSectOofs=alarmThres15MinExceededSonetSectOofs, containerCrossDcnShelfNo=containerCrossDcnShelfNo, virtualPortAutosrvLock=virtualPortAutosrvLock, alarmFiberConnProtocolFailure=alarmFiberConnProtocolFailure, externalVchFrameFormat=externalVchFrameFormat, alarmOptInputPwrReceivedTooHigh=alarmOptInputPwrReceivedTooHigh, alarmSeverityShelfConnValue=alarmSeverityShelfConnValue, scConnectionType=scConnectionType, alarmSeverityLicenseManagerTable=alarmSeverityLicenseManagerTable, alarmLossOsc=alarmLossOsc, alarmEqptType=alarmEqptType, alarmThres15MinExceededPhysConvSE=alarmThres15MinExceededPhysConvSE, containerTerminPointParentId=containerTerminPointParentId, upwardContainerSlotNo=upwardContainerSlotNo, crossDcnLink=crossDcnLink, externalPortMinOsnrRcv=externalPortMinOsnrRcv, containerCrsOptLineParentId=containerCrsOptLineParentId, entityContainerAidString=entityContainerAidString, crossOpticalLineIngressNodeIp=crossOpticalLineIngressNodeIp, alarmAcpPartnerUnassigned=alarmAcpPartnerUnassigned, alarmProvPayloadMismatch=alarmProvPayloadMismatch, physicalPortTimModeOduTcmB=physicalPortTimModeOduTcmB, externalOmHostName=externalOmHostName, containerPchParentId=containerPchParentId, lsrtempThresholdConfigTable=lsrtempThresholdConfigTable, changePhysicalPortServiceAlsMode=changePhysicalPortServiceAlsMode, transientThres1DayExceededFecBERCE=transientThres1DayExceededFecBERCE, physicalPortOpticalSetPoint=physicalPortOpticalSetPoint, alarmFiberConnInvalid=alarmFiberConnInvalid, downwardEnvClassName=downwardEnvClassName, changePhysicalPortServiceTimingSource=changePhysicalPortServiceTimingSource, alarmLossofTandemConnectionOduTcmA=alarmLossofTandemConnectionOduTcmA, ffpWaitToRestore=ffpWaitToRestore, alarmAutoPowerShutdown=alarmAutoPowerShutdown, containerPlugEquipmentState=containerPlugEquipmentState, containerVethPortNo=containerVethPortNo, endOfAlarmSeverityEnvTable=endOfAlarmSeverityEnvTable, entityEnvOneIndex=entityEnvOneIndex, alarmSeverityShelfConnEntry=alarmSeverityShelfConnEntry, notAssignableOptLineAidString=notAssignableOptLineAidString, tools=tools, containerScShelfNo=containerScShelfNo, containerPchClass=containerPchClass, ipv6ActRoutesNextHop=ipv6ActRoutesNextHop, fileDataRevision=fileDataRevision, ipForwarding=ipForwarding, ipv6InActRoutesShelfNo=ipv6InActRoutesShelfNo, hdSystemNendLogicalIpAddr=hdSystemNendLogicalIpAddr, containerLanTable=containerLanTable, entityCrossDcnExtNo=entityCrossDcnExtNo, alarmFiberConnLos=alarmFiberConnLos, userManagementRowStatus=userManagementRowStatus, changePhysicalPortServiceTraceTransmitOpspOtu=changePhysicalPortServiceTraceTransmitOpspOtu, crossConnectionIngressTid=crossConnectionIngressTid, endOfFanTable=endOfFanTable, alarmProfileSeverityType=alarmProfileSeverityType, ipv6=ipv6, containerConnectNonStdFromIndexNo2=containerConnectNonStdFromIndexNo2, physicalPortChannelBandwith=physicalPortChannelBandwith, endOfRatAnalyzerTable=endOfRatAnalyzerTable, containerConnectNonStdClass=containerConnectNonStdClass)
mibBuilder.exportSymbols("ADVA-FSPR7-MIB", advaInventoryVendorId=advaInventoryVendorId, fileDataFileName=fileDataFileName, entityContainerTableId=entityContainerTableId, alarmFacilityAffect=alarmFacilityAffect, alarmNtpIPv4Type=alarmNtpIPv4Type, userManagementEntry=userManagementEntry, lanIpAddrMonitor=lanIpAddrMonitor, scIpMode=scIpMode, entityEnvShelfNo=entityEnvShelfNo, containerCrossConnToId=containerCrossConnToId, containerVethClassName=containerVethClassName, sslRenewMode=sslRenewMode, linkNendIPv6=linkNendIPv6, crossDcnTable=crossDcnTable, transientThres1DayExceededSonetSectES=transientThres1DayExceededSonetSectES, ipv6ActRoutesTable=ipv6ActRoutesTable, ffpApsType=ffpApsType, scDeadInterval=scDeadInterval, whitelistEntry=whitelistEntry, physicalPortLaserReleaseTimer=physicalPortLaserReleaseTimer, downwardExternalPortSlotNo=downwardExternalPortSlotNo, physicalPortTraceTransmitDapiOtu=physicalPortTraceTransmitDapiOtu, changePhysicalPortServiceRowStatus=changePhysicalPortServiceRowStatus, transientThres1DayExceededFecSES=transientThres1DayExceededFecSES, alarmOosDisabled=alarmOosDisabled, endOfRelationship=endOfRelationship, physicalPortTimModeOduTcmA=physicalPortTimModeOduTcmA, alarmSeverityNtpIPv4Value=alarmSeverityNtpIPv4Value, knownHostIPv6Entry=knownHostIPv6Entry, containerConnectNonStdToIndexNo3=containerConnectNonStdToIndexNo3, containerFanParentId=containerFanParentId, ratBlockingTable=ratBlockingTable, alarmAutoShutdownSendingOciOduTx=alarmAutoShutdownSendingOciOduTx, dependentIndex=dependentIndex, physicalPortCirTrmt=physicalPortCirTrmt, opticalMuxForceFwdAsePilotOn=opticalMuxForceFwdAsePilotOn, endOfDownwardDcnTable=endOfDownwardDcnTable, endOfAlarmOpticalMuxTable=endOfAlarmOpticalMuxTable, downwardExternalPortExtNo=downwardExternalPortExtNo, containerShelfmapEntry=containerShelfmapEntry, alarmHwFailure=alarmHwFailure, alarmLocalOscLevelAbnormal=alarmLocalOscLevelAbnormal, opticalMuxReferByTerminPoint=opticalMuxReferByTerminPoint, entityTerminPointIndexNo3=entityTerminPointIndexNo3, downwardShelfConnSlotNo=downwardShelfConnSlotNo, transientProtSwToDuplexFail=transientProtSwToDuplexFail, advaInventoryPortNo=advaInventoryPortNo, containerCrossConnFromPointClass=containerCrossConnFromPointClass, containerExternalVchPortNo=containerExternalVchPortNo, transientFwpSwitchStarted=transientFwpSwitchStarted, externalVchMinChromDisperRcv=externalVchMinChromDisperRcv, virtualPortTraceTransmitSapiOdu=virtualPortTraceTransmitSapiOdu, alarmPayloadMismatchOPU=alarmPayloadMismatchOPU, changePhysicalPortServiceOtnStuffing=changePhysicalPortServiceOtnStuffing, userManagementAccessStartTime=userManagementAccessStartTime, scValidSigTimer=scValidSigTimer, alarmShelfmapTable=alarmShelfmapTable, changePhysicalPortServiceSigDegPeriodOduTcmC=changePhysicalPortServiceSigDegPeriodOduTcmC, unassignedInventoryAssignState=unassignedInventoryAssignState, lanPriority=lanPriority, downwardTerminPointIndexNo4=downwardTerminPointIndexNo4, containerEnvParentId=containerEnvParentId, containerExternalOmClass=containerExternalOmClass, virtualPortEqlzAdmin=virtualPortEqlzAdmin, transientThres1DayExceededSonetSectOofs=transientThres1DayExceededSonetSectOofs, transientCryBootCompleted=transientCryBootCompleted, externalPortTable=externalPortTable, shelfRackOrder=shelfRackOrder, alarmTraceIdentifierMismatchOduTcmA=alarmTraceIdentifierMismatchOduTcmA, containerExternalPortPortNo=containerExternalPortPortNo, accessWarningMessage=accessWarningMessage, entityCrsOptLineFromId=entityCrsOptLineFromId, hdSystemClass=hdSystemClass, containerCrossConnFromPointPortNo=containerCrossConnFromPointPortNo, alarmLicenseSeverity=alarmLicenseSeverity, changePhysicalPortServiceTimModeOduTcmC=changePhysicalPortServiceTimModeOduTcmC, alarmAttOnTransmitterFiberLowerThanMonitor=alarmAttOnTransmitterFiberLowerThanMonitor, virtualPortTraceExpectedOduTcmA=virtualPortTraceExpectedOduTcmA, changePhysicalPortServiceSigDegPeriodOduTcmB=changePhysicalPortServiceSigDegPeriodOduTcmB, notAssignableContainerAidString=notAssignableContainerAidString, alarmAseTableGenFailHighBackreflection=alarmAseTableGenFailHighBackreflection, virtualPortTraceTransmitSapiOduTcmA=virtualPortTraceTransmitSapiOduTcmA, scFrcdLogin=scFrcdLogin, terminationPointFiberDetect=terminationPointFiberDetect, crossConnectionPathNode=crossConnectionPathNode, channelTracesIndexNo3=channelTracesIndexNo3, alarmPayloadMismatchHigherOrderPath=alarmPayloadMismatchHigherOrderPath, transientCryptoKeyExchgFailCondClr=transientCryptoKeyExchgFailCondClr, physicalPortTraceExpectedOduTcmC=physicalPortTraceExpectedOduTcmC, containerTerminPointClass=containerTerminPointClass, containerModEquipmentState=containerModEquipmentState, linkSecondaryStates=linkSecondaryStates, alarmLossOfPilotSignal=alarmLossOfPilotSignal, changePhysicalPortServiceMode=changePhysicalPortServiceMode, physicalPortTraceTransmitOpspOduTcmA=physicalPortTraceTransmitOpspOduTcmA, containerScExtNo=containerScExtNo, containerLanClass=containerLanClass, endOfRatBlockingTable=endOfRatBlockingTable, whitelistFiltering=whitelistFiltering, containerCrossConnToShelfNo=containerCrossConnToShelfNo, physicalPortSigDegThresSdhMs=physicalPortSigDegThresSdhMs, containerShelfConnPortNo=containerShelfConnPortNo, scAuthType=scAuthType, notAssignableContainerEntry=notAssignableContainerEntry, virtualPortLambda=virtualPortLambda, alarmCarrierFreqOffsetTooHigh=alarmCarrierFreqOffsetTooHigh, entityFfpClass=entityFfpClass, downwardDcnExtNo=downwardDcnExtNo, containerCrsOptLineEntry=containerCrsOptLineEntry, envPortInvertTifInputLogic=envPortInvertTifInputLogic, physicalPortOperState=physicalPortOperState, authTrapSuccessfulAuthCount=authTrapSuccessfulAuthCount, ntpIPv6Table=ntpIPv6Table, opticalLineTransmitFrequency=opticalLineTransmitFrequency, oprIntervalPm15minValidFlag=oprIntervalPm15minValidFlag, shelfOperState=shelfOperState, alarmAutoShutdownTxRxLasersDueToHighTemp=alarmAutoShutdownTxRxLasersDueToHighTemp, licenseLicenseName=licenseLicenseName, changePhysicalPortServiceSigDegPeriodSdhSection=changePhysicalPortServiceSigDegPeriodSdhSection, crossConnectionCrsToAidTwo=crossConnectionCrsToAidTwo, opticalMuxVariableGainNtoR=opticalMuxVariableGainNtoR, fileDataPgmType=fileDataPgmType, containerConnectStdFromIndexNo4=containerConnectStdFromIndexNo4, opticalLineTxLineAttenuation=opticalLineTxLineAttenuation, alarmNtpIPv6Severity=alarmNtpIPv6Severity, transientThres1DayExceededSonetSectSES=transientThres1DayExceededSonetSectSES, alarmBackwardDefectIndicationOduTcmB=alarmBackwardDefectIndicationOduTcmB, fanOperState=fanOperState, alarmMpFileMissing=alarmMpFileMissing, alarmRPortOutage=alarmRPortOutage, changePhysicalPortServiceSigDegThresOduTcmB=changePhysicalPortServiceSigDegThresOduTcmB, opticalMuxReferByEntry=opticalMuxReferByEntry, syslogIPv6Ip=syslogIPv6Ip, upwardExternalPortClassName=upwardExternalPortClassName, containerChShelfNo=containerChShelfNo, containerExternalPortTableId=containerExternalPortTableId, containerLanEntry=containerLanEntry, containerFfpParentId=containerFfpParentId, upwardContainerClassName=upwardContainerClassName, virtualPortTimModeOduTcmA=virtualPortTimModeOduTcmA, linkAreaAid=linkAreaAid, alarmConfOutPowerTransTooHigh=alarmConfOutPowerTransTooHigh, virtualPortIngressNodeIp=virtualPortIngressNodeIp, alarmAseTableBuild=alarmAseTableBuild, alarmSeverityContainerEntry=alarmSeverityContainerEntry, shelfRackNumber=shelfRackNumber, ratBlockingAid=ratBlockingAid, containerShelfConnTableId=containerShelfConnTableId, changePhysicalPortServiceSigDegThresSonetLine=changePhysicalPortServiceSigDegThresSonetLine, scFarEndIp=scFarEndIp, alarmThres15MinExceededPhysConvDE=alarmThres15MinExceededPhysConvDE, alarmSeverityHdSystemId=alarmSeverityHdSystemId, alarmCommunicationLoss=alarmCommunicationLoss, terminationPointLevel=terminationPointLevel, fanOutputReset=fanOutputReset, changePhysicalPortServiceSigDegThreshold=changePhysicalPortServiceSigDegThreshold, virtualPortTraceExpectedDapiOdu=virtualPortTraceExpectedDapiOdu, physicalPortTimModeOtu=physicalPortTimModeOtu, alarmAutoShutdownGAis=alarmAutoShutdownGAis, transientIntrusionTx=transientIntrusionTx, transientCryAuthKeyMade=transientCryAuthKeyMade, transientEqlzCompleted=transientEqlzCompleted, notAssignableDcnAidString=notAssignableDcnAidString, ipv6InActRoutesNextHopIp=ipv6InActRoutesNextHopIp, lldpLLDPScope=lldpLLDPScope, crossOpticalLineCrsFunction=crossOpticalLineCrsFunction, alarmShelfmapAffect=alarmShelfmapAffect, shelfConnDataLayerPmReset=shelfConnDataLayerPmReset, hdSystemEntry=hdSystemEntry, virtualPortTraceRcvSapiOdu=virtualPortTraceRcvSapiOdu, notAssignableOpticalMuxClass=notAssignableOpticalMuxClass, physicalPortTraceRcvOpspOdu=physicalPortTraceRcvOpspOdu, opticalLineTable=opticalLineTable, transientEqlzAuto=transientEqlzAuto, protection=protection, entityOpticalMuxParentId=entityOpticalMuxParentId, ipv6InActRoutesTable=ipv6InActRoutesTable, containerCrossConnFromPointSlotNo=containerCrossConnFromPointSlotNo, containerModExtNo=containerModExtNo, moduleForceDestroy=moduleForceDestroy, moduleChannelSpacing=moduleChannelSpacing, downwardDcnShelfNo=downwardDcnShelfNo, physicalPortTcmCLevel=physicalPortTcmCLevel, entityFacilityType=entityFacilityType, entityProtectionCableEntry=entityProtectionCableEntry)
