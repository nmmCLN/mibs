#
# PySNMP MIB module ADVANTECH-EKI-PRONEER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/advantech/ADVANTECH-EKI-PRONEER-MIB
# Produced by pysmi-1.1.10 at Thu Apr  4 03:03:05 2024
# On host fv-az714-698 platform Linux version 6.5.0-1016-azure by user runner
# Using Python version 3.10.14 (main, Mar 20 2024, 15:15:25) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Gauge32, Unsigned32, ObjectIdentity, Counter64, TimeTicks, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Integer32, Counter32, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter64", "TimeTicks", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Integer32", "Counter32", "enterprises", "IpAddress")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
advantech = ModuleIdentity((1, 3, 6, 1, 4, 1, 10297))
advantech.setRevisions(('2014-12-02 00:00',))
if mibBuilder.loadTexts: advantech.setLastUpdated('201412020000Z')
if mibBuilder.loadTexts: advantech.setOrganization('Advantech iConnectivity Group')
aSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202))
proneer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000))
monitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2))
l2switching = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3))
macAddressTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7))
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1))
loggingMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2))
portMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3))
linkAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4))
lldpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5))
igmpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6))
mldStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('current')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
loaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loaderVersion.setStatus('current')
loaderDate = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loaderDate.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
firmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareDate.setStatus('current')
systemObjectID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemObjectID.setStatus('current')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('current')
ledStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14))
ledSYSStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSYSStatus.setStatus('current')
ledRMStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledRMStatus.setStatus('current')
ledPWR1Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPWR1Status.setStatus('current')
ledPWR2Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPWR2Status.setStatus('current')
ledAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledAlarmStatus.setStatus('current')
ledPFAILStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPFAILStatus.setStatus('current')
ledRFAILStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledRFAILStatus.setStatus('current')
ledLOOPStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledLOOPStatus.setStatus('current')
ledTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledTempStatus.setStatus('current')
buildVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildVersion.setStatus('current')
loggingBufferTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1), )
if mibBuilder.loadTexts: loggingBufferTable.setStatus('current')
loggingBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loggingBufferIndex"))
if mibBuilder.loadTexts: loggingBufferEntry.setStatus('current')
loggingBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: loggingBufferIndex.setStatus('current')
loggingBufferSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferSeverity.setStatus('current')
loggingBufferCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferCategory.setStatus('current')
loggingBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferTimeStamp.setStatus('current')
loggingBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferMessage.setStatus('current')
clearBufferedMsg = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBufferedMsg.setStatus('current')
loggingFileTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3), )
if mibBuilder.loadTexts: loggingFileTable.setStatus('current')
loggingFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loggingFileIndex"))
if mibBuilder.loadTexts: loggingFileEntry.setStatus('current')
loggingFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: loggingFileIndex.setStatus('current')
loggingFileSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileSeverity.setStatus('current')
loggingFileCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileCategory.setStatus('current')
loggingFileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileTimeStamp.setStatus('current')
loggingFileMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileMessage.setStatus('current')
clearFileMsg = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearFileMsg.setStatus('current')
portStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1), )
if mibBuilder.loadTexts: portStatisticTable.setStatus('current')
portStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portStatisticIndex"))
if mibBuilder.loadTexts: portStatisticEntry.setStatus('current')
portStatisticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatisticIndex.setStatus('current')
portCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCounterClear.setStatus('current')
ifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('current')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('current')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('current')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('current')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('current')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('current')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('current')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('current')
ifInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInMulticastPkts.setStatus('current')
ifInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInBroadcastPkts.setStatus('current')
ifOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutMulticastPkts.setStatus('current')
ifOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutBroadcastPkts.setStatus('current')
dot3StatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsAlignmentErrors.setStatus('current')
dot3StatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFCSErrors.setStatus('current')
dot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSingleCollisionFrames.setStatus('current')
dot3StatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsMultipleCollisionFrames.setStatus('current')
dot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsDeferredTransmissions.setStatus('current')
dot3StatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsLateCollisions.setStatus('current')
dot3StatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsExcessiveCollisions.setStatus('current')
dot3StatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFrameTooLongs.setStatus('current')
dot3StatsSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSymbolErrors.setStatus('current')
dot3ControlInUnknownOpcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ControlInUnknownOpcodes.setStatus('current')
dot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3InPauseFrames.setStatus('current')
dot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3OutPauseFrames.setStatus('current')
lagStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1), )
if mibBuilder.loadTexts: lagStatusTable.setStatus('current')
lagStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagStatusIndex"))
if mibBuilder.loadTexts: lagStatusEntry.setStatus('current')
lagStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusIndex.setStatus('current')
lagStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusName.setStatus('current')
lagStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusType.setStatus('current')
lagStatusLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusLinkState.setStatus('current')
lagStatusActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusActiveMember.setStatus('current')
lagStatusStandbyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusStandbyMember.setStatus('current')
lacpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2), )
if mibBuilder.loadTexts: lacpInfoTable.setStatus('current')
lacpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lacpInfoLagIndex"), (0, "ADVANTECH-EKI-PRONEER-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoEntry.setStatus('current')
lacpInfoLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoLagIndex.setStatus('current')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
lacpInfoPartnerSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPartnerSysId.setStatus('current')
lacpInfoPnkey = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPnkey.setStatus('current')
lacpInfoAtkey = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAtkey.setStatus('current')
lacpInfoSel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoSel.setStatus('current')
lacpInfoMux = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoMux.setStatus('current')
lacpInfoReceiv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoReceiv.setStatus('current')
lacpInfoPrdtx = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPrdtx.setStatus('current')
lacpInfoAtstat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAtstat.setStatus('current')
lacpInfoPnstat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPnstat.setStatus('current')
lldpClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpClearStatistics.setStatus('current')
inertions = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inertions.setStatus('current')
deletions = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletions.setStatus('current')
drops = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drops.setStatus('current')
ageouts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ageouts.setStatus('current')
lldpPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6), )
if mibBuilder.loadTexts: lldpPortStatisticsTable.setStatus('current')
lldpPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpPortStatIndex"))
if mibBuilder.loadTexts: lldpPortStatisticsEntry.setStatus('current')
lldpPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatIndex.setStatus('current')
lldpPortStatTotalTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalTxFrame.setStatus('current')
lldpPortStatTotalRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalRxFrame.setStatus('current')
lldpPortStatDiscardRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatDiscardRxFrame.setStatus('current')
lldpPortStatErrorRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatErrorRxFrame.setStatus('current')
lldpPortStatDiscardRxTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatDiscardRxTlv.setStatus('current')
lldpPortStatUnrecognizedRxTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatUnrecognizedRxTlv.setStatus('current')
lldpPortStatTotalRxAgeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalRxAgeouts.setStatus('current')
totalRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRx.setStatus('current')
validRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: validRx.setStatus('current')
invalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidRx.setStatus('current')
otherRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherRx.setStatus('current')
leaveRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaveRx.setStatus('current')
reportRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportRx.setStatus('current')
generalQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalQueryRx.setStatus('current')
specialGroupQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupQueryRx.setStatus('current')
specialGroupSourceQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupSourceQueryRx.setStatus('current')
leaveTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaveTx.setStatus('current')
reportTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportTx.setStatus('current')
generalQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalQueryTx.setStatus('current')
specialGroupQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupQueryTx.setStatus('current')
specialGroupSourceQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupSourceQueryTx.setStatus('current')
clearigmpStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearigmpStatistics.setStatus('current')
mldtotalRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldtotalRx.setStatus('current')
mldvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldvalidRx.setStatus('current')
mldinvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldinvalidRx.setStatus('current')
mldotherRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldotherRx.setStatus('current')
mldleaveRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldleaveRx.setStatus('current')
mldreportRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldreportRx.setStatus('current')
mldgeneralQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldgeneralQueryRx.setStatus('current')
mldspecialGroupQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupQueryRx.setStatus('current')
mldspecialGroupSourceQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupSourceQueryRx.setStatus('current')
mldleaveTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldleaveTx.setStatus('current')
mldreportTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldreportTx.setStatus('current')
mldgeneralQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldgeneralQueryTx.setStatus('current')
mldspecialGroupQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupQueryTx.setStatus('current')
mldspecialGroupSourceQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupSourceQueryTx.setStatus('current')
clearmldStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearmldStatistics.setStatus('current')
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1))
ipv6Settings = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2))
managementVlan = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlan.setStatus('current')
systemTime = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4))
sfp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5))
dhcpClientOpt82 = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6))
networkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7))
ipv4Mode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Mode.setStatus('current')
ipv4Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Address.setStatus('current')
ipv4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4SubnetMask.setStatus('current')
ipv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Gateway.setStatus('current')
ipv4DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4DnsServer1.setStatus('current')
ipv4DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4DnsServer2.setStatus('current')
interfaceIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7), )
if mibBuilder.loadTexts: interfaceIpv4Table.setStatus('current')
interfaceIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "interfaceIpv4Index"))
if mibBuilder.loadTexts: interfaceIpv4Entry.setStatus('current')
interfaceIpv4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIpv4Index.setStatus('current')
interfaceIpv4Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIpv4Vlan.setStatus('current')
interfaceIpv4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Mode.setStatus('current')
interfaceIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Address.setStatus('current')
interfaceIpv4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4SubnetMask.setStatus('current')
interfaceIpv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Gateway.setStatus('current')
interCurrIpv4DhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4DhcpState.setStatus('current')
interCurrIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4Address.setStatus('current')
interCurrIpv4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4SubnetMask.setStatus('current')
interCurrIpv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4Gateway.setStatus('current')
autoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoConfiguration.setStatus('current')
ipv6Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Address.setStatus('current')
ipv6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6SubnetMask.setStatus('current')
ipv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Gateway.setStatus('current')
dhcpv6Client = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6Client.setStatus('current')
ipv6InUseTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6), )
if mibBuilder.loadTexts: ipv6InUseTable.setStatus('current')
ipv6InUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipv6InUseIndex"))
if mibBuilder.loadTexts: ipv6InUseEntry.setStatus('current')
ipv6InUseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseIndex.setStatus('current')
ipv6InUseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseAddress.setStatus('current')
ipv6InUseSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseSubnetMask.setStatus('current')
ipv6InUseRouter = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseRouter.setStatus('current')
dhcpv6DUID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6DUID.setStatus('current')
dhcpv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6IPAddress.setStatus('current')
systemTimeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1))
enableSNTP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSNTP.setStatus('current')
manualTime = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2))
year = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2035))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: year.setStatus('current')
month = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: month.setStatus('current')
day = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: day.setStatus('current')
hours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hours.setStatus('current')
minutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minutes.setStatus('current')
seconds = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seconds.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91))).clone(namedValues=NamedValues(("none", 0), ("gmtminus1200-International-Date-Line-West", 1), ("gmtminus1100-MidwayIsland-Samoa", 2), ("gmtminus1000-Hawaii", 3), ("gmtminus0900-Alaska", 4), ("gmtminus0800-Pacific-Time-US-and-Canada", 5), ("gmtminus0800-Tijuana-Baja-California", 6), ("gmtminus0700-Arizona", 7), ("gmtminus0700-Chihuahua-La-Paz-Mazatlan-New", 8), ("gmtminus0700-Chihuahua-La-Paz-Mazatlan-Old", 9), ("gmtminus0700-Mountain-Time-US-and-Canada", 10), ("gmtminus0600-Central-America", 11), ("gmtminus0600-Central-Time-US-and-Canada", 12), ("gmtminus0600-Guadalajara-Mexico-City-Monterrey-New", 13), ("gmtminus0600-Guadalajara-Mexico-City-Monterrey-Old", 14), ("gmtminus0600-Saskatchewan", 15), ("gmtminus0500-Bogota-Lima-Quito-Rio-Branco", 16), ("gmtminus0500-Eastern-Time-US-and-Canada", 17), ("gmtminus0500-Indiana-East", 18), ("gmtminus0430-Caracas", 19), ("gmtminus0400-Atlantic-Time-Canada", 20), ("gmtminus0400-La-Paz", 21), ("gmtminus0400-Manaus", 22), ("gmtminus0400-Santiago", 23), ("gmtminus0330-Newfoundland", 24), ("gmtminus0300-Brasilia", 25), ("gmtminus0300-Buenos-Aires", 26), ("gmtminus0300-Georgetown", 27), ("gmtminus0300-Greenland", 28), ("gmtminus0300-Montevideo", 29), ("gmtminus0200-Mid-Atlantic", 30), ("gmtminus0100-Azores", 31), ("gmtminus0100-Cape-Verde-Is", 32), ("gmt-Casablanca", 33), ("gmt-Greenwich-Mean-Time-Dublin-Edinburgh-Lisbon-London", 34), ("gmt-Monrovia-Reykjavik", 35), ("gmtplus0100-Amsterdam-Berlin-Bern-Rome-Stockholm-Vienna", 36), ("gmtplus0100-Belgrade-Bratislava-Budapest-Ljubljana-Prague", 37), ("gmtplus0100-Brussels-Copenhagen-Madrid-Paris", 38), ("gmtplus0100-Sarajevo-Skopje-Warsaw-Zagreb", 39), ("gmtplus0100-West-Central-Africa", 40), ("gmtplus0200-Amman", 41), ("gmtplus0200-Athens-Bucharest-Istanbul", 42), ("gmtplus0200-Beirut", 43), ("gmtplus0200-Cairo", 44), ("gmtplus0200-Harare-Pretoria", 45), ("gmtplus0200-Helsinki-Kyiv-Riga-Sofia-Tallinn-Vilnius", 46), ("gmtplus0200-Jerusalem", 47), ("gmtplus0200-Minsk", 48), ("gmtplus0200-Windhoek", 49), ("gmtplus0300-Baghdad", 50), ("gmtplus0300-Kuwait-Riyadh", 51), ("gmtplus0300-Moscow-St-Petersburg-Volgograd", 52), ("gmtplus0300-Nairobi", 53), ("gmtplus0300-Tbilisi", 54), ("gmtplus0330-Tehran", 55), ("gmtplus0400-Abu-Dhabi-Muscat", 56), ("gmtplus0400-Baku", 57), ("gmtplus0400-Caucasus-Standard-Time", 58), ("gmtplus0400-Port-Louis", 59), ("gmtplus0400-Yerevan", 60), ("gmtplus0430-Kabul", 61), ("gmtplus0500-Ekaterinburg", 62), ("gmtplus0500-Islamabad-Karachi", 63), ("gmtplus0500-Tashkent", 64), ("gmtplus0530-Chennai-Kolkata-Mumbai-New-Delhi", 65), ("gmtplus0530-Sri-Jayawardenepura", 66), ("gmtplus0545-Kathmandu", 67), ("gmtplus0600-Almaty-Novosibirsk", 68), ("gmtplus0600-Astana-Dhaka", 69), ("gmtplus0630-Yangon-Rangoon", 70), ("gmtplus0700-Bangkok-Hanoi-Jakarta", 71), ("gmtplus0700-Krasnoyarsk", 72), ("gmtplus0800-Beijing-Chongqing-Hong-Kong-Urumqi", 73), ("gmtplus0800-Irkutsk-Ulaan-Bataar", 74), ("gmtplus0800-Kuala-Lumpur-Singapore", 75), ("gmtplus0800-Perth", 76), ("gmtplus0800-Taipei", 77), ("gmtplus0900-Osaka-Sapporo-Tokyo", 78), ("gmtplus0900-Seoul", 79), ("gmtplus0900-Yakutsk", 80), ("gmtplus0930-Adelaide", 81), ("gmtplus0930-Darwin", 82), ("gmtplus1000-Brisbane", 83), ("gmtplus1000-Canberra-Melbourne-Sydney", 84), ("gmtplus1000-Guam-Port-Moresby", 85), ("gmtplus1000-Hobart", 86), ("gmtplus1000-Vladivostok", 87), ("gmtplus1100-Magadan-Solomon-Is-New-Caledonia", 88), ("gmtplus1200-Auckland-Wellington", 89), ("gmtplus1200-Fiji-Kamchatka-Marshall-Is", 90), ("gmtplus1300-Nuku-alofa", 91)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("recurring", 2), ("no-recurring", 3), ("usa", 4), ("european", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
daylightSavingOffset = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSavingOffset.setStatus('current')
recurringFrom = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6))
recFromDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromDay.setStatus('current')
recFromWeek = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromWeek.setStatus('current')
recFromMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromMonth.setStatus('current')
recFromHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromHours.setStatus('current')
recFromMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromMinutes.setStatus('current')
recurringTo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7))
recToDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToDay.setStatus('current')
recToWeek = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToWeek.setStatus('current')
recToMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToMonth.setStatus('current')
recToHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToHours.setStatus('current')
recToMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToMinutes.setStatus('current')
nonRecurringFrom = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8))
nonRecFromYear = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2037))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromYear.setStatus('current')
nonRecFromMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromMonth.setStatus('current')
nonRecFromDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromDay.setStatus('current')
nonRecFromHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromHours.setStatus('current')
nonRecFromMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromMinutes.setStatus('current')
nonRecurringTo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9))
nonRecToYear = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2037))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToYear.setStatus('current')
nonRecToMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToMonth.setStatus('current')
nonRecToDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToDay.setStatus('current')
nonRecToHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToHours.setStatus('current')
nonRecToMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToMinutes.setStatus('current')
serverAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAddress.setStatus('current')
serverPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPort.setStatus('current')
systemTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTimeStatus.setStatus('current')
systemTimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2))
currentDateTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDateTime.setStatus('current')
currentSNTP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTP.setStatus('current')
currentSNTPServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTPServerAddr.setStatus('current')
currentSNTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTPServerPort.setStatus('current')
currentTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTimeZone.setStatus('current')
currentDaylightSavingStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingStatus.setStatus('current')
currentDaylightSavingOffset = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingOffset.setStatus('current')
currentDaylightSavingFrom = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingFrom.setStatus('current')
currentDaylightSavingTo = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingTo.setStatus('current')
sfpSerialInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1), )
if mibBuilder.loadTexts: sfpSerialInfoTable.setStatus('current')
sfpSerialInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpPortIndex"))
if mibBuilder.loadTexts: sfpSerialInfoEntry.setStatus('current')
sfpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortIndex.setStatus('current')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
sfpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSpeed.setStatus('current')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
sfpVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPn.setStatus('current')
spfVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spfVendorRev.setStatus('current')
sfpVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSn.setStatus('current')
sfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDateCode.setStatus('current')
sfpDMIInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2), )
if mibBuilder.loadTexts: sfpDMIInfoTable.setStatus('current')
sfpDMIInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpDMIPortIndex"))
if mibBuilder.loadTexts: sfpDMIInfoEntry.setStatus('current')
sfpDMIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIPortIndex.setStatus('current')
sfpDMITemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 2), DisplayString()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITemperature.setStatus('current')
sfpDMIVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 3), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIVoltage.setStatus('current')
sfpDMITxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 4), DisplayString()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITxBias.setStatus('current')
sfpDMITxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 5), DisplayString()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITxPower.setStatus('current')
sfpDMIRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 6), DisplayString()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIRxPower.setStatus('current')
ddmDiagnosticAlarm = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("syslog", 2), ("email", 3), ("snmp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmDiagnosticAlarm.setStatus('current')
sfpDMIAlarmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4), )
if mibBuilder.loadTexts: sfpDMIAlarmInfoTable.setStatus('current')
sfpDMIAlarmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpDMIAlarmPortIndex"))
if mibBuilder.loadTexts: sfpDMIAlarmInfoEntry.setStatus('current')
sfpDMIAlarmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIAlarmPortIndex.setStatus('current')
sfpDMITempHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighAlarmState.setStatus('current')
sfpDMITempHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 3), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighAlarmValue.setStatus('current')
sfpDMITempHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighWarnState.setStatus('current')
sfpDMITempHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 5), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighWarnValue.setStatus('current')
sfpDMITempLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowAlarmState.setStatus('current')
sfpDMITempLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 7), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowAlarmValue.setStatus('current')
sfpDMITempLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowWarnState.setStatus('current')
sfpDMITempLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 9), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowWarnValue.setStatus('current')
sfpDMIVoltageHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmState.setStatus('current')
sfpDMIVoltageHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 11), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmValue.setStatus('current')
sfpDMIVoltageHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnState.setStatus('current')
sfpDMIVoltageHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 13), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnValue.setStatus('current')
sfpDMIVoltageLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmState.setStatus('current')
sfpDMIVoltageLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 15), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmValue.setStatus('current')
sfpDMIVoltageLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnState.setStatus('current')
sfpDMIVoltageLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 17), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnValue.setStatus('current')
sfpDMITxBasisHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmState.setStatus('current')
sfpDMITxBasisHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 19), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmValue.setStatus('current')
sfpDMITxBasisHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnState.setStatus('current')
sfpDMITxBasisHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 21), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnValue.setStatus('current')
sfpDMITxBasisLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmState.setStatus('current')
sfpDMITxBasisLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 23), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmValue.setStatus('current')
sfpDMITxBasisLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnState.setStatus('current')
sfpDMITxBasisLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 25), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnValue.setStatus('current')
sfpDMITxPowerHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmState.setStatus('current')
sfpDMITxPowerHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 27), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmValue.setStatus('current')
sfpDMITxPowerHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnState.setStatus('current')
sfpDMITxPowerHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 29), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnValue.setStatus('current')
sfpDMITxPowerLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmState.setStatus('current')
sfpDMITxPowerLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 31), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmValue.setStatus('current')
sfpDMITxPowerLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnState.setStatus('current')
sfpDMITxPowerLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 33), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnValue.setStatus('current')
sfpDMIRxPowerHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmState.setStatus('current')
sfpDMIRxPowerHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 35), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmValue.setStatus('current')
sfpDMIRxPowerHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnState.setStatus('current')
sfpDMIRxPowerHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 37), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnValue.setStatus('current')
sfpDMIRxPowerLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmState.setStatus('current')
sfpDMIRxPowerLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 39), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmValue.setStatus('current')
sfpDMIRxPowerLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnState.setStatus('current')
sfpDMIRxPowerLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 41), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnValue.setStatus('current')
dhcpClientOpt82Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82Status.setStatus('current')
dhcpClientOpt82CircuitIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("string", 1), ("hex", 2), ("userDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDFormat.setStatus('current')
dhcpClientOpt82CircuitIDString = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDString.setStatus('current')
dhcpClientOpt82CircuitIDHex = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDHex.setStatus('current')
dhcpClientOpt82CircuitIDUserDefine = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDUserDefine.setStatus('current')
dhcpClientOpt82RemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("string", 1), ("hex", 2), ("userDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDFormat.setStatus('current')
dhcpClientOpt82RemoteIDString = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDString.setStatus('current')
dhcpClientOpt82RemoteIDHex = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDHex.setStatus('current')
dhcpClientOpt82RemoteIDUserDefine = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDUserDefine.setStatus('current')
httpNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpNetworkPort.setStatus('current')
httpsNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsNetworkPort.setStatus('current')
telnetNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetNetworkPort.setStatus('current')
sshNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNetworkPort.setStatus('current')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1))
mirror = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2))
lag = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4))
eee = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6))
jamboFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 7))
stp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8))
qinqVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9))
garp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10))
gvrp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 11))
xRingElite = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12))
loopback = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13))
xRingPro = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14))
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15))
erps = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16))
portSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1), )
if mibBuilder.loadTexts: portSettingTable.setStatus('current')
portSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portSettingIndex"))
if mibBuilder.loadTexts: portSettingEntry.setStatus('current')
portSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSettingIndex.setStatus('current')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: description.setStatus('current')
enableState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableState.setStatus('current')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
speed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("auto-10M", 2), ("auto-100M", 3), ("auto-1000M", 4), ("auto-10M-100M", 5), ("fixed-10M", 6), ("fixed-100M", 7), ("fixed-1000M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speed.setStatus('current')
duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplex.setStatus('current')
flowControlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowControlConfig.setStatus('current')
flowControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowControlStatus.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sessionId"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
sessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionId.setStatus('current')
monitorSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSessionState.setStatus('current')
destinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationPort.setStatus('current')
ingressState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressState.setStatus('current')
sourceTxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceTxPort.setStatus('current')
sourceRxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRxPort.setStatus('current')
loadBalanceAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-address", 1), ("ip-mac-address", 2), ("source-port", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadBalanceAlgorithm.setStatus('current')
lagManagementTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2), )
if mibBuilder.loadTexts: lagManagementTable.setStatus('current')
lagManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagIndex"))
if mibBuilder.loadTexts: lagManagementEntry.setStatus('current')
lagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagIndex.setStatus('current')
lagName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagName.setStatus('current')
lagType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagType.setStatus('current')
lagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPorts.setStatus('current')
lagLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("not-present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagLinkState.setStatus('current')
lagActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagActiveMember.setStatus('current')
lagStandbyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStandbyMember.setStatus('current')
lagPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3), )
if mibBuilder.loadTexts: lagPortTable.setStatus('current')
lagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagPortIndex"))
if mibBuilder.loadTexts: lagPortEntry.setStatus('current')
lagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortIndex.setStatus('current')
lagPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortDescription.setStatus('current')
lagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortType.setStatus('current')
lagPortEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortEnableState.setStatus('current')
lagPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortLinkStatus.setStatus('current')
lagPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("auto-10M", 2), ("auto-100M", 3), ("auto-1000M", 4), ("auto-10M-100M", 5), ("fixed-10M", 6), ("fixed-100M", 7), ("fixed-1000M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortSpeed.setStatus('current')
lagPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortDuplex.setStatus('current')
lagPortFlowCtrlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortFlowCtrlConfig.setStatus('current')
lagPortFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortFlowCtrlStatus.setStatus('current')
lacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpSystemPriority.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPriority.setStatus('current')
lacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpTimeout.setStatus('current')
lacpPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortMode.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanId.setStatus('current')
vlanNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNamePrefix.setStatus('current')
vlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("static", 2), ("dyanmic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanType.setStatus('current')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
vlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2), )
if mibBuilder.loadTexts: vlanInterfaceTable.setStatus('current')
vlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanInterfaceEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanInterfaceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInterfaceVlanMode.setStatus('current')
vlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPvid.setStatus('current')
vlanAcceptedType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tag-only", 2), ("untag-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAcceptedType.setStatus('current')
vlanIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disbale", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIngressFiltering.setStatus('current')
portToVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3), )
if mibBuilder.loadTexts: portToVlanTable.setStatus('current')
portToVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portToVlanVlanIndex"))
if mibBuilder.loadTexts: portToVlanEntry.setStatus('current')
portToVlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanVlanIndex.setStatus('current')
portToVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanPortIndex.setStatus('current')
portToVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanVlanId.setStatus('current')
portToVlanInterfaceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanInterfaceVlanMode.setStatus('current')
portToVlanMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("exclued", 2), ("tagged", 3), ("untagged", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portToVlanMembership.setStatus('current')
portToVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanPvid.setStatus('current')
portVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4), )
if mibBuilder.loadTexts: portVlanTable.setStatus('current')
portVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portVlanPortIndex"))
if mibBuilder.loadTexts: portVlanEntry.setStatus('current')
portVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanPortIndex.setStatus('current')
portVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanPortMode.setStatus('current')
portVlanAdminVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanAdminVlans.setStatus('current')
portVlanOperVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanOperVlans.setStatus('current')
voiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5))
voiceVlanState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanState.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanRemarkCos_8021p = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setLabel("voiceVlanRemarkCos-8021p").setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanRemarkCos_8021p.setStatus('current')
voiceVlanRemark1q = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanRemark1q.setStatus('current')
voiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanAgingTime.setStatus('current')
telephonyOUITable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6), )
if mibBuilder.loadTexts: telephonyOUITable.setStatus('current')
telephonyOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "telephonyOUIIndex"))
if mibBuilder.loadTexts: telephonyOUIEntry.setStatus('current')
telephonyOUIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyOUIIndex.setStatus('current')
telephonyOUIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIAddress.setStatus('current')
telephonyOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIDescription.setStatus('current')
telephonyOUIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telephonyOUIRowStatus.setStatus('current')
telephonyOUIPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7), )
if mibBuilder.loadTexts: telephonyOUIPortTable.setStatus('current')
telephonyOUIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "telephonyOUIPortIndex"))
if mibBuilder.loadTexts: telephonyOUIPortEntry.setStatus('current')
telephonyOUIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyOUIPortIndex.setStatus('current')
telephonyOUIState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIState.setStatus('current')
telephonyOUICosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("src", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUICosMode.setStatus('current')
interfaceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6), )
if mibBuilder.loadTexts: interfaceVlanTable.setStatus('current')
interfaceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "interfaceVlanIndex"))
if mibBuilder.loadTexts: interfaceVlanEntry.setStatus('current')
interfaceVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceVlanIndex.setStatus('current')
interfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceVlanId.setStatus('current')
interfaceVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVlanName.setStatus('current')
interfaceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interfaceVlanRowStatus.setStatus('current')
eeePortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1), )
if mibBuilder.loadTexts: eeePortTable.setStatus('current')
eeePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "eeePortIndex"))
if mibBuilder.loadTexts: eeePortEntry.setStatus('current')
eeePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eeePortIndex.setStatus('current')
eeeState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeeState.setStatus('current')
unknownMulticastAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("flood", 2), ("routerPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownMulticastAction.setStatus('current')
forwardMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mac", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardMethod.setStatus('current')
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3))
igmpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingState.setStatus('current')
igmpSnoopingVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingVersion.setStatus('current')
igmpSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingReportSuppression.setStatus('current')
igmpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4), )
if mibBuilder.loadTexts: igmpSnoopingTable.setStatus('current')
igmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpSnoopingIndex"))
if mibBuilder.loadTexts: igmpSnoopingEntry.setStatus('current')
igmpSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingIndex.setStatus('current')
igmpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4904))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingVlanId.setStatus('current')
igmpSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
routerPortsAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerPortsAutoLearn.setStatus('current')
queryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryRobustness.setStatus('current')
queryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 18000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryInterval.setStatus('current')
queryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryMaxResponseInterval.setStatus('current')
lastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryCounter.setStatus('current')
lastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryInterval.setStatus('current')
immediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: immediateLeave.setStatus('current')
operQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryRobustness.setStatus('current')
operQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryInterval.setStatus('current')
operQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryMaxResponseInterval.setStatus('current')
operLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operLastMemberQueryCounter.setStatus('current')
operLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operLastMemberQueryInterval.setStatus('current')
igmpQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5), )
if mibBuilder.loadTexts: igmpQuerierTable.setStatus('current')
igmpQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpQuerierVlanId"))
if mibBuilder.loadTexts: igmpQuerierEntry.setStatus('current')
igmpQuerierVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierVlanId.setStatus('current')
igmpQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQuerierState.setStatus('current')
igmpQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierStatus.setStatus('current')
igmpQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQuerierVersion.setStatus('current')
igmpQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierIP.setStatus('current')
igmpStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6), )
if mibBuilder.loadTexts: igmpStaticGroupTable.setStatus('current')
igmpStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpStaticGroupIndex"))
if mibBuilder.loadTexts: igmpStaticGroupEntry.setStatus('current')
igmpStaticGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticGroupIndex.setStatus('current')
igmpStaticGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupVlanId.setStatus('current')
igmpStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupIPaddress.setStatus('current')
igmpStaticGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupMemberPorts.setStatus('current')
igmpStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticGroupRowStatus.setStatus('current')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpGroupVlanId"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
igmpGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupVlanId.setStatus('current')
igmpGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIPaddress.setStatus('current')
igmpGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupMemberPorts.setStatus('current')
igmpGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupType.setStatus('current')
igmpGroupLife = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupLife.setStatus('current')
igmpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8), )
if mibBuilder.loadTexts: igmpRouterTable.setStatus('current')
igmpRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpRouterVlanId"))
if mibBuilder.loadTexts: igmpRouterEntry.setStatus('current')
igmpRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterVlanId.setStatus('current')
igmpRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterPort.setStatus('current')
igmpRouterExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterExpireTime.setStatus('current')
mldSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4))
mldSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingState.setStatus('current')
mldSnoopingVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingVersion.setStatus('current')
mldSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingReportSuppression.setStatus('current')
mldSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4), )
if mibBuilder.loadTexts: mldSnoopingTable.setStatus('current')
mldSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldSnoopingIndex"))
if mibBuilder.loadTexts: mldSnoopingEntry.setStatus('current')
mldSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopingIndex.setStatus('current')
mldSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4904))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopingVlanId.setStatus('current')
mldSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopStatus.setStatus('current')
mldSnoopRouterPortsAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRouterPortsAutoLearn.setStatus('current')
mldSnoopQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryRobustness.setStatus('current')
mldSnoopQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 18000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryInterval.setStatus('current')
mldSnoopQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseInterval.setStatus('current')
mldSnoopLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopLastMemberQueryCounter.setStatus('current')
mldSnoopLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopLastMemberQueryInterval.setStatus('current')
mldSnoopImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopImmediateLeave.setStatus('current')
operMldSnoopQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryRobustness.setStatus('current')
operMldSnoopQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryInterval.setStatus('current')
operMldSnoopQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryMaxResponseInterval.setStatus('current')
operMldSnoopLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryCounter.setStatus('current')
operMldSnoopLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryInterval.setStatus('current')
mldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5), )
if mibBuilder.loadTexts: mldQuerierTable.setStatus('current')
mldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldQuerierVlanId"))
if mibBuilder.loadTexts: mldQuerierEntry.setStatus('current')
mldQuerierVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierVlanId.setStatus('current')
mldQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldQuerierState.setStatus('current')
mldQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierStatus.setStatus('current')
mldQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldQuerierVersion.setStatus('current')
mldQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierIP.setStatus('current')
mldStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6), )
if mibBuilder.loadTexts: mldStaticGroupTable.setStatus('current')
mldStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldStaticGroupIndex"))
if mibBuilder.loadTexts: mldStaticGroupEntry.setStatus('current')
mldStaticGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStaticGroupIndex.setStatus('current')
mldStaticGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupVlanId.setStatus('current')
mldStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupIPaddress.setStatus('current')
mldStaticGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupMemberPorts.setStatus('current')
mldStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldStaticGroupRowStatus.setStatus('current')
mldGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7), )
if mibBuilder.loadTexts: mldGroupTable.setStatus('current')
mldGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldGroupVlanId"))
if mibBuilder.loadTexts: mldGroupEntry.setStatus('current')
mldGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupVlanId.setStatus('current')
mldGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupIPaddress.setStatus('current')
mldGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupMemberPorts.setStatus('current')
mldGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupType.setStatus('current')
mldGroupLife = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupLife.setStatus('current')
mldRouterTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8), )
if mibBuilder.loadTexts: mldRouterTable.setStatus('current')
mldRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldRouterVlanId"))
if mibBuilder.loadTexts: mldRouterEntry.setStatus('current')
mldRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterVlanId.setStatus('current')
mldRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterPort.setStatus('current')
mldRouterExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterExpireTime.setStatus('current')
jamboFramePktSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jamboFramePktSize.setStatus('current')
stpEnable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEnable.setStatus('current')
bpduForward = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flooding", 1), ("filtering", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpduForward.setStatus('current')
pathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostMethod.setStatus('current')
forceVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp-compatible", 1), ("rstp-operation", 2), ("mstp-operation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceVersion.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpPortIndex"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortIndex.setStatus('current')
stpAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminEnable.setStatus('current')
stpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPathCost.setStatus('current')
stpEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEdgePort.setStatus('current')
stpP2pMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpP2pMac.setStatus('current')
stpMigrate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMigrate.setStatus('current')
stpBridgeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6))
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeTxHoldCount.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7))
bridgeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeIdentifier.setStatus('current')
definatedRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: definatedRootBridge.setStatus('current')
rootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPathCost.setStatus('current')
designatedBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedBridge.setStatus('current')
rootPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPort.setStatus('current')
lastTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTopologyChange.setStatus('current')
stpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8), )
if mibBuilder.loadTexts: stpPortStatusTable.setStatus('current')
stpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpPortStatusIndex"))
if mibBuilder.loadTexts: stpPortStatusEntry.setStatus('current')
stpPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortStatusIndex.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRootBridge.setStatus('current')
stpPortRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRootPathCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortEdgrPortConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortEdgrPortConf.setStatus('current')
stpPortP2PMacConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortP2PMacConf.setStatus('current')
stpPortRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("master", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRoles.setStatus('current')
stpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortStatus.setStatus('current')
stpStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9), )
if mibBuilder.loadTexts: stpStatisticTable.setStatus('current')
stpStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpStatisticPortIndex"))
if mibBuilder.loadTexts: stpStatisticEntry.setStatus('current')
stpStatisticPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpStatisticPortIndex.setStatus('current')
configurationBPDUsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBPDUsReceived.setStatus('current')
tcnBPDUsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcnBPDUsReceived.setStatus('current')
configurationBPDUsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBPDUsTransmitted.setStatus('current')
tcnBPDUsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcnBPDUsTransmitted.setStatus('current')
mstp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10))
mstConfigIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1))
mstConfigName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstConfigName.setStatus('current')
mstRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevisionLevel.setStatus('current')
mstInstanceID = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2))
mstiIDSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiIDSetting.setStatus('current')
mstiVlanListSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiVlanListSetting.setStatus('current')
mstiIDSettingMove = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("move", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiIDSettingMove.setStatus('current')
mstiIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4), )
if mibBuilder.loadTexts: mstiIDInfoTable.setStatus('current')
mstiIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mstiIDIndex"))
if mibBuilder.loadTexts: mstiIDInfoEntry.setStatus('current')
mstiIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstiIDIndex.setStatus('current')
mstiVLANList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstiVLANList.setStatus('current')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3))
stpPriorityInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1), )
if mibBuilder.loadTexts: stpPriorityInfoTable.setStatus('current')
stpPriorityInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpMstiIDIndex"))
if mibBuilder.loadTexts: stpPriorityInfoEntry.setStatus('current')
stpMstiIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMstiIDIndex.setStatus('current')
stpPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriorityValue.setStatus('current')
stpPriorityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriorityDefault.setStatus('current')
mstInstanceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4))
mstBridgeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstBridgeIdentifier.setStatus('current')
mstDesignatedRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstDesignatedRootBridge.setStatus('current')
mstRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstRootPathCost.setStatus('current')
mstDesignatedBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstDesignatedBridge.setStatus('current')
mstRootPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstRootPort.setStatus('current')
mstLastTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstLastTopologyChange.setStatus('current')
mstStpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7), )
if mibBuilder.loadTexts: mstStpPortStatusTable.setStatus('current')
mstStpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mstStpPortStatusIndex"))
if mibBuilder.loadTexts: mstStpPortStatusEntry.setStatus('current')
mstStpPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortStatusIndex.setStatus('current')
mstStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortPriority.setStatus('current')
mstStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortPathCost.setStatus('current')
mstStpPortDesignatedRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortDesignatedRootBridge.setStatus('current')
mstStpPortRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortRootPathCost.setStatus('current')
mstStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortDesignatedBridge.setStatus('current')
mstStpPortEdgrPortConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortEdgrPortConf.setStatus('current')
mstStpPortP2PMacConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortP2PMacConf.setStatus('current')
mstStpPortRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortRoles.setStatus('current')
mstStpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortStatus.setStatus('current')
mstInstanceInfoID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceInfoID.setStatus('current')
outerVlanEthtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outerVlanEthtype.setStatus('current')
qinqPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2), )
if mibBuilder.loadTexts: qinqPortInfoTable.setStatus('current')
qinqPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qinqPortIndex"))
if mibBuilder.loadTexts: qinqPortInfoEntry.setStatus('current')
qinqPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqPortIndex.setStatus('current')
qinqOuterPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterPVID.setStatus('current')
qinqOuterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterMode.setStatus('current')
garpJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpJoinTime.setStatus('current')
garpLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpLeaveTime.setStatus('current')
garpLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 12000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpLeaveAllTime.setStatus('current')
gvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpStatus.setStatus('current')
xRingEliteState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteState.setStatus('current')
xRingEliteRingIDTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2), )
if mibBuilder.loadTexts: xRingEliteRingIDTable.setStatus('current')
xRingEliteRingIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "xRingEliteRingIDIndex"))
if mibBuilder.loadTexts: xRingEliteRingIDEntry.setStatus('current')
xRingEliteRingIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingEliteRingIDIndex.setStatus('current')
xRingEliteRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteRingID.setStatus('current')
xRingEliteRule = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("basic", 1), ("couple", 2), ("tunnel", 3), ("mrm", 4), ("mrc", 5), ("legacy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteRule.setStatus('current')
xRingElitePort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingElitePort1.setStatus('current')
xRingElitePort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingElitePort2.setStatus('current')
xRingEliteRingIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingEliteRingIDStatus.setStatus('current')
xRingElitePort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingElitePort1Status.setStatus('current')
xRingElitePort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingElitePort2Status.setStatus('current')
xRingEliteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xRingEliteRowStatus.setStatus('current')
loopbackEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackEnabled.setStatus('current')
loopbackInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackInterval.setStatus('current')
loopbackRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1000000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackRecoverTime.setStatus('current')
loopbackPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4), )
if mibBuilder.loadTexts: loopbackPortTable.setStatus('current')
loopbackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loopbackPortIndex"))
if mibBuilder.loadTexts: loopbackPortEntry.setStatus('current')
loopbackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackPortIndex.setStatus('current')
loopbackPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackPortEnabled.setStatus('current')
loopbackPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackPortLoopStatus.setStatus('current')
xRingProStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProStatus.setStatus('current')
xRingProRingSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2))
xRingProRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingID.setStatus('current')
xRingProRingPort1 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingPort1.setStatus('current')
xRingProRingPort2 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingPort2.setStatus('current')
xRingProRingAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingAdd.setStatus('current')
xRingProCoupleSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3))
xRingProCoupleID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleID.setStatus('current')
xRingProCouplePort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCouplePort.setStatus('current')
xRingProCoupleMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleMasterRingID.setStatus('current')
xRingProCoupleAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleAdd.setStatus('current')
xRingProInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4), )
if mibBuilder.loadTexts: xRingProInfoTable.setStatus('current')
xRingProInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "xRingProInfoRingID"))
if mibBuilder.loadTexts: xRingProInfoEntry.setStatus('current')
xRingProInfoRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoRingID.setStatus('current')
xRingProInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoMode.setStatus('current')
xRingProInfoOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoOperState.setStatus('current')
xRingProInfoPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort1.setStatus('current')
xRingProInfoPort1FwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort1FwdState.setStatus('current')
xRingProInfoPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort2.setStatus('current')
xRingProInfoPort2FwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort2FwdState.setStatus('current')
xRingProInfoDel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProInfoDel.setStatus('current')
xRingProInfoRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("member", 0), ("head", 1), ("tail", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoRole.setStatus('current')
xRingProPairSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5))
xRingProPairID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairID.setStatus('current')
xRingProPairPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairPort.setStatus('current')
xRingProPairMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairMasterRingID.setStatus('current')
xRingProPairAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairAdd.setStatus('current')
xRingProRPairSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6))
xRingProRPairID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairID.setStatus('current')
xRingProRPairPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairPort.setStatus('current')
xRingProRPairMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairMasterRingID.setStatus('current')
xRingProRPairAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairAdd.setStatus('current')
xRingProChainSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7))
xRingProChainID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainID.setStatus('current')
xRingProChainRole = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("member", 0), ("head", 1), ("tail", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainRole.setStatus('current')
xRingProChainHeadPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainHeadPort.setStatus('current')
xRingProChainMemberPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainMemberPort.setStatus('current')
xRingProChainAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainAdd.setStatus('current')
gmrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmrpStatus.setStatus('current')
gmrpMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2), )
if mibBuilder.loadTexts: gmrpMulticastGroupTable.setStatus('current')
gmrpMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "gmrpMulticastGroupVlanId"))
if mibBuilder.loadTexts: gmrpMulticastGroupEntry.setStatus('current')
gmrpMulticastGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupIndex.setStatus('current')
gmrpMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupVlanId.setStatus('current')
gmrpMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupMacAddress.setStatus('current')
gmrpMulticastGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupType.setStatus('current')
gmrpMulticastGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupMemberPorts.setStatus('current')
erpsState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsState.setStatus('current')
erpsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2), )
if mibBuilder.loadTexts: erpsGroupTable.setStatus('current')
erpsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "erpsGroupRingId"))
if mibBuilder.loadTexts: erpsGroupEntry.setStatus('current')
erpsGroupRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupRingIndex.setStatus('current')
erpsGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupInstance.setStatus('current')
erpsGroupRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRingId.setStatus('current')
erpsGroupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rplowner", 0), ("rplneighbor", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRole.setStatus('current')
erpsGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupState.setStatus('current')
erpsGroupEastLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupEastLink.setStatus('current')
erpsGroupEastLinkRPL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpl", 1), ("n-rpl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupEastLinkRPL.setStatus('current')
erpsGroupEastLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupEastLinkState.setStatus('current')
erpsGroupWestLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupWestLink.setStatus('current')
erpsGroupWestLinkRPL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpl", 1), ("n-rpl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupWestLinkRPL.setStatus('current')
erpsGroupWestLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupWestLinkState.setStatus('current')
erpsGroupMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupMEL.setStatus('current')
erpsGroupRAPSChannelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRAPSChannelVlan.setStatus('current')
erpsGroupTrafficChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupTrafficChannel.setStatus('current')
erpsGroupRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("none-revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRevertive.setStatus('current')
erpsGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("majorRing", 1), ("subRing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupType.setStatus('current')
erpsGroupInterconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interconnected", 1), ("none-interconnected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupInterconnected.setStatus('current')
erpsGroupChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("with-virtual-channel", 1), ("without-virtual-channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupChannel.setStatus('current')
erpsGroupTcPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tc-propagation", 1), ("none-tc-propagation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupTcPropagation.setStatus('current')
erpsWTRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsWTRTimer.setStatus('current')
erpsGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGuardTimer.setStatus('current')
erpsHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsHoldOffTimer.setStatus('current')
erpsGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: erpsGroupRowStatus.setStatus('current')
staticMacSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1))
dynamicMacSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 2))
dynamicLearned = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3))
staticMacSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1), )
if mibBuilder.loadTexts: staticMacSettingTable.setStatus('current')
staticMacSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "staticMacSettingIndex"))
if mibBuilder.loadTexts: staticMacSettingEntry.setStatus('current')
staticMacSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMacSettingIndex.setStatus('current')
staticMacSettingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingMacAddress.setStatus('current')
staticMacSettingVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingVlan.setStatus('current')
staticMacSettingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingPort.setStatus('current')
staticMacSettingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMacSettingRowStatus.setStatus('current')
macAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 630))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAgingTime.setStatus('current')
clearMacAddressTable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearMacAddressTable.setStatus('current')
macAddressInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2), )
if mibBuilder.loadTexts: macAddressInfoTable.setStatus('current')
macAddressInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "macAddressInfoIndex"))
if mibBuilder.loadTexts: macAddressInfoEntry.setStatus('current')
macAddressInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoIndex.setStatus('current')
macAddressInfoMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoMAC.setStatus('current')
macAddressInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoVlan.setStatus('current')
macAddressInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoType.setStatus('current')
macAddressInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoPort.setStatus('current')
addtoStaticMacTable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("addtoStaticMac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addtoStaticMacTable.setStatus('current')
stormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1))
protectedPort = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2))
dos = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4))
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5))
ipSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6))
ieee8021x = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7))
securityLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8))
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9))
ipSourceGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10))
dhcpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11))
arpSpoofing = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12))
stromControlUnit = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("bps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlUnit.setStatus('current')
stromControlPreamble_IFG = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("excluded", 1), ("included", 2)))).setLabel("stromControlPreamble-IFG").setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPreamble_IFG.setStatus('current')
stromControlPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3), )
if mibBuilder.loadTexts: stromControlPortTable.setStatus('current')
stromControlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stromControlPortIndex"))
if mibBuilder.loadTexts: stromControlPortEntry.setStatus('current')
stromControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stromControlPortIndex.setStatus('current')
stromControlPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPortState.setStatus('current')
stromControlPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPortAction.setStatus('current')
enablebroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablebroadcast.setStatus('current')
broadcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastRate.setStatus('current')
enableunknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableunknownMulticast.setStatus('current')
unknownMulticastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownMulticastRate.setStatus('current')
enableunknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableunknownUnicast.setStatus('current')
unknownUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUnicastRate.setStatus('current')
protectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1), )
if mibBuilder.loadTexts: protectedPortTable.setStatus('current')
protectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "protectedPortIndex"))
if mibBuilder.loadTexts: protectedPortEntry.setStatus('current')
protectedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectedPortIndex.setStatus('current')
protectedPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unprotected", 1), ("porotected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectedPortType.setStatus('current')
dmacEqualsmac = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmacEqualsmac.setStatus('current')
land = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: land.setStatus('current')
udpBlat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBlat.setStatus('current')
tcpBlat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpBlat.setStatus('current')
pod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pod.setStatus('current')
ipv6MinFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MinFragment.setStatus('current')
ipv6MinFragmentValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MinFragmentValue.setStatus('current')
icmpFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpFragment.setStatus('current')
ipv4PingMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4PingMaxSize.setStatus('current')
ipv6PingMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PingMaxSize.setStatus('current')
pingMaxSizeSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingMaxSizeSetting.setStatus('current')
smurfAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smurfAttack.setStatus('current')
smurfAttackValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smurfAttackValue.setStatus('current')
tcpMinHdrSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpMinHdrSize.setStatus('current')
tcpMinHdrSizeValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpMinHdrSizeValue.setStatus('current')
tcp_Syn = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcp-Syn").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcp_Syn.setStatus('current')
nullScanAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nullScanAttack.setStatus('current')
xMasScanAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xMasScanAttack.setStatus('current')
tcpSYN_FINAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcpSYN-FINAttack").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpSYN_FINAttack.setStatus('current')
tcpSYN_RSTAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcpSYN-RSTAttack").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpSYN_RSTAttack.setStatus('current')
tcpFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFragment.setStatus('current')
dosPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22), )
if mibBuilder.loadTexts: dosPortTable.setStatus('current')
dosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dosportIndex"))
if mibBuilder.loadTexts: dosPortEntry.setStatus('current')
dosportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosportIndex.setStatus('current')
dosProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosProtection.setStatus('current')
telnetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1))
telnetService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetService.setStatus('current')
currentTelnetSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTelnetSessionCount.setStatus('current')
httpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2))
httpService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpService.setStatus('current')
httpSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpSessionTimeout.setStatus('current')
httpsSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3))
httpsService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsService.setStatus('current')
httpsSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsSessionTimeout.setStatus('current')
sshInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 4))
sshService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshService.setStatus('current')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portSecurityPortIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
portSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityPortIndex.setStatus('current')
portSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityEnabled.setStatus('current')
portSecurityFDBLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityFDBLimit.setStatus('current')
portSecurityViolationMACNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityViolationMACNotify.setStatus('current')
ipSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityStatus.setStatus('current')
ipSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2), )
if mibBuilder.loadTexts: ipSecurityTable.setStatus('current')
ipSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipSecurityIndex"))
if mibBuilder.loadTexts: ipSecurityEntry.setStatus('current')
ipSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecurityIndex.setStatus('current')
ipSecurityIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityIPAddr.setStatus('current')
ipSecurityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityIPMask.setStatus('current')
ipSecurityService = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 4), Bits().clone(namedValues=NamedValues(("ping", 0), ("http", 1), ("telnet", 2), ("ssh", 3), ("snmp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityService.setStatus('current')
ipSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityVlanId.setStatus('current')
ipSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityRowStatus.setStatus('current')
ieee8021xState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xState.setStatus('current')
ieee8021xServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xServerIP.setStatus('current')
ieee8021xServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xServerPort.setStatus('current')
ieee8021xAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xAccountingPort.setStatus('current')
ieee8021xSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xSecurityKey.setStatus('current')
ieee8021xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xReauthPeriod.setStatus('current')
ieee8021xPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7), )
if mibBuilder.loadTexts: ieee8021xPortTable.setStatus('current')
ieee8021xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ieee8021xPortIndex"))
if mibBuilder.loadTexts: ieee8021xPortEntry.setStatus('current')
ieee8021xPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021xPortIndex.setStatus('current')
ieee8021xPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorize", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xPortState.setStatus('current')
ieee8021xAuthBased = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("mac", 2), ("mac-auth-bypass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xAuthBased.setStatus('current')
securityLoginState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginState.setStatus('current')
radiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2))
radiusServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIP.setStatus('current')
radiusServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPort.setStatus('current')
radiusServerSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSecurityKey.setStatus('current')
tacacsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3))
tacacsServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerIP.setStatus('current')
tacacsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPort.setStatus('current')
tacacsServerSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerSecurityKey.setStatus('current')
securityLoginType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("radius", 1), ("tacacs", 2), ("radiusAndtacacs", 3), ("radiusAndtacacsAndweb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginType.setStatus('current')
securityLoginHttpState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginHttpState.setStatus('current')
securityLoginTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginTelnetState.setStatus('current')
securityLoginSSHState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginSSHState.setStatus('current')
macAclTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1), )
if mibBuilder.loadTexts: macAclTable.setStatus('current')
macAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "macAclIndex"))
if mibBuilder.loadTexts: macAclEntry.setStatus('current')
macAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclIndex.setStatus('current')
destinationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationMacAddress.setStatus('current')
destinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationMacMask.setStatus('current')
sourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMacAddress.setStatus('current')
sourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMacMask.setStatus('current')
macAclEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclEtherType.setStatus('current')
macAclVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclVlanID.setStatus('current')
macAclPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 8), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclPortList.setStatus('current')
macAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclAction.setStatus('current')
macAclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclActiveStatus.setStatus('current')
macAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAclRowStatus.setStatus('current')
ipAclTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2), )
if mibBuilder.loadTexts: ipAclTable.setStatus('current')
ipAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipAclIndex"))
if mibBuilder.loadTexts: ipAclEntry.setStatus('current')
ipAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclIndex.setStatus('current')
destinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationIpAddress.setStatus('current')
destinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationIpMask.setStatus('current')
sourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpAddress.setStatus('current')
sourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpMask.setStatus('current')
ipProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("tcp", 3), ("udp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipProtocol.setStatus('current')
l4DestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l4DestinationPort.setStatus('current')
l4SourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l4SourcePort.setStatus('current')
ipAclPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 9), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclPortList.setStatus('current')
ipAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclAction.setStatus('current')
ipAclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclActiveStatus.setStatus('current')
ipAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclRowStatus.setStatus('current')
ipSourceGuardEnablePorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 1), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardEnablePorts.setStatus('current')
ipSourceGuardTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2), )
if mibBuilder.loadTexts: ipSourceGuardTable.setStatus('current')
ipSourceGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipSourceGuardIndex"))
if mibBuilder.loadTexts: ipSourceGuardEntry.setStatus('current')
ipSourceGuardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSourceGuardIndex.setStatus('current')
ipSourceGuardSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardSourceIp.setStatus('current')
ipSourceGuardSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardSourceMac.setStatus('current')
ipSourceGuardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardPort.setStatus('current')
ipSourceGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSourceGuardRowStatus.setStatus('current')
dhcpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingState.setStatus('current')
dhcpSnoopingPorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPorts.setStatus('current')
dhcpSnoopingBindingPorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 3), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingPorts.setStatus('current')
dhcpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4), )
if mibBuilder.loadTexts: dhcpSnoopingTable.setStatus('current')
dhcpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpSnoopingIndex"))
if mibBuilder.loadTexts: dhcpSnoopingEntry.setStatus('current')
dhcpSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingIndex.setStatus('current')
dhcpSnoopingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingMac.setStatus('current')
dhcpSnoopingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingIp.setStatus('current')
dhcpSnoopingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 864000))).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingLeaseTime.setStatus('current')
dhcpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingVlanId.setStatus('current')
dhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPort.setStatus('current')
arpSpoofingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1), )
if mibBuilder.loadTexts: arpSpoofingTable.setStatus('current')
arpSpoofingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "arpSpoofingIndex"))
if mibBuilder.loadTexts: arpSpoofingEntry.setStatus('current')
arpSpoofingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpSpoofingIndex.setStatus('current')
arpSpoofingSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpSpoofingSourceMac.setStatus('current')
arpSpoofingSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpSpoofingSourceIp.setStatus('current')
arpSpoofingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSpoofingRowStatus.setStatus('current')
general = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1))
qosBasicMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2))
rateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3))
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
qosPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2), )
if mibBuilder.loadTexts: qosPortSettingTable.setStatus('current')
qosPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosPortSettingEntry.setStatus('current')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortIndex.setStatus('current')
qosPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortCos.setStatus('current')
qosPortRemarkCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkCoS.setStatus('current')
qosPortRemarkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkDSCP.setStatus('current')
qosPortRemarkIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkIPPrecedence.setStatus('current')
queueSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3), )
if mibBuilder.loadTexts: queueSettingTable.setStatus('current')
queueSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queueIndex"))
if mibBuilder.loadTexts: queueSettingEntry.setStatus('current')
queueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueIndex.setStatus('current')
queueMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueMethod.setStatus('current')
queueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueWeight.setStatus('current')
queuePercentOfWRRBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePercentOfWRRBandwidth.setStatus('current')
costoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4), )
if mibBuilder.loadTexts: costoQueueMapTable.setStatus('current')
costoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "cosIndex"))
if mibBuilder.loadTexts: costoQueueMapEntry.setStatus('current')
cosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosIndex.setStatus('current')
cosQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosQueue.setStatus('current')
queuetoCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5), )
if mibBuilder.loadTexts: queuetoCosMapTable.setStatus('current')
queuetoCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queuetoCosIndex"))
if mibBuilder.loadTexts: queuetoCosMapEntry.setStatus('current')
queuetoCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuetoCosIndex.setStatus('current')
queueCos = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueCos.setStatus('current')
dscptoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6), )
if mibBuilder.loadTexts: dscptoQueueMapTable.setStatus('current')
dscptoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dscpIndex"))
if mibBuilder.loadTexts: dscptoQueueMapEntry.setStatus('current')
dscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpIndex.setStatus('current')
dscpQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpQueue.setStatus('current')
queuetoDSCPMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7), )
if mibBuilder.loadTexts: queuetoDSCPMapTable.setStatus('current')
queuetoDSCPMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queuetoDSCPIndex"))
if mibBuilder.loadTexts: queuetoDSCPMapEntry.setStatus('current')
queuetoDSCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuetoDSCPIndex.setStatus('current')
queuDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuDscp.setStatus('current')
ipPrecedencetoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8), )
if mibBuilder.loadTexts: ipPrecedencetoQueueMapTable.setStatus('current')
ipPrecedencetoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipPrecedenceIndex"))
if mibBuilder.loadTexts: ipPrecedencetoQueueMapEntry.setStatus('current')
ipPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPrecedenceIndex.setStatus('current')
ipPrecedenceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrecedenceQueue.setStatus('current')
queueToipPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9), )
if mibBuilder.loadTexts: queueToipPrecedenceMapTable.setStatus('current')
queueToipPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queueToipPrecedenceIndex"))
if mibBuilder.loadTexts: queueToipPrecedenceMapEntry.setStatus('current')
queueToipPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueToipPrecedenceIndex.setStatus('current')
ipPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrecedence.setStatus('current')
trustMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cos-8021p", 1), ("dscp", 2), ("cos8021p-dscp", 3), ("ip-precendence", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustMode.setStatus('current')
qosBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2), )
if mibBuilder.loadTexts: qosBasicPortTable.setStatus('current')
qosBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qosBasicPortIndex"))
if mibBuilder.loadTexts: qosBasicPortEntry.setStatus('current')
qosBasicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosBasicPortIndex.setStatus('current')
qosBasicPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBasicPortTrust.setStatus('current')
ingressBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1))
ingressBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1), )
if mibBuilder.loadTexts: ingressBandwidthTable.setStatus('current')
ingressBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ingressBandwidthPortIndex"))
if mibBuilder.loadTexts: ingressBandwidthEntry.setStatus('current')
ingressBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingressBandwidthPortIndex.setStatus('current')
ingressBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressBandwidthState.setStatus('current')
ingressBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressBandwidthRate.setStatus('current')
egressBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2))
egressBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1), )
if mibBuilder.loadTexts: egressBandwidthTable.setStatus('current')
egressBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "egressBandwidthPortIndex"))
if mibBuilder.loadTexts: egressBandwidthEntry.setStatus('current')
egressBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressBandwidthPortIndex.setStatus('current')
egressBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressBandwidthState.setStatus('current')
egressBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressBandwidthRate.setStatus('current')
egressQueueBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3))
egressqueueBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1), )
if mibBuilder.loadTexts: egressqueueBandwidthTable.setStatus('current')
egressqueueBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "egressqueueBandwidthPortIndex"))
if mibBuilder.loadTexts: egressqueueBandwidthEntry.setStatus('current')
egressqueueBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressqueueBandwidthPortIndex.setStatus('current')
egressqueueBandwidthQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressqueueBandwidthQueueIndex.setStatus('current')
egressqueueBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressqueueBandwidthState.setStatus('current')
egressqueueBandwidthCir = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressqueueBandwidthCir.setStatus('current')
lldp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2))
poe = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3))
tcpModbus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4))
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5))
smtpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6))
rmon = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7))
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8))
lldpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpEnabled.setStatus('current')
lldpPduDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filtering", 1), ("bridging", 2), ("flooding", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPduDisableAction.setStatus('current')
lldpTransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTransmissionInterval.setStatus('current')
lldpHoldtimeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpHoldtimeMultiplier.setStatus('current')
lldpReinitializationDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpReinitializationDelay.setStatus('current')
lldpTransmitDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTransmitDelay.setStatus('current')
lldpPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7), )
if mibBuilder.loadTexts: lldpPortConfTable.setStatus('current')
lldpPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpPortIndex"))
if mibBuilder.loadTexts: lldpPortConfEntry.setStatus('current')
lldpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortIndex.setStatus('current')
lldpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("rx-only", 2), ("tx-only", 3), ("rx-tx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortState.setStatus('current')
lldpPortOptionalTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 3), Bits().clone(namedValues=NamedValues(("systemName", 0), ("portDescription", 1), ("systemDescription", 2), ("systemCapability", 3), ("ieee8023MAC-PHY", 4), ("ieee8023LinkAggeration", 5), ("ieee8023MaxFrameSize", 6), ("managementAddress", 7), ("ieee8021PVID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortOptionalTLVs.setStatus('current')
lldpPortVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortVlans.setStatus('current')
localDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8))
lldpLocalDeviceChassisidsubtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceChassisidsubtype.setStatus('current')
lldpLocalDeviceChassisID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceChassisID.setStatus('current')
lldpLocalDeviceSystemName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceSystemName.setStatus('current')
lldpLocalDeviceSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceSystemDescription.setStatus('current')
lldpLocalDeviceCapabilitiesSupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesSupported.setStatus('current')
lldpLocalDeviceCapabilitiesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesEnabled.setStatus('current')
lldpLocalDevicePortIDsubtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDevicePortIDsubtype.setStatus('current')
lldpLocalPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8), )
if mibBuilder.loadTexts: lldpLocalPortStatusTable.setStatus('current')
lldpLocalPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpLocalPortIndex"))
if mibBuilder.loadTexts: lldpLocalPortStatusEntry.setStatus('current')
lldpLocalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIndex.setStatus('current')
lldpLocalPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("rx-only", 2), ("tx-only", 3), ("rx-tx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortStatus.setStatus('current')
lldpLocalPortChassisIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortChassisIDsubtype.setStatus('current')
lldpLocalPortChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortChassisID.setStatus('current')
lldpLocalPortSystemname = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSystemname.setStatus('current')
lldpLocalPortSystemdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSystemdescription.setStatus('current')
lldpLocalPortSupportedsystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSupportedsystemcapabilities.setStatus('current')
lldpLocalPortEnablesystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortEnablesystemcapabilities.setStatus('current')
lldpLocalPortIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIDsubtype.setStatus('current')
lldpLocalPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortID.setStatus('current')
lldpLocalPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortDescription.setStatus('current')
lldpLocalPortManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortManagementAddress.setStatus('current')
lldpLocalPortAuto_negosupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 13), DisplayString()).setLabel("lldpLocalPortAuto-negosupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negosupported.setStatus('current')
lldpLocalPortAuto_negoenabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 14), DisplayString()).setLabel("lldpLocalPortAuto-negoenabled").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negoenabled.setStatus('current')
lldpLocalPortAuto_negoAdvertisedCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 15), DisplayString()).setLabel("lldpLocalPortAuto-negoAdvertisedCapabilities").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negoAdvertisedCapabilities.setStatus('current')
lldpLocalPortOperationMAUtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortOperationMAUtype.setStatus('current')
lldpLocalPortIeee8023MaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIeee8023MaxFrameSize.setStatus('current')
lldpLocalPortAggregationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationCapability.setStatus('current')
lldpLocalPortAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationStatus.setStatus('current')
lldpLocalPortAggregationPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationPortID.setStatus('current')
lldpLocalPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortPvid.setStatus('current')
lldpLocalPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortVlanName.setStatus('current')
remoteDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9))
lldpremoteDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1), )
if mibBuilder.loadTexts: lldpremoteDeviceTable.setStatus('current')
lldpremoteDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpremoteDeviceIndex"))
if mibBuilder.loadTexts: lldpremoteDeviceEntry.setStatus('current')
lldpremoteDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceIndex.setStatus('current')
lldpremoteDeviceLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceLocalPort.setStatus('current')
lldpremoteDeviceChassisIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceChassisIDsubtype.setStatus('current')
lldpremoteDeviceChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceChassisID.setStatus('current')
lldpremoteDevicePortIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortIDsubtype.setStatus('current')
lldpremoteDevicePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortID.setStatus('current')
lldpremoteDeviceSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSystemName.setStatus('current')
lldpremoteDeviceTimetolive = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceTimetolive.setStatus('current')
lldpremoteDeviceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceEntryIndex.setStatus('current')
lldpremoteDevicePortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortDescription.setStatus('current')
lldpremoteDeviceSystemdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSystemdescription.setStatus('current')
lldpremoteDeviceSupportedsystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSupportedsystemcapabilities.setStatus('current')
lldpremoteDeviceEnablesystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceEnablesystemcapabilities.setStatus('current')
lldpremoteDeviceManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceManagementAddress.setStatus('current')
lldpremoteDeviceAuto_negosupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 15), DisplayString()).setLabel("lldpremoteDeviceAuto-negosupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negosupported.setStatus('current')
lldpremoteDeviceAuto_negoenabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 16), DisplayString()).setLabel("lldpremoteDeviceAuto-negoenabled").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoenabled.setStatus('current')
lldpremoteDeviceAuto_negoAdvertisedCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 17), DisplayString()).setLabel("lldpremoteDeviceAuto-negoAdvertisedCapabilities").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoAdvertisedCapabilities.setStatus('current')
lldpremoteDeviceOperationMAUtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceOperationMAUtype.setStatus('current')
lldpremoteDeviceMdipowersupportportclass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceMdipowersupportportclass.setStatus('current')
lldpremoteDevicePsemdipowersupport = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowersupport.setStatus('current')
lldpremoteDevicePsemdipowerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowerstatus.setStatus('current')
lldpremoteDevicePsepowerpaircontrolability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpaircontrolability.setStatus('current')
lldpremoteDevicePsepowerpair = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpair.setStatus('current')
lldpremoteDevicePsepowerclass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerclass.setStatus('current')
lldpremoteDeviceIeee8023MaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceIeee8023MaxFrameSize.setStatus('current')
lldpremoteDeviceAggregationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationCapability.setStatus('current')
lldpremoteDeviceAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationStatus.setStatus('current')
lldpremoteDeviceAggregationPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationPortID.setStatus('current')
lldpremoteDevicePvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePvid.setStatus('current')
lldpremoteDeviceVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceVlanName.setStatus('current')
lldpremoteDeviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("desroty", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpremoteDeviceRowStatus.setStatus('current')
lldpOverloadingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10), )
if mibBuilder.loadTexts: lldpOverloadingTable.setStatus('current')
lldpOverloadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpOverloadingPortIndex"))
if mibBuilder.loadTexts: lldpOverloadingEntry.setStatus('current')
lldpOverloadingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingPortIndex.setStatus('current')
lldpOverloadingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingTotal.setStatus('current')
lldpOverloadingLeftToSend = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingLeftToSend.setStatus('current')
lldpOverloadingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingStatus.setStatus('current')
lldpOverloadingMandatoryTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingMandatoryTLVs.setStatus('current')
lldpOverloadingIeee8023TLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingIeee8023TLVs.setStatus('current')
lldpOverloadingOptionalTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingOptionalTLVs.setStatus('current')
lldpOverloadingIeee8021TLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingIeee8021TLVs.setStatus('current')
snmpState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpState.setStatus('current')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityIndex.setStatus('current')
snmpCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityString.setStatus('current')
snmpCommunityAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ro", 1), ("rw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityAccessRight.setStatus('current')
snmpCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpCommunityRowStatus.setStatus('current')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
snmpTrapHostIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostIpaddress.setStatus('current')
snmpTrapHostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostCommunityName.setStatus('current')
snmpTrapHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2cTrap", 2), ("v2cInform", 3), ("v3Trap", 4), ("v3Inform", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostVersion.setStatus('current')
snmpTrapHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapHostRowStatus.setStatus('current')
snmpv3UserTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4), )
if mibBuilder.loadTexts: snmpv3UserTable.setStatus('current')
snmpv3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpv3UserIndex"))
if mibBuilder.loadTexts: snmpv3UserEntry.setStatus('current')
snmpv3UserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UserIndex.setStatus('current')
snmpv3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserName.setStatus('current')
snmpv3UserAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readonly", 1), ("readwrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAccessRight.setStatus('current')
snmpv3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAuthProtocol.setStatus('current')
snmpv3UserAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAuthPassword.setStatus('current')
snmpv3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserPrivProtocol.setStatus('current')
snmpv3UserPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserPrivPassword.setStatus('current')
snmpv3UserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpv3UserRowStatus.setStatus('current')
snmpv3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3EngineID.setStatus('current')
poeSystemSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1))
poeFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeFwVersion.setStatus('current')
poeMaxPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeMaxPowerAvailable.setStatus('current')
poeActualPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 3), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: poeActualPowerConsumption.setStatus('current')
poeOverLoadDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overload-port-first", 1), ("port-based-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeOverLoadDisconnect.setStatus('current')
poePortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2), )
if mibBuilder.loadTexts: poePortSettingTable.setStatus('current')
poePortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortSettingEntry.setStatus('current')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
poePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortState.setStatus('current')
poePortLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortLegacy.setStatus('current')
poePortPowerLimitClass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerLimitClass.setStatus('current')
poePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPriority.setStatus('current')
poePortPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('mW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerLimit.setStatus('current')
poePortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3), )
if mibBuilder.loadTexts: poePortStatusTable.setStatus('current')
poePortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "poePortStatusIndex"))
if mibBuilder.loadTexts: poePortStatusEntry.setStatus('current')
poePortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatusIndex.setStatus('current')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 2), DisplayString()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 3), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 4), DisplayString()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
poePortTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 5), DisplayString()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortTemp.setStatus('current')
tcpModbusState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpModbusState.setStatus('current')
tcpModbusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpModbusTimeout.setStatus('current')
dhcpServerState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerState.setStatus('current')
dhcpServerGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2))
dhcpServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 864000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerLeaseTime.setStatus('current')
dhcpServerLowIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerLowIP.setStatus('current')
dhcpServerHighIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerHighIP.setStatus('current')
dhcpServerSubmask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerSubmask.setStatus('current')
dhcpServerGateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerGateway.setStatus('current')
dhcpServerDNS = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDNS.setStatus('current')
dhcpServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStatus.setStatus('current')
dhcpServerClearIpPool = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClearIpPool.setStatus('current')
dhcpServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3), )
if mibBuilder.loadTexts: dhcpServerPortTable.setStatus('current')
dhcpServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerPortIndex"))
if mibBuilder.loadTexts: dhcpServerPortEntry.setStatus('current')
dhcpServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerPortIndex.setStatus('current')
dhcpServerPortLowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortLowIP.setStatus('current')
dhcpServerPortHighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortHighIP.setStatus('current')
dhcpServerPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortMask.setStatus('current')
dhcpServerPortGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortGW.setStatus('current')
dhcpServerPortDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortDNS.setStatus('current')
dhcpServerPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortStatus.setStatus('current')
dhcpServerPortClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortClear.setStatus('current')
dhcpServerOpt82Table = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4), )
if mibBuilder.loadTexts: dhcpServerOpt82Table.setStatus('current')
dhcpServerOpt82Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerOpt82Index"))
if mibBuilder.loadTexts: dhcpServerOpt82Entry.setStatus('current')
dhcpServerOpt82Index = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerOpt82Index.setStatus('current')
dhcpServerOpt82CircuitIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82CircuitIDFormat.setStatus('current')
dhcpServerOpt82CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82CircuitID.setStatus('current')
dhcpServerOpt82RemoteIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82RemoteIDFormat.setStatus('current')
dhcpServerOpt82RemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82RemoteID.setStatus('current')
dhcpServerOpt82LowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82LowIP.setStatus('current')
dhcpServerOpt82HighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82HighIP.setStatus('current')
dhcpServerOpt82Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Mask.setStatus('current')
dhcpServerOpt82GW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82GW.setStatus('current')
dhcpServerOpt82DNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82DNS.setStatus('current')
dhcpServerOpt82Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Status.setStatus('current')
dhcpServerOpt82Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Clear.setStatus('current')
dhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5), )
if mibBuilder.loadTexts: dhcpServerLeaseTable.setStatus('current')
dhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerLeaseIndex"))
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setStatus('current')
dhcpServerLeaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseIndex.setStatus('current')
dhcpServerLeaseIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseIp.setStatus('current')
dhcpServerLeaseClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseClientMac.setStatus('current')
dhcpServerLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseStartTime.setStatus('current')
dhcpServerLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseEndTime.setStatus('current')
dhcpServerLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseType.setStatus('current')
dhcpServerRestart = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerRestart.setStatus('current')
dhcpServerVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7), )
if mibBuilder.loadTexts: dhcpServerVlanTable.setStatus('current')
dhcpServerVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerVlanIndex"))
if mibBuilder.loadTexts: dhcpServerVlanEntry.setStatus('current')
dhcpServerVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerVlanIndex.setStatus('current')
dhcpServerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanId.setStatus('current')
dhcpServerVlanLowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanLowIP.setStatus('current')
dhcpServerVlanHighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanHighIP.setStatus('current')
dhcpServerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanMask.setStatus('current')
dhcpServerVlanGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanGW.setStatus('current')
dhcpServerVlanDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanDNS.setStatus('current')
dhcpServerVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanStatus.setStatus('current')
dhcpServerVlanClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanClear.setStatus('current')
dhcpServerClientMacTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8), )
if mibBuilder.loadTexts: dhcpServerClientMacTable.setStatus('current')
dhcpServerClientMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerClientMacEntryID"))
if mibBuilder.loadTexts: dhcpServerClientMacEntry.setStatus('current')
dhcpServerClientMacEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryID.setStatus('current')
dhcpServerClientMacEntryMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryMac.setStatus('current')
dhcpServerClientMacEntryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryIP.setStatus('current')
dhcpServerClientMacEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryMask.setStatus('current')
dhcpServerClientMacEntryGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryGW.setStatus('current')
dhcpServerClientMacEntryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryDNS.setStatus('current')
dhcpServerClientMacEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerClientMacEntryRowStatus.setStatus('current')
smtpActiveProfile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpActiveProfile.setStatus('current')
smtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2), )
if mibBuilder.loadTexts: smtpProfileTable.setStatus('current')
smtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "smtpProfileIndex"))
if mibBuilder.loadTexts: smtpProfileEntry.setStatus('current')
smtpProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpProfileIndex.setStatus('current')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
smtpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServerPort.setStatus('current')
smtpSenderMail = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSenderMail.setStatus('current')
smtpTargetMail1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail1.setStatus('current')
smtpTargetMail2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail2.setStatus('current')
smtpTargetMail3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail3.setStatus('current')
smtpTargetMail4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail4.setStatus('current')
smtpTargetMail5 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail5.setStatus('current')
smtpTargetMail6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail6.setStatus('current')
smtpTargetMail7 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail7.setStatus('current')
smtpTargetMail8 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail8.setStatus('current')
rmonStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1), )
if mibBuilder.loadTexts: rmonStatisticsTable.setStatus('current')
rmonStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonStatisticsIndex"))
if mibBuilder.loadTexts: rmonStatisticsEntry.setStatus('current')
rmonStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsIndex.setStatus('current')
rmonStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsPort.setStatus('current')
rmonStatisticsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsDropEvents.setStatus('current')
rmonStatisticsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsOctets.setStatus('current')
rmonStatisticsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsPackets.setStatus('current')
rmonStatisticsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsBroadcast.setStatus('current')
rmonStatisticsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsMulticast.setStatus('current')
rmonStatisticsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsOwner.setStatus('current')
rmonStatisticsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatisticsRowStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryPort.setStatus('current')
rmonHistoryBucketsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryBucketsRequest.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryRowStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("delta", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRowStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("trap", 3), ("logTrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventRowStatus.setStatus('current')
ntpServer = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer.setStatus('current')
ntpManualTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpManualTime.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ntpServerIndex"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerIndex.setStatus('current')
ntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerIp.setStatus('current')
copperTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1))
pingTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2))
ipv6pingTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3))
loggingSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4))
factoryDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5))
reboot = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 6))
dhcpAutoProvision = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 7))
ledIndication = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8))
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNumber.setStatus('current')
copperTestAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("copperTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: copperTestAction.setStatus('current')
copperTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3))
resultPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resultPort.setStatus('current')
channelA = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelA.setStatus('current')
cableLengthA = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthA.setStatus('current')
channelB = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelB.setStatus('current')
cableLengthB = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthB.setStatus('current')
channelC = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelC.setStatus('current')
cableLengthC = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthC.setStatus('current')
channelD = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelD.setStatus('current')
cableLengthD = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthD.setStatus('current')
channelRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRx.setStatus('current')
cableLengthRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthRx.setStatus('current')
channelTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTx.setStatus('current')
cableLengthTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthTx.setStatus('current')
pingIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPAddress.setStatus('current')
pingCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingCount.setStatus('current')
pingInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingInterval.setStatus('current')
pingSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSize.setStatus('current')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ping", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
pingResult = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingResult.setStatus('current')
pingIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Address.setStatus('current')
pingIPv6Count = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Count.setStatus('current')
pingIPv6Interval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Interval.setStatus('current')
pingIPv6Size = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Size.setStatus('current')
pingIPv6Action = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ping", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Action.setStatus('current')
pingIPv6Result = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingIPv6Result.setStatus('current')
loggingService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingService.setStatus('current')
localLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2), )
if mibBuilder.loadTexts: localLoggingTable.setStatus('current')
localLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "localLoggingIndex"))
if mibBuilder.loadTexts: localLoggingEntry.setStatus('current')
localLoggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localLoggingIndex.setStatus('current')
bufferedtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("buffered", 1), ("console", 2), ("file", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferedtarget.setStatus('current')
localLoggingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localLoggingStatus.setStatus('current')
localLoggingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 4), Bits().clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLoggingSeverity.setStatus('current')
remoteloggingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3), )
if mibBuilder.loadTexts: remoteloggingTable.setStatus('current')
remoteloggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "serverAddress"))
if mibBuilder.loadTexts: remoteloggingEntry.setStatus('current')
remoteloggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteloggingIndex.setStatus('current')
remoteloggingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingAddress.setStatus('current')
remoteloggingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingPort.setStatus('current')
remoteloggingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 4), Bits().clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingSeverity.setStatus('current')
remoteloggingFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingFacility.setStatus('current')
remoteloggingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteloggingRowStatus.setStatus('current')
factoryDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("factoryDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: factoryDefaultAction.setStatus('current')
factoryDefaultKeepFlag = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5, 2), Bits().clone(namedValues=NamedValues(("vlan", 1), ("ipaddress", 2), ("useraccount", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: factoryDefaultKeepFlag.setStatus('current')
rebootAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootAction.setStatus('current')
dhcpAutoProvisionEnable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoProvisionEnable.setStatus('current')
ledAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledAlarmState.setStatus('current')
ledPowerFailureEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPowerFailureEvent.setStatus('current')
ledFiberLinkdownEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledFiberLinkdownEvent.setStatus('current')
ledPortLinkdownEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPortLinkdownEvent.setStatus('current')
ledPortLinkdownEventPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 5), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPortLinkdownEventPort.setStatus('current')
ledEventInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6), )
if mibBuilder.loadTexts: ledEventInfoTable.setStatus('current')
ledEventInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ledEventIndex"))
if mibBuilder.loadTexts: ledEventInfoEntry.setStatus('current')
ledEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEventIndex.setStatus('current')
ledType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledType.setStatus('current')
ledEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEvent.setStatus('current')
ledState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledState.setStatus('current')
ledErrorTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledErrorTimes.setStatus('current')
backupManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1))
upgradeManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2))
dualImage = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3))
configurationManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4))
accountManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5))
nKey = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6))
backupMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupMethod.setStatus('current')
backupServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupServerIP.setStatus('current')
backupType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("image", 1), ("startupConfig", 2), ("runningConfig", 3), ("flashlog", 5), ("bufferlog", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupType.setStatus('current')
backupImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partition0", 1), ("partition1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupImage.setStatus('current')
backupAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("backup", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupAction.setStatus('current')
upgradeMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeMethod.setStatus('current')
upgradeServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeServerIP.setStatus('current')
upgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeFileName.setStatus('current')
upgradeType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("image", 1), ("startupConfig", 2), ("runningConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeType.setStatus('current')
upgradeImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeImage.setStatus('current')
upgradeAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("upgrade", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeAction.setStatus('current')
upgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-going", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeStatus.setStatus('current')
activeImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("image1", 1), ("image2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeImage.setStatus('current')
imageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2), )
if mibBuilder.loadTexts: imageInfoTable.setStatus('current')
imageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "flashPartition"))
if mibBuilder.loadTexts: imageInfoEntry.setStatus('current')
flashPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPartition.setStatus('current')
imageName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageName.setStatus('current')
imageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageSize.setStatus('current')
createdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: createdTime.setStatus('current')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
sourceFile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("startup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFile.setStatus('current')
destinationFile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("startup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationFile.setStatus('current')
saveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveConfiguration.setStatus('current')
localUserTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1), )
if mibBuilder.loadTexts: localUserTable.setStatus('current')
localUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "localUserIndex"))
if mibBuilder.loadTexts: localUserEntry.setStatus('current')
localUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localUserIndex.setStatus('current')
localUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserName.setStatus('current')
localUserPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cleartext", 1), ("encrypted", 2), ("noPassword", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPasswordType.setStatus('current')
localUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPassword.setStatus('current')
localUserPrivilegeType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPrivilegeType.setStatus('current')
localUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUserRowStatus.setStatus('current')
nKeyAutoMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nKeyAutoMode.setStatus('current')
nKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("backup", 1), ("restore", 2), ("running", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nKeyStatus.setStatus('current')
trapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1))
ddmiAlarmDescr = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmiAlarmDescr.setStatus('current')
xRingMasterStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("masterToSlave", 1), ("slaveToMaster", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingMasterStatus.setStatus('current')
ddmiAlarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 2)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "ddmiAlarmDescr"))
if mibBuilder.loadTexts: ddmiAlarmWarning.setStatus('current')
xRingProMasterChange = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 3)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "xRingMasterStatus"), ("ADVANTECH-EKI-PRONEER-MIB", "xRingProRingID"))
if mibBuilder.loadTexts: xRingProMasterChange.setStatus('current')
stpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 5)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "stpPortStatusIndex"), ("ADVANTECH-EKI-PRONEER-MIB", "stpPortStatus"))
if mibBuilder.loadTexts: stpStateChange.setStatus('current')
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", queuetoDSCPMapEntry=queuetoDSCPMapEntry, mstDesignatedBridge=mstDesignatedBridge, mldSnoopingIndex=mldSnoopingIndex, sfpDMITxPowerHighAlarmState=sfpDMITxPowerHighAlarmState, dot3StatsMultipleCollisionFrames=dot3StatsMultipleCollisionFrames, ipSecurityRowStatus=ipSecurityRowStatus, mldQuerierVersion=mldQuerierVersion, ntpServerTable=ntpServerTable, ipSettings=ipSettings, lacpPortMode=lacpPortMode, snmpv3UserName=snmpv3UserName, httpSetting=httpSetting, linkStatus=linkStatus, ipSecurityIPMask=ipSecurityIPMask, xRingProChainAdd=xRingProChainAdd, igmpGroupLife=igmpGroupLife, sfpDMIVoltageLowAlarmValue=sfpDMIVoltageLowAlarmValue, stpBridgeStatus=stpBridgeStatus, ipSecurityIndex=ipSecurityIndex, dscpIndex=dscpIndex, sfpDMITxBasisHighAlarmValue=sfpDMITxBasisHighAlarmValue, queueSettingTable=queueSettingTable, ipAclActiveStatus=ipAclActiveStatus, lldpLocalPortManagementAddress=lldpLocalPortManagementAddress, ipAclTable=ipAclTable, specialGroupQueryRx=specialGroupQueryRx, localLoggingIndex=localLoggingIndex, rmonHistoryInterval=rmonHistoryInterval, dhcpServerVlanEntry=dhcpServerVlanEntry, lldpLocalPortSystemdescription=lldpLocalPortSystemdescription, rmonStatisticsIndex=rmonStatisticsIndex, portSecurityFDBLimit=portSecurityFDBLimit, interfaceVlanEntry=interfaceVlanEntry, snmpState=snmpState, xRingProInfoRingID=xRingProInfoRingID, sfpDMITxBias=sfpDMITxBias, lldpPduDisableAction=lldpPduDisableAction, loggingFileCategory=loggingFileCategory, igmpQuerierVlanId=igmpQuerierVlanId, lldpremoteDeviceIndex=lldpremoteDeviceIndex, ledEvent=ledEvent, lldpPortStatTotalRxFrame=lldpPortStatTotalRxFrame, interfaceIpv4SubnetMask=interfaceIpv4SubnetMask, lldpremoteDeviceSystemName=lldpremoteDeviceSystemName, lagStatusActiveMember=lagStatusActiveMember, rmonAlarmVariable=rmonAlarmVariable, lacpPortTable=lacpPortTable, igmpStaticGroupMemberPorts=igmpStaticGroupMemberPorts, sshService=sshService, ledPortLinkdownEventPort=ledPortLinkdownEventPort, imageName=imageName, portToVlanInterfaceVlanMode=portToVlanInterfaceVlanMode, l4SourcePort=l4SourcePort, portSecurity=portSecurity, portVlanEntry=portVlanEntry, operQueryRobustness=operQueryRobustness, localUserPasswordType=localUserPasswordType, imageInfoTable=imageInfoTable, localUserName=localUserName, portSecurityPortIndex=portSecurityPortIndex, dhcpServerClientMacEntry=dhcpServerClientMacEntry, mldGroupIPaddress=mldGroupIPaddress, poePortLegacy=poePortLegacy, imageInfoEntry=imageInfoEntry, telephonyOUICosMode=telephonyOUICosMode, dhcpServerPortStatus=dhcpServerPortStatus, lagPortSpeed=lagPortSpeed, telephonyOUIEntry=telephonyOUIEntry, clearFileMsg=clearFileMsg, upgradeMethod=upgradeMethod, dhcpv6Client=dhcpv6Client, timeZone=timeZone, pathCostMethod=pathCostMethod, poeSystemSetting=poeSystemSetting, httpsService=httpsService, rmonStatisticsOctets=rmonStatisticsOctets, dhcpServerOpt82DNS=dhcpServerOpt82DNS, xRingProStatus=xRingProStatus, sfpDMITxPowerHighWarnValue=sfpDMITxPowerHighWarnValue, dot3StatsDeferredTransmissions=dot3StatsDeferredTransmissions, activeImage=activeImage, mldStaticGroupIPaddress=mldStaticGroupIPaddress, sfpDMIRxPowerLowAlarmState=sfpDMIRxPowerLowAlarmState, xRingProPairID=xRingProPairID, stpPortDesignatedBridge=stpPortDesignatedBridge, stromControlPortEntry=stromControlPortEntry, nonRecFromYear=nonRecFromYear, seconds=seconds, sfpDMIInfoTable=sfpDMIInfoTable, lldpOverloadingIeee8023TLVs=lldpOverloadingIeee8023TLVs, qosPortCos=qosPortCos, sfpDMIPortIndex=sfpDMIPortIndex, securityLoginState=securityLoginState, currentDaylightSavingTo=currentDaylightSavingTo, copperTestResult=copperTestResult, clearmldStatistics=clearmldStatistics, vlanType=vlanType, ipAclIndex=ipAclIndex, stpPriorityInfoEntry=stpPriorityInfoEntry, lagManagementEntry=lagManagementEntry, ledPWR1Status=ledPWR1Status, recFromWeek=recFromWeek, inertions=inertions, dhcpSnoopingMac=dhcpSnoopingMac, ipv4Gateway=ipv4Gateway, sfpDMITxBasisLowWarnValue=sfpDMITxBasisLowWarnValue, lldpremoteDeviceIeee8023MaxFrameSize=lldpremoteDeviceIeee8023MaxFrameSize, trustMode=trustMode, interCurrIpv4Address=interCurrIpv4Address, sourceIpAddress=sourceIpAddress, lldpLocalDevicePortIDsubtype=lldpLocalDevicePortIDsubtype, pingIPv6Interval=pingIPv6Interval, rmon=rmon, igmpQuerierEntry=igmpQuerierEntry, duplex=duplex, mstBridgeIdentifier=mstBridgeIdentifier, operQueryInterval=operQueryInterval, ipPrecedenceIndex=ipPrecedenceIndex, xRingEliteState=xRingEliteState, dhcpSnoopingState=dhcpSnoopingState, ledLOOPStatus=ledLOOPStatus, snmpv3UserPrivPassword=snmpv3UserPrivPassword, ipAclPortList=ipAclPortList, nonRecurringFrom=nonRecurringFrom, lacpInfoPrdtx=lacpInfoPrdtx, remoteloggingRowStatus=remoteloggingRowStatus, ipSecurity=ipSecurity, lldpPortStatTotalRxAgeouts=lldpPortStatTotalRxAgeouts, remoteloggingSeverity=remoteloggingSeverity, firmwareVersion=firmwareVersion, nonRecFromMinutes=nonRecFromMinutes, voiceVlanAgingTime=voiceVlanAgingTime, rootPathCost=rootPathCost, ledStatus=ledStatus, stpPortStatusEntry=stpPortStatusEntry, ingressBandwidthEntry=ingressBandwidthEntry, ipPrecedencetoQueueMapTable=ipPrecedencetoQueueMapTable, operMldSnoopLastMemberQueryInterval=operMldSnoopLastMemberQueryInterval, sfpDMITempHighWarnState=sfpDMITempHighWarnState, erpsGroupWestLink=erpsGroupWestLink, mldStaticGroupRowStatus=mldStaticGroupRowStatus, xRingElitePort1=xRingElitePort1, dhcpServerLeaseIndex=dhcpServerLeaseIndex, remoteloggingEntry=remoteloggingEntry, aSwitchMIB=aSwitchMIB, currentSNTPServerPort=currentSNTPServerPort, xRingPro=xRingPro, smtpActiveProfile=smtpActiveProfile, mldspecialGroupQueryRx=mldspecialGroupQueryRx, igmpStatistics=igmpStatistics, dhcpServerClientMacTable=dhcpServerClientMacTable, lldpPortConfEntry=lldpPortConfEntry, lldpremoteDeviceAuto_negoAdvertisedCapabilities=lldpremoteDeviceAuto_negoAdvertisedCapabilities, lldpLocalPortID=lldpLocalPortID, mldQuerierTable=mldQuerierTable, tcpModbus=tcpModbus, portMonitoring=portMonitoring, smtpProfileIndex=smtpProfileIndex, systemTimeInfo=systemTimeInfo, dot3StatsSymbolErrors=dot3StatsSymbolErrors, snmpCommunityAccessRight=snmpCommunityAccessRight, pingIPv6Action=pingIPv6Action, staticMacSettingIndex=staticMacSettingIndex, queueToipPrecedenceMapTable=queueToipPrecedenceMapTable, queueIndex=queueIndex, lldpPortConfTable=lldpPortConfTable, lldpremoteDeviceRowStatus=lldpremoteDeviceRowStatus, ntpServer=ntpServer, bridgeIdentifier=bridgeIdentifier, rmonAlarmRowStatus=rmonAlarmRowStatus, ifInBroadcastPkts=ifInBroadcastPkts, egressBandwidthTable=egressBandwidthTable, mldSnoopingEntry=mldSnoopingEntry, dhcpServerLeaseTime=dhcpServerLeaseTime, cableLengthA=cableLengthA, ifInMulticastPkts=ifInMulticastPkts, mldgeneralQueryTx=mldgeneralQueryTx, lldpLocalPortOperationMAUtype=lldpLocalPortOperationMAUtype, macAddressInfoMAC=macAddressInfoMAC, macAddressInfoEntry=macAddressInfoEntry, stpPriorityValue=stpPriorityValue, lldpremoteDevicePvid=lldpremoteDevicePvid, voiceVlanState=voiceVlanState, recFromMinutes=recFromMinutes, macAclTable=macAclTable, sfpDMIInfoEntry=sfpDMIInfoEntry, voiceVlanId=voiceVlanId, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, deletions=deletions, egressBandwidthState=egressBandwidthState, igmpSnoopingEntry=igmpSnoopingEntry, staticMacSettingRowStatus=staticMacSettingRowStatus, queuePercentOfWRRBandwidth=queuePercentOfWRRBandwidth, dosProtection=dosProtection, operLastMemberQueryCounter=operLastMemberQueryCounter, rmonEventTable=rmonEventTable, reportRx=reportRx, mldSnoopQueryMaxResponseInterval=mldSnoopQueryMaxResponseInterval, lldpLocalPortDescription=lldpLocalPortDescription, cableLengthRx=cableLengthRx, currentDaylightSavingOffset=currentDaylightSavingOffset, mldStaticGroupMemberPorts=mldStaticGroupMemberPorts, stpPortEdgrPortConf=stpPortEdgrPortConf, erpsGroupRole=erpsGroupRole, httpNetworkPort=httpNetworkPort, dosPortEntry=dosPortEntry, sourceFile=sourceFile, mstStpPortStatusTable=mstStpPortStatusTable, igmpRouterPort=igmpRouterPort, dhcpServerOpt82LowIP=dhcpServerOpt82LowIP, channelRx=channelRx, ipv6Settings=ipv6Settings, stpPathCost=stpPathCost, rmonAlarmInterval=rmonAlarmInterval, lldpLocalDeviceSystemName=lldpLocalDeviceSystemName, mstStpPortEdgrPortConf=mstStpPortEdgrPortConf, loopbackPortEntry=loopbackPortEntry, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, dhcpServerClientMacEntryID=dhcpServerClientMacEntryID, igmpRouterVlanId=igmpRouterVlanId, sfpDMIVoltageHighAlarmValue=sfpDMIVoltageHighAlarmValue, vlanPvid=vlanPvid, staticMacSetting=staticMacSetting, lldpremoteDeviceChassisIDsubtype=lldpremoteDeviceChassisIDsubtype, xRingProChainID=xRingProChainID, tcpFragment=tcpFragment, gmrpStatus=gmrpStatus, sfpDMITxBasisHighWarnState=sfpDMITxBasisHighWarnState, sfpDMIVoltageLowWarnState=sfpDMIVoltageLowWarnState, ieee8021x=ieee8021x, loggingFileMessage=loggingFileMessage, egressqueueBandwidthTable=egressqueueBandwidthTable, xRingProCoupleSetting=xRingProCoupleSetting, pingCount=pingCount, stromControlPortAction=stromControlPortAction, mldSnoopLastMemberQueryInterval=mldSnoopLastMemberQueryInterval, sfpDMITxPowerHighWarnState=sfpDMITxPowerHighWarnState, mstiIDIndex=mstiIDIndex, igmpRouterEntry=igmpRouterEntry, forwardMethod=forwardMethod, dhcpServerPortIndex=dhcpServerPortIndex, loopbackEnabled=loopbackEnabled, ipv6MinFragment=ipv6MinFragment, loopbackPortLoopStatus=loopbackPortLoopStatus, telephonyOUITable=telephonyOUITable, generalQueryTx=generalQueryTx, dot3StatsFrameTooLongs=dot3StatsFrameTooLongs, interfaceVlanIndex=interfaceVlanIndex, nKeyStatus=nKeyStatus, upgradeAction=upgradeAction, telephonyOUIRowStatus=telephonyOUIRowStatus, lldpremoteDeviceAuto_negoenabled=lldpremoteDeviceAuto_negoenabled, telephonyOUIAddress=telephonyOUIAddress, xRingProInfoRole=xRingProInfoRole)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", snmpv3UserTable=snmpv3UserTable, lldpOverloadingTotal=lldpOverloadingTotal, loggingBufferTable=loggingBufferTable, mirrorEntry=mirrorEntry, sfpDMITempLowWarnValue=sfpDMITempLowWarnValue, stpPortStatus=stpPortStatus, dscpQueue=dscpQueue, mldinvalidRx=mldinvalidRx, rmonStatisticsPackets=rmonStatisticsPackets, nonRecToMinutes=nonRecToMinutes, xRingProChainHeadPort=xRingProChainHeadPort, telephonyOUIDescription=telephonyOUIDescription, erps=erps, rmonHistoryBucketsRequest=rmonHistoryBucketsRequest, radiusServerSecurityKey=radiusServerSecurityKey, dhcpServerVlanDNS=dhcpServerVlanDNS, poePortIndex=poePortIndex, portSecurityEnabled=portSecurityEnabled, xRingProInfoPort1FwdState=xRingProInfoPort1FwdState, acl=acl, igmpQuerierTable=igmpQuerierTable, dhcpClientOpt82CircuitIDHex=dhcpClientOpt82CircuitIDHex, rmonHistoryRowStatus=rmonHistoryRowStatus, ieee8021xServerPort=ieee8021xServerPort, tcpModbusTimeout=tcpModbusTimeout, stpPortRootPathCost=stpPortRootPathCost, ingressBandwidthPortIndex=ingressBandwidthPortIndex, snmp=snmp, interfaceVlanName=interfaceVlanName, dhcpServerOpt82Entry=dhcpServerOpt82Entry, loggingMessage=loggingMessage, ipProtocol=ipProtocol, localUserRowStatus=localUserRowStatus, lldpOverloadingMandatoryTLVs=lldpOverloadingMandatoryTLVs, sshNetworkPort=sshNetworkPort, httpsSetting=httpsSetting, dscptoQueueMapEntry=dscptoQueueMapEntry, poePortStatusTable=poePortStatusTable, lagStatusName=lagStatusName, lldpremoteDevicePortID=lldpremoteDevicePortID, telephonyOUIPortIndex=telephonyOUIPortIndex, rmonEventOwner=rmonEventOwner, lldpPortStatErrorRxFrame=lldpPortStatErrorRxFrame, ledSYSStatus=ledSYSStatus, remoteloggingAddress=remoteloggingAddress, poePortPowerLimitClass=poePortPowerLimitClass, sfpDMIRxPowerHighWarnState=sfpDMIRxPowerHighWarnState, loggingBufferTimeStamp=loggingBufferTimeStamp, currentDaylightSavingStatus=currentDaylightSavingStatus, gvrp=gvrp, rmonHistoryIndex=rmonHistoryIndex, monitoring=monitoring, interCurrIpv4DhcpState=interCurrIpv4DhcpState, mstStpPortStatusIndex=mstStpPortStatusIndex, gmrp=gmrp, lldpLocalDeviceChassisidsubtype=lldpLocalDeviceChassisidsubtype, dot3StatsSingleCollisionFrames=dot3StatsSingleCollisionFrames, mldspecialGroupSourceQueryRx=mldspecialGroupSourceQueryRx, sourceMacMask=sourceMacMask, rateLimit=rateLimit, tcp_Syn=tcp_Syn, loaderDate=loaderDate, stpStateChange=stpStateChange, httpsSessionTimeout=httpsSessionTimeout, xRingProInfoDel=xRingProInfoDel, lagStatusType=lagStatusType, stpMstiIDIndex=stpMstiIDIndex, vlanEntry=vlanEntry, ddmDiagnosticAlarm=ddmDiagnosticAlarm, interCurrIpv4SubnetMask=interCurrIpv4SubnetMask, deviceInfo=deviceInfo, poePortPriority=poePortPriority, pingResult=pingResult, dhcpServerOpt82CircuitIDFormat=dhcpServerOpt82CircuitIDFormat, definatedRootBridge=definatedRootBridge, sfpDMITxPowerLowAlarmState=sfpDMITxPowerLowAlarmState, rmonAlarmTable=rmonAlarmTable, lldpremoteDeviceEntryIndex=lldpremoteDeviceEntryIndex, dhcpServerClientMacEntryGW=dhcpServerClientMacEntryGW, ipAclRowStatus=ipAclRowStatus, upgradeFileName=upgradeFileName, dualImage=dualImage, queuetoDSCPMapTable=queuetoDSCPMapTable, recToDay=recToDay, snmpv3UserPrivProtocol=snmpv3UserPrivProtocol, dhcpServerOpt82Table=dhcpServerOpt82Table, vlan=vlan, rmonHistoryTable=rmonHistoryTable, ntpServerIp=ntpServerIp, httpsNetworkPort=httpsNetworkPort, jamboFramePktSize=jamboFramePktSize, lagStandbyMember=lagStandbyMember, pingIPv6Address=pingIPv6Address, upgradeServerIP=upgradeServerIP, enableState=enableState, ipSourceGuardEnablePorts=ipSourceGuardEnablePorts, erpsGroupInstance=erpsGroupInstance, dhcpServerPortDNS=dhcpServerPortDNS, cableLengthB=cableLengthB, tacacsServerIP=tacacsServerIP, snmpTrapHostVersion=snmpTrapHostVersion, lldpLocalPortAuto_negosupported=lldpLocalPortAuto_negosupported, unknownUnicastRate=unknownUnicastRate, ipv6InUseTable=ipv6InUseTable, reboot=reboot, xRingProInfoOperState=xRingProInfoOperState, sfpSpeed=sfpSpeed, sfpVendorSn=sfpVendorSn, queryRobustness=queryRobustness, loggingBufferIndex=loggingBufferIndex, mldGroupVlanId=mldGroupVlanId, lagType=lagType, igmpSnoopingIndex=igmpSnoopingIndex, systemTime=systemTime, mldStatistics=mldStatistics, sfpDMIRxPowerHighWarnValue=sfpDMIRxPowerHighWarnValue, sfpDMITemperature=sfpDMITemperature, udpBlat=udpBlat, xRingEliteRingIDEntry=xRingEliteRingIDEntry, dhcpServerClientMacEntryMask=dhcpServerClientMacEntryMask, erpsGroupState=erpsGroupState, vlanInterfaceEntry=vlanInterfaceEntry, destinationMacAddress=destinationMacAddress, nonRecurringTo=nonRecurringTo, smtpServerIp=smtpServerIp, lldpremoteDeviceVlanName=lldpremoteDeviceVlanName, lagPortDuplex=lagPortDuplex, sfpVendorName=sfpVendorName, dhcpSnoopingPort=dhcpSnoopingPort, traps=traps, nullScanAttack=nullScanAttack, stpP2pMac=stpP2pMac, mldSnoopImmediateLeave=mldSnoopImmediateLeave, lagPortFlowCtrlConfig=lagPortFlowCtrlConfig, snmpCommunityEntry=snmpCommunityEntry, erpsGroupTcPropagation=erpsGroupTcPropagation, smtpTargetMail4=smtpTargetMail4, mldSnoopRouterPortsAutoLearn=mldSnoopRouterPortsAutoLearn, igmpStaticGroupIPaddress=igmpStaticGroupIPaddress, dhcpServerVlanHighIP=dhcpServerVlanHighIP, igmpGroupTable=igmpGroupTable, enableSNTP=enableSNTP, remoteloggingPort=remoteloggingPort, stpStatisticTable=stpStatisticTable, loggingBufferCategory=loggingBufferCategory, mldGroupType=mldGroupType, erpsGuardTimer=erpsGuardTimer, dhcpServerOpt82GW=dhcpServerOpt82GW, telephonyOUIIndex=telephonyOUIIndex, ipSecurityService=ipSecurityService, queueToipPrecedenceIndex=queueToipPrecedenceIndex, ipPrecedenceQueue=ipPrecedenceQueue, macAclEntry=macAclEntry, dhcpServerLeaseStartTime=dhcpServerLeaseStartTime, ifOutMulticastPkts=ifOutMulticastPkts, mstStpPortDesignatedBridge=mstStpPortDesignatedBridge, leaveTx=leaveTx, lldpOverloadingEntry=lldpOverloadingEntry, igmpStaticGroupTable=igmpStaticGroupTable, ledPFAILStatus=ledPFAILStatus, igmpStaticGroupVlanId=igmpStaticGroupVlanId, dhcpServerPortLowIP=dhcpServerPortLowIP, lagPortType=lagPortType, dhcpClientOpt82CircuitIDFormat=dhcpClientOpt82CircuitIDFormat, currentSNTP=currentSNTP, lldpLocalPortSystemname=lldpLocalPortSystemname, systemTimeStatus=systemTimeStatus, lacpInfoPnkey=lacpInfoPnkey, gmrpMulticastGroupMacAddress=gmrpMulticastGroupMacAddress, channelC=channelC, dhcpClientOpt82RemoteIDFormat=dhcpClientOpt82RemoteIDFormat, mstiVLANList=mstiVLANList, stpEnable=stpEnable, rebootAction=rebootAction, tcpSYN_FINAttack=tcpSYN_FINAttack, lldpLocalPortIDsubtype=lldpLocalPortIDsubtype, arpSpoofingRowStatus=arpSpoofingRowStatus, dhcpSnooping=dhcpSnooping, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, ifOutUcastPkts=ifOutUcastPkts, ntpManualTime=ntpManualTime, portStatisticTable=portStatisticTable, month=month, lldpremoteDevicePsemdipowersupport=lldpremoteDevicePsemdipowersupport, mirror=mirror, snmpTrapHostRowStatus=snmpTrapHostRowStatus, ingressState=ingressState, portToVlanPortIndex=portToVlanPortIndex, ipv4PingMaxSize=ipv4PingMaxSize, operQueryMaxResponseInterval=operQueryMaxResponseInterval, lldpReinitializationDelay=lldpReinitializationDelay, erpsGroupTrafficChannel=erpsGroupTrafficChannel, lldpremoteDeviceOperationMAUtype=lldpremoteDeviceOperationMAUtype, dhcpClientOpt82=dhcpClientOpt82, egressqueueBandwidthQueueIndex=egressqueueBandwidthQueueIndex, autoConfiguration=autoConfiguration, vlanId=vlanId, dosPortTable=dosPortTable, mirrorTable=mirrorTable, qosPortRemarkDSCP=qosPortRemarkDSCP, portSettingTable=portSettingTable, lldpLocalPortChassisIDsubtype=lldpLocalPortChassisIDsubtype, mstLastTopologyChange=mstLastTopologyChange, lldpremoteDeviceAggregationPortID=lldpremoteDeviceAggregationPortID, sfpDMIAlarmInfoEntry=sfpDMIAlarmInfoEntry, xRingEliteRingIDIndex=xRingEliteRingIDIndex, dynamicMacSetting=dynamicMacSetting, dhcpSnoopingTable=dhcpSnoopingTable, nonRecFromMonth=nonRecFromMonth, leaveRx=leaveRx, erpsState=erpsState, copperTest=copperTest, backupManager=backupManager, cosIndex=cosIndex, systemContact=systemContact, dhcpServerSubmask=dhcpServerSubmask, mldStaticGroupVlanId=mldStaticGroupVlanId, lldpremoteDeviceSystemdescription=lldpremoteDeviceSystemdescription, ipSecurityIPAddr=ipSecurityIPAddr, mldvalidRx=mldvalidRx, gateway=gateway, egressqueueBandwidthCir=egressqueueBandwidthCir, tcnBPDUsReceived=tcnBPDUsReceived, macAddressInfoIndex=macAddressInfoIndex, lldpPortStatDiscardRxTlv=lldpPortStatDiscardRxTlv, lldpremoteDeviceSupportedsystemcapabilities=lldpremoteDeviceSupportedsystemcapabilities, drops=drops, igmpGroupVlanId=igmpGroupVlanId, system=system, macAclEtherType=macAclEtherType, sfpDMITempLowAlarmValue=sfpDMITempLowAlarmValue, mldspecialGroupQueryTx=mldspecialGroupQueryTx, xRingProRingSetting=xRingProRingSetting, ipv6InUseEntry=ipv6InUseEntry, dhcpServerOpt82Status=dhcpServerOpt82Status, poeFwVersion=poeFwVersion, dhcpServerPortEntry=dhcpServerPortEntry, mstiIDSetting=mstiIDSetting, lacpPortIndex=lacpPortIndex, interfaceIpv4Address=interfaceIpv4Address, dhcpServerPortClear=dhcpServerPortClear, ipv6Gateway=ipv6Gateway, currentSNTPServerAddr=currentSNTPServerAddr, qinqVlan=qinqVlan, lldpPortIndex=lldpPortIndex, dos=dos, portVlanAdminVlans=portVlanAdminVlans, reportTx=reportTx, rmonStatisticsEntry=rmonStatisticsEntry, xRingProRingAdd=xRingProRingAdd, mldspecialGroupSourceQueryTx=mldspecialGroupSourceQueryTx, snmpCommunityRowStatus=snmpCommunityRowStatus, portNumber=portNumber, ddmiAlarmWarning=ddmiAlarmWarning)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", queueSettingEntry=queueSettingEntry, portToVlanVlanId=portToVlanVlanId, lacpInfoAtstat=lacpInfoAtstat, systemName=systemName, currentTelnetSessionCount=currentTelnetSessionCount, interfaceIpv4Mode=interfaceIpv4Mode, ipv6PingMaxSize=ipv6PingMaxSize, ingressBandwidthTable=ingressBandwidthTable, mstp=mstp, qosBasicPortTrust=qosBasicPortTrust, mldreportTx=mldreportTx, poePortStatusIndex=poePortStatusIndex, poeOverLoadDisconnect=poeOverLoadDisconnect, igmpSnoopingVlanId=igmpSnoopingVlanId, ifInDiscards=ifInDiscards, rmonStatisticsTable=rmonStatisticsTable, lldpremoteDevicePsepowerclass=lldpremoteDevicePsepowerclass, recToHours=recToHours, sfpDMIRxPowerHighAlarmState=sfpDMIRxPowerHighAlarmState, unknownMulticastRate=unknownMulticastRate, lastMemberQueryInterval=lastMemberQueryInterval, stpBridgeTxHoldCount=stpBridgeTxHoldCount, lldpPortStatisticsEntry=lldpPortStatisticsEntry, copperTestAction=copperTestAction, firmwareDate=firmwareDate, securityLoginTelnetState=securityLoginTelnetState, dhcpServerClientMacEntryIP=dhcpServerClientMacEntryIP, vlanIngressFiltering=vlanIngressFiltering, sfpDMITxPowerLowAlarmValue=sfpDMITxPowerLowAlarmValue, poe=poe, ipv4Address=ipv4Address, ieee8021xPortTable=ieee8021xPortTable, xRingProInfoPort1=xRingProInfoPort1, recToWeek=recToWeek, smtpTargetMail1=smtpTargetMail1, ledEventInfoEntry=ledEventInfoEntry, enableunknownUnicast=enableunknownUnicast, xRingProChainRole=xRingProChainRole, upgradeType=upgradeType, bufferedtarget=bufferedtarget, backupServerIP=backupServerIP, ieee8021xAuthBased=ieee8021xAuthBased, mldtotalRx=mldtotalRx, pingIPv6Result=pingIPv6Result, lldpOverloadingStatus=lldpOverloadingStatus, rmonStatisticsMulticast=rmonStatisticsMulticast, telnetService=telnetService, stpPortDesignatedRootBridge=stpPortDesignatedRootBridge, xRingProRingPort2=xRingProRingPort2, poePortPower=poePortPower, dhcpAutoProvisionEnable=dhcpAutoProvisionEnable, loopbackInterval=loopbackInterval, lagPortEnableState=lagPortEnableState, configurationBPDUsReceived=configurationBPDUsReceived, dot3StatsLateCollisions=dot3StatsLateCollisions, sourceMacAddress=sourceMacAddress, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, queueWeight=queueWeight, pingIPAddress=pingIPAddress, stpStatisticPortIndex=stpStatisticPortIndex, xRingProRPairID=xRingProRPairID, stpPortStatusTable=stpPortStatusTable, igmpSnooping=igmpSnooping, enableunknownMulticast=enableunknownMulticast, mldreportRx=mldreportRx, lldpLocalPortAggregationStatus=lldpLocalPortAggregationStatus, mstConfigIdentification=mstConfigIdentification, gmrpMulticastGroupEntry=gmrpMulticastGroupEntry, stpAdminEnable=stpAdminEnable, operMldSnoopQueryMaxResponseInterval=operMldSnoopQueryMaxResponseInterval, destinationMacMask=destinationMacMask, xRingProInfoTable=xRingProInfoTable, pingInterval=pingInterval, xRingProChainSetting=xRingProChainSetting, loopbackPortTable=loopbackPortTable, xRingEliteRowStatus=xRingEliteRowStatus, xRingProRingPort1=xRingProRingPort1, lacpInfoPnstat=lacpInfoPnstat, backupMethod=backupMethod, stpPortRoles=stpPortRoles, stpPortP2PMacConf=stpPortP2PMacConf, tacacsServer=tacacsServer, validRx=validRx, lldpOverloadingIeee8021TLVs=lldpOverloadingIeee8021TLVs, qosBasicPortTable=qosBasicPortTable, rmonEventType=rmonEventType, PYSNMP_MODULE_ID=advantech, garp=garp, lldp=lldp, costoQueueMapTable=costoQueueMapTable, daylightSaving=daylightSaving, dhcpServerLeaseClientMac=dhcpServerLeaseClientMac, ledPowerFailureEvent=ledPowerFailureEvent, mstRevisionLevel=mstRevisionLevel, dhcpServerClearIpPool=dhcpServerClearIpPool, vlanAcceptedType=vlanAcceptedType, stpBridgeForwardDelay=stpBridgeForwardDelay, macAclActiveStatus=macAclActiveStatus, dhcpServerVlanStatus=dhcpServerVlanStatus, egressqueueBandwidthState=egressqueueBandwidthState, xRingProInfoPort2FwdState=xRingProInfoPort2FwdState, lldpHoldtimeMultiplier=lldpHoldtimeMultiplier, stromControlPortTable=stromControlPortTable, dhcpSnoopingBindingPorts=dhcpSnoopingBindingPorts, poeActualPowerConsumption=poeActualPowerConsumption, mldRouterEntry=mldRouterEntry, managementVlan=managementVlan, otherRx=otherRx, lagManagementTable=lagManagementTable, sfpDMITempHighAlarmState=sfpDMITempHighAlarmState, protectedPortEntry=protectedPortEntry, vlanInterfaceVlanMode=vlanInterfaceVlanMode, gmrpMulticastGroupVlanId=gmrpMulticastGroupVlanId, clearBufferedMsg=clearBufferedMsg, lldpLocalPortVlanName=lldpLocalPortVlanName, ledEventIndex=ledEventIndex, snmpCommunityTable=snmpCommunityTable, erpsGroupRevertive=erpsGroupRevertive, ledState=ledState, xRingEliteRingID=xRingEliteRingID, dhcpServerLowIP=dhcpServerLowIP, ledFiberLinkdownEvent=ledFiberLinkdownEvent, maintenance=maintenance, snmpv3EngineID=snmpv3EngineID, loggingBufferMessage=loggingBufferMessage, lagPortIndex=lagPortIndex, access=access, mldSnoopQueryRobustness=mldSnoopQueryRobustness, nonRecToYear=nonRecToYear, ipv4DnsServer1=ipv4DnsServer1, routerPortsAutoLearn=routerPortsAutoLearn, rmonEventIndex=rmonEventIndex, snmpv3UserAuthPassword=snmpv3UserAuthPassword, dhcpServerClientMacEntryRowStatus=dhcpServerClientMacEntryRowStatus, pingMaxSizeSetting=pingMaxSizeSetting, vlanNamePrefix=vlanNamePrefix, queueCos=queueCos, ingressBandwidthRate=ingressBandwidthRate, queuetoDSCPIndex=queuetoDSCPIndex, cableLengthD=cableLengthD, specialGroupSourceQueryTx=specialGroupSourceQueryTx, portStatisticIndex=portStatisticIndex, macAddressTable=macAddressTable, dot3ControlInUnknownOpcodes=dot3ControlInUnknownOpcodes, ipv4DnsServer2=ipv4DnsServer2, lldpremoteDeviceAuto_negosupported=lldpremoteDeviceAuto_negosupported, speed=speed, dhcpServerVlanClear=dhcpServerVlanClear, lacpInfoAtkey=lacpInfoAtkey, addtoStaticMacTable=addtoStaticMacTable, qinqPortInfoEntry=qinqPortInfoEntry, dscptoQueueMapTable=dscptoQueueMapTable, lldpLocalDeviceSystemDescription=lldpLocalDeviceSystemDescription, dhcpServerPortGW=dhcpServerPortGW, recToMinutes=recToMinutes, xRingElitePort1Status=xRingElitePort1Status, protectedPort=protectedPort, lag=lag, igmpSnoopStatus=igmpSnoopStatus, stromControlPortState=stromControlPortState, xMasScanAttack=xMasScanAttack, lacpInfoPortIndex=lacpInfoPortIndex, macAddressInfoType=macAddressInfoType, ntpServerEntry=ntpServerEntry, configurationManager=configurationManager, localLoggingTable=localLoggingTable, igmpQuerierStatus=igmpQuerierStatus, mldSnoopQueryInterval=mldSnoopQueryInterval, minutes=minutes, mstConfigName=mstConfigName, lldpPortStatDiscardRxFrame=lldpPortStatDiscardRxFrame, nonRecToMonth=nonRecToMonth, mldQuerierEntry=mldQuerierEntry, loopbackPortEnabled=loopbackPortEnabled, stpPortPriority=stpPortPriority, igmpGroupType=igmpGroupType, lldpTransmissionInterval=lldpTransmissionInterval, dhcpServerDNS=dhcpServerDNS, erpsGroupRingId=erpsGroupRingId, xRingEliteRingIDStatus=xRingEliteRingIDStatus, ingressBandwidthState=ingressBandwidthState, lastMemberQueryCounter=lastMemberQueryCounter, erpsGroupChannel=erpsGroupChannel, mstStpPortDesignatedRootBridge=mstStpPortDesignatedRootBridge, resultPort=resultPort, diagnostics=diagnostics, queryInterval=queryInterval, ipSecurityVlanId=ipSecurityVlanId, radiusServer=radiusServer, sfp=sfp, smtpServerPort=smtpServerPort, mldQuerierIP=mldQuerierIP, destinationPort=destinationPort, portSecurityEntry=portSecurityEntry, ledAlarmState=ledAlarmState, channelA=channelA, lldpOverloadingLeftToSend=lldpOverloadingLeftToSend, dhcpServerOpt82Mask=dhcpServerOpt82Mask, loadBalanceAlgorithm=loadBalanceAlgorithm, lldpPortStatisticsTable=lldpPortStatisticsTable, sfpDMIVoltageHighWarnValue=sfpDMIVoltageHighWarnValue, erpsGroupRingIndex=erpsGroupRingIndex, loggingBufferSeverity=loggingBufferSeverity, mldStaticGroupEntry=mldStaticGroupEntry, serverAddress=serverAddress, lldpLocalPortChassisID=lldpLocalPortChassisID, lacpInfoEntry=lacpInfoEntry, igmpStaticGroupIndex=igmpStaticGroupIndex, remoteloggingIndex=remoteloggingIndex, sfpVendorPn=sfpVendorPn, year=year, ipv6pingTest=ipv6pingTest, stp=stp, ledTempStatus=ledTempStatus, erpsGroupType=erpsGroupType, ledEventInfoTable=ledEventInfoTable, ipv6InUseAddress=ipv6InUseAddress, lldpremoteDeviceMdipowersupportportclass=lldpremoteDeviceMdipowersupportportclass, ledErrorTimes=ledErrorTimes, smtpProfileEntry=smtpProfileEntry, ipv6MinFragmentValue=ipv6MinFragmentValue, mstStpPortPriority=mstStpPortPriority, lagStatusTable=lagStatusTable, igmpQuerierState=igmpQuerierState, sfpDMIRxPower=sfpDMIRxPower, stpPortIndex=stpPortIndex, qosBasicMode=qosBasicMode, stpEdgePort=stpEdgePort, ieee8021xState=ieee8021xState, security=security, macAclVlanID=macAclVlanID, ifInNUcastPkts=ifInNUcastPkts, telephonyOUIPortTable=telephonyOUIPortTable, lagPortFlowCtrlStatus=lagPortFlowCtrlStatus, pingAction=pingAction, ledRFAILStatus=ledRFAILStatus, loopbackPortIndex=loopbackPortIndex, garpLeaveTime=garpLeaveTime, destinationIpAddress=destinationIpAddress, sfpDMIRxPowerHighAlarmValue=sfpDMIRxPowerHighAlarmValue, remoteDevice=remoteDevice, forceVersion=forceVersion, stpPortTable=stpPortTable, multicast=multicast, lagStatusLinkState=lagStatusLinkState, poePortCurrent=poePortCurrent, staticMacSettingTable=staticMacSettingTable, mstInstanceInfo=mstInstanceInfo, rmonEventRowStatus=rmonEventRowStatus, xRingProRPairSetting=xRingProRPairSetting, portVlanPortIndex=portVlanPortIndex, egressBandwidthPortIndex=egressBandwidthPortIndex, snmpTrapHostTable=snmpTrapHostTable, dhcpServerLeaseEntry=dhcpServerLeaseEntry)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", destinationFile=destinationFile, recurringTo=recurringTo, upgradeStatus=upgradeStatus, serverPort=serverPort, portSetting=portSetting, dhcpClientOpt82RemoteIDHex=dhcpClientOpt82RemoteIDHex, mldRouterPort=mldRouterPort, dhcpServerGateway=dhcpServerGateway, networkPort=networkPort, ipSecurityStatus=ipSecurityStatus, hours=hours, portVlanOperVlans=portVlanOperVlans, mldSnoopingReportSuppression=mldSnoopingReportSuppression, operMldSnoopQueryRobustness=operMldSnoopQueryRobustness, ifInOctets=ifInOctets, loggingFileSeverity=loggingFileSeverity, staticMacSettingMacAddress=staticMacSettingMacAddress, lldpLocalPortAuto_negoenabled=lldpLocalPortAuto_negoenabled, nonRecToHours=nonRecToHours, portSecurityViolationMACNotify=portSecurityViolationMACNotify, qos=qos, erpsHoldOffTimer=erpsHoldOffTimer, xRingProRPairPort=xRingProRPairPort, lldpremoteDeviceTable=lldpremoteDeviceTable, lagLinkState=lagLinkState, mstStpPortRootPathCost=mstStpPortRootPathCost, loggingSetting=loggingSetting, lagStatusStandbyMember=lagStatusStandbyMember, qinqPortIndex=qinqPortIndex, lagPortEntry=lagPortEntry, loggingFileTimeStamp=loggingFileTimeStamp, rmonStatisticsOwner=rmonStatisticsOwner, smtpTargetMail6=smtpTargetMail6, gmrpMulticastGroupTable=gmrpMulticastGroupTable, xRingProPairAdd=xRingProPairAdd, tcpMinHdrSize=tcpMinHdrSize, smtpSenderMail=smtpSenderMail, operMldSnoopLastMemberQueryCounter=operMldSnoopLastMemberQueryCounter, lldpPortOptionalTLVs=lldpPortOptionalTLVs, sfpDMIVoltageHighAlarmState=sfpDMIVoltageHighAlarmState, stpBridgeHelloTime=stpBridgeHelloTime, sfpDMITxBasisLowAlarmValue=sfpDMITxBasisLowAlarmValue, xRingProInfoEntry=xRingProInfoEntry, dhcpClientOpt82CircuitIDUserDefine=dhcpClientOpt82CircuitIDUserDefine, lldpPortState=lldpPortState, qosPortSettingEntry=qosPortSettingEntry, channelTx=channelTx, loaderVersion=loaderVersion, ipSourceGuardIndex=ipSourceGuardIndex, mldleaveRx=mldleaveRx, igmpRouterExpireTime=igmpRouterExpireTime, upgradeManager=upgradeManager, ledRMStatus=ledRMStatus, dhcpServerHighIP=dhcpServerHighIP, eeePortEntry=eeePortEntry, queueToipPrecedenceMapEntry=queueToipPrecedenceMapEntry, poePortSettingEntry=poePortSettingEntry, dhcpServerOpt82Clear=dhcpServerOpt82Clear, lacpPortEntry=lacpPortEntry, ipv4Mode=ipv4Mode, sfpDMITempHighWarnValue=sfpDMITempHighWarnValue, enablebroadcast=enablebroadcast, dhcpClientOpt82RemoteIDUserDefine=dhcpClientOpt82RemoteIDUserDefine, sfpDMITxBasisLowAlarmState=sfpDMITxBasisLowAlarmState, ieee8021xPortState=ieee8021xPortState, xRingElitePort2=xRingElitePort2, smtpProfileTable=smtpProfileTable, sfpDMITxPowerLowWarnValue=sfpDMITxPowerLowWarnValue, gmrpMulticastGroupIndex=gmrpMulticastGroupIndex, qinqPortInfoTable=qinqPortInfoTable, localUserTable=localUserTable, macAclIndex=macAclIndex, l4DestinationPort=l4DestinationPort, smtpTargetMail3=smtpTargetMail3, securityLogin=securityLogin, snmpTrapHostEntry=snmpTrapHostEntry, mldRouterExpireTime=mldRouterExpireTime, queuetoCosMapEntry=queuetoCosMapEntry, mldQuerierState=mldQuerierState, mldSnoopingState=mldSnoopingState, smtpTargetMail5=smtpTargetMail5, lldpremoteDevicePsepowerpair=lldpremoteDevicePsepowerpair, ipv6InUseIndex=ipv6InUseIndex, lldpremoteDeviceManagementAddress=lldpremoteDeviceManagementAddress, localUserPassword=localUserPassword, sfpDMIVoltage=sfpDMIVoltage, dhcpSnoopingEntry=dhcpSnoopingEntry, nonRecToDay=nonRecToDay, dhcpSnoopingVlanId=dhcpSnoopingVlanId, stpBridgeMaxAge=stpBridgeMaxAge, rmonEventCommunity=rmonEventCommunity, qosPortIndex=qosPortIndex, spfVendorRev=spfVendorRev, eee=eee, channelB=channelB, portToVlanEntry=portToVlanEntry, mldSnoopStatus=mldSnoopStatus, ipSecurityTable=ipSecurityTable, lagActiveMember=lagActiveMember, egressqueueBandwidthEntry=egressqueueBandwidthEntry, protectedPortIndex=protectedPortIndex, ipPrecedence=ipPrecedence, dhcpServer=dhcpServer, ipv6InUseSubnetMask=ipv6InUseSubnetMask, rmonStatisticsRowStatus=rmonStatisticsRowStatus, lldpremoteDeviceEntry=lldpremoteDeviceEntry, lldpOverloadingPortIndex=lldpOverloadingPortIndex, dhcpServerVlanLowIP=dhcpServerVlanLowIP, jamboFrame=jamboFrame, dhcpServerOpt82Index=dhcpServerOpt82Index, l2switching=l2switching, localUserPrivilegeType=localUserPrivilegeType, portStatisticEntry=portStatisticEntry, ipPrecedencetoQueueMapEntry=ipPrecedencetoQueueMapEntry, proneer=proneer, dhcpServerClientMacEntryMac=dhcpServerClientMacEntryMac, igmpGroupMemberPorts=igmpGroupMemberPorts, ieee8021xServerIP=ieee8021xServerIP, erpsGroupEntry=erpsGroupEntry, outerVlanEthtype=outerVlanEthtype, snmpTrapHostIndex=snmpTrapHostIndex, tacacsServerSecurityKey=tacacsServerSecurityKey, tcpModbusState=tcpModbusState, stpMigrate=stpMigrate, interfaceVlanRowStatus=interfaceVlanRowStatus, pingIPv6Count=pingIPv6Count, lldpremoteDevicePortDescription=lldpremoteDevicePortDescription, mldGroupTable=mldGroupTable, loggingFileIndex=loggingFileIndex, rmonAlarmEntry=rmonAlarmEntry, lldpremoteDeviceAggregationStatus=lldpremoteDeviceAggregationStatus, currentDaylightSavingFrom=currentDaylightSavingFrom, lldpPortStatTotalTxFrame=lldpPortStatTotalTxFrame, xRingProInfoMode=xRingProInfoMode, ipv4SubnetMask=ipv4SubnetMask, ieee8021xSecurityKey=ieee8021xSecurityKey, lldpremoteDevicePsepowerpaircontrolability=lldpremoteDevicePsepowerpaircontrolability, sessionId=sessionId, xRingProMasterChange=xRingProMasterChange, sfpDMITxBasisHighAlarmState=sfpDMITxBasisHighAlarmState, currentDateTime=currentDateTime, rmonHistoryEntry=rmonHistoryEntry, xRingProRPairMasterRingID=xRingProRPairMasterRingID, ieee8021xPortEntry=ieee8021xPortEntry, stpBridgePriority=stpBridgePriority, arpSpoofingTable=arpSpoofingTable, ieee8021xReauthPeriod=ieee8021xReauthPeriod, telephonyOUIState=telephonyOUIState, garpLeaveAllTime=garpLeaveAllTime, stpPriorityInfoTable=stpPriorityInfoTable, igmpQuerierVersion=igmpQuerierVersion, recFromDay=recFromDay, ipv6Address=ipv6Address, snmpv3UserEntry=snmpv3UserEntry, lagPortTable=lagPortTable, nKey=nKey, ipSourceGuardSourceMac=ipSourceGuardSourceMac, sourceRxPort=sourceRxPort, garpJoinTime=garpJoinTime, rmonStatisticsDropEvents=rmonStatisticsDropEvents, general=general, lagPorts=lagPorts, ledPortLinkdownEvent=ledPortLinkdownEvent, gmrpMulticastGroupType=gmrpMulticastGroupType, dhcpServerPortTable=dhcpServerPortTable, arpSpoofingIndex=arpSpoofingIndex, sfpDMIAlarmPortIndex=sfpDMIAlarmPortIndex, vlanInterfaceTable=vlanInterfaceTable, portVlanPortMode=portVlanPortMode, ifOutDiscards=ifOutDiscards, mldRouterTable=mldRouterTable, localLoggingStatus=localLoggingStatus, remoteloggingTable=remoteloggingTable, backupImage=backupImage, dhcpServerClientMacEntryDNS=dhcpServerClientMacEntryDNS, sfpDateCode=sfpDateCode, unknownMulticastAction=unknownMulticastAction, createdTime=createdTime, stromControlPreamble_IFG=stromControlPreamble_IFG, mstRootPathCost=mstRootPathCost, voiceVlanRemarkCos_8021p=voiceVlanRemarkCos_8021p, smtpTargetMail2=smtpTargetMail2, stromControlUnit=stromControlUnit, localUserEntry=localUserEntry, ledPWR2Status=ledPWR2Status, lldpLocalPortAggregationCapability=lldpLocalPortAggregationCapability, lagIndex=lagIndex, lldpremoteDeviceEnablesystemcapabilities=lldpremoteDeviceEnablesystemcapabilities, sourceTxPort=sourceTxPort, ledAlarmStatus=ledAlarmStatus, ipSecurityEntry=ipSecurityEntry, stpBridgeInfo=stpBridgeInfo, dhcpServerVlanMask=dhcpServerVlanMask, xRingProCoupleAdd=xRingProCoupleAdd, pingIPv6Size=pingIPv6Size, erpsGroupMEL=erpsGroupMEL, mstiIDInfoTable=mstiIDInfoTable, arpSpoofingEntry=arpSpoofingEntry, lldpTransmitDelay=lldpTransmitDelay, lldpLocalPortStatusTable=lldpLocalPortStatusTable, bpduForward=bpduForward, clearMacAddressTable=clearMacAddressTable, xRingProRPairAdd=xRingProRPairAdd, dhcpServerOpt82CircuitID=dhcpServerOpt82CircuitID, lagName=lagName, queueMethod=queueMethod, systemObjectID=systemObjectID, ipv6SubnetMask=ipv6SubnetMask, sfpSerialInfoEntry=sfpSerialInfoEntry, lagPortDescription=lagPortDescription, ipSourceGuardSourceIp=ipSourceGuardSourceIp, tcpMinHdrSizeValue=tcpMinHdrSizeValue, dhcpSnoopingIndex=dhcpSnoopingIndex, xRingProRingID=xRingProRingID, qosPortRemarkCoS=qosPortRemarkCoS, rmonEventEntry=rmonEventEntry, localLoggingEntry=localLoggingEntry, lldpClearStatistics=lldpClearStatistics, erpsGroupRAPSChannelVlan=erpsGroupRAPSChannelVlan, queuetoCosMapTable=queuetoCosMapTable, sfpDMIVoltageHighWarnState=sfpDMIVoltageHighWarnState, erpsGroupRowStatus=erpsGroupRowStatus, costoQueueMapEntry=costoQueueMapEntry, portToVlanTable=portToVlanTable, macAgingTime=macAgingTime, loopback=loopback, mstStpPortPathCost=mstStpPortPathCost, ieee8021xPortIndex=ieee8021xPortIndex, macAddressInfoVlan=macAddressInfoVlan, sshInfo=sshInfo, systemTimeSetting=systemTimeSetting, nKeyAutoMode=nKeyAutoMode, eeePortTable=eeePortTable, recurringFrom=recurringFrom, advantech=advantech, dhcpServerGlobalSetting=dhcpServerGlobalSetting, mldGroupLife=mldGroupLife, dhcpServerRestart=dhcpServerRestart, poeMaxPowerAvailable=poeMaxPowerAvailable, dynamicLearned=dynamicLearned, xRingMasterStatus=xRingMasterStatus, lldpPortStatIndex=lldpPortStatIndex, sfpSerialInfoTable=sfpSerialInfoTable, mstDesignatedRootBridge=mstDesignatedRootBridge, mstRootPort=mstRootPort, mstStpPortRoles=mstStpPortRoles, dhcpServerVlanIndex=dhcpServerVlanIndex, stpPortPathCost=stpPortPathCost, loggingBufferEntry=loggingBufferEntry, egressQueueBandwidthControl=egressQueueBandwidthControl, icmpFragment=icmpFragment, dhcpServerStatus=dhcpServerStatus, sfpDMITempLowAlarmState=sfpDMITempLowAlarmState, dhcpServerPortMask=dhcpServerPortMask)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", xRingProCouplePort=xRingProCouplePort, sourceIpMask=sourceIpMask, operLastMemberQueryInterval=operLastMemberQueryInterval, lldpLocalPortStatus=lldpLocalPortStatus, accountManager=accountManager, dhcpSnoopingIp=dhcpSnoopingIp, mstInstanceID=mstInstanceID, loggingService=loggingService, dhcpServerOpt82RemoteIDFormat=dhcpServerOpt82RemoteIDFormat, macAddress=macAddress, mstStpPortStatus=mstStpPortStatus, mldStaticGroupTable=mldStaticGroupTable, poePortState=poePortState, sfpDMIVoltageLowWarnValue=sfpDMIVoltageLowWarnValue, dhcpServerVlanTable=dhcpServerVlanTable, ipSourceGuardRowStatus=ipSourceGuardRowStatus, staticMacSettingPort=staticMacSettingPort, mldleaveTx=mldleaveTx, rmonAlarmSampleType=rmonAlarmSampleType, ipSourceGuardTable=ipSourceGuardTable, macAddressInfoTable=macAddressInfoTable, eeePortIndex=eeePortIndex, mldSnoopingTable=mldSnoopingTable, igmpSnoopingVersion=igmpSnoopingVersion, saveConfiguration=saveConfiguration, loopbackRecoverTime=loopbackRecoverTime, lldpEnabled=lldpEnabled, remoteloggingFacility=remoteloggingFacility, lldpLocalDeviceChassisID=lldpLocalDeviceChassisID, mstiIDSettingMove=mstiIDSettingMove, dhcpServerState=dhcpServerState, totalRx=totalRx, sfpConnector=sfpConnector, configurationBPDUsTransmitted=configurationBPDUsTransmitted, operMldSnoopQueryInterval=operMldSnoopQueryInterval, egressBandwidthControl=egressBandwidthControl, backupType=backupType, xRingProPairPort=xRingProPairPort, dhcpServerPortHighIP=dhcpServerPortHighIP, radiusServerIP=radiusServerIP, dhcpServerLeaseTable=dhcpServerLeaseTable, interfaceVlanId=interfaceVlanId, lldpLocalDeviceCapabilitiesEnabled=lldpLocalDeviceCapabilitiesEnabled, lagStatusIndex=lagStatusIndex, ntpServerIndex=ntpServerIndex, sfpDMIRxPowerLowAlarmValue=sfpDMIRxPowerLowAlarmValue, rmonHistoryPort=rmonHistoryPort, dhcpAutoProvision=dhcpAutoProvision, lldpremoteDeviceChassisID=lldpremoteDeviceChassisID, systemUpTime=systemUpTime, designatedBridge=designatedBridge, mldStaticGroupIndex=mldStaticGroupIndex, manualTime=manualTime, protectedPortTable=protectedPortTable, description=description, egressqueueBandwidthPortIndex=egressqueueBandwidthPortIndex, smtpTargetMail8=smtpTargetMail8, currentTimeZone=currentTimeZone, lacpInfoTable=lacpInfoTable, igmpSnoopingTable=igmpSnoopingTable, lldpPortStatUnrecognizedRxTlv=lldpPortStatUnrecognizedRxTlv, vlanIndex=vlanIndex, generalQueryRx=generalQueryRx, dhcpSnoopingLeaseTime=dhcpSnoopingLeaseTime, dhcpServerVlanId=dhcpServerVlanId, igmpGroupEntry=igmpGroupEntry, portToVlanPvid=portToVlanPvid, pod=pod, sfpDMITempHighAlarmValue=sfpDMITempHighAlarmValue, xRingElite=xRingElite, voiceVlanRemark1q=voiceVlanRemark1q, xRingEliteRule=xRingEliteRule, mldRouterVlanId=mldRouterVlanId, rmonHistoryOwner=rmonHistoryOwner, dot3StatsAlignmentErrors=dot3StatsAlignmentErrors, mldotherRx=mldotherRx, xRingProChainMemberPort=xRingProChainMemberPort, localLoggingSeverity=localLoggingSeverity, erpsGroupEastLinkRPL=erpsGroupEastLinkRPL, qosMode=qosMode, vlanPortIndex=vlanPortIndex, egressBandwidthRate=egressBandwidthRate, stpPortEntry=stpPortEntry, erpsGroupEastLink=erpsGroupEastLink, ipAclEntry=ipAclEntry, stpPortStatusIndex=stpPortStatusIndex, portVlanTable=portVlanTable, lldpremoteDeviceTimetolive=lldpremoteDeviceTimetolive, xRingProInfoPort2=xRingProInfoPort2, day=day, xRingProPairMasterRingID=xRingProPairMasterRingID, snmpCommunityIndex=snmpCommunityIndex, poePortPowerLimit=poePortPowerLimit, broadcastRate=broadcastRate, mldQuerierStatus=mldQuerierStatus, sfpDMIRxPowerLowWarnState=sfpDMIRxPowerLowWarnState, lldpremoteDeviceLocalPort=lldpremoteDeviceLocalPort, portCounterClear=portCounterClear, igmpRouterTable=igmpRouterTable, qinqOuterPVID=qinqOuterPVID, interfaceIpv4Table=interfaceIpv4Table, nonRecFromHours=nonRecFromHours, ddmiAlarmDescr=ddmiAlarmDescr, lastTopologyChange=lastTopologyChange, rmonStatisticsPort=rmonStatisticsPort, dot3StatsFCSErrors=dot3StatsFCSErrors, lldpremoteDevicePortIDsubtype=lldpremoteDevicePortIDsubtype, upgradeImage=upgradeImage, loggingFileEntry=loggingFileEntry, httpSessionTimeout=httpSessionTimeout, sfpDMITxPowerLowWarnState=sfpDMITxPowerLowWarnState, lldpLocalPortEnablesystemcapabilities=lldpLocalPortEnablesystemcapabilities, lldpStatistics=lldpStatistics, loggingFileTable=loggingFileTable, lagPortLinkStatus=lagPortLinkStatus, ifOutOctets=ifOutOctets, stpStatisticEntry=stpStatisticEntry, recFromMonth=recFromMonth, tcpSYN_RSTAttack=tcpSYN_RSTAttack, factoryDefault=factoryDefault, dhcpv6DUID=dhcpv6DUID, lldpLocalPortPvid=lldpLocalPortPvid, dhcpServerOpt82HighIP=dhcpServerOpt82HighIP, sfpDMIAlarmInfoTable=sfpDMIAlarmInfoTable, macAddressInfoPort=macAddressInfoPort, lldpOverloadingTable=lldpOverloadingTable, lldpLocalPortAuto_negoAdvertisedCapabilities=lldpLocalPortAuto_negoAdvertisedCapabilities, pingTest=pingTest, mldGroupMemberPorts=mldGroupMemberPorts, rmonAlarmOwner=rmonAlarmOwner, mldGroupEntry=mldGroupEntry, telephonyOUIPortEntry=telephonyOUIPortEntry, smurfAttackValue=smurfAttackValue, mldSnoopingVersion=mldSnoopingVersion, eeeState=eeeState, linkAggregation=linkAggregation, dhcpClientOpt82RemoteIDString=dhcpClientOpt82RemoteIDString, ledType=ledType, portSettingIndex=portSettingIndex, flashPartition=flashPartition, xRingProPairSetting=xRingProPairSetting, telnetInfo=telnetInfo, tcnBPDUsTransmitted=tcnBPDUsTransmitted, ifInUcastPkts=ifInUcastPkts, specialGroupQueryTx=specialGroupQueryTx, factoryDefaultKeepFlag=factoryDefaultKeepFlag, httpService=httpService, interfaceVlanTable=interfaceVlanTable, recToMonth=recToMonth, erpsWTRTimer=erpsWTRTimer, mstStpPortP2PMacConf=mstStpPortP2PMacConf, vlanTable=vlanTable, erpsGroupEastLinkState=erpsGroupEastLinkState, flowControlConfig=flowControlConfig, lldpOverloadingOptionalTLVs=lldpOverloadingOptionalTLVs, arpSpoofingSourceMac=arpSpoofingSourceMac, destinationIpMask=destinationIpMask, ntp=ntp, igmpQuerierIP=igmpQuerierIP, lldpLocalPortStatusEntry=lldpLocalPortStatusEntry, xRingProCoupleID=xRingProCoupleID, mstStpPortStatusEntry=mstStpPortStatusEntry, xRingEliteRingIDTable=xRingEliteRingIDTable, dhcpServerVlanGW=dhcpServerVlanGW, dhcpSnoopingPorts=dhcpSnoopingPorts, erpsGroupWestLinkRPL=erpsGroupWestLinkRPL, interfaceIpv4Gateway=interfaceIpv4Gateway, mldSnoopingVlanId=mldSnoopingVlanId, stormControl=stormControl, specialGroupSourceQueryRx=specialGroupSourceQueryRx, rootPort=rootPort, dhcpv6IPAddress=dhcpv6IPAddress, lldpLocalDeviceCapabilitiesSupported=lldpLocalDeviceCapabilitiesSupported, vlanRowStatus=vlanRowStatus, interfaceIpv4Index=interfaceIpv4Index, tcpBlat=tcpBlat, cosQueue=cosQueue, igmpGroupIPaddress=igmpGroupIPaddress, tacacsServerPort=tacacsServerPort, lacpInfoMux=lacpInfoMux, lacpPriority=lacpPriority, recFromHours=recFromHours, lacpTimeout=lacpTimeout, systemLocation=systemLocation, dhcpClientOpt82Status=dhcpClientOpt82Status, portSettingEntry=portSettingEntry, igmpStaticGroupEntry=igmpStaticGroupEntry, lagStatusEntry=lagStatusEntry, management=management, igmpSnoopingState=igmpSnoopingState, xRingElitePort2Status=xRingElitePort2Status, ingressBandwidthControl=ingressBandwidthControl, stpInstance=stpInstance, lldpPortVlans=lldpPortVlans, ifOutBroadcastPkts=ifOutBroadcastPkts, snmpv3UserIndex=snmpv3UserIndex, portToVlanMembership=portToVlanMembership, staticMacSettingVlan=staticMacSettingVlan, ipAddress=ipAddress, imageSize=imageSize, lacpSystemPriority=lacpSystemPriority, staticMacSettingEntry=staticMacSettingEntry, lldpremoteDevicePsemdipowerstatus=lldpremoteDevicePsemdipowerstatus, radiusServerPort=radiusServerPort, mstiVlanListSetting=mstiVlanListSetting, interfaceIpv4Vlan=interfaceIpv4Vlan, daylightSavingOffset=daylightSavingOffset, erpsGroupInterconnected=erpsGroupInterconnected, mldSnoopLastMemberQueryCounter=mldSnoopLastMemberQueryCounter, lacpInfoPartnerSysId=lacpInfoPartnerSysId, snmpTrapHostIpaddress=snmpTrapHostIpaddress, clearigmpStatistics=clearigmpStatistics, sfpDMIVoltageLowAlarmState=sfpDMIVoltageLowAlarmState, nonRecFromDay=nonRecFromDay, smtpTargetMail7=smtpTargetMail7, localDevice=localDevice, securityLoginHttpState=securityLoginHttpState, poePortStatusEntry=poePortStatusEntry, sfpDMITxPowerHighAlarmValue=sfpDMITxPowerHighAlarmValue, queryMaxResponseInterval=queryMaxResponseInterval, cableLengthTx=cableLengthTx, rmonAlarmIndex=rmonAlarmIndex, sfpDMITxBasisLowWarnState=sfpDMITxBasisLowWarnState, dot3StatsExcessiveCollisions=dot3StatsExcessiveCollisions, smurfAttack=smurfAttack, telnetNetworkPort=telnetNetworkPort, interfaceIpv4Entry=interfaceIpv4Entry, queuetoCosIndex=queuetoCosIndex, egressBandwidthEntry=egressBandwidthEntry, lldpremoteDeviceAggregationCapability=lldpremoteDeviceAggregationCapability, arpSpoofingSourceIp=arpSpoofingSourceIp, sfpDMITxBasisHighWarnValue=sfpDMITxBasisHighWarnValue, ipSourceGuardEntry=ipSourceGuardEntry, lldpLocalPortSupportedsystemcapabilities=lldpLocalPortSupportedsystemcapabilities, land=land, erpsGroupTable=erpsGroupTable, mstInstanceInfoID=mstInstanceInfoID, sfpPortIndex=sfpPortIndex, mldgeneralQueryRx=mldgeneralQueryRx, ipSourceGuardPort=ipSourceGuardPort, factoryDefaultAction=factoryDefaultAction, dhcpServerLeaseType=dhcpServerLeaseType, ipAclAction=ipAclAction, gvrpStatus=gvrpStatus, qosBasicPortIndex=qosBasicPortIndex, sfpDMIRxPowerLowWarnValue=sfpDMIRxPowerLowWarnValue, sfpDMITxPower=sfpDMITxPower, stpPriorityDefault=stpPriorityDefault, localUserIndex=localUserIndex, trapObject=trapObject, queuDscp=queuDscp, ipSourceGuard=ipSourceGuard, igmpStaticGroupRowStatus=igmpStaticGroupRowStatus, voiceVlan=voiceVlan)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", dhcpClientOpt82CircuitIDString=dhcpClientOpt82CircuitIDString, securityLoginSSHState=securityLoginSSHState, macAclPortList=macAclPortList, sfpDMITempLowWarnState=sfpDMITempLowWarnState, poePortTemp=poePortTemp, protectedPortType=protectedPortType, dmacEqualsmac=dmacEqualsmac, macAclAction=macAclAction, lldpLocalPortAggregationPortID=lldpLocalPortAggregationPortID, ledIndication=ledIndication, lacpInfoLagIndex=lacpInfoLagIndex, arpSpoofing=arpSpoofing, dhcpServerLeaseIp=dhcpServerLeaseIp, qinqOuterMode=qinqOuterMode, rmonStatisticsBroadcast=rmonStatisticsBroadcast, ageouts=ageouts, monitorSessionState=monitorSessionState, stromControlPortIndex=stromControlPortIndex, securityLoginType=securityLoginType, lldpLocalPortIndex=lldpLocalPortIndex, smtpClient=smtpClient, xRingProCoupleMasterRingID=xRingProCoupleMasterRingID, dhcpServerLeaseEndTime=dhcpServerLeaseEndTime, rmonEventDescription=rmonEventDescription, pingSize=pingSize, qosPortRemarkIPPrecedence=qosPortRemarkIPPrecedence, immediateLeave=immediateLeave, invalidRx=invalidRx, dot3InPauseFrames=dot3InPauseFrames, ifOutNUcastPkts=ifOutNUcastPkts, backupAction=backupAction, dosportIndex=dosportIndex, snmpv3UserRowStatus=snmpv3UserRowStatus, igmpSnoopingReportSuppression=igmpSnoopingReportSuppression, snmpv3UserAuthProtocol=snmpv3UserAuthProtocol, subnetMask=subnetMask, lacpInfoSel=lacpInfoSel, portToVlanVlanIndex=portToVlanVlanIndex, qosBasicPortEntry=qosBasicPortEntry, snmpCommunityString=snmpCommunityString, dot3OutPauseFrames=dot3OutPauseFrames, cableLengthC=cableLengthC, lacpInfoReceiv=lacpInfoReceiv, poePortSettingTable=poePortSettingTable, qosPortSettingTable=qosPortSettingTable, channelD=channelD, dhcpServerOpt82RemoteID=dhcpServerOpt82RemoteID, erpsGroupWestLinkState=erpsGroupWestLinkState, mstiIDInfoEntry=mstiIDInfoEntry, mldSnooping=mldSnooping, gmrpMulticastGroupMemberPorts=gmrpMulticastGroupMemberPorts, macAclRowStatus=macAclRowStatus, snmpTrapHostCommunityName=snmpTrapHostCommunityName, lldpLocalPortIeee8023MaxFrameSize=lldpLocalPortIeee8023MaxFrameSize, snmpv3UserAccessRight=snmpv3UserAccessRight, buildVersion=buildVersion, flowControlStatus=flowControlStatus, portSecurityTable=portSecurityTable, ieee8021xAccountingPort=ieee8021xAccountingPort, mldQuerierVlanId=mldQuerierVlanId, ipv6InUseRouter=ipv6InUseRouter, imageVersion=imageVersion, poePortVoltage=poePortVoltage, interCurrIpv4Gateway=interCurrIpv4Gateway)
