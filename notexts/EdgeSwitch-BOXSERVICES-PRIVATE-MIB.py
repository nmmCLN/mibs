#
# PySNMP MIB module EdgeSwitch-BOXSERVICES-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/edgeswitch/EdgeSwitch-BOXSERVICES-PRIVATE-MIB
# Produced by pysmi-1.1.8 at Fri Jul  8 09:17:55 2022
# On host fv-az445-316 platform Linux version 5.13.0-1031-azure by user runner
# Using Python version 3.10.5 (main, Jun  7 2022, 06:49:50) [GCC 9.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, Bits, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, TimeTicks, IpAddress, Counter32, iso, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Bits", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "TimeTicks", "IpAddress", "Counter32", "iso", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fastPathBoxServices = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43))
fastPathBoxServices.setRevisions(('2011-01-26 00:00', '2008-02-22 00:00',))
if mibBuilder.loadTexts: fastPathBoxServices.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathBoxServices.setOrganization('Broadcom Inc')
class BoxsTemperatureStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("low", 0), ("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notpresent", 5), ("notoperational", 6))

boxServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1))
boxServicesNormalTempRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMin.setStatus('current')
boxServicesNormalTempRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMax.setStatus('current')
boxServicesTemperatureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesTemperatureTrapEnable.setStatus('current')
boxServicesPSMStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesPSMStateTrapEnable.setStatus('current')
boxServicesFanStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesFanStateTrapEnable.setStatus('current')
boxServicesThermalShutdownSensor = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxServicesThermalShutdownSensor.setStatus('current')
boxServicesThermalShutdownTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxServicesThermalShutdownTemperature.setStatus('current')
boxServicesFansTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6), )
if mibBuilder.loadTexts: boxServicesFansTable.setStatus('current')
boxServicesFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1), ).setIndexNames((0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesFanUnitIndex"), (0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"))
if mibBuilder.loadTexts: boxServicesFansEntry.setStatus('current')
boxServicesFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanUnitIndex.setStatus('current')
boxServicesFansIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFansIndex.setStatus('current')
boxServicesFanItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemType.setStatus('current')
boxServicesFanItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3), ("powering", 4), ("nopower", 5), ("notpowering", 6), ("incompatible", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemState.setStatus('current')
boxServicesFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanSpeed.setStatus('current')
boxServicesFanDutyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanDutyLevel.setStatus('current')
boxServicesPowSuppliesTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7), )
if mibBuilder.loadTexts: boxServicesPowSuppliesTable.setStatus('current')
boxServicesPowSuppliesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7, 1), ).setIndexNames((0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesPowerSuppUnitIndex"), (0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"))
if mibBuilder.loadTexts: boxServicesPowSuppliesEntry.setStatus('current')
boxServicesPowerSuppUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowerSuppUnitIndex.setStatus('current')
boxServicesPowSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyIndex.setStatus('current')
boxServicesPowSupplyItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemType.setStatus('current')
boxServicesPowSupplyItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3), ("powering", 4), ("nopower", 5), ("notpowering", 6), ("incompatible", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemState.setStatus('current')
boxServicesTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8), )
if mibBuilder.loadTexts: boxServicesTempSensorsTable.setStatus('current')
boxServicesTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1), ).setIndexNames((0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesUnitIndex"), (0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"))
if mibBuilder.loadTexts: boxServicesTempSensorsEntry.setStatus('current')
boxServicesUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesUnitIndex.setStatus('current')
boxServicesTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorIndex.setStatus('current')
boxServicesTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2), ("fixedAC", 3), ("removableDC", 4), ("fixedDC", 5), ("removableAC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorType.setStatus('current')
boxServicesTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1, 4), BoxsTemperatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorState.setStatus('obsolete')
boxServicesTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorTemperature.setStatus('current')
boxServicesTempUnitTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 15), )
if mibBuilder.loadTexts: boxServicesTempUnitTable.setStatus('current')
boxServicesTempUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 15, 1), ).setIndexNames((0, "EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesTempUnitIndex"))
if mibBuilder.loadTexts: boxServicesTempUnitEntry.setStatus('current')
boxServicesTempUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempUnitIndex.setStatus('current')
boxServicesTempUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 15, 1, 2), BoxsTemperatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempUnitState.setStatus('current')
boxServicesTempUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempUnitTemperature.setStatus('current')
boxServicesNotificationsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 2))
boxsItemStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("insertion", 1), ("removal", 2), ("becomeoperational", 3), ("failure", 4), ("losepower", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsItemStateChangeEvent.setStatus('current')
boxsTemperatureChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abovethreshold", 1), ("belowthreshold", 2), ("withinnormalrange", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureChangeEvent.setStatus('current')
boxsTemperatureStatusCurrentEvent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 2, 3), BoxsTemperatureStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureStatusCurrentEvent.setStatus('current')
boxsTemperatureStatusPreviousEvent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 2, 4), BoxsTemperatureStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: boxsTemperatureStatusPreviousEvent.setStatus('current')
fastPathBoxServicesTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0))
boxsFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0, 1)).setObjects(("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsFanStateChange.setStatus('current')
boxsPowSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0, 2)).setObjects(("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsPowSupplyStateChange.setStatus('current')
boxsTemperatureChange = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0, 3)).setObjects(("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureChangeEvent"))
if mibBuilder.loadTexts: boxsTemperatureChange.setStatus('obsolete')
boxsThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0, 4)).setObjects(("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesThermalShutdownSensor"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesThermalShutdownTemperature"))
if mibBuilder.loadTexts: boxsThermalShutdown.setStatus('current')
boxsTemperatureStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 0, 5)).setObjects(("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxServicesTempUnitIndex"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureStatusCurrentEvent"), ("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureStatusPreviousEvent"))
if mibBuilder.loadTexts: boxsTemperatureStateChange.setStatus('current')
boxsLocatorLedConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 4))
boxsLocatorLedUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedUnit.setStatus('current')
boxsLocatorLedTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 4, 2), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedTime.setStatus('current')
boxsLocatorLedEnable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 43, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxsLocatorLedEnable.setStatus('current')
mibBuilder.exportSymbols("EdgeSwitch-BOXSERVICES-PRIVATE-MIB", boxServicesUnitIndex=boxServicesUnitIndex, boxsItemStateChangeEvent=boxsItemStateChangeEvent, boxServicesTemperatureTrapEnable=boxServicesTemperatureTrapEnable, boxServicesThermalShutdownSensor=boxServicesThermalShutdownSensor, boxServicesFanStateTrapEnable=boxServicesFanStateTrapEnable, boxsPowSupplyStateChange=boxsPowSupplyStateChange, boxsLocatorLedTime=boxsLocatorLedTime, boxServicesNormalTempRangeMin=boxServicesNormalTempRangeMin, boxServicesFanUnitIndex=boxServicesFanUnitIndex, boxServicesFanSpeed=boxServicesFanSpeed, boxServicesTempSensorType=boxServicesTempSensorType, boxServicesTempSensorState=boxServicesTempSensorState, boxServicesTempSensorTemperature=boxServicesTempSensorTemperature, boxsTemperatureStateChange=boxsTemperatureStateChange, boxServicesFansEntry=boxServicesFansEntry, boxServicesTempSensorsEntry=boxServicesTempSensorsEntry, boxsFanStateChange=boxsFanStateChange, boxServicesTempSensorIndex=boxServicesTempSensorIndex, boxServicesFanItemState=boxServicesFanItemState, BoxsTemperatureStatus=BoxsTemperatureStatus, boxServicesGroup=boxServicesGroup, boxServicesFansTable=boxServicesFansTable, boxServicesFanDutyLevel=boxServicesFanDutyLevel, boxServicesPowSuppliesEntry=boxServicesPowSuppliesEntry, boxServicesNormalTempRangeMax=boxServicesNormalTempRangeMax, boxServicesNotificationsGroup=boxServicesNotificationsGroup, boxsLocatorLedConfigGroup=boxsLocatorLedConfigGroup, boxServicesTempUnitTemperature=boxServicesTempUnitTemperature, boxServicesPowSupplyIndex=boxServicesPowSupplyIndex, boxServicesPSMStateTrapEnable=boxServicesPSMStateTrapEnable, fastPathBoxServicesTraps=fastPathBoxServicesTraps, boxServicesTempSensorsTable=boxServicesTempSensorsTable, fastPathBoxServices=fastPathBoxServices, PYSNMP_MODULE_ID=fastPathBoxServices, boxServicesFanItemType=boxServicesFanItemType, boxServicesThermalShutdownTemperature=boxServicesThermalShutdownTemperature, boxsLocatorLedEnable=boxsLocatorLedEnable, boxServicesTempUnitIndex=boxServicesTempUnitIndex, boxServicesPowSupplyItemType=boxServicesPowSupplyItemType, boxsTemperatureChangeEvent=boxsTemperatureChangeEvent, boxsThermalShutdown=boxsThermalShutdown, boxServicesTempUnitTable=boxServicesTempUnitTable, boxsTemperatureStatusCurrentEvent=boxsTemperatureStatusCurrentEvent, boxServicesPowSuppliesTable=boxServicesPowSuppliesTable, boxServicesPowerSuppUnitIndex=boxServicesPowerSuppUnitIndex, boxServicesTempUnitEntry=boxServicesTempUnitEntry, boxServicesPowSupplyItemState=boxServicesPowSupplyItemState, boxsTemperatureStatusPreviousEvent=boxsTemperatureStatusPreviousEvent, boxServicesTempUnitState=boxServicesTempUnitState, boxsLocatorLedUnit=boxsLocatorLedUnit, boxServicesFansIndex=boxServicesFansIndex, boxsTemperatureChange=boxsTemperatureChange)
