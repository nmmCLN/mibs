#
# PySNMP MIB module CTRON-FNBTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-FNBTR-MIB
# Produced by pysmi-1.1.8 at Fri Dec  2 15:52:24 2022
# On host fv-az267-189 platform Linux version 5.15.0-1023-azure by user runner
# Using Python version 3.10.8 (main, Oct 18 2022, 06:44:51) [GCC 11.2.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ctTokenRingFnb, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctTokenRingFnb")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter64, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter64", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ctronFnbTR = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1))
ctronMultiFnbTR = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2))
ctronFnbTRTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: ctronFnbTRTable.setStatus('mandatory')
ctronFnbTREntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "CTRON-FNBTR-MIB", "ctronFnbTRIndex"))
if mibBuilder.loadTexts: ctronFnbTREntry.setStatus('mandatory')
ctronFnbTRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronFnbTRIndex.setStatus('mandatory')
ctronFnbConnectLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbConnectLeft.setStatus('mandatory')
ctronFnbConnectRight = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbConnectRight.setStatus('mandatory')
ctronFnbBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbBypass.setStatus('mandatory')
ctronFnbRPBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbRPBypass.setStatus('mandatory')
ctronMultiFnbTRTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: ctronMultiFnbTRTable.setStatus('mandatory')
ctronMultiFnbTREntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-FNBTR-MIB", "ctronMultiFnbTRIndex"), (0, "CTRON-FNBTR-MIB", "ctronMultiFnbRingIndex"))
if mibBuilder.loadTexts: ctronMultiFnbTREntry.setStatus('mandatory')
ctronMultiFnbTRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbTRIndex.setStatus('mandatory')
ctronMultiFnbRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbRingIndex.setStatus('mandatory')
ctronMultiFnbConnectLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbConnectLeft.setStatus('mandatory')
ctronMultiFnbConnectRight = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbConnectRight.setStatus('mandatory')
ctronMultiFnbBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronMultiFnbBypass.setStatus('mandatory')
ctronMultiFnbRPBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronMultiFnbRPBypass.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-FNBTR-MIB", ctronFnbTRIndex=ctronFnbTRIndex, ctronFnbTR=ctronFnbTR, ctronFnbTRTable=ctronFnbTRTable, ctronMultiFnbTR=ctronMultiFnbTR, ctronFnbConnectLeft=ctronFnbConnectLeft, ctronMultiFnbConnectRight=ctronMultiFnbConnectRight, ctronMultiFnbRPBypass=ctronMultiFnbRPBypass, ctronMultiFnbTRTable=ctronMultiFnbTRTable, ctronFnbTREntry=ctronFnbTREntry, ctronFnbRPBypass=ctronFnbRPBypass, ctronFnbConnectRight=ctronFnbConnectRight, ctronMultiFnbRingIndex=ctronMultiFnbRingIndex, ctronMultiFnbConnectLeft=ctronMultiFnbConnectLeft, ctronFnbBypass=ctronFnbBypass, ctronMultiFnbBypass=ctronMultiFnbBypass, ctronMultiFnbTREntry=ctronMultiFnbTREntry, ctronMultiFnbTRIndex=ctronMultiFnbTRIndex)
