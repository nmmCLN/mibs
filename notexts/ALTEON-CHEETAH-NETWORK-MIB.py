#
# PySNMP MIB module ALTEON-CHEETAH-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-CHEETAH-NETWORK-MIB
# Produced by pysmi-1.1.8 at Thu Jan  5 08:58:10 2023
# On host fv-az351-145 platform Linux version 5.15.0-1024-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Unsigned32, ModuleIdentity, IpAddress, NotificationType, MibIdentifier, iso, TimeTicks, Counter64, ObjectIdentity, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Unsigned32", "ModuleIdentity", "IpAddress", "NotificationType", "MibIdentifier", "iso", "TimeTicks", "Counter64", "ObjectIdentity", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
layer3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3))
layer3.setRevisions(('2004-09-01 00:00',))
if mibBuilder.loadTexts: layer3.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: layer3.setOrganization('Nortel Networks')
layer3Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1))
layer3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2))
layer3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3))
layer3Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4))
ipInterfaceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1))
ipGatewayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2))
ipStaticRouteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3))
ipForwardCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4))
vrrpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6))
arpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 7))
ipBootpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8))
dnsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9))
ipNwfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10))
ipRmapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11))
bgpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12))
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13))
ipGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 14))
ipStaticArpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15))
rip2Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 2))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 3))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 4))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 5))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6))
clearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7))
ip6Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10))
icmp6Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11))
ip6gwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12))
rip2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13))
ipRoutingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1))
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2))
vrrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3))
ospfinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4))
gatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5))
nbrcacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7))
ipRoute6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8))
ipIntfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9))
rip2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10))
rip2RoutesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11))
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1))
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('current')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('current')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('current')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('current')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('current')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('current')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('obsolete')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('current')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('current')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('current')
ipCurCfgIntfIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIpVer.setStatus('current')
ipCurCfgIntfIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIpv6Addr.setStatus('current')
ipCurCfgIntfPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfPrefixLen.setStatus('current')
ipCurCfgIntfRouteAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfRouteAdv.setStatus('current')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('current')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('current')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('current')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('current')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('current')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('obsolete')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('current')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('current')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('current')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('current')
ipNewCfgIntfIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfIpVer.setStatus('current')
ipNewCfgIntfIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfIpv6Addr.setStatus('current')
ipNewCfgIntfPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfPrefixLen.setStatus('current')
ipNewCfgIntfRouteAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfRouteAdv.setStatus('current')
ipCurCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwMetric.setStatus('current')
ipNewCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwMetric.setStatus('current')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('current')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('current')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('current')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('current')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('current')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('current')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('current')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('current')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('current')
ipCurCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwVlan.setStatus('current')
ipCurCfgGwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwPriority.setStatus('current')
ipCurCfgGwIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIpVer.setStatus('current')
ipCurCfgGwIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIpv6Addr.setStatus('current')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('current')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('current')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('current')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('current')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('current')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('current')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('current')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('current')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('current')
ipNewCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwVlan.setStatus('current')
ipNewCfgGwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwPriority.setStatus('current')
ipNewCfgGwIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwIpVer.setStatus('current')
ipNewCfgGwIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 2, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwIpv6Addr.setStatus('current')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('current')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('current')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('current')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('current')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('current')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('current')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('current')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('current')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('current')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('current')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('current')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('current')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('current')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('current')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('current')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('current')
ripCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1), )
if mibBuilder.loadTexts: ripCurCfgIntfTable.setStatus('current')
ripCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ripCurCfgIntfIndex"))
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setStatus('current')
ripCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setStatus('current')
ripCurCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setStatus('current')
ripCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfState.setStatus('current')
ripCurCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfListen.setStatus('current')
ripCurCfgIntfDefListen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfDefListen.setStatus('obsolete')
ripCurCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setStatus('current')
ripCurCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setStatus('current')
ripCurCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setStatus('current')
ripCurCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setStatus('current')
ripCurCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setStatus('current')
ripCurCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setStatus('current')
ripCurCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfKey.setStatus('current')
ripCurCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setStatus('current')
ripNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2), )
if mibBuilder.loadTexts: ripNewCfgIntfTable.setStatus('current')
ripNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ripNewCfgIntfIndex"))
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setStatus('current')
ripNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setStatus('current')
ripNewCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setStatus('current')
ripNewCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setStatus('current')
ripNewCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfListen.setStatus('current')
ripNewCfgIntfDefListen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfDefListen.setStatus('obsolete')
ripNewCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setStatus('current')
ripNewCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setStatus('current')
ripNewCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setStatus('current')
ripNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfState.setStatus('current')
ripNewCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setStatus('current')
ripNewCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setStatus('current')
ripNewCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfKey.setStatus('current')
ripNewCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setStatus('current')
ripGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3))
rip2CurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgState.setStatus('current')
rip2NewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgState.setStatus('current')
rip2CurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setStatus('current')
rip2NewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setStatus('current')
rip2CurCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgVip.setStatus('current')
rip2NewCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgVip.setStatus('current')
rip2CurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgStaticSupply.setStatus('current')
rip2NewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 18, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgStaticSupply.setStatus('current')
ipFwdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1))
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('current')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('current')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('current')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('current')
ipFwdCurCfgNoICMPRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgNoICMPRedirect.setStatus('current')
ipFwdNewCfgNoICMPRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgNoICMPRedirect.setStatus('current')
ipFwdCurCfgRtCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgRtCache.setStatus('current')
ipFwdNewCfgRtCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgRtCache.setStatus('current')
ipFwdPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdPortTableMaxSize.setStatus('current')
ipFwdCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 3), )
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setStatus('current')
ipFwdCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipFwdCurCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setStatus('current')
ipFwdCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setStatus('current')
ipFwdCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setStatus('current')
ipFwdNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 4), )
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setStatus('current')
ipFwdNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipFwdNewCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setStatus('current')
ipFwdNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setStatus('current')
ipFwdNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setStatus('current')
ipFwdLocalTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdLocalTableMaxSize.setStatus('current')
ipFwdCurCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 6), )
if mibBuilder.loadTexts: ipFwdCurCfgLocalTable.setStatus('current')
ipFwdCurCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipFwdCurCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgLocalEntry.setStatus('current')
ipFwdCurCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalIndex.setStatus('current')
ipFwdCurCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setStatus('current')
ipFwdCurCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setStatus('current')
ipFwdNewCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7), )
if mibBuilder.loadTexts: ipFwdNewCfgLocalTable.setStatus('current')
ipFwdNewCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipFwdNewCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgLocalEntry.setStatus('current')
ipFwdNewCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgLocalIndex.setStatus('current')
ipFwdNewCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setStatus('current')
ipFwdNewCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setStatus('current')
ipFwdNewCfgLocalDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFwdNewCfgLocalDelete.setStatus('current')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('current')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('current')
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('current')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('current')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('current')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('current')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('current')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('current')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('current')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('current')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('current')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('current')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('current')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('current')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('current')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('current')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('current')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('current')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('current')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('current')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('current')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('current')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('current')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('current')
vrrpCurCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setStatus('current')
vrrpNewCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setStatus('current')
vrrpCurCfgGenHoldoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHoldoff.setStatus('current')
vrrpNewCfgGenHoldoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHoldoff.setStatus('current')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('current')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('current')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('current')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('current')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('current')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('current')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('current')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('current')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('current')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('current')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('current')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('current')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('current')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('current')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('current')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('current')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('current')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('current')
vrrpCurCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setStatus('current')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('current')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('current')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('current')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('current')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('current')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('current')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('current')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('current')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('current')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('current')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('current')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('current')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('current')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('current')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('current')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('current')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('current')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('current')
vrrpNewCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setStatus('current')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('current')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 6), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('current')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('current')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('current')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('current')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('current')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('current')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('current')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('current')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('current')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('current')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('current')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('current')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('current')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('current')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('current')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('current')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('current')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('current')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('current')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('current')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('current')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('current')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('current')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('current')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('current')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('current')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('current')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('current')
vrrpCurCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setStatus('current')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('current')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('current')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('current')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('current')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('current')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('current')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('current')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('current')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('current')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('current')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('current')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('current')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('current')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('current')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('current')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('current')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('current')
vrrpNewCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setStatus('current')
vrrpVirtRtrVrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrVrGrpTableMaxSize.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTable.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpCurCfgVirtRtrVrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTableEntry.setStatus('current')
vrrpCurCfgVirtRtrVrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpIndx.setStatus('current')
vrrpCurCfgVirtRtrVrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpName.setStatus('current')
vrrpCurCfgVirtRtrVrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpState.setStatus('current')
vrrpCurCfgVirtRtrVrGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpBmap.setStatus('current')
vrrpCurCfgVirtRtrVrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpPriority.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckIpIntf.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckVlanPort.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckL4Port.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckRServer.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckHsrp.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckHsrv.setStatus('current')
vrrpCurCfgVirtRtrVrGrpTckVirtRtrNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrVrGrpTckVirtRtrNo.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTable.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpNewCfgVirtRtrVrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTableEntry.setStatus('current')
vrrpNewCfgVirtRtrVrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpIndx.setStatus('current')
vrrpNewCfgVirtRtrVrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpName.setStatus('current')
vrrpNewCfgVirtRtrVrGrpAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpAdd.setStatus('current')
vrrpNewCfgVirtRtrVrGrpRem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpRem.setStatus('current')
vrrpNewCfgVirtRtrVrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpState.setStatus('current')
vrrpNewCfgVirtRtrVrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpDelete.setStatus('current')
vrrpNewCfgVirtRtrVrGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpBmap.setStatus('current')
vrrpNewCfgVirtRtrVrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpPriority.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckIpIntf.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckVlanPort.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckL4Port.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckRServer.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckHsrp.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckHsrv.setStatus('current')
vrrpNewCfgVirtRtrVrGrpTckVirtRtrNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 6, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrVrGrpTckVirtRtrNo.setStatus('current')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('current')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('current')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('current')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('current')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('current')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('current')
ipNwfTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNwfTableMax.setStatus('current')
ipCurCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2), )
if mibBuilder.loadTexts: ipCurCfgNwfTable.setStatus('current')
ipCurCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgNwfIndex"))
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setStatus('current')
ipCurCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setStatus('current')
ipCurCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setStatus('current')
ipCurCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfMask.setStatus('current')
ipCurCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfState.setStatus('current')
ipNewCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3), )
if mibBuilder.loadTexts: ipNewCfgNwfTable.setStatus('current')
ipNewCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgNwfIndex"))
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setStatus('current')
ipNewCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setStatus('current')
ipNewCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setStatus('current')
ipNewCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfMask.setStatus('current')
ipNewCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfState.setStatus('current')
ipNewCfgNwfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setStatus('current')
ipRmapTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRmapTableMax.setStatus('current')
ipCurCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2), )
if mibBuilder.loadTexts: ipCurCfgRmapTable.setStatus('current')
ipCurCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgRmapIndex"))
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setStatus('current')
ipCurCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setStatus('current')
ipCurCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapLp.setStatus('current')
ipCurCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setStatus('current')
ipCurCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setStatus('current')
ipCurCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapWeight.setStatus('current')
ipCurCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapState.setStatus('current')
ipCurCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapAp.setStatus('current')
ipCurCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setStatus('current')
ipNewCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3), )
if mibBuilder.loadTexts: ipNewCfgRmapTable.setStatus('current')
ipNewCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgRmapIndex"))
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setStatus('current')
ipNewCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setStatus('current')
ipNewCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapLp.setStatus('current')
ipNewCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setStatus('current')
ipNewCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setStatus('current')
ipNewCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapWeight.setStatus('current')
ipNewCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapState.setStatus('current')
ipNewCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapAp.setStatus('current')
ipNewCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setStatus('current')
ipNewCfgRmapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setStatus('current')
ipAlistTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlistTableMax.setStatus('current')
ipCurCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5), )
if mibBuilder.loadTexts: ipCurCfgAlistTable.setStatus('current')
ipCurCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgAlistRmapIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setStatus('current')
ipCurCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setStatus('current')
ipCurCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setStatus('current')
ipCurCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setStatus('current')
ipCurCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setStatus('current')
ipCurCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistAction.setStatus('current')
ipCurCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistState.setStatus('current')
ipNewCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6), )
if mibBuilder.loadTexts: ipNewCfgAlistTable.setStatus('current')
ipNewCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgAlistRmapIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgAlistIndex"))
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setStatus('current')
ipNewCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setStatus('current')
ipNewCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setStatus('current')
ipNewCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setStatus('current')
ipNewCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setStatus('current')
ipNewCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistAction.setStatus('current')
ipNewCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistState.setStatus('current')
ipNewCfgAlistDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setStatus('current')
ipAspathTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAspathTableMax.setStatus('current')
ipCurCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8), )
if mibBuilder.loadTexts: ipCurCfgAspathTable.setStatus('current')
ipCurCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgAspathRmapIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAspathEntry.setStatus('current')
ipCurCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathRmapIndex.setStatus('current')
ipCurCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathIndex.setStatus('current')
ipCurCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAS.setStatus('current')
ipCurCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAction.setStatus('current')
ipCurCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathState.setStatus('current')
ipNewCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9), )
if mibBuilder.loadTexts: ipNewCfgAspathTable.setStatus('current')
ipNewCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgAspathRmapIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgAspathIndex"))
if mibBuilder.loadTexts: ipNewCfgAspathEntry.setStatus('current')
ipNewCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathRmapIndex.setStatus('current')
ipNewCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathIndex.setStatus('current')
ipNewCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAS.setStatus('current')
ipNewCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAction.setStatus('current')
ipNewCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathState.setStatus('current')
ipNewCfgAspathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathDelete.setStatus('current')
bgpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1))
bgpCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgState.setStatus('current')
bgpNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgState.setStatus('current')
bgpCurCfgLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgLocalPref.setStatus('current')
bgpNewCfgLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgLocalPref.setStatus('current')
bgpCurCfgMaxASPath = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgMaxASPath.setStatus('current')
bgpNewCfgMaxASPath = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpNewCfgMaxASPath.setStatus('current')
bgpPeerTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerTableMax.setStatus('current')
bgpCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3), )
if mibBuilder.loadTexts: bgpCurCfgPeerTable.setStatus('current')
bgpCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "bgpCurCfgPeerIndex"))
if mibBuilder.loadTexts: bgpCurCfgPeerEntry.setStatus('current')
bgpCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerIndex.setStatus('current')
bgpCurCfgPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRemoteAddr.setStatus('current')
bgpCurCfgPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerRemoteAs.setStatus('current')
bgpCurCfgPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerTtl.setStatus('current')
bgpCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerState.setStatus('current')
bgpCurCfgPeerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerMetric.setStatus('current')
bgpCurCfgPeerDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerDefaultAction.setStatus('current')
bgpCurCfgPeerOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerOspfState.setStatus('current')
bgpCurCfgPeerFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerFixedState.setStatus('current')
bgpCurCfgPeerStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerStaticState.setStatus('current')
bgpCurCfgPeerVipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerVipState.setStatus('current')
bgpCurCfgPeerInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerInRmapList.setStatus('current')
bgpCurCfgPeerOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgPeerOutRmapList.setStatus('current')
bgpNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4), )
if mibBuilder.loadTexts: bgpNewCfgPeerTable.setStatus('current')
bgpNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "bgpNewCfgPeerIndex"))
if mibBuilder.loadTexts: bgpNewCfgPeerEntry.setStatus('current')
bgpNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerIndex.setStatus('current')
bgpNewCfgPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoteAddr.setStatus('current')
bgpNewCfgPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoteAs.setStatus('current')
bgpNewCfgPeerTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerTtl.setStatus('current')
bgpNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerState.setStatus('current')
bgpNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerDelete.setStatus('current')
bgpNewCfgPeerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerMetric.setStatus('current')
bgpNewCfgPeerDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("import", 2), ("originate", 3), ("redistribute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerDefaultAction.setStatus('current')
bgpNewCfgPeerOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerOspfState.setStatus('current')
bgpNewCfgPeerFixedState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerFixedState.setStatus('current')
bgpNewCfgPeerStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerStaticState.setStatus('current')
bgpNewCfgPeerVipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerVipState.setStatus('current')
bgpNewCfgPeerInRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerInRmapList.setStatus('current')
bgpNewCfgPeerOutRmapList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgPeerOutRmapList.setStatus('current')
bgpNewCfgPeerAddInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAddInRmap.setStatus('current')
bgpNewCfgPeerAddOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerAddOutRmap.setStatus('current')
bgpNewCfgPeerRemoveInRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoveInRmap.setStatus('current')
bgpNewCfgPeerRemoveOutRmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 4, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgPeerRemoveOutRmap.setStatus('current')
bgpAggrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpAggrTableMax.setStatus('current')
bgpCurCfgAggrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6), )
if mibBuilder.loadTexts: bgpCurCfgAggrTable.setStatus('current')
bgpCurCfgAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "bgpCurCfgAggrIndex"))
if mibBuilder.loadTexts: bgpCurCfgAggrEntry.setStatus('current')
bgpCurCfgAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrIndex.setStatus('current')
bgpCurCfgAggrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrAddr.setStatus('current')
bgpCurCfgAggrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrMask.setStatus('current')
bgpCurCfgAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpCurCfgAggrState.setStatus('current')
bgpNewCfgAggrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7), )
if mibBuilder.loadTexts: bgpNewCfgAggrTable.setStatus('current')
bgpNewCfgAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "bgpNewCfgAggrIndex"))
if mibBuilder.loadTexts: bgpNewCfgAggrEntry.setStatus('current')
bgpNewCfgAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpNewCfgAggrIndex.setStatus('current')
bgpNewCfgAggrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrAddr.setStatus('current')
bgpNewCfgAggrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrMask.setStatus('current')
bgpNewCfgAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrState.setStatus('current')
bgpNewCfgAggrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bgpNewCfgAggrDelete.setStatus('current')
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('current')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('current')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('current')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('current')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('current')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('current')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('current')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('current')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('current')
ospfCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgState.setStatus('current')
ospfNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgState.setStatus('current')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('current')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgAreaIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgAreaId"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('current')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('current')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('current')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('current')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('current')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('current')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgAreaIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgAreaId"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('current')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('current')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('current')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('current')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('current')
ospfCurCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 12), )
if mibBuilder.loadTexts: ospfCurCfgHostTable.setStatus('current')
ospfCurCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgHostIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgHostIpAddr"))
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setStatus('current')
ospfCurCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setStatus('current')
ospfCurCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setStatus('current')
ospfCurCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setStatus('current')
ospfNewCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 13), )
if mibBuilder.loadTexts: ospfNewCfgHostTable.setStatus('current')
ospfNewCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgHostIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgHostIpAddr"))
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setStatus('current')
ospfNewCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setStatus('current')
ospfNewCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setStatus('current')
ospfNewCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setStatus('current')
ospfMdkeyTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setStatus('current')
ospfCurCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 5), )
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setStatus('current')
ospfCurCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setStatus('current')
ospfCurCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setStatus('current')
ospfCurCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setStatus('current')
ospfNewCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 6), )
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setStatus('current')
ospfNewCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setStatus('current')
ospfNewCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setStatus('current')
ospfNewCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setStatus('current')
ospfNewCfgMdkeyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setStatus('current')
ospfCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 7), )
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setStatus('current')
ospfCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setStatus('current')
ospfCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setStatus('current')
ospfCurCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfId.setStatus('current')
ospfCurCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setStatus('current')
ospfNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 8), )
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setStatus('current')
ospfNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setStatus('current')
ospfNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setStatus('current')
ospfNewCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfId.setStatus('current')
ospfNewCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setStatus('current')
ospfCurCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9), )
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setStatus('current')
ospfCurCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setStatus('current')
ospfCurCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setStatus('current')
ospfCurCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setStatus('current')
ospfCurCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setStatus('current')
ospfCurCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setStatus('current')
ospfNewCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10), )
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setStatus('current')
ospfNewCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setStatus('current')
ospfNewCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setStatus('current')
ospfNewCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setStatus('current')
ospfNewCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setStatus('current')
ospfNewCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setStatus('current')
ospfCurCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14), )
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setStatus('current')
ospfCurCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfCurCfgRangeIndex"))
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setStatus('current')
ospfCurCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setStatus('current')
ospfCurCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setStatus('current')
ospfCurCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setStatus('current')
ospfCurCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setStatus('current')
ospfCurCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setStatus('current')
ospfCurCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeState.setStatus('current')
ospfNewCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15), )
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setStatus('current')
ospfNewCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfNewCfgRangeIndex"))
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setStatus('current')
ospfNewCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setStatus('current')
ospfNewCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setStatus('current')
ospfNewCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setStatus('current')
ospfNewCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setStatus('current')
ospfNewCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setStatus('current')
ospfNewCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeState.setStatus('current')
ospfNewCfgRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setStatus('current')
ospfRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4))
ospfRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1))
ospfCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setStatus('current')
ospfNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setStatus('current')
ospfCurCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setStatus('current')
ospfNewCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setStatus('current')
ospfCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setStatus('current')
ospfNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setStatus('current')
ospfNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setStatus('current')
ospfNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setStatus('current')
ospfRedistributeEbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2))
ospfCurCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpMetric.setStatus('current')
ospfNewCfgEbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpMetric.setStatus('current')
ospfCurCfgEbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpMetricType.setStatus('current')
ospfNewCfgEbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpMetricType.setStatus('current')
ospfCurCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgEbgpOutRmapList.setStatus('current')
ospfNewCfgEbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgEbgpOutRmapList.setStatus('current')
ospfNewCfgEbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpAddOutRmap.setStatus('current')
ospfNewCfgEbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgEbgpRemoveOutRmap.setStatus('current')
ospfRedistributeIbgp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3))
ospfCurCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpMetric.setStatus('current')
ospfNewCfgIbgpMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpMetric.setStatus('current')
ospfCurCfgIbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpMetricType.setStatus('current')
ospfNewCfgIbgpMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpMetricType.setStatus('current')
ospfCurCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIbgpOutRmapList.setStatus('current')
ospfNewCfgIbgpOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIbgpOutRmapList.setStatus('current')
ospfNewCfgIbgpAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpAddOutRmap.setStatus('current')
ospfNewCfgIbgpRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIbgpRemoveOutRmap.setStatus('current')
ospfRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4))
ospfCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setStatus('current')
ospfNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setStatus('current')
ospfCurCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setStatus('current')
ospfNewCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setStatus('current')
ospfCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setStatus('current')
ospfNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setStatus('current')
ospfNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setStatus('current')
ospfNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setStatus('current')
ospfRedistributeRip = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5))
ospfCurCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setStatus('current')
ospfNewCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setStatus('current')
ospfCurCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setStatus('current')
ospfNewCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setStatus('current')
ospfCurCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setStatus('current')
ospfNewCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setStatus('current')
ospfNewCfgRipAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setStatus('current')
ospfNewCfgRipRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 13, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setStatus('current')
ipCurCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 14, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRouterID.setStatus('current')
ipNewCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgRouterID.setStatus('current')
ipCurCfgASNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgASNumber.setStatus('current')
ipNewCfgASNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgASNumber.setStatus('current')
ipStaticArpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setStatus('current')
ipCurCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setStatus('current')
ipCurCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipCurCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setStatus('current')
ipCurCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setStatus('current')
ipCurCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setStatus('current')
ipCurCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setStatus('current')
ipCurCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setStatus('current')
ipCurCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setStatus('current')
ipNewCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setStatus('current')
ipNewCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipNewCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setStatus('current')
ipNewCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setStatus('current')
ipNewCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setStatus('current')
ipNewCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setStatus('current')
ipNewCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setStatus('current')
ipNewCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setStatus('current')
ipNewCfgStaticArpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setStatus('current')
ripStatInPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPackets.setStatus('current')
ripStatOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPackets.setStatus('current')
ripStatInRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInRequestPkts.setStatus('current')
ripStatInResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInResponsePkts.setStatus('current')
ripStatOutRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutRequestPkts.setStatus('current')
ripStatOutResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutResponsePkts.setStatus('current')
ripStatRouteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRouteTimeout.setStatus('current')
ripStatInBadSizePkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSizePkts.setStatus('current')
ripStatInBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadVersion.setStatus('current')
ripStatInBadZeros = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadZeros.setStatus('current')
ripStatInBadSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourcePort.setStatus('current')
ripStatInBadSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourceIP.setStatus('current')
ripStatInSelfRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setStatus('current')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('current')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('current')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('current')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('current')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('current')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('current')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('current')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('current')
dnsStatOutDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setStatus('current')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('current')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('current')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('current')
ipClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipClearStats.setStatus('current')
ifStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7, 2), )
if mibBuilder.loadTexts: ifStatsTable.setStatus('current')
ifStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ifStatsIndex"))
if mibBuilder.loadTexts: ifStatsEntry.setStatus('current')
ifStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStatsIndex.setStatus('current')
ifClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifClearStats.setStatus('current')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('current')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('current')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('current')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('current')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('current')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('current')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('current')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('current')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('current')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('current')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('current')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('current')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('current')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('current')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('current')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('current')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('current')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('current')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('current')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('current')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('current')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('current')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('current')
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('current')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('current')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('current')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('current')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('current')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('current')
ospfAreaNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN2way.setStatus('current')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('current')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('current')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('current')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('current')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('current')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('current')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('current')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('current')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('current')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('current')
ospfAreaErrorStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4), )
if mibBuilder.loadTexts: ospfAreaErrorStats.setStatus('current')
ospfAreaErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfAreaErrIndex"))
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setStatus('current')
ospfAreaErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrIndex.setStatus('current')
ospfAreaErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setStatus('current')
ospfAreaErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setStatus('current')
ospfAreaErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setStatus('current')
ospfAreaErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setStatus('current')
ospfAreaErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setStatus('current')
ospfAreaErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setStatus('current')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('current')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('current')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('current')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('current')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('current')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('current')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('current')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('current')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('current')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('current')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('current')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('current')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('current')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('current')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('current')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('current')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('current')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('current')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('current')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('current')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('current')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('current')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('current')
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('current')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('current')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('current')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('current')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('current')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('current')
ospfIntfNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN2way.setStatus('current')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('current')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('current')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('current')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('current')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('current')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('current')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('current')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('current')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('current')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('current')
ospfIntfErrorStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4), )
if mibBuilder.loadTexts: ospfIntfErrorStats.setStatus('current')
ospfIntfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIntfErrIndex"))
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setStatus('current')
ospfIntfErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrIndex.setStatus('current')
ospfIntfErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setStatus('current')
ospfIntfErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setStatus('current')
ospfIntfErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setStatus('current')
ospfIntfErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setStatus('current')
ospfIntfErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setStatus('current')
ospfIntfErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setStatus('current')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('current')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('current')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('current')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('current')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('current')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('current')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('current')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('current')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('current')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('current')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('current')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('current')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('current')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('current')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('current')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('current')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('current')
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('current')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('current')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('current')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('current')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('current')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('current')
ospfCumNbrN2way = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN2way.setStatus('current')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('current')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('current')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('current')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('current')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('current')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('current')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('current')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('current')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('current')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('current')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('current')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('current')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('current')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 6, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('current')
ip6InReceives = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6InReceives.setStatus('current')
ip6ForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6ForwDatagrams.setStatus('current')
ip6InDelivers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6InDelivers.setStatus('current')
ip6InDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6InDiscards.setStatus('current')
ip6InUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6InUnknownProtos.setStatus('current')
ip6InAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6InAddrErrors.setStatus('current')
ip6OutRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6OutRequests.setStatus('current')
ip6OutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6OutNoRoutes.setStatus('current')
ip6ReasmOKs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6ReasmOKs.setStatus('current')
ip6ReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6ReasmFails.setStatus('current')
ip6icmpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6icmpInMsgs.setStatus('current')
ip6icmpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6icmpOutMsgs.setStatus('current')
ip6icmpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6icmpInErrors.setStatus('current')
ip6icmpOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6icmpOutErrors.setStatus('current')
icmp6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1), )
if mibBuilder.loadTexts: icmp6StatsTable.setStatus('current')
icmp6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "icmp6StatsIndx"))
if mibBuilder.loadTexts: icmp6StatsEntry.setStatus('current')
icmp6StatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6StatsIndx.setStatus('current')
icmp6IntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6IntfIndex.setStatus('current')
icmp6InMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InMsgs.setStatus('current')
icmp6InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InErrors.setStatus('current')
icmp6InEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InEchos.setStatus('current')
icmp6InEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InEchoReps.setStatus('current')
icmp6InNSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InNSs.setStatus('current')
icmp6InNAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InNAs.setStatus('current')
icmp6InRSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InRSs.setStatus('current')
icmp6InRAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InRAs.setStatus('current')
icmp6InDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InDestUnreachs.setStatus('current')
icmp6InTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InTimeExcds.setStatus('current')
icmp6InTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InTooBigs.setStatus('current')
icmp6InParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InParmProbs.setStatus('current')
icmp6InRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6InRedirects.setStatus('current')
icmp6OutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutMsgs.setStatus('current')
icmp6OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutErrors.setStatus('current')
icmp6OutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutEchos.setStatus('current')
icmp6OutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutEchoReps.setStatus('current')
icmp6OutNSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutNSs.setStatus('current')
icmp6OutNAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutNAs.setStatus('current')
icmp6OutRSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutRSs.setStatus('current')
icmp6OutRAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutRAs.setStatus('current')
icmp6OutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 11, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmp6OutRedirects.setStatus('current')
ip6GwStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1), )
if mibBuilder.loadTexts: ip6GwStatsTable.setStatus('current')
ip6GwStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ip6GwStatsIndex"))
if mibBuilder.loadTexts: ip6GwStatsEntry.setStatus('current')
ip6GwStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwStatsIndex.setStatus('current')
ip6GwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwIndex.setStatus('current')
ip6GwEchoreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwEchoreq.setStatus('current')
ip6GwEchoresp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwEchoresp.setStatus('current')
ip6GwFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwFails.setStatus('current')
ip6GwMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwMaster.setStatus('current')
ip6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6IfIndex.setStatus('current')
ip6GwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip6GwRetry.setStatus('current')
ipIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1), )
if mibBuilder.loadTexts: ipIntfInfoTable.setStatus('current')
intfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "intfInfoIndex"))
if mibBuilder.loadTexts: intfInfoEntry.setStatus('current')
intfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoIndex.setStatus('current')
intfInfoIpver = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoIpver.setStatus('current')
intfInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoAddr.setStatus('current')
intfInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoNetMask.setStatus('current')
intfInfoBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoBcastAddr.setStatus('current')
intfInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoVlan.setStatus('current')
intfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoStatus.setStatus('current')
intfInfoLinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoLinkLocalAddr.setStatus('current')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('current')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('current')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('current')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('current')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('current')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('current')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fixed", 1), ("static", 2), ("addr", 3), ("rip", 4), ("broadcast", 5), ("martian", 6), ("multicast", 7), ("vip", 8), ("bgp", 9), ("ospf", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('current')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('current')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('current')
ipRouteInfoGateway1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway1.setStatus('current')
ipRouteInfoGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway2.setStatus('current')
ipRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMetric.setStatus('current')
routeTableClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTableClear.setStatus('current')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('current')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('current')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('current')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('current')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('current')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('current')
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('current')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4), ("layer4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('current')
arpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheClear.setStatus('current')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('current')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('current')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('current')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3), ("holdoff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('current')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('current')
vrrpInfoVirtRtrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setStatus('current')
vrrpInfoVirtRtrProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setStatus('current')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1))
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('current')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('current')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('current')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('current')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('current')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('current')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('current')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('current')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('current')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('current')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('current')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('current')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('current')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('current')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('current')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('current')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('current')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('current')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('current')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('current')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('current')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('current')
ospfIfDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfDesignatedRouterIP.setStatus('current')
ospfIfBackupDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfBackupDesignatedRouterIP.setStatus('current')
ospfIfWaitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfWaitInterval.setStatus('current')
ospfIfTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfTotalNeighbours.setStatus('current')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('current')
ospfIfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5), )
if mibBuilder.loadTexts: ospfIfNbrTable.setStatus('current')
ospfIfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIfNbrIntfIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "ospfIfNbrIpAddr"))
if mibBuilder.loadTexts: ospfIfNbrEntry.setStatus('current')
ospfIfNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setStatus('current')
ospfIfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setStatus('current')
ospfIfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrPriority.setStatus('current')
ospfIfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrState.setStatus('current')
ospfIfNbrDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setStatus('current')
ospfIfNbrBackupDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setStatus('current')
ospfIfNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 4, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setStatus('current')
gatewayInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1), )
if mibBuilder.loadTexts: gatewayInfoTable.setStatus('current')
gatewayInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "gatewayInfoIndex"))
if mibBuilder.loadTexts: gatewayInfoEntry.setStatus('current')
gatewayInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoIndex.setStatus('current')
gatewayInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoAddr.setStatus('current')
gatewayInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoVlan.setStatus('current')
gatewayInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoStatus.setStatus('current')
gatewayInfoAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoAddr6.setStatus('current')
nbrcacheInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1), )
if mibBuilder.loadTexts: nbrcacheInfoTable.setStatus('current')
nbrcacheInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "nbrcacheInfoIndex"))
if mibBuilder.loadTexts: nbrcacheInfoEntry.setStatus('current')
nbrcacheInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoIndex.setStatus('current')
nbrcacheInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoDestIp.setStatus('current')
nbrcacheInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undef", 1), ("reach", 2), ("stale", 3), ("delay", 4), ("probe", 5), ("inval", 6), ("unknown", 7), ("incmp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoState.setStatus('current')
nbrcacheInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undef", 1), ("other", 2), ("invalid", 3), ("dynamic", 4), ("static", 5), ("local", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoType.setStatus('current')
nbrcacheInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoMacAddr.setStatus('current')
nbrcacheInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoVlanId.setStatus('current')
nbrcacheInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoPortNum.setStatus('current')
nbrcacheClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbrcacheClear.setStatus('current')
nbrcacheInfoTotDynamicEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoTotDynamicEntries.setStatus('current')
nbrcacheInfoTotLocalEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoTotLocalEntries.setStatus('current')
nbrcacheInfoTotOtherEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrcacheInfoTotOtherEntries.setStatus('current')
ipRoute6InfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1), )
if mibBuilder.loadTexts: ipRoute6InfoTable.setStatus('current')
ipRoute6InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ipRoute6InfoIndx"))
if mibBuilder.loadTexts: ipRoute6InfoEntry.setStatus('current')
ipRoute6InfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoIndx.setStatus('current')
ipRoute6InfoDestIp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoDestIp6.setStatus('current')
ipRoute6InfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoInterface.setStatus('current')
ipRoute6InfoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoNextHop.setStatus('current')
ipRoute6InfoProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("isis", 1), ("rip", 2), ("ospf", 3), ("static", 4), ("local", 5), ("bgp", 6), ("stlow", 7), ("ospfi", 8), ("ospfe", 9), ("ospfe2", 10), ("ospfa", 11), ("ripa", 12), ("bgpa", 13), ("igmp", 14), ("unknown", 15), ("natpt", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoute6InfoProto.setStatus('current')
rip2GeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 1))
ripInfoState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoState.setStatus('current')
ripInfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setStatus('current')
ripInfoVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoVip.setStatus('current')
ripInfoStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoStaticSupply.setStatus('current')
rip2InfoIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2), )
if mibBuilder.loadTexts: rip2InfoIntfTable.setStatus('current')
ripInfoIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "ripInfoIntfIndex"))
if mibBuilder.loadTexts: ripInfoIntfEntry.setStatus('current')
ripInfoIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfIndex.setStatus('current')
ripInfoIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfVersion.setStatus('current')
ripInfoIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAddress.setStatus('current')
ripInfoIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfState.setStatus('current')
ripInfoIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfListen.setStatus('current')
ripInfoIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setStatus('current')
ripInfoIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setStatus('current')
ripInfoIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setStatus('current')
ripInfoIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfSupply.setStatus('current')
ripInfoIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMetric.setStatus('current')
ripInfoIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAuth.setStatus('current')
ripInfoIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfKey.setStatus('current')
ripInfoIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfDefault.setStatus('current')
rip2RoutesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1), )
if mibBuilder.loadTexts: rip2RoutesInfoTable.setStatus('current')
rip2RoutesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "rip2RoutesInfoDestIndex"), (0, "ALTEON-CHEETAH-NETWORK-MIB", "rip2RoutesInfoNxtHopIndex"))
if mibBuilder.loadTexts: rip2RoutesInfoEntry.setStatus('current')
rip2RoutesInfoDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2RoutesInfoDestIndex.setStatus('current')
rip2RoutesInfoNxtHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2RoutesInfoNxtHopIndex.setStatus('current')
rip2RoutesInfoDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2RoutesInfoDestination.setStatus('current')
rip2RoutesInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2RoutesInfoIpAddress.setStatus('current')
rip2RoutesInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 3, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2RoutesInfoMetric.setStatus('current')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('current')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-NETWORK-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('current')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('current')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('current')
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('current')
mibBuilder.exportSymbols("ALTEON-CHEETAH-NETWORK-MIB", ipCurCfgBootpAddr=ipCurCfgBootpAddr, ospfRouteRedistribution=ospfRouteRedistribution, ripInfoVip=ripInfoVip, vrrpNewCfgVirtRtrVrGrpTckVlanPort=vrrpNewCfgVirtRtrVrGrpTckVlanPort, icmp6OutRedirects=icmp6OutRedirects, ipCurCfgAlistRmapIndex=ipCurCfgAlistRmapIndex, ospfIfInfoIndex=ospfIfInfoIndex, ospfNewCfgEbgpRemoveOutRmap=ospfNewCfgEbgpRemoveOutRmap, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, vrrpCurCfgVirtRtrVrGrpIndx=vrrpCurCfgVirtRtrVrGrpIndx, ipNewCfgIntfTable=ipNewCfgIntfTable, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, ripCurCfgIntfDefListen=ripCurCfgIntfDefListen, ospfCurCfgRangeState=ospfCurCfgRangeState, bgpCurCfgAggrEntry=bgpCurCfgAggrEntry, ospfAreaRxlsReqs=ospfAreaRxlsReqs, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, ospfIntfRxTxStats=ospfIntfRxTxStats, vrrpInfoVirtRtrServer=vrrpInfoVirtRtrServer, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, ip6GwStatsEntry=ip6GwStatsEntry, ospfNewCfgVirtIntfTable=ospfNewCfgVirtIntfTable, ipNewCfgGwAddr=ipNewCfgGwAddr, ospfCumRxHello=ospfCumRxHello, ipNewCfgIntfIndex=ipNewCfgIntfIndex, ospfIfNbrIpAddress=ospfIfNbrIpAddress, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ipNewCfgAlistNwf=ipNewCfgAlistNwf, ospfCurCfgIntfMdkey=ospfCurCfgIntfMdkey, ospfCumIntfDown=ospfCumIntfDown, nbrcacheInfoPortNum=nbrcacheInfoPortNum, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, bgpNewCfgPeerTable=bgpNewCfgPeerTable, ospfIntfNbrDown=ospfIntfNbrDown, nbrcacheInfoTotOtherEntries=nbrcacheInfoTotOtherEntries, ospfNewCfgEbgpMetricType=ospfNewCfgEbgpMetricType, nbrcacheInfoType=nbrcacheInfoType, intfInfoVlan=intfInfoVlan, ipNewCfgStaticArpIp=ipNewCfgStaticArpIp, icmp6OutRAs=icmp6OutRAs, ipNewCfgRouterID=ipNewCfgRouterID, ospfAreaIntfHello=ospfAreaIntfHello, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ospfNbrInExchState=ospfNbrInExchState, ospfIfInfoIpAddress=ospfIfInfoIpAddress, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, ospfCumRxlsUpdates=ospfCumRxlsUpdates, ospfIfNbrIntfIndex=ospfIfNbrIntfIndex, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ipNewCfgGwMetric=ipNewCfgGwMetric, ipCurCfgRmapIndex=ipCurCfgRmapIndex, ospfRedistributeFixed=ospfRedistributeFixed, ipCurCfgRmapWeight=ipCurCfgRmapWeight, ospfCumIntfChangeStats=ospfCumIntfChangeStats, ip6GwStatsTable=ip6GwStatsTable, ipNewCfgNwfDelete=ipNewCfgNwfDelete, ospfStartTime=ospfStartTime, ospfIntfIndex=ospfIntfIndex, ipStaticRouteCfg=ipStaticRouteCfg, ospfIntfNbrChange=ospfIntfNbrChange, ripNewCfgIntfAuth=ripNewCfgIntfAuth, ospfMdkeyTableMaxSize=ospfMdkeyTableMaxSize, ipNewCfgNwfState=ipNewCfgNwfState, ripNewCfgIntfPoisonReverse=ripNewCfgIntfPoisonReverse, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, ospfCumRxlsAcks=ospfCumRxlsAcks, ipRouteInfoGateway=ipRouteInfoGateway, gatewayInfoVlan=gatewayInfoVlan, ripNewCfgIntfIndex=ripNewCfgIntfIndex, ipFwdNewCfgPortState=ipFwdNewCfgPortState, vrrpCurCfgIfTable=vrrpCurCfgIfTable, ospfAreaNbrDown=ospfAreaNbrDown, ospfAreaTxDatabase=ospfAreaTxDatabase, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, vrrpNewCfgVirtRtrVrGrpTckIpIntf=vrrpNewCfgVirtRtrVrGrpTckIpIntf, arpInfoEntry=arpInfoEntry, ripNewCfgIntfMcastUpdate=ripNewCfgIntfMcastUpdate, ipInterfaceTableMax=ipInterfaceTableMax, vrrpNewCfgVirtRtrVrGrpIndx=vrrpNewCfgVirtRtrVrGrpIndx, ipCurCfgStaticArpPort=ipCurCfgStaticArpPort, ospfGeneralStats=ospfGeneralStats, intfInfoLinkLocalAddr=intfInfoLinkLocalAddr, nbrcacheInfoTable=nbrcacheInfoTable, ospfCurCfgHostAreaIndex=ospfCurCfgHostAreaIndex, ospfTotalAreas=ospfTotalAreas, arpInfoDestIp=arpInfoDestIp, bgpNewCfgPeerDelete=bgpNewCfgPeerDelete, ospfCumIntfUnloop=ospfCumIntfUnloop, ipNewCfgAspathAS=ipNewCfgAspathAS, ipRoute6InfoIndx=ipRoute6InfoIndx, routeStatHighWater=routeStatHighWater, ipCurCfgStaticArpTable=ipCurCfgStaticArpTable, ospfAreaNbrN2way=ospfAreaNbrN2way, bgpNewCfgPeerAddInRmap=bgpNewCfgPeerAddInRmap, vrrpNewCfgVirtRtrVrGrpTckRServer=vrrpNewCfgVirtRtrVrGrpTckRServer, bgpNewCfgAggrDelete=bgpNewCfgAggrDelete, ipRmapTableMax=ipRmapTableMax, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, vrrpIfTableMaxSize=vrrpIfTableMaxSize, ipNewCfgNwfMask=ipNewCfgNwfMask, ipNewCfgAlistMetric=ipNewCfgAlistMetric, ipNewCfgBootpAddr=ipNewCfgBootpAddr, vrrpCurCfgVirtRtrVrGrpTckHsrv=vrrpCurCfgVirtRtrVrGrpTckHsrv, ipFwdNewCfgPortEntry=ipFwdNewCfgPortEntry, ipNewCfgGwArp=ipNewCfgGwArp, ospfCurCfgVirtIntfTable=ospfCurCfgVirtIntfTable, ripCurCfgIntfPoisonReverse=ripCurCfgIntfPoisonReverse, layer3Configs=layer3Configs, ospfNewCfgMdkeyIndex=ospfNewCfgMdkeyIndex, vrrpNewCfgVirtRtrVrGrpAdd=vrrpNewCfgVirtRtrVrGrpAdd, vrrpNewCfgVirtRtrVrGrpBmap=vrrpNewCfgVirtRtrVrGrpBmap, ipNewCfgStaticArpVlan=ipNewCfgStaticArpVlan, ipRoutingInfo=ipRoutingInfo, ipRouteInfoTable=ipRouteInfoTable, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, bgpCurCfgPeerRemoteAs=bgpCurCfgPeerRemoteAs, ospfNewCfgVirtIntfEntry=ospfNewCfgVirtIntfEntry, nbrcacheInfoTotDynamicEntries=nbrcacheInfoTotDynamicEntries, ripInfoIntfMcastUpdate=ripInfoIntfMcastUpdate, ospfIntfTxHello=ospfIntfTxHello, ipFwdCurCfgLocalSubnet=ipFwdCurCfgLocalSubnet, ospfCumIntfBackup=ospfCumIntfBackup, bgpNewCfgLocalPref=bgpNewCfgLocalPref, ipRouteInfoEntry=ipRouteInfoEntry, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, ospfIntfInfoEntry=ospfIntfInfoEntry, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, ospfIfNbrPriority=ospfIfNbrPriority, ipFwdNewCfgLocalSubnet=ipFwdNewCfgLocalSubnet, ipCurCfgIntfState=ipCurCfgIntfState, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, ripInfoIntfPoisonReverse=ripInfoIntfPoisonReverse, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ripCurCfgIntfTrigUpdate=ripCurCfgIntfTrigUpdate, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, ospfCurCfgFixedOutRmapList=ospfCurCfgFixedOutRmapList, ospfIntfErrHelloMismatch=ospfIntfErrHelloMismatch, ospfIfDesignatedRouterIP=ospfIfDesignatedRouterIP, ipForwardCfg=ipForwardCfg, vrrpVirtRtrVrGrpTableMaxSize=vrrpVirtRtrVrGrpTableMaxSize, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, nbrcacheInfoMacAddr=nbrcacheInfoMacAddr, ipStaticArpTableMaxSize=ipStaticArpTableMaxSize, ripNewCfgIntfMetric=ripNewCfgIntfMetric, ripInfoState=ripInfoState, ipCurCfgIntfIpVer=ipCurCfgIntfIpVer, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ospfNewCfgFixedMetric=ospfNewCfgFixedMetric, ripCurCfgIntfIndex=ripCurCfgIntfIndex, ospfIfWaitInterval=ospfIfWaitInterval, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, ipNewCfgRmapMetricType=ipNewCfgRmapMetricType, vrrpNewCfgVirtRtrVrGrpTckHsrp=vrrpNewCfgVirtRtrVrGrpTckHsrp, ipRouteInfoGateway2=ipRouteInfoGateway2, ipFwdNewCfgLocalTable=ipFwdNewCfgLocalTable, ospfProcessUptime=ospfProcessUptime, ifClearStats=ifClearStats, ip6OutRequests=ip6OutRequests, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, ipNewCfgStaticArpIndx=ipNewCfgStaticArpIndx, ipNewCfgStaticArpAction=ipNewCfgStaticArpAction, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, bgpNewCfgPeerEntry=bgpNewCfgPeerEntry, ipRoute6Info=ipRoute6Info, arpStatEntries=arpStatEntries, ospfCumRxlsReqs=ospfCumRxlsReqs, icmp6OutNSs=icmp6OutNSs, ipNewCfgIntfAddr=ipNewCfgIntfAddr, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, ospfIfNbrIpAddr=ospfIfNbrIpAddr, ospfNewCfgState=ospfNewCfgState, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, ospfNewCfgIntfId=ospfNewCfgIntfId, ospfNewCfgIntfEntry=ospfNewCfgIntfEntry, ospfArea=ospfArea, gatewayInfoAddr6=gatewayInfoAddr6, ipNewCfgGwState=ipNewCfgGwState, ipCurCfgGwArp=ipCurCfgGwArp, ospfCurCfgIbgpOutRmapList=ospfCurCfgIbgpOutRmapList, intfInfoIndex=intfInfoIndex, ospfLsTypesSupported=ospfLsTypesSupported, rip2Stats=rip2Stats, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, ospfCumNbrDown=ospfCumNbrDown, ipNewCfgAlistDelete=ipNewCfgAlistDelete, bgpNewCfgPeerAddOutRmap=bgpNewCfgPeerAddOutRmap, ipCurCfgGwIndex=ipCurCfgGwIndex, ipRoute6InfoEntry=ipRoute6InfoEntry, ospfNbrInInitState=ospfNbrInInitState, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, ospfIfNbrDesignatedRtr=ospfIfNbrDesignatedRtr, vrrpCurCfgVirtRtrGrpTckHsrv=vrrpCurCfgVirtRtrGrpTckHsrv, ospfNewCfgHostAreaIndex=ospfNewCfgHostAreaIndex, vrrpNewCfgVirtRtrVrGrpTable=vrrpNewCfgVirtRtrVrGrpTable, ripCurCfgIntfKey=ripCurCfgIntfKey, vrrpNewCfgGenTckHsrvInc=vrrpNewCfgGenTckHsrvInc, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, ospfNewCfgMdkeyDelete=ospfNewCfgMdkeyDelete, bgpAggrTableMax=bgpAggrTableMax, ipCurCfgRmapTable=ipCurCfgRmapTable, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, ospfCurCfgRangeAddr=ospfCurCfgRangeAddr, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, ip6ReasmFails=ip6ReasmFails, ipCurCfgStaticArpVlan=ipCurCfgStaticArpVlan, rip2RoutesInfoDestination=rip2RoutesInfoDestination, ospfCumNbrhello=ospfCumNbrhello, ipFwdCurCfgPortState=ipFwdCurCfgPortState, ipCurCfgRouterID=ipCurCfgRouterID, ipFwdNewCfgPortIndex=ipFwdNewCfgPortIndex, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, ospfIntfWaitTimer=ospfIntfWaitTimer, ospfAreaIntfLoop=ospfAreaIntfLoop, ipAlistTableMax=ipAlistTableMax, rip2RoutesInfoIpAddress=rip2RoutesInfoIpAddress, ipCurCfgIntfAddr=ipCurCfgIntfAddr, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, ospfAreaTxlsAcks=ospfAreaTxlsAcks, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, ospfAreaRxHello=ospfAreaRxHello, ipNewCfgAlistRmapIndex=ipNewCfgAlistRmapIndex, vrrpNewCfgVirtRtrVrGrpTckHsrv=vrrpNewCfgVirtRtrVrGrpTckHsrv, bgpCurCfgPeerInRmapList=bgpCurCfgPeerInRmapList, ospfNewCfgStaticMetricType=ospfNewCfgStaticMetricType, arpInfoTable=arpInfoTable, vrrpNewCfgVirtRtrTckHsrv=vrrpNewCfgVirtRtrTckHsrv, ipFwdCurCfgRtCache=ipFwdCurCfgRtCache, bgpCurCfgPeerIndex=bgpCurCfgPeerIndex, bgpCurCfgAggrMask=bgpCurCfgAggrMask, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, ipRouteInfoTag=ipRouteInfoTag, ipCurCfgGwVlan=ipCurCfgGwVlan, vrrpCurCfgVirtRtrTckHsrv=vrrpCurCfgVirtRtrTckHsrv, ipCurCfgBootpState=ipCurCfgBootpState, rip2NewCfgVip=rip2NewCfgVip, ospfInterface=ospfInterface, ripStatInRequestPkts=ripStatInRequestPkts, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, bgpCurCfgAggrState=bgpCurCfgAggrState, vrrpNewCfgGenHoldoff=vrrpNewCfgGenHoldoff, ipNewCfgIntfEntry=ipNewCfgIntfEntry, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, vrrpOper=vrrpOper, rip2CurCfgUpdatePeriod=rip2CurCfgUpdatePeriod, ipNewCfgIntfState=ipNewCfgIntfState, ipStaticArpCfg=ipStaticArpCfg, vrrpGeneral=vrrpGeneral)
mibBuilder.exportSymbols("ALTEON-CHEETAH-NETWORK-MIB", nbrcacheInfo=nbrcacheInfo, bgpNewCfgPeerMetric=bgpNewCfgPeerMetric, ripCurCfgIntfListen=ripCurCfgIntfListen, ipFwdCurCfgPortEntry=ipFwdCurCfgPortEntry, layer3Oper=layer3Oper, rip2InfoIntfTable=rip2InfoIntfTable, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, ipNewCfgRmapDelete=ipNewCfgRmapDelete, ipCurCfgStaticArpIp=ipCurCfgStaticArpIp, ospfNewCfgFixedRemoveOutRmap=ospfNewCfgFixedRemoveOutRmap, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, gatewayInfoIndex=gatewayInfoIndex, ipCurCfgAlistIndex=ipCurCfgAlistIndex, ospfNewCfgIbgpMetric=ospfNewCfgIbgpMetric, ipGatewayCfg=ipGatewayCfg, ospfNewCfgIbgpRemoveOutRmap=ospfNewCfgIbgpRemoveOutRmap, vrrpCurCfgVirtRtrVrGrpState=vrrpCurCfgVirtRtrVrGrpState, nbrcacheInfoEntry=nbrcacheInfoEntry, ospfNewCfgMdkeyTable=ospfNewCfgMdkeyTable, ospfCumTxHello=ospfCumTxHello, ip6GwEchoresp=ip6GwEchoresp, rip2NewCfgStaticSupply=rip2NewCfgStaticSupply, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, ipCurCfgRmapLp=ipCurCfgRmapLp, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, ospfNewCfgHostIndex=ospfNewCfgHostIndex, arpCacheClear=arpCacheClear, nbrcacheInfoIndex=nbrcacheInfoIndex, rip2NewCfgUpdatePeriod=rip2NewCfgUpdatePeriod, ospfCfg=ospfCfg, ospfNewCfgRipAddOutRmap=ospfNewCfgRipAddOutRmap, ipNewCfgStaticArpTable=ipNewCfgStaticArpTable, ipRouteInfoMask=ipRouteInfoMask, ospfNewCfgRangeTable=ospfNewCfgRangeTable, vrrpCurCfgGenTckHsrvInc=vrrpCurCfgGenTckHsrvInc, ipFwdGeneralCfg=ipFwdGeneralCfg, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, ipIntfInfoTable=ipIntfInfoTable, bgpCurCfgPeerTable=bgpCurCfgPeerTable, ospfCurCfgRangeHideState=ospfCurCfgRangeHideState, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, ospfAreaTxPkts=ospfAreaTxPkts, ipCurCfgIntfIpv6Addr=ipCurCfgIntfIpv6Addr, ospfCumTxDatabase=ospfCumTxDatabase, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, ripNewCfgIntfVersion=ripNewCfgIntfVersion, ospfGeneralInfo=ospfGeneralInfo, ospfCurCfgVirtIntfNbr=ospfCurCfgVirtIntfNbr, nbrcacheInfoTotLocalEntries=nbrcacheInfoTotLocalEntries, ospfAreaRxPkts=ospfAreaRxPkts, ipCurCfgGwIpv6Addr=ipCurCfgGwIpv6Addr, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ripStatInPackets=ripStatInPackets, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ospfIntfTxPkts=ospfIntfTxPkts, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ospfCumIntfHello=ospfCumIntfHello, ipNewCfgAlistState=ipNewCfgAlistState, ospfAreaErrIndex=ospfAreaErrIndex, rip2RoutesInfoEntry=rip2RoutesInfoEntry, ipNewCfgAspathState=ipNewCfgAspathState, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ospfNewCfgEbgpMetric=ospfNewCfgEbgpMetric, ipNewCfgIntfIpv6Addr=ipNewCfgIntfIpv6Addr, ipNewCfgBootpState=ipNewCfgBootpState, ospfNewCfgFixedMetricType=ospfNewCfgFixedMetricType, ripCurCfgIntfMetric=ripCurCfgIntfMetric, bgpCurCfgMaxASPath=bgpCurCfgMaxASPath, ipBootpCfg=ipBootpCfg, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, ospfCumTxlsAcks=ospfCumTxlsAcks, ipCurCfgIntfEntry=ipCurCfgIntfEntry, bgpNewCfgPeerIndex=bgpNewCfgPeerIndex, ospfCurCfgEbgpOutRmapList=ospfCurCfgEbgpOutRmapList, ip6GwEchoreq=ip6GwEchoreq, ipRouteInfoMetric=ipRouteInfoMetric, ospfNewCfgIbgpAddOutRmap=ospfNewCfgIbgpAddOutRmap, icmp6IntfIndex=icmp6IntfIndex, ospfAreaInfoTable=ospfAreaInfoTable, ipClearStats=ipClearStats, vrrpCurCfgVirtRtrVrGrpTckVirtRtrNo=vrrpCurCfgVirtRtrVrGrpTckVirtRtrNo, ip6GwMaster=ip6GwMaster, icmp6InRAs=icmp6InRAs, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, ospfNewCfgMdkeyKey=ospfNewCfgMdkeyKey, ospfIntfRxPkts=ospfIntfRxPkts, ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk, ospfNewCfgRangeAreaIndex=ospfNewCfgRangeAreaIndex, intfInfoStatus=intfInfoStatus, ipIntfInfo=ipIntfInfo, ipFwdCurCfgLocalTable=ipFwdCurCfgLocalTable, ospfCumNbrBadSequence=ospfCumNbrBadSequence, ipNewCfgRmapEntry=ipNewCfgRmapEntry, ospfNewCfgRangeState=ospfNewCfgRangeState, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, ospfNewCfgEbgpOutRmapList=ospfNewCfgEbgpOutRmapList, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ipNewCfgRmapLp=ipNewCfgRmapLp, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, ospfCurCfgMdkeyEntry=ospfCurCfgMdkeyEntry, ipCurCfgRmapMetricType=ipCurCfgRmapMetricType, ospfIntfErrDeadMismatch=ospfIntfErrDeadMismatch, ripInfoIntfState=ripInfoIntfState, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, ospfCumNbrN2way=ospfCumNbrN2way, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, bgpNewCfgAggrTable=bgpNewCfgAggrTable, ospfCumNbrRstAd=ospfCumNbrRstAd, ipNewCfgAspathEntry=ipNewCfgAspathEntry, ipNewCfgGwIpv6Addr=ipNewCfgGwIpv6Addr, ospfCurCfgFixedMetricType=ospfCurCfgFixedMetricType, ripInfoIntfKey=ripInfoIntfKey, ripCurCfgIntfAuth=ripCurCfgIntfAuth, ipCurCfgAspathTable=ipCurCfgAspathTable, ospfIntfRxDatabase=ospfIntfRxDatabase, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, icmp6StatsIndx=icmp6StatsIndx, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ripInfoIntfSupply=ripInfoIntfSupply, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, ripNewCfgIntfDefListen=ripNewCfgIntfDefListen, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, ipNewCfgStaticArpEntry=ipNewCfgStaticArpEntry, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, ospfIfNbrEntry=ospfIfNbrEntry, ipNewCfgIntfMask=ipNewCfgIntfMask, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, ipCurCfgGwTable=ipCurCfgGwTable, arpCfg=arpCfg, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, ospfNewCfgVirtIntfIndex=ospfNewCfgVirtIntfIndex, ospfAreaInfoId=ospfAreaInfoId, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, gatewayInfo=gatewayInfo, ip6InDelivers=ip6InDelivers, ripInfoStaticSupply=ripInfoStaticSupply, ip6gwStats=ip6gwStats, ospfAreaErrorStatsEntry=ospfAreaErrorStatsEntry, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, icmp6InNSs=icmp6InNSs, ipRoute6InfoInterface=ipRoute6InfoInterface, ripNewCfgIntfKey=ripNewCfgIntfKey, ipCurCfgGwMetric=ipCurCfgGwMetric, ospfCurCfgRangeEntry=ospfCurCfgRangeEntry, ospfinfo=ospfinfo, gatewayInfoTable=gatewayInfoTable, ipCurCfgIntfTable=ipCurCfgIntfTable, ripInfoIntfEntry=ripInfoIntfEntry, ipRouteInfoType=ipRouteInfoType, ipNewCfgRmapAp=ipNewCfgRmapAp, ipCurCfgAspathAS=ipCurCfgAspathAS, ip6ForwDatagrams=ip6ForwDatagrams, gatewayInfoEntry=gatewayInfoEntry, gatewayInfoStatus=gatewayInfoStatus, ospfIntfInfoTable=ospfIntfInfoTable, ipFwdLocalTableMaxSize=ipFwdLocalTableMaxSize, ripNewCfgIntfTable=ripNewCfgIntfTable, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, ospfTimersKickOffStats=ospfTimersKickOffStats, ipFwdCurCfgState=ipFwdCurCfgState, bgpPeerTableMax=bgpPeerTableMax, ospfCumNbrChangeStats=ospfCumNbrChangeStats, ospfNewCfgIbgpMetricType=ospfNewCfgIbgpMetricType, ospfCumRxDatabase=ospfCumRxDatabase, ipCurCfgGwPriority=ipCurCfgGwPriority, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, ipNewCfgAspathTable=ipNewCfgAspathTable, ipFwdCurCfgPortTable=ipFwdCurCfgPortTable, ospfAreaErrDeadMismatch=ospfAreaErrDeadMismatch, rip2NewCfgState=rip2NewCfgState, ipFwdNewCfgLocalIndex=ipFwdNewCfgLocalIndex, arpInfoVLAN=arpInfoVLAN, rip2CurCfgState=rip2CurCfgState, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, ospfIntfNbrRstAd=ospfIntfNbrRstAd, bgpCurCfgAggrAddr=bgpCurCfgAggrAddr, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, ospfRedistributeIbgp=ospfRedistributeIbgp, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, ripNewCfgIntfDefault=ripNewCfgIntfDefault, ipCurCfgIntfMask=ipCurCfgIntfMask, vrrpCurCfgVirtRtrVrGrpTable=vrrpCurCfgVirtRtrVrGrpTable, arpStatHighWater=arpStatHighWater, vrrpNewCfgVirtRtrVrGrpTckVirtRtrNo=vrrpNewCfgVirtRtrVrGrpTckVirtRtrNo, ospfIntfTableMaxSize=ospfIntfTableMaxSize, ripInfoIntfIndex=ripInfoIntfIndex, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, ospfCumTxPkts=ospfCumTxPkts, intfInfoIpver=intfInfoIpver, ipRouteInfoIndx=ipRouteInfoIndx, ipNwfCfg=ipNwfCfg, bgpNewCfgPeerRemoveOutRmap=bgpNewCfgPeerRemoveOutRmap, bgpNewCfgAggrState=bgpNewCfgAggrState, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, ip6InUnknownProtos=ip6InUnknownProtos, rip2RoutesInfoDestIndex=rip2RoutesInfoDestIndex, ipCurCfgGwRetry=ipCurCfgGwRetry, ipNewCfgNwfIndex=ipNewCfgNwfIndex, ospfCurCfgRipMetricType=ospfCurCfgRipMetricType, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, rip2RoutesInfoTable=rip2RoutesInfoTable, ospfIntfErrNetmaskMismatch=ospfIntfErrNetmaskMismatch, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, ospfTmrsKckOffHello=ospfTmrsKckOffHello, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, ospfCumRxPkts=ospfCumRxPkts, vrrpNewCfgVirtRtrVrGrpTableEntry=vrrpNewCfgVirtRtrVrGrpTableEntry, ripNewCfgIntfTrigUpdate=ripNewCfgIntfTrigUpdate, ipFwdNewCfgLocalDelete=ipFwdNewCfgLocalDelete, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, ospfNewCfgRangeAddr=ospfNewCfgRangeAddr, ripCurCfgIntfEntry=ripCurCfgIntfEntry, ospfCurCfgVirtIntfEntry=ospfCurCfgVirtIntfEntry, ospfCurCfgStaticMetricType=ospfCurCfgStaticMetricType, arpInfoMacAddr=arpInfoMacAddr, ipNewCfgNwfTable=ipNewCfgNwfTable, ipCurCfgNwfEntry=ipCurCfgNwfEntry, ipCurCfgGwState=ipCurCfgGwState, ipFwdCurCfgLocalMask=ipFwdCurCfgLocalMask, ipNewCfgRmapTable=ipNewCfgRmapTable, ospfIntfErrIndex=ospfIntfErrIndex, vrrpStatInAdvers=vrrpStatInAdvers, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, ospfCurCfgStaticMetric=ospfCurCfgStaticMetric, ospfAreaRxDatabase=ospfAreaRxDatabase, ospfNewCfgStaticAddOutRmap=ospfNewCfgStaticAddOutRmap, bgpNewCfgPeerRemoteAddr=bgpNewCfgPeerRemoteAddr, ospfStats=ospfStats, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, ipCurCfgStaticArpMAC=ipCurCfgStaticArpMAC, ipFwdCurCfgNoICMPRedirect=ipFwdCurCfgNoICMPRedirect, ospfNewCfgIntfMdkey=ospfNewCfgIntfMdkey, vrrpNewCfgVirtRtrVrGrpDelete=vrrpNewCfgVirtRtrVrGrpDelete, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, icmp6InMsgs=icmp6InMsgs, ospfTotalTransitAreas=ospfTotalTransitAreas, ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, ifStatsIndex=ifStatsIndex, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, ospfIntfChangeStats=ospfIntfChangeStats, dnsCurCfgDomainName=dnsCurCfgDomainName, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ripInfoUpdatePeriod=ripInfoUpdatePeriod, ospfCumNbrN1way=ospfCumNbrN1way, ospfCurCfgRangeIndex=ospfCurCfgRangeIndex, ip6icmpOutMsgs=ip6icmpOutMsgs)
mibBuilder.exportSymbols("ALTEON-CHEETAH-NETWORK-MIB", rip2CurCfgStaticSupply=rip2CurCfgStaticSupply, ospfNewCfgIntfTable=ospfNewCfgIntfTable, icmp6InTooBigs=icmp6InTooBigs, ipCurCfgAlistEntry=ipCurCfgAlistEntry, ipNewCfgAlistIndex=ipNewCfgAlistIndex, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, ripInfoIntfVersion=ripInfoIntfVersion, ospfCurCfgIntfEntry=ospfCurCfgIntfEntry, icmp6InEchos=icmp6InEchos, intfInfoNetMask=intfInfoNetMask, ipInterfaceCfg=ipInterfaceCfg, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, ipCurCfgNwfTable=ipCurCfgNwfTable, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, ospfAreaErrHelloMismatch=ospfAreaErrHelloMismatch, ipCurCfgNwfMask=ipCurCfgNwfMask, ospfHostTableMaxSize=ospfHostTableMaxSize, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, ripStatInSelfRcvPkts=ripStatInSelfRcvPkts, vrrpStats=vrrpStats, ospfAreaInfoIndex=ospfAreaInfoIndex, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, ipNewCfgAspathIndex=ipNewCfgAspathIndex, icmp6Stats=icmp6Stats, vrrpCurCfgGenHoldoff=vrrpCurCfgGenHoldoff, ospfIfNbrState=ospfIfNbrState, ipCurCfgIntfRouteAdv=ipCurCfgIntfRouteAdv, vrrpCurCfgVirtRtrVrGrpTckIpIntf=vrrpCurCfgVirtRtrVrGrpTckIpIntf, ipRouteInfoDestIp=ipRouteInfoDestIp, ipRoute6InfoDestIp6=ipRoute6InfoDestIp6, ripNewCfgIntfState=ripNewCfgIntfState, ospfIntfNbrN1way=ospfIntfNbrN1way, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, rip2Cfg=rip2Cfg, bgpNewCfgMaxASPath=bgpNewCfgMaxASPath, ospfNewCfgStaticMetric=ospfNewCfgStaticMetric, vrrpCurCfgVirtRtrVrGrpName=vrrpCurCfgVirtRtrVrGrpName, icmp6StatsTable=icmp6StatsTable, ipRoute6InfoTable=ipRoute6InfoTable, routeTableClear=routeTableClear, ipCurCfgAlistAction=ipCurCfgAlistAction, ospfCurCfgVirtIntfMdkey=ospfCurCfgVirtIntfMdkey, vrrpCurCfgVirtRtrVrGrpTckHsrp=vrrpCurCfgVirtRtrVrGrpTckHsrp, vrrpNewCfgVirtRtrVrGrpName=vrrpNewCfgVirtRtrVrGrpName, ipCurCfgRmapEntry=ipCurCfgRmapEntry, bgpNewCfgAggrMask=bgpNewCfgAggrMask, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, ipCurCfgGwInterval=ipCurCfgGwInterval, rip2RoutesInfo=rip2RoutesInfo, ip6GwFails=ip6GwFails, vrrpInfoVirtRtrProxy=vrrpInfoVirtRtrProxy, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, ipFwdNewCfgLocalMask=ipFwdNewCfgLocalMask, ospfNewCfgVirtIntfAreaId=ospfNewCfgVirtIntfAreaId, ospfNewCfgRangeDelete=ospfNewCfgRangeDelete, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, layer3Info=layer3Info, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, bgpNewCfgPeerStaticState=bgpNewCfgPeerStaticState, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, ospfVlinkCountForRouter=ospfVlinkCountForRouter, ipCurCfgAspathEntry=ipCurCfgAspathEntry, bgpNewCfgPeerInRmapList=bgpNewCfgPeerInRmapList, ospfIntfRxlsAcks=ospfIntfRxlsAcks, vrrpCurCfgVirtRtrVrGrpTckRServer=vrrpCurCfgVirtRtrVrGrpTckRServer, bgpCurCfgPeerRemoteAddr=bgpCurCfgPeerRemoteAddr, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, ipCurCfgGwIpVer=ipCurCfgGwIpVer, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, clearStats=clearStats, ip6IfIndex=ip6IfIndex, ipNewCfgRmapPrec=ipNewCfgRmapPrec, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, icmp6OutErrors=icmp6OutErrors, ripStatInBadSourceIP=ripStatInBadSourceIP, ipRouteInfoGateway1=ipRouteInfoGateway1, vrrpNewCfgVirtRtrVrGrpTckL4Port=vrrpNewCfgVirtRtrVrGrpTckL4Port, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, ospfNewCfgRangeMask=ospfNewCfgRangeMask, ospfCurCfgMdkeyKey=ospfCurCfgMdkeyKey, ospfCurCfgIbgpMetricType=ospfCurCfgIbgpMetricType, ospfNewCfgRipMetricType=ospfNewCfgRipMetricType, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, vrrpNewCfgVirtRtrGrpTckHsrv=vrrpNewCfgVirtRtrGrpTckHsrv, icmp6InTimeExcds=icmp6InTimeExcds, ipAspathTableMax=ipAspathTableMax, ospfAreaRxTxStats=ospfAreaRxTxStats, ipNewCfgAlistEntry=ipNewCfgAlistEntry, ipFwdNewCfgRtCache=ipFwdNewCfgRtCache, nbrcacheInfoDestIp=nbrcacheInfoDestIp, ripNewCfgIntfListen=ripNewCfgIntfListen, vrrpCurCfgVirtRtrVrGrpTableEntry=vrrpCurCfgVirtRtrVrGrpTableEntry, ipFwdCurCfgLocalEntry=ipFwdCurCfgLocalEntry, ripStatInBadSizePkts=ripStatInBadSizePkts, bgpNewCfgPeerDefaultAction=bgpNewCfgPeerDefaultAction, ospfCumIntfNbrChange=ospfCumIntfNbrChange, gatewayInfoAddr=gatewayInfoAddr, ip6InReceives=ip6InReceives, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, vrrpCurCfgVirtRtrVrGrpTckL4Port=vrrpCurCfgVirtRtrVrGrpTckL4Port, bgpCurCfgPeerTtl=bgpCurCfgPeerTtl, bgpCurCfgPeerVipState=bgpCurCfgPeerVipState, bgpGeneral=bgpGeneral, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, ospfCurCfgRipOutRmapList=ospfCurCfgRipOutRmapList, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, ipNewCfgRmapState=ipNewCfgRmapState, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, ip6GwIndex=ip6GwIndex, vrrpStatOutAdvers=vrrpStatOutAdvers, icmp6InEchoReps=icmp6InEchoReps, rip2CurCfgVip=rip2CurCfgVip, ipNewCfgIntfDelete=ipNewCfgIntfDelete, ospfAreaIntfBackup=ospfAreaIntfBackup, ripInfoIntfDefault=ripInfoIntfDefault, ipCurCfgGwEntry=ipCurCfgGwEntry, ospfIntfRxHello=ospfIntfRxHello, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, ospfCumTxlsReqs=ospfCumTxlsReqs, icmp6OutEchoReps=icmp6OutEchoReps, ipCurCfgRmapMetric=ipCurCfgRmapMetric, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, ip6ReasmOKs=ip6ReasmOKs, ripInfoIntfListen=ripInfoIntfListen, ospfAreaChangeStats=ospfAreaChangeStats, ospfAreaTxlsReqs=ospfAreaTxlsReqs, vrrpInfo=vrrpInfo, ospfCurCfgRangeMask=ospfCurCfgRangeMask, ospfNewCfgVirtIntfNbr=ospfNewCfgVirtIntfNbr, ospfAreaNbrhello=ospfAreaNbrhello, nbrcacheInfoVlanId=nbrcacheInfoVlanId, ipCurCfgIntfVlan=ipCurCfgIntfVlan, dnsNewCfgDomainName=dnsNewCfgDomainName, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, ospfAreaInfoEntry=ospfAreaInfoEntry, icmp6OutRSs=icmp6OutRSs, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ospfIntfTxlsAcks=ospfIntfTxlsAcks, ospfNewCfgRipOutRmapList=ospfNewCfgRipOutRmapList, ipCurCfgAlistTable=ipCurCfgAlistTable, ospfNbrInFullState=ospfNbrInFullState, intfInfoEntry=intfInfoEntry, bgpNewCfgAggrIndex=bgpNewCfgAggrIndex, ipCurCfgAspathState=ipCurCfgAspathState, ospfNewCfgAreaId=ospfNewCfgAreaId, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, ripStatRouteTimeout=ripStatRouteTimeout, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, ipRmapCfg=ipRmapCfg, ripCurCfgIntfMcastUpdate=ripCurCfgIntfMcastUpdate, vrrpCurCfgVirtRtrVrGrpPriority=vrrpCurCfgVirtRtrVrGrpPriority, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, ospfIntfRxTxIndex=ospfIntfRxTxIndex, ospfIntfErrUnknownNbr=ospfIntfErrUnknownNbr, ip6Stats=ip6Stats, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, ospfNewCfgHostIpAddr=ospfNewCfgHostIpAddr, intfInfoBcastAddr=intfInfoBcastAddr, vrrpCurCfgGenState=vrrpCurCfgGenState, ospfAreaErrOptionsMismatch=ospfAreaErrOptionsMismatch, ospfIntfNbrStart=ospfIntfNbrStart, ipNewCfgGwInterval=ipNewCfgGwInterval, ipNewCfgRmapMetric=ipNewCfgRmapMetric, ripInfoIntfTrigUpdate=ripInfoIntfTrigUpdate, ospfCurCfgHostIpAddr=ospfCurCfgHostIpAddr, ip6icmpOutErrors=ip6icmpOutErrors, ipRoute6InfoNextHop=ipRoute6InfoNextHop, ipNewCfgGwPriority=ipNewCfgGwPriority, ospfAreaIntfUnloop=ospfAreaIntfUnloop, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, ospfAreaNbrN1way=ospfAreaNbrN1way, ripStatInBadVersion=ripStatInBadVersion, ospfCumRxTxStats=ospfCumRxTxStats, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, ipNewCfgGwDelete=ipNewCfgGwDelete, ipCurCfgNwfIndex=ipCurCfgNwfIndex, ospfNewCfgStaticOutRmapList=ospfNewCfgStaticOutRmapList, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, ipNewCfgGwIpVer=ipNewCfgGwIpVer, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, ospfAreaTableMaxSize=ospfAreaTableMaxSize, ospfAreaErrAuthFailure=ospfAreaErrAuthFailure, ipNewCfgASNumber=ipNewCfgASNumber, ip6icmpInErrors=ip6icmpInErrors, ospfAreaNbrIndex=ospfAreaNbrIndex, routeStats=routeStats, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, icmp6InRedirects=icmp6InRedirects, ipCurCfgIntfPrefixLen=ipCurCfgIntfPrefixLen, vrrpCurCfgVirtRtrVrGrpBmap=vrrpCurCfgVirtRtrVrGrpBmap, bgpCurCfgPeerStaticState=bgpCurCfgPeerStaticState, routeStatEntries=routeStatEntries, ipFwdNewCfgNoICMPRedirect=ipFwdNewCfgNoICMPRedirect, ospfIntfTxlsReqs=ospfIntfTxlsReqs, ospfIntfHello=ospfIntfHello, vrrpNewCfgGenState=vrrpNewCfgGenState, ospfIntfDown=ospfIntfDown, arpStatMaxEntries=arpStatMaxEntries, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, ipNewCfgGwTable=ipNewCfgGwTable, icmp6OutEchos=icmp6OutEchos, bgpCurCfgPeerState=bgpCurCfgPeerState, ospfIfNbrBackupDesignatedRtr=ospfIfNbrBackupDesignatedRtr, ipCurCfgAlistState=ipCurCfgAlistState, ospfCurCfgAreaTable=ospfCurCfgAreaTable, ipNewCfgIntfRouteAdv=ipNewCfgIntfRouteAdv, ospfAreaRxlsAcks=ospfAreaRxlsAcks, bgpCfg=bgpCfg, ipNewCfgGwIndex=ipNewCfgGwIndex, ospfIntfRxlsReqs=ospfIntfRxlsReqs, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, dnsCfg=dnsCfg, ipNewCfgStaticArpMAC=ipNewCfgStaticArpMAC, ipFwdNewCfgState=ipFwdNewCfgState, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, ospfCurCfgVirtIntfIndex=ospfCurCfgVirtIntfIndex, ospfAreaNbrStart=ospfAreaNbrStart, ospfCurCfgAreaId=ospfCurCfgAreaId, ipGeneralCfg=ipGeneralCfg, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, ipFwdNewCfgLocalEntry=ipFwdNewCfgLocalEntry, bgpCurCfgPeerOspfState=bgpCurCfgPeerOspfState, ospfAreaRxTxIndex=ospfAreaRxTxIndex, ipCurCfgRmapAp=ipCurCfgRmapAp, ipCurCfgAspathRmapIndex=ipCurCfgAspathRmapIndex, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, ipNwfTableMax=ipNwfTableMax, ospfNewCfgFixedOutRmapList=ospfNewCfgFixedOutRmapList, icmp6StatsEntry=icmp6StatsEntry, ospfCurCfgRangeAreaIndex=ospfCurCfgRangeAreaIndex, ospfNewCfgRangeIndex=ospfNewCfgRangeIndex, ospfCurCfgHostEntry=ospfCurCfgHostEntry, ipRoute6InfoProto=ipRoute6InfoProto, ripCurCfgIntfDefault=ripCurCfgIntfDefault, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, bgpNewCfgPeerRemoteAs=bgpNewCfgPeerRemoteAs, ipNewCfgRmapWeight=ipNewCfgRmapWeight, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, ospfCumNbrBadRequests=ospfCumNbrBadRequests, bgpCurCfgPeerMetric=bgpCurCfgPeerMetric, ripStatOutRequestPkts=ripStatOutRequestPkts, ipCurCfgNwfAddr=ipCurCfgNwfAddr, ifStatsEntry=ifStatsEntry, ip6icmpInMsgs=ip6icmpInMsgs, ipFwdCurCfgLocalIndex=ipFwdCurCfgLocalIndex, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType)
mibBuilder.exportSymbols("ALTEON-CHEETAH-NETWORK-MIB", ospfTotalNssaAreas=ospfTotalNssaAreas, ospfNewCfgFixedAddOutRmap=ospfNewCfgFixedAddOutRmap, intfInfoAddr=intfInfoAddr, dnsStats=dnsStats, ipCurCfgAspathAction=ipCurCfgAspathAction, ipNewCfgGwEntry=ipNewCfgGwEntry, bgpNewCfgPeerTtl=bgpNewCfgPeerTtl, bgpNewCfgPeerState=bgpNewCfgPeerState, routeStatMaxEntries=routeStatMaxEntries, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, dnsStatOutDnsRequests=dnsStatOutDnsRequests, ipNewCfgIntfIpVer=ipNewCfgIntfIpVer, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, ip6GwStatsIndex=ip6GwStatsIndex, ripInfoIntfAddress=ripInfoIntfAddress, vrrpNewCfgIfTable=vrrpNewCfgIfTable, bgpNewCfgState=bgpNewCfgState, ospfAreaErrNetmaskMismatch=ospfAreaErrNetmaskMismatch, ospfIntfNbrhello=ospfIntfNbrhello, ripCurCfgIntfState=ripCurCfgIntfState, ipCurCfgRmapPrec=ipCurCfgRmapPrec, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, ospfRangeTableMaxSize=ospfRangeTableMaxSize, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, nbrcacheInfoState=nbrcacheInfoState, bgpCurCfgLocalPref=bgpCurCfgLocalPref, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, bgpNewCfgAggrEntry=bgpNewCfgAggrEntry, ospfNewCfgMdkeyEntry=ospfNewCfgMdkeyEntry, ospfNewCfgAreaTable=ospfNewCfgAreaTable, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, ripStatInBadZeros=ripStatInBadZeros, icmp6OutNAs=icmp6OutNAs, ip6InAddrErrors=ip6InAddrErrors, rip2Info=rip2Info, vrrpCfg=vrrpCfg, ospfIntfBackup=ospfIntfBackup, ospfIfNbrTable=ospfIfNbrTable, ospfAreaIntfIndex=ospfAreaIntfIndex, ipCurCfgAlistMetric=ipCurCfgAlistMetric, ospfCurCfgMdkeyIndex=ospfCurCfgMdkeyIndex, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, ripStatInResponsePkts=ripStatInResponsePkts, bgpNewCfgAggrAddr=bgpNewCfgAggrAddr, ospfCurCfgHostIndex=ospfCurCfgHostIndex, bgpCurCfgPeerDefaultAction=bgpCurCfgPeerDefaultAction, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, ipNewCfgGwRetry=ipNewCfgGwRetry, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, vrrpNewCfgVirtRtrVrGrpPriority=vrrpNewCfgVirtRtrVrGrpPriority, ospfCurCfgIbgpMetric=ospfCurCfgIbgpMetric, icmp6InErrors=icmp6InErrors, ipNewCfgRmapIndex=ipNewCfgRmapIndex, ipFwdPortTableMaxSize=ipFwdPortTableMaxSize, icmp6InDestUnreachs=icmp6InDestUnreachs, bgpNewCfgPeerOspfState=bgpNewCfgPeerOspfState, bgpCurCfgAggrIndex=bgpCurCfgAggrIndex, ospfIntfCountForRouter=ospfIntfCountForRouter, ospfCurCfgEbgpMetricType=ospfCurCfgEbgpMetricType, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, ospfCurCfgRipMetric=ospfCurCfgRipMetric, ipGatewayTableMax=ipGatewayTableMax, vrrpNewCfgVirtRtrVrGrpState=vrrpNewCfgVirtRtrVrGrpState, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, ipNewCfgAspathDelete=ipNewCfgAspathDelete, ipNewCfgAlistAction=ipNewCfgAlistAction, ipFwdNewCfgPortTable=ipFwdNewCfgPortTable, ifStatsTable=ifStatsTable, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, arpStats=arpStats, ospfNewCfgHostEntry=ospfNewCfgHostEntry, ospfNewCfgRipRemoveOutRmap=ospfNewCfgRipRemoveOutRmap, icmp6InRSs=icmp6InRSs, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, ipNewCfgAlistTable=ipNewCfgAlistTable, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, bgpCurCfgState=bgpCurCfgState, arpInfoFlag=arpInfoFlag, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, ospfNewCfgRangeEntry=ospfNewCfgRangeEntry, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, ospfCurCfgStaticOutRmapList=ospfCurCfgStaticOutRmapList, ospfGeneral=ospfGeneral, ospfNewCfgIbgpOutRmapList=ospfNewCfgIbgpOutRmapList, arpInfo=arpInfo, ospfIntfUnloop=ospfIntfUnloop, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, ospfRedistributeStatic=ospfRedistributeStatic, ospfCurCfgMdkeyTable=ospfCurCfgMdkeyTable, ospfAreaNbrRstAd=ospfAreaNbrRstAd, rip2GeneralInfo=rip2GeneralInfo, ipCurCfgRmapState=ipCurCfgRmapState, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, ospfIntfErrorStatsEntry=ospfIntfErrorStatsEntry, ripCurCfgIntfVersion=ripCurCfgIntfVersion, ripCurCfgIntfSupply=ripCurCfgIntfSupply, ripGeneral=ripGeneral, bgpCurCfgAggrTable=bgpCurCfgAggrTable, ipNewCfgGwVlan=ipNewCfgGwVlan, arpInfoRefPorts=arpInfoRefPorts, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, ospfNewCfgVirtIntfMdkey=ospfNewCfgVirtIntfMdkey, ipCurCfgGwAddr=ipCurCfgGwAddr, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, ospfIntfNbrN2way=ospfIntfNbrN2way, ospfNewCfgHostTable=ospfNewCfgHostTable, ospfNewCfgIntfIndex=ospfNewCfgIntfIndex, ipRouteInfoInterface=ipRouteInfoInterface, ospfCurCfgHostTable=ospfCurCfgHostTable, layer3=layer3, bgpCurCfgPeerFixedState=bgpCurCfgPeerFixedState, ospfCurCfgFixedMetric=ospfCurCfgFixedMetric, ip6GwRetry=ip6GwRetry, ipNewCfgIntfPrefixLen=ipNewCfgIntfPrefixLen, ripStatInBadSourcePort=ripStatInBadSourcePort, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, layer3Stats=layer3Stats, bgpCurCfgPeerOutRmapList=bgpCurCfgPeerOutRmapList, ipCurCfgStaticArpEntry=ipCurCfgStaticArpEntry, ripStatOutResponsePkts=ripStatOutResponsePkts, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, ripStatOutPackets=ripStatOutPackets, ip6OutNoRoutes=ip6OutNoRoutes, ipNewCfgNwfEntry=ipNewCfgNwfEntry, vrrpNewCfgVirtRtrVrGrpRem=vrrpNewCfgVirtRtrVrGrpRem, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, vrrpCurCfgVirtRtrVrGrpTckVlanPort=vrrpCurCfgVirtRtrVrGrpTckVlanPort, ospfAreaErrUnknownNbr=ospfAreaErrUnknownNbr, icmp6InNAs=icmp6InNAs, bgpNewCfgPeerRemoveInRmap=bgpNewCfgPeerRemoveInRmap, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, ospfCurCfgRangeTable=ospfCurCfgRangeTable, ipFwdCurCfgPortIndex=ipFwdCurCfgPortIndex, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, ospfCurCfgIntfId=ospfCurCfgIntfId, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, ospfAreaErrorStats=ospfAreaErrorStats, ripInfoIntfMetric=ripInfoIntfMetric, ipNewCfgAspathRmapIndex=ipNewCfgAspathRmapIndex, ospfCumIntfLoop=ospfCumIntfLoop, ospfAreaIntfDown=ospfAreaIntfDown, ospfIfBackupDesignatedRouterIP=ospfIfBackupDesignatedRouterIP, bgpNewCfgPeerVipState=bgpNewCfgPeerVipState, ospfCurCfgVirtIntfAreaId=ospfCurCfgVirtIntfAreaId, bgpCurCfgPeerEntry=bgpCurCfgPeerEntry, ospfNewCfgStaticRemoveOutRmap=ospfNewCfgStaticRemoveOutRmap, ospfNewCfgRipMetric=ospfNewCfgRipMetric, ipCurCfgStaticArpIndx=ipCurCfgStaticArpIndx, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, bgpNewCfgPeerFixedState=bgpNewCfgPeerFixedState, nbrcacheClear=nbrcacheClear, ospfRedistributeRip=ospfRedistributeRip, ripInfoIntfAuth=ripInfoIntfAuth, ipNewCfgAspathAction=ipNewCfgAspathAction, ospfIntfLoop=ospfIntfLoop, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, rip2RoutesInfoMetric=rip2RoutesInfoMetric, ripCurCfgIntfTable=ripCurCfgIntfTable, ipCurCfgNwfState=ipCurCfgNwfState, ospfNewCfgRangeHideState=ospfNewCfgRangeHideState, ipCurCfgASNumber=ipCurCfgASNumber, ipNewCfgStaticArpPort=ipNewCfgStaticArpPort, PYSNMP_MODULE_ID=layer3, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, arpInfoSrcPort=arpInfoSrcPort, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, ip6InDiscards=ip6InDiscards, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ospfTotalNeighbours=ospfTotalNeighbours, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, icmp6InParmProbs=icmp6InParmProbs, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, ospfIfTotalNeighbours=ospfIfTotalNeighbours, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, ipNewCfgNwfAddr=ipNewCfgNwfAddr, ospfCurCfgEbgpMetric=ospfCurCfgEbgpMetric, ospfNewCfgEbgpAddOutRmap=ospfNewCfgEbgpAddOutRmap, ospfIntfErrorStats=ospfIntfErrorStats, ospfIntfTxDatabase=ospfIntfTxDatabase, ospfCumNbrStart=ospfCumNbrStart, bgpNewCfgPeerOutRmapList=bgpNewCfgPeerOutRmapList, rip2RoutesInfoNxtHopIndex=rip2RoutesInfoNxtHopIndex, ospfCurCfgState=ospfCurCfgState, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, ripNewCfgIntfSupply=ripNewCfgIntfSupply, ipCurCfgAlistNwf=ipCurCfgAlistNwf, ospfIntfErrOptionsMismatch=ospfIntfErrOptionsMismatch, ospfIntfErrAuthFailure=ospfIntfErrAuthFailure, ripNewCfgIntfEntry=ripNewCfgIntfEntry, ospfCurCfgIntfIndex=ospfCurCfgIntfIndex, ospfCumTxlsUpdates=ospfCumTxlsUpdates, icmp6OutMsgs=icmp6OutMsgs, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, ospfCurCfgIntfTable=ospfCurCfgIntfTable, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, ospfIntfNbrIndex=ospfIntfNbrIndex, ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, ospfAreaTxHello=ospfAreaTxHello, ospfRedistributeEbgp=ospfRedistributeEbgp, ipCurCfgAspathIndex=ipCurCfgAspathIndex)
