#
# PySNMP MIB module HIRSCHMANN-MMP4-BASICL2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmPlatform4.mib
# Produced by pysmi-1.1.8 at Wed Sep 13 14:28:24 2023
# On host fv-az612-215 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hirschmann, HmAgentLogSeverity = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hirschmann", "HmAgentLogSeverity")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
dot1qVlanIndex, dot1qFdbId, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qFdbId", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Unsigned32, Counter64, TimeTicks, Counter32, iso, Bits, MibIdentifier, IpAddress, ObjectIdentity, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Unsigned32", "Counter64", "TimeTicks", "Counter32", "iso", "Bits", "MibIdentifier", "IpAddress", "ObjectIdentity", "Integer32", "Gauge32")
DisplayString, RowStatus, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "MacAddress")
hmPlatform4BasicL2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 15, 1))
hmPlatform4BasicL2.setRevisions(('2005-11-22 12:00', '2005-08-18 12:00', '2004-07-02 00:00',))
if mibBuilder.loadTexts: hmPlatform4BasicL2.setLastUpdated('200511221200Z')
if mibBuilder.loadTexts: hmPlatform4BasicL2.setOrganization('Hirschmann Automation and Control GmbH')
hmPlatform4 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15))
class HmAgentPortMask(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class HmAgentDot1xPortControlMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3), ("macBased", 4))

class HmAgentDot1xSessionTerminationAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("reauthenticate", 2))

hmAgentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 1))
hmAgentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2))
hmAgentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTrapLogTotal.setStatus('current')
hmAgentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTrapLogTotalSinceLastViewed.setStatus('deprecated')
hmAgentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 4), )
if mibBuilder.loadTexts: hmAgentTrapLogTable.setStatus('current')
hmAgentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentTrapLogIndex"))
if mibBuilder.loadTexts: hmAgentTrapLogEntry.setStatus('current')
hmAgentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTrapLogIndex.setStatus('current')
hmAgentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTrapLogSystemTime.setStatus('current')
hmAgentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTrapLogTrap.setStatus('current')
hmAgentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2))
hmAgentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1))
hmAgentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hmAgentLoginSessionTable.setStatus('current')
hmAgentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentLoginSessionIndex"))
if mibBuilder.loadTexts: hmAgentLoginSessionEntry.setStatus('current')
hmAgentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionIndex.setStatus('current')
hmAgentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionUserName.setStatus('current')
hmAgentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionIPAddress.setStatus('current')
hmAgentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionConnectionType.setStatus('current')
hmAgentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionIdleTime.setStatus('current')
hmAgentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLoginSessionSessionTime.setStatus('current')
hmAgentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLoginSessionStatus.setStatus('current')
hmAgentLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 14))
hmAgentLogConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 14, 1))
hmAgentLogSysLogConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4))
hmAgentLogSyslogAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLogSyslogAdminStatus.setStatus('current')
hmAgentLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5), )
if mibBuilder.loadTexts: hmAgentLogSyslogHostTable.setStatus('current')
hmAgentLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentLogHostTableIndex"))
if mibBuilder.loadTexts: hmAgentLogSyslogHostEntry.setStatus('current')
hmAgentLogHostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hmAgentLogHostTableIndex.setStatus('current')
hmAgentLogHostTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentLogHostTableIpAddress.setStatus('current')
hmAgentLogHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentLogHostTablePort.setStatus('current')
hmAgentLogHostTableSeverityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1, 5), HmAgentLogSeverity().clone('critical')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentLogHostTableSeverityFilter.setStatus('current')
hmAgentLogHostTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 14, 1, 4, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentLogHostTableRowStatus.setStatus('current')
hmAgentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 2))
hmAgentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTelnetLoginTimeout.setStatus('current')
hmAgentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTelnetMaxSessions.setStatus('current')
hmAgentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTelnetAllowNewMode.setStatus('current')
hmAgentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3))
hmAgentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserConfigCreate.setStatus('current')
hmAgentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: hmAgentUserConfigTable.setStatus('current')
hmAgentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentUserIndex"))
if mibBuilder.loadTexts: hmAgentUserConfigEntry.setStatus('current')
hmAgentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hmAgentUserIndex.setStatus('current')
hmAgentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserName.setStatus('current')
hmAgentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserPassword.setStatus('current')
hmAgentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserAccessMode.setStatus('current')
hmAgentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserStatus.setStatus('current')
hmAgentUserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserAuthenticationType.setStatus('current')
hmAgentUserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserEncryptionType.setStatus('current')
hmAgentUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentUserEncryptionPassword.setStatus('current')
hmAgentUserDefaultPwdActive = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 1, 3, 248), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentUserDefaultPwdActive.setStatus('current')
hmAgentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2))
hmAgentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagConfigCreate.setStatus('current')
hmAgentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2), )
if mibBuilder.loadTexts: hmAgentLagSummaryConfigTable.setStatus('current')
hmAgentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentLagSummaryLagIndex"))
if mibBuilder.loadTexts: hmAgentLagSummaryConfigEntry.setStatus('current')
hmAgentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagSummaryLagIndex.setStatus('current')
hmAgentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryName.setStatus('current')
hmAgentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryFlushTimer.setStatus('obsolete')
hmAgentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryLinkTrap.setStatus('current')
hmAgentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryAdminMode.setStatus('current')
hmAgentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("off", 3), ("on", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryStpMode.setStatus('current')
hmAgentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryAddPort.setStatus('current')
hmAgentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryDeletePort.setStatus('current')
hmAgentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagSummaryStatus.setStatus('current')
hmAgentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagSummaryType.setStatus('current')
hmAgentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3), )
if mibBuilder.loadTexts: hmAgentLagDetailedConfigTable.setStatus('current')
hmAgentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentLagDetailedLagIndex"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentLagDetailedIfIndex"))
if mibBuilder.loadTexts: hmAgentLagDetailedConfigEntry.setStatus('current')
hmAgentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagDetailedLagIndex.setStatus('current')
hmAgentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagDetailedIfIndex.setStatus('current')
hmAgentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagDetailedPortSpeed.setStatus('current')
hmAgentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentLagDetailedPortStatus.setStatus('current')
hmAgentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLagConfigStaticCapability.setStatus('current')
hmAgentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 7))
hmAgentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSpanningTreeMode.setStatus('current')
hmAgentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8))
hmAgentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 4), )
if mibBuilder.loadTexts: hmAgentSwitchAddressAgingTimeoutTable.setStatus('current')
hmAgentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: hmAgentSwitchAddressAgingTimeoutEntry.setStatus('current')
hmAgentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchAddressAgingTimeout.setStatus('current')
hmAgentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchBroadcastControlMode.setStatus('current')
hmAgentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchDot3FlowControlMode.setStatus('current')
hmAgentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5), )
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringTable.setStatus('current')
hmAgentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchStaticMacFilteringVlanId"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringEntry.setStatus('current')
hmAgentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringVlanId.setStatus('current')
hmAgentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringAddress.setStatus('current')
hmAgentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1, 3), HmAgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
hmAgentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1, 4), HmAgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringDestPortMask.setStatus('current')
hmAgentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentSwitchStaticMacFilteringStatus.setStatus('current')
hmAgentSwitchIGMPSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6))
hmAgentSwitchIGMPSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingAdminMode.setStatus('current')
hmAgentSwitchIGMPSnoopingGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingGroupMembershipInterval.setStatus('current')
hmAgentSwitchIGMPSnoopingMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3598)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingMaxResponseTime.setStatus('current')
hmAgentSwitchIGMPSnoopingMRPExpirationTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingMRPExpirationTime.setStatus('current')
hmAgentSwitchIGMPSnoopingPortMask = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 5), HmAgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingPortMask.setStatus('current')
hmAgentSwitchIGMPSnoopingMulticastControlFramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIGMPSnoopingMulticastControlFramesProcessed.setStatus('current')
hmAgentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7))
hmAgentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: hmAgentSwitchMFDBTable.setStatus('current')
hmAgentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchMFDBVlanId"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchMFDBMacAddress"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: hmAgentSwitchMFDBEntry.setStatus('current')
hmAgentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBVlanId.setStatus('current')
hmAgentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBMacAddress.setStatus('current')
hmAgentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("msd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBProtocolType.setStatus('current')
hmAgentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBType.setStatus('current')
hmAgentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBDescription.setStatus('current')
hmAgentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 6), HmAgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBForwardingPortMask.setStatus('current')
hmAgentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 1, 1, 7), HmAgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBFilteringPortMask.setStatus('current')
hmAgentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 2), )
if mibBuilder.loadTexts: hmAgentSwitchMFDBSummaryTable.setStatus('current')
hmAgentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchMFDBSummaryVlanId"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: hmAgentSwitchMFDBSummaryEntry.setStatus('current')
hmAgentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBSummaryVlanId.setStatus('current')
hmAgentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBSummaryMacAddress.setStatus('current')
hmAgentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 2, 1, 3), HmAgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
hmAgentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBMaxTableEntries.setStatus('current')
hmAgentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBMostEntriesUsed.setStatus('current')
hmAgentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchMFDBCurrentEntries.setStatus('current')
hmAgentSwitchDVlanTagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 8))
hmAgentSwitchDVlanTagEthertype = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchDVlanTagEthertype.setStatus('current')
hmAgentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9))
hmAgentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1))
hmAgentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadMode.setStatus('current')
hmAgentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadServerIP.setStatus('current')
hmAgentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadPath.setStatus('current')
hmAgentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadFilename.setStatus('current')
hmAgentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("messagelog", 4), ("traplog", 5), ("clibanner", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadDataType.setStatus('current')
hmAgentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferUploadStart.setStatus('current')
hmAgentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTransferUploadStatus.setStatus('current')
hmAgentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2))
hmAgentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadMode.setStatus('current')
hmAgentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadServerIP.setStatus('current')
hmAgentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadPath.setStatus('current')
hmAgentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadFilename.setStatus('current')
hmAgentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("clibanner", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadDataType.setStatus('current')
hmAgentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentTransferDownloadStart.setStatus('current')
hmAgentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentTransferDownloadStatus.setStatus('current')
hmAgentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10))
hmAgentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMirroredPortIfIndex.setStatus('obsolete')
hmAgentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProbePortIfIndex.setStatus('obsolete')
hmAgentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirroringMode.setStatus('obsolete')
hmAgentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4), )
if mibBuilder.loadTexts: hmAgentPortMirrorTable.setStatus('current')
hmAgentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentPortMirrorSessionNum"))
if mibBuilder.loadTexts: hmAgentPortMirrorEntry.setStatus('current')
hmAgentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hmAgentPortMirrorSessionNum.setStatus('current')
hmAgentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirrorDestinationPort.setStatus('current')
hmAgentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 3), HmAgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirrorSourcePortMask.setStatus('current')
hmAgentPortMirrorIngressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 248), HmAgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirrorIngressMask.setStatus('current')
hmAgentPortMirrorEgressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 249), HmAgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirrorEgressMask.setStatus('current')
hmAgentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMirrorAdminMode.setStatus('current')
hmAgentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 12), )
if mibBuilder.loadTexts: hmAgentDot3adAggPortTable.setStatus('current')
hmAgentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 12, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentDot3adAggPort"))
if mibBuilder.loadTexts: hmAgentDot3adAggPortEntry.setStatus('current')
hmAgentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot3adAggPort.setStatus('current')
hmAgentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot3adAggPortLACPMode.setStatus('current')
hmAgentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13), )
if mibBuilder.loadTexts: hmAgentPortConfigTable.setStatus('current')
hmAgentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentPortDot1dBasePort"))
if mibBuilder.loadTexts: hmAgentPortConfigEntry.setStatus('current')
hmAgentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortDot1dBasePort.setStatus('current')
hmAgentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortIfIndex.setStatus('current')
hmAgentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortIanaType.setStatus('current')
hmAgentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortSTPMode.setStatus('current')
hmAgentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortSTPState.setStatus('current')
hmAgentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortAdminMode.setStatus('current')
hmAgentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortPhysicalMode.setStatus('obsolete')
hmAgentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortPhysicalStatus.setStatus('obsolete')
hmAgentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortLinkTrapMode.setStatus('current')
hmAgentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortClearStats.setStatus('current')
hmAgentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortDefaultType.setStatus('current')
hmAgentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortType.setStatus('current')
hmAgentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortAutoNegAdminStatus.setStatus('current')
hmAgentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortDot3FlowControlMode.setStatus('current')
hmAgentPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("core", 1), ("normal", 2), ("access", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortDVlanTagMode.setStatus('current')
hmAgentPortDVlanTagEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortDVlanTagEthertype.setStatus('current')
hmAgentPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortDVlanTagCustomerId.setStatus('current')
hmAgentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortMaxFrameSizeLimit.setStatus('current')
hmAgentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortMaxFrameSize.setStatus('current')
hmAgentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("vlanidanddot1p", 4), ("untagged", 5), ("disable", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanMode.setStatus('current')
hmAgentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanID.setStatus('current')
hmAgentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanPriority.setStatus('current')
hmAgentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanDataPriorityMode.setStatus('current')
hmAgentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanOperationalStatus.setStatus('current')
hmAgentPortVoiceVlanDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanDSCP.setStatus('current')
hmAgentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentPortVoiceVlanAuthMode.setStatus('current')
hmAgentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14))
hmAgentProtocolGroupCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupCreate.setStatus('current')
hmAgentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2), )
if mibBuilder.loadTexts: hmAgentProtocolGroupTable.setStatus('current')
hmAgentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentProtocolGroupId"))
if mibBuilder.loadTexts: hmAgentProtocolGroupEntry.setStatus('current')
hmAgentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentProtocolGroupId.setStatus('current')
hmAgentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentProtocolGroupName.setStatus('current')
hmAgentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupVlanId.setStatus('current')
hmAgentProtocolGroupProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupProtocolIP.setStatus('current')
hmAgentProtocolGroupProtocolARP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupProtocolARP.setStatus('current')
hmAgentProtocolGroupProtocolIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupProtocolIPX.setStatus('current')
hmAgentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentProtocolGroupStatus.setStatus('current')
hmAgentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 3), )
if mibBuilder.loadTexts: hmAgentProtocolGroupPortTable.setStatus('current')
hmAgentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentProtocolGroupId"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: hmAgentProtocolGroupPortEntry.setStatus('current')
hmAgentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentProtocolGroupPortIfIndex.setStatus('current')
hmAgentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentProtocolGroupPortStatus.setStatus('current')
hmAgentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15))
hmAgentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpConfigDigestKey.setStatus('current')
hmAgentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpConfigFormatSelector.setStatus('current')
hmAgentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpConfigName.setStatus('current')
hmAgentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpConfigRevision.setStatus('current')
hmAgentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3))).clone('dot1w')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpForceVersion.setStatus('current')
hmAgentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpAdminMode.setStatus('current')
hmAgentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpBpduGuardMode.setStatus('current')
hmAgentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpBpduFilterDefault.setStatus('current')
hmAgentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7), )
if mibBuilder.loadTexts: hmAgentStpPortTable.setStatus('current')
hmAgentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmAgentStpPortEntry.setStatus('current')
hmAgentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpPortState.setStatus('current')
hmAgentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsMstpBpduRx.setStatus('current')
hmAgentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsMstpBpduTx.setStatus('current')
hmAgentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsRstpBpduRx.setStatus('current')
hmAgentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsRstpBpduTx.setStatus('current')
hmAgentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsStpBpduRx.setStatus('current')
hmAgentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortStatsStpBpduTx.setStatus('current')
hmAgentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpPortUpTime.setStatus('current')
hmAgentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpPortMigrationCheck.setStatus('current')
hmAgentStpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpPortHelloTime.setStatus('current')
hmAgentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8))
hmAgentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstHelloTime.setStatus('current')
hmAgentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstMaxAge.setStatus('current')
hmAgentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstRegionalRootId.setStatus('current')
hmAgentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstRegionalRootPathCost.setStatus('current')
hmAgentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstRootFwdDelay.setStatus('current')
hmAgentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgeFwdDelay.setStatus('current')
hmAgentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgeHelloTime.setStatus('current')
hmAgentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeHoldTime.setStatus('current')
hmAgentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgeMaxAge.setStatus('current')
hmAgentStpCstBridgeDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeDesignatedRoot.setStatus('current')
hmAgentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgePriority.setStatus('current')
hmAgentStpCstBridgeTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeTimeSinceTopologyChange.setStatus('current')
hmAgentStpCstBridgeTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeTopChanges.setStatus('current')
hmAgentStpCstBridgeRootCost = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeRootCost.setStatus('current')
hmAgentStpCstBridgeRootPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstBridgeRootPort.setStatus('current')
hmAgentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgeMaxHops.setStatus('current')
hmAgentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 8, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstBridgeHoldCount.setStatus('current')
hmAgentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9), )
if mibBuilder.loadTexts: hmAgentStpCstPortTable.setStatus('current')
hmAgentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmAgentStpCstPortEntry.setStatus('current')
hmAgentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortOperEdge.setStatus('current')
hmAgentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortOperPointToPoint.setStatus('current')
hmAgentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortTopologyChangeAck.setStatus('current')
hmAgentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortEdge.setStatus('current')
hmAgentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortForwardingState.setStatus('current')
hmAgentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortId.setStatus('current')
hmAgentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortPathCost.setStatus('current')
hmAgentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortPriority.setStatus('current')
hmAgentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstDesignatedBridgeId.setStatus('current')
hmAgentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstDesignatedCost.setStatus('current')
hmAgentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstDesignatedPortId.setStatus('current')
hmAgentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstExtPortPathCost.setStatus('current')
hmAgentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortAutoEdge.setStatus('current')
hmAgentStpCstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("root", 1), ("alternate", 2), ("designated", 3), ("backup", 4), ("master", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortRole.setStatus('current')
hmAgentStpCstPortDisputed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortDisputed.setStatus('current')
hmAgentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpCstPortBpduGuardEffect.setStatus('current')
hmAgentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortBpduFilter.setStatus('current')
hmAgentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortBpduFlood.setStatus('current')
hmAgentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortRootGuard.setStatus('current')
hmAgentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortTCNGuard.setStatus('current')
hmAgentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpCstPortLoopGuard.setStatus('current')
hmAgentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10), )
if mibBuilder.loadTexts: hmAgentStpMstTable.setStatus('current')
hmAgentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentStpMstId"))
if mibBuilder.loadTexts: hmAgentStpMstEntry.setStatus('current')
hmAgentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstId.setStatus('current')
hmAgentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpMstBridgePriority.setStatus('current')
hmAgentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstBridgeIdentifier.setStatus('current')
hmAgentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstDesignatedRootId.setStatus('current')
hmAgentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstRootPathCost.setStatus('current')
hmAgentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstRootPortId.setStatus('current')
hmAgentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstTimeSinceTopologyChange.setStatus('current')
hmAgentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstTopologyChangeCount.setStatus('current')
hmAgentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstTopologyChangeParm.setStatus('current')
hmAgentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentStpMstRowStatus.setStatus('current')
hmAgentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11), )
if mibBuilder.loadTexts: hmAgentStpMstPortTable.setStatus('current')
hmAgentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmAgentStpMstPortEntry.setStatus('current')
hmAgentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortForwardingState.setStatus('current')
hmAgentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortId.setStatus('current')
hmAgentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpMstPortPathCost.setStatus('current')
hmAgentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentStpMstPortPriority.setStatus('current')
hmAgentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstDesignatedBridgeId.setStatus('current')
hmAgentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstDesignatedCost.setStatus('current')
hmAgentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstDesignatedPortId.setStatus('current')
hmAgentStpMstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("root", 1), ("alternate", 2), ("designated", 3), ("backup", 4), ("master", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortRole.setStatus('current')
hmAgentStpMstPortDisputed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortDisputed.setStatus('current')
hmAgentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortLoopInconsistentState.setStatus('current')
hmAgentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
hmAgentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
hmAgentStpMstReceivedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstReceivedBridgeId.setStatus('current')
hmAgentStpMstReceivedRPC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstReceivedRPC.setStatus('current')
hmAgentStpMstReceivedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 11, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentStpMstReceivedPortId.setStatus('current')
hmAgentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 12), )
if mibBuilder.loadTexts: hmAgentStpMstVlanTable.setStatus('current')
hmAgentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 12, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: hmAgentStpMstVlanEntry.setStatus('current')
hmAgentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentStpMstVlanRowStatus.setStatus('current')
hmAgentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 17))
hmAgentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 17, 1), )
if mibBuilder.loadTexts: hmAgentClassOfServicePortTable.setStatus('current')
hmAgentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentClassOfServicePortPriority"))
if mibBuilder.loadTexts: hmAgentClassOfServicePortEntry.setStatus('current')
hmAgentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hmAgentClassOfServicePortPriority.setStatus('current')
hmAgentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClassOfServicePortClass.setStatus('current')
hmAgentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 3))
hmAgentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSaveConfig.setStatus('current')
hmAgentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearConfig.setStatus('current')
hmAgentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearLags.setStatus('current')
hmAgentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearLoginSessions.setStatus('current')
hmAgentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearPasswords.setStatus('current')
hmAgentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearPortStats.setStatus('current')
hmAgentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearSwitchStats.setStatus('current')
hmAgentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearTrapLog.setStatus('current')
hmAgentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentClearVlan.setStatus('current')
hmAgentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentResetSystem.setStatus('current')
hmAgentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSaveConfigStatus.setStatus('current')
hmAgentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 4))
hmAgentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCableTesterStatus.setStatus('current')
hmAgentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentCableTesterIfIndex.setStatus('current')
hmAgentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCableTesterCableStatus.setStatus('current')
hmAgentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCableTesterMinimumCableLength.setStatus('current')
hmAgentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCableTesterMaximumCableLength.setStatus('current')
hmAgentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentCableTesterCableFailureLocation.setStatus('current')
hmAgentMgmtSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 11))
hmAgentSSHConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 11, 2))
hmAgentSSHAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSSHAdminMode.setStatus('current')
hmAgentSSHProtocolLevel = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ssh10", 1), ("ssh20", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSSHProtocolLevel.setStatus('current')
hmAgentSSHSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 11, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSSHSessionsCount.setStatus('current')
hmAgentSSHMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 11, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSSHMaxSessionsCount.setStatus('current')
hmAgentSSHSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 11, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSSHSessionTimeout.setStatus('current')
hmRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 8))
hmAgentRadiusConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 8, 1))
hmAgentRadiusMaxTransmit = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusMaxTransmit.setStatus('current')
hmAgentRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusTimeout.setStatus('current')
hmAgentRadiusAccountingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusAccountingMode.setStatus('current')
hmAgentRadiusStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusStatsClear.setStatus('current')
hmAgentRadiusAccountingIndexNextValid = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRadiusAccountingIndexNextValid.setStatus('current')
hmAgentRadiusAccountingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6), )
if mibBuilder.loadTexts: hmAgentRadiusAccountingConfigTable.setStatus('current')
hmAgentRadiusAccountingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentRadiusAccountingServerIndex"))
if mibBuilder.loadTexts: hmAgentRadiusAccountingConfigEntry.setStatus('current')
hmAgentRadiusAccountingServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hmAgentRadiusAccountingServerIndex.setStatus('current')
hmAgentRadiusAccountingServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentRadiusAccountingServerAddress.setStatus('current')
hmAgentRadiusAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusAccountingPort.setStatus('current')
hmAgentRadiusAccountingSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusAccountingSecret.setStatus('current')
hmAgentRadiusAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentRadiusAccountingStatus.setStatus('current')
hmAgentRadiusServerIndexNextValid = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRadiusServerIndexNextValid.setStatus('current')
hmAgentRadiusServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8), )
if mibBuilder.loadTexts: hmAgentRadiusServerConfigTable.setStatus('current')
hmAgentRadiusServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentRadiusServerIndex"))
if mibBuilder.loadTexts: hmAgentRadiusServerConfigEntry.setStatus('current')
hmAgentRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hmAgentRadiusServerIndex.setStatus('current')
hmAgentRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentRadiusServerAddress.setStatus('current')
hmAgentRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusServerPort.setStatus('current')
hmAgentRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusServerSecret.setStatus('current')
hmAgentRadiusServerPrimaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusServerPrimaryMode.setStatus('current')
hmAgentRadiusServerCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRadiusServerCurrentMode.setStatus('current')
hmAgentRadiusServerMsgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRadiusServerMsgAuth.setStatus('current')
hmAgentRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 8, 1, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentRadiusServerStatus.setStatus('current')
hmPlatform4OutboundTelnetPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 19))
hmAgentOutboundTelnetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 19, 1))
hmAgentOutboundTelnetAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOutboundTelnetAdminMode.setStatus('current')
hmAgentOutboundTelnetMaxNoOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOutboundTelnetMaxNoOfSessions.setStatus('current')
hmAgentOutboundTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOutboundTelnetTimeout.setStatus('current')
hmAgentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25))
hmAgentSwitchVoiceVLANAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchVoiceVLANAdminMode.setStatus('current')
hmAgentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25, 2), )
if mibBuilder.loadTexts: hmAgentSwitchVoiceVlanDeviceTable.setStatus('current')
hmAgentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchVoiceVlanInterfaceNum"), (0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: hmAgentSwitchVoiceVlanDeviceEntry.setStatus('current')
hmAgentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchVoiceVlanInterfaceNum.setStatus('current')
hmAgentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 1, 2, 8, 25, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
hmAgentDot1xAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 36))
hmAgentDot1xEnhancementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 36, 1))
hmAgentDot1xRadiusVlanAssignment = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xRadiusVlanAssignment.setStatus('current')
hmAgentDot1xDynamicVlanCreationMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xDynamicVlanCreationMode.setStatus('current')
hmAgentDot1xSafeVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xSafeVlanMode.setStatus('current')
hmAgentDot1xPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 36, 2))
hmAgentDot1xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1), )
if mibBuilder.loadTexts: hmAgentDot1xPortConfigTable.setStatus('current')
hmAgentDot1xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hmAgentDot1xPortConfigEntry.setStatus('current')
hmAgentDot1xPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 1), HmAgentDot1xPortControlMode().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xPortControlMode.setStatus('current')
hmAgentDot1xGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xGuestVlanId.setStatus('current')
hmAgentDot1xGuestVlanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xGuestVlanPeriod.setStatus('current')
hmAgentDot1xUnauthenticatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xUnauthenticatedVlan.setStatus('current')
hmAgentDot1xMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xMaxUsers.setStatus('current')
hmAgentDot1xPortVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xPortVlanAssigned.setStatus('current')
hmAgentDot1xPortVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("notAssigned", 7))).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xPortVlanAssignedReason.setStatus('current')
hmAgentDot1xPortSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xPortSessionTimeout.setStatus('current')
hmAgentDot1xPortTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 9), HmAgentDot1xSessionTerminationAction().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xPortTerminationAction.setStatus('current')
hmAgentDot1xPortMABenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentDot1xPortMABenabled.setStatus('current')
hmAgentDot1xPortMABenabledOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xPortMABenabledOperational.setStatus('current')
hmAgentDot1xClientConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 36, 3))
hmAgentDot1xClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1), )
if mibBuilder.loadTexts: hmAgentDot1xClientConfigTable.setStatus('current')
hmAgentDot1xClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentDot1xClientMacAddress"))
if mibBuilder.loadTexts: hmAgentDot1xClientConfigEntry.setStatus('current')
hmAgentDot1xClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientMacAddress.setStatus('current')
hmAgentDot1xLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xLogicalPort.setStatus('current')
hmAgentDot1xInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xInterface.setStatus('current')
hmAgentDot1xClientAuthPAEstate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientAuthPAEstate.setStatus('current')
hmAgentDot1xClientBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientBackendState.setStatus('current')
hmAgentDot1xClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientUserName.setStatus('current')
hmAgentDot1xClientSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientSessionTime.setStatus('current')
hmAgentDot1xClientFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientFilterID.setStatus('current')
hmAgentDot1xClientVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientVlanAssigned.setStatus('current')
hmAgentDot1xClientVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("invalid", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientVlanAssignedReason.setStatus('current')
hmAgentDot1xClientSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientSessionTimeout.setStatus('current')
hmAgentDot1xClientTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 36, 3, 1, 1, 12), HmAgentDot1xSessionTerminationAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentDot1xClientTerminationAction.setStatus('current')
hmPlatform4SwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 1, 50))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 10)).setObjects(("HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 11)).setObjects(("HIRSCHMANN-MMP4-BASICL2-MIB", "hmAgentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 1, 50, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
dot1xTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 36, 4))
dot1xPortStatusAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 36, 4, 1)).setObjects(("IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xPortStatusAuthorized.setStatus('current')
dot1xPortStatusUnauthorized = NotificationType((1, 3, 6, 1, 4, 1, 248, 15, 36, 4, 2)).setObjects(("IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xPortStatusUnauthorized.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", hmAgentStpMstPortLoopInconsistentState=hmAgentStpMstPortLoopInconsistentState, hmAgentStpMstTable=hmAgentStpMstTable, hmAgentLagSummaryStatus=hmAgentLagSummaryStatus, hmAgentDot1xPortControlMode=hmAgentDot1xPortControlMode, hmAgentSwitchMFDBMaxTableEntries=hmAgentSwitchMFDBMaxTableEntries, hmPlatform4SwitchingTraps=hmPlatform4SwitchingTraps, hmAgentLagSummaryFlushTimer=hmAgentLagSummaryFlushTimer, hmAgentSwitchStaticMacFilteringVlanId=hmAgentSwitchStaticMacFilteringVlanId, hmAgentClearLoginSessions=hmAgentClearLoginSessions, dot1xTraps=dot1xTraps, hmAgentSSHAdminMode=hmAgentSSHAdminMode, hmAgentSwitchMFDBMostEntriesUsed=hmAgentSwitchMFDBMostEntriesUsed, hmAgentDot1xSafeVlanMode=hmAgentDot1xSafeVlanMode, hmAgentUserAuthenticationType=hmAgentUserAuthenticationType, hmAgentStpSwitchConfigGroup=hmAgentStpSwitchConfigGroup, hmAgentPortMirroringMode=hmAgentPortMirroringMode, hmAgentStpCstBridgeHelloTime=hmAgentStpCstBridgeHelloTime, hmAgentTransferUploadStart=hmAgentTransferUploadStart, hmAgentSwitchVoiceVlanInterfaceNum=hmAgentSwitchVoiceVlanInterfaceNum, hmAgentStpCstBridgeMaxHops=hmAgentStpCstBridgeMaxHops, hmAgentDot3adAggPortEntry=hmAgentDot3adAggPortEntry, hmAgentDot1xPortMABenabledOperational=hmAgentDot1xPortMABenabledOperational, hmAgentStpMstDesignatedPortId=hmAgentStpMstDesignatedPortId, hmAgentTrapLogIndex=hmAgentTrapLogIndex, hmAgentLoginSessionUserName=hmAgentLoginSessionUserName, hmAgentTransferUploadStatus=hmAgentTransferUploadStatus, hmAgentStpCstPortEdge=hmAgentStpCstPortEdge, hmAgentOutboundTelnetTimeout=hmAgentOutboundTelnetTimeout, hmAgentSwitchMFDBMacAddress=hmAgentSwitchMFDBMacAddress, hmAgentPortVoiceVlanMode=hmAgentPortVoiceVlanMode, hmAgentSwitchMFDBType=hmAgentSwitchMFDBType, hmAgentPortVoiceVlanOperationalStatus=hmAgentPortVoiceVlanOperationalStatus, hmAgentLoginSessionIPAddress=hmAgentLoginSessionIPAddress, hmAgentStpCstHelloTime=hmAgentStpCstHelloTime, hmAgentStpCstPortPathCost=hmAgentStpCstPortPathCost, hmAgentProtocolConfigGroup=hmAgentProtocolConfigGroup, hmAgentStpCstDesignatedPortId=hmAgentStpCstDesignatedPortId, hmAgentStpCstConfigGroup=hmAgentStpCstConfigGroup, hmAgentDot1xPortConfigGroup=hmAgentDot1xPortConfigGroup, hmAgentRadiusServerSecret=hmAgentRadiusServerSecret, hmAgentDot1xMaxUsers=hmAgentDot1xMaxUsers, hmAgentTrapLogTotalSinceLastViewed=hmAgentTrapLogTotalSinceLastViewed, hmAgentStpCstExtPortPathCost=hmAgentStpCstExtPortPathCost, hmAgentStpMstPortForwardingState=hmAgentStpMstPortForwardingState, hmAgentSwitchStaticMacFilteringDestPortMask=hmAgentSwitchStaticMacFilteringDestPortMask, hmAgentTransferDownloadServerIP=hmAgentTransferDownloadServerIP, hmAgentStpCstPortTable=hmAgentStpCstPortTable, hmAgentResetSystem=hmAgentResetSystem, hmAgentSwitchMFDBSummaryForwardingPortMask=hmAgentSwitchMFDBSummaryForwardingPortMask, hmAgentLagSummaryType=hmAgentLagSummaryType, hmAgentStpCstPortBpduFlood=hmAgentStpCstPortBpduFlood, hmAgentClassOfServicePortTable=hmAgentClassOfServicePortTable, hmAgentProtocolGroupPortEntry=hmAgentProtocolGroupPortEntry, hmPlatform4BasicL2=hmPlatform4BasicL2, hmAgentStpMstBridgePriority=hmAgentStpMstBridgePriority, hmAgentDot1xClientConfigEntry=hmAgentDot1xClientConfigEntry, failedUserLoginTrap=failedUserLoginTrap, hmAgentMgmtSecurity=hmAgentMgmtSecurity, hmAgentDot1xPortVlanAssigned=hmAgentDot1xPortVlanAssigned, hmAgentPortMirrorDestinationPort=hmAgentPortMirrorDestinationPort, hmAgentStpMstRowStatus=hmAgentStpMstRowStatus, hmAgentLogging=hmAgentLogging, hmAgentSpanningTreeMode=hmAgentSpanningTreeMode, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, hmAgentStpPortStatsMstpBpduTx=hmAgentStpPortStatsMstpBpduTx, hmAgentStpPortUpTime=hmAgentStpPortUpTime, vlanRestoreFailureTrap=vlanRestoreFailureTrap, hmAgentProtocolGroupEntry=hmAgentProtocolGroupEntry, hmAgentRadiusAccountingConfigEntry=hmAgentRadiusAccountingConfigEntry, hmAgentPortMirrorSourcePortMask=hmAgentPortMirrorSourcePortMask, hmAgentStpCstBridgeDesignatedRoot=hmAgentStpCstBridgeDesignatedRoot, hmAgentSwitchIGMPSnoopingPortMask=hmAgentSwitchIGMPSnoopingPortMask, hmAgentLagDetailedLagIndex=hmAgentLagDetailedLagIndex, hmAgentLogHostTableRowStatus=hmAgentLogHostTableRowStatus, hmAgentPortAutoNegAdminStatus=hmAgentPortAutoNegAdminStatus, hmAgentSwitchDot3FlowControlMode=hmAgentSwitchDot3FlowControlMode, hmAgentRadiusAccountingServerIndex=hmAgentRadiusAccountingServerIndex, hmAgentSwitchStaticMacFilteringStatus=hmAgentSwitchStaticMacFilteringStatus, hmAgentSwitchMFDBSummaryTable=hmAgentSwitchMFDBSummaryTable, hmAgentSwitchMFDBCurrentEntries=hmAgentSwitchMFDBCurrentEntries, hmAgentStpCstPortId=hmAgentStpCstPortId, hmAgentStpPortTable=hmAgentStpPortTable, hmAgentStpMstBridgeIdentifier=hmAgentStpMstBridgeIdentifier, hmAgentTransferUploadFilename=hmAgentTransferUploadFilename, hmAgentStpCstPortPriority=hmAgentStpCstPortPriority, vlanDeleteLastTrap=vlanDeleteLastTrap, hmAgentTransferDownloadGroup=hmAgentTransferDownloadGroup, multipleUsersTrap=multipleUsersTrap, hmAgentStpMstPortId=hmAgentStpMstPortId, hmAgentSwitchMFDBTable=hmAgentSwitchMFDBTable, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, hmAgentProtocolGroupPortIfIndex=hmAgentProtocolGroupPortIfIndex, hmAgentStpAdminMode=hmAgentStpAdminMode, hmAgentPortSTPState=hmAgentPortSTPState, hmAgentTransferDownloadStart=hmAgentTransferDownloadStart, hmAgentLoginSessionIdleTime=hmAgentLoginSessionIdleTime, hmAgentDot1xClientBackendState=hmAgentDot1xClientBackendState, hmAgentStpMstVlanEntry=hmAgentStpMstVlanEntry, hmAgentStpMstTopologyChangeParm=hmAgentStpMstTopologyChangeParm, hmAgentStpCstPortLoopGuard=hmAgentStpCstPortLoopGuard, hmAgentSwitchVoiceVlanDeviceEntry=hmAgentSwitchVoiceVlanDeviceEntry, hmAgentStpCstMaxAge=hmAgentStpCstMaxAge, hmAgentRadiusServerCurrentMode=hmAgentRadiusServerCurrentMode, hmAgentSwitchAddressAgingTimeoutEntry=hmAgentSwitchAddressAgingTimeoutEntry, hmAgentSwitchMFDBSummaryMacAddress=hmAgentSwitchMFDBSummaryMacAddress, hmAgentUserPassword=hmAgentUserPassword, hmAgentSwitchMFDBProtocolType=hmAgentSwitchMFDBProtocolType, hmAgentUserConfigCreate=hmAgentUserConfigCreate, hmAgentRadiusAccountingStatus=hmAgentRadiusAccountingStatus, dot1xPortStatusAuthorized=dot1xPortStatusAuthorized, hmAgentProtocolGroupProtocolIP=hmAgentProtocolGroupProtocolIP, hmAgentStpCstBridgeFwdDelay=hmAgentStpCstBridgeFwdDelay, hmAgentDot1xClientConfigTable=hmAgentDot1xClientConfigTable, hmAgentPortVoiceVlanAuthMode=hmAgentPortVoiceVlanAuthMode, hmAgentPortDot3FlowControlMode=hmAgentPortDot3FlowControlMode, stpInstanceNewRootTrap=stpInstanceNewRootTrap, hmAgentLogSyslogHostEntry=hmAgentLogSyslogHostEntry, hmAgentClassOfServicePortClass=hmAgentClassOfServicePortClass, hmAgentStpForceVersion=hmAgentStpForceVersion, hmAgentClearPasswords=hmAgentClearPasswords, hmAgentProtocolGroupPortStatus=hmAgentProtocolGroupPortStatus, hmAgentRadiusAccountingSecret=hmAgentRadiusAccountingSecret, hmAgentStpMstReceivedRPC=hmAgentStpMstReceivedRPC, hmAgentPortVoiceVlanDataPriorityMode=hmAgentPortVoiceVlanDataPriorityMode, hmAgentSSHMaxSessionsCount=hmAgentSSHMaxSessionsCount, hmAgentSwitchVoiceVlanDeviceMacAddress=hmAgentSwitchVoiceVlanDeviceMacAddress, hmAgentProtocolGroupCreate=hmAgentProtocolGroupCreate, hmAgentPortAdminMode=hmAgentPortAdminMode, hmAgentRadiusAccountingServerAddress=hmAgentRadiusAccountingServerAddress, hmAgentStpBpduFilterDefault=hmAgentStpBpduFilterDefault, hmAgentTransferDownloadMode=hmAgentTransferDownloadMode, hmAgentDot1xDynamicVlanCreationMode=hmAgentDot1xDynamicVlanCreationMode, hmAgentLogSyslogAdminStatus=hmAgentLogSyslogAdminStatus, hmAgentConfigGroup=hmAgentConfigGroup, hmAgentProbePortIfIndex=hmAgentProbePortIfIndex, hmAgentStpMstReceivedBridgeId=hmAgentStpMstReceivedBridgeId, hmAgentStpMstPortTransitionsIntoLoopInconsistentState=hmAgentStpMstPortTransitionsIntoLoopInconsistentState, hmAgentStpCstPortTCNGuard=hmAgentStpCstPortTCNGuard, hmAgentCableTesterGroup=hmAgentCableTesterGroup, hmAgentStpCstPortBpduFilter=hmAgentStpCstPortBpduFilter, hmAgentStpMstPortRole=hmAgentStpMstPortRole, hmAgentPortDVlanTagMode=hmAgentPortDVlanTagMode, hmAgentStpMstPortDisputed=hmAgentStpMstPortDisputed, hmAgentTrapLogTable=hmAgentTrapLogTable, hmAgentDot1xLogicalPort=hmAgentDot1xLogicalPort, hmAgentStpMstDesignatedRootId=hmAgentStpMstDesignatedRootId, hmAgentStpMstPortPathCost=hmAgentStpMstPortPathCost, hmAgentStpCstDesignatedCost=hmAgentStpCstDesignatedCost, hmAgentTrapLogTotal=hmAgentTrapLogTotal, hmAgentPortVoiceVlanDSCP=hmAgentPortVoiceVlanDSCP, hmAgentSwitchStaticMacFilteringAddress=hmAgentSwitchStaticMacFilteringAddress, hmAgentSwitchMFDBVlanId=hmAgentSwitchMFDBVlanId, hmAgentUserConfigEntry=hmAgentUserConfigEntry, hmAgentClearConfig=hmAgentClearConfig, hmAgentCableTesterStatus=hmAgentCableTesterStatus, hmAgentSSHConfigGroup=hmAgentSSHConfigGroup, hmAgentSwitchIGMPSnoopingAdminMode=hmAgentSwitchIGMPSnoopingAdminMode, hmAgentStpMstReceivedPortId=hmAgentStpMstReceivedPortId, hmAgentLagSummaryStpMode=hmAgentLagSummaryStpMode, HmAgentDot1xSessionTerminationAction=HmAgentDot1xSessionTerminationAction, hmAgentSwitchVoiceVLANAdminMode=hmAgentSwitchVoiceVLANAdminMode, hmAgentStpCstPortForwardingState=hmAgentStpCstPortForwardingState, hmAgentLogConfigGroup=hmAgentLogConfigGroup, hmAgentStpCstRootFwdDelay=hmAgentStpCstRootFwdDelay, hmAgentPortMirrorAdminMode=hmAgentPortMirrorAdminMode, hmAgentTransferUploadDataType=hmAgentTransferUploadDataType, hmAgentPortMirrorEgressMask=hmAgentPortMirrorEgressMask, hmAgentPortVoiceVlanID=hmAgentPortVoiceVlanID, hmAgentClassOfServicePortPriority=hmAgentClassOfServicePortPriority, hmAgentSwitchVoiceVlanDeviceTable=hmAgentSwitchVoiceVlanDeviceTable, hmAgentLoginSessionStatus=hmAgentLoginSessionStatus, fanFailureTrap=fanFailureTrap, hmAgentUserDefaultPwdActive=hmAgentUserDefaultPwdActive, hmAgentSwitchMFDBSummaryEntry=hmAgentSwitchMFDBSummaryEntry, hmAgentDot1xClientSessionTimeout=hmAgentDot1xClientSessionTimeout, hmAgentLagSummaryLagIndex=hmAgentLagSummaryLagIndex, hmAgentTelnetAllowNewMode=hmAgentTelnetAllowNewMode, hmAgentLoginSessionSessionTime=hmAgentLoginSessionSessionTime, hmAgentPortType=hmAgentPortType, hmAgentStpCstPortAutoEdge=hmAgentStpCstPortAutoEdge, hmAgentLagSummaryAdminMode=hmAgentLagSummaryAdminMode, hmAgentStpMstPortEntry=hmAgentStpMstPortEntry, hmAgentSSHSessionTimeout=hmAgentSSHSessionTimeout, hmAgentUserConfigGroup=hmAgentUserConfigGroup, hmAgentStpMstDesignatedCost=hmAgentStpMstDesignatedCost, hmAgentClearTrapLog=hmAgentClearTrapLog, hmAgentStpMstTimeSinceTopologyChange=hmAgentStpMstTimeSinceTopologyChange, hmAgentTransferDownloadDataType=hmAgentTransferDownloadDataType, hmAgentOutboundTelnetGroup=hmAgentOutboundTelnetGroup, hmAgentInfoGroup=hmAgentInfoGroup, hmAgentSwitchDVlanTagGroup=hmAgentSwitchDVlanTagGroup, hmAgentTransferUploadPath=hmAgentTransferUploadPath, hmAgentDot3adAggPort=hmAgentDot3adAggPort, hmAgentStpConfigName=hmAgentStpConfigName, hmAgentClearSwitchStats=hmAgentClearSwitchStats, hmAgentRadiusConfigGroup=hmAgentRadiusConfigGroup, dot1xPortStatusUnauthorized=dot1xPortStatusUnauthorized, hmAgentStpCstDesignatedBridgeId=hmAgentStpCstDesignatedBridgeId, hmAgentUserName=hmAgentUserName, hmAgentRadiusServerPort=hmAgentRadiusServerPort, hmAgentProtocolGroupId=hmAgentProtocolGroupId, hmAgentStpPortState=hmAgentStpPortState, hmAgentDot1xUnauthenticatedVlan=hmAgentDot1xUnauthenticatedVlan, hmAgentStpCstPortTopologyChangeAck=hmAgentStpCstPortTopologyChangeAck, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, hmAgentDot1xClientVlanAssigned=hmAgentDot1xClientVlanAssigned, hmAgentSwitchMFDBEntry=hmAgentSwitchMFDBEntry, hmAgentTelnetConfigGroup=hmAgentTelnetConfigGroup, hmAgentLagDetailedPortStatus=hmAgentLagDetailedPortStatus, hmAgentDot1xClientSessionTime=hmAgentDot1xClientSessionTime, hmAgentPortMirroringGroup=hmAgentPortMirroringGroup, hmAgentCableTesterMaximumCableLength=hmAgentCableTesterMaximumCableLength, hmAgentClassOfServiceGroup=hmAgentClassOfServiceGroup, hmAgentStpCstBridgeRootCost=hmAgentStpCstBridgeRootCost, hmAgentOutboundTelnetAdminMode=hmAgentOutboundTelnetAdminMode, hmAgentLoginSessionConnectionType=hmAgentLoginSessionConnectionType, hmAgentLoginSessionTable=hmAgentLoginSessionTable, hmAgentUserStatus=hmAgentUserStatus, hmAgentSaveConfigStatus=hmAgentSaveConfigStatus, hmAgentStpMstRootPathCost=hmAgentStpMstRootPathCost, hmAgentSwitchMFDBFilteringPortMask=hmAgentSwitchMFDBFilteringPortMask, hmAgentPortSTPMode=hmAgentPortSTPMode, hmAgentClearVlan=hmAgentClearVlan, hmAgentPortDVlanTagEthertype=hmAgentPortDVlanTagEthertype, vlanRequestFailureTrap=vlanRequestFailureTrap, hmAgentPortDot1dBasePort=hmAgentPortDot1dBasePort, hmAgentStpPortStatsRstpBpduRx=hmAgentStpPortStatsRstpBpduRx, hmAgentDot1xEnhancementConfigGroup=hmAgentDot1xEnhancementConfigGroup, hmAgentSwitchIGMPSnoopingMulticastControlFramesProcessed=hmAgentSwitchIGMPSnoopingMulticastControlFramesProcessed, hmAgentStpPortStatsStpBpduRx=hmAgentStpPortStatsStpBpduRx, hmAgentProtocolGroupStatus=hmAgentProtocolGroupStatus, hmAgentUserIndex=hmAgentUserIndex, hmAgentTrapLogEntry=hmAgentTrapLogEntry, hmAgentRadiusAccountingPort=hmAgentRadiusAccountingPort, HmAgentPortMask=HmAgentPortMask, hmAgentLogHostTableSeverityFilter=hmAgentLogHostTableSeverityFilter, hmAgentUserAccessMode=hmAgentUserAccessMode, hmAgentDot1xInterface=hmAgentDot1xInterface, hmAgentDot1xPortConfigEntry=hmAgentDot1xPortConfigEntry, hmAgentStpCstPortDisputed=hmAgentStpCstPortDisputed, hmAgentSwitchStaticMacFilteringTable=hmAgentSwitchStaticMacFilteringTable, hmAgentStpConfigRevision=hmAgentStpConfigRevision, hmAgentLoginSessionEntry=hmAgentLoginSessionEntry, hmAgentSwitchMFDBGroup=hmAgentSwitchMFDBGroup, hmAgentSwitchIGMPSnoopingGroupMembershipInterval=hmAgentSwitchIGMPSnoopingGroupMembershipInterval, hmAgentTransferUploadGroup=hmAgentTransferUploadGroup, hmAgentClearPortStats=hmAgentClearPortStats, hmAgentStpMstPortPriority=hmAgentStpMstPortPriority, hmAgentPortMirrorSessionNum=hmAgentPortMirrorSessionNum, hmAgentDot3adAggPortLACPMode=hmAgentDot3adAggPortLACPMode, hmAgentDot1xGuestVlanPeriod=hmAgentDot1xGuestVlanPeriod, hmAgentStpConfigFormatSelector=hmAgentStpConfigFormatSelector, hmAgentRadiusServerConfigTable=hmAgentRadiusServerConfigTable, hmAgentDot1xClientConfigGroup=hmAgentDot1xClientConfigGroup)
mibBuilder.exportSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", hmAgentCLIConfigGroup=hmAgentCLIConfigGroup, hmAgentStpCstBridgeTopChanges=hmAgentStpCstBridgeTopChanges, hmAgentTransferUploadServerIP=hmAgentTransferUploadServerIP, hmAgentStpPortStatsStpBpduTx=hmAgentStpPortStatsStpBpduTx, hmAgentDot1xClientUserName=hmAgentDot1xClientUserName, broadcastStormStartTrap=broadcastStormStartTrap, hmAgentSwitchConfigGroup=hmAgentSwitchConfigGroup, hmAgentRadiusServerIndexNextValid=hmAgentRadiusServerIndexNextValid, hmAgentRadiusTimeout=hmAgentRadiusTimeout, linkFailureTrap=linkFailureTrap, hmAgentStpCstPortBpduGuardEffect=hmAgentStpCstPortBpduGuardEffect, hmAgentRadiusAccountingIndexNextValid=hmAgentRadiusAccountingIndexNextValid, hmAgentLoginSessionIndex=hmAgentLoginSessionIndex, hmAgentProtocolGroupPortTable=hmAgentProtocolGroupPortTable, hmAgentPortMirrorTable=hmAgentPortMirrorTable, hmAgentStpBpduGuardMode=hmAgentStpBpduGuardMode, hmAgentTrapLogSystemTime=hmAgentTrapLogSystemTime, hmAgentDot1xClientAuthPAEstate=hmAgentDot1xClientAuthPAEstate, hmAgentLagDetailedConfigTable=hmAgentLagDetailedConfigTable, hmAgentRadiusServerAddress=hmAgentRadiusServerAddress, hmAgentMirroredPortIfIndex=hmAgentMirroredPortIfIndex, hmAgentStpMstRootPortId=hmAgentStpMstRootPortId, hmAgentSpanningTreeConfigGroup=hmAgentSpanningTreeConfigGroup, hmAgentRadiusServerMsgAuth=hmAgentRadiusServerMsgAuth, hmAgentDot1xClientFilterID=hmAgentDot1xClientFilterID, hmAgentPortVoiceVlanPriority=hmAgentPortVoiceVlanPriority, hmAgentLagSummaryConfigTable=hmAgentLagSummaryConfigTable, hmAgentStpMstId=hmAgentStpMstId, hmAgentLagConfigGroup=hmAgentLagConfigGroup, hmAgentRadiusMaxTransmit=hmAgentRadiusMaxTransmit, hmAgentLagDetailedPortSpeed=hmAgentLagDetailedPortSpeed, hmAgentPortDVlanTagCustomerId=hmAgentPortDVlanTagCustomerId, hmAgentLagSummaryName=hmAgentLagSummaryName, hmAgentSSHProtocolLevel=hmAgentSSHProtocolLevel, hmAgentLogHostTableIndex=hmAgentLogHostTableIndex, hmAgentDot1xAdvanced=hmAgentDot1xAdvanced, hmAgentDot1xGuestVlanId=hmAgentDot1xGuestVlanId, hmAgentLogSysLogConfigGroup=hmAgentLogSysLogConfigGroup, hmAgentTransferUploadMode=hmAgentTransferUploadMode, hmAgentStpMstTopologyChangeCount=hmAgentStpMstTopologyChangeCount, hmAgentStpCstPortOperEdge=hmAgentStpCstPortOperEdge, hmAgentUserEncryptionPassword=hmAgentUserEncryptionPassword, hmAgentSwitchAddressAgingTimeout=hmAgentSwitchAddressAgingTimeout, hmAgentStpCstPortEntry=hmAgentStpCstPortEntry, hmAgentPortIanaType=hmAgentPortIanaType, hmAgentRadiusServerConfigEntry=hmAgentRadiusServerConfigEntry, hmAgentLagSummaryLinkTrap=hmAgentLagSummaryLinkTrap, hmPlatform4OutboundTelnetPrivate=hmPlatform4OutboundTelnetPrivate, hmAgentCableTesterMinimumCableLength=hmAgentCableTesterMinimumCableLength, hmAgentStpConfigDigestKey=hmAgentStpConfigDigestKey, hmAgentStpPortStatsRstpBpduTx=hmAgentStpPortStatsRstpBpduTx, hmAgentStpCstBridgeTimeSinceTopologyChange=hmAgentStpCstBridgeTimeSinceTopologyChange, hmAgentStpMstPortTable=hmAgentStpMstPortTable, hmAgentTransferDownloadFilename=hmAgentTransferDownloadFilename, hmAgentPortPhysicalMode=hmAgentPortPhysicalMode, hmAgentRadiusServerStatus=hmAgentRadiusServerStatus, hmAgentSwitchMFDBSummaryVlanId=hmAgentSwitchMFDBSummaryVlanId, hmAgentSwitchVoiceVLANGroup=hmAgentSwitchVoiceVLANGroup, hmAgentSwitchIGMPSnoopingGroup=hmAgentSwitchIGMPSnoopingGroup, hmAgentStpPortEntry=hmAgentStpPortEntry, hmPlatform4=hmPlatform4, HmAgentDot1xPortControlMode=HmAgentDot1xPortControlMode, hmAgentStpMstPortTransitionsOutOfLoopInconsistentState=hmAgentStpMstPortTransitionsOutOfLoopInconsistentState, broadcastStormEndTrap=broadcastStormEndTrap, hmAgentSwitchAddressAgingTimeoutTable=hmAgentSwitchAddressAgingTimeoutTable, hmAgentProtocolGroupVlanId=hmAgentProtocolGroupVlanId, hmAgentLagSummaryDeletePort=hmAgentLagSummaryDeletePort, hmAgentPortPhysicalStatus=hmAgentPortPhysicalStatus, hmAgentTrapLogTrap=hmAgentTrapLogTrap, hmAgentTransferDownloadStatus=hmAgentTransferDownloadStatus, hmAgentPortConfigEntry=hmAgentPortConfigEntry, hmAgentPortConfigTable=hmAgentPortConfigTable, hmAgentStpCstBridgeMaxAge=hmAgentStpCstBridgeMaxAge, hmAgentPortDefaultType=hmAgentPortDefaultType, hmAgentDot1xClientVlanAssignedReason=hmAgentDot1xClientVlanAssignedReason, hmAgentLagConfigCreate=hmAgentLagConfigCreate, hmAgentCableTesterCableFailureLocation=hmAgentCableTesterCableFailureLocation, hmAgentLagSummaryAddPort=hmAgentLagSummaryAddPort, hmAgentSwitchMFDBForwardingPortMask=hmAgentSwitchMFDBForwardingPortMask, hmAgentStpCstPortRootGuard=hmAgentStpCstPortRootGuard, hmAgentStpCstRegionalRootPathCost=hmAgentStpCstRegionalRootPathCost, hmAgentStpCstRegionalRootId=hmAgentStpCstRegionalRootId, hmAgentStpPortStatsMstpBpduRx=hmAgentStpPortStatsMstpBpduRx, hmAgentStpCstBridgePriority=hmAgentStpCstBridgePriority, hmAgentProtocolGroupProtocolARP=hmAgentProtocolGroupProtocolARP, hmAgentStpCstBridgeHoldTime=hmAgentStpCstBridgeHoldTime, hmAgentCableTesterIfIndex=hmAgentCableTesterIfIndex, hmAgentRadiusServerPrimaryMode=hmAgentRadiusServerPrimaryMode, hmAgentStpMstVlanRowStatus=hmAgentStpMstVlanRowStatus, hmAgentDot1xClientMacAddress=hmAgentDot1xClientMacAddress, hmAgentLagDetailedConfigEntry=hmAgentLagDetailedConfigEntry, hmAgentRadiusAccountingMode=hmAgentRadiusAccountingMode, hmAgentLogHostTablePort=hmAgentLogHostTablePort, hmAgentSwitchMFDBDescription=hmAgentSwitchMFDBDescription, hmAgentSwitchIGMPSnoopingMaxResponseTime=hmAgentSwitchIGMPSnoopingMaxResponseTime, hmAgentTelnetMaxSessions=hmAgentTelnetMaxSessions, hmAgentTrapLogGroup=hmAgentTrapLogGroup, hmAgentSwitchIGMPSnoopingMRPExpirationTime=hmAgentSwitchIGMPSnoopingMRPExpirationTime, hmAgentLogSyslogHostTable=hmAgentLogSyslogHostTable, hmAgentStpMstVlanTable=hmAgentStpMstVlanTable, hmAgentRadiusStatsClear=hmAgentRadiusStatsClear, hmAgentDot1xPortMABenabled=hmAgentDot1xPortMABenabled, hmAgentCableTesterCableStatus=hmAgentCableTesterCableStatus, hmAgentTransferDownloadPath=hmAgentTransferDownloadPath, hmAgentSSHSessionsCount=hmAgentSSHSessionsCount, hmAgentStpCstBridgeRootPort=hmAgentStpCstBridgeRootPort, hmAgentUserEncryptionType=hmAgentUserEncryptionType, hmAgentStpCstPortRole=hmAgentStpCstPortRole, hmAgentSystemGroup=hmAgentSystemGroup, hmAgentPortMaxFrameSize=hmAgentPortMaxFrameSize, hmAgentDot1xPortTerminationAction=hmAgentDot1xPortTerminationAction, hmAgentRadiusServerIndex=hmAgentRadiusServerIndex, hmAgentStpMstEntry=hmAgentStpMstEntry, hmAgentSwitchBroadcastControlMode=hmAgentSwitchBroadcastControlMode, hmAgentSwitchStaticMacFilteringEntry=hmAgentSwitchStaticMacFilteringEntry, hmAgentSwitchDVlanTagEthertype=hmAgentSwitchDVlanTagEthertype, hmAgentProtocolGroupTable=hmAgentProtocolGroupTable, hmAgentPortMaxFrameSizeLimit=hmAgentPortMaxFrameSizeLimit, hmAgentClassOfServicePortEntry=hmAgentClassOfServicePortEntry, hmAgentPortMirrorIngressMask=hmAgentPortMirrorIngressMask, hmRadius=hmRadius, hmAgentPortMirrorEntry=hmAgentPortMirrorEntry, hmAgentPortIfIndex=hmAgentPortIfIndex, hmAgentRadiusAccountingConfigTable=hmAgentRadiusAccountingConfigTable, hmAgentStpCstBridgeHoldCount=hmAgentStpCstBridgeHoldCount, hmAgentDot1xPortVlanAssignedReason=hmAgentDot1xPortVlanAssignedReason, hmAgentLagConfigStaticCapability=hmAgentLagConfigStaticCapability, hmAgentLogHostTableIpAddress=hmAgentLogHostTableIpAddress, hmAgentStpPortHelloTime=hmAgentStpPortHelloTime, hmAgentClearLags=hmAgentClearLags, hmAgentDot1xClientTerminationAction=hmAgentDot1xClientTerminationAction, hmAgentUserConfigTable=hmAgentUserConfigTable, hmAgentTransferConfigGroup=hmAgentTransferConfigGroup, hmAgentProtocolGroupName=hmAgentProtocolGroupName, hmAgentSaveConfig=hmAgentSaveConfig, hmAgentDot1xPortSessionTimeout=hmAgentDot1xPortSessionTimeout, hmAgentTelnetLoginTimeout=hmAgentTelnetLoginTimeout, hmAgentStpPortMigrationCheck=hmAgentStpPortMigrationCheck, hmAgentLagSummaryConfigEntry=hmAgentLagSummaryConfigEntry, hmAgentPortLinkTrapMode=hmAgentPortLinkTrapMode, BridgeId=BridgeId, hmAgentLagDetailedIfIndex=hmAgentLagDetailedIfIndex, PYSNMP_MODULE_ID=hmPlatform4BasicL2, hmAgentStpMstDesignatedBridgeId=hmAgentStpMstDesignatedBridgeId, hmAgentStpCstPortOperPointToPoint=hmAgentStpCstPortOperPointToPoint, hmAgentDot1xRadiusVlanAssignment=hmAgentDot1xRadiusVlanAssignment, hmAgentOutboundTelnetMaxNoOfSessions=hmAgentOutboundTelnetMaxNoOfSessions, hmAgentDot1xPortConfigTable=hmAgentDot1xPortConfigTable, hmAgentProtocolGroupProtocolIPX=hmAgentProtocolGroupProtocolIPX, hmAgentDot3adAggPortTable=hmAgentDot3adAggPortTable, hmAgentSwitchStaticMacFilteringSourcePortMask=hmAgentSwitchStaticMacFilteringSourcePortMask, hmAgentPortClearStats=hmAgentPortClearStats)
