#
# PySNMP MIB module ARRIS-C3-CMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-CMM-MIB
# Produced by pysmi-1.1.8 at Thu Jan  5 11:24:12 2023
# On host fv-az280-773 platform Linux version 5.15.0-1024-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
TenthdBmV, docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusEntry, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusDocsisRegMode = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV", "docsIfCmtsCmStatusIpAddress", "docsIfCmtsCmStatusEntry", "docsIfCmtsCmStatusMacAddress", "docsIfCmtsCmStatusDocsisRegMode")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, iso, IpAddress, Integer32, Counter64, MibIdentifier, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, enterprises, ObjectIdentity, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "IpAddress", "Integer32", "Counter64", "MibIdentifier", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "enterprises", "ObjectIdentity", "TimeTicks", "Gauge32")
DisplayString, TextualConvention, MacAddress, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue", "DateAndTime")
cmtsC3CMMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5))
cmtsC3CMMMIB.setRevisions(('2005-02-02 00:00',))
if mibBuilder.loadTexts: cmtsC3CMMMIB.setLastUpdated('200502020000Z')
if mibBuilder.loadTexts: cmtsC3CMMMIB.setOrganization('Arris International')
dcxCMMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1))
dcxCMMCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1), )
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusTable.setStatus('current')
dcxCMMCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("ARRIS-C3-CMM-MIB", "dcxCMMCmtsCmStatusEntry"))
dcxCMMCmtsCmStatusEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusEntry.setStatus('current')
dcxCMMCmDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMCmDebugLevel.setStatus('current')
dcxCMMUpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMUpDisable.setStatus('current')
dcxCMMResetCm = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("delete", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCm.setStatus('current')
dcxCMMResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCounters.setStatus('current')
dcxCMMCmBpiState = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("cmBPI2NotManagedByBPI2", 0), ("cmBPI2InBPI2Progress", 1), ("cmBPI2NotAuthorized", 2), ("cmBPI2KeyIssued", 3), ("cmBPI2IsRunning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmBpiState.setStatus('current')
dcxCMMCmPrimaryUsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryUsSf.setStatus('current')
dcxCMMCmPrimaryDsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryDsSf.setStatus('current')
dcxCMMIpToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2), )
if mibBuilder.loadTexts: dcxCMMIpToCmTable.setStatus('current')
dcxCMMIpToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMCmIp"))
if mibBuilder.loadTexts: dcxCMMIpToCmEntry.setStatus('current')
dcxCMMCmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: dcxCMMCmIp.setStatus('current')
dcxCMMCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPtr.setStatus('current')
dcxCMMFlapTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3), )
if mibBuilder.loadTexts: dcxCMMFlapTable.setStatus('current')
dcxCMMCmFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMFlapMacAddr"))
if mibBuilder.loadTexts: dcxCMMCmFlapEntry.setStatus('current')
dcxCMMFlapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMacAddr.setStatus('current')
dcxCMMFlapUpstreamID = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapUpstreamID.setStatus('current')
dcxCMMFlapInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapInsertions.setStatus('current')
dcxCMMFlapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapHits.setStatus('current')
dcxCMMFlapMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMisses.setStatus('current')
dcxCMMFlapCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCRC.setStatus('current')
dcxCMMFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCount.setStatus('current')
dcxCMMFlapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapTimeStamp.setStatus('current')
dcxCMMTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4))
dcxCMMTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcxCMMTrapReason.setStatus('current')
dcxCMMTrap = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 2)).setObjects(("ARRIS-C3-CMM-MIB", "dcxCMMTrapReason"))
if mibBuilder.loadTexts: dcxCMMTrap.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-CMM-MIB", dcxCMMUpDisable=dcxCMMUpDisable, dcxCMMFlapTimeStamp=dcxCMMFlapTimeStamp, PYSNMP_MODULE_ID=cmtsC3CMMMIB, dcxCMMFlapInsertions=dcxCMMFlapInsertions, dcxCMMResetCm=dcxCMMResetCm, dcxCMMTrapGroup=dcxCMMTrapGroup, dcxCMMCmPrimaryUsSf=dcxCMMCmPrimaryUsSf, dcxCMMFlapCRC=dcxCMMFlapCRC, dcxCMMCmtsCmStatusTable=dcxCMMCmtsCmStatusTable, dcxCMMTrapReason=dcxCMMTrapReason, dcxCMMFlapTable=dcxCMMFlapTable, dcxCMMResetCounters=dcxCMMResetCounters, dcxCMMCmPrimaryDsSf=dcxCMMCmPrimaryDsSf, dcxCMMCmtsCmStatusEntry=dcxCMMCmtsCmStatusEntry, cmtsC3CMMMIB=cmtsC3CMMMIB, dcxCMMFlapHits=dcxCMMFlapHits, dcxCMMCmDebugLevel=dcxCMMCmDebugLevel, dcxCMMCmFlapEntry=dcxCMMCmFlapEntry, dcxCMMFlapCount=dcxCMMFlapCount, dcxCMMFlapMisses=dcxCMMFlapMisses, dcxCMMIpToCmEntry=dcxCMMIpToCmEntry, dcxCMMObjects=dcxCMMObjects, dcxCMMFlapUpstreamID=dcxCMMFlapUpstreamID, dcxCMMCmIp=dcxCMMCmIp, dcxCMMCmBpiState=dcxCMMCmBpiState, dcxCMMTrap=dcxCMMTrap, dcxCMMCmPtr=dcxCMMCmPtr, dcxCMMIpToCmTable=dcxCMMIpToCmTable, dcxCMMFlapMacAddr=dcxCMMFlapMacAddr)
