#
# PySNMP MIB module CT-PRIORITY-CLASSIFY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CT-PRIORITY-CLASSIFY-MIB
# Produced by pysmi-1.1.10 at Mon Feb 12 02:22:07 2024
# On host fv-az1251-48 platform Linux version 6.2.0-1019-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ctPriorityExt, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctPriorityExt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Gauge32, IpAddress, NotificationType, MibIdentifier, Counter64, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Gauge32", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctPriorityExtClassifyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5))
pClassifyRTP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1))
pClassifyUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2))
pClassifyRTPLowDelayQueuePreference = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPLowDelayQueuePreference.setStatus('mandatory')
pClassifyRTCPParsing = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTCPParsing.setStatus('mandatory')
pClassifyRTPTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3), )
if mibBuilder.loadTexts: pClassifyRTPTable.setStatus('mandatory')
pClassifyRTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1), ).setIndexNames((0, "CT-PRIORITY-CLASSIFY-MIB", "pClassifyRTPInterfaceNumber"))
if mibBuilder.loadTexts: pClassifyRTPEntry.setStatus('mandatory')
pClassifyRTPInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pClassifyRTPInterfaceNumber.setStatus('mandatory')
pClassifyRTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noModification", 1), ("onlyQTag", 2), ("onlyQTOS", 3), ("qTagAndQTOS", 4))).clone('noModification')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPState.setStatus('mandatory')
pClassifyRTPTOSPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTOSPrecedence.setStatus('mandatory')
pClassifyRTPTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTagPriority.setStatus('mandatory')
pClassifyRTPTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTagVID.setStatus('mandatory')
pClassifyUDPTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1), )
if mibBuilder.loadTexts: pClassifyUDPTable.setStatus('mandatory')
pClassifyUDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1), ).setIndexNames((0, "CT-PRIORITY-CLASSIFY-MIB", "pClassifyUDPPortNumber"))
if mibBuilder.loadTexts: pClassifyUDPEntry.setStatus('mandatory')
pClassifyUDPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPPortNumber.setStatus('mandatory')
pClassifyUDPState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("remove", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPState.setStatus('mandatory')
pClassifyUDPLowDelayQueuePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPLowDelayQueuePreference.setStatus('mandatory')
mibBuilder.exportSymbols("CT-PRIORITY-CLASSIFY-MIB", pClassifyUDPState=pClassifyUDPState, pClassifyRTPTagPriority=pClassifyRTPTagPriority, pClassifyUDP=pClassifyUDP, pClassifyRTPState=pClassifyRTPState, pClassifyUDPTable=pClassifyUDPTable, pClassifyRTPTOSPrecedence=pClassifyRTPTOSPrecedence, ctPriorityExtClassifyConfig=ctPriorityExtClassifyConfig, pClassifyUDPEntry=pClassifyUDPEntry, pClassifyRTPEntry=pClassifyRTPEntry, pClassifyRTP=pClassifyRTP, pClassifyUDPLowDelayQueuePreference=pClassifyUDPLowDelayQueuePreference, pClassifyRTPInterfaceNumber=pClassifyRTPInterfaceNumber, pClassifyUDPPortNumber=pClassifyUDPPortNumber, pClassifyRTPLowDelayQueuePreference=pClassifyRTPLowDelayQueuePreference, pClassifyRTPTable=pClassifyRTPTable, pClassifyRTCPParsing=pClassifyRTCPParsing, pClassifyRTPTagVID=pClassifyRTPTagVID)
