#
# PySNMP MIB module ARRIS-C3-SUBINT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-SUBINT-MIB
# Produced by pysmi-1.1.8 at Tue Aug  9 16:03:42 2022
# On host fv-az208-754 platform Linux version 5.15.0-1014-azure by user runner
# Using Python version 3.10.6 (main, Aug  2 2022, 15:19:40) [GCC 9.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, MibIdentifier, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, ModuleIdentity, TimeTicks, Counter32, Gauge32, iso, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "Gauge32", "iso", "Unsigned32", "Bits")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
cmtsC3SubIntMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11))
if mibBuilder.loadTexts: cmtsC3SubIntMIB.setLastUpdated('200308200000Z')
if mibBuilder.loadTexts: cmtsC3SubIntMIB.setOrganization('Arris International')
dcxSubIntObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1))
dcxSubIntControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1))
dcxSubIntTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1), )
if mibBuilder.loadTexts: dcxSubIntTable.setStatus('current')
dcxSubIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1), ).setIndexNames((0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSlotIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntPortIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSubIntIndex"))
if mibBuilder.loadTexts: dcxSubIntEntry.setStatus('current')
dcxSubIntSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: dcxSubIntSlotIndex.setStatus('current')
dcxSubIntPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: dcxSubIntPortIndex.setStatus('current')
dcxSubIntSubIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: dcxSubIntSubIntIndex.setStatus('current')
dcxSubIntBridgeGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBridgeGroupNum.setStatus('current')
dcxSubIntManagementAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntManagementAccess.setStatus('current')
dcxSubIntPrimaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntPrimaryIpAddress.setStatus('current')
dcxSubIntPrimaryIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntPrimaryIpMask.setStatus('current')
dcxSubIntPrimaryIpBCastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntPrimaryIpBCastAddress.setStatus('current')
dcxSubIntRelayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntRelayEnabled.setStatus('current')
dcxSubIntRelayInformationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntRelayInformationOption.setStatus('current')
dcxSubIntGiaddrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("primary", 1), ("policy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntGiaddrPolicy.setStatus('current')
dcxSubIntInboundAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntInboundAclIndex.setStatus('current')
dcxSubIntOutgoingAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntOutgoingAclIndex.setStatus('current')
dcxSubIntUnboundTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntUnboundTag.setStatus('current')
dcxSubIntUnboundTagIsNative = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntUnboundTagIsNative.setStatus('current')
dcxSubIntOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxSubIntOperational.setStatus('current')
dcxSubIntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcxSubIntStatus.setStatus('current')
dcxSubIntIpTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2), )
if mibBuilder.loadTexts: dcxSubIntIpTable.setStatus('current')
dcxSubIntIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1), ).setIndexNames((0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSlotIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntPortIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSubIntIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntIpIndex"))
if mibBuilder.loadTexts: dcxSubIntIpEntry.setStatus('current')
dcxSubIntIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dcxSubIntIpIndex.setStatus('current')
dcxSubIntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntIpAddress.setStatus('current')
dcxSubIntIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntIpMask.setStatus('current')
dcxSubIntIpBCastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntIpBCastAddress.setStatus('current')
dcxSubIntIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntIpAddressType.setStatus('current')
dcxSubIntIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcxSubIntIpStatus.setStatus('current')
dcxSubIntCableHelperTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3), )
if mibBuilder.loadTexts: dcxSubIntCableHelperTable.setStatus('current')
dcxSubIntCableHelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3, 1), ).setIndexNames((0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSlotIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntPortIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSubIntIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntCableHelperType"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntCableHelperIndex"))
if mibBuilder.loadTexts: dcxSubIntCableHelperEntry.setStatus('current')
dcxSubIntCableHelperType = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cm", 1), ("cpe", 2))))
if mibBuilder.loadTexts: dcxSubIntCableHelperType.setStatus('current')
dcxSubIntCableHelperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dcxSubIntCableHelperIndex.setStatus('current')
dcxSubIntCableHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntCableHelperIpAddress.setStatus('current')
dcxSubIntCableHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcxSubIntCableHelperStatus.setStatus('current')
dcxSubIntVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4), )
if mibBuilder.loadTexts: dcxSubIntVlanTagTable.setStatus('current')
dcxSubIntVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1), ).setIndexNames((0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSlotIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntPortIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntSubIntIndex"), (0, "ARRIS-C3-SUBINT-MIB", "dcxSubIntVlanTag"))
if mibBuilder.loadTexts: dcxSubIntVlanTagEntry.setStatus('current')
dcxSubIntVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: dcxSubIntVlanTag.setStatus('current')
dcxSubIntVlanNative = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntVlanNative.setStatus('current')
dcxSubIntVlanIsBound = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntVlanIsBound.setStatus('current')
dcxSubIntBoundVlanSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBoundVlanSlotIndex.setStatus('current')
dcxSubIntBoundVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBoundVlanPortIndex.setStatus('current')
dcxSubIntBoundVlanSubIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBoundVlanSubIntIndex.setStatus('current')
dcxSubIntBoundVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBoundVlanTag.setStatus('current')
dcxSubIntBoundVlanNative = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxSubIntBoundVlanNative.setStatus('current')
dcxSubIntVlanTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 11, 1, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcxSubIntVlanTagStatus.setStatus('current')
mibBuilder.exportSymbols("ARRIS-C3-SUBINT-MIB", dcxSubIntObjects=dcxSubIntObjects, dcxSubIntStatus=dcxSubIntStatus, dcxSubIntVlanTagTable=dcxSubIntVlanTagTable, dcxSubIntEntry=dcxSubIntEntry, dcxSubIntCableHelperIndex=dcxSubIntCableHelperIndex, dcxSubIntIpIndex=dcxSubIntIpIndex, dcxSubIntIpEntry=dcxSubIntIpEntry, dcxSubIntPrimaryIpBCastAddress=dcxSubIntPrimaryIpBCastAddress, dcxSubIntBoundVlanSubIntIndex=dcxSubIntBoundVlanSubIntIndex, dcxSubIntVlanIsBound=dcxSubIntVlanIsBound, dcxSubIntRelayInformationOption=dcxSubIntRelayInformationOption, dcxSubIntIpStatus=dcxSubIntIpStatus, dcxSubIntControlGroup=dcxSubIntControlGroup, dcxSubIntIpAddress=dcxSubIntIpAddress, dcxSubIntVlanTagEntry=dcxSubIntVlanTagEntry, dcxSubIntVlanNative=dcxSubIntVlanNative, dcxSubIntCableHelperIpAddress=dcxSubIntCableHelperIpAddress, dcxSubIntManagementAccess=dcxSubIntManagementAccess, dcxSubIntPrimaryIpMask=dcxSubIntPrimaryIpMask, dcxSubIntBoundVlanTag=dcxSubIntBoundVlanTag, dcxSubIntSlotIndex=dcxSubIntSlotIndex, dcxSubIntUnboundTag=dcxSubIntUnboundTag, dcxSubIntCableHelperStatus=dcxSubIntCableHelperStatus, dcxSubIntPortIndex=dcxSubIntPortIndex, dcxSubIntCableHelperEntry=dcxSubIntCableHelperEntry, dcxSubIntSubIntIndex=dcxSubIntSubIntIndex, dcxSubIntVlanTagStatus=dcxSubIntVlanTagStatus, dcxSubIntBoundVlanPortIndex=dcxSubIntBoundVlanPortIndex, dcxSubIntOperational=dcxSubIntOperational, PYSNMP_MODULE_ID=cmtsC3SubIntMIB, dcxSubIntCableHelperType=dcxSubIntCableHelperType, cmtsC3SubIntMIB=cmtsC3SubIntMIB, dcxSubIntGiaddrPolicy=dcxSubIntGiaddrPolicy, dcxSubIntIpBCastAddress=dcxSubIntIpBCastAddress, dcxSubIntIpAddressType=dcxSubIntIpAddressType, dcxSubIntBridgeGroupNum=dcxSubIntBridgeGroupNum, dcxSubIntBoundVlanSlotIndex=dcxSubIntBoundVlanSlotIndex, dcxSubIntPrimaryIpAddress=dcxSubIntPrimaryIpAddress, dcxSubIntTable=dcxSubIntTable, dcxSubIntRelayEnabled=dcxSubIntRelayEnabled, dcxSubIntCableHelperTable=dcxSubIntCableHelperTable, dcxSubIntIpTable=dcxSubIntIpTable, dcxSubIntVlanTag=dcxSubIntVlanTag, dcxSubIntIpMask=dcxSubIntIpMask, dcxSubIntBoundVlanNative=dcxSubIntBoundVlanNative, dcxSubIntUnboundTagIsNative=dcxSubIntUnboundTagIsNative, dcxSubIntInboundAclIndex=dcxSubIntInboundAclIndex, dcxSubIntOutgoingAclIndex=dcxSubIntOutgoingAclIndex)
