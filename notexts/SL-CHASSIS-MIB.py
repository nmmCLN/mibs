#
# PySNMP MIB module SL-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-CHASSIS-MIB
# Produced by pysmi-1.1.8 at Thu Feb  9 14:06:16 2023
# On host fv-az796-878 platform Linux version 5.15.0-1031-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
slMain, = mibBuilder.importSymbols("SL-MAIN-MIB", "slMain")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ModuleIdentity, Bits, Counter64, Unsigned32, iso, Integer32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ModuleIdentity", "Bits", "Counter64", "Unsigned32", "iso", "Integer32", "NotificationType", "TimeTicks")
TruthValue, TimeStamp, RowStatus, DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "RowStatus", "DisplayString", "TextualConvention", "PhysAddress")
slChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18))
if mibBuilder.loadTexts: slChassis.setLastUpdated('201305050000Z')
if mibBuilder.loadTexts: slChassis.setOrganization('PacketLight Networks Ltd.')
slChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1))
slChassisSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2))
slChassisInfoNodeSlotId = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoNodeSlotId.setStatus('current')
slChassisInfoNodeRole = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gneNode", 1), ("internalSlotNode", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoNodeRole.setStatus('current')
slChassisInfoLanVrrpIp = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoLanVrrpIp.setStatus('current')
slChassisInfoOscVrrpIp = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoOscVrrpIp.setStatus('current')
slChassisInfoTopology = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("osc", 1), ("lan", 2), ("simple", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoTopology.setStatus('current')
slChassisInfoVrrpEnable = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slChassisInfoVrrpEnable.setStatus('current')
slChassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1), )
if mibBuilder.loadTexts: slChassisSlotTable.setStatus('current')
slChassisSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1), ).setIndexNames((0, "SL-CHASSIS-MIB", "slChassisSlotId"))
if mibBuilder.loadTexts: slChassisSlotEntry.setStatus('current')
slChassisSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotId.setStatus('current')
slChassisSlotRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gneNode", 1), ("internalNode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotRole.setStatus('current')
slChassisSlotInternalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotInternalIp.setStatus('current')
slChassisSlotProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotProductType.setStatus('current')
slChassisSlotSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSysName.setStatus('current')
slChassisSlotSnmp161Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSnmp161Port.setStatus('current')
slChassisSlotSnmp162MinPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSnmp162MinPort.setStatus('current')
slChassisSlotSnmp162MaxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSnmp162MaxPort.setStatus('current')
slChassisSlotHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotHttpPort.setStatus('current')
slChassisSlotTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotTelnetPort.setStatus('current')
slChassisSlotFtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotFtpPort.setStatus('current')
slChassisSlotTL1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotTL1Port.setStatus('current')
slChassisSlotPingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotPingIdentifier.setStatus('current')
slChassisSlotHttpsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotHttpsPort.setStatus('current')
slChassisSlotSshPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSshPort.setStatus('current')
slChassisSlotSTL1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 18, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slChassisSlotSTL1Port.setStatus('current')
mibBuilder.exportSymbols("SL-CHASSIS-MIB", slChassisInfo=slChassisInfo, slChassisSlotEntry=slChassisSlotEntry, slChassisSlotId=slChassisSlotId, slChassis=slChassis, slChassisSlotPingIdentifier=slChassisSlotPingIdentifier, slChassisSlotSysName=slChassisSlotSysName, slChassisSlotRole=slChassisSlotRole, slChassisSlotTelnetPort=slChassisSlotTelnetPort, slChassisSlotHttpsPort=slChassisSlotHttpsPort, slChassisSlotHttpPort=slChassisSlotHttpPort, slChassisInfoNodeRole=slChassisInfoNodeRole, slChassisSlotTable=slChassisSlotTable, slChassisSlotInternalIp=slChassisSlotInternalIp, slChassisSlotFtpPort=slChassisSlotFtpPort, slChassisSlotSnmp161Port=slChassisSlotSnmp161Port, slChassisSlotSnmp162MaxPort=slChassisSlotSnmp162MaxPort, slChassisSlotSTL1Port=slChassisSlotSTL1Port, slChassisSlot=slChassisSlot, slChassisInfoOscVrrpIp=slChassisInfoOscVrrpIp, slChassisSlotTL1Port=slChassisSlotTL1Port, slChassisInfoLanVrrpIp=slChassisInfoLanVrrpIp, slChassisInfoVrrpEnable=slChassisInfoVrrpEnable, slChassisSlotSshPort=slChassisSlotSshPort, slChassisInfoTopology=slChassisInfoTopology, slChassisSlotSnmp162MinPort=slChassisSlotSnmp162MinPort, slChassisSlotProductType=slChassisSlotProductType, slChassisInfoNodeSlotId=slChassisInfoNodeSlotId, PYSNMP_MODULE_ID=slChassis)
