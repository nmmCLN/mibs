#
# PySNMP MIB module TIC-RMTI4-G9000-G2020-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/toshiba/TIC-RMTI4-G9000-G2020-MIB
# Produced by pysmi-1.1.8 at Fri Jul  8 07:44:32 2022
# On host fv-az190-632 platform Linux version 5.13.0-1031-azure by user runner
# Using Python version 3.10.5 (main, Jun  7 2022, 06:49:50) [GCC 9.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, iso, Counter32, Unsigned32, Bits, Counter64, NotificationType, NotificationType, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "iso", "Counter32", "Unsigned32", "Bits", "Counter64", "NotificationType", "NotificationType", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Integer32", "enterprises")
TestAndIncr, DisplayString, TextualConvention, TimeInterval, TimeStamp, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "DisplayString", "TextualConvention", "TimeInterval", "TimeStamp", "AutonomousType")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class NonNegativeInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

toshiba = MibIdentifier((1, 3, 6, 1, 4, 1, 186))
equ = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1))
equUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19))
ticUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2))
rmti4 = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5))
upsG9000_G2020 = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1)).setLabel("upsG9000-G2020")
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3))
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7))
upsTime = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8))
upsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 9))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
upsIdentTypeform = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentTypeform.setStatus('mandatory')
upsIdentUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUPSFirmwareVersion.setStatus('mandatory')
upsIdentSysName = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentSysName.setStatus('mandatory')
upsIdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentAttachedDevices.setStatus('mandatory')
upsInputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumOfPhases.setStatus('mandatory')
upsInputLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 2), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageAB.setStatus('mandatory')
upsInputLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageBC.setStatus('mandatory')
upsInputLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltageCA.setStatus('mandatory')
upsInputLLVoltagePercentAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 5), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentAB.setStatus('mandatory')
upsInputLLVoltagePercentBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 6), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentBC.setStatus('mandatory')
upsInputLLVoltagePercentCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 7), NonNegativeInteger()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLLVoltagePercentCA.setStatus('mandatory')
upsInputCurrentPhaseA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 8), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseA.setStatus('mandatory')
upsInputCurrentPhaseB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 9), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseB.setStatus('mandatory')
upsInputCurrentPhaseC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 10), NonNegativeInteger()).setUnits('0.1 RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentPhaseC.setStatus('mandatory')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 11), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
upsInputActivePowerA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 12), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerA.setStatus('mandatory')
upsInputActivePowerB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 13), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerB.setStatus('mandatory')
upsInputActivePowerC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 14), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputActivePowerC.setStatus('mandatory')
upsInputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 15), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTotalActivePower.setStatus('mandatory')
upsInputRatedLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 2, 16), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputRatedLLVoltage.setStatus('mandatory')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
upsOutputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumOfPhases.setStatus('mandatory')
upsOutputLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageAB.setStatus('mandatory')
upsOutputLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageBC.setStatus('mandatory')
upsOutputLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 5), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLLVoltageCA.setStatus('mandatory')
upsOutputCurrentPhaseA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 6), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseA.setStatus('mandatory')
upsOutputCurrentPhaseB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 7), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseB.setStatus('mandatory')
upsOutputCurrentPhaseC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 8), NonNegativeInteger()).setUnits('RMS Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPhaseC.setStatus('mandatory')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 9), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
upsOutputCurrentPercentA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 10), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentA.setStatus('mandatory')
upsOutputCurrentPercentB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 11), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentB.setStatus('mandatory')
upsOutputCurrentPercentC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 12), Integer32()).setUnits('PERCENT').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentPercentC.setStatus('mandatory')
upsOutputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 13), NonNegativeInteger()).setUnits('kWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTotalActivePower.setStatus('mandatory')
upsOutputTotalActivePowerPercent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 14), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTotalActivePowerPercent.setStatus('mandatory')
upsOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 15), NonNegativeInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor.setStatus('mandatory')
upsOutputRatedActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 16), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedActivePower.setStatus('mandatory')
upsOutputRatedApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 17), NonNegativeInteger()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedApparentPower.setStatus('mandatory')
upsOutputRatedLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 3, 18), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRatedLLVoltage.setStatus('mandatory')
upsBypassNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassNumOfPhases.setStatus('mandatory')
upsBypassLLVoltageAB = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 2), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageAB.setStatus('mandatory')
upsBypassLLVoltageBC = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageBC.setStatus('mandatory')
upsBypassLLVoltageCA = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 4), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassLLVoltageCA.setStatus('mandatory')
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 4, 5), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassFrequency.setStatus('mandatory')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
upsElapsedTimeOnBatteryPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsElapsedTimeOnBatteryPower.setStatus('mandatory')
upsEstimatedBatteryRuntime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 3), PositiveInteger()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEstimatedBatteryRuntime.setStatus('mandatory')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 4), NonNegativeInteger()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
upsBatteryVoltagePercent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 5), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltagePercent.setStatus('mandatory')
upsBatteryEstimatedCharge = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryEstimatedCharge.setStatus('mandatory')
upsBatteryDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 7), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryDischargeCurrent.setStatus('mandatory')
upsBatteryChargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 8), Integer32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeCurrent.setStatus('mandatory')
upsBatteryModel = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryModel.setStatus('mandatory')
upsBatteryInSeries = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 10), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryInSeries.setStatus('mandatory')
upsBatteryNumStrings = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 11), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryNumStrings.setStatus('mandatory')
upsBatteryRatedAmpereHour = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 12), NonNegativeInteger()).setUnits('Ampere Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryRatedAmpereHour.setStatus('mandatory')
upsBatteryRatedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryRatedBackupTime.setStatus('mandatory')
upsBatteryInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryInstallationDate.setStatus('mandatory')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1), ).setIndexNames((0, "TIC-RMTI4-G9000-G2020-MIB", "upsAlarmId"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
upsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: upsAlarmId.setStatus('mandatory')
upsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDescr.setStatus('mandatory')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3))
upsAlarmFault = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmFault.setStatus('mandatory')
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
upsAlarmBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryLow.setStatus('mandatory')
upsAlarmBatteryDepleted = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryDepleted.setStatus('mandatory')
upsAlarmBatteryOverheat = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryOverheat.setStatus('mandatory')
upsAlarmBatteryVoltageAbnormal = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryVoltageAbnormal.setStatus('mandatory')
upsAlarmUPSOverheat = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUPSOverheat.setStatus('mandatory')
upsAlarmPowerFailure = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmPowerFailure.setStatus('mandatory')
upsAlarmUPSOverload = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUPSOverload.setStatus('mandatory')
upsAlarmUserDefinedOverloadWarning = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUserDefinedOverloadWarning.setStatus('mandatory')
upsAlarmOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBypass.setStatus('mandatory')
upsAlarmOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOff.setStatus('mandatory')
upsAlarmAsyncOperation = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmAsyncOperation.setStatus('mandatory')
upsAlarmDCBusOverCurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusOverCurrent.setStatus('mandatory')
upsAlarmDCBusOverVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusOverVoltage.setStatus('mandatory')
upsAlarmDCBusUnderVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusUnderVoltage.setStatus('mandatory')
upsAlarmDCBusImbalanced = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDCBusImbalanced.setStatus('mandatory')
upsAlarmOutputUnderVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputUnderVoltage.setStatus('mandatory')
upsAlarmOutputOverVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverVoltage.setStatus('mandatory')
upsAlarmInverterOverload = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmInverterOverload.setStatus('mandatory')
upsAlarmInverterOvercurrent = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmInverterOvercurrent.setStatus('mandatory')
upsAlarmRemotEyeCommError = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 6, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmRemotEyeCommError.setStatus('mandatory')
upsConfigModelIDString = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigModelIDString.setStatus('mandatory')
upsConfigUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigUPSFirmwareVersion.setStatus('mandatory')
upsConfigInputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigInputNumOfPhases.setStatus('mandatory')
upsConfigRatedInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 4), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedInputFrequency.setStatus('mandatory')
upsConfigRatedInputLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 5), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedInputLLVoltage.setStatus('mandatory')
upsConfigRatedInputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 6), PositiveInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedInputPowerFactor.setStatus('mandatory')
upsConfigOutputNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputNumOfPhases.setStatus('mandatory')
upsConfigRatedOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 8), NonNegativeInteger()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputFrequency.setStatus('mandatory')
upsConfigRatedOutputLLVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 9), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedOutputLLVoltage.setStatus('mandatory')
upsConfigRatedOutputApperentPower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 10), NonNegativeInteger()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputApperentPower.setStatus('mandatory')
upsConfigRatedOutputActivePower = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 11), NonNegativeInteger()).setUnits('KWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputActivePower.setStatus('mandatory')
upsConfigRatedOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 12), NonNegativeInteger()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigRatedOutputPowerFactor.setStatus('mandatory')
upsConfigBypassNumOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 13), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigBypassNumOfPhases.setStatus('mandatory')
upsConfigLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 14), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigLowVoltageTransferPoint.setStatus('mandatory')
upsConfigHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 15), NonNegativeInteger()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigHighVoltageTransferPoint.setStatus('mandatory')
upsConfigBatteryInSeries = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 16), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryInSeries.setStatus('mandatory')
upsConfigBatteryNumStrings = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 17), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryNumStrings.setStatus('mandatory')
upsConfigRatedBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 18), NonNegativeInteger()).setUnits('Volts DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedBatteryVoltage.setStatus('mandatory')
upsConfigRatedBatteryAmpereHour = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 19), Integer32()).setUnits('Ahr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigRatedBatteryAmpereHour.setStatus('mandatory')
upsConfigBatteryModel = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryModel.setStatus('mandatory')
upsConfigBatteryRatedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 21), NonNegativeInteger()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryRatedBackupTime.setStatus('mandatory')
upsConfigUserDefinedOverloadSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 22), Integer32()).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigUserDefinedOverloadSetPoint.setStatus('mandatory')
upsConfigBatteryInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setUnits('mm/dd/yyyy').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryInstallationDate.setStatus('mandatory')
upsConfigSysName = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigSysName.setStatus('mandatory')
upsConfigAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigAttachedDevices.setStatus('mandatory')
upsConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 7, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigPassword.setStatus('mandatory')
upsTimeRealDate = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTimeRealDate.setStatus('mandatory')
upsTimeRealTime = MibScalar((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTimeRealTime.setStatus('mandatory')
upsTrapFault = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,1))
upsTrapFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,2))
upsTrapOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,3))
upsTrapOnBatteryClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,4))
upsTrapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,5))
upsTrapBatteryLowClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,6))
upsTrapBatteryDepleted = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,7))
upsTrapBatteryDepletedClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,8))
upsTrapBatteryOverheat = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,9))
upsTrapBatteryOverheatClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,10))
upsTrapBatteryVoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,11))
upsTrapBatteryVoltageAbnormalClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,12))
upsTrapUPSOverheat = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,13))
upsTrapUPSOverheatClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,14))
upsTrapPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,15))
upsTrapPowerFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,16))
upsTrapUPSOverload = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,17))
upsTrapUPSOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,18))
upsTrapUserDefinedOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,19))
upsTrapUserDefinedOverloadWarningClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,20))
upsTrapOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,21))
upsTrapOnBypassClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,22))
upsTrapOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,23))
upsTrapOutputOffClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,24))
upsTrapAsyncOperation = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,25))
upsTrapAsyncOperationClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,26))
upsTrapDCBusOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,27))
upsTrapDCBusOverCurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,28))
upsTrapDCBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,29))
upsTrapDCBusOverVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,30))
upsTrapDCBusUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,31))
upsTrapDCBusUnderVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,32))
upsTrapDCBusImbalance = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,33))
upsTrapDCBusImbalanceClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,34))
upsTrapOutputUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,35))
upsTrapOutputUnderVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,36))
upsTrapOutputOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,37))
upsTrapOutputOverVoltageClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,38))
upsTrapInverterOverload = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,39))
upsTrapInverterOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,40))
upsTrapInverterOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,41))
upsTrapInverterOvercurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,42))
upsTrapRemotEyeCommError = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,43))
upsTrapRemotEyeCommErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 186, 1, 19, 2, 5, 1) + (0,44))
mibBuilder.exportSymbols("TIC-RMTI4-G9000-G2020-MIB", upsInputRatedLLVoltage=upsInputRatedLLVoltage, upsOutputCurrentPhaseC=upsOutputCurrentPhaseC, upsConfigBatteryNumStrings=upsConfigBatteryNumStrings, upsInputLLVoltagePercentBC=upsInputLLVoltagePercentBC, upsBatteryInstallationDate=upsBatteryInstallationDate, upsBatteryEstimatedCharge=upsBatteryEstimatedCharge, upsTrapInverterOvercurrent=upsTrapInverterOvercurrent, upsIdentAttachedDevices=upsIdentAttachedDevices, upsOutputCurrentPhaseB=upsOutputCurrentPhaseB, upsTrapFaultClear=upsTrapFaultClear, upsAlarmUPSOverheat=upsAlarmUPSOverheat, upsTrapBatteryDepleted=upsTrapBatteryDepleted, upsBatteryRatedAmpereHour=upsBatteryRatedAmpereHour, upsAlarmTime=upsAlarmTime, upsOutputRatedApparentPower=upsOutputRatedApparentPower, upsAlarmDescr=upsAlarmDescr, upsTrapDCBusUnderVoltageClear=upsTrapDCBusUnderVoltageClear, upsBatteryVoltagePercent=upsBatteryVoltagePercent, upsBatteryStatus=upsBatteryStatus, upsBypassFrequency=upsBypassFrequency, upsConfigRatedOutputActivePower=upsConfigRatedOutputActivePower, upsTrapInverterOvercurrentClear=upsTrapInverterOvercurrentClear, upsConfigRatedOutputLLVoltage=upsConfigRatedOutputLLVoltage, upsBypassLLVoltageBC=upsBypassLLVoltageBC, upsAlarmBatteryVoltageAbnormal=upsAlarmBatteryVoltageAbnormal, upsAlarmsPresent=upsAlarmsPresent, upsConfigBatteryInSeries=upsConfigBatteryInSeries, upsTrapBatteryVoltageAbnormal=upsTrapBatteryVoltageAbnormal, upsConfigOutputNumOfPhases=upsConfigOutputNumOfPhases, upsBatteryModel=upsBatteryModel, upsAlarmBatteryLow=upsAlarmBatteryLow, upsAlarmTable=upsAlarmTable, upsAlarmDCBusImbalanced=upsAlarmDCBusImbalanced, upsTrapOutputOverVoltageClear=upsTrapOutputOverVoltageClear, upsEstimatedBatteryRuntime=upsEstimatedBatteryRuntime, upsOutputPowerFactor=upsOutputPowerFactor, upsBypassNumOfPhases=upsBypassNumOfPhases, upsTrapPowerFailure=upsTrapPowerFailure, upsTrapInverterOverload=upsTrapInverterOverload, upsTrapDCBusOverVoltage=upsTrapDCBusOverVoltage, upsTrapUPSOverheat=upsTrapUPSOverheat, upsElapsedTimeOnBatteryPower=upsElapsedTimeOnBatteryPower, upsTrapUPSOverloadClear=upsTrapUPSOverloadClear, upsInputTotalActivePower=upsInputTotalActivePower, upsInputNumOfPhases=upsInputNumOfPhases, upsTrapBatteryLowClear=upsTrapBatteryLowClear, ticUPS=ticUPS, upsBatteryRatedBackupTime=upsBatteryRatedBackupTime, upsTrapDCBusOverCurrentClear=upsTrapDCBusOverCurrentClear, upsConfigUPSFirmwareVersion=upsConfigUPSFirmwareVersion, upsTrapPowerFailureClear=upsTrapPowerFailureClear, upsG9000_G2020=upsG9000_G2020, upsOutputNumOfPhases=upsOutputNumOfPhases, upsAlarmDCBusOverCurrent=upsAlarmDCBusOverCurrent, equ=equ, upsTrapBatteryOverheat=upsTrapBatteryOverheat, upsBatteryVoltage=upsBatteryVoltage, upsTrapRemotEyeCommErrorClear=upsTrapRemotEyeCommErrorClear, upsTrapDCBusOverVoltageClear=upsTrapDCBusOverVoltageClear, upsTrapUPSOverload=upsTrapUPSOverload, upsInputActivePowerB=upsInputActivePowerB, upsConfigLowVoltageTransferPoint=upsConfigLowVoltageTransferPoint, upsInputLLVoltageBC=upsInputLLVoltageBC, upsAlarmFault=upsAlarmFault, upsConfigHighVoltageTransferPoint=upsConfigHighVoltageTransferPoint, upsAlarmOutputUnderVoltage=upsAlarmOutputUnderVoltage, upsTrapUserDefinedOverloadWarning=upsTrapUserDefinedOverloadWarning, upsInputCurrentPhaseB=upsInputCurrentPhaseB, upsOutputTotalActivePowerPercent=upsOutputTotalActivePowerPercent, upsWellKnownAlarms=upsWellKnownAlarms, upsTrapInverterOverloadClear=upsTrapInverterOverloadClear, upsConfigRatedOutputPowerFactor=upsConfigRatedOutputPowerFactor, upsConfigModelIDString=upsConfigModelIDString, upsTrapAsyncOperationClear=upsTrapAsyncOperationClear, upsTrapOnBattery=upsTrapOnBattery, upsOutputLLVoltageAB=upsOutputLLVoltageAB, upsBypass=upsBypass, upsAlarmDCBusUnderVoltage=upsAlarmDCBusUnderVoltage, upsTrapDCBusOverCurrent=upsTrapDCBusOverCurrent, upsConfigRatedBatteryVoltage=upsConfigRatedBatteryVoltage, upsInputCurrentPhaseC=upsInputCurrentPhaseC, upsConfigBatteryRatedBackupTime=upsConfigBatteryRatedBackupTime, upsAlarmPowerFailure=upsAlarmPowerFailure, upsInput=upsInput, upsBatteryDischargeCurrent=upsBatteryDischargeCurrent, upsTrapFault=upsTrapFault, upsConfig=upsConfig, upsConfigBatteryInstallationDate=upsConfigBatteryInstallationDate, upsTrapOutputOff=upsTrapOutputOff, upsTime=upsTime, upsConfigAttachedDevices=upsConfigAttachedDevices, upsConfigInputNumOfPhases=upsConfigInputNumOfPhases, upsTrapBatteryVoltageAbnormalClear=upsTrapBatteryVoltageAbnormalClear, upsTrapOnBypassClear=upsTrapOnBypassClear, upsInputActivePowerA=upsInputActivePowerA, upsTrapRemotEyeCommError=upsTrapRemotEyeCommError, upsAlarmInverterOverload=upsAlarmInverterOverload, upsTrapUserDefinedOverloadWarningClear=upsTrapUserDefinedOverloadWarningClear, PositiveInteger=PositiveInteger, upsInputLLVoltageAB=upsInputLLVoltageAB, upsTimeRealDate=upsTimeRealDate, upsOutput=upsOutput, upsBypassLLVoltageCA=upsBypassLLVoltageCA, toshiba=toshiba, upsTimeRealTime=upsTimeRealTime, upsOutputCurrentPercentB=upsOutputCurrentPercentB, upsAlarmBatteryOverheat=upsAlarmBatteryOverheat, upsTrapDCBusImbalance=upsTrapDCBusImbalance, upsBatteryChargeCurrent=upsBatteryChargeCurrent, upsConfigRatedInputLLVoltage=upsConfigRatedInputLLVoltage, upsTrapOutputOffClear=upsTrapOutputOffClear, upsAlarm=upsAlarm, upsOutputLLVoltageBC=upsOutputLLVoltageBC, upsOutputCurrentPercentC=upsOutputCurrentPercentC, upsConfigRatedInputPowerFactor=upsConfigRatedInputPowerFactor, upsTrapOutputUnderVoltageClear=upsTrapOutputUnderVoltageClear, upsOutputLLVoltageCA=upsOutputLLVoltageCA, upsTrapOutputUnderVoltage=upsTrapOutputUnderVoltage, upsInputLLVoltageCA=upsInputLLVoltageCA, upsOutputFrequency=upsOutputFrequency, upsAlarmRemotEyeCommError=upsAlarmRemotEyeCommError, upsAlarmInverterOvercurrent=upsAlarmInverterOvercurrent, upsTrapUPSOverheatClear=upsTrapUPSOverheatClear, upsAlarmOutputOverVoltage=upsAlarmOutputOverVoltage, upsTrapOutputOverVoltage=upsTrapOutputOverVoltage, upsBypassLLVoltageAB=upsBypassLLVoltageAB, upsInputActivePowerC=upsInputActivePowerC, upsAlarmId=upsAlarmId, upsInputCurrentPhaseA=upsInputCurrentPhaseA, upsConfigRatedOutputFrequency=upsConfigRatedOutputFrequency, upsInputLLVoltagePercentCA=upsInputLLVoltagePercentCA, upsAlarmOutputOff=upsAlarmOutputOff, upsTrapDCBusImbalanceClear=upsTrapDCBusImbalanceClear, upsTrapBatteryLow=upsTrapBatteryLow, upsInputLLVoltagePercentAB=upsInputLLVoltagePercentAB, upsAlarmEntry=upsAlarmEntry, upsTrapBatteryOverheatClear=upsTrapBatteryOverheatClear, upsBatteryNumStrings=upsBatteryNumStrings, upsOutputSource=upsOutputSource, upsConfigBypassNumOfPhases=upsConfigBypassNumOfPhases, upsAlarmOnBypass=upsAlarmOnBypass, upsIdent=upsIdent, upsBattery=upsBattery, equUPS=equUPS, upsTrapDCBusUnderVoltage=upsTrapDCBusUnderVoltage, upsConfigBatteryModel=upsConfigBatteryModel, upsOutputCurrentPhaseA=upsOutputCurrentPhaseA, upsBatteryInSeries=upsBatteryInSeries, upsTrapOnBypass=upsTrapOnBypass, upsOutputTotalActivePower=upsOutputTotalActivePower, upsIdentTypeform=upsIdentTypeform, upsIdentUPSFirmwareVersion=upsIdentUPSFirmwareVersion, upsConfigPassword=upsConfigPassword, upsTrapAsyncOperation=upsTrapAsyncOperation, upsConfigSysName=upsConfigSysName, rmti4=rmti4, upsAlarmDCBusOverVoltage=upsAlarmDCBusOverVoltage, upsOutputRatedActivePower=upsOutputRatedActivePower, upsAlarmUserDefinedOverloadWarning=upsAlarmUserDefinedOverloadWarning, upsOutputCurrentPercentA=upsOutputCurrentPercentA, upsTrapBatteryDepletedClear=upsTrapBatteryDepletedClear, upsIdentManufacturer=upsIdentManufacturer, upsConfigRatedBatteryAmpereHour=upsConfigRatedBatteryAmpereHour, upsConfigRatedOutputApperentPower=upsConfigRatedOutputApperentPower, upsAlarmBatteryDepleted=upsAlarmBatteryDepleted, upsIdentSysName=upsIdentSysName, NonNegativeInteger=NonNegativeInteger, upsAlarmUPSOverload=upsAlarmUPSOverload, upsInputFrequency=upsInputFrequency, upsAlarmOnBattery=upsAlarmOnBattery, upsAlarmAsyncOperation=upsAlarmAsyncOperation, upsConfigUserDefinedOverloadSetPoint=upsConfigUserDefinedOverloadSetPoint, upsConfigRatedInputFrequency=upsConfigRatedInputFrequency, upsOutputRatedLLVoltage=upsOutputRatedLLVoltage, upsTrapOnBatteryClear=upsTrapOnBatteryClear, upsTrap=upsTrap)
