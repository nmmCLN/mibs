#
# PySNMP MIB module CTRON-SFPS-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-TOPOLOGY-MIB
# Produced by pysmi-1.1.8 at Fri Jan 27 14:05:19 2023
# On host fv-az417-962 platform Linux version 5.15.0-1031-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
sfpsDirViolation, sfpsRestrictedMobility, sfpsDapiNvramStats, sfpsDirLockStats, sfpsTopologyVNSNeighbors, sfpsTopologyServerPortEventRelay, sfpsDirLockConfig, sfpsTAPITestOut, sfpsVLANTopAgentPortTableAPIIn, sfpsTopologyServerTest, sfpsDirViolationAPI, sfpsTPMPortTableAPIIn, sfpsVLANTopologyAgent, sfpsTopologyPortManager, sfpsRATopAgentPortTableAPIIn, sfpsRestrictedMobilityAPI, sfpsDirRestriction, sfpsDirViolationDeltaAPI, sfpsTAPITestIn, sfpsRATopAgentPortTableAPIOut, sfpsTopologyServerTestIn, sfpsRATopologyAgent, sfpsTopologyAgentCommon, sfpsTPMPortTableAPIOut, sfpsNeighborEvents, sfpsServiceCenter, sfpsTopologyFCL, sfpsESPTopologyAgent, sfpsVMTopologyServer = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsDirViolation", "sfpsRestrictedMobility", "sfpsDapiNvramStats", "sfpsDirLockStats", "sfpsTopologyVNSNeighbors", "sfpsTopologyServerPortEventRelay", "sfpsDirLockConfig", "sfpsTAPITestOut", "sfpsVLANTopAgentPortTableAPIIn", "sfpsTopologyServerTest", "sfpsDirViolationAPI", "sfpsTPMPortTableAPIIn", "sfpsVLANTopologyAgent", "sfpsTopologyPortManager", "sfpsRATopAgentPortTableAPIIn", "sfpsRestrictedMobilityAPI", "sfpsDirRestriction", "sfpsDirViolationDeltaAPI", "sfpsTAPITestIn", "sfpsRATopAgentPortTableAPIOut", "sfpsTopologyServerTestIn", "sfpsRATopologyAgent", "sfpsTopologyAgentCommon", "sfpsTPMPortTableAPIOut", "sfpsNeighborEvents", "sfpsServiceCenter", "sfpsTopologyFCL", "sfpsESPTopologyAgent", "sfpsVMTopologyServer")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Unsigned32, TimeTicks, Gauge32, ModuleIdentity, ObjectIdentity, MibIdentifier, Counter32, iso, IpAddress, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Unsigned32", "TimeTicks", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Counter32", "iso", "IpAddress", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsServiceCenterTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8), )
if mibBuilder.loadTexts: sfpsServiceCenterTopologyTable.setStatus('mandatory')
sfpsServiceCenterTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsServiceCenterTopologyHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterTopologyEntry.setStatus('mandatory')
sfpsServiceCenterTopologyHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyHashLeaf.setStatus('mandatory')
sfpsServiceCenterTopologyMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyMetric.setStatus('mandatory')
sfpsServiceCenterTopologyName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyName.setStatus('mandatory')
sfpsServiceCenterTopologyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyOperStatus.setStatus('mandatory')
sfpsServiceCenterTopologyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyAdminStatus.setStatus('mandatory')
sfpsServiceCenterTopologyStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyStatusTime.setStatus('mandatory')
sfpsServiceCenterTopologyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyRequests.setStatus('mandatory')
sfpsServiceCenterTopologyResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyResponses.setStatus('mandatory')
sfpsHistoryTopologyServerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7), )
if mibBuilder.loadTexts: sfpsHistoryTopologyServerTable.setStatus('mandatory')
sfpsHistoryTopologyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsHistoryTopologyServerIndex"))
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEntry.setStatus('mandatory')
sfpsHistoryTopologyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerIndex.setStatus('mandatory')
sfpsHistoryTopologyServerLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerLogicalPort.setStatus('mandatory')
sfpsHistoryTopologyServerSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchID.setStatus('mandatory')
sfpsHistoryTopologyServerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("foundNeighbor", 1), ("optionsGain", 2), ("optionsLoss", 3), ("agingNghLoss", 4), ("portDownNghLoss", 5), ("duplicateNghLoss", 6), ("subtractPortNghLoss", 7), ("loopedPortNhgLoss", 8), ("crossedPortNghLoss", 9), ("functionalLevelNghLoss", 10), ("versionedPortNghLoss", 11), ("twoWayCommLoss", 12), ("sequenceNumberReset", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEvent.setStatus('mandatory')
sfpsHistoryTopologyServerSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchIP.setStatus('mandatory')
sfpsHistoryTopologyServerChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 6), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisMAC.setStatus('mandatory')
sfpsHistoryTopologyServerChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisIP.setStatus('mandatory')
sfpsHistoryTopologyServerAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerAgent.setStatus('mandatory')
sfpsHistoryTopologyServerDeltaOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerDeltaOptionsMask.setStatus('mandatory')
sfpsHistoryTopologyServerCurrentOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerCurrentOptionsMask.setStatus('mandatory')
sfpsHistoryTopologyServerFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerFCL.setStatus('mandatory')
sfpsHistoryTopologyServerSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSysTime.setStatus('mandatory')
sfpsTPMPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1), )
if mibBuilder.loadTexts: sfpsTPMPortTable.setStatus('mandatory')
sfpsTPMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTPMPortLogicalPort"))
if mibBuilder.loadTexts: sfpsTPMPortEntry.setStatus('mandatory')
sfpsTPMPortLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortLogicalPort.setStatus('mandatory')
sfpsTPMPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2), ("atm-lec", 3), ("token-ring", 4), ("wan", 5), ("inb", 6), ("hcp", 7), ("hdp", 8), ("atm-encap", 9), ("atm-pvc", 10), ("unknown", 11), ("atm-forum-lec", 12), ("atm-forum-pvc", 13), ("atm-forum-svc", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortMediaType.setStatus('mandatory')
sfpsTPMPortTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTopologyAgent.setStatus('mandatory')
sfpsTPMPortVlanAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortVlanAttributes.setStatus('mandatory')
sfpsTPMPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortNVRAMStatus.setStatus('mandatory')
sfpsTPMPortCorePortVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortCorePortVID.setStatus('mandatory')
sfpsTPMPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("getPortInfo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInVerb.setStatus('mandatory')
sfpsTPMPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInLogicalPort.setStatus('mandatory')
sfpsTPMPortTableAPIInTopologyAgent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInTopologyAgent.setStatus('mandatory')
sfpsTPMPortTableAPIInAdminPortUp = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortUp.setStatus('mandatory')
sfpsTPMPortTableAPIInAdminPortDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortDown.setStatus('mandatory')
sfpsTPMPortTableAPIInCorePortVID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInCorePortVID.setStatus('mandatory')
sfpsTPMPortTableAPIOutLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutLogicalPort.setStatus('mandatory')
sfpsTPMPortTableAPIOutTopologyAgent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutTopologyAgent.setStatus('mandatory')
sfpsCommonNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1), )
if mibBuilder.loadTexts: sfpsCommonNeighborTable.setStatus('mandatory')
sfpsCommonNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsCommonNeighborLogicalPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsCommonNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsCommonNeighborEntry.setStatus('mandatory')
sfpsCommonNeighborLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborLogicalPort.setStatus('mandatory')
sfpsCommonNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchID.setStatus('mandatory')
sfpsCommonNeighborSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchIP.setStatus('mandatory')
sfpsCommonNeighborSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchMAC.setStatus('mandatory')
sfpsCommonNeighborSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchType.setStatus('mandatory')
sfpsCommonNeighborHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborHellosReceived.setStatus('mandatory')
sfpsCommonNeighborFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFirstHeard.setStatus('mandatory')
sfpsCommonNeighborLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborLastHeard.setStatus('mandatory')
sfpsCommonNeighborReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborReceiveFrequency.setStatus('mandatory')
sfpsCommonNeighborTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTopologyAgent.setStatus('mandatory')
sfpsCommonNeighborChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 11), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborChassisMAC.setStatus('mandatory')
sfpsCommonNeighborCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("oneWay", 2), ("twoWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCommState.setStatus('mandatory')
sfpsCommonNeighborNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("unNotified", 2), ("notified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborNotifyState.setStatus('mandatory')
sfpsCommonNeighborTwoWayLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossCount.setStatus('mandatory')
sfpsCommonNeighborTwoWayLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossTime.setStatus('mandatory')
sfpsCommonNeighborSeqNumLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossCount.setStatus('mandatory')
sfpsCommonNeighborSeqNumLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossTime.setStatus('mandatory')
sfpsCommonNeighborFalseAgingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingCount.setStatus('mandatory')
sfpsCommonNeighborFalseAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingTime.setStatus('mandatory')
sfpsCommonNeighborChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborChassisIP.setStatus('mandatory')
sfpsCommonNeighborFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 21), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFCL.setStatus('mandatory')
sfpsCommonNeighborOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborOptionsMask.setStatus('mandatory')
sfpsCommonNeighborRcvdPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10), ("accessOnly", 11), ("raPrimary", 12), ("uplink", 13), ("fclStandby", 14), ("loopStandby", 15), ("raStandby", 16), ("flood", 17), ("uplinkFlood", 18), ("downlingFlood", 19), ("unknown-ra-standy", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborRcvdPortState.setStatus('mandatory')
sfpsCommonNeighborSendPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10), ("accessOnly", 11), ("raPrimary", 12), ("uplink", 13), ("fclStandby", 14), ("loopStandby", 15), ("raStandby", 16), ("flood", 17), ("uplinkFlood", 18), ("downlingFlood", 19), ("unknown-ra-standy", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSendPortState.setStatus('mandatory')
sfpsCommonNeighborCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCompatibility.setStatus('mandatory')
sfpsCommonNeighborCorePortVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCorePortVID.setStatus('mandatory')
sfpsTopologyFCLTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1), )
if mibBuilder.loadTexts: sfpsTopologyFCLTable.setStatus('mandatory')
sfpsTopologyFCLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyFCLFunctionalLevel"))
if mibBuilder.loadTexts: sfpsTopologyFCLEntry.setStatus('mandatory')
sfpsTopologyFCLFunctionalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLFunctionalLevel.setStatus('mandatory')
sfpsTopologyFCLCompatability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compatable", 1), ("notCompatable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLCompatability.setStatus('mandatory')
sfpsTopologyFCLThisPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostManagement", 4), ("hostControl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLThisPortState.setStatus('mandatory')
sfpsTopologyFCLSendPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostManagement", 4), ("hostControl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLSendPortState.setStatus('mandatory')
sfpsNeighborEventsFoundEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNeighborEventsFoundEvents.setStatus('mandatory')
sfpsNeighborEventsLostEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNeighborEventsLostEvents.setStatus('mandatory')
sfpsRATopAgentNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1), )
if mibBuilder.loadTexts: sfpsRATopAgentNeighborTable.setStatus('mandatory')
sfpsRATopAgentNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentNeighborInPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsRATopAgentNeighborEntry.setStatus('mandatory')
sfpsRATopAgentNeighborInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborInPort.setStatus('mandatory')
sfpsRATopAgentNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSwitchID.setStatus('mandatory')
sfpsRATopAgentNeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborPriority.setStatus('mandatory')
sfpsRATopAgentNeighborNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetworkPort.setStatus('mandatory')
sfpsRATopAgentNeighborCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborCallTag.setStatus('mandatory')
sfpsRATopAgentNeighborNetHellosRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHellosRcvd.setStatus('mandatory')
sfpsRATopAgentNeighborSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSeqNumMismatch.setStatus('mandatory')
sfpsRATopAgentNeighborNetHelloAgeTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloAgeTimeOuts.setStatus('mandatory')
sfpsRATopAgentNeighborNetHelloNetPortLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortLosses.setStatus('mandatory')
sfpsRATopAgentNeighborNetHelloNetPortChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortChanges.setStatus('mandatory')
sfpsRATopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2), )
if mibBuilder.loadTexts: sfpsRATopAgentPortTable.setStatus('mandatory')
sfpsRATopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentPortLogicalPort"))
if mibBuilder.loadTexts: sfpsRATopAgentPortEntry.setStatus('mandatory')
sfpsRATopAgentPortLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortLogicalPort.setStatus('mandatory')
sfpsRATopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortHelloVersion.setStatus('mandatory')
sfpsRATopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortSendFrequency.setStatus('mandatory')
sfpsRATopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortRecvFrequency.setStatus('mandatory')
sfpsRATopAgentPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPriority.setStatus('mandatory')
sfpsRATopAgentPortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("added", 1), ("init", 2), ("poised", 3), ("primary", 4), ("backup", 5), ("down", 6), ("halted", 7), ("deleted", 8), ("backupWait", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPortState.setStatus('mandatory')
sfpsRATopAgentPortPrimarySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 7), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPrimarySwitch.setStatus('mandatory')
sfpsRATopAgentPortNetHelloRecvFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortNetHelloRecvFreq.setStatus('mandatory')
sfpsRATopAgentPortStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortStateChangeCount.setStatus('mandatory')
sfpsRATopAgentPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortNVRAMStatus.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("getPortInfo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInVerb.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInLogicalPort.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInHelloVersion.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInSendFrequency.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInRecvFrequency.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInPriority.setStatus('mandatory')
sfpsRATopAgentPortTableAPIInNetHelloRecvFreq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInNetHelloRecvFreq.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutLogicalPort.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutHelloVersion.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutSendFrequency.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutRecvFrequency.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPriority.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutPortState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("added", 1), ("init", 2), ("poised", 3), ("primary", 4), ("backup", 5), ("down", 6), ("halted", 7), ("deleted", 8), ("backupWait", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortState.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutPrimarySwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 7), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPrimarySwitch.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq.setStatus('mandatory')
sfpsRATopAgentPortTableAPIOutPortStateChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortStateChangeCount.setStatus('mandatory')
sfpsVMTopServerDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1), )
if mibBuilder.loadTexts: sfpsVMTopServerDeltaTable.setStatus('mandatory')
sfpsVMTopServerDeltaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVMTopServerDeltaIndex"))
if mibBuilder.loadTexts: sfpsVMTopServerDeltaEntry.setStatus('mandatory')
sfpsVMTopServerDeltaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIndex.setStatus('mandatory')
sfpsVMTopServerDeltaInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaInPort.setStatus('mandatory')
sfpsVMTopServerDeltaSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaSwitchID.setStatus('mandatory')
sfpsVMTopServerDeltaState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaState.setStatus('mandatory')
sfpsVMTopServerDeltaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIPAddress.setStatus('mandatory')
sfpsVMTopServerDeltaAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaAgent.setStatus('mandatory')
sfpsVMTopServerDeltaCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaCount.setStatus('mandatory')
sfpsVMTopServerTableLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVMTopServerTableLock.setStatus('mandatory')
sfpsVMTopServerPortChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPortChange", 1), ("portChange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerPortChange.setStatus('mandatory')
sfpsVMTopServerTableFull = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tableFull", 1), ("tableNotFull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerTableFull.setStatus('mandatory')
sfpsVMTopServerChangeCnt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVMTopServerChangeCnt.setStatus('mandatory')
sfpsTAPITestInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("portUp", 3), ("portDown", 4), ("changePortAccess", 5), ("resolvePortNameToPort", 6), ("resolveBaseMACToPorts", 7), ("resolveINBNeighbor", 8), ("getPortNeighbors", 9), ("getTotalNeighbors", 10), ("getLogicalNetworkPortMask", 11), ("getPhysicalNetworkPortMask", 12), ("getPhysicalStandByPortMask", 13), ("getLogicalINBNetworkPortMask", 14), ("getPhysicalINBNetworkPortMask", 15), ("enableAccessPortOnly", 16), ("disableAccessPortOnly", 17), ("getPhysicalPortDownPortMask", 18), ("getLogicalSameFCLPortMask", 19), ("getNeighborFCL", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInVerb.setStatus('mandatory')
sfpsTAPITestInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInLogicalPort.setStatus('mandatory')
sfpsTAPITestInSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInSwitchID.setStatus('mandatory')
sfpsTAPITestInMAC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInMAC.setStatus('mandatory')
sfpsTAPITestInPortTypeState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInPortTypeState.setStatus('mandatory')
sfpsTAPITestInTopologyAgentID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInTopologyAgentID.setStatus('mandatory')
sfpsTAPITestInUNIT321 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInUNIT321.setStatus('mandatory')
sfpsTAPITestOutOutputInteger = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestOutOutputInteger.setStatus('mandatory')
sfpsTAPITestOutOutPutString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestOutOutPutString.setStatus('mandatory')
sfpsTopologyServerTestInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("clear", 3), ("lostEvent", 4), ("foundEvent", 5), ("portEvent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInVerb.setStatus('mandatory')
sfpsTopologyServerTestInServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInServer.setStatus('mandatory')
sfpsTopologyServerTestInNumberOfRelays = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInNumberOfRelays.setStatus('mandatory')
sfpsTopologyServerTestTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2), )
if mibBuilder.loadTexts: sfpsTopologyServerTestTable.setStatus('mandatory')
sfpsTopologyServerTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyServerTestRelayNumber"))
if mibBuilder.loadTexts: sfpsTopologyServerTestEntry.setStatus('mandatory')
sfpsTopologyServerTestRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestRelayNumber.setStatus('mandatory')
sfpsTopologyServerTestServerFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestServerFlavor.setStatus('mandatory')
sfpsTopologyServerTestPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestPortNumber.setStatus('mandatory')
sfpsTopologyServerTestPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestPortName.setStatus('mandatory')
sfpsTopologyServerTestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestIpAddr.setStatus('mandatory')
sfpsTopologyServerTestLostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestLostPort.setStatus('mandatory')
sfpsTopologyServerTestOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestOldState.setStatus('mandatory')
sfpsTopologyServerTestNewState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestNewState.setStatus('mandatory')
sfpsTopologyServerTestTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopologyAgent.setStatus('mandatory')
sfpsVLANTopAgentNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1), )
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborTable.setStatus('mandatory')
sfpsVLANTopAgentNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentNeighborInPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborEntry.setStatus('mandatory')
sfpsVLANTopAgentNeighborInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborInPort.setStatus('mandatory')
sfpsVLANTopAgentNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborSwitchID.setStatus('mandatory')
sfpsVLANTopAgentNeighborOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborOptions.setStatus('mandatory')
sfpsVLANTopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2), )
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTable.setStatus('mandatory')
sfpsVLANTopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentPortPort"))
if mibBuilder.loadTexts: sfpsVLANTopAgentPortEntry.setStatus('mandatory')
sfpsVLANTopAgentPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPort.setStatus('mandatory')
sfpsVLANTopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("versionOther", 1), ("version2", 2), ("version3", 3), ("version4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortHelloVersion.setStatus('mandatory')
sfpsVLANTopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortSendFrequency.setStatus('mandatory')
sfpsVLANTopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortRecvFrequency.setStatus('mandatory')
sfpsVLANTopAgentPortPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPortOptions.setStatus('mandatory')
sfpsVLANTopAgentPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortNVRAMStatus.setStatus('mandatory')
sfpsVLANTopAgentPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("add", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInVerb.setStatus('mandatory')
sfpsVLANTopAgentPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInLogicalPort.setStatus('mandatory')
sfpsVLANTopAgentPortTableAPIInHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInHelloVersion.setStatus('mandatory')
sfpsVLANTopAgentPortTableAPIInSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInSendFrequency.setStatus('mandatory')
sfpsVLANTopAgentPortTableAPIInRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInRecvFrequency.setStatus('mandatory')
sfpsIncompatibleNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2), )
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTable.setStatus('mandatory')
sfpsIncompatibleNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsIncompatibleNeighborLogicalPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsIncompatibleNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsIncompatibleNeighborEntry.setStatus('mandatory')
sfpsIncompatibleNeighborLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLogicalPort.setStatus('mandatory')
sfpsIncompatibleNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchID.setStatus('mandatory')
sfpsIncompatibleNeighborSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchIP.setStatus('mandatory')
sfpsIncompatibleNeighborSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchMAC.setStatus('mandatory')
sfpsIncompatibleNeighborSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchType.setStatus('mandatory')
sfpsIncompatibleNeighborHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborHellosReceived.setStatus('mandatory')
sfpsIncompatibleNeighborFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFirstHeard.setStatus('mandatory')
sfpsIncompatibleNeighborLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLastHeard.setStatus('mandatory')
sfpsIncompatibleNeighborReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborReceiveFrequency.setStatus('mandatory')
sfpsIncompatibleNeighborTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTopologyAgent.setStatus('mandatory')
sfpsIncompatibleNeighborChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 11), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisMAC.setStatus('mandatory')
sfpsIncompatibleNeighborCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("oneWay", 2), ("twoWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCommState.setStatus('mandatory')
sfpsIncompatibleNeighborNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("unNotified", 2), ("notified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborNotifyState.setStatus('mandatory')
sfpsIncompatibleNeighborTwoWayLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossCount.setStatus('mandatory')
sfpsIncompatibleNeighborTwoWayLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossTime.setStatus('mandatory')
sfpsIncompatibleNeighborSeqNumLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossCount.setStatus('mandatory')
sfpsIncompatibleNeighborSeqNumLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossTime.setStatus('mandatory')
sfpsIncompatibleNeighborFalseAgingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingCount.setStatus('mandatory')
sfpsIncompatibleNeighborFalseAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingTime.setStatus('mandatory')
sfpsIncompatibleNeighborChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisIP.setStatus('mandatory')
sfpsIncompatibleNeighborFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 21), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFCL.setStatus('mandatory')
sfpsIncompatibleNeighborOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborOptionsMask.setStatus('mandatory')
sfpsIncompatibleNeighborLocalPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLocalPortState.setStatus('mandatory')
sfpsIncompatibleNeighborRemotePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborRemotePortState.setStatus('mandatory')
sfpsIncompatibleNeighborCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCompatibility.setStatus('mandatory')
sfpsDirViolationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1), )
if mibBuilder.loadTexts: sfpsDirViolationTable.setStatus('mandatory')
sfpsDirViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationHashIndex"))
if mibBuilder.loadTexts: sfpsDirViolationEntry.setStatus('mandatory')
sfpsDirViolationHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationHash.setStatus('mandatory')
sfpsDirViolationHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationHashIndex.setStatus('mandatory')
sfpsDirViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("userLock", 1), ("restrictPort", 2), ("ipNotLearned", 3), ("ipInvalid", 4), ("restrictMobility", 5), ("userLockSamePort", 6), ("sapDisabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationType.setStatus('mandatory')
sfpsDirViolationSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationSrcPort.setStatus('mandatory')
sfpsDirViolationAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAOType.setStatus('mandatory')
sfpsDirViolationAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAOValue.setStatus('mandatory')
sfpsDirViolationLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationLocalPort.setStatus('mandatory')
sfpsDirViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationCount.setStatus('mandatory')
sfpsDirViolationLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationLastSeen.setStatus('mandatory')
sfpsDirViolationFirstSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationFirstSeen.setStatus('mandatory')
sfpsDirViolationSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationSrcMac.setStatus('mandatory')
sfpsDirViolationCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationCPId.setStatus('mandatory')
sfpsDirViolationAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIVerb.setStatus('mandatory')
sfpsDirViolationAPIViolType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("restrictPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIViolType.setStatus('mandatory')
sfpsDirViolationAPISourcePort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPISourcePort.setStatus('mandatory')
sfpsDirViolationAPIAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIAOType.setStatus('mandatory')
sfpsDirViolationAPIAOValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIAOValue.setStatus('mandatory')
sfpsDirViolationAPIChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAPIChangeCount.setStatus('mandatory')
sfpsDirViolationAPICPId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAPICPId.setStatus('mandatory')
sfpsDirViolationDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3), )
if mibBuilder.loadTexts: sfpsDirViolationDeltaTable.setStatus('mandatory')
sfpsDirViolationDeltaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationDeltaIndex"))
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntry.setStatus('mandatory')
sfpsDirViolationDeltaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaIndex.setStatus('mandatory')
sfpsDirViolationDeltaSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaSrcPort.setStatus('mandatory')
sfpsDirViolationDeltaAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOType.setStatus('mandatory')
sfpsDirViolationDeltaAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOValue.setStatus('mandatory')
sfpsDirViolationDeltaEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntryType.setStatus('mandatory')
sfpsDirViolationDeltaAPINumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPINumEntries.setStatus('mandatory')
sfpsDirViolationDeltaAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPIVerb.setStatus('mandatory')
sfpsRestrictedPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1), )
if mibBuilder.loadTexts: sfpsRestrictedPortTable.setStatus('mandatory')
sfpsRestrictedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortHashIndex"))
if mibBuilder.loadTexts: sfpsRestrictedPortEntry.setStatus('mandatory')
sfpsRestrictedPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortPort.setStatus('mandatory')
sfpsRestrictedPortHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortHash.setStatus('mandatory')
sfpsRestrictedPortHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortHashIndex.setStatus('mandatory')
sfpsRestrictedPortSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortSrcMac.setStatus('mandatory')
sfpsDirLockStatsNumViolators = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumViolators.setStatus('mandatory')
sfpsDirLockStatsNumNodeLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumNodeLocked.setStatus('mandatory')
sfpsDirLockStatsNumAliasLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumAliasLocked.setStatus('mandatory')
sfpsDirLockStatsNumRestrictedPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictedPort.setStatus('mandatory')
sfpsDirLockStatsNumRestrictMob = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictMob.setStatus('mandatory')
sfpsDirLockStatsViolationTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsViolationTblSize.setStatus('mandatory')
sfpsDirLockStatsRestrictPortTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictPortTblSize.setStatus('mandatory')
sfpsDirLockStatsRestrictMobTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictMobTblSize.setStatus('mandatory')
sfpsDirLockConfigUserLocking = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigUserLocking.setStatus('mandatory')
sfpsDirLockConfigRestrictedPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigRestrictedPort.setStatus('mandatory')
sfpsDirLockConfigRouterPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigRouterPortLock.setStatus('mandatory')
sfpsDirLockConfigRAPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockConfigRAPortLock.setStatus('mandatory')
sfpsDapiNvramStatsVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("clearAllEntries", 2), ("clearAllUserLock", 3), ("clearAllSrcUnblock", 4), ("clearAllPortUnblock", 5), ("clearAllLimitMobility", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsVerb.setStatus('mandatory')
sfpsDapiNvramStatsTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsTotalEntries.setStatus('mandatory')
sfpsDapiNvramStatsMacEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsMacEntries.setStatus('mandatory')
sfpsDapiNvramStatsAliasEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsAliasEntries.setStatus('mandatory')
sfpsDapiNvramStatsMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsMaxEntries.setStatus('mandatory')
sfpsDapiNvramStatsNvramUsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsNvramUsed.setStatus('mandatory')
sfpsESPTopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2), )
if mibBuilder.loadTexts: sfpsESPTopAgentPortTable.setStatus('mandatory')
sfpsESPTopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsESPTopAgentPortPort"))
if mibBuilder.loadTexts: sfpsESPTopAgentPortEntry.setStatus('mandatory')
sfpsESPTopAgentPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortPort.setStatus('mandatory')
sfpsESPTopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("versionOther", 1), ("version2", 2), ("version3", 3), ("version4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortHelloVersion.setStatus('mandatory')
sfpsESPTopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortSendFrequency.setStatus('mandatory')
sfpsESPTopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortRecvFrequency.setStatus('mandatory')
sfpsTopologyServerTestTopRelayTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3), )
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTable.setStatus('mandatory')
sfpsTopologyServerTestTopRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyServerTestTopRelayRelayNumber"))
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEntry.setStatus('mandatory')
sfpsTopologyServerTestTopRelayRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayRelayNumber.setStatus('mandatory')
sfpsTopologyServerTestTopRelayEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEvent.setStatus('mandatory')
sfpsTopologyServerTestTopRelayDeltaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("foundNeighbor", 1), ("optionsGain", 2), ("optionsLoss", 3), ("agingNghLoss", 4), ("portDownNghLoss", 5), ("duplicateNghLoss", 6), ("subtractPortNghLoss", 7), ("loopedPortNghLoss", 8), ("crossedPortNghLoss", 9), ("functionalLevelNghLoss", 10), ("versionedPortNghLoss", 11), ("twoWayCommLoss", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayDeltaOptions.setStatus('mandatory')
sfpsTopologyServerTestTopRelayCurrentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayCurrentOptions.setStatus('mandatory')
sfpsTopologyServerTestTopRelayLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayLogicalPort.setStatus('mandatory')
sfpsTopologyServerTestTopRelayPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayPortName.setStatus('mandatory')
sfpsTopologyServerTestTopRelayIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayIPAddr.setStatus('mandatory')
sfpsTopologyServerTestTopRelayChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 8), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisMAC.setStatus('mandatory')
sfpsTopologyServerTestTopRelayChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisIP.setStatus('mandatory')
sfpsTopologyServerTestTopRelayFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayFLevel.setStatus('mandatory')
sfpsTopologyServerTestTopRelayTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTopologyAgent.setStatus('mandatory')
sfpsRestrictedMobilityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1), )
if mibBuilder.loadTexts: sfpsRestrictedMobilityTable.setStatus('mandatory')
sfpsRestrictedMobilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityHashIndex"))
if mibBuilder.loadTexts: sfpsRestrictedMobilityEntry.setStatus('mandatory')
sfpsRestrictedMobilityHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityHash.setStatus('mandatory')
sfpsRestrictedMobilityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityPort.setStatus('mandatory')
sfpsRestrictedMobilityHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityHashIndex.setStatus('mandatory')
sfpsRestrictedMobilitySrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilitySrcMac.setStatus('mandatory')
sfpsRestrictedMobilitySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 5), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilitySwitch.setStatus('mandatory')
sfpsRestrictedMobilityAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPIVerb.setStatus('mandatory')
sfpsRestrictedMobilityAPISourcePort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISourcePort.setStatus('mandatory')
sfpsRestrictedMobilityAPISrcMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 3), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISrcMac.setStatus('mandatory')
sfpsRestrictedMobilityAPISwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 4), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISwitch.setStatus('mandatory')
sfpsTopologyServerPortEventRelayLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayLogicalPort.setStatus('mandatory')
sfpsTopologyServerPortEventRelayOldState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAcces", 7), ("standBy", 8), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayOldState.setStatus('mandatory')
sfpsTopologyServerPortEventRelayNewState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAcces", 7), ("standBy", 8), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayNewState.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-TOPOLOGY-MIB", sfpsCommonNeighborNotifyState=sfpsCommonNeighborNotifyState, sfpsRATopAgentNeighborNetHelloNetPortLosses=sfpsRATopAgentNeighborNetHelloNetPortLosses, sfpsVLANTopAgentPortRecvFrequency=sfpsVLANTopAgentPortRecvFrequency, sfpsIncompatibleNeighborChassisIP=sfpsIncompatibleNeighborChassisIP, sfpsVLANTopAgentPortTableAPIInRecvFrequency=sfpsVLANTopAgentPortTableAPIInRecvFrequency, sfpsIncompatibleNeighborSwitchType=sfpsIncompatibleNeighborSwitchType, sfpsDirLockStatsViolationTblSize=sfpsDirLockStatsViolationTblSize, sfpsRestrictedMobilityAPISwitch=sfpsRestrictedMobilityAPISwitch, sfpsTopologyServerTestInServer=sfpsTopologyServerTestInServer, sfpsRATopAgentNeighborTable=sfpsRATopAgentNeighborTable, sfpsDirViolationHash=sfpsDirViolationHash, sfpsTPMPortCorePortVID=sfpsTPMPortCorePortVID, sfpsDirViolationDeltaAPIVerb=sfpsDirViolationDeltaAPIVerb, sfpsVMTopServerDeltaAgent=sfpsVMTopServerDeltaAgent, sfpsTPMPortMediaType=sfpsTPMPortMediaType, sfpsRestrictedMobilitySwitch=sfpsRestrictedMobilitySwitch, sfpsRATopAgentNeighborSwitchID=sfpsRATopAgentNeighborSwitchID, sfpsIncompatibleNeighborOptionsMask=sfpsIncompatibleNeighborOptionsMask, sfpsTopologyServerTestRelayNumber=sfpsTopologyServerTestRelayNumber, sfpsTPMPortTable=sfpsTPMPortTable, sfpsRATopAgentPortTableAPIOutPortStateChangeCount=sfpsRATopAgentPortTableAPIOutPortStateChangeCount, sfpsRATopAgentPortRecvFrequency=sfpsRATopAgentPortRecvFrequency, sfpsVMTopServerDeltaIPAddress=sfpsVMTopServerDeltaIPAddress, sfpsIncompatibleNeighborCommState=sfpsIncompatibleNeighborCommState, sfpsServiceCenterTopologyRequests=sfpsServiceCenterTopologyRequests, sfpsVLANTopAgentPortPort=sfpsVLANTopAgentPortPort, HexInteger=HexInteger, sfpsTopologyServerTestLostPort=sfpsTopologyServerTestLostPort, sfpsTopologyServerTestTopRelayChassisIP=sfpsTopologyServerTestTopRelayChassisIP, sfpsTopologyServerTestTopologyAgent=sfpsTopologyServerTestTopologyAgent, sfpsDirViolationAPIChangeCount=sfpsDirViolationAPIChangeCount, sfpsRATopAgentPortTableAPIOutHelloVersion=sfpsRATopAgentPortTableAPIOutHelloVersion, sfpsDirViolationAPICPId=sfpsDirViolationAPICPId, sfpsDirLockStatsNumRestrictedPort=sfpsDirLockStatsNumRestrictedPort, sfpsTopologyServerTestTopRelayEvent=sfpsTopologyServerTestTopRelayEvent, sfpsRestrictedPortTable=sfpsRestrictedPortTable, sfpsIncompatibleNeighborTwoWayLossTime=sfpsIncompatibleNeighborTwoWayLossTime, sfpsTAPITestOutOutPutString=sfpsTAPITestOutOutPutString, sfpsVLANTopAgentNeighborInPort=sfpsVLANTopAgentNeighborInPort, sfpsVLANTopAgentPortEntry=sfpsVLANTopAgentPortEntry, sfpsRATopAgentPortTableAPIInSendFrequency=sfpsRATopAgentPortTableAPIInSendFrequency, sfpsIncompatibleNeighborLastHeard=sfpsIncompatibleNeighborLastHeard, sfpsESPTopAgentPortHelloVersion=sfpsESPTopAgentPortHelloVersion, sfpsRestrictedPortHash=sfpsRestrictedPortHash, sfpsRestrictedMobilityPort=sfpsRestrictedMobilityPort, sfpsCommonNeighborCompatibility=sfpsCommonNeighborCompatibility, sfpsCommonNeighborLastHeard=sfpsCommonNeighborLastHeard, sfpsTopologyServerTestOldState=sfpsTopologyServerTestOldState, sfpsVMTopServerDeltaInPort=sfpsVMTopServerDeltaInPort, sfpsRATopAgentPortPortState=sfpsRATopAgentPortPortState, sfpsTPMPortVlanAttributes=sfpsTPMPortVlanAttributes, sfpsCommonNeighborRcvdPortState=sfpsCommonNeighborRcvdPortState, sfpsTPMPortNVRAMStatus=sfpsTPMPortNVRAMStatus, sfpsVLANTopAgentNeighborTable=sfpsVLANTopAgentNeighborTable, sfpsIncompatibleNeighborLogicalPort=sfpsIncompatibleNeighborLogicalPort, sfpsIncompatibleNeighborTopologyAgent=sfpsIncompatibleNeighborTopologyAgent, sfpsRATopAgentNeighborNetHelloNetPortChanges=sfpsRATopAgentNeighborNetHelloNetPortChanges, sfpsHistoryTopologyServerChassisIP=sfpsHistoryTopologyServerChassisIP, sfpsVMTopServerChangeCnt=sfpsVMTopServerChangeCnt, SfpsAddress=SfpsAddress, sfpsRestrictedMobilityEntry=sfpsRestrictedMobilityEntry, sfpsIncompatibleNeighborSeqNumLossTime=sfpsIncompatibleNeighborSeqNumLossTime, sfpsTopologyServerTestTopRelayFLevel=sfpsTopologyServerTestTopRelayFLevel, sfpsTopologyServerTestTopRelayTable=sfpsTopologyServerTestTopRelayTable, sfpsDapiNvramStatsNvramUsed=sfpsDapiNvramStatsNvramUsed, sfpsVLANTopAgentPortPortOptions=sfpsVLANTopAgentPortPortOptions, sfpsVLANTopAgentPortTableAPIInHelloVersion=sfpsVLANTopAgentPortTableAPIInHelloVersion, sfpsTopologyFCLFunctionalLevel=sfpsTopologyFCLFunctionalLevel, sfpsDirViolationHashIndex=sfpsDirViolationHashIndex, sfpsDirLockConfigRestrictedPort=sfpsDirLockConfigRestrictedPort, sfpsRestrictedMobilityHashIndex=sfpsRestrictedMobilityHashIndex, sfpsServiceCenterTopologyName=sfpsServiceCenterTopologyName, sfpsDirViolationDeltaEntry=sfpsDirViolationDeltaEntry, sfpsRATopAgentPortTableAPIInVerb=sfpsRATopAgentPortTableAPIInVerb, sfpsRATopAgentPortTableAPIOutSendFrequency=sfpsRATopAgentPortTableAPIOutSendFrequency, sfpsDirViolationDeltaAOType=sfpsDirViolationDeltaAOType, sfpsTopologyServerTestServerFlavor=sfpsTopologyServerTestServerFlavor, sfpsVMTopServerDeltaTable=sfpsVMTopServerDeltaTable, sfpsIncompatibleNeighborTable=sfpsIncompatibleNeighborTable, sfpsCommonNeighborFirstHeard=sfpsCommonNeighborFirstHeard, sfpsCommonNeighborTable=sfpsCommonNeighborTable, sfpsCommonNeighborChassisMAC=sfpsCommonNeighborChassisMAC, sfpsRATopAgentPortNetHelloRecvFreq=sfpsRATopAgentPortNetHelloRecvFreq, sfpsHistoryTopologyServerChassisMAC=sfpsHistoryTopologyServerChassisMAC, sfpsRestrictedPortSrcMac=sfpsRestrictedPortSrcMac, sfpsIncompatibleNeighborSeqNumLossCount=sfpsIncompatibleNeighborSeqNumLossCount, sfpsRATopAgentPortTableAPIInRecvFrequency=sfpsRATopAgentPortTableAPIInRecvFrequency, sfpsIncompatibleNeighborHellosReceived=sfpsIncompatibleNeighborHellosReceived, sfpsTopologyFCLEntry=sfpsTopologyFCLEntry, sfpsTPMPortTableAPIInLogicalPort=sfpsTPMPortTableAPIInLogicalPort, sfpsCommonNeighborFalseAgingCount=sfpsCommonNeighborFalseAgingCount, sfpsRATopAgentNeighborEntry=sfpsRATopAgentNeighborEntry, sfpsRATopAgentNeighborNetworkPort=sfpsRATopAgentNeighborNetworkPort, sfpsVMTopServerDeltaCount=sfpsVMTopServerDeltaCount, sfpsVLANTopAgentPortHelloVersion=sfpsVLANTopAgentPortHelloVersion, sfpsVLANTopAgentPortTableAPIInVerb=sfpsVLANTopAgentPortTableAPIInVerb, sfpsCommonNeighborEntry=sfpsCommonNeighborEntry, sfpsDirLockConfigRouterPortLock=sfpsDirLockConfigRouterPortLock, sfpsHistoryTopologyServerCurrentOptionsMask=sfpsHistoryTopologyServerCurrentOptionsMask, sfpsCommonNeighborFCL=sfpsCommonNeighborFCL, sfpsCommonNeighborSendPortState=sfpsCommonNeighborSendPortState, sfpsRATopAgentNeighborNetHellosRcvd=sfpsRATopAgentNeighborNetHellosRcvd, sfpsDirViolationSrcMac=sfpsDirViolationSrcMac, sfpsHistoryTopologyServerSwitchID=sfpsHistoryTopologyServerSwitchID, sfpsTopologyServerTestIpAddr=sfpsTopologyServerTestIpAddr, sfpsIncompatibleNeighborCompatibility=sfpsIncompatibleNeighborCompatibility, sfpsTopologyServerTestTopRelayTopologyAgent=sfpsTopologyServerTestTopRelayTopologyAgent, sfpsDirLockStatsRestrictMobTblSize=sfpsDirLockStatsRestrictMobTblSize, sfpsDirViolationCPId=sfpsDirViolationCPId, sfpsDapiNvramStatsMacEntries=sfpsDapiNvramStatsMacEntries, sfpsIncompatibleNeighborFalseAgingCount=sfpsIncompatibleNeighborFalseAgingCount, sfpsDapiNvramStatsMaxEntries=sfpsDapiNvramStatsMaxEntries, sfpsTopologyServerTestTopRelayEntry=sfpsTopologyServerTestTopRelayEntry, sfpsTPMPortTableAPIInVerb=sfpsTPMPortTableAPIInVerb, sfpsServiceCenterTopologyEntry=sfpsServiceCenterTopologyEntry, sfpsServiceCenterTopologyStatusTime=sfpsServiceCenterTopologyStatusTime, sfpsTPMPortTableAPIInTopologyAgent=sfpsTPMPortTableAPIInTopologyAgent, sfpsDirViolationAPIViolType=sfpsDirViolationAPIViolType, sfpsCommonNeighborHellosReceived=sfpsCommonNeighborHellosReceived, sfpsIncompatibleNeighborSwitchMAC=sfpsIncompatibleNeighborSwitchMAC, sfpsServiceCenterTopologyAdminStatus=sfpsServiceCenterTopologyAdminStatus, sfpsIncompatibleNeighborEntry=sfpsIncompatibleNeighborEntry, sfpsVMTopServerDeltaIndex=sfpsVMTopServerDeltaIndex, sfpsVLANTopAgentPortTable=sfpsVLANTopAgentPortTable, sfpsServiceCenterTopologyHashLeaf=sfpsServiceCenterTopologyHashLeaf, sfpsRATopAgentPortTableAPIOutRecvFrequency=sfpsRATopAgentPortTableAPIOutRecvFrequency, sfpsTopologyFCLCompatability=sfpsTopologyFCLCompatability, sfpsDirViolationAOValue=sfpsDirViolationAOValue, sfpsHistoryTopologyServerFCL=sfpsHistoryTopologyServerFCL, sfpsDirLockConfigUserLocking=sfpsDirLockConfigUserLocking, sfpsESPTopAgentPortSendFrequency=sfpsESPTopAgentPortSendFrequency, sfpsCommonNeighborReceiveFrequency=sfpsCommonNeighborReceiveFrequency, sfpsHistoryTopologyServerSysTime=sfpsHistoryTopologyServerSysTime, sfpsVLANTopAgentNeighborSwitchID=sfpsVLANTopAgentNeighborSwitchID, sfpsCommonNeighborSeqNumLossCount=sfpsCommonNeighborSeqNumLossCount, sfpsTAPITestInTopologyAgentID=sfpsTAPITestInTopologyAgentID, sfpsRATopAgentPortNVRAMStatus=sfpsRATopAgentPortNVRAMStatus, sfpsDirLockStatsNumRestrictMob=sfpsDirLockStatsNumRestrictMob, sfpsDirLockConfigRAPortLock=sfpsDirLockConfigRAPortLock, sfpsTAPITestInPortTypeState=sfpsTAPITestInPortTypeState, sfpsDapiNvramStatsVerb=sfpsDapiNvramStatsVerb, sfpsRestrictedMobilityAPIVerb=sfpsRestrictedMobilityAPIVerb, sfpsNeighborEventsFoundEvents=sfpsNeighborEventsFoundEvents, sfpsTopologyFCLThisPortState=sfpsTopologyFCLThisPortState, sfpsRATopAgentNeighborCallTag=sfpsRATopAgentNeighborCallTag, sfpsDirViolationDeltaEntryType=sfpsDirViolationDeltaEntryType, sfpsDirViolationAPIVerb=sfpsDirViolationAPIVerb, sfpsDirViolationLastSeen=sfpsDirViolationLastSeen, sfpsDirViolationSrcPort=sfpsDirViolationSrcPort, sfpsESPTopAgentPortEntry=sfpsESPTopAgentPortEntry, sfpsDirLockStatsNumAliasLocked=sfpsDirLockStatsNumAliasLocked, sfpsRATopAgentPortTableAPIInHelloVersion=sfpsRATopAgentPortTableAPIInHelloVersion, sfpsServiceCenterTopologyMetric=sfpsServiceCenterTopologyMetric, sfpsCommonNeighborCommState=sfpsCommonNeighborCommState, sfpsTAPITestInUNIT321=sfpsTAPITestInUNIT321, sfpsRATopAgentPortEntry=sfpsRATopAgentPortEntry, sfpsServiceCenterTopologyResponses=sfpsServiceCenterTopologyResponses, sfpsTAPITestInMAC=sfpsTAPITestInMAC, sfpsHistoryTopologyServerEntry=sfpsHistoryTopologyServerEntry, sfpsTopologyServerPortEventRelayNewState=sfpsTopologyServerPortEventRelayNewState, sfpsRestrictedPortHashIndex=sfpsRestrictedPortHashIndex, sfpsRATopAgentPortStateChangeCount=sfpsRATopAgentPortStateChangeCount, sfpsIncompatibleNeighborFalseAgingTime=sfpsIncompatibleNeighborFalseAgingTime, sfpsTPMPortTableAPIOutLogicalPort=sfpsTPMPortTableAPIOutLogicalPort, sfpsTPMPortEntry=sfpsTPMPortEntry, sfpsTPMPortTopologyAgent=sfpsTPMPortTopologyAgent, sfpsTopologyServerTestInNumberOfRelays=sfpsTopologyServerTestInNumberOfRelays, sfpsTopologyServerTestTable=sfpsTopologyServerTestTable, sfpsRATopAgentPortPrimarySwitch=sfpsRATopAgentPortPrimarySwitch, sfpsRestrictedMobilityHash=sfpsRestrictedMobilityHash, sfpsDirViolationFirstSeen=sfpsDirViolationFirstSeen, sfpsTAPITestInLogicalPort=sfpsTAPITestInLogicalPort, sfpsDirLockStatsRestrictPortTblSize=sfpsDirLockStatsRestrictPortTblSize, sfpsTopologyServerTestTopRelayIPAddr=sfpsTopologyServerTestTopRelayIPAddr, sfpsDapiNvramStatsAliasEntries=sfpsDapiNvramStatsAliasEntries, sfpsRATopAgentPortTableAPIInPriority=sfpsRATopAgentPortTableAPIInPriority, sfpsVLANTopAgentPortSendFrequency=sfpsVLANTopAgentPortSendFrequency, sfpsDirViolationType=sfpsDirViolationType, sfpsTopologyServerTestTopRelayChassisMAC=sfpsTopologyServerTestTopRelayChassisMAC, sfpsTopologyServerTestTopRelayPortName=sfpsTopologyServerTestTopRelayPortName, sfpsTPMPortTableAPIInAdminPortUp=sfpsTPMPortTableAPIInAdminPortUp, sfpsDirViolationAPIAOValue=sfpsDirViolationAPIAOValue, sfpsCommonNeighborOptionsMask=sfpsCommonNeighborOptionsMask, sfpsVLANTopAgentPortTableAPIInSendFrequency=sfpsVLANTopAgentPortTableAPIInSendFrequency, sfpsDirViolationDeltaAOValue=sfpsDirViolationDeltaAOValue, sfpsIncompatibleNeighborFCL=sfpsIncompatibleNeighborFCL, sfpsTopologyServerPortEventRelayLogicalPort=sfpsTopologyServerPortEventRelayLogicalPort, sfpsVMTopServerPortChange=sfpsVMTopServerPortChange, sfpsVLANTopAgentPortTableAPIInLogicalPort=sfpsVLANTopAgentPortTableAPIInLogicalPort, sfpsTAPITestInSwitchID=sfpsTAPITestInSwitchID, sfpsTopologyServerTestNewState=sfpsTopologyServerTestNewState, sfpsIncompatibleNeighborTwoWayLossCount=sfpsIncompatibleNeighborTwoWayLossCount, sfpsRATopAgentPortTableAPIOutLogicalPort=sfpsRATopAgentPortTableAPIOutLogicalPort, sfpsVLANTopAgentPortNVRAMStatus=sfpsVLANTopAgentPortNVRAMStatus, sfpsVMTopServerTableFull=sfpsVMTopServerTableFull, sfpsRATopAgentPortTableAPIOutPriority=sfpsRATopAgentPortTableAPIOutPriority, sfpsIncompatibleNeighborRemotePortState=sfpsIncompatibleNeighborRemotePortState, sfpsDirViolationTable=sfpsDirViolationTable, sfpsDirViolationAPIAOType=sfpsDirViolationAPIAOType, sfpsRATopAgentNeighborInPort=sfpsRATopAgentNeighborInPort, sfpsCommonNeighborSeqNumLossTime=sfpsCommonNeighborSeqNumLossTime, sfpsRestrictedMobilityTable=sfpsRestrictedMobilityTable, sfpsIncompatibleNeighborFirstHeard=sfpsIncompatibleNeighborFirstHeard, sfpsDirLockStatsNumViolators=sfpsDirLockStatsNumViolators, sfpsHistoryTopologyServerEvent=sfpsHistoryTopologyServerEvent, sfpsIncompatibleNeighborNotifyState=sfpsIncompatibleNeighborNotifyState, sfpsHistoryTopologyServerTable=sfpsHistoryTopologyServerTable, sfpsDirViolationLocalPort=sfpsDirViolationLocalPort, sfpsVLANTopAgentNeighborOptions=sfpsVLANTopAgentNeighborOptions, sfpsServiceCenterTopologyOperStatus=sfpsServiceCenterTopologyOperStatus, sfpsDapiNvramStatsTotalEntries=sfpsDapiNvramStatsTotalEntries, sfpsTopologyServerTestTopRelayDeltaOptions=sfpsTopologyServerTestTopRelayDeltaOptions, sfpsVMTopServerDeltaEntry=sfpsVMTopServerDeltaEntry, sfpsVLANTopAgentNeighborEntry=sfpsVLANTopAgentNeighborEntry, sfpsCommonNeighborSwitchMAC=sfpsCommonNeighborSwitchMAC, sfpsCommonNeighborSwitchType=sfpsCommonNeighborSwitchType, sfpsTopologyServerTestInVerb=sfpsTopologyServerTestInVerb, sfpsRATopAgentPortLogicalPort=sfpsRATopAgentPortLogicalPort, sfpsHistoryTopologyServerSwitchIP=sfpsHistoryTopologyServerSwitchIP, sfpsRestrictedMobilitySrcMac=sfpsRestrictedMobilitySrcMac, sfpsRATopAgentPortPriority=sfpsRATopAgentPortPriority, sfpsDirViolationEntry=sfpsDirViolationEntry, sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq=sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq, sfpsHistoryTopologyServerAgent=sfpsHistoryTopologyServerAgent, sfpsRATopAgentPortTableAPIOutPrimarySwitch=sfpsRATopAgentPortTableAPIOutPrimarySwitch, sfpsCommonNeighborSwitchIP=sfpsCommonNeighborSwitchIP, sfpsRATopAgentPortHelloVersion=sfpsRATopAgentPortHelloVersion, sfpsRestrictedPortEntry=sfpsRestrictedPortEntry, sfpsESPTopAgentPortTable=sfpsESPTopAgentPortTable, sfpsDirLockStatsNumNodeLocked=sfpsDirLockStatsNumNodeLocked, sfpsCommonNeighborLogicalPort=sfpsCommonNeighborLogicalPort, sfpsCommonNeighborTwoWayLossTime=sfpsCommonNeighborTwoWayLossTime, sfpsRATopAgentPortSendFrequency=sfpsRATopAgentPortSendFrequency, sfpsDirViolationCount=sfpsDirViolationCount, sfpsDirViolationAPISourcePort=sfpsDirViolationAPISourcePort, sfpsTopologyFCLTable=sfpsTopologyFCLTable, sfpsVMTopServerTableLock=sfpsVMTopServerTableLock, sfpsRATopAgentPortTable=sfpsRATopAgentPortTable, sfpsTPMPortTableAPIOutTopologyAgent=sfpsTPMPortTableAPIOutTopologyAgent, sfpsESPTopAgentPortRecvFrequency=sfpsESPTopAgentPortRecvFrequency, sfpsTPMPortLogicalPort=sfpsTPMPortLogicalPort, sfpsCommonNeighborTwoWayLossCount=sfpsCommonNeighborTwoWayLossCount, sfpsRestrictedMobilityAPISrcMac=sfpsRestrictedMobilityAPISrcMac, sfpsRATopAgentNeighborPriority=sfpsRATopAgentNeighborPriority, sfpsRATopAgentNeighborSeqNumMismatch=sfpsRATopAgentNeighborSeqNumMismatch, sfpsTopologyServerTestEntry=sfpsTopologyServerTestEntry, sfpsDirViolationDeltaAPINumEntries=sfpsDirViolationDeltaAPINumEntries, sfpsCommonNeighborTopologyAgent=sfpsCommonNeighborTopologyAgent, sfpsCommonNeighborCorePortVID=sfpsCommonNeighborCorePortVID, sfpsHistoryTopologyServerIndex=sfpsHistoryTopologyServerIndex, sfpsTopologyServerTestTopRelayCurrentOptions=sfpsTopologyServerTestTopRelayCurrentOptions, sfpsCommonNeighborFalseAgingTime=sfpsCommonNeighborFalseAgingTime, sfpsIncompatibleNeighborLocalPortState=sfpsIncompatibleNeighborLocalPortState, sfpsTopologyFCLSendPortState=sfpsTopologyFCLSendPortState)
mibBuilder.exportSymbols("CTRON-SFPS-TOPOLOGY-MIB", sfpsHistoryTopologyServerLogicalPort=sfpsHistoryTopologyServerLogicalPort, sfpsRATopAgentNeighborNetHelloAgeTimeOuts=sfpsRATopAgentNeighborNetHelloAgeTimeOuts, sfpsDirViolationDeltaTable=sfpsDirViolationDeltaTable, sfpsDirViolationDeltaSrcPort=sfpsDirViolationDeltaSrcPort, sfpsNeighborEventsLostEvents=sfpsNeighborEventsLostEvents, sfpsVMTopServerDeltaSwitchID=sfpsVMTopServerDeltaSwitchID, sfpsCommonNeighborSwitchID=sfpsCommonNeighborSwitchID, sfpsESPTopAgentPortPort=sfpsESPTopAgentPortPort, sfpsTopologyServerTestTopRelayLogicalPort=sfpsTopologyServerTestTopRelayLogicalPort, sfpsTopologyServerTestPortNumber=sfpsTopologyServerTestPortNumber, sfpsTAPITestOutOutputInteger=sfpsTAPITestOutOutputInteger, sfpsDirViolationDeltaIndex=sfpsDirViolationDeltaIndex, sfpsTPMPortTableAPIInCorePortVID=sfpsTPMPortTableAPIInCorePortVID, sfpsRATopAgentPortTableAPIInLogicalPort=sfpsRATopAgentPortTableAPIInLogicalPort, sfpsRestrictedMobilityAPISourcePort=sfpsRestrictedMobilityAPISourcePort, sfpsIncompatibleNeighborReceiveFrequency=sfpsIncompatibleNeighborReceiveFrequency, sfpsIncompatibleNeighborSwitchIP=sfpsIncompatibleNeighborSwitchIP, sfpsIncompatibleNeighborChassisMAC=sfpsIncompatibleNeighborChassisMAC, sfpsTopologyServerTestPortName=sfpsTopologyServerTestPortName, sfpsTAPITestInVerb=sfpsTAPITestInVerb, sfpsTopologyServerTestTopRelayRelayNumber=sfpsTopologyServerTestTopRelayRelayNumber, sfpsTPMPortTableAPIInAdminPortDown=sfpsTPMPortTableAPIInAdminPortDown, sfpsCommonNeighborChassisIP=sfpsCommonNeighborChassisIP, sfpsRATopAgentPortTableAPIOutPortState=sfpsRATopAgentPortTableAPIOutPortState, sfpsHistoryTopologyServerDeltaOptionsMask=sfpsHistoryTopologyServerDeltaOptionsMask, sfpsRATopAgentPortTableAPIInNetHelloRecvFreq=sfpsRATopAgentPortTableAPIInNetHelloRecvFreq, sfpsVMTopServerDeltaState=sfpsVMTopServerDeltaState, sfpsTopologyServerPortEventRelayOldState=sfpsTopologyServerPortEventRelayOldState, sfpsRestrictedPortPort=sfpsRestrictedPortPort, sfpsDirViolationAOType=sfpsDirViolationAOType, sfpsServiceCenterTopologyTable=sfpsServiceCenterTopologyTable, sfpsIncompatibleNeighborSwitchID=sfpsIncompatibleNeighborSwitchID)
