#
# PySNMP MIB module SL-TESTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-TESTS-MIB
# Produced by pysmi-1.1.11 at Wed Apr  3 13:48:31 2024
# On host fv-az1499-203 platform Linux version 6.5.0-1016-azure by user runner
# Using Python version 3.10.14 (main, Mar 20 2024, 15:15:25) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
slMain, = mibBuilder.importSymbols("SL-MAIN-MIB", "slMain")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Counter64, ObjectIdentity, Unsigned32, iso, NotificationType, Bits, Counter32, Integer32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "NotificationType", "Bits", "Counter32", "Integer32", "IpAddress", "ModuleIdentity")
TextualConvention, DisplayString, TimeStamp, DateAndTime, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "DateAndTime", "RowStatus", "TruthValue")
slTests = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13))
if mibBuilder.loadTexts: slTests.setLastUpdated('200101180000Z')
if mibBuilder.loadTexts: slTests.setOrganization('PacketLight Networks Ltd.')
slTestsIfLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1))
slTestsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 2))
slTestsTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 2, 0))
slTestsIfLoopTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1), )
if mibBuilder.loadTexts: slTestsIfLoopTable.setStatus('current')
slTestsIfLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1), ).setIndexNames((0, "SL-TESTS-MIB", "slTestsIfLoopIfIndex"))
if mibBuilder.loadTexts: slTestsIfLoopEntry.setStatus('current')
slTestsIfLoopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slTestsIfLoopIfIndex.setStatus('current')
slTestsIfLoopDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slTestsIfLoopDuration.setStatus('current')
slTestsIfLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("fail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slTestsIfLoopStatus.setStatus('current')
slTestsIfLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("terminal", 1), ("facility", 2), ("prbs", 3), ("otnPrbs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slTestsIfLoopType.setStatus('current')
slTestsIfLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("timeout", 1), ("toggle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slTestsIfLoopMode.setStatus('current')
slTestsIfLoopErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slTestsIfLoopErrors.setStatus('current')
slTestsIfLoopResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slTestsIfLoopResult.setStatus('current')
slTestsIfLoopPassedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slTestsIfLoopPassedSeconds.setStatus('current')
slTestsTrapsLoopbackActive = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slTestsTrapsLoopbackActive.setStatus('current')
slTestsTrapsLoopbackTableChanged = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 2, 2)).setObjects(("SL-TESTS-MIB", "slTestsIfLoopIfIndex"), ("SL-TESTS-MIB", "slTestsIfLoopType"), ("SL-TESTS-MIB", "slTestsTrapsLoopbackActive"))
if mibBuilder.loadTexts: slTestsTrapsLoopbackTableChanged.setStatus('current')
slTestsTrapsLoopbackTableChanged0 = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 3, 13, 2, 0, 2)).setObjects(("SL-TESTS-MIB", "slTestsIfLoopIfIndex"), ("SL-TESTS-MIB", "slTestsIfLoopType"), ("SL-TESTS-MIB", "slTestsTrapsLoopbackActive"))
if mibBuilder.loadTexts: slTestsTrapsLoopbackTableChanged0.setStatus('current')
mibBuilder.exportSymbols("SL-TESTS-MIB", slTestsIfLoopIfIndex=slTestsIfLoopIfIndex, slTestsTrapsLoopbackTableChanged0=slTestsTrapsLoopbackTableChanged0, slTestsTrapsLoopbackActive=slTestsTrapsLoopbackActive, slTestsTrapsLoopbackTableChanged=slTestsTrapsLoopbackTableChanged, PYSNMP_MODULE_ID=slTests, slTestsIfLoop=slTestsIfLoop, slTestsTraps=slTestsTraps, slTestsIfLoopDuration=slTestsIfLoopDuration, slTestsIfLoopStatus=slTestsIfLoopStatus, slTestsIfLoopEntry=slTestsIfLoopEntry, slTestsIfLoopTable=slTestsIfLoopTable, slTestsIfLoopResult=slTestsIfLoopResult, slTestsIfLoopMode=slTestsIfLoopMode, slTestsIfLoopType=slTestsIfLoopType, slTestsTraps0=slTestsTraps0, slTestsIfLoopErrors=slTestsIfLoopErrors, slTests=slTests, slTestsIfLoopPassedSeconds=slTestsIfLoopPassedSeconds)
