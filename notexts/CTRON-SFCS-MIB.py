#
# PySNMP MIB module CTRON-SFCS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFCS-MIB
# Produced by pysmi-1.1.8 at Thu Sep  7 09:16:12 2023
# On host fv-az1234-541 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.12 (main, Jun  7 2023, 13:43:11) [GCC 11.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
atmVcCrossConnectHighVpi, atmVcCrossConnectLowVci, atmVcCrossConnectLowVpi, atmVcCrossConnectHighVci, atmVcCrossConnectLowIfIndex, atmVcCrossConnectIndex, atmVcCrossConnectHighIfIndex = mibBuilder.importSymbols("ATM-MIB", "atmVcCrossConnectHighVpi", "atmVcCrossConnectLowVci", "atmVcCrossConnectLowVpi", "atmVcCrossConnectHighVci", "atmVcCrossConnectLowIfIndex", "atmVcCrossConnectIndex", "atmVcCrossConnectHighIfIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, ModuleIdentity, Gauge32, Counter64, Integer32, MibIdentifier, Bits, iso, Unsigned32, TimeTicks, ObjectIdentity, enterprises, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ModuleIdentity", "Gauge32", "Counter64", "Integer32", "MibIdentifier", "Bits", "iso", "Unsigned32", "TimeTicks", "ObjectIdentity", "enterprises", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctDataLink = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2))
ctSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11))
ctsfSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1))
ctSFCS = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1))
sfcsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1))
sfcsSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1))
sfcsSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2))
sfcsSysSystemCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3))
sfcsSysBPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4))
sfcsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2))
sfcsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1))
sfcsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2))
sfcsUPCEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3))
sfcsStatisticsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4))
sfcsPacketDiscardEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5))
sfcsANIM = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3))
sfcsANIMConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1))
sfcsANIMStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2))
sfcsANIMPic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3))
sfcsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4))
sfcsInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1))
sfcsInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2))
sfcsQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5))
sfcsQueueConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1))
sfcsQueueStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2))
sfcsConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7))
sfcsConnectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1))
sfcsConnectionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2))
sfcsConnectionError = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3))
sfcsConnectionAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 8))
sfcsCTM = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9))
sfcsCTMInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1))
sfcsCTMInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2))
sfcsCTMQueueConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3))
sfcsCTMQueueStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4))
sfcsBWMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12))
sfcsBwNims = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1))
sfcsBwPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2))
sfcsBwPortPools = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3))
sfcsBuffPools = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4))
sfcsProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13))
sfcsProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1))
sfcsProxyTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2))
sfcsProxyRead = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3))
sfcsSysConfigTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1))
sfcsSysConfigEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1))
sfcsSysConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigAdminStatus.setStatus('mandatory')
sfcsSysConfigOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigOperStatus.setStatus('mandatory')
sfcsSysConfigOperTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigOperTime.setStatus('mandatory')
sfcsSysConfigLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigLastChange.setStatus('mandatory')
sfcsSysConfigSwitchCapacity = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigSwitchCapacity.setStatus('mandatory')
sfcsSysConfigMaxCnxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxCnxEntries.setStatus('mandatory')
sfcsSysConfigMaxStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxStatEntries.setStatus('mandatory')
sfcsSysConfigMaxUpcEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigMaxUpcEntries.setStatus('mandatory')
sfcsSysConfigNumberANIMS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigNumberANIMS.setStatus('mandatory')
sfcsSysConfigInterfaceCapability = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigInterfaceCapability.setStatus('mandatory')
sfcsSysConfigTypeofSwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sfcellswitch", 2), ("sfpacketswitch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigTypeofSwitch.setStatus('mandatory')
sfcsSysConfigPolicingSupport = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigPolicingSupport.setStatus('mandatory')
sfcsSysConfigPnniNsapPrefix = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniNsapPrefix.setStatus('mandatory')
sfcsSysConfigPnniNodeLevel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniNodeLevel.setStatus('mandatory')
sfcsSysConfigPnniAddessingMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingMode.setStatus('mandatory')
sfcsSysConfigPnniAddessingAdmnStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPnniAddessingAdmnStatus.setStatus('mandatory')
sfcsSysConfigFMVer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigFMVer.setStatus('mandatory')
sfcsSysConfigCTMSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysConfigCTMSlotMask.setStatus('mandatory')
sfcsSysConfigMaxfreecva = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigMaxfreecva.setStatus('mandatory')
sfcsSysConfigUBR = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigUBR.setStatus('mandatory')
sfcsSysStatusTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1))
sfcsSysStatusEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1))
sfcsSysStatusTdmCellCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusTdmCellCount.setStatus('mandatory')
sfcsSysStatusTdmUtilization = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusTdmUtilization.setStatus('mandatory')
sfcsSysStatusCurrCnxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrCnxEntries.setStatus('mandatory')
sfcsSysStatusCurrUPCEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrUPCEntries.setStatus('mandatory')
sfcsSysStatusCurrStatsEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusCurrStatsEntries.setStatus('mandatory')
sfcsSysStatusAllocatedBw = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsSysStatusAllocatedBw.setStatus('mandatory')
sfcsSysSystemCfgTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1))
sfcsSysSystemCfgEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1))
sfcsSysConfigAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigAdminReset.setStatus('mandatory')
sfcsSysConfigATOMPersistance = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigATOMPersistance.setStatus('mandatory')
sfcsSysConfigVcSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigVcSize.setStatus('mandatory')
sfcsSysConfigPowerUpDiags = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysConfigPowerUpDiags.setStatus('mandatory')
sfcsSysBPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1))
sfcsSysBPEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1, 1))
sfcsSysBPClkSelect = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsSysBPClkSelect.setStatus('mandatory')
sfcsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: sfcsConfigTable.setStatus('mandatory')
sfcsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsConfigSlotIndex"))
if mibBuilder.loadTexts: sfcsConfigEntry.setStatus('mandatory')
sfcsConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSlotIndex.setStatus('mandatory')
sfcsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigAdminStatus.setStatus('mandatory')
sfcsConfigAdminReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigAdminReset.setStatus('mandatory')
sfcsConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigOperStatus.setStatus('mandatory')
sfcsConfigOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigOperTime.setStatus('mandatory')
sfcsConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigLastChange.setStatus('mandatory')
sfcsConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigVersion.setStatus('mandatory')
sfcsConfigMibRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMibRev.setStatus('mandatory')
sfcsConfigSwitchHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSwitchHostPort.setStatus('mandatory')
sfcsConfigHostCtrlATMAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigHostCtrlATMAddr.setStatus('mandatory')
sfcsConfigSwitchCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigSwitchCapacity.setStatus('mandatory')
sfcsConfigMaxCnxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxCnxEntries.setStatus('mandatory')
sfcsConfigMaxStatEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxStatEntries.setStatus('mandatory')
sfcsConfigMaxUpcEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigMaxUpcEntries.setStatus('mandatory')
sfcsConfigNumberANIMS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigNumberANIMS.setStatus('mandatory')
sfcsConfigBwCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsConfigBwCapability.setStatus('mandatory')
sfcsConfigMasterClock1Source = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock1Source.setStatus('mandatory')
sfcsConfigMasterClock2Source = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock2Source.setStatus('mandatory')
sfcsConfigMasterClock1Standby = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6), ("none", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock1Standby.setStatus('mandatory')
sfcsConfigMasterClock2Standby = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anim-one-clk", 1), ("anim-two-clk", 2), ("anim-three-clk", 3), ("anim-four-clk", 4), ("backplane-one", 5), ("backplane-two", 6), ("none", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsConfigMasterClock2Standby.setStatus('mandatory')
sfcsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: sfcsStatusTable.setStatus('mandatory')
sfcsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsStatusSlotIndex"))
if mibBuilder.loadTexts: sfcsStatusEntry.setStatus('mandatory')
sfcsStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusSlotIndex.setStatus('mandatory')
sfcsStatusTdmCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusTdmCellCount.setStatus('mandatory')
sfcsStatusTdmUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusTdmUtilization.setStatus('mandatory')
sfcsStatusCurrCnxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrCnxEntries.setStatus('mandatory')
sfcsStatusCurrUPCEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrUPCEntries.setStatus('mandatory')
sfcsStatusCurrStatsEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrStatsEntries.setStatus('mandatory')
sfcsStatusCurrCtmAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatusCurrCtmAgent.setStatus('mandatory')
sfcsUPCTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: sfcsUPCTable.setStatus('mandatory')
sfcsUPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsUPCSlotIndex"))
if mibBuilder.loadTexts: sfcsUPCEntry.setStatus('mandatory')
sfcsUPCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCSlotIndex.setStatus('mandatory')
sfcsUPCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsUPCAdminStatus.setStatus('mandatory')
sfcsUPCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCOperStatus.setStatus('mandatory')
sfcsUPCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsUPCReset.setStatus('mandatory')
sfcsUPCOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsUPCOperTime.setStatus('mandatory')
sfcsStatsEngineTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: sfcsStatsEngineTable.setStatus('mandatory')
sfcsStatsEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsStatsEngineSlotIndex"))
if mibBuilder.loadTexts: sfcsStatsEngineEntry.setStatus('mandatory')
sfcsStatsEngineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineSlotIndex.setStatus('mandatory')
sfcsStatsEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsStatsEngineAdminStatus.setStatus('mandatory')
sfcsStatsEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineOperStatus.setStatus('mandatory')
sfcsStatsEngineReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsStatsEngineReset.setStatus('mandatory')
sfcsStatsEngineOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 4, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsStatsEngineOperTime.setStatus('mandatory')
sfcsPacketDiscardEngineTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: sfcsPacketDiscardEngineTable.setStatus('mandatory')
sfcsPacketDiscardEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsPacketDiscardEngineSlotIndex"))
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEntry.setStatus('mandatory')
sfcsPacketDiscardEngineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineSlotIndex.setStatus('mandatory')
sfcsPacketDiscardEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineAdminStatus.setStatus('mandatory')
sfcsPacketDiscardEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperStatus.setStatus('mandatory')
sfcsPacketDiscardEngineReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineReset.setStatus('mandatory')
sfcsPacketDiscardEngineEPDPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineEPDPercentage.setStatus('mandatory')
sfcsPacketDiscardEngineOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 2, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsPacketDiscardEngineOperTime.setStatus('mandatory')
sfcsANIMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: sfcsANIMConfigTable.setStatus('mandatory')
sfcsANIMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMConfigANIMIndex"))
if mibBuilder.loadTexts: sfcsANIMConfigEntry.setStatus('mandatory')
sfcsANIMConfigANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigANIMIndex.setStatus('mandatory')
sfcsANIMConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigAdminStatus.setStatus('mandatory')
sfcsANIMConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigOperStatus.setStatus('mandatory')
sfcsANIMConfigANIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigANIMType.setStatus('mandatory')
sfcsANIMConfigNumInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigNumInterfaces.setStatus('mandatory')
sfcsANIMConfigLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMConfigLineRate.setStatus('mandatory')
sfcsANIMConfigToMB = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local-anim-clock", 1), ("port-one-clock", 2), ("port-two-clock", 3), ("port-three-clock", 4), ("port-four-clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigToMB.setStatus('mandatory')
sfcsANIMConfigMBClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master-clk-one", 1), ("master-clk-two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsANIMConfigMBClockSelect.setStatus('mandatory')
sfcsANIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: sfcsANIMStatsTable.setStatus('mandatory')
sfcsANIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMStatsANIMIndex"))
if mibBuilder.loadTexts: sfcsANIMStatsEntry.setStatus('mandatory')
sfcsANIMStatsANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsANIMIndex.setStatus('mandatory')
sfcsANIMStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsRxCells.setStatus('mandatory')
sfcsANIMStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMStatsTxCells.setStatus('mandatory')
sfcsANIMPicTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: sfcsANIMPicTable.setStatus('mandatory')
sfcsANIMPicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsANIMPicIndex"))
if mibBuilder.loadTexts: sfcsANIMPicEntry.setStatus('mandatory')
sfcsANIMPicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicSlot.setStatus('mandatory')
sfcsANIMPicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicIndex.setStatus('mandatory')
sfcsANIMPicLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicLocation.setStatus('mandatory')
sfcsANIMPicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("notPresent", 3), ("checkSum", 4), ("error", 5), ("limited", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicStatus.setStatus('mandatory')
sfcsANIMPicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicVersion.setStatus('mandatory')
sfcsANIMPicModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicModuleType.setStatus('mandatory')
sfcsANIMPicMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgPN.setStatus('mandatory')
sfcsANIMPicMfgSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgSN.setStatus('mandatory')
sfcsANIMPicMfgPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgPartNumb.setStatus('mandatory')
sfcsANIMPicMfgSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgSerialNumb.setStatus('mandatory')
sfcsANIMPicMfgReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgReworkLocation.setStatus('mandatory')
sfcsANIMPicMfgMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgMfgLocation.setStatus('mandatory')
sfcsANIMPicMfgDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgDateCode.setStatus('mandatory')
sfcsANIMPicMfgRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMfgRevisionCode.setStatus('mandatory')
sfcsANIMPicTLPN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPN.setStatus('mandatory')
sfcsANIMPicTLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLSN.setStatus('mandatory')
sfcsANIMPicTLPartNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPartNumb.setStatus('mandatory')
sfcsANIMPicTLSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLSerialNumb.setStatus('mandatory')
sfcsANIMPicTLReworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLReworkLocation.setStatus('mandatory')
sfcsANIMPicTLMfgLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLMfgLocation.setStatus('mandatory')
sfcsANIMPicTLDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLDateCode.setStatus('mandatory')
sfcsANIMPicTLRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLRevisionCode.setStatus('mandatory')
sfcsANIMPicTLPcbRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicTLPcbRevision.setStatus('mandatory')
sfcsANIMPicMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicMacAddr.setStatus('mandatory')
sfcsANIMPicNumbRsvdAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicNumbRsvdAddrs.setStatus('mandatory')
sfcsANIMPicBoardLevelRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicBoardLevelRevision.setStatus('mandatory')
sfcsANIMPicModuleTypeString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicModuleTypeString.setStatus('mandatory')
sfcsANIMPicDcDcConverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterType.setStatus('mandatory')
sfcsANIMPicDcDcConverterInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicDcDcConverterInputPower.setStatus('mandatory')
sfcsANIMPicSmb1PromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 3, 3, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsANIMPicSmb1PromVersion.setStatus('mandatory')
sfcsInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: sfcsInterfaceConfigTable.setStatus('mandatory')
sfcsInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsInterfaceConfigInterfaceIndex"))
if mibBuilder.loadTexts: sfcsInterfaceConfigEntry.setStatus('mandatory')
sfcsInterfaceConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigInterfaceIndex.setStatus('mandatory')
sfcsInterfaceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("access-port", 2), ("network-port", 3), ("host-mgmt-port", 4), ("host-ctl-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigType.setStatus('deprecated')
sfcsInterfacePeakBufferUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfacePeakBufferUseage.setStatus('mandatory')
sfcsInterfaceConfigNumberOfQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigNumberOfQueues.setStatus('mandatory')
sfcsInterfaceConfigSigStackID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceConfigSigStackID.setStatus('mandatory')
sfcsInterfaceConfigClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-anim-clock", 1), ("mother-board-master-clock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsInterfaceConfigClockingSource.setStatus('mandatory')
sfcsInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: sfcsInterfaceStatsTable.setStatus('mandatory')
sfcsInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsInterfaceStatsInterfaceIndex"))
if mibBuilder.loadTexts: sfcsInterfaceStatsEntry.setStatus('mandatory')
sfcsInterfaceStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsInterfaceIndex.setStatus('mandatory')
sfcsInterfaceStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxErrors.setStatus('mandatory')
sfcsInterfaceStatsVPILookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsVPILookupInvalidErrors.setStatus('mandatory')
sfcsInterfaceStatsRxCnxLookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCnxLookupInvalidErrors.setStatus('mandatory')
sfcsInterfaceStatsRxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsRxCellCnt.setStatus('mandatory')
sfcsInterfaceStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsTxCellCnt.setStatus('mandatory')
sfcsInterfaceStatsOverflowDropCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 4, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsInterfaceStatsOverflowDropCellCnt.setStatus('mandatory')
sfcsQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: sfcsQueueConfigTable.setStatus('mandatory')
sfcsQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsQueueConfigInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueConfigQueueIndex"))
if mibBuilder.loadTexts: sfcsQueueConfigEntry.setStatus('mandatory')
sfcsQueueConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigInterfaceIndex.setStatus('mandatory')
sfcsQueueConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueIndex.setStatus('mandatory')
sfcsQueueConfigQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueSize.setStatus('mandatory')
sfcsQueueConfigQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueConfigQueueBandwidth.setStatus('mandatory')
sfcsQueueConfigClpDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigClpDropThreshold.setStatus('mandatory')
sfcsQueueConfigCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigCongestionThreshold.setStatus('mandatory')
sfcsQueueConfigEFCILowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigEFCILowThreshold.setStatus('mandatory')
sfcsQueueConfigRMThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigRMThreshold.setStatus('mandatory')
sfcsQueueConfigEPDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsQueueConfigEPDThreshold.setStatus('mandatory')
sfcsQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: sfcsQueueStatsTable.setStatus('mandatory')
sfcsQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsQueueStatsInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueStatsQueue"))
if mibBuilder.loadTexts: sfcsQueueStatsEntry.setStatus('mandatory')
sfcsQueueStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsInterfaceIndex.setStatus('mandatory')
sfcsQueueStatsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsQueue.setStatus('mandatory')
sfcsQueueStatsTxClpCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxClpCellsDiscarded.setStatus('mandatory')
sfcsQueueStatsTxCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxCellsDropped.setStatus('mandatory')
sfcsQueueStatsQueuePeakLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsQueuePeakLevel.setStatus('mandatory')
sfcsQueueStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 5, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsQueueStatsTxCellCnt.setStatus('mandatory')
sfcsCnxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1), )
if mibBuilder.loadTexts: sfcsCnxCfgTable.setStatus('mandatory')
sfcsCnxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectLowVci"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxCfgCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxCfgEntry.setStatus('mandatory')
sfcsCnxCfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectIndex.setStatus('mandatory')
sfcsCnxCfgCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowIfIndex.setStatus('mandatory')
sfcsCnxCfgCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVpi.setStatus('mandatory')
sfcsCnxCfgCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectLowVci.setStatus('mandatory')
sfcsCnxCfgCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighIfIndex.setStatus('mandatory')
sfcsCnxCfgCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVpi.setStatus('mandatory')
sfcsCnxCfgCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgCrossConnectHighVci.setStatus('mandatory')
sfcsCnxCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("point-to-point-vpl", 1), ("point-to-mpoint-vpl", 2), ("mpoint-to-mpoint-vpl", 3), ("point-to-point-vcl", 4), ("point-to-mpoint-vcl", 5), ("mpoint-to-mpoint-vcl", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgType.setStatus('mandatory')
sfcsCnxCfgTmType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("efci", 2), ("er", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgTmType.setStatus('mandatory')
sfcsCnxCfgUPCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l-h-upc-enabled", 1), ("l-h-tag-enabled", 2), ("l-h-upc-tag-enabled", 3), ("h-l-upc-enabled", 4), ("l-h-upc-and-h-l-upc-enabled", 5), ("l-h-Tag-and-h-l-upc-enabled", 6), ("l-h-upc-tag-and-h-l-upc-enabled", 7), ("h-l-tag-enabled", 8), ("l-h-upc-and-h-l-tag-enabled", 9), ("l-h-tag-and-h-l-tag-enabled", 10), ("l-h-upc-tag-and-h-l-tag-enabled", 11), ("h-l-upc-tag-enabled", 12), ("l-h-upc-and-h-l-upc-tag-enabled", 13), ("l-h-tag-and-h-l-upc-tag-enabled", 14), ("l-h-upc-tag-and-h-l-upc-tag-enabled", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgUPCEnable.setStatus('mandatory')
sfcsCnxCfgStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgStatsEnable.setStatus('mandatory')
sfcsCnxCfgStatsTableCounterSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("thirtytwobittagcounter", 1), ("thirtytwobitdropcounter", 2), ("sixteenbiteachcounter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgStatsTableCounterSizes.setStatus('mandatory')
sfcsCnxCfgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("own", 2), ("dontown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxCfgOwner.setStatus('mandatory')
sfcsCnxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1), )
if mibBuilder.loadTexts: sfcsCnxStatsTable.setStatus('mandatory')
sfcsCnxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectLowVci"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighIfIndex"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighVpi"), (0, "CTRON-SFCS-MIB", "sfcsCnxStatsCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxStatsEntry.setStatus('mandatory')
sfcsCnxStatsCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectIndex.setStatus('mandatory')
sfcsCnxStatsCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowIfIndex.setStatus('mandatory')
sfcsCnxStatsCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVpi.setStatus('mandatory')
sfcsCnxStatsCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectLowVci.setStatus('mandatory')
sfcsCnxStatsCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighIfIndex.setStatus('mandatory')
sfcsCnxStatsCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVpi.setStatus('mandatory')
sfcsCnxStatsCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsCrossConnectHighVci.setStatus('mandatory')
sfcsCnxStatsLoToHiHTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiHTxCells.setStatus('mandatory')
sfcsCnxStatsLoToHiDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiDroppedCells.setStatus('mandatory')
sfcsCnxStatsLoToHiTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsLoToHiTaggedCells.setStatus('mandatory')
sfcsCnxStatsHiToLoHTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoHTxCells.setStatus('mandatory')
sfcsCnxStatsHiToLoDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoDroppedCells.setStatus('mandatory')
sfcsCnxStatsHiToLoTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxStatsHiToLoTaggedCells.setStatus('mandatory')
sfcsCnxErrorTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1), )
if mibBuilder.loadTexts: sfcsCnxErrorTable.setStatus('mandatory')
sfcsCnxErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1), ).setIndexNames((0, "ATM-MIB", "atmVcCrossConnectIndex"), (0, "ATM-MIB", "atmVcCrossConnectLowIfIndex"), (0, "ATM-MIB", "atmVcCrossConnectLowVpi"), (0, "ATM-MIB", "atmVcCrossConnectLowVci"), (0, "ATM-MIB", "atmVcCrossConnectHighIfIndex"), (0, "ATM-MIB", "atmVcCrossConnectHighVpi"), (0, "ATM-MIB", "atmVcCrossConnectHighVci"))
if mibBuilder.loadTexts: sfcsCnxErrorEntry.setStatus('mandatory')
sfcsCnxErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxErrorCode.setStatus('mandatory')
sfcsCnxErrorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxErrorTimeStamp.setStatus('mandatory')
sfcsCnxErrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCnxErrorRowStatus.setStatus('mandatory')
sfcsCnxAPIEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCnxAPIEntry.setStatus('mandatory')
sfcsCTMInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1), )
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigTable.setStatus('mandatory')
sfcsCTMInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMInterfaceConfigInterfaceIndex"))
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigEntry.setStatus('mandatory')
sfcsCTMInterfaceConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigInterfaceIndex.setStatus('mandatory')
sfcsCTMInterfaceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("access-port", 2), ("network-port", 3), ("host-mgmt-port", 4), ("host-ctl-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigType.setStatus('mandatory')
sfcsCTMInterfacePeakBufferUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfacePeakBufferUseage.setStatus('mandatory')
sfcsCTMInterfaceConfigNumberOfQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNumberOfQueues.setStatus('mandatory')
sfcsCTMInterfaceConfigSigStackID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigSigStackID.setStatus('mandatory')
sfcsCTMInterfaceConfigClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generated-transmit-clock", 1), ("channel-recovered-clock", 2), ("system-master-clock", 3), ("not-supported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigClocking.setStatus('mandatory')
sfcsCTMInterfaceConfigNextVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVPI.setStatus('mandatory')
sfcsCTMInterfaceConfigNextVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceConfigNextVCI.setStatus('mandatory')
sfcsCTMInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1), )
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTable.setStatus('mandatory')
sfcsCTMInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMInterfaceStatsInterfaceIndex"))
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsEntry.setStatus('mandatory')
sfcsCTMInterfaceStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsInterfaceIndex.setStatus('mandatory')
sfcsCTMInterfaceStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxErrors.setStatus('mandatory')
sfcsCTMInterfaceStatsVPILookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsVPILookupInvalidErrors.setStatus('mandatory')
sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors.setStatus('mandatory')
sfcsCTMInterfaceStatsRxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsRxCellCnt.setStatus('mandatory')
sfcsCTMInterfaceStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsTxCellCnt.setStatus('mandatory')
sfcsCTMInterfaceStatsOverflowDropCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMInterfaceStatsOverflowDropCellCnt.setStatus('mandatory')
sfcsCTMQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1), )
if mibBuilder.loadTexts: sfcsCTMQueueConfigTable.setStatus('mandatory')
sfcsCTMQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMQueueConfigInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueConfigQueueIndex"))
if mibBuilder.loadTexts: sfcsCTMQueueConfigEntry.setStatus('mandatory')
sfcsCTMQueueConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueConfigInterfaceIndex.setStatus('mandatory')
sfcsCTMQueueConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueIndex.setStatus('mandatory')
sfcsCTMQueueConfigQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueSize.setStatus('mandatory')
sfcsCTMQueueConfigQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigQueueBandwidth.setStatus('mandatory')
sfcsCTMQueueConfigClpDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigClpDropThreshold.setStatus('mandatory')
sfcsCTMQueueConfigCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigCongestionThreshold.setStatus('mandatory')
sfcsCTMQueueConfigEFCILowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigEFCILowThreshold.setStatus('mandatory')
sfcsCTMQueueConfigRMThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsCTMQueueConfigRMThreshold.setStatus('mandatory')
sfcsCTMQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1), )
if mibBuilder.loadTexts: sfcsCTMQueueStatsTable.setStatus('mandatory')
sfcsCTMQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsCTMQueueStatsInterfaceIndex"), (0, "CTRON-SFCS-MIB", "sfcsQueueStatsQueue"))
if mibBuilder.loadTexts: sfcsCTMQueueStatsEntry.setStatus('mandatory')
sfcsCTMQueueStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsInterfaceIndex.setStatus('mandatory')
sfcsCTMQueueStatsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueue.setStatus('mandatory')
sfcsCTMQueueStatsTxClpCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxClpCellsDiscarded.setStatus('mandatory')
sfcsCTMQueueStatsTxCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellsDropped.setStatus('mandatory')
sfcsCTMQueueStatsQueuePeakLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsQueuePeakLevel.setStatus('mandatory')
sfcsCTMQueueStatsTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 9, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsCTMQueueStatsTxCellCnt.setStatus('mandatory')
sfcsBwNimsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1), )
if mibBuilder.loadTexts: sfcsBwNimsTable.setStatus('mandatory')
sfcsBwNimsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwNimsIndex"))
if mibBuilder.loadTexts: sfcsBwNimsEntry.setStatus('mandatory')
sfcsBwNimsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwNimsIndex.setStatus('mandatory')
sfcsBwNimsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwNimsAdminStatus.setStatus('mandatory')
sfcsBWNimsBuffCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsBuffCount.setStatus('mandatory')
sfcsBWNimsPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsPortCount.setStatus('mandatory')
sfcsBWNimsPrioCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBWNimsPrioCount.setStatus('mandatory')
sfcsBwPortsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1), )
if mibBuilder.loadTexts: sfcsBwPortsTable.setStatus('mandatory')
sfcsBwPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortsIndex"))
if mibBuilder.loadTexts: sfcsBwPortsEntry.setStatus('mandatory')
sfcsBwPortsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsIndex.setStatus('mandatory')
sfcsBwPortsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortsAdminStatus.setStatus('mandatory')
sfcsBwPortsPhysBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsPhysBwFwd.setStatus('mandatory')
sfcsBwPortsPhysBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsPhysBwRev.setStatus('mandatory')
sfcsBwPortsZone = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsZone.setStatus('mandatory')
sfcsBwPortsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortsMetric.setStatus('mandatory')
sfcsBwPortPoolLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1), )
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsTable.setStatus('mandatory')
sfcsBwPortPoolLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolLimitsIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolLimitsPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsEntry.setStatus('mandatory')
sfcsBwPortPoolLimitsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsIndex.setStatus('mandatory')
sfcsBwPortPoolLimitsPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsPoolIndex.setStatus('mandatory')
sfcsBwPortPoolLimitsMaxAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsMaxAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsMaxAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolLimitsBwAllocStrat = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwAllocStrat.setStatus('mandatory')
sfcsBwPortPoolLimitsBwConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsBwConstant.setStatus('mandatory')
sfcsBwPortPoolLimitsCBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsCBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsCBRLimitRev.setStatus('mandatory')
sfcsBwPortPoolLimitsABRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsABRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsABRLimitRev.setStatus('mandatory')
sfcsBwPortPoolLimitsVBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsVBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsVBRLimitRev.setStatus('mandatory')
sfcsBwPortPoolLimitsUBRLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsUBRLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRLimitRev.setStatus('mandatory')
sfcsBwPortPoolLimitsUBRConnLimitFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitFwd.setStatus('mandatory')
sfcsBwPortPoolLimitsUBRConnLimitRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolLimitsUBRConnLimitRev.setStatus('mandatory')
sfcsBwPortPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2), )
if mibBuilder.loadTexts: sfcsBwPortPoolStatTable.setStatus('mandatory')
sfcsBwPortPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolStatsIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolStatsPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolStatEntry.setStatus('mandatory')
sfcsBwPortPoolStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatsIndex.setStatus('mandatory')
sfcsBwPortPoolStatsPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatsPoolIndex.setStatus('mandatory')
sfcsBwPortPoolStatConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntFwd.setStatus('mandatory')
sfcsBwPortPoolStatConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatConnCntRev.setStatus('mandatory')
sfcsBwPortPoolStatAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolStatAvailBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatAvailBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatAvailBwRev.setStatus('mandatory')
sfcsBwPortPoolStatPeakBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatPeakBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPeakBwRev.setStatus('mandatory')
sfcsBwPortPoolStatRejConnFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnFwd.setStatus('mandatory')
sfcsBwPortPoolStatRejConnRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatRejConnRev.setStatus('mandatory')
sfcsBwPortPoolStatPrevAdverMAXCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatPrevAdverMAXCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverMAXCRRev.setStatus('mandatory')
sfcsBwPortPoolStatPrevAdverAvailCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatPrevAdverAvailCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatPrevAdverAvailCRRev.setStatus('mandatory')
sfcsBwPortPoolStatCBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntFwd.setStatus('mandatory')
sfcsBwPortPoolStatCBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnCntRev.setStatus('mandatory')
sfcsBwPortPoolStatCBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejFwd.setStatus('mandatory')
sfcsBwPortPoolStatCBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRConnRejRev.setStatus('mandatory')
sfcsBwPortPoolStatCBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatCBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolStatCBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatCBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRAggPCRRev.setStatus('mandatory')
sfcsBwPortPoolStatCBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverMAXCTD.setStatus('mandatory')
sfcsBwPortPoolStatCBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatCBRPrevAdverCDV.setStatus('mandatory')
sfcsBwPortPoolStatABRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntFwd.setStatus('mandatory')
sfcsBwPortPoolStatABRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnCntRev.setStatus('mandatory')
sfcsBwPortPoolStatABRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejFwd.setStatus('mandatory')
sfcsBwPortPoolStatABRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRConnRejRev.setStatus('mandatory')
sfcsBwPortPoolStatABRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatABRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolStatABRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatABRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRAggPCRRev.setStatus('mandatory')
sfcsBwPortPoolStatABRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverMAXCTD.setStatus('mandatory')
sfcsBwPortPoolStatABRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatABRPrevAdverCDV.setStatus('mandatory')
sfcsBwPortPoolStatVBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntFwd.setStatus('mandatory')
sfcsBwPortPoolStatVBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnCntRev.setStatus('mandatory')
sfcsBwPortPoolStatVBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejFwd.setStatus('mandatory')
sfcsBwPortPoolStatVBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRConnRejRev.setStatus('mandatory')
sfcsBwPortPoolStatVBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatVBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolStatVBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatVBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRAggPCRRev.setStatus('mandatory')
sfcsBwPortPoolStatVBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverMAXCTD.setStatus('mandatory')
sfcsBwPortPoolStatVBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatVBRPrevAdverCDV.setStatus('mandatory')
sfcsBwPortPoolStatUBRConnCntFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntFwd.setStatus('mandatory')
sfcsBwPortPoolStatUBRConnCntRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnCntRev.setStatus('mandatory')
sfcsBwPortPoolStatUBRConnRejFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejFwd.setStatus('mandatory')
sfcsBwPortPoolStatUBRConnRejRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRConnRejRev.setStatus('mandatory')
sfcsBwPortPoolStatUBRAllocBwFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwFwd.setStatus('mandatory')
sfcsBwPortPoolStatUBRAllocBwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAllocBwRev.setStatus('mandatory')
sfcsBwPortPoolStatUBRAggPCRFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRFwd.setStatus('mandatory')
sfcsBwPortPoolStatUBRAggPCRRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRAggPCRRev.setStatus('mandatory')
sfcsBwPortPoolStatUBRPrevAdverMAXCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverMAXCTD.setStatus('mandatory')
sfcsBwPortPoolStatUBRPrevAdverCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolStatUBRPrevAdverCDV.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3), )
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtTable.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBwPortPoolTrapMgmtIndex"), (0, "CTRON-SFCS-MIB", "sfcsBwPortPoolTrapMgmtPoolIndex"))
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtEntry.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtIndex.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPoolIndex.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtPeakBwTholdFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtPeakBwTholdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtPeakBwTholdRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtHoldDownTime.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd.setStatus('mandatory')
sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev.setStatus('mandatory')
sfcsBWPortPoolTrapMgmtBuffUpThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffUpThold.setStatus('mandatory')
sfcsBWPortPoolTrapMgmtBuffLoThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtBuffLoThold.setStatus('mandatory')
sfcsBWPortPoolTrapMgmtConnRejThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 3, 3, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBWPortPoolTrapMgmtConnRejThold.setStatus('mandatory')
sfcsBuffPrioTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1), )
if mibBuilder.loadTexts: sfcsBuffPrioTable.setStatus('mandatory')
sfcsBuffPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsBuffPrioPortIndex"), (0, "CTRON-SFCS-MIB", "sfcsBuffPrioPriority"))
if mibBuilder.loadTexts: sfcsBuffPrioEntry.setStatus('mandatory')
sfcsBuffPrioPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPortIndex.setStatus('mandatory')
sfcsBuffPrioPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPriority.setStatus('mandatory')
sfcsBuffPrioAssignCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAssignCtl.setStatus('mandatory')
sfcsBuffPrioMinCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioMinCtl.setStatus('mandatory')
sfcsBuffPrioAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioAssigned.setStatus('mandatory')
sfcsBuffPrioAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAllocated.setStatus('mandatory')
sfcsBuffPrioAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioAvailable.setStatus('mandatory')
sfcsBuffPrioPeakAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsBuffPrioPeakAlloc.setStatus('mandatory')
sfcsBuffPrioConnRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioConnRejs.setStatus('mandatory')
sfcsBuffPrioUpTholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioUpTholdTrap.setStatus('mandatory')
sfcsBuffPrioLoTholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioLoTholdTrap.setStatus('mandatory')
sfcsBuffPrioConnRejThold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 12, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsBuffPrioConnRejThold.setStatus('mandatory')
sfcsProxyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1), )
if mibBuilder.loadTexts: sfcsProxyConfigTable.setStatus('mandatory')
sfcsProxyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyConfigANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyConfigEntry.setStatus('mandatory')
sfcsProxyConfigANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigANIMIndex.setStatus('mandatory')
sfcsProxyConfigNUMPORTS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigNUMPORTS.setStatus('mandatory')
sfcsProxyConfigTxMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigTxMemSize.setStatus('mandatory')
sfcsProxyConfigRxMaxPduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigRxMaxPduSize.setStatus('mandatory')
sfcsProxyConfigBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigBandWidth.setStatus('mandatory')
sfcsProxyConfigTransmitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigTransmitDone.setStatus('mandatory')
sfcsProxyConfigReceiveFifoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("not-full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoState.setStatus('mandatory')
sfcsProxyConfigPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start-stay", 2), ("reread", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigPortTransmitMode.setStatus('mandatory')
sfcsProxyConfigReceiveFifoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveFifoReset.setStatus('mandatory')
sfcsProxyConfigTxFifoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigTxFifoReset.setStatus('mandatory')
sfcsProxyConfigReceiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receiving", 1), ("not-receiving", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigReceiveMode.setStatus('mandatory')
sfcsProxyConfigCaptureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("header", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigCaptureMode.setStatus('mandatory')
sfcsProxyConfigInitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyConfigInitPort.setStatus('mandatory')
sfcsProxyConfigLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyConfigLoad.setStatus('mandatory')
sfcsProxyConfigGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyConfigGumbo.setStatus('mandatory')
sfcsProxyTransTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1), )
if mibBuilder.loadTexts: sfcsProxyTransTable.setStatus('mandatory')
sfcsProxyTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyTransANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyTransEntry.setStatus('mandatory')
sfcsProxyTransANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyTransANIMIndex.setStatus('mandatory')
sfcsProxyTransEncodeNewPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyTransEncodeNewPdu.setStatus('mandatory')
sfcsProxyTransVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransVPI.setStatus('mandatory')
sfcsProxyTransVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransVCI.setStatus('mandatory')
sfcsProxyTransPTI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPTI.setStatus('mandatory')
sfcsProxyTransCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransCLP.setStatus('mandatory')
sfcsProxyTransPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-input", 1), ("sequential", 2), ("uniform", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadType.setStatus('mandatory')
sfcsProxyTransPayloadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadLength.setStatus('mandatory')
sfcsProxyTransPayloadData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadData.setStatus('mandatory')
sfcsProxyTransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransCount.setStatus('mandatory')
sfcsProxyTransPayloadAdaptionLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raw", 1), ("aal5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransPayloadAdaptionLayer.setStatus('mandatory')
sfcsProxyTransMpxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransMpxMethod.setStatus('mandatory')
sfcsProxyTransControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send-once", 1), ("repeat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyTransControl.setStatus('mandatory')
sfcsProxyTransGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyTransGumbo.setStatus('mandatory')
sfcsProxyReadTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1), )
if mibBuilder.loadTexts: sfcsProxyReadTable.setStatus('mandatory')
sfcsProxyReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1), ).setIndexNames((0, "CTRON-SFCS-MIB", "sfcsProxyReadANIMIndex"))
if mibBuilder.loadTexts: sfcsProxyReadEntry.setStatus('mandatory')
sfcsProxyReadANIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadANIMIndex.setStatus('mandatory')
sfcsProxyReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reassemble-PDU", 1), ("cell-by-cell", 2), ("all-data", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfcsProxyReadMode.setStatus('mandatory')
sfcsProxyReadNewPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get-next-pdu", 1), ("reread-from-beginning", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyReadNewPdu.setStatus('mandatory')
sfcsProxyReadGumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 4), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sfcsProxyReadGumbo.setStatus('mandatory')
sfcsProxyReadVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadVPI.setStatus('mandatory')
sfcsProxyReadVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadVCI.setStatus('mandatory')
sfcsProxyReadPTI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadPTI.setStatus('mandatory')
sfcsProxyReadCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadCLP.setStatus('mandatory')
sfcsProxyReadDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadDataLength.setStatus('mandatory')
sfcsProxyReadData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadData.setStatus('mandatory')
sfcsProxyReadPal = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raw", 1), ("aal5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadPal.setStatus('mandatory')
sfcsProxyReadInbyteslosts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInbyteslosts.setStatus('mandatory')
sfcsProxyReadInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCells.setStatus('mandatory')
sfcsProxyReadInError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInError.setStatus('mandatory')
sfcsProxyReadInCellReadError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCellReadError.setStatus('mandatory')
sfcsProxyReadInHecError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInHecError.setStatus('mandatory')
sfcsProxyReadInTooBigError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInTooBigError.setStatus('mandatory')
sfcsProxyReadInCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInCRCError.setStatus('mandatory')
sfcsProxyReadInLengthMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInLengthMismatchError.setStatus('mandatory')
sfcsProxyReadInTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 1, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfcsProxyReadInTotalCells.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFCS-MIB", sfcsConfigAdminReset=sfcsConfigAdminReset, sfcsBWPortPoolTrapMgmtBuffLoThold=sfcsBWPortPoolTrapMgmtBuffLoThold, sfcsBwPortPoolStatUBRPrevAdverCDV=sfcsBwPortPoolStatUBRPrevAdverCDV, sfcsBwPortPoolTrapMgmtHoldDownTime=sfcsBwPortPoolTrapMgmtHoldDownTime, sfcsANIMPicDcDcConverterType=sfcsANIMPicDcDcConverterType, sfcsProxyConfigInitPort=sfcsProxyConfigInitPort, sfcsConfigSlotIndex=sfcsConfigSlotIndex, sfcsCnxErrorEntry=sfcsCnxErrorEntry, sfcsProxyConfigPortTransmitMode=sfcsProxyConfigPortTransmitMode, sfcsProxyTransVPI=sfcsProxyTransVPI, sfcsInterfaceConfig=sfcsInterfaceConfig, sfcsCnxStatsHiToLoHTxCells=sfcsCnxStatsHiToLoHTxCells, sfcsBWNimsBuffCount=sfcsBWNimsBuffCount, sfcsConfigSwitchCapacity=sfcsConfigSwitchCapacity, sfcsANIMPicMfgRevisionCode=sfcsANIMPicMfgRevisionCode, sfcsProxyTransPayloadAdaptionLayer=sfcsProxyTransPayloadAdaptionLayer, sfcsInterfaceConfigSigStackID=sfcsInterfaceConfigSigStackID, sfcsBwPortPoolTrapMgmtPeakBwTholdRev=sfcsBwPortPoolTrapMgmtPeakBwTholdRev, sfcsSysBPClkSelect=sfcsSysBPClkSelect, sfcsBwPortsPhysBwFwd=sfcsBwPortsPhysBwFwd, sfcsCnxStatsHiToLoTaggedCells=sfcsCnxStatsHiToLoTaggedCells, sfcsBuffPrioPriority=sfcsBuffPrioPriority, sfcsQueueConfigEntry=sfcsQueueConfigEntry, sfcsConfigLastChange=sfcsConfigLastChange, sfcsProxyReadInbyteslosts=sfcsProxyReadInbyteslosts, sfcsBwPortPoolStatCBRPrevAdverCDV=sfcsBwPortPoolStatCBRPrevAdverCDV, sfcsBwPortPoolStatVBRConnRejFwd=sfcsBwPortPoolStatVBRConnRejFwd, sfcsCTMInterfaceStatsTable=sfcsCTMInterfaceStatsTable, sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtABRConnCntTholdHiFwd, sfcsANIMStatsANIMIndex=sfcsANIMStatsANIMIndex, sfcsQueueConfigTable=sfcsQueueConfigTable, sfcsProxyTransCLP=sfcsProxyTransCLP, sfcsStatsEngineOperStatus=sfcsStatsEngineOperStatus, sfcsBuffPrioConnRejs=sfcsBuffPrioConnRejs, sfcsCTMInterfaceStatsRxCellCnt=sfcsCTMInterfaceStatsRxCellCnt, sfcsBwPortPoolStatCBRAllocBwRev=sfcsBwPortPoolStatCBRAllocBwRev, sfcsBwPortPoolStatUBRAggPCRRev=sfcsBwPortPoolStatUBRAggPCRRev, sfcsInterfaceStatsInterfaceIndex=sfcsInterfaceStatsInterfaceIndex, sfcsPacketDiscardEngineOperTime=sfcsPacketDiscardEngineOperTime, sfcsBwPortPoolStatVBRAllocBwRev=sfcsBwPortPoolStatVBRAllocBwRev, sfcsBwPortPoolStatAvailBwFwd=sfcsBwPortPoolStatAvailBwFwd, sfcsANIMPicModuleTypeString=sfcsANIMPicModuleTypeString, sfcsBwPortPoolStatCBRAllocBwFwd=sfcsBwPortPoolStatCBRAllocBwFwd, sfcsBwPortPoolLimitsUBRConnLimitRev=sfcsBwPortPoolLimitsUBRConnLimitRev, sfcsSysConfigMaxUpcEntries=sfcsSysConfigMaxUpcEntries, sfcsANIMConfigOperStatus=sfcsANIMConfigOperStatus, sfcsSysConfigAdminReset=sfcsSysConfigAdminReset, sfcsBwPortPoolStatVBRPrevAdverMAXCTD=sfcsBwPortPoolStatVBRPrevAdverMAXCTD, sfcsProxyTransControl=sfcsProxyTransControl, sfcsProxyTrans=sfcsProxyTrans, sfcsConfigTable=sfcsConfigTable, sfcsSysConfigCTMSlotMask=sfcsSysConfigCTMSlotMask, sfcsANIM=sfcsANIM, sfcsQueueStatsTable=sfcsQueueStatsTable, sfcsQueueConfig=sfcsQueueConfig, sfcsQueueConfigQueueIndex=sfcsQueueConfigQueueIndex, sfcsBwPortPoolStatUBRConnRejFwd=sfcsBwPortPoolStatUBRConnRejFwd, sfcsProxyReadGumbo=sfcsProxyReadGumbo, sfcsCTMInterfaceStatsInterfaceIndex=sfcsCTMInterfaceStatsInterfaceIndex, sfcsConnection=sfcsConnection, sfcsANIMPicStatus=sfcsANIMPicStatus, sfcsSysConfigOperStatus=sfcsSysConfigOperStatus, sfcsCnxStatsLoToHiDroppedCells=sfcsCnxStatsLoToHiDroppedCells, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiFwd, sfcsProxyConfigRxMaxPduSize=sfcsProxyConfigRxMaxPduSize, sfcsCTMInterfaceStatsVPILookupInvalidErrors=sfcsCTMInterfaceStatsVPILookupInvalidErrors, sfcsConnectionAPI=sfcsConnectionAPI, sfcsCTMInterfaceConfigNextVCI=sfcsCTMInterfaceConfigNextVCI, sfcsBwNimsAdminStatus=sfcsBwNimsAdminStatus, sfcsQueueConfigRMThreshold=sfcsQueueConfigRMThreshold, sfcsBuffPrioAssignCtl=sfcsBuffPrioAssignCtl, sfcsBwPortPoolStatVBRConnCntFwd=sfcsBwPortPoolStatVBRConnCntFwd, sfcsSysConfigEnt=sfcsSysConfigEnt, sfcsANIMStatistics=sfcsANIMStatistics, sfcsCTMQueueConfigQueueBandwidth=sfcsCTMQueueConfigQueueBandwidth, sfcsSysConfigPowerUpDiags=sfcsSysConfigPowerUpDiags, sfcsCnxStatsCrossConnectLowVci=sfcsCnxStatsCrossConnectLowVci, sfcsProxyReadANIMIndex=sfcsProxyReadANIMIndex, sfcsANIMPicTLPN=sfcsANIMPicTLPN, sfcsANIMPicTable=sfcsANIMPicTable, sfcsSysConfigOperTime=sfcsSysConfigOperTime, sfcsBwPortPoolStatVBRPrevAdverCDV=sfcsBwPortPoolStatVBRPrevAdverCDV, sfcsSysConfigVcSize=sfcsSysConfigVcSize, sfcsProxyConfigTransmitDone=sfcsProxyConfigTransmitDone, sfcsANIMConfigLineRate=sfcsANIMConfigLineRate, sfcsStatsEngineTable=sfcsStatsEngineTable, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoRev, sfcsBwPortPoolStatPrevAdverMAXCRFwd=sfcsBwPortPoolStatPrevAdverMAXCRFwd, sfcsSysBPCfg=sfcsSysBPCfg, sfcsBwPortPoolStatABRConnRejRev=sfcsBwPortPoolStatABRConnRejRev, sfcsUPCTable=sfcsUPCTable, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoFwd, sfcsConfigHostCtrlATMAddr=sfcsConfigHostCtrlATMAddr, sfcsCTMInterfaceStatsTxCellCnt=sfcsCTMInterfaceStatsTxCellCnt, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoRev, sfcsInterfacePeakBufferUseage=sfcsInterfacePeakBufferUseage, sfcsCnxStatsCrossConnectLowIfIndex=sfcsCnxStatsCrossConnectLowIfIndex, sfcsConfigMaxCnxEntries=sfcsConfigMaxCnxEntries, sfcsQueueConfigEFCILowThreshold=sfcsQueueConfigEFCILowThreshold, sfcsBwPortPoolTrapMgmtIndex=sfcsBwPortPoolTrapMgmtIndex, sfcsQueueConfigInterfaceIndex=sfcsQueueConfigInterfaceIndex, sfcsCnxCfgCrossConnectLowVci=sfcsCnxCfgCrossConnectLowVci, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdLoFwd, sfcsProxyReadNewPdu=sfcsProxyReadNewPdu, sfcsANIMPicTLPcbRevision=sfcsANIMPicTLPcbRevision, sfcsCTM=sfcsCTM, sfcsConfigMasterClock2Standby=sfcsConfigMasterClock2Standby, sfcsUPCOperStatus=sfcsUPCOperStatus, sfcsANIMPicTLSN=sfcsANIMPicTLSN, sfcsCnxStatsTable=sfcsCnxStatsTable, sfcsANIMConfigMBClockSelect=sfcsANIMConfigMBClockSelect, sfcsANIMPicNumbRsvdAddrs=sfcsANIMPicNumbRsvdAddrs, sfcsBwPortPoolStatABRPrevAdverMAXCTD=sfcsBwPortPoolStatABRPrevAdverMAXCTD, sfcsCTMQueueStatsTable=sfcsCTMQueueStatsTable, sfcsProxyTransPayloadType=sfcsProxyTransPayloadType, sfcsProxyTransEntry=sfcsProxyTransEntry, sfcsConfigMibRev=sfcsConfigMibRev, sfcsInterfaceConfigClockingSource=sfcsInterfaceConfigClockingSource, sfcsPacketDiscardEngineAdminStatus=sfcsPacketDiscardEngineAdminStatus, sfcsANIMPicMacAddr=sfcsANIMPicMacAddr, sfcsProxyReadInError=sfcsProxyReadInError, sfcsCTMQueueConfigTable=sfcsCTMQueueConfigTable, sfcsProxyConfigBandWidth=sfcsProxyConfigBandWidth, sfcsANIMPicTLRevisionCode=sfcsANIMPicTLRevisionCode, sfcsBwPortPoolLimitsIndex=sfcsBwPortPoolLimitsIndex, sfcsBwPortPoolStatABRAggPCRFwd=sfcsBwPortPoolStatABRAggPCRFwd, sfcsSysConfigMaxStatEntries=sfcsSysConfigMaxStatEntries, sfcsSysConfigPolicingSupport=sfcsSysConfigPolicingSupport, sfcsConfigMaxUpcEntries=sfcsConfigMaxUpcEntries, sfcsBwPortPoolStatUBRConnRejRev=sfcsBwPortPoolStatUBRConnRejRev, sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiRev, sfcsQueueStatsTxCellCnt=sfcsQueueStatsTxCellCnt, sfcsBwPortPoolStatVBRAggPCRRev=sfcsBwPortPoolStatVBRAggPCRRev, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdLoRev, sfcsSysConfigPnniAddessingMode=sfcsSysConfigPnniAddessingMode, sfcsSysStatusTdmUtilization=sfcsSysStatusTdmUtilization, sfcsBwPortPoolStatCBRConnRejRev=sfcsBwPortPoolStatCBRConnRejRev, sfcsProxyConfigTxFifoReset=sfcsProxyConfigTxFifoReset, sfcsSysConfigMaxfreecva=sfcsSysConfigMaxfreecva, sfcsStatus=sfcsStatus, sfcsCTMInterfaceConfigNextVPI=sfcsCTMInterfaceConfigNextVPI, sfcsANIMPicBoardLevelRevision=sfcsANIMPicBoardLevelRevision, sfcsCnxCfgCrossConnectLowIfIndex=sfcsCnxCfgCrossConnectLowIfIndex, sfcsInterfaceConfigTable=sfcsInterfaceConfigTable, sfcsBwPortPoolStatVBRConnRejRev=sfcsBwPortPoolStatVBRConnRejRev, sfcsProxyReadInCRCError=sfcsProxyReadInCRCError, sfcsProxyConfigReceiveFifoState=sfcsProxyConfigReceiveFifoState, sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtAllocBwTholdLoFwd, sfcsProxyConfigCaptureMode=sfcsProxyConfigCaptureMode, sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtABRConnCntTholdHiRev, sfcsSysStatus=sfcsSysStatus, sfcsStatusSlotIndex=sfcsStatusSlotIndex, sfcsInterfaceStatsRxCnxLookupInvalidErrors=sfcsInterfaceStatsRxCnxLookupInvalidErrors, sfcsCTMQueueStatsTxCellsDropped=sfcsCTMQueueStatsTxCellsDropped, sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiFwd, sfcsCTMQueueConfigRMThreshold=sfcsCTMQueueConfigRMThreshold, sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtABRConnCntTholdLoFwd, sfcsANIMPicMfgSerialNumb=sfcsANIMPicMfgSerialNumb, sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors=sfcsCTMInterfaceStatsRxCnxLookupInvalidErrors, sfcsBwPortPoolStatCBRAggPCRFwd=sfcsBwPortPoolStatCBRAggPCRFwd, sfcsCTMInterfaceStatsRxErrors=sfcsCTMInterfaceStatsRxErrors, sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiRev, sfcsProxyReadPal=sfcsProxyReadPal, sfcsBWNimsPrioCount=sfcsBWNimsPrioCount, sfcsBwPortPoolLimitsEntry=sfcsBwPortPoolLimitsEntry, sfcsBuffPrioAllocated=sfcsBuffPrioAllocated, sfcsANIMConfigANIMIndex=sfcsANIMConfigANIMIndex, sfcsBwNimsIndex=sfcsBwNimsIndex, sfcsProxyReadInHecError=sfcsProxyReadInHecError, sfcsQueueStatsTxCellsDropped=sfcsQueueStatsTxCellsDropped, sfcsANIMConfig=sfcsANIMConfig, sfcsConnectionConfig=sfcsConnectionConfig, sfcsBwPortPoolStatPrevAdverMAXCRRev=sfcsBwPortPoolStatPrevAdverMAXCRRev, sfcsQueueConfigQueueBandwidth=sfcsQueueConfigQueueBandwidth, sfcsBuffPrioPortIndex=sfcsBuffPrioPortIndex, sfcsBwPortPoolStatRejConnRev=sfcsBwPortPoolStatRejConnRev, sfcsProxyConfigEntry=sfcsProxyConfigEntry, sfcsSysConfigPnniNodeLevel=sfcsSysConfigPnniNodeLevel, sfcsStatusTable=sfcsStatusTable, sfcsBwPortsEntry=sfcsBwPortsEntry, sfcsQueueStatsQueuePeakLevel=sfcsQueueStatsQueuePeakLevel, sfcsSysStatusTdmCellCount=sfcsSysStatusTdmCellCount, sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtUBRConnCntTholdHiRev, sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoRev, sfcsBwPortPoolStatUBRAggPCRFwd=sfcsBwPortPoolStatUBRAggPCRFwd, sfcsSysConfigLastChange=sfcsSysConfigLastChange, sfcsANIMPicSmb1PromVersion=sfcsANIMPicSmb1PromVersion, sfcsCnxCfgTable=sfcsCnxCfgTable, sfcsBwPortPoolStatUBRAllocBwRev=sfcsBwPortPoolStatUBRAllocBwRev, ctSwitch=ctSwitch, sfcsProxyReadVCI=sfcsProxyReadVCI, sfcsANIMStatsEntry=sfcsANIMStatsEntry, sfcsBwPortPoolLimitsABRLimitFwd=sfcsBwPortPoolLimitsABRLimitFwd, mibs=mibs, sfcsCTMQueueConfigQueueSize=sfcsCTMQueueConfigQueueSize, sfcsBuffPrioEntry=sfcsBuffPrioEntry, sfcsProxyConfigANIMIndex=sfcsProxyConfigANIMIndex, sfcsBwPortPoolLimitsUBRLimitFwd=sfcsBwPortPoolLimitsUBRLimitFwd, sfcsCnxStatsHiToLoDroppedCells=sfcsCnxStatsHiToLoDroppedCells, sfcsBwPortPoolLimitsUBRConnLimitFwd=sfcsBwPortPoolLimitsUBRConnLimitFwd, sfcsBwPorts=sfcsBwPorts, sfcsBwPortsTable=sfcsBwPortsTable, sfcsSysConfigSwitchCapacity=sfcsSysConfigSwitchCapacity, sfcsStatusTdmUtilization=sfcsStatusTdmUtilization, sfcsCnxStatsCrossConnectLowVpi=sfcsCnxStatsCrossConnectLowVpi, sfcsBwPortPoolStatABRConnRejFwd=sfcsBwPortPoolStatABRConnRejFwd, sfcsCnxCfgStatsTableCounterSizes=sfcsCnxCfgStatsTableCounterSizes, sfcsBWPortPoolTrapMgmtBuffUpThold=sfcsBWPortPoolTrapMgmtBuffUpThold, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdLoFwd, sfcsConfigSwitchHostPort=sfcsConfigSwitchHostPort, sfcsSysConfigNumberANIMS=sfcsSysConfigNumberANIMS, sfcsANIMConfigTable=sfcsANIMConfigTable, sfcsCTMInterfaceConfigSigStackID=sfcsCTMInterfaceConfigSigStackID, sfcsBwPortPoolLimitsPoolIndex=sfcsBwPortPoolLimitsPoolIndex, sfcsANIMPicDcDcConverterInputPower=sfcsANIMPicDcDcConverterInputPower, sfcsCTMInterfaceStatsOverflowDropCellCnt=sfcsCTMInterfaceStatsOverflowDropCellCnt, sfcsCnxStatsEntry=sfcsCnxStatsEntry, sfcsSysSystemCfgTable=sfcsSysSystemCfgTable, sfcsANIMPicTLSerialNumb=sfcsANIMPicTLSerialNumb, sfcsConnectionStatistics=sfcsConnectionStatistics, sfcsProxyReadTable=sfcsProxyReadTable, ctSFCS=ctSFCS, sfcsQueueStatistics=sfcsQueueStatistics, sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoFwd, sfcsCnxCfgType=sfcsCnxCfgType, sfcsInterfaceStatistics=sfcsInterfaceStatistics, sfcsCTMQueueStatsTxClpCellsDiscarded=sfcsCTMQueueStatsTxClpCellsDiscarded, sfcsBwPortPoolStatConnCntRev=sfcsBwPortPoolStatConnCntRev, sfcsANIMPicMfgPartNumb=sfcsANIMPicMfgPartNumb, sfcsBwPortPoolStatsPoolIndex=sfcsBwPortPoolStatsPoolIndex, sfcsInterfaceStatsRxErrors=sfcsInterfaceStatsRxErrors, sfcsANIMPicMfgSN=sfcsANIMPicMfgSN, sfcsBwPortPoolStatAvailBwRev=sfcsBwPortPoolStatAvailBwRev, sfcsBwPortsAdminStatus=sfcsBwPortsAdminStatus, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiFwd, sfcsProxy=sfcsProxy, sfcsProxyConfigNUMPORTS=sfcsProxyConfigNUMPORTS, sfcsBwPortPoolStatCBRConnCntRev=sfcsBwPortPoolStatCBRConnCntRev, sfcsCnxCfgCrossConnectHighVpi=sfcsCnxCfgCrossConnectHighVpi, sfcsBwPortPoolStatABRPrevAdverCDV=sfcsBwPortPoolStatABRPrevAdverCDV, sfcsBwPortPoolLimitsMaxAllocBwFwd=sfcsBwPortPoolLimitsMaxAllocBwFwd, sfcsSysSystemCfgEnt=sfcsSysSystemCfgEnt, sfcsStatusCurrCtmAgent=sfcsStatusCurrCtmAgent, sfcsANIMConfigEntry=sfcsANIMConfigEntry, sfcsEngine=sfcsEngine, sfcsInterfaceStatsRxCellCnt=sfcsInterfaceStatsRxCellCnt, sfcsInterfaceStatsVPILookupInvalidErrors=sfcsInterfaceStatsVPILookupInvalidErrors, sfcsStatusCurrStatsEntries=sfcsStatusCurrStatsEntries, sfcsBwPortPoolStatCBRPrevAdverMAXCTD=sfcsBwPortPoolStatCBRPrevAdverMAXCTD, sfcsInterfaceConfigNumberOfQueues=sfcsInterfaceConfigNumberOfQueues, sfcsBwPortPoolLimitsMaxAllocBwRev=sfcsBwPortPoolLimitsMaxAllocBwRev, sfcsProxyReadInTooBigError=sfcsProxyReadInTooBigError, sfcsSysConfigAdminStatus=sfcsSysConfigAdminStatus, sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtAllocBwTholdHiRev)
mibBuilder.exportSymbols("CTRON-SFCS-MIB", sfcsSysConfigMaxCnxEntries=sfcsSysConfigMaxCnxEntries, sfcsPacketDiscardEngineSlotIndex=sfcsPacketDiscardEngineSlotIndex, sfcsBwPortPoolStatABRConnCntRev=sfcsBwPortPoolStatABRConnCntRev, sfcsProxyReadInCellReadError=sfcsProxyReadInCellReadError, sfcsSysConfigPnniNsapPrefix=sfcsSysConfigPnniNsapPrefix, sfcsConfigMasterClock1Source=sfcsConfigMasterClock1Source, sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoFwd, sfcsSysConfigATOMPersistance=sfcsSysConfigATOMPersistance, sfcsInterfaceStatsTxCellCnt=sfcsInterfaceStatsTxCellCnt, sfcsCTMInterfaceConfigType=sfcsCTMInterfaceConfigType, sfcsCTMQueueConfigQueueIndex=sfcsCTMQueueConfigQueueIndex, sfcsBwPortPoolStatVBRAggPCRFwd=sfcsBwPortPoolStatVBRAggPCRFwd, sfcsStatsEngineSlotIndex=sfcsStatsEngineSlotIndex, sfcsBwPortPoolStatEntry=sfcsBwPortPoolStatEntry, sfcsCTMInterfaceConfigNumberOfQueues=sfcsCTMInterfaceConfigNumberOfQueues, sfcsStatsEngineEntry=sfcsStatsEngineEntry, sfcsProxyTransPayloadLength=sfcsProxyTransPayloadLength, sfcsProxyReadDataLength=sfcsProxyReadDataLength, sfcsSysConfigFMVer=sfcsSysConfigFMVer, sfcsANIMPic=sfcsANIMPic, sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiFwd, sfcsANIMConfigAdminStatus=sfcsANIMConfigAdminStatus, sfcsQueue=sfcsQueue, sfcsCnxStatsCrossConnectHighIfIndex=sfcsCnxStatsCrossConnectHighIfIndex, sfcsBwPortPoolStatUBRConnCntRev=sfcsBwPortPoolStatUBRConnCntRev, sfcsCnxCfgUPCEnable=sfcsCnxCfgUPCEnable, sfcsSysBPEnt=sfcsSysBPEnt, sfcsSysStatusEnt=sfcsSysStatusEnt, sfcsSysBPTable=sfcsSysBPTable, sfcsProxyTransPayloadData=sfcsProxyTransPayloadData, sfcsANIMPicMfgDateCode=sfcsANIMPicMfgDateCode, sfcsCTMInterfaceConfigClocking=sfcsCTMInterfaceConfigClocking, sfcsBwPortsPhysBwRev=sfcsBwPortsPhysBwRev, sfcsConfigEntry=sfcsConfigEntry, sfcsConfigMasterClock1Standby=sfcsConfigMasterClock1Standby, sfcsConnectionError=sfcsConnectionError, sfcsProxyReadData=sfcsProxyReadData, sfcsUPCOperTime=sfcsUPCOperTime, sfcsCnxCfgEntry=sfcsCnxCfgEntry, sfcsCnxCfgCrossConnectLowVpi=sfcsCnxCfgCrossConnectLowVpi, sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev=sfcsBwPortPoolTrapMgmtCBRConnCntTholdHiRev, sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtVBRConnCntTholdLoRev, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiFwd, sfcsBwPortPoolStatPrevAdverAvailCRRev=sfcsBwPortPoolStatPrevAdverAvailCRRev, sfcsInterfaceConfigEntry=sfcsInterfaceConfigEntry, ctDataLink=ctDataLink, sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtUBRConnCntTholdLoRev, sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd=sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoFwd, sfcsInterface=sfcsInterface, sfcsStatsEngineOperTime=sfcsStatsEngineOperTime, sfcsStatusCurrUPCEntries=sfcsStatusCurrUPCEntries, sfcsANIMPicTLMfgLocation=sfcsANIMPicTLMfgLocation, sfcsANIMPicLocation=sfcsANIMPicLocation, sfcsBwPortsZone=sfcsBwPortsZone, sfcsConfigVersion=sfcsConfigVersion, sfcsANIMStatsTable=sfcsANIMStatsTable, sfcsConfigAdminStatus=sfcsConfigAdminStatus, sfcsProxyTransEncodeNewPdu=sfcsProxyTransEncodeNewPdu, sfcsBwPortPoolStatUBRAllocBwFwd=sfcsBwPortPoolStatUBRAllocBwFwd, sfcsInterfaceConfigType=sfcsInterfaceConfigType, sfcsBwPortPoolStatCBRAggPCRRev=sfcsBwPortPoolStatCBRAggPCRRev, sfcsCnxErrorCode=sfcsCnxErrorCode, sfcsPacketDiscardEngine=sfcsPacketDiscardEngine, sfcsCnxStatsLoToHiTaggedCells=sfcsCnxStatsLoToHiTaggedCells, sfcsBuffPrioTable=sfcsBuffPrioTable, sfcsANIMPicSlot=sfcsANIMPicSlot, sfcsProxyConfigReceiveFifoReset=sfcsProxyConfigReceiveFifoReset, sfcsProxyConfigTable=sfcsProxyConfigTable, sfcsInterfaceConfigInterfaceIndex=sfcsInterfaceConfigInterfaceIndex, cabletron=cabletron, sfcsUPCReset=sfcsUPCReset, sfcsProxyRead=sfcsProxyRead, sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtCBRAllocBwTholdHiRev, sfcsANIMStatsTxCells=sfcsANIMStatsTxCells, sfcsANIMPicMfgReworkLocation=sfcsANIMPicMfgReworkLocation, sfcsCTMInterfacePeakBufferUseage=sfcsCTMInterfacePeakBufferUseage, sfcsStatsEngineAdminStatus=sfcsStatsEngineAdminStatus, sfcsBwPortPoolStatPrevAdverAvailCRFwd=sfcsBwPortPoolStatPrevAdverAvailCRFwd, sfcsQueueStatsEntry=sfcsQueueStatsEntry, sfcsCnxCfgStatsEnable=sfcsCnxCfgStatsEnable, sfcsProxyReadInLengthMismatchError=sfcsProxyReadInLengthMismatchError, sfcsBuffPrioPeakAlloc=sfcsBuffPrioPeakAlloc, sfcsBwPortPoolLimitsVBRLimitFwd=sfcsBwPortPoolLimitsVBRLimitFwd, sfcsCTMQueueConfigInterfaceIndex=sfcsCTMQueueConfigInterfaceIndex, sfcsProxyTransGumbo=sfcsProxyTransGumbo, sfcsProxyTransMpxMethod=sfcsProxyTransMpxMethod, sfcsBwPortPoolStatTable=sfcsBwPortPoolStatTable, sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev=sfcsBwPortPoolTrapMgmtABRConnCntTholdLoRev, sfcsSysSystemCfg=sfcsSysSystemCfg, sfcsSysStatusCurrCnxEntries=sfcsSysStatusCurrCnxEntries, sfcsBwPortPoolLimitsCBRLimitRev=sfcsBwPortPoolLimitsCBRLimitRev, sfcsANIMPicVersion=sfcsANIMPicVersion, sfcsBuffPrioAvailable=sfcsBuffPrioAvailable, sfcsPacketDiscardEngineEntry=sfcsPacketDiscardEngineEntry, sfcsBwPortPoolLimitsUBRLimitRev=sfcsBwPortPoolLimitsUBRLimitRev, sfcsCnxStatsLoToHiHTxCells=sfcsCnxStatsLoToHiHTxCells, sfcsBuffPools=sfcsBuffPools, sfcsCnxCfgOwner=sfcsCnxCfgOwner, sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtUBRAllocBwTholdHiRev, sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtAllocBwTholdLoRev, sfcsProxyTransTable=sfcsProxyTransTable, sfcsPacketDiscardEngineReset=sfcsPacketDiscardEngineReset, sfcsBwPortPoolTrapMgmtPoolIndex=sfcsBwPortPoolTrapMgmtPoolIndex, sfcsANIMConfigNumInterfaces=sfcsANIMConfigNumInterfaces, sfcsBwPortPoolStatPeakBwRev=sfcsBwPortPoolStatPeakBwRev, sfcsCTMQueueStatsTxCellCnt=sfcsCTMQueueStatsTxCellCnt, sfcsConfigNumberANIMS=sfcsConfigNumberANIMS, sfcsSysConfigTable=sfcsSysConfigTable, sfcsANIMPicTLReworkLocation=sfcsANIMPicTLReworkLocation, sfcsProxyReadInCells=sfcsProxyReadInCells, sfcsANIMPicTLDateCode=sfcsANIMPicTLDateCode, sfcsBwPortPoolStatUBRConnCntFwd=sfcsBwPortPoolStatUBRConnCntFwd, sfcsCTMInterfaceConfigInterfaceIndex=sfcsCTMInterfaceConfigInterfaceIndex, sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev=sfcsBwPortPoolTrapMgmtABRAllocBwTholdLoRev, sfcsANIMPicMfgPN=sfcsANIMPicMfgPN, sfcsBwNimsTable=sfcsBwNimsTable, ctsfSwitch=ctsfSwitch, sfcsBwPortPoolStatVBRConnCntRev=sfcsBwPortPoolStatVBRConnCntRev, sfcsProxyConfigGumbo=sfcsProxyConfigGumbo, sfcsProxyReadEntry=sfcsProxyReadEntry, sfcsANIMPicMfgMfgLocation=sfcsANIMPicMfgMfgLocation, sfcsProxyConfigReceiveMode=sfcsProxyConfigReceiveMode, sfcsQueueConfigCongestionThreshold=sfcsQueueConfigCongestionThreshold, sfcsQueueConfigQueueSize=sfcsQueueConfigQueueSize, sfcsCTMInterfaceConfigEntry=sfcsCTMInterfaceConfigEntry, sfcsBwPortPoolStatABRAllocBwRev=sfcsBwPortPoolStatABRAllocBwRev, sfcsPacketDiscardEngineEPDPercentage=sfcsPacketDiscardEngineEPDPercentage, sfcsProxyReadPTI=sfcsProxyReadPTI, sfcsProxyConfigLoad=sfcsProxyConfigLoad, sfcsUPCAdminStatus=sfcsUPCAdminStatus, sfcsPacketDiscardEngineOperStatus=sfcsPacketDiscardEngineOperStatus, ctron=ctron, sfcsProxyTransPTI=sfcsProxyTransPTI, sfcsBwPortsMetric=sfcsBwPortsMetric, sfcsBwPortPoolLimitsBwConstant=sfcsBwPortPoolLimitsBwConstant, sfcsConfigBwCapability=sfcsConfigBwCapability, sfcsQueueStatsInterfaceIndex=sfcsQueueStatsInterfaceIndex, sfcsBwPortPoolStatABRAggPCRRev=sfcsBwPortPoolStatABRAggPCRRev, sfcsConfigOperTime=sfcsConfigOperTime, sfcsBwPortPoolStatAllocBwRev=sfcsBwPortPoolStatAllocBwRev, sfcsCnxCfgCrossConnectHighVci=sfcsCnxCfgCrossConnectHighVci, sfcsANIMPicEntry=sfcsANIMPicEntry, sfcsStatusTdmCellCount=sfcsStatusTdmCellCount, sfcsProxyConfig=sfcsProxyConfig, sfcsCnxErrorRowStatus=sfcsCnxErrorRowStatus, sfcsStatisticsEngine=sfcsStatisticsEngine, sfcsConfig=sfcsConfig, sfcsInterfaceStatsEntry=sfcsInterfaceStatsEntry, sfcsSysStatusTable=sfcsSysStatusTable, sfcsCnxCfgCrossConnectHighIfIndex=sfcsCnxCfgCrossConnectHighIfIndex, sfcsCTMQueueStatsQueuePeakLevel=sfcsCTMQueueStatsQueuePeakLevel, sfcsANIMPicTLPartNumb=sfcsANIMPicTLPartNumb, sfcsANIMConfigANIMType=sfcsANIMConfigANIMType, sfcsBwPortPoolStatsIndex=sfcsBwPortPoolStatsIndex, sfcsBWNimsPortCount=sfcsBWNimsPortCount, sfcsConfigMasterClock2Source=sfcsConfigMasterClock2Source, sfcsBwNimsEntry=sfcsBwNimsEntry, sfcsSysConfigInterfaceCapability=sfcsSysConfigInterfaceCapability, sfcsCTMQueueStatsQueue=sfcsCTMQueueStatsQueue, sfcsInterfaceStatsTable=sfcsInterfaceStatsTable, sfcsStatusCurrCnxEntries=sfcsStatusCurrCnxEntries, sfcsBwPortPoolStatPeakBwFwd=sfcsBwPortPoolStatPeakBwFwd, sfcsProxyReadCLP=sfcsProxyReadCLP, sfcsSystem=sfcsSystem, sfcsANIMConfigToMB=sfcsANIMConfigToMB, sfcsProxyReadInTotalCells=sfcsProxyReadInTotalCells, sfcsCTMInterfaceStatistics=sfcsCTMInterfaceStatistics, sfcsBwPortPoolLimitsABRLimitRev=sfcsBwPortPoolLimitsABRLimitRev, sfcsBwPortPoolStatCBRConnCntFwd=sfcsBwPortPoolStatCBRConnCntFwd, sfcsUPCEngine=sfcsUPCEngine, sfcsPacketDiscardEngineTable=sfcsPacketDiscardEngineTable, sfcsProxyReadVPI=sfcsProxyReadVPI, sfcsBwPortPoolStatAllocBwFwd=sfcsBwPortPoolStatAllocBwFwd, sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev=sfcsBwPortPoolTrapMgmtVBRAllocBwTholdHiRev, sfcsBwPortPoolStatRejConnFwd=sfcsBwPortPoolStatRejConnFwd, sfcsBWMgr=sfcsBWMgr, sfcsConfigMaxStatEntries=sfcsConfigMaxStatEntries, sfcsCnxStatsCrossConnectHighVci=sfcsCnxStatsCrossConnectHighVci, sfcsQueueStatsTxClpCellsDiscarded=sfcsQueueStatsTxClpCellsDiscarded, sfcsCTMQueueConfig=sfcsCTMQueueConfig, sfcsCTMQueueStatsEntry=sfcsCTMQueueStatsEntry, sfcsStatsEngineReset=sfcsStatsEngineReset, sfcsSysConfig=sfcsSysConfig, sfcsInterfaceStatsOverflowDropCellCnt=sfcsInterfaceStatsOverflowDropCellCnt, sfcsCTMQueueConfigCongestionThreshold=sfcsCTMQueueConfigCongestionThreshold, sfcsBuffPrioConnRejThold=sfcsBuffPrioConnRejThold, sfcsCnxCfgTmType=sfcsCnxCfgTmType, sfcsProxyTransANIMIndex=sfcsProxyTransANIMIndex, sfcsStatusEntry=sfcsStatusEntry, sfcsCTMQueueConfigEntry=sfcsCTMQueueConfigEntry, sfcsCTMInterfaceConfig=sfcsCTMInterfaceConfig, sfcsBwPortsIndex=sfcsBwPortsIndex, sfcsBwPortPools=sfcsBwPortPools, sfcsSysConfigTypeofSwitch=sfcsSysConfigTypeofSwitch, sfcsANIMStatsRxCells=sfcsANIMStatsRxCells, sfcsBwPortPoolLimitsCBRLimitFwd=sfcsBwPortPoolLimitsCBRLimitFwd, sfcsBuffPrioMinCtl=sfcsBuffPrioMinCtl, sfcsBwPortPoolLimitsBwAllocStrat=sfcsBwPortPoolLimitsBwAllocStrat, sfcsBuffPrioAssigned=sfcsBuffPrioAssigned, sfcsCnxCfgCrossConnectIndex=sfcsCnxCfgCrossConnectIndex, sfcsBWPortPoolTrapMgmtConnRejThold=sfcsBWPortPoolTrapMgmtConnRejThold, sfcsBuffPrioLoTholdTrap=sfcsBuffPrioLoTholdTrap, sfcsCnxAPIEntry=sfcsCnxAPIEntry, sfcsQueueConfigClpDropThreshold=sfcsQueueConfigClpDropThreshold, sfcsProxyTransCount=sfcsProxyTransCount, sfcsSysStatusCurrStatsEntries=sfcsSysStatusCurrStatsEntries, sfcsBwNims=sfcsBwNims, sfcsCTMQueueStatistics=sfcsCTMQueueStatistics, sfcsUPCEntry=sfcsUPCEntry, sfcsBwPortPoolTrapMgmtEntry=sfcsBwPortPoolTrapMgmtEntry, sfcsCTMQueueStatsInterfaceIndex=sfcsCTMQueueStatsInterfaceIndex, sfcsCTMInterfaceConfigTable=sfcsCTMInterfaceConfigTable, sfcsProxyReadMode=sfcsProxyReadMode, sfcsCnxErrorTable=sfcsCnxErrorTable, sfcsCnxErrorTimeStamp=sfcsCnxErrorTimeStamp, sfcsBwPortPoolStatUBRPrevAdverMAXCTD=sfcsBwPortPoolStatUBRPrevAdverMAXCTD, sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd=sfcsBwPortPoolTrapMgmtVBRConnCntTholdHiFwd, sfcsCTMInterfaceStatsEntry=sfcsCTMInterfaceStatsEntry, sfcsBwPortPoolStatVBRAllocBwFwd=sfcsBwPortPoolStatVBRAllocBwFwd, sfcsProxyConfigTxMemSize=sfcsProxyConfigTxMemSize, sfcsBwPortPoolLimitsVBRLimitRev=sfcsBwPortPoolLimitsVBRLimitRev, sfcsBwPortPoolTrapMgmtTable=sfcsBwPortPoolTrapMgmtTable, sfcsSysStatusAllocatedBw=sfcsSysStatusAllocatedBw, sfcsSysConfigUBR=sfcsSysConfigUBR, sfcsCTMQueueConfigEFCILowThreshold=sfcsCTMQueueConfigEFCILowThreshold, sfcsQueueConfigEPDThreshold=sfcsQueueConfigEPDThreshold, sfcsQueueStatsQueue=sfcsQueueStatsQueue, sfcsConfigOperStatus=sfcsConfigOperStatus, sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtABRAllocBwTholdHiFwd, sfcsBwPortPoolStatCBRConnRejFwd=sfcsBwPortPoolStatCBRConnRejFwd, sfcsBwPortPoolStatABRConnCntFwd=sfcsBwPortPoolStatABRConnCntFwd, sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd=sfcsBwPortPoolTrapMgmtAllocBwTholdHiFwd, sfcsBwPortPoolTrapMgmtPeakBwTholdFwd=sfcsBwPortPoolTrapMgmtPeakBwTholdFwd, sfcsSysConfigPnniAddessingAdmnStatus=sfcsSysConfigPnniAddessingAdmnStatus, sfcsCTMQueueConfigClpDropThreshold=sfcsCTMQueueConfigClpDropThreshold, sfcsCnxStatsCrossConnectIndex=sfcsCnxStatsCrossConnectIndex, sfcsUPCSlotIndex=sfcsUPCSlotIndex, sfcsBwPortPoolStatConnCntFwd=sfcsBwPortPoolStatConnCntFwd, sfcsBwPortPoolStatABRAllocBwFwd=sfcsBwPortPoolStatABRAllocBwFwd, sfcsANIMPicIndex=sfcsANIMPicIndex, sfcsSysStatusCurrUPCEntries=sfcsSysStatusCurrUPCEntries, sfcsProxyTransVCI=sfcsProxyTransVCI, sfcsCnxStatsCrossConnectHighVpi=sfcsCnxStatsCrossConnectHighVpi, sfcsBuffPrioUpTholdTrap=sfcsBuffPrioUpTholdTrap, sfcsANIMPicModuleType=sfcsANIMPicModuleType, sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd=sfcsBwPortPoolTrapMgmtCBRConnCntTholdLoFwd, sfcsBwPortPoolLimitsTable=sfcsBwPortPoolLimitsTable)
