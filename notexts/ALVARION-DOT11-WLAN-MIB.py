#
# PySNMP MIB module ALVARION-DOT11-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alvarion/ALVARION-DOT11-WLAN-MIB
# Produced by pysmi-1.1.8 at Thu Sep  8 10:10:42 2022
# On host fv-az205-597 platform Linux version 5.15.0-1019-azure by user runner
# Using Python version 3.10.6 (main, Aug  3 2022, 07:09:11) [GCC 9.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ObjectIdentity, Integer32, ModuleIdentity, Gauge32, MibIdentifier, Counter64, Counter32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ObjectIdentity", "Integer32", "ModuleIdentity", "Gauge32", "MibIdentifier", "Counter64", "Counter32", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alvarion = MibIdentifier((1, 3, 6, 1, 4, 1, 12394))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1))
breezeAccessVLMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 1))
breezeAccessVLMib.setRevisions(('1907-08-14 11:46',))
if mibBuilder.loadTexts: breezeAccessVLMib.setLastUpdated('0708141146Z')
if mibBuilder.loadTexts: breezeAccessVLMib.setOrganization('Alvarion Ltd.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

alvarionOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4))
brzAccessVLOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1))
brzAccessVLAU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 1))
brzAccessVLSU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 2))
brzAccessVLAU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 4)).setLabel("brzAccessVLAU-BS")
brzAccessVLAU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 5)).setLabel("brzAccessVLAU-SA")
brzAccessVLAUS_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 6)).setLabel("brzAccessVLAUS-BS")
brzAccessVLAUS_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 7)).setLabel("brzAccessVLAUS-SA")
brzAccessAU_EZ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 8)).setLabel("brzAccessAU-EZ")
brzAccessVLSU_6_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 11)).setLabel("brzAccessVLSU-6-1D")
brzAccessVLSU_6_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 12)).setLabel("brzAccessVLSU-6-BD")
brzAccessVLSU_24_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 13)).setLabel("brzAccessVLSU-24-BD")
brzAccessVLSU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 14)).setLabel("brzAccessVLSU-BD")
brzAccessVLSU_54_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 15)).setLabel("brzAccessVLSU-54-BD")
brzAccessVLSU_3_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 16)).setLabel("brzAccessVLSU-3-1D")
brzAccessVLSU_3_4D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 17)).setLabel("brzAccessVLSU-3-4D")
brzAccessVLSU_I = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 18)).setLabel("brzAccessVLSU-I")
brzNetB_BU_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 21)).setLabel("brzNetB-BU-B14")
brzNetB_BU_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 22)).setLabel("brzNetB-BU-B28")
brzNetB_BU_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 23)).setLabel("brzNetB-BU-B100")
brzNetB_RB_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 31)).setLabel("brzNetB-RB-B14")
brzNetB_RB_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 32)).setLabel("brzNetB-RB-B28")
brzNetB_RB_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 33)).setLabel("brzNetB-RB-B100")
brzAccess4900_AU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 41)).setLabel("brzAccess4900-AU-BS")
brzAccess4900_AU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 42)).setLabel("brzAccess4900-AU-SA")
brzAccess4900_SU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 51)).setLabel("brzAccess4900-SU-BD")
brzAccessVLProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3))
brzaccVLSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1))
brzaccVLUnitHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitHwVersion.setStatus('current')
brzaccVLRunningSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningSoftwareVersion.setStatus('current')
brzaccVLRunningFrom = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mainVersion", 1), ("shadowVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningFrom.setStatus('current')
brzaccVLMainVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionNumber.setStatus('current')
brzaccVLMainVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionFileName.setStatus('current')
brzaccVLShadowVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionNumber.setStatus('current')
brzaccVLShadowVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionFileName.setStatus('current')
brzaccVLUnitMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitMacAddress.setStatus('current')
brzaccVLUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("auBS", 1), ("auSA", 2), ("su-6-1D", 3), ("su-6-BD", 4), ("su-24-BD", 5), ("bu-B14", 6), ("bu-B28", 7), ("rb-B14", 8), ("rb-B28", 9), ("su-BD", 10), ("su-54-BD", 11), ("su-3-1D", 12), ("su-3-4D", 13), ("ausBS", 14), ("ausSA", 15), ("auBS4900", 16), ("auSA4900", 17), ("su4900", 18), ("bu-B100", 19), ("rb-B100", 20), ("su-I", 21), ("au-E", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitType.setStatus('current')
brzaccVLAssociatedAU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAssociatedAU.setStatus('current')
brzaccVLNumOfAssociationsSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumOfAssociationsSinceLastReset.setStatus('current')
brzaccVLCurrentNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentNumOfAssociations.setStatus('current')
brzaccVLUnitBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitBootVersion.setStatus('current')
brzaccVLRadioBand = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("band-5-8GHz", 1), ("band-5-4GHz", 2), ("band-4-9GHz", 3), ("band-5-2GHz", 4), ("band-2-4GHz", 5), ("band-5-3GHz", 6), ("band-4-9GHzJapan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRadioBand.setStatus('current')
brzaccVLCurrentEthernetPortState = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("halfDuplexAnd10Mbps", 1), ("fullDuplexAnd10Mbps", 2), ("halfDuplexAnd100Mbps", 3), ("fullDuplexAnd100Mbps", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentEthernetPortState.setStatus('current')
brzaccVLTimeSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTimeSinceLastReset.setStatus('current')
brzaccVLCountryDependentParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18))
brzaccVLCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryCode.setStatus('current')
brzaccVLCountryDependentParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: brzaccVLCountryDependentParamsTable.setStatus('current')
brzaccVLCountryDependentParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCountryDependentParameterTableIdx"))
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterEntry.setStatus('current')
brzaccVLCountryDependentParameterTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterTableIdx.setStatus('current')
brzaccVLCountryDependentParameterFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterFrequencies.setStatus('current')
brzaccVLAllowedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAllowedBandwidth.setStatus('current')
brzaccVLRegulationMaxTxPowerAtAntennaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxTxPowerAtAntennaPort.setStatus('current')
brzaccVLRegulationMaxEIRP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxEIRP.setStatus('current')
brzaccVLMinModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinModulationLevel.setStatus('current')
brzaccVLMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxModulationLevel.setStatus('current')
brzaccVLBurstModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLBurstModeSupport.setStatus('current')
brzaccVLMaximumBurstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumBurstDuration.setStatus('current')
brzaccVLDfsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDfsSupport.setStatus('current')
brzaccVLMinimumHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinimumHwRevision.setStatus('current')
brzaccVLAuthenticationEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAuthenticationEncryptionSupport.setStatus('current')
brzaccVLDataEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataEncryptionSupport.setStatus('current')
brzaccVLAESEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAESEncryptionSupport.setStatus('current')
brzaccVLAntennaGainChange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAntennaGainChange.setStatus('current')
brzaccVLAteTestResults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAteTestResults.setStatus('current')
brzaccVLSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSerialNumber.setStatus('current')
brzaccVLUnitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2))
brzaccVLResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancel", 1), ("resetSystemNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetUnit.setStatus('current')
brzaccVLSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDefaultSettingRequested", 0), ("completeFactory", 1), ("partialFactory", 2), ("completeOperator", 3), ("partialOperator", 4), ("cancelCurrentPendingRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetDefaults.setStatus('current')
brzaccVLUnitName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitName.setStatus('current')
brzaccVLFlashMemoryControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetAndBootFromShadowVersion", 1), ("useRunningVersionAfterReset", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFlashMemoryControl.setStatus('current')
brzaccVLTelnetLogoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTelnetLogoutTimer.setStatus('current')
brzaccVLSaveCurrentConfigurationAsOperatorDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveAsDefaults", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSaveCurrentConfigurationAsOperatorDefaults.setStatus('current')
brzaccVLExitTelnet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("exit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExitTelnet.setStatus('current')
brzaccVLUnitPasswords = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8))
brzaccVLReadOnlyPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLReadOnlyPassword.setStatus('current')
brzaccVLInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInstallerPassword.setStatus('current')
brzaccVLAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdminPassword.setStatus('current')
brzaccVLEthernetNegotiationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("force10MbpsAndHalfDuplex", 1), ("force10MbpsAndFullDuplex", 2), ("force100MbpsAndHalfDuplex", 3), ("force100MbpsAndFullDuplex", 4), ("autoNegotiationMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetNegotiationMode.setStatus('current')
brzaccVLFTPParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10))
brzaccVLFTPServerParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1))
brzaccVLFTPServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerUserName.setStatus('current')
brzaccVLFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerPassword.setStatus('current')
brzaccVLFTPClientIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientIPAddress.setStatus('current')
brzaccVLFTPServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerIpAddress.setStatus('current')
brzaccVLFTPClientMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientMask.setStatus('current')
brzaccVLFTPGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPGatewayIpAddress.setStatus('current')
brzaccVLFTPSwDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2))
brzaccVLFTPSwFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwFileName.setStatus('current')
brzaccVLFTPSwSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwSourceDir.setStatus('current')
brzaccVLFTPDownloadSwFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downloadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPDownloadSwFile.setStatus('current')
brzaccVLConfigurationFileLoading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3))
brzaccVLConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConfigurationFileName.setStatus('current')
brzaccVLOperatorDefaultsFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorDefaultsFileName.setStatus('current')
brzaccVLFTPConfigurationFileSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPConfigurationFileSourceDir.setStatus('current')
brzaccVLExecuteFTPConfigurationFileLoading = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("executeFTPGetConfigurationFile", 1), ("executeFTPPutConfigurationFile", 2), ("executeFTPGetOperatorDefaults", 3), ("executeFTPPutOperatorDefaults", 4), ("cancel", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExecuteFTPConfigurationFileLoading.setStatus('current')
brzaccVLEventLogFileUploading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4))
brzaccVLEventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogFileName.setStatus('current')
brzaccVLEventLogDestinationDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogDestinationDir.setStatus('current')
brzaccVLUploadEventLogFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uploadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUploadEventLogFile.setStatus('current')
brzaccVLLoadingStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProcess", 1), ("successful", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLLoadingStatus.setStatus('current')
brzaccVLEventLogFileParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12))
brzaccVLEventLogPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("message", 1), ("warning", 2), ("error", 3), ("fatal", 4), ("logNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogPolicy.setStatus('current')
brzaccVLEraseEventLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eraseEventLog", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEraseEventLog.setStatus('current')
brzaccVLSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSystemLocation.setStatus('current')
brzaccVLFeatureUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14))
brzaccVLFeatureUpgradeManually = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFeatureUpgradeManually.setStatus('current')
brzaccVLChangeUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLChangeUnitType.setStatus('current')
brzaccLighteAPWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccLighteAPWorkingMode.setStatus('current')
brzaccVLNwMngParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3))
brzaccVLAccessToNwMng = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwMng.setStatus('current')
brzaccVLNwMngFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("activateOnEthernetPort", 2), ("activateOnWirelessPort", 3), ("activateOnBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngFilter.setStatus('current')
mngIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3), )
if mibBuilder.loadTexts: mngIpFilterTable.setStatus('current')
mngIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwMngIpTableIdx"))
if mibBuilder.loadTexts: mngIpFilterEntry.setStatus('current')
brzaccVLNwMngIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngIpAddress.setStatus('current')
brzaccVLNwMngIpTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwMngIpTableIdx.setStatus('current')
brzaccVLDeleteOneNwIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpAddr.setStatus('current')
brzaccVLDeleteAllNwIpAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpAddrs.setStatus('current')
brzaccVLAccessToNwTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwTrap.setStatus('current')
mngTrapTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7), )
if mibBuilder.loadTexts: mngTrapTable.setStatus('current')
mngTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwTrapTableIdx"))
if mibBuilder.loadTexts: mngTrapEntry.setStatus('current')
brzaccVLNwMngTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapCommunity.setStatus('current')
brzaccVLNwMngTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapAddress.setStatus('current')
brzaccVLNwTrapTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwTrapTableIdx.setStatus('current')
brzaccVLDeleteOneTrapAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneTrapAddr.setStatus('current')
brzaccVLDeleteAllTrapAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllTrapAddrs.setStatus('current')
brzaccVLMngIpRangesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10), )
if mibBuilder.loadTexts: brzaccVLMngIpRangesTable.setStatus('current')
brzaccVLMngIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMngIpRangeIdx"))
if mibBuilder.loadTexts: brzaccVLMngIpRangeEntry.setStatus('current')
brzaccVLMngIpRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMngIpRangeIdx.setStatus('current')
brzaccVLMngIpRangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rangeDefinedByStartEndAddr", 1), ("rangeDefinedByStartAddrMask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeFlag.setStatus('current')
brzaccVLMngIpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeStart.setStatus('current')
brzaccVLMngIpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeEnd.setStatus('current')
brzaccVLMngIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeMask.setStatus('current')
brzaccVLDeleteOneNwIpRange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpRange.setStatus('current')
brzaccVLDeleteAllNwIpRanges = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpRanges.setStatus('current')
brzaccVLApClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLApClientIpAddress.setStatus('current')
brzaccVLIpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4))
brzaccVLUnitIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitIpAddress.setStatus('current')
brzaccVLSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubNetMask.setStatus('current')
brzaccVLDefaultGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDefaultGWAddress.setStatus('current')
brzaccVLUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("dhcpOnly", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUseDhcp.setStatus('current')
brzaccVLAccessToDHCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToDHCP.setStatus('current')
brzaccVLRunTimeIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeIPaddr.setStatus('current')
brzaccVLRunTimeSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeSubNetMask.setStatus('current')
brzaccVLRunTimeDefaultIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeDefaultIPGateway.setStatus('current')
brzaccVLBridgeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5))
brzaccVLVLANSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1))
brzaccVLVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanID.setStatus('current')
brzaccVLEthernetLinkType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessLink", 1), ("trunkLink", 2), ("hybridLink", 3), ("serviceProviderLink", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetLinkType.setStatus('current')
brzaccVLManagementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLManagementVlanID.setStatus('current')
brzaccVLVLANForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4))
brzaccVLVlanForwardingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanForwardingSupport.setStatus('current')
brzaccVLVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2), )
if mibBuilder.loadTexts: brzaccVLVlanForwardingTable.setStatus('current')
brzaccVLVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanForwardingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanForwardingEntry.setStatus('current')
brzaccVLVlanForwardingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanForwardingTableIdx.setStatus('current')
brzaccVLVlanIdForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdForwarding.setStatus('current')
brzaccVLVlanRelaying = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5))
brzaccVLVlanRelayingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanRelayingSupport.setStatus('current')
brzaccVLVlanRelayingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: brzaccVLVlanRelayingTable.setStatus('current')
brzaccVLVlanRelayingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanRelayingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanRelayingEntry.setStatus('current')
brzaccVLVlanRelayingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanRelayingTableIdx.setStatus('current')
brzaccVLVlanIdRelaying = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdRelaying.setStatus('current')
brzaccVLVLANTrafficPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6))
brzaccVLVlanDataPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanDataPriority.setStatus('current')
brzaccVLVlanManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanManagementPriority.setStatus('current')
brzaccVLVlanPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanPriorityThreshold.setStatus('current')
brzaccVLVLANQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7))
brzaccVLQinQEthertype = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33025, 36864), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQEthertype.setStatus('current')
brzaccVLQinQProviderVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQProviderVlanID.setStatus('current')
brzaccVLBridgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBridgeAgingTime.setStatus('current')
brzaccVLBroadcastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("broadcastMulticastEnable", 2), ("broadcastEnable", 3), ("multicastEnable", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBroadcastRelaying.setStatus('current')
brzaccVLUnicastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnicastRelaying.setStatus('current')
brzaccVLEthBroadcastFiltering = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("onEthernetOnly", 2), ("onWirelessOnly", 3), ("onBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastFiltering.setStatus('current')
brzaccVLEthBroadcastingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7))
brzaccVLDHCPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPBroadcastOverrideFilter.setStatus('current')
brzaccVLPPPoEBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPPPoEBroadcastOverrideFilter.setStatus('current')
brzaccVLARPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLARPBroadcastOverrideFilter.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("limitOnlyBroadcasts", 2), ("limitMulticastsExceptBroadcasts", 3), ("limitAllMulticasts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterOption.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterThreshold.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterSendTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterSendTrapInterval.setStatus('current')
brzaccVLToSPriorityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8))
brzaccVLToSPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrecedenceThreshold.setStatus('current')
brzaccVLRoamingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRoamingOption.setStatus('current')
brzaccVLMacAddressDenyList = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10))
brzaccVLMacAddressDenyListTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1), )
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTable.setStatus('current')
brzaccVLMacAddressDenyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMacAddressDenyListTableIdx"))
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListEntry.setStatus('current')
brzaccVLMacAddressDenyListTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTableIdx.setStatus('current')
brzaccVLMacAddressDenyListId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListId.setStatus('current')
brzaccVLMacAddressDenyListAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAdd.setStatus('current')
brzaccVLMacAddressDenyListRemove = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListRemove.setStatus('current')
brzaccVLNumberOfMacAddressesInDenyList = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumberOfMacAddressesInDenyList.setStatus('current')
brzaccVLMacAddressDenyListAction = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("denyList", 1), ("allowedList", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAction.setStatus('current')
brzAccVLPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11))
brzaccVLEthernetPortControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetPortControl.setStatus('current')
brzaccVLAirInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6))
brzaccVLESSIDParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1))
brzaccVLESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLESSID.setStatus('current')
brzaccVLOperatorESSIDOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSIDOption.setStatus('current')
brzaccVLOperatorESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSID.setStatus('current')
brzaccVLRunTimeESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeESSID.setStatus('current')
brzaccVLMaximumCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumCellRadius.setStatus('current')
brzaccVLAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneSlot", 1), ("twoSlots", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAIFS.setStatus('current')
brzaccVLWirelessTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessTrapThreshold.setStatus('current')
brzaccVLTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5), )
if mibBuilder.loadTexts: brzaccVLTransmitPowerTable.setStatus('current')
brzaccVLTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLTransmitPowerEntry.setStatus('current')
brzaccVLTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTransmitPowerIdx.setStatus('current')
brzaccVLApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLApplicableModulationLevel.setStatus('current')
brzaccVLMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTxPowerRange.setStatus('current')
brzaccVLTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxPower.setStatus('current')
brzaccVLCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentTxPower.setStatus('current')
brzaccVLMaximumTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6), )
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerTable.setStatus('current')
brzaccVLMaximumTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMaximumTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerEntry.setStatus('current')
brzaccVLMaximumTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerIdx.setStatus('current')
brzaccVLMaxTxApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxTxApplicableModulationLevel.setStatus('current')
brzaccVLDefinedMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDefinedMaximumTxPowerRange.setStatus('current')
brzaccVLMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxTxPower.setStatus('current')
brzaccVLMaxNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociations.setStatus('current')
brzaccVLBestAu = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11))
brzaccVLBestAuSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuSupport.setStatus('current')
brzaccVLBestAuNoOfScanningAttempts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuNoOfScanningAttempts.setStatus('current')
brzaccVLPreferredAuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPreferredAuMacAddress.setStatus('current')
brzaccVLNeighborAuTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4), )
if mibBuilder.loadTexts: brzaccVLNeighborAuTable.setStatus('current')
brzaccVLNeighborAuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNeighborAuIdx"))
if mibBuilder.loadTexts: brzaccVLNeighborAuEntry.setStatus('current')
brzaccVLNeighborAuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuIdx.setStatus('current')
brzaccVLNeighborAuMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMacAdd.setStatus('current')
brzaccVLNeighborAuESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuESSID.setStatus('current')
brzaccVLNeighborAuSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSNR.setStatus('current')
brzaccVLNeighborAuAssocLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("full", 1), ("notFull", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAssocLoadStatus.setStatus('current')
brzaccVLNeighborAuMark = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMark.setStatus('current')
brzaccVLNeighborAuHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuHwRevision.setStatus('current')
brzaccVLNeighborAuCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuCountryCode.setStatus('current')
brzaccVLNeighborAuSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSwVer.setStatus('current')
brzaccVLNeighborAuAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAtpcOption.setStatus('current')
brzaccVLNeighborAuAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAdapModOption.setStatus('current')
brzaccVLNeighborAuBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuBurstModeOption.setStatus('current')
brzaccVLNeighborAuDfsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDfsOption.setStatus('current')
brzaccVLNeighborAuConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuConcatenationOption.setStatus('current')
brzaccVLNeighborAuLearnCountryCodeBySU = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuLearnCountryCodeBySU.setStatus('current')
brzaccVLNeighborAuSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSecurityMode.setStatus('current')
brzaccVLNeighborAuAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAuthOption.setStatus('current')
brzaccVLNeighborAuDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDataEncyptOption.setStatus('current')
brzaccVLNeighborAuPerSuDistanceLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuPerSuDistanceLearning.setStatus('current')
brzaccVLFrequencyDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12))
brzaccVLSubBandLowerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandLowerFrequency.setStatus('obsolete')
brzaccVLSubBandUpperFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandUpperFrequency.setStatus('obsolete')
brzaccVLScanningStep = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("mhz-5", 1), ("mhz-10", 2), ("mhz-20", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLScanningStep.setStatus('current')
brzaccVLFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4), )
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTable.setStatus('current')
brzaccVLFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLFrequencySubsetEntry.setStatus('current')
brzaccVLFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTableIdx.setStatus('current')
brzaccVLFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequency.setStatus('current')
brzaccVLFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetActive.setStatus('current')
brzaccVLFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequencyNew.setStatus('current')
brzaccVLSetSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetSelectedFreqSubset.setStatus('current')
brzaccVLCurrentFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6), )
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTable.setStatus('current')
brzaccVLCurrentFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCurrentFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetEntry.setStatus('current')
brzaccVLCurrentFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTableIdx.setStatus('current')
brzaccVLCurrentFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequency.setStatus('current')
brzaccVLCurrentFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequencyNew.setStatus('current')
brzaccVLCurrentAUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequency.setStatus('current')
brzaccVLCurrentAUOperatingFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequencyNew.setStatus('current')
brzaccVLAUDefinedFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequency.setStatus('current')
brzaccVLAUDefinedFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequencyNew.setStatus('current')
brzaccVLCurrentSUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentSUOperatingFrequency.setStatus('current')
brzaccVLSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10))
brzaccVLSelectSubBandIndex = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSelectSubBandIndex.setStatus('current')
brzaccVLDFSParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11))
brzaccVLDFSOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSOption.setStatus('current')
brzaccVLDFSChannelCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelCheckTime.setStatus('current')
brzaccVLDFSChannelAvoidancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelAvoidancePeriod.setStatus('current')
brzaccVLDFSSuWaitingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSSuWaitingOption.setStatus('current')
brzaccVLDFSClearRadarDetectedChannelsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("cancel", 1), ("clearRadarChannels", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSClearRadarDetectedChannelsAfterReset.setStatus('current')
brzaccVLDFSRadarDetectionChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7), )
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsTable.setStatus('current')
brzaccVLDFSRadarDetectionChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSChannelIdx"))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsEntry.setStatus('current')
brzaccVLDFSChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelIdx.setStatus('current')
brzaccVLDFSChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequency.setStatus('current')
brzaccVLDFSChannelRadarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radarFree", 1), ("adjacentToRadar", 2), ("radarDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelRadarStatus.setStatus('current')
brzaccVLDFSChannelFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequencyNew.setStatus('current')
brzaccVLDFSMinimumPulsesToDetect = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMinimumPulsesToDetect.setStatus('current')
brzaccVLDFSChannelReuseParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9))
brzaccVLDFSChannelReuseOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelReuseOption.setStatus('current')
brzaccVLDFSRadarActivityAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSRadarActivityAssessmentPeriod.setStatus('current')
brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod.setStatus('current')
brzaccVLCountryCodeLearningBySU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeLearningBySU.setStatus('current')
brzaccVLAutoSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15))
brzaccVLAutoSubBandSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setAllSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandSelectedFreqSubset.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2), )
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetTable.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetBandIdx"), (0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetFrequencyIdx"))
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetEntry.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetBandIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetBandIdx.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetFrequencyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequencyIdx.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetActive.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequency.setStatus('current')
brzaccVLATPC = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13))
brzaccVLAtpcOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAtpcOption.setStatus('current')
brzaccVLDeltaFromMinSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeltaFromMinSNRLevel.setStatus('current')
brzaccVLMinimumSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumSNRLevel.setStatus('current')
brzaccVLMinimumIntervalBetweenATPCMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumIntervalBetweenATPCMessages.setStatus('current')
brzaccVLPowerLevelSteps = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPowerLevelSteps.setStatus('current')
brzaccVLCellDistanceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15))
brzaccVLCellDistanceMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCellDistanceMode.setStatus('current')
brzaccVLFairnessFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFairnessFactor.setStatus('current')
brzaccVLMeasuredCellDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMeasuredCellDistance.setStatus('current')
brzaccVLUnitWithMaxDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitWithMaxDistance.setStatus('current')
brzaccVLPerSuDistanceLearning = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPerSuDistanceLearning.setStatus('current')
brzaccVLScanningMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLScanningMode.setStatus('current')
brzaccVLAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAntennaGain.setStatus('current')
brzaccVLSpectrumAnalysisParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18))
brzaccVLSpectrumAnalysisChannelScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisChannelScanPeriod.setStatus('current')
brzaccVLSpectrumAnalysisScanCycles = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisScanCycles.setStatus('current')
brzaccVLAutomaticChannelSelection = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutomaticChannelSelection.setStatus('current')
brzaccVLSpectrumAnalysisActivation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("activateNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisActivation.setStatus('current')
brzaccVLSpectrumAnalysisStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisStatus.setStatus('current')
brzaccVLResetSpectrumCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetSpectrumCounters.setStatus('current')
brzaccVLSpectrumAnalysisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7), )
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTable.setStatus('current')
brzaccVLSpectrumAnalysisInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSpectrumAnalysisInformationTableIdx"))
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationEntry.setStatus('current')
brzaccVLSpectrumAnalysisInformationTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTableIdx.setStatus('current')
brzaccVLSpectrumAnalysisInformationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationChannel.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalCount.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalSNR.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalWidth.setStatus('current')
brzaccVLSpectrumAnalysisInformationOFDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMFrames.setStatus('current')
brzaccVLMaxNumOfAssociationsLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociationsLimit.setStatus('current')
brzaccVLDisassociate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20))
brzaccVLDisassociateAllSUs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("disassociateAllSUs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateAllSUs.setStatus('current')
brzaccVLDisassociateSuByMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateSuByMacAddress.setStatus('current')
brzaccVLTxControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("ethernetStatusControl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxControl.setStatus('current')
brzaccVLLostBeaconsWatchdogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLostBeaconsWatchdogThreshold.setStatus('current')
brzaccVLTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTransmitPower.setStatus('current')
brzaccVLMaximumTxPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumTxPower.setStatus('current')
brzaccVLCountryCodeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25))
brzaccVLCountryCodeReApply = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("reapply", 1), ("cancel", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeReApply.setStatus('current')
brzaccVLServiceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7))
brzaccVLMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirDownlink.setStatus('current')
brzaccVLMirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirUplink.setStatus('current')
brzaccVLCirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirDownlink.setStatus('current')
brzaccVLCirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirUplink.setStatus('current')
brzaccVLMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxDelay.setStatus('current')
brzaccVLMaxBurstDuration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxBurstDuration.setStatus('current')
brzaccVLGracefulDegradationLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLGracefulDegradationLimit.setStatus('current')
brzaccVLMirOnlyOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirOnlyOption.setStatus('current')
brzaccVLTrafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10))
brzaccVLTrafficPriVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1))
brzaccVLVLANPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVLANPriorityThreshold.setStatus('current')
brzaccVLTrafficPriIPToS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2))
brzaccVLToSPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipPrecedence", 2), ("dSCP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrioritizationOption.setStatus('current')
brzaccVLIPPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPPrecedenceThreshold.setStatus('current')
brzaccVLIPDSCPThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPDSCPThreshold.setStatus('current')
brzaccVLTrafficPriUdpTcpPortRange = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3))
brzaccVLUdpTcpPortRangePrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("udpOnly", 2), ("tcpOnly", 3), ("udpANDtcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpTcpPortRangePrioritizationOption.setStatus('current')
brzaccVLUdpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2))
brzaccVLUdpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortPriRTPRTCP.setStatus('current')
brzaccVLUdpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeNum.setStatus('current')
brzaccVLUdpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3), )
if mibBuilder.loadTexts: brzaccVLUdpPortRangeTable.setStatus('current')
brzaccVLUdpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLUdpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEntry.setStatus('current')
brzaccVLUdpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeStart.setStatus('current')
brzaccVLUdpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEnd.setStatus('current')
brzaccVLUdpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeIdx.setStatus('current')
brzaccVLUdpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeAdd.setStatus('current')
brzaccVLUdpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDelete.setStatus('current')
brzaccVLUdpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDeleteAll.setStatus('current')
brzaccVLTcpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3))
brzaccVLTcpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortPriRTPRTCP.setStatus('current')
brzaccVLTcpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeNum.setStatus('current')
brzaccVLTcpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3), )
if mibBuilder.loadTexts: brzaccVLTcpPortRangeTable.setStatus('current')
brzaccVLTcpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTcpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEntry.setStatus('current')
brzaccVLTcpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeStart.setStatus('current')
brzaccVLTcpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEnd.setStatus('current')
brzaccVLTcpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeIdx.setStatus('current')
brzaccVLTcpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeAdd.setStatus('current')
brzaccVLTcpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDelete.setStatus('current')
brzaccVLTcpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDeleteAll.setStatus('current')
brzaccVLWirelessLinkPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4))
brzaccVLWirelessLinkPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessLinkPrioritizationOption.setStatus('current')
brzaccVLlowPriorityAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLlowPriorityAIFS.setStatus('current')
brzaccVLHWRetriesHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesHighPriority.setStatus('current')
brzaccVLHWRetriesLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesLowPriority.setStatus('current')
brzaccVLAUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationHighPriority.setStatus('current')
brzaccVLAUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationLowPriority.setStatus('current')
brzaccVLSUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationHighPriority.setStatus('current')
brzaccVLSUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationLowPriority.setStatus('current')
brzaccVLDrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11))
brzaccVLDrapSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapSupport.setStatus('current')
brzaccVLDrapUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapUdpPort.setStatus('current')
brzaccVLDrapMaxNumberOfVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapMaxNumberOfVoiceCalls.setStatus('current')
brzaccVLDrapTTL = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapTTL.setStatus('current')
brzaccVLDrapNoOfActiveVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapNoOfActiveVoiceCalls.setStatus('current')
brzaccVLLowPriorityTrafficMinimumPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLowPriorityTrafficMinimumPercent.setStatus('current')
brzaccVLSUPMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUPMirDownlink.setStatus('current')
brzaccVLMIRThresholdPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMIRThresholdPercent.setStatus('current')
brzaccVLUserFilterParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8))
brzaccVLUserFilterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("ipOnly", 2), ("userDefinedAddrOnly", 3), ("pPPoEOnly", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUserFilterOption.setStatus('current')
brzaccVLIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2), )
if mibBuilder.loadTexts: brzaccVLIpFilterTable.setStatus('current')
brzaccVLIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLIpFilterIdx"))
if mibBuilder.loadTexts: brzaccVLIpFilterEntry.setStatus('current')
brzaccVLIpID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpID.setStatus('current')
brzaccVLMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaskID.setStatus('current')
brzaccVLIpFilterRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpFilterRange.setStatus('current')
brzaccVLIpFilterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLIpFilterIdx.setStatus('current')
brzaccVLDeleteOneUserFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("deletefirstEntry", 1), ("deletesecondEntry", 2), ("deletethirdEntry", 3), ("deletefourthEntry", 4), ("deletefifthEntry", 5), ("deletesixthEntry", 6), ("deleteseventhEntry", 7), ("deleteeighthEntry", 8), ("cancelOperation", 9), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneUserFilter.setStatus('current')
brzaccVLDeleteAllUserFilters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllUserFilters.setStatus('current')
brzaccVLDHCPUnicastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPUnicastOverrideFilter.setStatus('current')
brzaccVLSecurityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9))
brzaccVLAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationAlgorithm.setStatus('current')
brzaccVLSUDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUDefaultKeyID.setStatus('current')
brzaccVLDataEncryptionOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDataEncryptionOption.setStatus('current')
brzaccVLAUDefaultMulticastKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefaultMulticastKeyID.setStatus('current')
brzaccVLSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSecurityMode.setStatus('current')
brzaccVLAuthenticationPromiscuousMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationPromiscuousMode.setStatus('current')
brzaccVLKey1 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey1.setStatus('current')
brzaccVLKey2 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey2.setStatus('current')
brzaccVLKey3 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey3.setStatus('current')
brzaccVLKey4 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey4.setStatus('current')
brzaccVLSecurityModeSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSecurityModeSupport.setStatus('current')
brzaccVLPerformanceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10))
brzaccVLRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRTSThreshold.setStatus('current')
brzaccVLMinContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinContentionWindow.setStatus('current')
brzaccVLMaxContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxContentionWindow.setStatus('current')
brzaccVLMaximumModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumModulationLevel.setStatus('current')
brzaccVLMulticastModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMulticastModulationLevel.setStatus('current')
brzaccVLAvgSNRMemoryFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAvgSNRMemoryFactor.setStatus('current')
brzaccVLHardwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHardwareRetries.setStatus('current')
brzaccVLAdaptiveModulationParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9))
brzaccVLAdaptiveModulationAlgorithmOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationAlgorithmOption.setStatus('current')
brzaccVLSoftwareRetrySupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSoftwareRetrySupport.setStatus('current')
brzaccVLNumOfSoftwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNumOfSoftwareRetries.setStatus('current')
brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages.setStatus('current')
brzaccVLAdaptiveModulationDecisionThresholds = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationDecisionThresholds.setStatus('current')
brzaccVLBurstMode = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10))
brzaccVLBurstModeOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("blocked", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstModeOption.setStatus('current')
brzaccVLBurstInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstInterval.setStatus('current')
brzaccVLConcatenationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11))
brzaccVLConcatenationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationOption.setStatus('current')
brzaccVLConcatenationMaximumNumberOfFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaximumNumberOfFrames.setStatus('current')
brzaccVLConcatenationMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaxFrameSize.setStatus('current')
brzaccVLSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11))
brzaccVLAverageReceiveSNR = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageReceiveSNR.setStatus('current')
brzaccVLTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2))
brzaccVLResetTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetTrafficCounters.setStatus('current')
brzaccVLEthCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2))
brzaccVLWirelessLinkCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3))
brzaccVLWirelessLinkEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4))
brzaccVLPerModulationLevelCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5))
brzaccVLResetPerModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCounters", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetPerModulationLevelCounters.setStatus('current')
brzaccVLSUPerModulationLevelCountersTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2), )
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTable.setStatus('current')
brzaccVLSUPerModulationLevelCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSUPerModulationLevelCountersTableIdx"))
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersEntry.setStatus('current')
brzaccVLSUPerModulationLevelCountersTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTableIdx.setStatus('current')
brzaccVLSUPerModulationLevelCountersApplicableModLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersApplicableModLevel.setStatus('current')
brzaccVLSUPerModulationLevelCountersTxSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxSuccess.setStatus('current')
brzaccVLSUPerModulationLevelCountersTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxFailed.setStatus('current')
brzaccVLAverageModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageModulationLevel.setStatus('current')
brzaccVLTotalRxFramesViaEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesViaEthernet.setStatus('current')
brzaccVLTxWirelessToEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTxWirelessToEthernet.setStatus('current')
brzaccVLTxFramesToWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1))
brzaccVLAUBeaconsToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAUBeaconsToWireless.setStatus('current')
brzaccVLDataAndOtherMngFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataAndOtherMngFramesToWireless.setStatus('current')
brzaccVLTotalTxFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxFramesToWireless.setStatus('current')
brzaccVLTotalTransmittedUnicasts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedUnicasts.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesDouble.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesSingle.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesMore.setStatus('current')
brzaccVLTotalRxFramesFromWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesFromWireless.setStatus('current')
brzaccVLTotalRetransmittedFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRetransmittedFrames.setStatus('current')
brzaccVLFramesDropped = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDropped.setStatus('current')
brzaccVLDataFramesSubmittedToBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5))
brzaccVLFramesSubmittedViaHighQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaHighQueue.setStatus('current')
brzaccVLFramesSubmittedViaMidQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaMidQueue.setStatus('current')
brzaccVLFramesSubmittedViaLowQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaLowQueue.setStatus('current')
brzaccVLTotalNoOfDataFramesSubmitted = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalNoOfDataFramesSubmitted.setStatus('current')
brzaccVLTotalRecievedDataFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRecievedDataFrames.setStatus('current')
brzaccVLRecievedBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRecievedBadFrames.setStatus('current')
brzaccVLNoOfDuplicateFramesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfDuplicateFramesDiscarded.setStatus('current')
brzaccVLNoOfInternallyDiscardedMirCir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfInternallyDiscardedMirCir.setStatus('current')
brzaccVLTotalRxConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesDouble.setStatus('current')
brzaccVLTotalRxConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesSingle.setStatus('current')
brzaccVLTotalRxConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesMore.setStatus('current')
brzaccVLTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1))
brzaccVLDroppedFrameEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDroppedFrameEvents.setStatus('current')
brzaccVLFramesDelayedDueToSwRetry = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDelayedDueToSwRetry.setStatus('current')
brzaccVLUnderrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnderrunEvents.setStatus('current')
brzaccVLOthersTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOthersTxEvents.setStatus('current')
brzaccVLTotalTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxEvents.setStatus('current')
brzaccVLRxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2))
brzaccVLPhyErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLPhyErrors.setStatus('current')
brzaccVLCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCRCErrors.setStatus('current')
brzaccVLOverrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOverrunEvents.setStatus('current')
brzaccVLRxDecryptEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRxDecryptEvents.setStatus('current')
brzaccVLTotalRxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxEvents.setStatus('current')
brzaccVLMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5))
brzaccVLAUMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1))
brzaccVLAUAdbResetAllModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUAdbResetAllModulationLevelCounters.setStatus('current')
brzaccVLAUAdbTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2), )
if mibBuilder.loadTexts: brzaccVLAUAdbTable.setStatus('current')
brzaccVLAUAdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAdbIndex"))
if mibBuilder.loadTexts: brzaccVLAUAdbEntry.setStatus('current')
brzaccVLAdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbIndex.setStatus('current')
brzaccVLAdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMacAddress.setStatus('current')
brzaccVLAdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("authenticated", 2), ("notAuthenticated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbStatus.setStatus('current')
brzaccVLAdbSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSwVersion.setStatus('current')
brzaccVLAdbSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSNR.setStatus('current')
brzaccVLAdbMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMaxModulationLevel.setStatus('current')
brzaccVLAdbTxFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFramesTotal.setStatus('current')
brzaccVLAdbDroppedFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDroppedFramesTotal.setStatus('current')
brzaccVLAdbTxSuccessModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel1.setStatus('current')
brzaccVLAdbTxSuccessModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel2.setStatus('current')
brzaccVLAdbTxSuccessModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel3.setStatus('current')
brzaccVLAdbTxSuccessModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel4.setStatus('current')
brzaccVLAdbTxSuccessModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel5.setStatus('current')
brzaccVLAdbTxSuccessModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel6.setStatus('current')
brzaccVLAdbTxSuccessModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel7.setStatus('current')
brzaccVLAdbTxSuccessModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel8.setStatus('current')
brzaccVLAdbTxFailedModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel1.setStatus('current')
brzaccVLAdbTxFailedModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel2.setStatus('current')
brzaccVLAdbTxFailedModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel3.setStatus('current')
brzaccVLAdbTxFailedModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel4.setStatus('current')
brzaccVLAdbTxFailedModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel5.setStatus('current')
brzaccVLAdbTxFailedModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel6.setStatus('current')
brzaccVLAdbTxFailedModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel7.setStatus('current')
brzaccVLAdbTxFailedModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel8.setStatus('current')
brzaccVLAdbCirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirTx.setStatus('current')
brzaccVLAdbMirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirTx.setStatus('current')
brzaccVLAdbCirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirRx.setStatus('current')
brzaccVLAdbMirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirRx.setStatus('current')
brzaccVLAdbCirMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirMaxDelay.setStatus('current')
brzaccVLAdbDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDistance.setStatus('current')
brzaccVLAdbHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbHwRevision.setStatus('current')
brzaccVLAdbCpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCpldVer.setStatus('current')
brzaccVLAdbCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCountryCode.setStatus('current')
brzaccVLAdbBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBootVer.setStatus('current')
brzaccVLAdbAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAtpcOption.setStatus('current')
brzaccVLAdbAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAdapModOption.setStatus('current')
brzaccVLAdbBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBurstModeOption.setStatus('current')
brzaccVLAdbConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbConcatenationOption.setStatus('current')
brzaccVLAdbSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aes", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSecurityMode.setStatus('current')
brzaccVLAdbAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAuthOption.setStatus('current')
brzaccVLAdbDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDataEncyptOption.setStatus('current')
brzaccVLAdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAge.setStatus('current')
brzaccVLAdbUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbUnitName.setStatus('current')
brzaccVLUpLinkQualityIndicator = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6))
brzaccVLMeasureUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMeasureUpLinkQualityIndicator.setStatus('current')
brzaccVLReadUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLReadUpLinkQualityIndicator.setStatus('current')
brzaccVLUpLinkQualityIndicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullTest", 1), ("limitedTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUpLinkQualityIndicatorStatus.setStatus('current')
brzaccVLMacPinpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7))
brzaccVLMacPinpointTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1), )
if mibBuilder.loadTexts: brzaccVLMacPinpointTable.setStatus('current')
brzaccVLMacPinpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "mptEthernetStationMACAddress"))
if mibBuilder.loadTexts: brzaccVLMacPinpointEntry.setStatus('current')
mptEthernetStationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptEthernetStationMACAddress.setStatus('current')
mptUnitMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptUnitMACAddress.setStatus('current')
brzaccVLDrapGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8), )
if mibBuilder.loadTexts: brzaccVLDrapGatewaysTable.setStatus('current')
brzaccVLDrapGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDrapGatewayIndex"))
if mibBuilder.loadTexts: brzaccVLDrapGatewayEntry.setStatus('current')
brzaccVLDrapGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIndex.setStatus('current')
brzaccVLDrapGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIP.setStatus('current')
brzaccVLDrapGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 11, 255))).clone(namedValues=NamedValues(("vgDataVoice", 4), ("vgData1Voice1", 5), ("vgData4Voice2", 6), ("vgDataVoice2", 7), ("ngData4Wireless", 11), ("vgUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayType.setStatus('current')
brzaccVLDrapGatewayNoOfActiveVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayNoOfActiveVoiceCalls.setStatus('current')
brzaccVLTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14))
brzaccVLTrapSUMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSUMacAddr.setStatus('current')
brzaccVLTrapText = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapText.setStatus('current')
brzaccVLTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapToggle.setStatus('current')
brzaccVLTrapParameterChanged = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cirOrMir", 1), ("ipFilter", 2), ("vlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapParameterChanged.setStatus('current')
brzaccVLTrapAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notLoggedIn", 1), ("readOnly", 2), ("installer", 3), ("administrator", 4), ("factory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapAccessRights.setStatus('current')
brzaccVLTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("telnetLogin", 3), ("telnetLogout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapLog.setStatus('current')
brzaccVLTrapTelnetUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapTelnetUserIpAddress.setStatus('current')
brzaccVLTrapRTx = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapRTx.setStatus('current')
brzaccVLTrapFtpOrTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapFtpOrTftpStatus.setStatus('current')
brzaccVLDFSMoveFreq = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreq.setStatus('current')
brzaccVLDFSMoveFreqNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreqNew.setStatus('current')
brzaccVLEthBroadcastThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLEthBroadcastThresholdExceeded.setStatus('current')
brzaccVLTrapSubscriberType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 14, 24, 28, 54, 100))).clone(namedValues=NamedValues(("unknownSubscriberType", 0), ("su-3", 3), ("su-6", 6), ("rb-14", 14), ("su-24", 24), ("rb-28", 28), ("su-54", 54), ("rb-100", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSubscriberType.setStatus('current')
brzaccVLTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapMACAddress.setStatus('current')
brzaccVLNewUnitTypeTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewUnitTypeTrap.setStatus('current')
brzaccVLTrapSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSWVersion.setStatus('current')
brzaccVLSUassociatedAUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 2)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLSUassociatedAUTRAP.setStatus('current')
brzaccVLAUdisassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 3)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLAUdisassociatedTRAP.setStatus('current')
brzaccVLAUagingTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 4)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"))
if mibBuilder.loadTexts: brzaccVLAUagingTRAP.setStatus('current')
brzaccVLSUassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 6)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLAssociatedAU"))
if mibBuilder.loadTexts: brzaccVLSUassociatedTRAP.setStatus('current')
brzaccVLAUwirelessQualityTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 20)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapRTx"))
if mibBuilder.loadTexts: brzaccVLAUwirelessQualityTRAP.setStatus('current')
brzaccVLPowerUpFromReset = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 101)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLPowerUpFromReset.setStatus('current')
brzaccVLTelnetStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 102)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapLog"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapAccessRights"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapTelnetUserIpAddress"))
if mibBuilder.loadTexts: brzaccVLTelnetStatusTRAP.setStatus('current')
brzaccVLParameterChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 103)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapParameterChanged"))
if mibBuilder.loadTexts: brzaccVLParameterChangedTRAP.setStatus('current')
brzaccVLLoadingStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 104)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapFtpOrTftpStatus"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLLoadingStatusTRAP.setStatus('current')
brzaccVLPromiscuousModeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 105)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"))
if mibBuilder.loadTexts: brzaccVLPromiscuousModeTRAP.setStatus('current')
brzaccVLDFSRadarDetecetedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 106))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetecetedTRAP.setStatus('current')
brzaccVLDFSFrequcnyTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 107)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreq"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreqNew"))
if mibBuilder.loadTexts: brzaccVLDFSFrequcnyTRAP.setStatus('current')
brzaccVLDFSNoFreeChannelsExistsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 108))
if mibBuilder.loadTexts: brzaccVLDFSNoFreeChannelsExistsTRAP.setStatus('current')
brzaccVLEthBroadcastMulticatLimiterTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 109)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLEthBroadcastThresholdExceeded"))
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticatLimiterTRAP.setStatus('current')
brzaccVLAUSUnsupportedSubscriberTypeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 110)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSubscriberType"))
if mibBuilder.loadTexts: brzaccVLAUSUnsupportedSubscriberTypeTRAP.setStatus('current')
brzaccVLUnitTypeChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 111)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapMACAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLNewUnitTypeTrap"))
if mibBuilder.loadTexts: brzaccVLUnitTypeChangedTRAP.setStatus('current')
brzaccVLWLPrioritizationNotSupportedBySUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 112)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSWVersion"))
if mibBuilder.loadTexts: brzaccVLWLPrioritizationNotSupportedBySUTRAP.setStatus('current')
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLAdbAtpcOption=brzaccVLAdbAtpcOption, brzaccVLCountryDependentParameters=brzaccVLCountryDependentParameters, brzaccVLUdpPortRangeEntry=brzaccVLUdpPortRangeEntry, brzaccVLCirDownlink=brzaccVLCirDownlink, brzaccVLAdaptiveModulationAlgorithmOption=brzaccVLAdaptiveModulationAlgorithmOption, brzaccVLSiteSurvey=brzaccVLSiteSurvey, brzaccVLSecurityMode=brzaccVLSecurityMode, brzaccVLOperatorDefaultsFileName=brzaccVLOperatorDefaultsFileName, brzaccVLDataAndOtherMngFramesToWireless=brzaccVLDataAndOtherMngFramesToWireless, brzAccessVLSU_3_1D=brzAccessVLSU_3_1D, brzaccVLAutoSubBandFrequencySubsetTable=brzaccVLAutoSubBandFrequencySubsetTable, brzaccVLAdaptiveModulationParams=brzaccVLAdaptiveModulationParams, brzaccVLTelnetStatusTRAP=brzaccVLTelnetStatusTRAP, brzaccVLVlanRelayingEntry=brzaccVLVlanRelayingEntry, brzaccVLSpectrumAnalysisActivation=brzaccVLSpectrumAnalysisActivation, brzaccVLAUSUnsupportedSubscriberTypeTRAP=brzaccVLAUSUnsupportedSubscriberTypeTRAP, brzaccVLAUAdbResetAllModulationLevelCounters=brzaccVLAUAdbResetAllModulationLevelCounters, brzaccVLUserFilterOption=brzaccVLUserFilterOption, brzaccVLDFSMoveFreqNew=brzaccVLDFSMoveFreqNew, products=products, brzaccVLUnitTypeChangedTRAP=brzaccVLUnitTypeChangedTRAP, brzaccVLTotalRxFramesViaEthernet=brzaccVLTotalRxFramesViaEthernet, brzaccVLResetUnit=brzaccVLResetUnit, brzaccVLLoadingStatus=brzaccVLLoadingStatus, brzaccVLEventLogFileUploading=brzaccVLEventLogFileUploading, brzaccVLToSPriorityParameters=brzaccVLToSPriorityParameters, brzaccVLAdbTxFailedModLevel4=brzaccVLAdbTxFailedModLevel4, brzaccVLHWRetriesLowPriority=brzaccVLHWRetriesLowPriority, brzaccVLAdaptiveModulationDecisionThresholds=brzaccVLAdaptiveModulationDecisionThresholds, brzaccVLUnitControl=brzaccVLUnitControl, alvarionOID=alvarionOID, brzaccVLShadowVersionNumber=brzaccVLShadowVersionNumber, brzaccVLBurstModeOption=brzaccVLBurstModeOption, brzaccVLDFSChannelFrequency=brzaccVLDFSChannelFrequency, brzaccVLBestAu=brzaccVLBestAu, alvarion=alvarion, brzaccVLMaxTxApplicableModulationLevel=brzaccVLMaxTxApplicableModulationLevel, brzaccVLSpectrumAnalysisInformationChannel=brzaccVLSpectrumAnalysisInformationChannel, brzaccVLMaximumTransmitPowerTable=brzaccVLMaximumTransmitPowerTable, brzaccVLUnitHwVersion=brzaccVLUnitHwVersion, brzaccVLPowerLevelSteps=brzaccVLPowerLevelSteps, brzaccVLSpectrumAnalysisChannelScanPeriod=brzaccVLSpectrumAnalysisChannelScanPeriod, brzaccVLSysInfo=brzaccVLSysInfo, brzaccVLSaveCurrentConfigurationAsOperatorDefaults=brzaccVLSaveCurrentConfigurationAsOperatorDefaults, brzaccVLTxControl=brzaccVLTxControl, brzaccVLWirelessLinkPrioritization=brzaccVLWirelessLinkPrioritization, brzaccVLAtpcOption=brzaccVLAtpcOption, brzaccVLDrapGatewayIndex=brzaccVLDrapGatewayIndex, brzAccessAU_EZ=brzAccessAU_EZ, brzaccVLMacAddressDenyListAdd=brzaccVLMacAddressDenyListAdd, brzaccVLTrapSUMacAddr=brzaccVLTrapSUMacAddr, brzaccVLAdbTxFailedModLevel5=brzaccVLAdbTxFailedModLevel5, brzaccVLAdbTxSuccessModLevel3=brzaccVLAdbTxSuccessModLevel3, brzaccVLRunningSoftwareVersion=brzaccVLRunningSoftwareVersion, brzaccVLDFSChannelAvoidancePeriod=brzaccVLDFSChannelAvoidancePeriod, brzaccVLMainVersionFileName=brzaccVLMainVersionFileName, brzaccVLLostBeaconsWatchdogThreshold=brzaccVLLostBeaconsWatchdogThreshold, brzaccVLUdpPortRangeEnd=brzaccVLUdpPortRangeEnd, brzaccVLTotalRxConcatenatedFramesMore=brzaccVLTotalRxConcatenatedFramesMore, brzaccVLTcpPortRangeNum=brzaccVLTcpPortRangeNum, brzaccVLAdbAdapModOption=brzaccVLAdbAdapModOption, brzaccVLDeleteOneTrapAddr=brzaccVLDeleteOneTrapAddr, brzaccVLUdpPortRangeIdx=brzaccVLUdpPortRangeIdx, brzaccVLTotalRxConcatenatedFramesSingle=brzaccVLTotalRxConcatenatedFramesSingle, brzaccVLTrapMACAddress=brzaccVLTrapMACAddress, brzaccVLTransmitPowerTable=brzaccVLTransmitPowerTable, brzaccVLEthBroadcastFiltering=brzaccVLEthBroadcastFiltering, brzaccVLBridgeParameters=brzaccVLBridgeParameters, brzaccVLTrapParameterChanged=brzaccVLTrapParameterChanged, brzaccVLChangeUnitType=brzaccVLChangeUnitType, brzaccVLVLANPriorityThreshold=brzaccVLVLANPriorityThreshold, brzaccVLFeatureUpgradeManually=brzaccVLFeatureUpgradeManually, brzaccVLOperatorESSID=brzaccVLOperatorESSID, brzaccVLAUBurstDurationLowPriority=brzaccVLAUBurstDurationLowPriority, brzaccVLFrequencySubsetEntry=brzaccVLFrequencySubsetEntry, brzaccVLTraps=brzaccVLTraps, brzaccVLFrequencyDefinition=brzaccVLFrequencyDefinition, brzaccVLAuthenticationPromiscuousMode=brzaccVLAuthenticationPromiscuousMode, brzaccVLDFSChannelIdx=brzaccVLDFSChannelIdx, brzaccVLUnitType=brzaccVLUnitType, brzaccVLAdbDataEncyptOption=brzaccVLAdbDataEncyptOption, brzaccVLDrap=brzaccVLDrap, brzaccVLNeighborAuBurstModeOption=brzaccVLNeighborAuBurstModeOption, brzaccVLCurrentTxPower=brzaccVLCurrentTxPower, brzaccVLLowPriorityTrafficMinimumPercent=brzaccVLLowPriorityTrafficMinimumPercent, brzNetB_BU_B28=brzNetB_BU_B28, brzaccVLVlanManagementPriority=brzaccVLVlanManagementPriority, brzaccVLEthCounters=brzaccVLEthCounters, brzaccVLRegulationMaxEIRP=brzaccVLRegulationMaxEIRP, brzaccVLTxWirelessToEthernet=brzaccVLTxWirelessToEthernet, brzaccVLMacAddressDenyListEntry=brzaccVLMacAddressDenyListEntry, brzaccVLTrafficStatistics=brzaccVLTrafficStatistics, brzaccVLTotalRxConcatenatedFramesDouble=brzaccVLTotalRxConcatenatedFramesDouble, brzaccVLDFSNoFreeChannelsExistsTRAP=brzaccVLDFSNoFreeChannelsExistsTRAP, brzaccVLTotalRxEvents=brzaccVLTotalRxEvents, brzaccVLMaxNumOfAssociations=brzaccVLMaxNumOfAssociations, brzaccVLTcpPortRangeDeleteAll=brzaccVLTcpPortRangeDeleteAll, brzaccVLNeighborAuAuthOption=brzaccVLNeighborAuAuthOption, brzaccVLAdbTxSuccessModLevel4=brzaccVLAdbTxSuccessModLevel4, brzaccVLDisassociateSuByMacAddress=brzaccVLDisassociateSuByMacAddress, brzaccVLDrapGatewayIP=brzaccVLDrapGatewayIP, DisplayString=DisplayString, brzaccVLAESEncryptionSupport=brzaccVLAESEncryptionSupport, brzaccVLSerialNumber=brzaccVLSerialNumber, brzaccVLMaximumCellRadius=brzaccVLMaximumCellRadius, brzaccVLAutoSubBandFrequencySubsetFrequency=brzaccVLAutoSubBandFrequencySubsetFrequency, brzaccVLDfsSupport=brzaccVLDfsSupport, brzNetB_RB_B100=brzNetB_RB_B100, brzaccVLVlanForwardingTableIdx=brzaccVLVlanForwardingTableIdx, brzaccVLAdbMirTx=brzaccVLAdbMirTx, brzaccVLAUdisassociatedTRAP=brzaccVLAUdisassociatedTRAP, brzaccVLAdbTxFailedModLevel8=brzaccVLAdbTxFailedModLevel8, brzaccVLAdbMaxModulationLevel=brzaccVLAdbMaxModulationLevel, brzaccVLTelnetLogoutTimer=brzaccVLTelnetLogoutTimer, brzaccVLMacAddressDatabase=brzaccVLMacAddressDatabase, brzaccVLCountryDependentParamsTable=brzaccVLCountryDependentParamsTable, brzaccVLSetSelectedFreqSubset=brzaccVLSetSelectedFreqSubset, brzaccVLCountryCodeReApply=brzaccVLCountryCodeReApply, brzAccessVLSU_I=brzAccessVLSU_I, brzaccVLFrequencySubsetTable=brzaccVLFrequencySubsetTable, brzaccVLSecurityParameters=brzaccVLSecurityParameters, brzaccVLVlanForwardingSupport=brzaccVLVlanForwardingSupport, brzaccVLSUBurstDurationHighPriority=brzaccVLSUBurstDurationHighPriority, brzaccVLNeighborAuLearnCountryCodeBySU=brzaccVLNeighborAuLearnCountryCodeBySU, brzaccVLNwMngParameters=brzaccVLNwMngParameters, brzaccVLSUBurstDurationLowPriority=brzaccVLSUBurstDurationLowPriority, brzaccVLOthersTxEvents=brzaccVLOthersTxEvents, brzaccVLNeighborAuConcatenationOption=brzaccVLNeighborAuConcatenationOption, brzaccVLAdbMacAddress=brzaccVLAdbMacAddress, brzaccVLAllowedBandwidth=brzaccVLAllowedBandwidth, brzaccVLFairnessFactor=brzaccVLFairnessFactor, brzaccVLNeighborAuMacAdd=brzaccVLNeighborAuMacAdd, brzaccVLEventLogFileName=brzaccVLEventLogFileName, brzAccVLPortsControl=brzAccVLPortsControl, brzaccVLTrafficPrioritization=brzaccVLTrafficPrioritization, brzaccVLMaxBurstDuration=brzaccVLMaxBurstDuration, brzaccVLTotalRecievedDataFrames=brzaccVLTotalRecievedDataFrames, brzaccVLVlanRelaying=brzaccVLVlanRelaying, brzaccVLTrapText=brzaccVLTrapText, brzaccVLAutoSubBandSelect=brzaccVLAutoSubBandSelect, brzaccVLSUPerModulationLevelCountersEntry=brzaccVLSUPerModulationLevelCountersEntry, brzaccVLNwMngIpAddress=brzaccVLNwMngIpAddress, brzaccVLConcatenationMaxFrameSize=brzaccVLConcatenationMaxFrameSize, brzaccVLAverageReceiveSNR=brzaccVLAverageReceiveSNR, brzaccVLDFSParameters=brzaccVLDFSParameters, brzaccVLConfigurationFileLoading=brzaccVLConfigurationFileLoading, brzaccVLCurrentSUOperatingFrequency=brzaccVLCurrentSUOperatingFrequency, brzaccVLIpFilterTable=brzaccVLIpFilterTable, brzaccVLAdbConcatenationOption=brzaccVLAdbConcatenationOption, brzaccVLTrapFtpOrTftpStatus=brzaccVLTrapFtpOrTftpStatus, brzaccVLSpectrumAnalysisInformationSignalWidth=brzaccVLSpectrumAnalysisInformationSignalWidth, brzaccVLDFSRadarActivityAssessmentPeriod=brzaccVLDFSRadarActivityAssessmentPeriod, brzaccVLAdbDroppedFramesTotal=brzaccVLAdbDroppedFramesTotal, brzaccVLUpLinkQualityIndicatorStatus=brzaccVLUpLinkQualityIndicatorStatus, brzaccVLNeighborAuMark=brzaccVLNeighborAuMark, brzAccessVLOID=brzAccessVLOID, brzaccVLVlanIdForwarding=brzaccVLVlanIdForwarding, brzaccVLRxEvents=brzaccVLRxEvents, brzaccVLAutoSubBandFrequencySubsetFrequencyIdx=brzaccVLAutoSubBandFrequencySubsetFrequencyIdx, brzaccVLMinContentionWindow=brzaccVLMinContentionWindow, brzaccVLDeleteOneUserFilter=brzaccVLDeleteOneUserFilter, brzaccVLDFSRadarDetecetedTRAP=brzaccVLDFSRadarDetecetedTRAP, brzAccessVLAU=brzAccessVLAU, brzaccVLCountryCode=brzaccVLCountryCode, brzaccVLVLANForwarding=brzaccVLVLANForwarding, brzaccVLDeleteAllTrapAddrs=brzaccVLDeleteAllTrapAddrs, brzaccVLSUPerModulationLevelCountersTxSuccess=brzaccVLSUPerModulationLevelCountersTxSuccess, PYSNMP_MODULE_ID=breezeAccessVLMib, brzaccVLAdbTxFailedModLevel1=brzaccVLAdbTxFailedModLevel1, brzaccVLPhyErrors=brzaccVLPhyErrors, brzaccVLMaximumModulationLevel=brzaccVLMaximumModulationLevel, brzaccVLMeasuredCellDistance=brzaccVLMeasuredCellDistance, brzaccVLRadioBand=brzaccVLRadioBand, brzaccVLTotalTransmittedConcatenatedFramesDouble=brzaccVLTotalTransmittedConcatenatedFramesDouble, brzaccVLAdbTxSuccessModLevel6=brzaccVLAdbTxSuccessModLevel6, brzaccVLSetDefaults=brzaccVLSetDefaults, brzaccVLIPPrecedenceThreshold=brzaccVLIPPrecedenceThreshold, brzAccessVLAUS_BS=brzAccessVLAUS_BS, brzaccVLDataEncryptionSupport=brzaccVLDataEncryptionSupport, brzaccVLCurrentFrequencySubsetEntry=brzaccVLCurrentFrequencySubsetEntry, brzaccVLEthernetPortControl=brzaccVLEthernetPortControl, brzaccVLUploadEventLogFile=brzaccVLUploadEventLogFile, brzAccessVLSU_6_BD=brzAccessVLSU_6_BD, brzaccVLMaxNumOfAssociationsLimit=brzaccVLMaxNumOfAssociationsLimit, brzaccVLVLANSupport=brzaccVLVLANSupport, brzaccVLTcpPortRangeConfig=brzaccVLTcpPortRangeConfig, brzaccVLMaxDelay=brzaccVLMaxDelay, brzaccVLDHCPUnicastOverrideFilter=brzaccVLDHCPUnicastOverrideFilter, brzaccVLAirInterface=brzaccVLAirInterface, brzaccVLBestAuNoOfScanningAttempts=brzaccVLBestAuNoOfScanningAttempts, brzaccLighteAPWorkingMode=brzaccLighteAPWorkingMode, brzaccVLUdpPortRangeNum=brzaccVLUdpPortRangeNum, brzaccVLSystemLocation=brzaccVLSystemLocation, brzaccVLMacPinpointEntry=brzaccVLMacPinpointEntry, brzaccVLCountryCodeLearningBySU=brzaccVLCountryCodeLearningBySU, brzaccVLNeighborAuESSID=brzaccVLNeighborAuESSID, brzaccVLAdbTxSuccessModLevel2=brzaccVLAdbTxSuccessModLevel2, brzaccVLNeighborAuAtpcOption=brzaccVLNeighborAuAtpcOption, brzaccVLSecurityModeSupport=brzaccVLSecurityModeSupport, brzaccVLTxEvents=brzaccVLTxEvents, brzaccVLDrapMaxNumberOfVoiceCalls=brzaccVLDrapMaxNumberOfVoiceCalls, brzaccVLFeatureUpgrade=brzaccVLFeatureUpgrade, brzaccVLTotalNoOfDataFramesSubmitted=brzaccVLTotalNoOfDataFramesSubmitted, brzaccVLAdbSNR=brzaccVLAdbSNR, brzaccVLUdpPortPriRTPRTCP=brzaccVLUdpPortPriRTPRTCP, brzaccVLDeleteOneNwIpRange=brzaccVLDeleteOneNwIpRange, brzaccVLMirUplink=brzaccVLMirUplink, brzaccVLCountryCodeParameters=brzaccVLCountryCodeParameters, brzaccVLUseDhcp=brzaccVLUseDhcp, brzaccVLAUBurstDurationHighPriority=brzaccVLAUBurstDurationHighPriority, brzaccVLDrapGatewayType=brzaccVLDrapGatewayType, brzaccVLDeleteOneNwIpAddr=brzaccVLDeleteOneNwIpAddr, brzNetB_BU_B100=brzNetB_BU_B100, brzaccVLAccessToDHCP=brzaccVLAccessToDHCP, brzaccVLSpectrumAnalysisInformationOFDMFrames=brzaccVLSpectrumAnalysisInformationOFDMFrames, brzaccVLFTPGatewayIpAddress=brzaccVLFTPGatewayIpAddress, brzaccVLSUassociatedTRAP=brzaccVLSUassociatedTRAP, brzaccVLFTPSwSourceDir=brzaccVLFTPSwSourceDir, brzaccVLNwMngTrapCommunity=brzaccVLNwMngTrapCommunity, brzaccVLEventLogPolicy=brzaccVLEventLogPolicy, brzaccVLDFSOption=brzaccVLDFSOption, brzaccVLMacPinpoint=brzaccVLMacPinpoint, brzaccVLUnitWithMaxDistance=brzaccVLUnitWithMaxDistance, brzaccVLMainVersionNumber=brzaccVLMainVersionNumber, brzaccVLDisassociateAllSUs=brzaccVLDisassociateAllSUs, brzaccVLIpFilterIdx=brzaccVLIpFilterIdx, brzaccVLNwMngFilter=brzaccVLNwMngFilter, brzaccVLAUAdbEntry=brzaccVLAUAdbEntry, brzaccVLGracefulDegradationLimit=brzaccVLGracefulDegradationLimit, brzaccVLCRCErrors=brzaccVLCRCErrors, brzaccVLTrapSWVersion=brzaccVLTrapSWVersion, brzaccVLTotalTransmittedConcatenatedFramesSingle=brzaccVLTotalTransmittedConcatenatedFramesSingle, brzaccVLDeleteAllUserFilters=brzaccVLDeleteAllUserFilters, brzaccVLFTPServerUserName=brzaccVLFTPServerUserName, brzaccVLAUDefinedFrequency=brzaccVLAUDefinedFrequency, brzaccVLConcatenationOption=brzaccVLConcatenationOption, brzaccVLConfigurationFileName=brzaccVLConfigurationFileName, brzaccVLVlanIdRelaying=brzaccVLVlanIdRelaying, brzaccVLMacAddressDenyListId=brzaccVLMacAddressDenyListId, brzaccVLMaximumTransmitPowerIdx=brzaccVLMaximumTransmitPowerIdx, brzaccVLTransmitPower=brzaccVLTransmitPower, brzaccVLNeighborAuSNR=brzaccVLNeighborAuSNR, brzaccVLDrapUdpPort=brzaccVLDrapUdpPort, brzAccessVLSU_54_BD=brzAccessVLSU_54_BD, brzaccVLAutoSubBandFrequencySubsetActive=brzaccVLAutoSubBandFrequencySubsetActive, mptUnitMACAddress=mptUnitMACAddress, brzaccVLATPC=brzaccVLATPC, brzaccVLRegulationMaxTxPowerAtAntennaPort=brzaccVLRegulationMaxTxPowerAtAntennaPort, brzaccVLWLPrioritizationNotSupportedBySUTRAP=brzaccVLWLPrioritizationNotSupportedBySUTRAP, brzaccVLSpectrumAnalysisInformationTableIdx=brzaccVLSpectrumAnalysisInformationTableIdx, brzaccVLExitTelnet=brzaccVLExitTelnet, brzaccVLTcpPortRangeStart=brzaccVLTcpPortRangeStart, brzaccVLTcpPortRangeEnd=brzaccVLTcpPortRangeEnd, brzaccVLNeighborAuAssocLoadStatus=brzaccVLNeighborAuAssocLoadStatus)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLAdbIndex=brzaccVLAdbIndex, breezeAccessVLMib=breezeAccessVLMib, brzaccVLExecuteFTPConfigurationFileLoading=brzaccVLExecuteFTPConfigurationFileLoading, brzaccVLTotalTxFramesToWireless=brzaccVLTotalTxFramesToWireless, brzaccVLAdbBootVer=brzaccVLAdbBootVer, brzaccVLUnderrunEvents=brzaccVLUnderrunEvents, brzaccVLFramesSubmittedViaLowQueue=brzaccVLFramesSubmittedViaLowQueue, brzaccVLConcatenationMaximumNumberOfFrames=brzaccVLConcatenationMaximumNumberOfFrames, brzaccVLPerModulationLevelCounters=brzaccVLPerModulationLevelCounters, brzaccVLFramesDropped=brzaccVLFramesDropped, mngTrapEntry=mngTrapEntry, brzAccessVLAUS_SA=brzAccessVLAUS_SA, brzaccVLFramesDelayedDueToSwRetry=brzaccVLFramesDelayedDueToSwRetry, brzaccVLESSIDParameters=brzaccVLESSIDParameters, brzaccVLDrapNoOfActiveVoiceCalls=brzaccVLDrapNoOfActiveVoiceCalls, brzaccVLVlanForwardingTable=brzaccVLVlanForwardingTable, brzaccVLMngIpRangeEnd=brzaccVLMngIpRangeEnd, brzaccVLMngIpRangesTable=brzaccVLMngIpRangesTable, brzaccVLTotalRxFramesFromWireless=brzaccVLTotalRxFramesFromWireless, brzaccVLDroppedFrameEvents=brzaccVLDroppedFrameEvents, brzaccVLNumOfSoftwareRetries=brzaccVLNumOfSoftwareRetries, brzaccVLCountryDependentParameterFrequencies=brzaccVLCountryDependentParameterFrequencies, brzaccVLQinQProviderVlanID=brzaccVLQinQProviderVlanID, brzaccVLNeighborAuPerSuDistanceLearning=brzaccVLNeighborAuPerSuDistanceLearning, brzaccVLDFSSuWaitingOption=brzaccVLDFSSuWaitingOption, brzaccVLFrequencySubsetTableIdx=brzaccVLFrequencySubsetTableIdx, brzNetB_BU_B14=brzNetB_BU_B14, brzaccVLUdpPortRangeTable=brzaccVLUdpPortRangeTable, brzaccVLTimeSinceLastReset=brzaccVLTimeSinceLastReset, brzaccVLMngIpRangeMask=brzaccVLMngIpRangeMask, brzaccVLPerSuDistanceLearning=brzaccVLPerSuDistanceLearning, brzaccVLToSPrioritizationOption=brzaccVLToSPrioritizationOption, brzaccVLNeighborAuSwVer=brzaccVLNeighborAuSwVer, brzaccVLDataFramesSubmittedToBridge=brzaccVLDataFramesSubmittedToBridge, brzaccVLIpID=brzaccVLIpID, brzaccVLTransmitPowerIdx=brzaccVLTransmitPowerIdx, brzaccVLMaxModulationLevel=brzaccVLMaxModulationLevel, brzaccVLTcpPortRangeDelete=brzaccVLTcpPortRangeDelete, brzAccessVLProducts=brzAccessVLProducts, brzaccVLVLANQinQ=brzaccVLVLANQinQ, brzaccVLTrafficPriVLAN=brzaccVLTrafficPriVLAN, brzaccVLAdbTxSuccessModLevel5=brzaccVLAdbTxSuccessModLevel5, brzaccVLFlashMemoryControl=brzaccVLFlashMemoryControl, brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod=brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod, brzaccVLBroadcastRelaying=brzaccVLBroadcastRelaying, brzaccVLFramesSubmittedViaMidQueue=brzaccVLFramesSubmittedViaMidQueue, brzaccVLCellDistanceParameters=brzaccVLCellDistanceParameters, brzaccVLAdbSecurityMode=brzaccVLAdbSecurityMode, brzaccVLAdbTxFailedModLevel6=brzaccVLAdbTxFailedModLevel6, brzaccVLNeighborAuDfsOption=brzaccVLNeighborAuDfsOption, brzaccVLAdbUnitName=brzaccVLAdbUnitName, brzaccVLMngIpRangeEntry=brzaccVLMngIpRangeEntry, brzaccVLAdbAge=brzaccVLAdbAge, brzaccVLVlanDataPriority=brzaccVLVlanDataPriority, brzaccVLTxPower=brzaccVLTxPower, brzaccVLMaxTxPower=brzaccVLMaxTxPower, brzaccVLFTPServerIpAddress=brzaccVLFTPServerIpAddress, brzaccVLTotalRetransmittedFrames=brzaccVLTotalRetransmittedFrames, brzaccVLEthernetNegotiationMode=brzaccVLEthernetNegotiationMode, brzaccVLRunTimeSubNetMask=brzaccVLRunTimeSubNetMask, brzaccVLTransmitPowerEntry=brzaccVLTransmitPowerEntry, brzaccVLCurrentAUOperatingFrequency=brzaccVLCurrentAUOperatingFrequency, brzaccVLFTPClientIPAddress=brzaccVLFTPClientIPAddress, brzaccVLAdbHwRevision=brzaccVLAdbHwRevision, brzaccVLSpectrumAnalysisScanCycles=brzaccVLSpectrumAnalysisScanCycles, brzaccVLSelectSubBandIndex=brzaccVLSelectSubBandIndex, brzaccVLMIRThresholdPercent=brzaccVLMIRThresholdPercent, brzaccVLAdbStatus=brzaccVLAdbStatus, brzaccVLTrapRTx=brzaccVLTrapRTx, brzaccVLAdbTxSuccessModLevel8=brzaccVLAdbTxSuccessModLevel8, brzaccVLDFSClearRadarDetectedChannelsAfterReset=brzaccVLDFSClearRadarDetectedChannelsAfterReset, brzaccVLUdpTcpPortRangePrioritizationOption=brzaccVLUdpTcpPortRangePrioritizationOption, brzaccVLSUPerModulationLevelCountersTableIdx=brzaccVLSUPerModulationLevelCountersTableIdx, brzaccVLOverrunEvents=brzaccVLOverrunEvents, brzaccVLAdbCirMaxDelay=brzaccVLAdbCirMaxDelay, brzNetB_RB_B14=brzNetB_RB_B14, brzaccVLMinModulationLevel=brzaccVLMinModulationLevel, brzaccVLSpectrumAnalysisInformationTable=brzaccVLSpectrumAnalysisInformationTable, brzaccVLTotalTxEvents=brzaccVLTotalTxEvents, brzaccVLAUDefinedFrequencyNew=brzaccVLAUDefinedFrequencyNew, brzaccVLSUPerModulationLevelCountersTxFailed=brzaccVLSUPerModulationLevelCountersTxFailed, brzaccVLAntennaGain=brzaccVLAntennaGain, brzaccVLCirUplink=brzaccVLCirUplink, brzaccVLAutoSubBandSelectedFreqSubset=brzaccVLAutoSubBandSelectedFreqSubset, brzaccVLTrafficPriUdpTcpPortRange=brzaccVLTrafficPriUdpTcpPortRange, brzaccVLBridgeAgingTime=brzaccVLBridgeAgingTime, brzaccVLSubNetMask=brzaccVLSubNetMask, brzaccVLFTPServerPassword=brzaccVLFTPServerPassword, brzaccVLMngIpRangeStart=brzaccVLMngIpRangeStart, mngTrapTable=mngTrapTable, brzaccVLEraseEventLog=brzaccVLEraseEventLog, brzaccVLApClientIpAddress=brzaccVLApClientIpAddress, brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages=brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages, brzaccVLNeighborAuAdapModOption=brzaccVLNeighborAuAdapModOption, brzaccVLBurstModeSupport=brzaccVLBurstModeSupport, brzaccVLPreferredAuMacAddress=brzaccVLPreferredAuMacAddress, brzaccVLDHCPBroadcastOverrideFilter=brzaccVLDHCPBroadcastOverrideFilter, brzaccVLWirelessTrapThreshold=brzaccVLWirelessTrapThreshold, brzaccVLCurrentAUOperatingFrequencyNew=brzaccVLCurrentAUOperatingFrequencyNew, brzaccVLDFSFrequcnyTRAP=brzaccVLDFSFrequcnyTRAP, brzaccVLIpParams=brzaccVLIpParams, brzaccVLServiceParameters=brzaccVLServiceParameters, brzaccVLCurrentNumOfAssociations=brzaccVLCurrentNumOfAssociations, brzaccVLTxFramesToWireless=brzaccVLTxFramesToWireless, brzNetB_RB_B28=brzNetB_RB_B28, brzaccVLWirelessLinkEvents=brzaccVLWirelessLinkEvents, brzaccVLConcatenationParameters=brzaccVLConcatenationParameters, brzaccVLRecievedBadFrames=brzaccVLRecievedBadFrames, brzaccVLTcpPortRangeIdx=brzaccVLTcpPortRangeIdx, brzaccVLIpFilterEntry=brzaccVLIpFilterEntry, brzaccVLWirelessLinkPrioritizationOption=brzaccVLWirelessLinkPrioritizationOption, brzaccVLReadOnlyPassword=brzaccVLReadOnlyPassword, brzaccVLAssociatedAU=brzaccVLAssociatedAU, brzaccVLWirelessLinkCounters=brzaccVLWirelessLinkCounters, brzaccVLVlanRelayingTableIdx=brzaccVLVlanRelayingTableIdx, brzaccVLNumberOfMacAddressesInDenyList=brzaccVLNumberOfMacAddressesInDenyList, brzaccVLRoamingOption=brzaccVLRoamingOption, brzaccVLNwTrapTableIdx=brzaccVLNwTrapTableIdx, brzaccVLResetPerModulationLevelCounters=brzaccVLResetPerModulationLevelCounters, brzaccVLEthBroadcastMulticatLimiterTRAP=brzaccVLEthBroadcastMulticatLimiterTRAP, brzaccVLDrapSupport=brzaccVLDrapSupport, brzaccVLUnitName=brzaccVLUnitName, brzaccVLVlanPriorityThreshold=brzaccVLVlanPriorityThreshold, brzaccVLEthBroadcastThresholdExceeded=brzaccVLEthBroadcastThresholdExceeded, brzaccVLUnicastRelaying=brzaccVLUnicastRelaying, brzaccVLMirOnlyOption=brzaccVLMirOnlyOption, brzaccVLAutoSubBandFrequencySubsetBandIdx=brzaccVLAutoSubBandFrequencySubsetBandIdx, brzAccess4900_SU_BD=brzAccess4900_SU_BD, brzaccVLAUwirelessQualityTRAP=brzaccVLAUwirelessQualityTRAP, brzaccVLMaximumTransmitPowerEntry=brzaccVLMaximumTransmitPowerEntry, brzaccVLRTSThreshold=brzaccVLRTSThreshold, brzaccVLSUassociatedAUTRAP=brzaccVLSUassociatedAUTRAP, brzaccVLUdpPortRangeDelete=brzaccVLUdpPortRangeDelete, brzaccVLDrapGatewayEntry=brzaccVLDrapGatewayEntry, brzaccVLAdbTxFailedModLevel2=brzaccVLAdbTxFailedModLevel2, brzaccVLAUagingTRAP=brzaccVLAUagingTRAP, brzaccVLMinimumIntervalBetweenATPCMessages=brzaccVLMinimumIntervalBetweenATPCMessages, brzaccVLTrapAccessRights=brzaccVLTrapAccessRights, brzaccVLFrequencySubsetFrequencyNew=brzaccVLFrequencySubsetFrequencyNew, brzaccVLLoadingStatusTRAP=brzaccVLLoadingStatusTRAP, brzaccVLAUDefaultMulticastKeyID=brzaccVLAUDefaultMulticastKeyID, brzaccVLSubBandSelect=brzaccVLSubBandSelect, brzaccVLBurstMode=brzaccVLBurstMode, brzaccVLPerformanceParams=brzaccVLPerformanceParams, brzaccVLResetSpectrumCounters=brzaccVLResetSpectrumCounters, brzaccVLESSID=brzaccVLESSID, brzaccVLScanningStep=brzaccVLScanningStep, brzaccVLCellDistanceMode=brzaccVLCellDistanceMode, brzAccessVLSU_6_1D=brzAccessVLSU_6_1D, brzAccessVLAU_BS=brzAccessVLAU_BS, brzaccVLCurrentEthernetPortState=brzaccVLCurrentEthernetPortState, brzaccVLDFSRadarDetectionChannelsTable=brzaccVLDFSRadarDetectionChannelsTable, brzaccVLTcpPortRangeAdd=brzaccVLTcpPortRangeAdd, brzaccVLMacAddressDenyListTable=brzaccVLMacAddressDenyListTable, brzaccVLSUPMirDownlink=brzaccVLSUPMirDownlink, brzaccVLCountryDependentParameterTableIdx=brzaccVLCountryDependentParameterTableIdx, brzaccVLAdbMirRx=brzaccVLAdbMirRx, brzaccVLAutomaticChannelSelection=brzaccVLAutomaticChannelSelection, brzaccVLAdbTxFailedModLevel7=brzaccVLAdbTxFailedModLevel7, brzaccVLTcpPortRangeTable=brzaccVLTcpPortRangeTable, brzaccVLEthBroadcastMulticastLimiterOption=brzaccVLEthBroadcastMulticastLimiterOption, brzaccVLKey4=brzaccVLKey4, brzaccVLUnitIpAddress=brzaccVLUnitIpAddress, brzaccVLRxDecryptEvents=brzaccVLRxDecryptEvents, brzaccVLNeighborAuDataEncyptOption=brzaccVLNeighborAuDataEncyptOption, brzaccVLResetTrafficCounters=brzaccVLResetTrafficCounters, brzaccVLAutoSubBandFrequencySubsetEntry=brzaccVLAutoSubBandFrequencySubsetEntry, brzaccVLSubBandUpperFrequency=brzaccVLSubBandUpperFrequency, brzaccVLPowerUpFromReset=brzaccVLPowerUpFromReset, brzaccVLNeighborAuHwRevision=brzaccVLNeighborAuHwRevision, brzaccVLTrapLog=brzaccVLTrapLog, brzaccVLFrequencySubsetActive=brzaccVLFrequencySubsetActive, brzaccVLCurrentFrequencySubsetTable=brzaccVLCurrentFrequencySubsetTable, brzaccVLCurrentFrequencySubsetFrequency=brzaccVLCurrentFrequencySubsetFrequency, brzaccVLKey3=brzaccVLKey3, brzaccVLDFSChannelCheckTime=brzaccVLDFSChannelCheckTime, brzaccVLSUPerModulationLevelCountersTable=brzaccVLSUPerModulationLevelCountersTable, brzaccVLNeighborAuEntry=brzaccVLNeighborAuEntry, brzaccVLTcpPortPriRTPRTCP=brzaccVLTcpPortPriRTPRTCP, brzaccVLManagementVlanID=brzaccVLManagementVlanID, brzaccVLMngIpRangeFlag=brzaccVLMngIpRangeFlag, brzaccVLAUAdbTable=brzaccVLAUAdbTable, brzaccVLDrapGatewaysTable=brzaccVLDrapGatewaysTable, brzAccessVLSU_BD=brzAccessVLSU_BD, brzaccVLAverageModulationLevel=brzaccVLAverageModulationLevel, brzaccVLMinimumHwRevision=brzaccVLMinimumHwRevision, brzaccVLApplicableModulationLevel=brzaccVLApplicableModulationLevel, brzaccVLSpectrumAnalysisInformationSignalSNR=brzaccVLSpectrumAnalysisInformationSignalSNR, brzaccVLlowPriorityAIFS=brzaccVLlowPriorityAIFS, brzaccVLTrafficPriIPToS=brzaccVLTrafficPriIPToS, brzaccVLDeltaFromMinSNRLevel=brzaccVLDeltaFromMinSNRLevel, brzaccVLMinimumSNRLevel=brzaccVLMinimumSNRLevel, brzaccVLNoOfInternallyDiscardedMirCir=brzaccVLNoOfInternallyDiscardedMirCir, brzaccVLRunTimeIPaddr=brzaccVLRunTimeIPaddr, brzaccVLUdpPortRangeStart=brzaccVLUdpPortRangeStart, brzaccVLSoftwareRetrySupport=brzaccVLSoftwareRetrySupport, brzAccessVLAU_SA=brzAccessVLAU_SA, brzaccVLBestAuSupport=brzaccVLBestAuSupport, brzaccVLFramesSubmittedViaHighQueue=brzaccVLFramesSubmittedViaHighQueue, brzaccVLAdbCirRx=brzaccVLAdbCirRx, brzaccVLMeasureUpLinkQualityIndicator=brzaccVLMeasureUpLinkQualityIndicator, brzaccVLAdbTxSuccessModLevel7=brzaccVLAdbTxSuccessModLevel7, brzaccVLRunTimeDefaultIPGateway=brzaccVLRunTimeDefaultIPGateway, brzaccVLBurstInterval=brzaccVLBurstInterval, brzaccVLEthernetLinkType=brzaccVLEthernetLinkType, brzaccVLAteTestResults=brzaccVLAteTestResults, brzaccVLMacAddressDenyListAction=brzaccVLMacAddressDenyListAction, brzaccVLAdbTxFramesTotal=brzaccVLAdbTxFramesTotal, brzaccVLToSPrecedenceThreshold=brzaccVLToSPrecedenceThreshold, brzaccVLMaximumTxPowerRange=brzaccVLMaximumTxPowerRange, brzaccVLAdbSwVersion=brzaccVLAdbSwVersion, brzaccVLCountryDependentParameterEntry=brzaccVLCountryDependentParameterEntry, brzaccVLNeighborAuSecurityMode=brzaccVLNeighborAuSecurityMode, brzaccVLMirDownlink=brzaccVLMirDownlink, brzaccVLVlanRelayingSupport=brzaccVLVlanRelayingSupport, brzaccVLAdbTxSuccessModLevel1=brzaccVLAdbTxSuccessModLevel1, brzaccVLInstallerPassword=brzaccVLInstallerPassword, brzaccVLMaximumBurstDuration=brzaccVLMaximumBurstDuration, brzaccVLMacPinpointTable=brzaccVLMacPinpointTable, brzaccVLSpectrumAnalysisInformationSignalCount=brzaccVLSpectrumAnalysisInformationSignalCount, brzaccVLAdbDistance=brzaccVLAdbDistance, brzaccVLCurrentFrequencySubsetTableIdx=brzaccVLCurrentFrequencySubsetTableIdx, brzaccVLPPPoEBroadcastOverrideFilter=brzaccVLPPPoEBroadcastOverrideFilter, brzaccVLNeighborAuIdx=brzaccVLNeighborAuIdx, brzaccVLHardwareRetries=brzaccVLHardwareRetries, brzaccVLKey2=brzaccVLKey2, brzaccVLTrapTelnetUserIpAddress=brzaccVLTrapTelnetUserIpAddress, MacAddress=MacAddress, brzaccVLSubBandLowerFrequency=brzaccVLSubBandLowerFrequency, brzaccVLDFSRadarDetectionChannelsEntry=brzaccVLDFSRadarDetectionChannelsEntry, brzaccVLNumOfAssociationsSinceLastReset=brzaccVLNumOfAssociationsSinceLastReset, brzaccVLShadowVersionFileName=brzaccVLShadowVersionFileName, brzaccVLNoOfDuplicateFramesDiscarded=brzaccVLNoOfDuplicateFramesDiscarded, brzaccVLTotalTransmittedConcatenatedFramesMore=brzaccVLTotalTransmittedConcatenatedFramesMore, brzaccVLEventLogFileParams=brzaccVLEventLogFileParams, brzaccVLAdbAuthOption=brzaccVLAdbAuthOption, brzaccVLDFSChannelReuseParameters=brzaccVLDFSChannelReuseParameters, brzaccVLUserFilterParams=brzaccVLUserFilterParams, brzaccVLVLANTrafficPriority=brzaccVLVLANTrafficPriority, brzaccVLFTPSwFileName=brzaccVLFTPSwFileName, brzaccVLAuthenticationEncryptionSupport=brzaccVLAuthenticationEncryptionSupport, brzaccVLCurrentFrequencySubsetFrequencyNew=brzaccVLCurrentFrequencySubsetFrequencyNew, brzAccess4900_AU_SA=brzAccess4900_AU_SA, brzaccVLHWRetriesHighPriority=brzaccVLHWRetriesHighPriority, brzaccVLSUDefaultKeyID=brzaccVLSUDefaultKeyID, brzaccVLEthBroadcastMulticastLimiterThreshold=brzaccVLEthBroadcastMulticastLimiterThreshold, brzaccVLFTPClientMask=brzaccVLFTPClientMask, brzaccVLNeighborAuTable=brzaccVLNeighborAuTable, brzaccVLAvgSNRMemoryFactor=brzaccVLAvgSNRMemoryFactor, brzaccVLNewUnitTypeTrap=brzaccVLNewUnitTypeTrap, mptEthernetStationMACAddress=mptEthernetStationMACAddress, brzaccVLUdpPortRangeDeleteAll=brzaccVLUdpPortRangeDeleteAll, brzAccessVLSU_3_4D=brzAccessVLSU_3_4D, brzaccVLTotalTransmittedUnicasts=brzaccVLTotalTransmittedUnicasts)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLEthBroadcastMulticastLimiterSendTrapInterval=brzaccVLEthBroadcastMulticastLimiterSendTrapInterval, brzaccVLIpFilterRange=brzaccVLIpFilterRange, brzaccVLFrequencySubsetFrequency=brzaccVLFrequencySubsetFrequency, brzaccVLDFSChannelReuseOption=brzaccVLDFSChannelReuseOption, brzaccVLReadUpLinkQualityIndicator=brzaccVLReadUpLinkQualityIndicator, brzaccVLAdbCpldVer=brzaccVLAdbCpldVer, brzaccVLUnitMacAddress=brzaccVLUnitMacAddress, brzaccVLUnitPasswords=brzaccVLUnitPasswords, brzaccVLFTPSwDownload=brzaccVLFTPSwDownload, brzaccVLUnitBootVersion=brzaccVLUnitBootVersion, brzaccVLDeleteAllNwIpAddrs=brzaccVLDeleteAllNwIpAddrs, brzaccVLAntennaGainChange=brzaccVLAntennaGainChange, brzaccVLRunTimeESSID=brzaccVLRunTimeESSID, brzaccVLAdbTxFailedModLevel3=brzaccVLAdbTxFailedModLevel3, brzaccVLDFSMoveFreq=brzaccVLDFSMoveFreq, brzaccVLVlanID=brzaccVLVlanID, brzaccVLUdpPortRangeConfig=brzaccVLUdpPortRangeConfig, brzaccVLKey1=brzaccVLKey1, brzaccVLMacAddressDenyListTableIdx=brzaccVLMacAddressDenyListTableIdx, brzaccVLAUMacAddressDatabase=brzaccVLAUMacAddressDatabase, brzAccessVLSU=brzAccessVLSU, brzaccVLFTPDownloadSwFile=brzaccVLFTPDownloadSwFile, brzaccVLUdpPortRangeAdd=brzaccVLUdpPortRangeAdd, brzaccVLEthBroadcastingParameters=brzaccVLEthBroadcastingParameters, brzaccVLAdbCirTx=brzaccVLAdbCirTx, brzaccVLDefinedMaximumTxPowerRange=brzaccVLDefinedMaximumTxPowerRange, brzaccVLAUBeaconsToWireless=brzaccVLAUBeaconsToWireless, brzaccVLFTPConfigurationFileSourceDir=brzaccVLFTPConfigurationFileSourceDir, brzaccVLDFSChannelFrequencyNew=brzaccVLDFSChannelFrequencyNew, brzaccVLSpectrumAnalysisParameters=brzaccVLSpectrumAnalysisParameters, brzAccess4900_AU_BS=brzAccess4900_AU_BS, brzaccVLARPBroadcastOverrideFilter=brzaccVLARPBroadcastOverrideFilter, brzaccVLScanningMode=brzaccVLScanningMode, brzaccVLVlanRelayingTable=brzaccVLVlanRelayingTable, brzaccVLTrapSubscriberType=brzaccVLTrapSubscriberType, brzaccVLMacAddressDenyList=brzaccVLMacAddressDenyList, brzaccVLRunningFrom=brzaccVLRunningFrom, brzaccVLAccessToNwTrap=brzaccVLAccessToNwTrap, brzaccVLAdbBurstModeOption=brzaccVLAdbBurstModeOption, brzaccVLEventLogDestinationDir=brzaccVLEventLogDestinationDir, mngIpFilterTable=mngIpFilterTable, brzaccVLOperatorESSIDOption=brzaccVLOperatorESSIDOption, brzaccVLAdminPassword=brzaccVLAdminPassword, brzaccVLDrapTTL=brzaccVLDrapTTL, brzaccVLMaximumTxPower=brzaccVLMaximumTxPower, brzaccVLDrapGatewayNoOfActiveVoiceCalls=brzaccVLDrapGatewayNoOfActiveVoiceCalls, brzaccVLSpectrumAnalysisStatus=brzaccVLSpectrumAnalysisStatus, brzaccVLTrapToggle=brzaccVLTrapToggle, mngIpFilterEntry=mngIpFilterEntry, brzaccVLVlanForwardingEntry=brzaccVLVlanForwardingEntry, brzaccVLMacAddressDenyListRemove=brzaccVLMacAddressDenyListRemove, brzaccVLMaxContentionWindow=brzaccVLMaxContentionWindow, brzaccVLUpLinkQualityIndicator=brzaccVLUpLinkQualityIndicator, brzaccVLDeleteAllNwIpRanges=brzaccVLDeleteAllNwIpRanges, brzaccVLMaskID=brzaccVLMaskID, brzaccVLDataEncryptionOption=brzaccVLDataEncryptionOption, brzaccVLDFSChannelRadarStatus=brzaccVLDFSChannelRadarStatus, brzaccVLParameterChangedTRAP=brzaccVLParameterChangedTRAP, brzaccVLPromiscuousModeTRAP=brzaccVLPromiscuousModeTRAP, brzaccVLMngIpRangeIdx=brzaccVLMngIpRangeIdx, brzaccVLMulticastModulationLevel=brzaccVLMulticastModulationLevel, brzaccVLNwMngIpTableIdx=brzaccVLNwMngIpTableIdx, brzaccVLSUPerModulationLevelCountersApplicableModLevel=brzaccVLSUPerModulationLevelCountersApplicableModLevel, brzaccVLFTPServerParams=brzaccVLFTPServerParams, brzaccVLNeighborAuCountryCode=brzaccVLNeighborAuCountryCode, brzaccVLAccessToNwMng=brzaccVLAccessToNwMng, brzAccessVLSU_24_BD=brzAccessVLSU_24_BD, brzaccVLSpectrumAnalysisInformationEntry=brzaccVLSpectrumAnalysisInformationEntry, brzaccVLIPDSCPThreshold=brzaccVLIPDSCPThreshold, brzaccVLFTPParameters=brzaccVLFTPParameters, brzaccVLAuthenticationAlgorithm=brzaccVLAuthenticationAlgorithm, brzaccVLDefaultGWAddress=brzaccVLDefaultGWAddress, brzaccVLDFSMinimumPulsesToDetect=brzaccVLDFSMinimumPulsesToDetect, brzaccVLNwMngTrapAddress=brzaccVLNwMngTrapAddress, brzaccVLAIFS=brzaccVLAIFS, brzaccVLTcpPortRangeEntry=brzaccVLTcpPortRangeEntry, brzaccVLDisassociate=brzaccVLDisassociate, brzaccVLQinQEthertype=brzaccVLQinQEthertype, brzaccVLAdbCountryCode=brzaccVLAdbCountryCode)
