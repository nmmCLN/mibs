#
# PySNMP MIB module HMLLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmLLDP.mib
# Produced by pysmi-1.1.8 at Fri Dec  2 15:54:16 2022
# On host fv-az267-189 platform Linux version 5.15.0-1023-azure by user runner
# Using Python version 3.10.8 (main, Oct 18 2022, 06:44:51) [GCC 11.2.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hmConfiguration, = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hmConfiguration")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Bits, Unsigned32, TimeTicks, iso, NotificationType, Counter64, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Bits", "Unsigned32", "TimeTicks", "iso", "NotificationType", "Counter64", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hmLLDP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 7))
hmLLDP.setRevisions(('2004-11-22 00:00',))
if mibBuilder.loadTexts: hmLLDP.setLastUpdated('200411220000Z')
if mibBuilder.loadTexts: hmLLDP.setOrganization('Hirschmann Automation and Control GmbH')
hmLLDPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 7, 1))
hmLLDPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 7, 2))
hmLLDPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPAdminStatus.setStatus('current')
hmLLDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2), )
if mibBuilder.loadTexts: hmLLDPInterfaceTable.setStatus('current')
hmLLDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1), ).setIndexNames((0, "HMLLDP-MIB", "hmLLDPIfaceGroupID"), (0, "HMLLDP-MIB", "hmLLDPIfaceID"))
if mibBuilder.loadTexts: hmLLDPIfEntry.setStatus('current')
hmLLDPIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPIfaceGroupID.setStatus('current')
hmLLDPIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPIfaceID.setStatus('current')
hmLLDPIfaceHirmaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceHirmaMode.setStatus('current')
hmLLDPIfaceFDBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lldpOnly", 1), ("macOnly", 2), ("both", 3), ("autoDetect", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceFDBMode.setStatus('current')
hmLLDPIfaceMaxNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceMaxNeighbors.setStatus('current')
hmLLDPStatsIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1), )
if mibBuilder.loadTexts: hmLLDPStatsIfTable.setStatus('current')
hmLLDPStatsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1), ).setIndexNames((0, "HMLLDP-MIB", "hmLLDPStatsIfaceGroupID"), (0, "HMLLDP-MIB", "hmLLDPStatsIfaceID"))
if mibBuilder.loadTexts: hmLLDPStatsIfEntry.setStatus('current')
hmLLDPStatsIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceGroupID.setStatus('current')
hmLLDPStatsIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceID.setStatus('current')
hmLLDPStatsIfaceTotalFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalFDBEntryCount.setStatus('current')
hmLLDPStatsIfaceTotalEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalEntryCount.setStatus('current')
hmLLDPStatsIfaceIEEEEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceIEEEEntryCount.setStatus('current')
hmLLDPStatsIfaceHirmaEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceHirmaEntryCount.setStatus('current')
hmLLDPStatsIfaceFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceFDBEntryCount.setStatus('current')
mibBuilder.exportSymbols("HMLLDP-MIB", hmLLDPStatsIfTable=hmLLDPStatsIfTable, hmLLDPInterfaceTable=hmLLDPInterfaceTable, hmLLDPIfaceID=hmLLDPIfaceID, hmLLDPIfaceFDBMode=hmLLDPIfaceFDBMode, hmLLDPIfEntry=hmLLDPIfEntry, hmLLDPStatistics=hmLLDPStatistics, hmLLDPStatsIfaceFDBEntryCount=hmLLDPStatsIfaceFDBEntryCount, PYSNMP_MODULE_ID=hmLLDP, hmLLDPStatsIfEntry=hmLLDPStatsIfEntry, hmLLDPStatsIfaceHirmaEntryCount=hmLLDPStatsIfaceHirmaEntryCount, hmLLDPIfaceMaxNeighbors=hmLLDPIfaceMaxNeighbors, hmLLDPStatsIfaceIEEEEntryCount=hmLLDPStatsIfaceIEEEEntryCount, hmLLDP=hmLLDP, hmLLDPIfaceHirmaMode=hmLLDPIfaceHirmaMode, hmLLDPStatsIfaceID=hmLLDPStatsIfaceID, hmLLDPStatsIfaceGroupID=hmLLDPStatsIfaceGroupID, hmLLDPStatsIfaceTotalFDBEntryCount=hmLLDPStatsIfaceTotalFDBEntryCount, hmLLDPConfig=hmLLDPConfig, hmLLDPAdminStatus=hmLLDPAdminStatus, hmLLDPStatsIfaceTotalEntryCount=hmLLDPStatsIfaceTotalEntryCount, hmLLDPIfaceGroupID=hmLLDPIfaceGroupID)
