#
# PySNMP MIB module AIRPORT-BASESTATION-3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/airport/AIRPORT-BASESTATION-3-MIB
# Produced by pysmi-1.1.8 at Wed Sep  6 13:25:32 2023
# On host fv-az361-883 platform Linux version 5.15.0-1041-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Counter64, Counter32, TimeTicks, ModuleIdentity, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, iso, enterprises, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter64", "Counter32", "TimeTicks", "ModuleIdentity", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "iso", "enterprises", "Unsigned32", "Gauge32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
baseStation3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 63, 501, 3))
if mibBuilder.loadTexts: baseStation3.setLastUpdated('200301160001Z')
if mibBuilder.loadTexts: baseStation3.setOrganization('Apple Computer, Inc.')
apple = MibIdentifier((1, 3, 6, 1, 4, 1, 63))
airport = MibIdentifier((1, 3, 6, 1, 4, 1, 63, 501))
abs3SysConf = MibIdentifier((1, 3, 6, 1, 4, 1, 63, 501, 3, 1))
sysConfName = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfName.setStatus('current')
sysConfContact = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfContact.setStatus('current')
sysConfLocation = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfLocation.setStatus('current')
sysConfUptime = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfUptime.setStatus('current')
sysConfFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfFirmwareVersion.setStatus('current')
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 63, 501, 3, 2))
wirelessNumber = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNumber.setStatus('current')
wirelessClientsTable = MibTable((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2), )
if mibBuilder.loadTexts: wirelessClientsTable.setStatus('current')
wirelessClient = MibTableRow((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1), ).setIndexNames((0, "AIRPORT-BASESTATION-3-MIB", "wirelessPhysAddress"))
if mibBuilder.loadTexts: wirelessClient.setStatus('current')
wirelessPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessPhysAddress.setStatus('current')
wirelessType = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sta", 1), ("wds", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessType.setStatus('current')
wirelessDataRates = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessDataRates.setStatus('current')
wirelessTimeAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessTimeAssociated.setStatus('current')
wirelessLastRefreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLastRefreshTime.setStatus('current')
wirelessStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessStrength.setStatus('current')
wirelessNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNoise.setStatus('current')
wirelessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRate.setStatus('current')
wirelessNumRX = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNumRX.setStatus('current')
wirelessNumTX = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNumTX.setStatus('current')
wirelessNumRXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNumRXErrors.setStatus('current')
wirelessNumTXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessNumTXErrors.setStatus('current')
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 63, 501, 3, 3))
dhcpNumber = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpNumber.setStatus('current')
dhcpClientsTable = MibTable((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2), )
if mibBuilder.loadTexts: dhcpClientsTable.setStatus('current')
dhcpClient = MibTableRow((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2, 1), ).setIndexNames((0, "AIRPORT-BASESTATION-3-MIB", "dhcpPhysAddress"))
if mibBuilder.loadTexts: dhcpClient.setStatus('current')
dhcpPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPhysAddress.setStatus('current')
dhcpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIpAddress.setStatus('current')
dhcpClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientID.setStatus('current')
dhcpLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseTime.setStatus('current')
physicalInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 63, 501, 3, 4))
physicalInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceCount.setStatus('current')
physicalInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2), )
if mibBuilder.loadTexts: physicalInterfacesTable.setStatus('current')
physicalInterface = MibTableRow((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1), ).setIndexNames((0, "AIRPORT-BASESTATION-3-MIB", "physicalInterfaceIndex"))
if mibBuilder.loadTexts: physicalInterface.setStatus('current')
physicalInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceIndex.setStatus('current')
physicalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceName.setStatus('current')
physicalInterfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceUnit.setStatus('current')
physicalInterfaceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceSpeed.setStatus('current')
physicalInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("linkDown", 0), ("linkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceState.setStatus('current')
physicalInterfaceDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceDuplex.setStatus('current')
physicalInterfaceNumTX = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceNumTX.setStatus('current')
physicalInterfaceNumRX = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceNumRX.setStatus('current')
physicalInterfaceNumTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceNumTXError.setStatus('current')
physicalInterfaceNumRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 63, 501, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalInterfaceNumRXError.setStatus('current')
mibBuilder.exportSymbols("AIRPORT-BASESTATION-3-MIB", wirelessDataRates=wirelessDataRates, wirelessClient=wirelessClient, physicalInterfaceState=physicalInterfaceState, physicalInterfaceUnit=physicalInterfaceUnit, abs3SysConf=abs3SysConf, wirelessNoise=wirelessNoise, physicalInterfaceCount=physicalInterfaceCount, physicalInterfaceSpeed=physicalInterfaceSpeed, wirelessNumTX=wirelessNumTX, physicalInterfaceName=physicalInterfaceName, physicalInterfaceNumRXError=physicalInterfaceNumRXError, wirelessClientsTable=wirelessClientsTable, physicalInterfaces=physicalInterfaces, physicalInterfaceDuplex=physicalInterfaceDuplex, apple=apple, baseStation3=baseStation3, sysConfUptime=sysConfUptime, wirelessNumTXErrors=wirelessNumTXErrors, dhcpPhysAddress=dhcpPhysAddress, wirelessPhysAddress=wirelessPhysAddress, sysConfLocation=sysConfLocation, dhcpIpAddress=dhcpIpAddress, dhcpClientID=dhcpClientID, dhcpLeaseTime=dhcpLeaseTime, wireless=wireless, sysConfFirmwareVersion=sysConfFirmwareVersion, physicalInterfaceNumRX=physicalInterfaceNumRX, physicalInterface=physicalInterface, dhcpClient=dhcpClient, physicalInterfaceNumTX=physicalInterfaceNumTX, physicalInterfacesTable=physicalInterfacesTable, airport=airport, dhcpClientsTable=dhcpClientsTable, sysConfContact=sysConfContact, wirelessTimeAssociated=wirelessTimeAssociated, physicalInterfaceNumTXError=physicalInterfaceNumTXError, wirelessLastRefreshTime=wirelessLastRefreshTime, wirelessStrength=wirelessStrength, wirelessNumRX=wirelessNumRX, dhcpServer=dhcpServer, wirelessNumber=wirelessNumber, wirelessNumRXErrors=wirelessNumRXErrors, wirelessType=wirelessType, dhcpNumber=dhcpNumber, sysConfName=sysConfName, wirelessRate=wirelessRate, PYSNMP_MODULE_ID=baseStation3, physicalInterfaceIndex=physicalInterfaceIndex)
