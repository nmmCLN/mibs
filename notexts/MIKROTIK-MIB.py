#
# PySNMP MIB module MIKROTIK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mikrotik/MIKROTIK-MIB
# Produced by pysmi-1.1.8 at Fri Jan 13 14:35:09 2023
# On host fv-az358-896 platform Linux version 5.15.0-1030-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Counter32, iso, Counter64, TimeTicks, Unsigned32, NotificationType, MibIdentifier, ModuleIdentity, Integer32, Gauge32, enterprises, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "iso", "Counter64", "TimeTicks", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity", "Integer32", "Gauge32", "enterprises", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "MacAddress", "DisplayString")
mikrotikExperimentalModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 14988, 1))
mikrotikExperimentalModule.setRevisions(('2020-10-08 00:00',))
if mibBuilder.loadTexts: mikrotikExperimentalModule.setLastUpdated('202010080000Z')
if mibBuilder.loadTexts: mikrotikExperimentalModule.setOrganization('MikroTik')
mikrotik = MibIdentifier((1, 3, 6, 1, 4, 1, 14988))
mtXMetaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 2))
mtXRouterOsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1))
mtXRouterOs = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1))
mtxrWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1))
mtxrQueues = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2))
mtxrHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3))
mtxrLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4))
mtxrHotspot = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5))
mtxrDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 6))
mtxrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7))
mtxrScripts = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8))
mtxrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 9))
mtxrNstremeDual = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10))
mtxrNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11))
mtxrGps = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12))
mtxrWirelessModem = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 13))
mtxrInterfaceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14))
mtxrPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15))
mtxrLTEModem = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16))
mtxrPartition = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17))
mtxrScriptRun = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 18))
mtxrOptical = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19))
mtxrIPSec = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20))
class ObjectIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class HexInt(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483648, 2147483647)

class Voltage(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483648, 2147483647)

class Temperature(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483648, 2147483647)

class Power(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483648, 2147483647)

class GDiv100(TextualConvention, Gauge32):
    status = 'current'
    displayHint = 'd-2'

class GDiv1000(TextualConvention, Gauge32):
    status = 'current'
    displayHint = 'd-3'

class IDiv1000(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-3'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483648, 2147483647)

class BoolValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class IsakmpCookie(TextualConvention, OctetString):
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

mtxrWlStatTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1), )
if mibBuilder.loadTexts: mtxrWlStatTable.setStatus('current')
mtxrWlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlStatIndex"))
if mibBuilder.loadTexts: mtxrWlStatEntry.setStatus('current')
mtxrWlStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlStatIndex.setStatus('current')
mtxrWlStatTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatTxRate.setStatus('current')
mtxrWlStatRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatRxRate.setStatus('current')
mtxrWlStatStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatStrength.setStatus('current')
mtxrWlStatSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatSsid.setStatus('current')
mtxrWlStatBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatBssid.setStatus('current')
mtxrWlStatFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatFreq.setStatus('current')
mtxrWlStatBand = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatBand.setStatus('current')
mtxrWlStatTxCCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatTxCCQ.setStatus('current')
mtxrWlStatRxCCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlStatRxCCQ.setStatus('current')
mtxrWlRtabTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2), )
if mibBuilder.loadTexts: mtxrWlRtabTable.setStatus('current')
mtxrWlRtabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlRtabAddr"), (0, "MIKROTIK-MIB", "mtxrWlRtabIface"))
if mibBuilder.loadTexts: mtxrWlRtabEntry.setStatus('current')
mtxrWlRtabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: mtxrWlRtabAddr.setStatus('current')
mtxrWlRtabIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 2), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlRtabIface.setStatus('current')
mtxrWlRtabStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabStrength.setStatus('current')
mtxrWlRtabTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxBytes.setStatus('current')
mtxrWlRtabRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxBytes.setStatus('current')
mtxrWlRtabTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxPackets.setStatus('current')
mtxrWlRtabRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxPackets.setStatus('current')
mtxrWlRtabTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxRate.setStatus('current')
mtxrWlRtabRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxRate.setStatus('current')
mtxrWlRtabRouterOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRouterOSVersion.setStatus('current')
mtxrWlRtabUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabUptime.setStatus('current')
mtxrWlRtabSignalToNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabSignalToNoise.setStatus('current')
mtxrWlRtabTxStrengthCh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxStrengthCh0.setStatus('current')
mtxrWlRtabRxStrengthCh0 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxStrengthCh0.setStatus('current')
mtxrWlRtabTxStrengthCh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxStrengthCh1.setStatus('current')
mtxrWlRtabRxStrengthCh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxStrengthCh1.setStatus('current')
mtxrWlRtabTxStrengthCh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxStrengthCh2.setStatus('current')
mtxrWlRtabRxStrengthCh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRxStrengthCh2.setStatus('current')
mtxrWlRtabTxStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabTxStrength.setStatus('current')
mtxrWlRtabRadioName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabRadioName.setStatus('current')
mtxrWlRtabEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlRtabEntryCount.setStatus('current')
mtxrWlApTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3), )
if mibBuilder.loadTexts: mtxrWlApTable.setStatus('current')
mtxrWlApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlApIndex"))
if mibBuilder.loadTexts: mtxrWlApEntry.setStatus('current')
mtxrWlApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlApIndex.setStatus('current')
mtxrWlApTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApTxRate.setStatus('current')
mtxrWlApRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApRxRate.setStatus('current')
mtxrWlApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApSsid.setStatus('current')
mtxrWlApBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApBssid.setStatus('current')
mtxrWlApClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApClientCount.setStatus('current')
mtxrWlApFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApFreq.setStatus('current')
mtxrWlApBand = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApBand.setStatus('current')
mtxrWlApNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApNoiseFloor.setStatus('current')
mtxrWlApOverallTxCCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApOverallTxCCQ.setStatus('current')
mtxrWlApAuthClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlApAuthClientCount.setStatus('current')
mtxrWlCMRtabTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5), )
if mibBuilder.loadTexts: mtxrWlCMRtabTable.setStatus('current')
mtxrWlCMRtabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlCMRtabAddr"), (0, "MIKROTIK-MIB", "mtxrWlCMRtabIface"))
if mibBuilder.loadTexts: mtxrWlCMRtabEntry.setStatus('current')
mtxrWlCMRtabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabAddr.setStatus('current')
mtxrWlCMRtabIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 2), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlCMRtabIface.setStatus('current')
mtxrWlCMRtabUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabUptime.setStatus('current')
mtxrWlCMRtabTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabTxBytes.setStatus('current')
mtxrWlCMRtabRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabRxBytes.setStatus('current')
mtxrWlCMRtabTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabTxPackets.setStatus('current')
mtxrWlCMRtabRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabRxPackets.setStatus('current')
mtxrWlCMRtabTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabTxRate.setStatus('current')
mtxrWlCMRtabRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabRxRate.setStatus('current')
mtxrWlCMRtabTxStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabTxStrength.setStatus('current')
mtxrWlCMRtabRxStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabRxStrength.setStatus('current')
mtxrWlCMRtabSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabSsid.setStatus('current')
mtxrWlCMRtabEapIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabEapIdent.setStatus('current')
mtxrWlCMRtabEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRtabEntryCount.setStatus('current')
mtxrWlCMREntryCount = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMREntryCount.setStatus('current')
mtxrWlCMTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7), )
if mibBuilder.loadTexts: mtxrWlCMTable.setStatus('current')
mtxrWlCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlCMIndex"))
if mibBuilder.loadTexts: mtxrWlCMEntry.setStatus('current')
mtxrWlCMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlCMIndex.setStatus('current')
mtxrWlCMRegClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRegClientCount.setStatus('current')
mtxrWlCMAuthClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMAuthClientCount.setStatus('current')
mtxrWlCMState = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMState.setStatus('current')
mtxrWlCMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMChannel.setStatus('current')
mtxrWlCMRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11), )
if mibBuilder.loadTexts: mtxrWlCMRemoteTable.setStatus('current')
mtxrWlCMRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWlCMRemoteIndex"))
if mibBuilder.loadTexts: mtxrWlCMRemoteEntry.setStatus('current')
mtxrWlCMRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWlCMRemoteIndex.setStatus('current')
mtxrWlCMRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRemoteName.setStatus('current')
mtxrWlCMRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRemoteState.setStatus('current')
mtxrWlCMRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRemoteAddress.setStatus('current')
mtxrWlCMRemoteRadios = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWlCMRemoteRadios.setStatus('current')
mtxrWl60GTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8), )
if mibBuilder.loadTexts: mtxrWl60GTable.setStatus('current')
mtxrWl60GEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWl60GIndex"))
if mibBuilder.loadTexts: mtxrWl60GEntry.setStatus('current')
mtxrWl60GIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWl60GIndex.setStatus('current')
mtxrWl60GMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("apBridge", 0), ("stationBridge", 1), ("sniff", 2), ("bridge", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GMode.setStatus('current')
mtxrWl60GSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GSsid.setStatus('current')
mtxrWl60GConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 4), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GConnected.setStatus('current')
mtxrWl60GRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GRemote.setStatus('current')
mtxrWl60GFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GFreq.setStatus('current')
mtxrWl60GMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GMcs.setStatus('current')
mtxrWl60GSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GSignal.setStatus('current')
mtxrWl60GTxSector = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GTxSector.setStatus('current')
mtxrWl60GTxSectorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GTxSectorInfo.setStatus('current')
mtxrWl60GRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GRssi.setStatus('current')
mtxrWl60GPhyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GPhyRate.setStatus('current')
mtxrWl60GStaTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9), )
if mibBuilder.loadTexts: mtxrWl60GStaTable.setStatus('current')
mtxrWl60GStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrWl60GStaIndex"))
if mibBuilder.loadTexts: mtxrWl60GStaEntry.setStatus('current')
mtxrWl60GStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrWl60GStaIndex.setStatus('current')
mtxrWl60GStaConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 2), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaConnected.setStatus('current')
mtxrWl60GStaRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaRemote.setStatus('current')
mtxrWl60GStaMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaMcs.setStatus('current')
mtxrWl60GStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaSignal.setStatus('current')
mtxrWl60GStaTxSector = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaTxSector.setStatus('current')
mtxrWl60GStaPhyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaPhyRate.setStatus('current')
mtxrWl60GStaRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaRssi.setStatus('current')
mtxrWl60GStaDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWl60GStaDistance.setStatus('current')
mtxrWirelessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 1)).setObjects(("MIKROTIK-MIB", "mtxrWlStatTxRate"), ("MIKROTIK-MIB", "mtxrWlStatRxRate"), ("MIKROTIK-MIB", "mtxrWlStatStrength"), ("MIKROTIK-MIB", "mtxrWlStatSsid"), ("MIKROTIK-MIB", "mtxrWlStatBssid"), ("MIKROTIK-MIB", "mtxrWlStatFreq"), ("MIKROTIK-MIB", "mtxrWlStatBand"), ("MIKROTIK-MIB", "mtxrWlStatTxCCQ"), ("MIKROTIK-MIB", "mtxrWlStatRxCCQ"), ("MIKROTIK-MIB", "mtxrWlRtabStrength"), ("MIKROTIK-MIB", "mtxrWlRtabTxBytes"), ("MIKROTIK-MIB", "mtxrWlRtabRxBytes"), ("MIKROTIK-MIB", "mtxrWlRtabTxPackets"), ("MIKROTIK-MIB", "mtxrWlRtabRxPackets"), ("MIKROTIK-MIB", "mtxrWlRtabTxRate"), ("MIKROTIK-MIB", "mtxrWlRtabRxRate"), ("MIKROTIK-MIB", "mtxrWlRtabEntryCount"), ("MIKROTIK-MIB", "mtxrWlRtabRouterOSVersion"), ("MIKROTIK-MIB", "mtxrWlRtabUptime"), ("MIKROTIK-MIB", "mtxrWlRtabSignalToNoise"), ("MIKROTIK-MIB", "mtxrWlRtabTxStrengthCh0"), ("MIKROTIK-MIB", "mtxrWlRtabRxStrengthCh0"), ("MIKROTIK-MIB", "mtxrWlRtabTxStrengthCh1"), ("MIKROTIK-MIB", "mtxrWlRtabRxStrengthCh1"), ("MIKROTIK-MIB", "mtxrWlRtabTxStrengthCh2"), ("MIKROTIK-MIB", "mtxrWlRtabRxStrengthCh2"), ("MIKROTIK-MIB", "mtxrWlRtabTxStrength"), ("MIKROTIK-MIB", "mtxrWlRtabRadioName"), ("MIKROTIK-MIB", "mtxrWlApTxRate"), ("MIKROTIK-MIB", "mtxrWlApRxRate"), ("MIKROTIK-MIB", "mtxrWlApSsid"), ("MIKROTIK-MIB", "mtxrWlApBssid"), ("MIKROTIK-MIB", "mtxrWlApClientCount"), ("MIKROTIK-MIB", "mtxrWlApBand"), ("MIKROTIK-MIB", "mtxrWlApFreq"), ("MIKROTIK-MIB", "mtxrWlApNoiseFloor"), ("MIKROTIK-MIB", "mtxrWlApOverallTxCCQ"), ("MIKROTIK-MIB", "mtxrWlApAuthClientCount"), ("MIKROTIK-MIB", "mtxrWlCMRtabAddr"), ("MIKROTIK-MIB", "mtxrWlCMRtabTxBytes"), ("MIKROTIK-MIB", "mtxrWlCMRtabRxBytes"), ("MIKROTIK-MIB", "mtxrWlCMRtabTxPackets"), ("MIKROTIK-MIB", "mtxrWlCMRtabRxPackets"), ("MIKROTIK-MIB", "mtxrWlCMRtabTxRate"), ("MIKROTIK-MIB", "mtxrWlCMRtabRxRate"), ("MIKROTIK-MIB", "mtxrWlCMRtabUptime"), ("MIKROTIK-MIB", "mtxrWlCMRtabTxStrength"), ("MIKROTIK-MIB", "mtxrWlCMRtabRxStrength"), ("MIKROTIK-MIB", "mtxrWlCMRtabSsid"), ("MIKROTIK-MIB", "mtxrWlCMRtabEntryCount"), ("MIKROTIK-MIB", "mtxrWlCMREntryCount"), ("MIKROTIK-MIB", "mtxrWlCMRegClientCount"), ("MIKROTIK-MIB", "mtxrWlCMAuthClientCount"), ("MIKROTIK-MIB", "mtxrWl60GMode"), ("MIKROTIK-MIB", "mtxrWl60GSsid"), ("MIKROTIK-MIB", "mtxrWl60GConnected"), ("MIKROTIK-MIB", "mtxrWl60GRemote"), ("MIKROTIK-MIB", "mtxrWl60GFreq"), ("MIKROTIK-MIB", "mtxrWl60GMcs"), ("MIKROTIK-MIB", "mtxrWl60GSignal"), ("MIKROTIK-MIB", "mtxrWl60GTxSector"), ("MIKROTIK-MIB", "mtxrWl60GTxSectorInfo"), ("MIKROTIK-MIB", "mtxrWl60GRssi"), ("MIKROTIK-MIB", "mtxrWl60GPhyRate"), ("MIKROTIK-MIB", "mtxrWl60GStaConnected"), ("MIKROTIK-MIB", "mtxrWl60GStaRemote"), ("MIKROTIK-MIB", "mtxrWl60GStaMcs"), ("MIKROTIK-MIB", "mtxrWl60GStaSignal"), ("MIKROTIK-MIB", "mtxrWl60GStaTxSector"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrWirelessGroup = mtxrWirelessGroup.setStatus('current')
mtxrQueueSimpleTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1), )
if mibBuilder.loadTexts: mtxrQueueSimpleTable.setStatus('current')
mtxrQueueSimpleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrQueueSimpleIndex"))
if mibBuilder.loadTexts: mtxrQueueSimpleEntry.setStatus('current')
mtxrQueueSimpleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrQueueSimpleIndex.setStatus('current')
mtxrQueueSimpleName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleName.setStatus('current')
mtxrQueueSimpleSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleSrcAddr.setStatus('current')
mtxrQueueSimpleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleSrcMask.setStatus('current')
mtxrQueueSimpleDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleDstAddr.setStatus('current')
mtxrQueueSimpleDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleDstMask.setStatus('current')
mtxrQueueSimpleIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 7), ObjectIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleIface.setStatus('current')
mtxrQueueSimpleBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleBytesIn.setStatus('current')
mtxrQueueSimpleBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleBytesOut.setStatus('current')
mtxrQueueSimplePacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimplePacketsIn.setStatus('current')
mtxrQueueSimplePacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimplePacketsOut.setStatus('current')
mtxrQueueSimplePCQQueuesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimplePCQQueuesIn.setStatus('current')
mtxrQueueSimplePCQQueuesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimplePCQQueuesOut.setStatus('current')
mtxrQueueSimpleDroppedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleDroppedIn.setStatus('current')
mtxrQueueSimpleDroppedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueSimpleDroppedOut.setStatus('current')
mtxrQueueTreeTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2), )
if mibBuilder.loadTexts: mtxrQueueTreeTable.setStatus('current')
mtxrQueueTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrQueueTreeIndex"))
if mibBuilder.loadTexts: mtxrQueueTreeEntry.setStatus('current')
mtxrQueueTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrQueueTreeIndex.setStatus('current')
mtxrQueueTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeName.setStatus('current')
mtxrQueueTreeFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeFlow.setStatus('current')
mtxrQueueTreeParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 4), ObjectIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeParentIndex.setStatus('current')
mtxrQueueTreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeBytes.setStatus('current')
mtxrQueueTreePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreePackets.setStatus('current')
mtxrQueueTreeHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeHCBytes.setStatus('current')
mtxrQueueTreePCQQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreePCQQueues.setStatus('current')
mtxrQueueTreeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrQueueTreeDropped.setStatus('current')
mtxrQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 2)).setObjects(("MIKROTIK-MIB", "mtxrQueueSimpleName"), ("MIKROTIK-MIB", "mtxrQueueSimpleSrcAddr"), ("MIKROTIK-MIB", "mtxrQueueSimpleSrcMask"), ("MIKROTIK-MIB", "mtxrQueueSimpleDstAddr"), ("MIKROTIK-MIB", "mtxrQueueSimpleDstMask"), ("MIKROTIK-MIB", "mtxrQueueSimpleIface"), ("MIKROTIK-MIB", "mtxrQueueSimpleBytesIn"), ("MIKROTIK-MIB", "mtxrQueueSimpleBytesOut"), ("MIKROTIK-MIB", "mtxrQueueSimplePacketsIn"), ("MIKROTIK-MIB", "mtxrQueueSimplePacketsOut"), ("MIKROTIK-MIB", "mtxrQueueTreeName"), ("MIKROTIK-MIB", "mtxrQueueSimplePCQQueuesIn"), ("MIKROTIK-MIB", "mtxrQueueSimplePCQQueuesOut"), ("MIKROTIK-MIB", "mtxrQueueSimpleDroppedIn"), ("MIKROTIK-MIB", "mtxrQueueSimpleDroppedOut"), ("MIKROTIK-MIB", "mtxrQueueTreeFlow"), ("MIKROTIK-MIB", "mtxrQueueTreeParentIndex"), ("MIKROTIK-MIB", "mtxrQueueTreeBytes"), ("MIKROTIK-MIB", "mtxrQueueTreePackets"), ("MIKROTIK-MIB", "mtxrQueueTreeHCBytes"), ("MIKROTIK-MIB", "mtxrQueueTreePCQQueues"), ("MIKROTIK-MIB", "mtxrQueueTreeDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrQueueGroup = mtxrQueueGroup.setStatus('current')
mtxrHlCoreVoltage = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 1), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlCoreVoltage.setStatus('current')
mtxrHlThreeDotThreeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 2), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlThreeDotThreeVoltage.setStatus('current')
mtxrHlFiveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 3), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlFiveVoltage.setStatus('current')
mtxrHlTwelveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 4), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlTwelveVoltage.setStatus('current')
mtxrHlSensorTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 5), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlSensorTemperature.setStatus('current')
mtxrHlCpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 6), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlCpuTemperature.setStatus('current')
mtxrHlBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 7), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlBoardTemperature.setStatus('current')
mtxrHlVoltage = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 8), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlVoltage.setStatus('current')
mtxrHlActiveFan = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlActiveFan.setStatus('current')
mtxrHlTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 10), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlTemperature.setStatus('current')
mtxrHlProcessorTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 11), Temperature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlProcessorTemperature.setStatus('current')
mtxrHlPower = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 12), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlPower.setStatus('current')
mtxrHlCurrent = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlCurrent.setStatus('current')
mtxrHlProcessorFrequency = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlProcessorFrequency.setStatus('current')
mtxrHlPowerSupplyState = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 15), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlPowerSupplyState.setStatus('current')
mtxrHlBackupPowerSupplyState = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 16), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlBackupPowerSupplyState.setStatus('current')
mtxrHlFanSpeed1 = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlFanSpeed1.setStatus('current')
mtxrHlFanSpeed2 = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHlFanSpeed2.setStatus('current')
mtxrGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100), )
if mibBuilder.loadTexts: mtxrGaugeTable.setStatus('current')
mtxrGaugeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrGaugeIndex"))
if mibBuilder.loadTexts: mtxrGaugeTableEntry.setStatus('current')
mtxrGaugeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrGaugeIndex.setStatus('current')
mtxrGaugeName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrGaugeName.setStatus('current')
mtxrGaugeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrGaugeValue.setStatus('current')
mtxrGaugeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 3, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("celsius", 1), ("rpm", 2), ("dV", 3), ("dA", 4), ("dW", 5), ("status", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrGaugeUnit.setStatus('current')
mtxrHealthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 3)).setObjects(("MIKROTIK-MIB", "mtxrHlCoreVoltage"), ("MIKROTIK-MIB", "mtxrHlThreeDotThreeVoltage"), ("MIKROTIK-MIB", "mtxrHlFiveVoltage"), ("MIKROTIK-MIB", "mtxrHlTwelveVoltage"), ("MIKROTIK-MIB", "mtxrHlSensorTemperature"), ("MIKROTIK-MIB", "mtxrHlCpuTemperature"), ("MIKROTIK-MIB", "mtxrHlBoardTemperature"), ("MIKROTIK-MIB", "mtxrHlVoltage"), ("MIKROTIK-MIB", "mtxrHlActiveFan"), ("MIKROTIK-MIB", "mtxrHlTemperature"), ("MIKROTIK-MIB", "mtxrHlProcessorTemperature"), ("MIKROTIK-MIB", "mtxrHlCurrent"), ("MIKROTIK-MIB", "mtxrHlPower"), ("MIKROTIK-MIB", "mtxrHlProcessorFrequency"), ("MIKROTIK-MIB", "mtxrHlPowerSupplyState"), ("MIKROTIK-MIB", "mtxrHlBackupPowerSupplyState"), ("MIKROTIK-MIB", "mtxrHlFanSpeed1"), ("MIKROTIK-MIB", "mtxrHlFanSpeed2"), ("MIKROTIK-MIB", "mtxrGaugeName"), ("MIKROTIK-MIB", "mtxrGaugeValue"), ("MIKROTIK-MIB", "mtxrGaugeUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrHealthGroup = mtxrHealthGroup.setStatus('current')
mtxrLicSoftwareId = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLicSoftwareId.setStatus('current')
mtxrLicUpgrUntil = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLicUpgrUntil.setStatus('current')
mtxrLicLevel = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLicLevel.setStatus('current')
mtxrLicVersion = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLicVersion.setStatus('current')
mtxrLicUpgradableTo = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLicUpgradableTo.setStatus('current')
mtxrLincenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 4)).setObjects(("MIKROTIK-MIB", "mtxrLicSoftwareId"), ("MIKROTIK-MIB", "mtxrLicUpgrUntil"), ("MIKROTIK-MIB", "mtxrLicLevel"), ("MIKROTIK-MIB", "mtxrLicVersion"), ("MIKROTIK-MIB", "mtxrLicUpgradableTo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrLincenseGroup = mtxrLincenseGroup.setStatus('current')
mtxrHotspotActiveUsersTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1), )
if mibBuilder.loadTexts: mtxrHotspotActiveUsersTable.setStatus('current')
mtxrHotspotActiveUsersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrHotspotActiveUserIndex"))
if mibBuilder.loadTexts: mtxrHotspotActiveUsersTableEntry.setStatus('current')
mtxrHotspotActiveUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrHotspotActiveUserIndex.setStatus('current')
mtxrHotspotActiveUserServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserServerID.setStatus('current')
mtxrHotspotActiveUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserName.setStatus('current')
mtxrHotspotActiveUserDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserDomain.setStatus('current')
mtxrHotspotActiveUserIP = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserIP.setStatus('current')
mtxrHotspotActiveUserMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserMAC.setStatus('current')
mtxrHotspotActiveUserConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserConnectTime.setStatus('current')
mtxrHotspotActiveUserValidTillTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserValidTillTime.setStatus('current')
mtxrHotspotActiveUserIdleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserIdleStartTime.setStatus('current')
mtxrHotspotActiveUserIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserIdleTimeout.setStatus('current')
mtxrHotspotActiveUserPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserPingTimeout.setStatus('current')
mtxrHotspotActiveUserBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserBytesIn.setStatus('current')
mtxrHotspotActiveUserBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserBytesOut.setStatus('current')
mtxrHotspotActiveUserPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserPacketsIn.setStatus('current')
mtxrHotspotActiveUserPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserPacketsOut.setStatus('current')
mtxrHotspotActiveUserLimitBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserLimitBytesIn.setStatus('current')
mtxrHotspotActiveUserLimitBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserLimitBytesOut.setStatus('current')
mtxrHotspotActiveUserAdvertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserAdvertStatus.setStatus('current')
mtxrHotspotActiveUserRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserRadius.setStatus('current')
mtxrHotspotActiveUserBlockedByAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrHotspotActiveUserBlockedByAdvert.setStatus('current')
mtxrHotspotActiveUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 5)).setObjects(("MIKROTIK-MIB", "mtxrHotspotActiveUserServerID"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserName"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserDomain"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserIP"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserMAC"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserConnectTime"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserValidTillTime"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserIdleStartTime"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserIdleTimeout"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserPingTimeout"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserBytesIn"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserBytesOut"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserPacketsIn"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserPacketsOut"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserLimitBytesIn"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserLimitBytesOut"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserAdvertStatus"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserRadius"), ("MIKROTIK-MIB", "mtxrHotspotActiveUserBlockedByAdvert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrHotspotActiveUserGroup = mtxrHotspotActiveUserGroup.setStatus('current')
mtxrDHCPLeaseCount = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDHCPLeaseCount.setStatus('current')
mtxrDHCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 12)).setObjects(("MIKROTIK-MIB", "mtxrDHCPLeaseCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrDHCPGroup = mtxrDHCPGroup.setStatus('current')
mtxrSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtxrSystemReboot.setStatus('current')
mtxrUSBPowerReset = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtxrUSBPowerReset.setStatus('current')
mtxrSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrSerialNumber.setStatus('current')
mtxrFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrFirmwareVersion.setStatus('current')
mtxrNote = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNote.setStatus('current')
mtxrBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrBuildTime.setStatus('current')
mtxrFirmwareUpgradeVersion = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrFirmwareUpgradeVersion.setStatus('current')
mtxrBoardName = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrBoardName.setStatus('current')
mtxrSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 13)).setObjects(("MIKROTIK-MIB", "mtxrSystemReboot"), ("MIKROTIK-MIB", "mtxrUSBPowerReset"), ("MIKROTIK-MIB", "mtxrSerialNumber"), ("MIKROTIK-MIB", "mtxrFirmwareVersion"), ("MIKROTIK-MIB", "mtxrNote"), ("MIKROTIK-MIB", "mtxrBuildTime"), ("MIKROTIK-MIB", "mtxrFirmwareUpgradeVersion"), ("MIKROTIK-MIB", "mtxrBoardName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrSystemGroup = mtxrSystemGroup.setStatus('current')
mtxrScriptTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8, 1), )
if mibBuilder.loadTexts: mtxrScriptTable.setStatus('current')
mtxrScriptTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrScriptIndex"))
if mibBuilder.loadTexts: mtxrScriptTableEntry.setStatus('current')
mtxrScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrScriptIndex.setStatus('current')
mtxrScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrScriptName.setStatus('current')
mtxrScriptRunCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtxrScriptRunCmd.setStatus('current')
mtxrScriptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 8)).setObjects(("MIKROTIK-MIB", "mtxrScriptName"), ("MIKROTIK-MIB", "mtxrScriptRunCmd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrScriptGroup = mtxrScriptGroup.setStatus('current')
mtxrScriptRunTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 18, 1), )
if mibBuilder.loadTexts: mtxrScriptRunTable.setStatus('current')
mtxrScriptRunTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 18, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrScriptRunIndex"))
if mibBuilder.loadTexts: mtxrScriptRunTableEntry.setStatus('current')
mtxrScriptRunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 18, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrScriptRunIndex.setStatus('current')
mtxrScriptRunOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrScriptRunOutput.setStatus('current')
mtxrScriptRunGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 21)).setObjects(("MIKROTIK-MIB", "mtxrScriptRunOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrScriptRunGroup = mtxrScriptRunGroup.setStatus('current')
mtxrDnStatTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1), )
if mibBuilder.loadTexts: mtxrDnStatTable.setStatus('current')
mtxrDnStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrDnStatIndex"))
if mibBuilder.loadTexts: mtxrDnStatEntry.setStatus('current')
mtxrDnStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrDnStatIndex.setStatus('current')
mtxrDnStatTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDnStatTxRate.setStatus('current')
mtxrDnStatRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDnStatRxRate.setStatus('current')
mtxrDnStatTxStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDnStatTxStrength.setStatus('current')
mtxrDnStatRxStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDnStatRxStrength.setStatus('current')
mtxrDnConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDnConnected.setStatus('current')
mtxrNstremeDualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 10)).setObjects(("MIKROTIK-MIB", "mtxrDnStatTxRate"), ("MIKROTIK-MIB", "mtxrDnStatRxRate"), ("MIKROTIK-MIB", "mtxrDnStatTxStrength"), ("MIKROTIK-MIB", "mtxrDnStatRxStrength"), ("MIKROTIK-MIB", "mtxrDnConnected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrNstremeDualGroup = mtxrNstremeDualGroup.setStatus('current')
mtxrNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1), )
if mibBuilder.loadTexts: mtxrNeighborTable.setStatus('current')
mtxrNeighborTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrNeighborIndex"))
if mibBuilder.loadTexts: mtxrNeighborTableEntry.setStatus('current')
mtxrNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrNeighborIndex.setStatus('current')
mtxrNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborIpAddress.setStatus('current')
mtxrNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborMacAddress.setStatus('current')
mtxrNeighborVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborVersion.setStatus('current')
mtxrNeighborPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborPlatform.setStatus('current')
mtxrNeighborIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborIdentity.setStatus('current')
mtxrNeighborSoftwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborSoftwareID.setStatus('current')
mtxrNeighborInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 11, 1, 1, 8), ObjectIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrNeighborInterfaceID.setStatus('current')
mtxrNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 11)).setObjects(("MIKROTIK-MIB", "mtxrNeighborIpAddress"), ("MIKROTIK-MIB", "mtxrNeighborMacAddress"), ("MIKROTIK-MIB", "mtxrNeighborVersion"), ("MIKROTIK-MIB", "mtxrNeighborPlatform"), ("MIKROTIK-MIB", "mtxrNeighborIdentity"), ("MIKROTIK-MIB", "mtxrNeighborSoftwareID"), ("MIKROTIK-MIB", "mtxrNeighborInterfaceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrNeighborGroup = mtxrNeighborGroup.setStatus('current')
mtxrDate = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrDate.setStatus('current')
mtxrLongtitude = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLongtitude.setStatus('current')
mtxrLatitude = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLatitude.setStatus('current')
mtxrAltitude = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrAltitude.setStatus('current')
mtxrSpeed = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrSpeed.setStatus('current')
mtxrSattelites = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrSattelites.setStatus('current')
mtxrValid = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrValid.setStatus('current')
mtxrGPSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 15)).setObjects(("MIKROTIK-MIB", "mtxrDate"), ("MIKROTIK-MIB", "mtxrLongtitude"), ("MIKROTIK-MIB", "mtxrLatitude"), ("MIKROTIK-MIB", "mtxrAltitude"), ("MIKROTIK-MIB", "mtxrSpeed"), ("MIKROTIK-MIB", "mtxrSattelites"), ("MIKROTIK-MIB", "mtxrValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrGPSGroup = mtxrGPSGroup.setStatus('current')
mtxrWirelessModemSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWirelessModemSignalStrength.setStatus('current')
mtxrWirelessModemSignalECIO = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrWirelessModemSignalECIO.setStatus('current')
mtxrWirelessModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 16)).setObjects(("MIKROTIK-MIB", "mtxrWirelessModemSignalStrength"), ("MIKROTIK-MIB", "mtxrWirelessModemSignalECIO"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrWirelessModemGroup = mtxrWirelessModemGroup.setStatus('current')
mtxrInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1), )
if mibBuilder.loadTexts: mtxrInterfaceStatsTable.setStatus('current')
mtxrInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrInterfaceStatsIndex"))
if mibBuilder.loadTexts: mtxrInterfaceStatsEntry.setStatus('current')
mtxrInterfaceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrInterfaceStatsIndex.setStatus('current')
mtxrInterfaceStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsName.setStatus('current')
mtxrInterfaceStatsDriverRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsDriverRxBytes.setStatus('current')
mtxrInterfaceStatsDriverRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsDriverRxPackets.setStatus('current')
mtxrInterfaceStatsDriverTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsDriverTxBytes.setStatus('current')
mtxrInterfaceStatsDriverTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsDriverTxPackets.setStatus('current')
mtxrInterfaceStatsTxRx64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx64.setStatus('current')
mtxrInterfaceStatsTxRx65To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx65To127.setStatus('current')
mtxrInterfaceStatsTxRx128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx128To255.setStatus('current')
mtxrInterfaceStatsTxRx256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx256To511.setStatus('current')
mtxrInterfaceStatsTxRx512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx512To1023.setStatus('current')
mtxrInterfaceStatsTxRx1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx1024To1518.setStatus('current')
mtxrInterfaceStatsTxRx1519ToMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxRx1519ToMax.setStatus('current')
mtxrInterfaceStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxBytes.setStatus('current')
mtxrInterfaceStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxPackets.setStatus('current')
mtxrInterfaceStatsRxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxTooShort.setStatus('current')
mtxrInterfaceStatsRx64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx64.setStatus('current')
mtxrInterfaceStatsRx65To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx65To127.setStatus('current')
mtxrInterfaceStatsRx128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx128To255.setStatus('current')
mtxrInterfaceStatsRx256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx256To511.setStatus('current')
mtxrInterfaceStatsRx512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx512To1023.setStatus('current')
mtxrInterfaceStatsRx1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx1024To1518.setStatus('current')
mtxrInterfaceStatsRx1519ToMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRx1519ToMax.setStatus('current')
mtxrInterfaceStatsRxTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxTooLong.setStatus('current')
mtxrInterfaceStatsRxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxBroadcast.setStatus('current')
mtxrInterfaceStatsRxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxPause.setStatus('current')
mtxrInterfaceStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxMulticast.setStatus('current')
mtxrInterfaceStatsRxFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxFCSError.setStatus('current')
mtxrInterfaceStatsRxAlignError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxAlignError.setStatus('current')
mtxrInterfaceStatsRxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxFragment.setStatus('current')
mtxrInterfaceStatsRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxOverflow.setStatus('current')
mtxrInterfaceStatsRxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxControl.setStatus('current')
mtxrInterfaceStatsRxUnknownOp = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxUnknownOp.setStatus('current')
mtxrInterfaceStatsRxLengthError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxLengthError.setStatus('current')
mtxrInterfaceStatsRxCodeError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxCodeError.setStatus('current')
mtxrInterfaceStatsRxCarrierError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxCarrierError.setStatus('current')
mtxrInterfaceStatsRxJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxJabber.setStatus('current')
mtxrInterfaceStatsRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsRxDrop.setStatus('current')
mtxrInterfaceStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxBytes.setStatus('current')
mtxrInterfaceStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxPackets.setStatus('current')
mtxrInterfaceStatsTxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxTooShort.setStatus('current')
mtxrInterfaceStatsTx64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx64.setStatus('current')
mtxrInterfaceStatsTx65To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx65To127.setStatus('current')
mtxrInterfaceStatsTx128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx128To255.setStatus('current')
mtxrInterfaceStatsTx256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx256To511.setStatus('current')
mtxrInterfaceStatsTx512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx512To1023.setStatus('current')
mtxrInterfaceStatsTx1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx1024To1518.setStatus('current')
mtxrInterfaceStatsTx1519ToMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTx1519ToMax.setStatus('current')
mtxrInterfaceStatsTxTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxTooLong.setStatus('current')
mtxrInterfaceStatsTxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxBroadcast.setStatus('current')
mtxrInterfaceStatsTxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxPause.setStatus('current')
mtxrInterfaceStatsTxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxMulticast.setStatus('current')
mtxrInterfaceStatsTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxUnderrun.setStatus('current')
mtxrInterfaceStatsTxCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxCollision.setStatus('current')
mtxrInterfaceStatsTxExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxExcessiveCollision.setStatus('current')
mtxrInterfaceStatsTxMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxMultipleCollision.setStatus('current')
mtxrInterfaceStatsTxSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxSingleCollision.setStatus('current')
mtxrInterfaceStatsTxExcessiveDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxExcessiveDeferred.setStatus('current')
mtxrInterfaceStatsTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxDeferred.setStatus('current')
mtxrInterfaceStatsTxLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxLateCollision.setStatus('current')
mtxrInterfaceStatsTxTotalCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxTotalCollision.setStatus('current')
mtxrInterfaceStatsTxPauseHonored = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxPauseHonored.setStatus('current')
mtxrInterfaceStatsTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxDrop.setStatus('current')
mtxrInterfaceStatsTxJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxJabber.setStatus('current')
mtxrInterfaceStatsTxFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxFCSError.setStatus('current')
mtxrInterfaceStatsTxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxControl.setStatus('current')
mtxrInterfaceStatsTxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsTxFragment.setStatus('current')
mtxrInterfaceStatsLinkDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 14, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrInterfaceStatsLinkDowns.setStatus('current')
mtxrInterfaceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 17)).setObjects(("MIKROTIK-MIB", "mtxrInterfaceStatsName"), ("MIKROTIK-MIB", "mtxrInterfaceStatsDriverRxBytes"), ("MIKROTIK-MIB", "mtxrInterfaceStatsDriverRxPackets"), ("MIKROTIK-MIB", "mtxrInterfaceStatsDriverTxBytes"), ("MIKROTIK-MIB", "mtxrInterfaceStatsDriverTxPackets"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx64"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx65To127"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx128To255"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx256To511"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx512To1023"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx1024To1518"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxRx1519ToMax"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxBytes"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxPackets"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxTooShort"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx64"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx65To127"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx128To255"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx256To511"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx512To1023"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx1024To1518"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRx1519ToMax"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxTooLong"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxBroadcast"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxPause"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxMulticast"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxFCSError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxAlignError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxFragment"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxOverflow"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxControl"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxUnknownOp"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxLengthError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxCodeError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxCarrierError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxJabber"), ("MIKROTIK-MIB", "mtxrInterfaceStatsRxDrop"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxBytes"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxPackets"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxTooShort"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx64"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx65To127"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx128To255"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx256To511"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx512To1023"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx1024To1518"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTx1519ToMax"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxTooLong"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxBroadcast"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxPause"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxMulticast"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxUnderrun"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxExcessiveCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxMultipleCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxSingleCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxExcessiveDeferred"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxDeferred"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxLateCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxTotalCollision"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxPauseHonored"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxDrop"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxJabber"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxFCSError"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxControl"), ("MIKROTIK-MIB", "mtxrInterfaceStatsTxFragment"), ("MIKROTIK-MIB", "mtxrInterfaceStatsLinkDowns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrInterfaceStatsGroup = mtxrInterfaceStatsGroup.setStatus('current')
mtxrPOETable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1), )
if mibBuilder.loadTexts: mtxrPOETable.setStatus('current')
mtxrPOEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrPOEInterfaceIndex"))
if mibBuilder.loadTexts: mtxrPOEEntry.setStatus('current')
mtxrPOEInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrPOEInterfaceIndex.setStatus('current')
mtxrPOEName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPOEName.setStatus('current')
mtxrPOEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("waitingForLoad", 2), ("poweredOn", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPOEStatus.setStatus('current')
mtxrPOEVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 4), Voltage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPOEVoltage.setStatus('current')
mtxrPOECurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPOECurrent.setStatus('current')
mtxrPOEPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 15, 1, 1, 6), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPOEPower.setStatus('current')
mtxrPOEGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 18)).setObjects(("MIKROTIK-MIB", "mtxrPOEName"), ("MIKROTIK-MIB", "mtxrPOEStatus"), ("MIKROTIK-MIB", "mtxrPOEVoltage"), ("MIKROTIK-MIB", "mtxrPOECurrent"), ("MIKROTIK-MIB", "mtxrPOEPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrPOEGroup = mtxrPOEGroup.setStatus('current')
mtxrLTEModemTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1), )
if mibBuilder.loadTexts: mtxrLTEModemTable.setStatus('current')
mtxrLTEModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrLTEModemInterfaceIndex"))
if mibBuilder.loadTexts: mtxrLTEModemEntry.setStatus('current')
mtxrLTEModemInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrLTEModemInterfaceIndex.setStatus('current')
mtxrLTEModemSignalRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemSignalRSSI.setStatus('current')
mtxrLTEModemSignalRSRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemSignalRSRQ.setStatus('current')
mtxrLTEModemSignalRSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemSignalRSRP.setStatus('current')
mtxrLTEModemCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 5), HexInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemCellId.setStatus('current')
mtxrLTEModemAccessTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", -1), ("gsmcompact", 0), ("gsm", 1), ("utran", 2), ("egprs", 3), ("hsdpa", 4), ("hsupa", 5), ("hsdpahsupa", 6), ("eutran", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemAccessTechnology.setStatus('current')
mtxrLTEModemSignalSINR = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemSignalSINR.setStatus('current')
mtxrLTEModemEnbId = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemEnbId.setStatus('current')
mtxrLTEModemSectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemSectorId.setStatus('current')
mtxrLTEModemLac = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemLac.setStatus('current')
mtxrLTEModemIMEI = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemIMEI.setStatus('current')
mtxrLTEModemIMSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemIMSI.setStatus('current')
mtxrLTEModemUICC = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemUICC.setStatus('current')
mtxrLTEModemRAT = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 16, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrLTEModemRAT.setStatus('current')
mtxrLTEModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 19)).setObjects(("MIKROTIK-MIB", "mtxrLTEModemSignalRSSI"), ("MIKROTIK-MIB", "mtxrLTEModemSignalRSRQ"), ("MIKROTIK-MIB", "mtxrLTEModemSignalRSRP"), ("MIKROTIK-MIB", "mtxrLTEModemCellId"), ("MIKROTIK-MIB", "mtxrLTEModemAccessTechnology"), ("MIKROTIK-MIB", "mtxrLTEModemSignalSINR"), ("MIKROTIK-MIB", "mtxrLTEModemEnbId"), ("MIKROTIK-MIB", "mtxrLTEModemSectorId"), ("MIKROTIK-MIB", "mtxrLTEModemLac"), ("MIKROTIK-MIB", "mtxrLTEModemIMEI"), ("MIKROTIK-MIB", "mtxrLTEModemIMSI"), ("MIKROTIK-MIB", "mtxrLTEModemUICC"), ("MIKROTIK-MIB", "mtxrLTEModemRAT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrLTEModemGroup = mtxrLTEModemGroup.setStatus('current')
mtxrPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1), )
if mibBuilder.loadTexts: mtxrPartitionTable.setStatus('current')
mtxrPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrPartitionIndex"))
if mibBuilder.loadTexts: mtxrPartitionEntry.setStatus('current')
mtxrPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrPartitionIndex.setStatus('current')
mtxrPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPartitionName.setStatus('current')
mtxrPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPartitionSize.setStatus('current')
mtxrPartitionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPartitionVersion.setStatus('current')
mtxrPartitionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 5), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPartitionActive.setStatus('current')
mtxrPartitionRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 17, 1, 1, 6), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrPartitionRunning.setStatus('current')
mtxrPartitionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 20)).setObjects(("MIKROTIK-MIB", "mtxrPartitionName"), ("MIKROTIK-MIB", "mtxrPartitionSize"), ("MIKROTIK-MIB", "mtxrPartitionVersion"), ("MIKROTIK-MIB", "mtxrPartitionActive"), ("MIKROTIK-MIB", "mtxrPartitionRunning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrPartitionGroup = mtxrPartitionGroup.setStatus('current')
mtxrOpticalTable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1), )
if mibBuilder.loadTexts: mtxrOpticalTable.setStatus('current')
mtxrOpticalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrOpticalIndex"))
if mibBuilder.loadTexts: mtxrOpticalTableEntry.setStatus('current')
mtxrOpticalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 6)).setObjects(("MIKROTIK-MIB", "mtxrOpticalName"), ("MIKROTIK-MIB", "mtxrOpticalRxLoss"), ("MIKROTIK-MIB", "mtxrOpticalTxFault"), ("MIKROTIK-MIB", "mtxrOpticalWavelength"), ("MIKROTIK-MIB", "mtxrOpticalTemperature"), ("MIKROTIK-MIB", "mtxrOpticalSupplyVoltage"), ("MIKROTIK-MIB", "mtxrOpticalTxBiasCurrent"), ("MIKROTIK-MIB", "mtxrOpticalTxPower"), ("MIKROTIK-MIB", "mtxrOpticalRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrOpticalGroup = mtxrOpticalGroup.setStatus('current')
mtxrOpticalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrOpticalIndex.setStatus('current')
mtxrOpticalName = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalName.setStatus('current')
mtxrOpticalRxLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 3), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalRxLoss.setStatus('current')
mtxrOpticalTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 4), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalTxFault.setStatus('current')
mtxrOpticalWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 5), GDiv100()).setUnits('nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalWavelength.setStatus('current')
mtxrOpticalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 6), Gauge32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalTemperature.setStatus('current')
mtxrOpticalSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 7), GDiv1000()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalSupplyVoltage.setStatus('current')
mtxrOpticalTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 8), Gauge32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalTxBiasCurrent.setStatus('current')
mtxrOpticalTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 9), IDiv1000()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalTxPower.setStatus('current')
mtxrOpticalRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 19, 1, 1, 10), IDiv1000()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrOpticalRxPower.setStatus('current')
mtxrIkeSACount = MibScalar((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSACount.setStatus('current')
mtxrIkeSATable = MibTable((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2), )
if mibBuilder.loadTexts: mtxrIkeSATable.setStatus('current')
mtxrIkeSATableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1), ).setIndexNames((0, "MIKROTIK-MIB", "mtxrIkeSAIndex"))
if mibBuilder.loadTexts: mtxrIkeSATableEntry.setStatus('current')
mtxrIkeSAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 7)).setObjects(("MIKROTIK-MIB", "mtxrIkeSACount"), ("MIKROTIK-MIB", "mtxrIkeSAInitiatorCookie"), ("MIKROTIK-MIB", "mtxrIkeSAResponderCookie"), ("MIKROTIK-MIB", "mtxrIkeSAResponder"), ("MIKROTIK-MIB", "mtxrIkeSANatt"), ("MIKROTIK-MIB", "mtxrIkeSAVersion"), ("MIKROTIK-MIB", "mtxrIkeSAState"), ("MIKROTIK-MIB", "mtxrIkeSAUptime"), ("MIKROTIK-MIB", "mtxrIkeSASeen"), ("MIKROTIK-MIB", "mtxrIkeSAIdentity"), ("MIKROTIK-MIB", "mtxrIkeSAPh2Count"), ("MIKROTIK-MIB", "mtxrIkeSALocalAddressType"), ("MIKROTIK-MIB", "mtxrIkeSALocalAddress"), ("MIKROTIK-MIB", "mtxrIkeSALocalPort"), ("MIKROTIK-MIB", "mtxrIkeSAPeerAddressType"), ("MIKROTIK-MIB", "mtxrIkeSAPeerAddress"), ("MIKROTIK-MIB", "mtxrIkeSAPeerPort"), ("MIKROTIK-MIB", "mtxrIkeSADynamicAddressType"), ("MIKROTIK-MIB", "mtxrIkeSADynamicAddress"), ("MIKROTIK-MIB", "mtxrIkeSATxBytes"), ("MIKROTIK-MIB", "mtxrIkeSARxBytes"), ("MIKROTIK-MIB", "mtxrIkeSATxPackets"), ("MIKROTIK-MIB", "mtxrIkeSARxPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrIkeSAGroup = mtxrIkeSAGroup.setStatus('current')
mtxrIkeSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 1), ObjectIndex())
if mibBuilder.loadTexts: mtxrIkeSAIndex.setStatus('current')
mtxrIkeSAInitiatorCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 2), IsakmpCookie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAInitiatorCookie.setStatus('current')
mtxrIkeSAResponderCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 3), IsakmpCookie()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAResponderCookie.setStatus('current')
mtxrIkeSAResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 4), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAResponder.setStatus('current')
mtxrIkeSANatt = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 5), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSANatt.setStatus('current')
mtxrIkeSAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAVersion.setStatus('current')
mtxrIkeSAState = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("exchange", 1), ("established", 2), ("expired", 3), ("eap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAState.setStatus('current')
mtxrIkeSAUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAUptime.setStatus('current')
mtxrIkeSASeen = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSASeen.setStatus('current')
mtxrIkeSAIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAIdentity.setStatus('current')
mtxrIkeSAPh2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAPh2Count.setStatus('current')
mtxrIkeSALocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSALocalAddressType.setStatus('current')
mtxrIkeSALocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSALocalAddress.setStatus('current')
mtxrIkeSALocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSALocalPort.setStatus('current')
mtxrIkeSAPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAPeerAddressType.setStatus('current')
mtxrIkeSAPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAPeerAddress.setStatus('current')
mtxrIkeSAPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 17), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSAPeerPort.setStatus('current')
mtxrIkeSADynamicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 18), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSADynamicAddressType.setStatus('current')
mtxrIkeSADynamicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 19), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSADynamicAddress.setStatus('current')
mtxrIkeSATxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSATxBytes.setStatus('current')
mtxrIkeSARxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSARxBytes.setStatus('current')
mtxrIkeSATxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSATxPackets.setStatus('current')
mtxrIkeSARxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14988, 1, 1, 20, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxrIkeSARxPackets.setStatus('current')
mtxrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14988, 1, 1, 9, 0))
mtxrTrap = NotificationType((1, 3, 6, 1, 4, 1, 14988, 1, 1, 9, 0, 1))
if mibBuilder.loadTexts: mtxrTrap.setStatus('current')
mtxrTemperatureException = NotificationType((1, 3, 6, 1, 4, 1, 14988, 1, 1, 9, 0, 2))
if mibBuilder.loadTexts: mtxrTemperatureException.setStatus('current')
mtxrTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 14988, 1, 2, 1, 14)).setObjects(("MIKROTIK-MIB", "mtxrTrap"), ("MIKROTIK-MIB", "mtxrTemperatureException"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxrTrapGroup = mtxrTrapGroup.setStatus('current')
mibBuilder.exportSymbols("MIKROTIK-MIB", mtxrWl60GSignal=mtxrWl60GSignal, mtxrLicense=mtxrLicense, mtxrIkeSAResponderCookie=mtxrIkeSAResponderCookie, mtxrFirmwareVersion=mtxrFirmwareVersion, mtxrSystem=mtxrSystem, mtxrWl60GTable=mtxrWl60GTable, mtxrTrap=mtxrTrap, mtxrIkeSAPeerPort=mtxrIkeSAPeerPort, mtxrHlTemperature=mtxrHlTemperature, mtxrInterfaceStatsRxBytes=mtxrInterfaceStatsRxBytes, mtxrLicVersion=mtxrLicVersion, mtxrInterfaceStatsTx1519ToMax=mtxrInterfaceStatsTx1519ToMax, mtxrInterfaceStatsTx65To127=mtxrInterfaceStatsTx65To127, mtxrScriptTableEntry=mtxrScriptTableEntry, mtxrNstremeDual=mtxrNstremeDual, mtxrWlCMRtabRxRate=mtxrWlCMRtabRxRate, mtxrInterfaceStatsTxTotalCollision=mtxrInterfaceStatsTxTotalCollision, mtxrLTEModemLac=mtxrLTEModemLac, mtxrOpticalRxLoss=mtxrOpticalRxLoss, mtxrNeighborIdentity=mtxrNeighborIdentity, mtxrPOEName=mtxrPOEName, mtxrIkeSAPeerAddress=mtxrIkeSAPeerAddress, mtxrWl60GMode=mtxrWl60GMode, mtxrIkeSAUptime=mtxrIkeSAUptime, mtxrWl60GTxSectorInfo=mtxrWl60GTxSectorInfo, mtxrWlRtabIface=mtxrWlRtabIface, mtxrNeighborInterfaceID=mtxrNeighborInterfaceID, mtxrInterfaceStatsTxLateCollision=mtxrInterfaceStatsTxLateCollision, mtxrGaugeName=mtxrGaugeName, mtxrWlApBand=mtxrWlApBand, mtxrWirelessModemGroup=mtxrWirelessModemGroup, mtxrHotspotActiveUserPingTimeout=mtxrHotspotActiveUserPingTimeout, BoolValue=BoolValue, mtxrHotspotActiveUserLimitBytesIn=mtxrHotspotActiveUserLimitBytesIn, mtxrWlApIndex=mtxrWlApIndex, mtxrScriptRunOutput=mtxrScriptRunOutput, mtxrScriptRunTable=mtxrScriptRunTable, mtxrIkeSARxBytes=mtxrIkeSARxBytes, mtxrGaugeUnit=mtxrGaugeUnit, mtxrTemperatureException=mtxrTemperatureException, mtxrPartitionRunning=mtxrPartitionRunning, mtxrWlCMRemoteState=mtxrWlCMRemoteState, mtxrInterfaceStatsRxPause=mtxrInterfaceStatsRxPause, mtxrWlCMState=mtxrWlCMState, mtxrWlStatRxRate=mtxrWlStatRxRate, mtxrInterfaceStatsTxPause=mtxrInterfaceStatsTxPause, mtxrPartitionEntry=mtxrPartitionEntry, Temperature=Temperature, mtxrQueueTreeDropped=mtxrQueueTreeDropped, mtxrIkeSAGroup=mtxrIkeSAGroup, mtxrWl60GEntry=mtxrWl60GEntry, mtxrPOE=mtxrPOE, mtxrPOECurrent=mtxrPOECurrent, GDiv100=GDiv100, mtxrIkeSAPh2Count=mtxrIkeSAPh2Count, mtxrPartitionIndex=mtxrPartitionIndex, mtxrSpeed=mtxrSpeed, mtxrWlRtabRxStrengthCh1=mtxrWlRtabRxStrengthCh1, mtxrDHCPLeaseCount=mtxrDHCPLeaseCount, mtxrWlStatBssid=mtxrWlStatBssid, mtxrWlApOverallTxCCQ=mtxrWlApOverallTxCCQ, mtxrHotspotActiveUserPacketsOut=mtxrHotspotActiveUserPacketsOut, mtxrWl60GPhyRate=mtxrWl60GPhyRate, mtxrInterfaceStatsLinkDowns=mtxrInterfaceStatsLinkDowns, mtxrTrapGroup=mtxrTrapGroup, mtxrScriptName=mtxrScriptName, mtxrScriptRunIndex=mtxrScriptRunIndex, mtxrHlPowerSupplyState=mtxrHlPowerSupplyState, mtxrQueueSimpleEntry=mtxrQueueSimpleEntry, mtxrWlStatSsid=mtxrWlStatSsid, mtxrHotspotActiveUsersTableEntry=mtxrHotspotActiveUsersTableEntry, mtxrPartitionVersion=mtxrPartitionVersion, mtxrWlApNoiseFloor=mtxrWlApNoiseFloor, mtxrGPSGroup=mtxrGPSGroup, mtxrInterfaceStatsRxJabber=mtxrInterfaceStatsRxJabber, mtxrHealthGroup=mtxrHealthGroup, mtxrInterfaceStatsRx256To511=mtxrInterfaceStatsRx256To511, mtxrWl60GStaTxSector=mtxrWl60GStaTxSector, ObjectIndex=ObjectIndex, mtxrWlCMRtabTxBytes=mtxrWlCMRtabTxBytes, mtxrWl60GStaMcs=mtxrWl60GStaMcs, mtxrInterfaceStatsTxExcessiveDeferred=mtxrInterfaceStatsTxExcessiveDeferred, mtxrInterfaceStatsTx64=mtxrInterfaceStatsTx64, GDiv1000=GDiv1000, mtxrHotspotActiveUserLimitBytesOut=mtxrHotspotActiveUserLimitBytesOut, mtxrWlRtabStrength=mtxrWlRtabStrength, mtxrInterfaceStatsTxTooShort=mtxrInterfaceStatsTxTooShort, mtxrInterfaceStatsTxFragment=mtxrInterfaceStatsTxFragment, mtxrInterfaceStatsTxSingleCollision=mtxrInterfaceStatsTxSingleCollision, mtxrWlApTable=mtxrWlApTable, mtxrInterfaceStatsTable=mtxrInterfaceStatsTable, mtxrLTEModem=mtxrLTEModem, mtxrHotspotActiveUserBytesOut=mtxrHotspotActiveUserBytesOut, mtxrHlProcessorTemperature=mtxrHlProcessorTemperature, mtxrWl60GSsid=mtxrWl60GSsid, mtxrInterfaceStatsRxTooShort=mtxrInterfaceStatsRxTooShort, PYSNMP_MODULE_ID=mikrotikExperimentalModule, mtxrWlRtabRadioName=mtxrWlRtabRadioName, mtxrLTEModemEnbId=mtxrLTEModemEnbId, mtxrOpticalTable=mtxrOpticalTable, mtxrHotspotActiveUserIndex=mtxrHotspotActiveUserIndex, IDiv1000=IDiv1000, mtxrQueueTreeTable=mtxrQueueTreeTable, mtxrNote=mtxrNote, mtxrWlRtabTxStrengthCh0=mtxrWlRtabTxStrengthCh0, mtxrWl60GTxSector=mtxrWl60GTxSector, mtxrInterfaceStatsDriverTxBytes=mtxrInterfaceStatsDriverTxBytes, mtxrLTEModemSignalSINR=mtxrLTEModemSignalSINR, mtxrScriptIndex=mtxrScriptIndex, mtxrScriptRunGroup=mtxrScriptRunGroup, mtxrBuildTime=mtxrBuildTime, mtxrHlFiveVoltage=mtxrHlFiveVoltage, mtxrInterfaceStatsTxDrop=mtxrInterfaceStatsTxDrop, mtxrWlRtabEntry=mtxrWlRtabEntry, mtxrHlFanSpeed1=mtxrHlFanSpeed1, mtxrNeighbor=mtxrNeighbor, mtxrNeighborGroup=mtxrNeighborGroup, mtxrScriptTable=mtxrScriptTable, mtxrDnStatRxStrength=mtxrDnStatRxStrength, mtxrWlCMEntry=mtxrWlCMEntry, mtxrInterfaceStatsRx1519ToMax=mtxrInterfaceStatsRx1519ToMax, mtxrOpticalName=mtxrOpticalName, mtxrValid=mtxrValid, mtxrWl60GFreq=mtxrWl60GFreq, mtxrQueueSimplePCQQueuesOut=mtxrQueueSimplePCQQueuesOut, mtxrPOEStatus=mtxrPOEStatus, mtxrWlRtabTxPackets=mtxrWlRtabTxPackets, mikrotikExperimentalModule=mikrotikExperimentalModule, mtxrInterfaceStatsRx65To127=mtxrInterfaceStatsRx65To127, mtxrWlCMRtabRxStrength=mtxrWlCMRtabRxStrength, mtxrWirelessModemSignalECIO=mtxrWirelessModemSignalECIO, mtxrQueues=mtxrQueues, mtxrOpticalTemperature=mtxrOpticalTemperature, mtxrWlRtabTxStrengthCh1=mtxrWlRtabTxStrengthCh1, mtxrLicUpgradableTo=mtxrLicUpgradableTo, mtxrInterfaceStatsTxExcessiveCollision=mtxrInterfaceStatsTxExcessiveCollision, mtxrPartitionSize=mtxrPartitionSize, mtxrWlRtabRxBytes=mtxrWlRtabRxBytes, mtxrWlRtabTxRate=mtxrWlRtabTxRate, mtxrOpticalIndex=mtxrOpticalIndex, mtxrIkeSATxPackets=mtxrIkeSATxPackets, mtxrInterfaceStatsTxControl=mtxrInterfaceStatsTxControl, mtxrOpticalTxPower=mtxrOpticalTxPower, mtxrWlRtabRxStrengthCh2=mtxrWlRtabRxStrengthCh2, mtxrWlApTxRate=mtxrWlApTxRate, mtxrHlPower=mtxrHlPower, mtxrGaugeTable=mtxrGaugeTable, mtxrHotspotActiveUserPacketsIn=mtxrHotspotActiveUserPacketsIn, mtxrOpticalWavelength=mtxrOpticalWavelength, mtxrBoardName=mtxrBoardName, mtxrDate=mtxrDate, mtxrQueueSimpleDroppedIn=mtxrQueueSimpleDroppedIn, mtxrHotspotActiveUserGroup=mtxrHotspotActiveUserGroup, mtxrWlCMRtabEntryCount=mtxrWlCMRtabEntryCount, mtxrWlCMRegClientCount=mtxrWlCMRegClientCount, mtxrWlRtabTable=mtxrWlRtabTable, mtxrWlApClientCount=mtxrWlApClientCount, mtxrInterfaceStatsRxLengthError=mtxrInterfaceStatsRxLengthError, mtxrScriptRun=mtxrScriptRun, mtxrOptical=mtxrOptical, mtxrInterfaceStatsTx128To255=mtxrInterfaceStatsTx128To255, mtxrInterfaceStatsTx512To1023=mtxrInterfaceStatsTx512To1023, mtxrWl60GRssi=mtxrWl60GRssi, mtxrHlCpuTemperature=mtxrHlCpuTemperature, mtxrPOEInterfaceIndex=mtxrPOEInterfaceIndex, mtxrGaugeTableEntry=mtxrGaugeTableEntry, mtxrPartition=mtxrPartition, mtxrInterfaceStatsEntry=mtxrInterfaceStatsEntry, mtxrWlCMRemoteIndex=mtxrWlCMRemoteIndex, mtxrScriptRunCmd=mtxrScriptRunCmd, mtxrLTEModemUICC=mtxrLTEModemUICC, mtxrQueueTreeBytes=mtxrQueueTreeBytes, mtxrInterfaceStatsTxRx1519ToMax=mtxrInterfaceStatsTxRx1519ToMax, mtxrNeighborMacAddress=mtxrNeighborMacAddress, mtxrWl60GIndex=mtxrWl60GIndex, mtxrWlCMRtabEapIdent=mtxrWlCMRtabEapIdent, mtxrLTEModemGroup=mtxrLTEModemGroup, mtxrOpticalTxBiasCurrent=mtxrOpticalTxBiasCurrent, mtxrLTEModemIMEI=mtxrLTEModemIMEI, mtxrSerialNumber=mtxrSerialNumber, mtxrQueueTreeIndex=mtxrQueueTreeIndex, mtxrWlRtabUptime=mtxrWlRtabUptime, mtxrHotspotActiveUserIdleTimeout=mtxrHotspotActiveUserIdleTimeout, mtxrWlCMRemoteRadios=mtxrWlCMRemoteRadios, mtxrInterfaceStatsRxTooLong=mtxrInterfaceStatsRxTooLong, mtxrIkeSAPeerAddressType=mtxrIkeSAPeerAddressType, mtxrWl60GConnected=mtxrWl60GConnected, mtxrWlCMRtabUptime=mtxrWlCMRtabUptime, mtxrInterfaceStatsRx64=mtxrInterfaceStatsRx64, mtxrWl60GStaPhyRate=mtxrWl60GStaPhyRate, mtxrInterfaceStatsTxBroadcast=mtxrInterfaceStatsTxBroadcast, mtxrGaugeIndex=mtxrGaugeIndex, mtxrGps=mtxrGps, mtxrInterfaceStatsTxMultipleCollision=mtxrInterfaceStatsTxMultipleCollision, mtxrDHCP=mtxrDHCP, mtxrHotspotActiveUserRadius=mtxrHotspotActiveUserRadius, mtxrWlCMRtabTable=mtxrWlCMRtabTable, mtxrWl60GStaRssi=mtxrWl60GStaRssi, mtxrWlStatBand=mtxrWlStatBand, mtxrDnStatTable=mtxrDnStatTable, mtxrInterfaceStatsTxPackets=mtxrInterfaceStatsTxPackets, mtxrInterfaceStatsTxMulticast=mtxrInterfaceStatsTxMulticast, mtxrWl60GMcs=mtxrWl60GMcs, mtxrIkeSAIndex=mtxrIkeSAIndex, mtxrScriptRunTableEntry=mtxrScriptRunTableEntry, mtxrInterfaceStatsTxRx65To127=mtxrInterfaceStatsTxRx65To127, mtxrIkeSAIdentity=mtxrIkeSAIdentity, mtxrInterfaceStatsRxBroadcast=mtxrInterfaceStatsRxBroadcast, mtxrDnStatTxRate=mtxrDnStatTxRate, mtxrIkeSAResponder=mtxrIkeSAResponder, mtxrTraps=mtxrTraps, mtxrInterfaceStatsTxRx256To511=mtxrInterfaceStatsTxRx256To511, mtxrOpticalTableEntry=mtxrOpticalTableEntry, mtxrLTEModemIMSI=mtxrLTEModemIMSI, mtxrHotspotActiveUsersTable=mtxrHotspotActiveUsersTable, mtxrHotspotActiveUserDomain=mtxrHotspotActiveUserDomain, mtxrWlApAuthClientCount=mtxrWlApAuthClientCount, mtxrInterfaceStatsGroup=mtxrInterfaceStatsGroup, mtxrInterfaceStatsRxControl=mtxrInterfaceStatsRxControl, mtxrLincenseGroup=mtxrLincenseGroup, mtxrWl60GRemote=mtxrWl60GRemote, mtxrWl60GStaIndex=mtxrWl60GStaIndex, mtxrWlApRxRate=mtxrWlApRxRate, mtxrQueueSimpleSrcAddr=mtxrQueueSimpleSrcAddr, mtxrQueueSimpleDstAddr=mtxrQueueSimpleDstAddr, mtxrNeighborIndex=mtxrNeighborIndex, mtxrIkeSADynamicAddressType=mtxrIkeSADynamicAddressType, mtxrDnStatTxStrength=mtxrDnStatTxStrength, mtxrInterfaceStats=mtxrInterfaceStats, mtxrWlApEntry=mtxrWlApEntry, mtxrWlCMRtabSsid=mtxrWlCMRtabSsid, mtxrHlBoardTemperature=mtxrHlBoardTemperature, mtxrInterfaceStatsTxRx1024To1518=mtxrInterfaceStatsTxRx1024To1518, mtxrInterfaceStatsName=mtxrInterfaceStatsName, mtxrWlRtabRxPackets=mtxrWlRtabRxPackets, mtxrQueueTreeName=mtxrQueueTreeName, mtxrLTEModemInterfaceIndex=mtxrLTEModemInterfaceIndex, mtxrWlApSsid=mtxrWlApSsid, mtxrInterfaceStatsRxFCSError=mtxrInterfaceStatsRxFCSError, mtxrHlThreeDotThreeVoltage=mtxrHlThreeDotThreeVoltage, mtxrSystemReboot=mtxrSystemReboot, mtxrWlApFreq=mtxrWlApFreq, mtxrInterfaceStatsRxCodeError=mtxrInterfaceStatsRxCodeError, mtxrWlCMAuthClientCount=mtxrWlCMAuthClientCount, mtxrHotspotActiveUserConnectTime=mtxrHotspotActiveUserConnectTime, mtxrHlCoreVoltage=mtxrHlCoreVoltage, mtxrWlCMTable=mtxrWlCMTable, mtxrInterfaceStatsIndex=mtxrInterfaceStatsIndex, mtxrInterfaceStatsRxAlignError=mtxrInterfaceStatsRxAlignError, mtxrIkeSANatt=mtxrIkeSANatt, mtxrHlActiveFan=mtxrHlActiveFan, mtxrHotspotActiveUserBlockedByAdvert=mtxrHotspotActiveUserBlockedByAdvert, mtxrWlRtabSignalToNoise=mtxrWlRtabSignalToNoise, mtxrAltitude=mtxrAltitude)
mibBuilder.exportSymbols("MIKROTIK-MIB", mtxrInterfaceStatsRx512To1023=mtxrInterfaceStatsRx512To1023, mtxrQueueSimpleBytesOut=mtxrQueueSimpleBytesOut, mtxrLTEModemTable=mtxrLTEModemTable, mtxrInterfaceStatsTx256To511=mtxrInterfaceStatsTx256To511, mtxrWlRtabRouterOSVersion=mtxrWlRtabRouterOSVersion, mtxrHotspotActiveUserAdvertStatus=mtxrHotspotActiveUserAdvertStatus, mtxrHlCurrent=mtxrHlCurrent, mtxrInterfaceStatsRxFragment=mtxrInterfaceStatsRxFragment, mtxrHotspotActiveUserIP=mtxrHotspotActiveUserIP, mtxrLatitude=mtxrLatitude, mtxrIkeSATxBytes=mtxrIkeSATxBytes, mtxrWlCMRtabTxStrength=mtxrWlCMRtabTxStrength, mtxrHotspot=mtxrHotspot, mtxrInterfaceStatsTxTooLong=mtxrInterfaceStatsTxTooLong, mtxrInterfaceStatsRxDrop=mtxrInterfaceStatsRxDrop, IsakmpCookie=IsakmpCookie, mtxrFirmwareUpgradeVersion=mtxrFirmwareUpgradeVersion, mtxrLTEModemAccessTechnology=mtxrLTEModemAccessTechnology, mtxrWlCMRemoteTable=mtxrWlCMRemoteTable, mtxrQueueSimpleBytesIn=mtxrQueueSimpleBytesIn, mtXMetaInfo=mtXMetaInfo, mtxrWlCMChannel=mtxrWlCMChannel, mtxrQueueSimpleDroppedOut=mtxrQueueSimpleDroppedOut, mtxrOpticalTxFault=mtxrOpticalTxFault, mtxrWlStatIndex=mtxrWlStatIndex, mtxrLTEModemEntry=mtxrLTEModemEntry, mtxrScriptGroup=mtxrScriptGroup, mtxrIPSec=mtxrIPSec, mtxrWlRtabRxStrengthCh0=mtxrWlRtabRxStrengthCh0, mtxrWlCMRtabTxRate=mtxrWlCMRtabTxRate, mtxrHotspotActiveUserMAC=mtxrHotspotActiveUserMAC, mtxrQueueSimpleSrcMask=mtxrQueueSimpleSrcMask, mtxrWlRtabTxStrength=mtxrWlRtabTxStrength, mtxrQueueTreePCQQueues=mtxrQueueTreePCQQueues, mtxrInterfaceStatsDriverRxBytes=mtxrInterfaceStatsDriverRxBytes, mtxrQueueTreePackets=mtxrQueueTreePackets, mtxrQueueTreeHCBytes=mtxrQueueTreeHCBytes, mtxrInterfaceStatsDriverRxPackets=mtxrInterfaceStatsDriverRxPackets, mtxrNeighborIpAddress=mtxrNeighborIpAddress, mtxrWlStatTxRate=mtxrWlStatTxRate, mtxrQueueSimpleDstMask=mtxrQueueSimpleDstMask, mtxrInterfaceStatsDriverTxPackets=mtxrInterfaceStatsDriverTxPackets, HexInt=HexInt, mtxrWlApBssid=mtxrWlApBssid, mtxrWlCMRtabTxPackets=mtxrWlCMRtabTxPackets, mtxrQueueGroup=mtxrQueueGroup, mtxrHlTwelveVoltage=mtxrHlTwelveVoltage, mtxrIkeSALocalAddressType=mtxrIkeSALocalAddressType, mtxrQueueTreeEntry=mtxrQueueTreeEntry, mtxrHlFanSpeed2=mtxrHlFanSpeed2, mtxrDnStatIndex=mtxrDnStatIndex, mtxrInterfaceStatsTxRx128To255=mtxrInterfaceStatsTxRx128To255, mtxrHlBackupPowerSupplyState=mtxrHlBackupPowerSupplyState, mtxrWlRtabRxRate=mtxrWlRtabRxRate, mtXRouterOs=mtXRouterOs, mtxrIkeSAVersion=mtxrIkeSAVersion, mtxrWlRtabAddr=mtxrWlRtabAddr, mtxrWlCMRtabRxBytes=mtxrWlCMRtabRxBytes, mtxrDnConnected=mtxrDnConnected, mtxrWirelessGroup=mtxrWirelessGroup, mtxrPartitionTable=mtxrPartitionTable, mtxrLongtitude=mtxrLongtitude, mtxrInterfaceStatsRx1024To1518=mtxrInterfaceStatsRx1024To1518, mtxrIkeSALocalPort=mtxrIkeSALocalPort, mtxrNeighborPlatform=mtxrNeighborPlatform, mtxrInterfaceStatsTxFCSError=mtxrInterfaceStatsTxFCSError, mtxrHotspotActiveUserServerID=mtxrHotspotActiveUserServerID, mtxrNeighborSoftwareID=mtxrNeighborSoftwareID, mtxrQueueSimpleIndex=mtxrQueueSimpleIndex, mtxrIkeSASeen=mtxrIkeSASeen, mtxrInterfaceStatsRxUnknownOp=mtxrInterfaceStatsRxUnknownOp, mtxrDnStatRxRate=mtxrDnStatRxRate, mtxrWlCMRtabRxPackets=mtxrWlCMRtabRxPackets, mtxrWlStatStrength=mtxrWlStatStrength, mtxrWl60GStaDistance=mtxrWl60GStaDistance, mtxrWlCMIndex=mtxrWlCMIndex, mtxrUSBPowerReset=mtxrUSBPowerReset, mtxrIkeSACount=mtxrIkeSACount, mtxrIkeSATable=mtxrIkeSATable, mtxrHotspotActiveUserValidTillTime=mtxrHotspotActiveUserValidTillTime, mtxrIkeSADynamicAddress=mtxrIkeSADynamicAddress, mtxrIkeSATableEntry=mtxrIkeSATableEntry, mtxrNeighborVersion=mtxrNeighborVersion, mtxrNeighborTableEntry=mtxrNeighborTableEntry, mtxrQueueSimpleName=mtxrQueueSimpleName, mtxrInterfaceStatsTxRx64=mtxrInterfaceStatsTxRx64, mtxrPOETable=mtxrPOETable, mtxrWlCMRemoteEntry=mtxrWlCMRemoteEntry, mtxrOpticalRxPower=mtxrOpticalRxPower, mtxrWlCMRemoteAddress=mtxrWlCMRemoteAddress, mtxrQueueTreeParentIndex=mtxrQueueTreeParentIndex, mtxrScripts=mtxrScripts, mtxrPartitionActive=mtxrPartitionActive, mtxrIkeSARxPackets=mtxrIkeSARxPackets, Power=Power, mtxrHotspotActiveUserBytesIn=mtxrHotspotActiveUserBytesIn, mtxrLicLevel=mtxrLicLevel, mtxrHealth=mtxrHealth, mtxrWlCMRtabEntry=mtxrWlCMRtabEntry, mtxrGaugeValue=mtxrGaugeValue, mtxrInterfaceStatsRxPackets=mtxrInterfaceStatsRxPackets, mtxrNotifications=mtxrNotifications, mtxrWl60GStaSignal=mtxrWl60GStaSignal, mtxrWlRtabTxBytes=mtxrWlRtabTxBytes, mtxrWlCMRtabIface=mtxrWlCMRtabIface, mtxrIkeSALocalAddress=mtxrIkeSALocalAddress, mtxrHotspotActiveUserIdleStartTime=mtxrHotspotActiveUserIdleStartTime, mtxrWireless=mtxrWireless, mtxrLTEModemSignalRSRP=mtxrLTEModemSignalRSRP, mtxrHlVoltage=mtxrHlVoltage, mtxrNeighborTable=mtxrNeighborTable, mtxrPOEPower=mtxrPOEPower, mtxrInterfaceStatsTxDeferred=mtxrInterfaceStatsTxDeferred, mtxrLTEModemSignalRSSI=mtxrLTEModemSignalRSSI, mtxrInterfaceStatsTxCollision=mtxrInterfaceStatsTxCollision, mtxrOpticalSupplyVoltage=mtxrOpticalSupplyVoltage, mtxrPOEGroup=mtxrPOEGroup, mtxrPartitionName=mtxrPartitionName, mtxrWlStatFreq=mtxrWlStatFreq, mtxrIkeSAState=mtxrIkeSAState, mtxrHlProcessorFrequency=mtxrHlProcessorFrequency, Voltage=Voltage, mtxrQueueSimplePCQQueuesIn=mtxrQueueSimplePCQQueuesIn, mtxrQueueSimplePacketsIn=mtxrQueueSimplePacketsIn, mtxrHotspotActiveUserName=mtxrHotspotActiveUserName, mikrotik=mikrotik, mtxrInterfaceStatsTxUnderrun=mtxrInterfaceStatsTxUnderrun, mtxrWlCMRtabAddr=mtxrWlCMRtabAddr, mtXRouterOsGroups=mtXRouterOsGroups, mtxrPOEVoltage=mtxrPOEVoltage, mtxrWlCMREntryCount=mtxrWlCMREntryCount, mtxrNstremeDualGroup=mtxrNstremeDualGroup, mtxrQueueTreeFlow=mtxrQueueTreeFlow, mtxrWl60GStaConnected=mtxrWl60GStaConnected, mtxrIkeSAInitiatorCookie=mtxrIkeSAInitiatorCookie, mtxrWlStatEntry=mtxrWlStatEntry, mtxrLTEModemSectorId=mtxrLTEModemSectorId, mtxrHlSensorTemperature=mtxrHlSensorTemperature, mtxrDnStatEntry=mtxrDnStatEntry, mtxrWlRtabEntryCount=mtxrWlRtabEntryCount, mtxrDHCPGroup=mtxrDHCPGroup, mtxrLTEModemSignalRSRQ=mtxrLTEModemSignalRSRQ, mtxrWirelessModem=mtxrWirelessModem, mtxrLTEModemRAT=mtxrLTEModemRAT, mtxrLicSoftwareId=mtxrLicSoftwareId, mtxrInterfaceStatsRxCarrierError=mtxrInterfaceStatsRxCarrierError, mtxrWlCMRemoteName=mtxrWlCMRemoteName, mtxrInterfaceStatsTxBytes=mtxrInterfaceStatsTxBytes, mtxrInterfaceStatsRxMulticast=mtxrInterfaceStatsRxMulticast, mtxrInterfaceStatsTxJabber=mtxrInterfaceStatsTxJabber, mtxrQueueSimpleTable=mtxrQueueSimpleTable, mtxrInterfaceStatsRxOverflow=mtxrInterfaceStatsRxOverflow, mtxrWl60GStaRemote=mtxrWl60GStaRemote, mtxrInterfaceStatsTx1024To1518=mtxrInterfaceStatsTx1024To1518, mtxrQueueSimplePacketsOut=mtxrQueueSimplePacketsOut, mtxrWl60GStaTable=mtxrWl60GStaTable, mtxrLicUpgrUntil=mtxrLicUpgrUntil, mtxrWl60GStaEntry=mtxrWl60GStaEntry, mtxrPOEEntry=mtxrPOEEntry, mtxrWlStatTxCCQ=mtxrWlStatTxCCQ, mtxrSystemGroup=mtxrSystemGroup, mtxrInterfaceStatsTxRx512To1023=mtxrInterfaceStatsTxRx512To1023, mtxrQueueSimpleIface=mtxrQueueSimpleIface, mtxrWlStatRxCCQ=mtxrWlStatRxCCQ, mtxrLTEModemCellId=mtxrLTEModemCellId, mtxrPartitionGroup=mtxrPartitionGroup, mtxrSattelites=mtxrSattelites, mtxrInterfaceStatsTxPauseHonored=mtxrInterfaceStatsTxPauseHonored, mtxrWirelessModemSignalStrength=mtxrWirelessModemSignalStrength, mtxrWlStatTable=mtxrWlStatTable, mtxrWlRtabTxStrengthCh2=mtxrWlRtabTxStrengthCh2, mtxrInterfaceStatsRx128To255=mtxrInterfaceStatsRx128To255, mtxrOpticalGroup=mtxrOpticalGroup)
