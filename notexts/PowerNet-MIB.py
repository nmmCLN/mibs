#
# PySNMP MIB module PowerNet-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/apc/PowerNet-MIB
# Produced by pysmi-1.1.10 at Thu Oct 26 13:36:08 2023
# On host fv-az1288-210 platform Linux version 6.2.0-1015-azure by user runner
# Using Python version 3.10.13 (main, Aug 28 2023, 08:28:42) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, enterprises, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, NotificationType, ObjectIdentity, Integer32, Counter32, NotificationType, Unsigned32, MibIdentifier, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "enterprises", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "NotificationType", "ObjectIdentity", "Integer32", "Counter32", "NotificationType", "Unsigned32", "MibIdentifier", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
apc = MibIdentifier((1, 3, 6, 1, 4, 1, 318))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1))
apcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 4))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1))
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 2))
mtrapargs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 3))
mfiletransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4))
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1, 6))
mfiletransferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 1))
mfiletransferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2))
mfiletransferControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 3))
mfiletransferConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1))
mfiletransferConfigTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2))
mfiletransferConfigFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1))
measureUps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2))
miniSNMPadapter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3))
masterswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4))
masterswitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5))
masterswitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6))
dcDM3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7))
automaticTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8))
dc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9))
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10))
netlock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11))
rPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12))
airConditioners = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13))
rARU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14))
xPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15))
battMan = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16))
xATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18))
consolePortServer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19))
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20))
apcLocalDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21))
isxModularDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22))
isxModularPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23))
universalInputOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25))
rPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26))
cooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27))
powerManagementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28))
charger = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 29))
ePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 30))
powerNetSubAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1))
struxureWareOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2))
powerChuteNetworkShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3))
powerChuteBusinessEdition = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 4))
struxureWareOperationsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1))
powerNetSoftwareSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1))
powerNetSoftwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2))
backUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 1))
smartUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2))
matrixUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3))
masterSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4))
symmetraUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5))
dp100E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 6))
dp300E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 7))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8))
redundantSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 9))
dcPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10))
automaticXferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 11))
netLock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 12))
symmetra3PhaseUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13))
networkAir = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14))
infraStruXurePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 15))
ais5000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16))
smartUPS3Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17))
battManager = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 18))
infraStruXureATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 19))
conPortServ = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20))
gutor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21))
accControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22))
symmetraPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23))
isxModDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24))
isxServers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25))
smartUPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 27))
galaxy = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28))
eps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30))
pcns = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 31))
pcbe = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 33))
pmm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 34))
rpp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 35))
battManIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1))
battManSystemCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2))
battManUnitCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3))
battManStringCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4))
battManBatteryCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5))
battManConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6))
battManAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7))
battManSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8))
battManStringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9))
battManBatteryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10))
battManInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11))
battManControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12))
battManTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13))
battManUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14))
xPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1))
xPDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2))
xPDUACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3))
xPDUCircuitBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4))
xPDUInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5))
xPDUOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6))
xPDUMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7))
xPDUMainInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1))
xPDUBypassInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2))
xPDUUPSInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3))
xPDUSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4))
xPDUGroundMonitorPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5))
xPDUSystemBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1))
xPDUBranchBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2))
pmmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1))
pmmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 2))
pmmMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3))
pmmInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1))
pmmOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2))
pmmBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3))
pmmSiteConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4))
chargerIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 1))
chargerInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2))
chargerOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 3))
xATSIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1))
xATSDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2))
xATSSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3))
xATSACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4))
xATSTesting = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5))
xATSInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6))
xATSOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7))
xATSMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 8))
xATSSwitchStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1))
xATSSwitchSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2))
xATSSwitchTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3))
xATSSwitchBlockMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4))
xATSSwitchStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5))
xATSSource1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1))
xATSSource2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2))
xATSSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3))
xATSTestingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1))
xATSTestingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2))
xATSTestingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3))
xATSTestingSimulatePowerFail = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4))
xATSGenerator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1))
xATSGeneratorIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1))
xATSGeneratorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2))
xATSGeneratorAdvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3))
xATSGeneratorOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4))
xATSGeneratorSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5))
xATSGeneratorService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6))
xATSGeneratorFuelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7))
cpsAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1))
cpsAP930xSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1))
cpsAP930xConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2))
cpsAP930xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3))
cpsAP930xAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4))
smartUPS250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 1))
smartUPS400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 2))
smartUPS600 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 3))
smartUPS900 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 4))
smartUPS1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 5))
smartUPS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 6))
smartUPS450 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 7))
smartUPS700 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 8))
smartUPS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 9))
smartUPS1400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 10))
smartUPS2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 11))
smartUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 12))
smartUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 13))
smartUPS7500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 14))
smartUPS10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 15))
smartUPS1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 16))
smartUPS3000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 17))
smartUPS5000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 18))
smartUPS8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 19))
matrixUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 1))
matrixUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 2))
masterSwitchV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 1))
masterSwitchV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 2))
masterSwitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 3))
masterSwitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 4))
masterSwitchrPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 5))
masterSwitchrPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 6))
masterSwitchsPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 7))
masterSwitchrPDUB = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 8))
masterSwitchePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 9))
symmetraUPS4kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 1))
symmetraUPS8kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 2))
symmetraUPS12kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 3))
symmetraUPS16kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 4))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 1))
environmentalMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 2))
emu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 3))
mem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 4))
dm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 1))
dcmim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 2))
symmetra3PhaseUPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 1))
symmetra3PhaseUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 2))
symmetra3PhaseUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 3))
symmetra3PhaseUPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 4))
airFMSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 1))
rackAirRemovalUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 2))
airPASeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 3))
airIRSC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 4))
airIRRC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 5))
airIRRP100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 6))
airIRRP500Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 7))
airIRRD100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 8))
airInRoomPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 9))
airACRC300Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 10))
airLESeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 11))
airIRRDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 12))
airEcoBreeze = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 13))
airLELSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 14))
airACRC600Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 15))
airACRD600Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 16))
airEconomizer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 17))
airTSAChillers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 18))
airLEG2Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 19))
airAmico = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 20))
airUniflarSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 21))
airTrimChiller = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 22))
airACRD300Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 23))
ais5000UPS10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 1))
ais5000UPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 2))
ais5000UPS30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 3))
ais5000UPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 4))
ais5000UPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 5))
ais5000UPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 6))
ais5000UPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 7))
smartUPS3Phase10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 1))
smartUPS3Phase15kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 2))
smartUPS3Phase20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 3))
smartUPS3Phase30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 4))
smartUPS3Phase40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 5))
galaxy7000UPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 1))
galaxy7000UPS250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 2))
galaxy7000UPS300kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 3))
galaxy7000UPS400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 4))
galaxy7000UPS500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 5))
galaxy7000SSC800kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 6))
galaxy7000SSC1200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 7))
galaxy7000SSC2000kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 8))
galaxy300UPS10kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 9))
galaxy300UPS15kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 10))
galaxy300UPS20kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 11))
galaxy300UPS30kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 12))
galaxy300UPS40kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 13))
galaxy300UPS10kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 14))
galaxy300UPS15kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 15))
galaxy300UPS20kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 16))
galaxy300UPS30kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 17))
galaxy5000UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 18))
galaxy5000UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 19))
galaxy5000UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 20))
galaxy5000UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 21))
galaxy5000UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 22))
galaxy5000UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 23))
galaxy5000UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 24))
galaxy5000UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 25))
galaxy5000UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 26))
galaxy5500UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 27))
galaxy5500UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 28))
galaxy5500UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 29))
galaxy5500UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 30))
galaxy5500UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 31))
galaxy5500UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 32))
galaxy5500UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 33))
galaxy5500UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 34))
galaxy5500UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 35))
galaxyVMUPS50kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 36))
galaxyVMUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 37))
galaxyVMUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 38))
galaxyVMUPS90kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 39))
galaxyVMUPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 40))
galaxyVMUPS110kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 41))
galaxyVMUPS120kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 42))
galaxyVMUPS130kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 43))
galaxyVMUPS160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 44))
galaxyVMUPS180kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 45))
galaxyVMUPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 46))
galaxyVMUPS225kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 47))
galaxy9000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 48))
galaxy9000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 49))
galaxy9000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 50))
galaxy9000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 51))
galaxyVXUPS625kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 56))
galaxyVXUPS750kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 57))
galaxyVXUPS1000kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 58))
galaxyVXUPS1250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 59))
galaxyVXUPS1500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 60))
galaxy300UPS60kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 61))
galaxy300UPS80kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 62))
galaxyVXUPS500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 63))
galaxyVXUPS250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 64))
galaxyVXUPS400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 65))
galaxyVSUPS100kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 66))
galaxy7000UPS160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 67))
galaxyVXUPS300kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 68))
galaxyVXUPS1100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 69))
galaxyVSUPS10kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 70))
galaxyVSUPS15kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 71))
galaxyVSUPS20kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 72))
galaxyVSUPS25kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 73))
galaxyVSUPS30kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 74))
galaxyVSUPS40kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 75))
galaxyVSUPS50kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 76))
galaxyVSUPS60kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 77))
galaxyVSUPS75kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 78))
galaxyVSUPS80kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 79))
galaxyVSUPS120kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 80))
galaxyVSUPS150kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 81))
galaxyVXUPS800kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 82))
galaxyPXUPS60kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 83))
galaxyPXUPS80kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 84))
galaxyPXUPS100kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 85))
galaxyVLUPS500kW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 86))
eps6000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 1))
eps6000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 2))
eps6000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 3))
eps6000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 4))
eps7000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 5))
eps7000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 6))
eps7000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 7))
eps7000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 8))
eps8000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 9))
eps8000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 10))
eps8000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 11))
eps8000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 12))
pcns4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 31, 1))
pcnsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 1))
pcnsNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2))
pcnsNMC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3))
pcnsEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4))
pcnsShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5))
pcnsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6))
pcnsLoggingLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsLoggingLevel.setStatus('mandatory')
pcbe9 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 33, 1))
pmm400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 34, 1))
pmm500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 34, 2))
rpp400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 35, 1))
rpp250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 35, 2))
pcbeIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1))
pcbeAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6))
conPortServAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20, 1))
gutorPEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 1))
gutorPDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 2))
gutorWEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 3))
gutorWDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 4))
gutorSDC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 5))
gutorPXP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 6))
gutorPXC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 7))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7))
upsComm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8))
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9))
upsSyncCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10))
upsState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11))
upsOutletGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12))
upsDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13))
upsParallelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14))
upsPhysicalLayout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15))
upsIntegratedATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16))
upsDCOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17))
upsIntegratedUIO = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18))
upsEnergyEfficiency = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20))
upsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22))
upsBasicIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1))
upsAdvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2))
upsBasicBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1))
upsAdvBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2))
upsHighPrecBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3))
upsBasicInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1))
upsAdvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2))
upsHighPrecInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3))
upsBasicOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1))
upsAdvOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2))
upsHighPrecOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3))
upsBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1))
upsAdvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2))
upsBasicControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1))
upsAdvControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2))
upsBasicTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 1))
upsAdvTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2))
upsPhaseResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1))
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2))
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3))
upsSyncCtrlGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1))
upsSyncCtrlGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2))
upsBasicState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1))
upsAdvState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2))
upsOutletGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1))
upsOutletGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2))
upsOutletGroupControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3))
upsDiagnosticIM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1))
upsDiagnosticPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2))
upsDiagnosticBatteries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3))
upsDiagnosticSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4))
upsDiagnosticExternalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5))
upsDiagnosticComBus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6))
upsDiagnosticPowerCabinet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7))
upsDiagnosticDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8))
upsDiagnosticUnitController = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9))
upsDiagnosticSLC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10))
upsDiagnosticTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 11))
upsDiagSwitchGear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1))
upsDiagMCCBBox = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2))
upsDiagTransformer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3))
upsDiagFlyWheel = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4))
upsOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1))
upsInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2))
upsECOmode = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1))
upsEBMmode = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2))
upsBatteryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 1))
upsOperationalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2))
upsEnergyEfficiencyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3))
mUpsEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1))
mUpsContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2))
serialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1))
serialPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 1))
serialPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2))
serialPort2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1))
serialPort2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2))
sPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1))
sPDUMasterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2))
sPDUMasterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3))
sPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4))
sPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5))
sPDUIdentVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1))
sPDUMasterControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2))
sPDUMasterConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3))
sPDUMasterStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4))
sPDUOutletControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5))
sPDUOutletConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6))
sPDUOutletStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7))
sPDUIdentMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1))
sPDUMasterControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2))
sPDUMasterConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3))
sPDUMasterStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4))
sPDUOutletControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5))
sPDUOutletConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6))
sPDUOutletStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7))
sPDUOutletConfigMSPall = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1))
sPDUOutletConfigMSPgs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2))
sPDUOutletConfigMSPannun = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3))
sPDUOutletConfigMSPmups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4))
rPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1))
rPDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2))
rPDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3))
rPDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4))
rPDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5))
rPDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1))
rPDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2))
rPDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3))
rPDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4))
rPDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1))
rPDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2))
rPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3))
rPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4))
rPDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5))
rPDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6))
rPDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1))
dm3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1))
dm3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2))
dm3Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3))
dm3IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1))
dm3ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1))
dm3ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2))
dm3ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3))
dm3ConfigPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4))
dm3ConfigRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5))
dm3ConfigDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6))
dm3ConfigRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1))
dm3ConfigConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2))
dm3ConfigRectThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1))
dm3ConfigRectAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2))
dm3ConfigConvThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1))
dm3ConfigConvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2))
dm3ConfigOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1))
dm3ConfigInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2))
dm3ConfigBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1))
dm3ConfigFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2))
dm3StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1))
dm3StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2))
dm3StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3))
dm3StatusOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4))
dm3StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5))
dm3StatusPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6))
dm3StatusRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7))
dm3StatusDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8))
dm3StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1))
dm3StatusConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2))
dm3StatusOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1))
dm3StatusInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2))
dm3StatusBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1))
dm3StatusFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1))
atsCalibration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2))
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3))
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4))
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5))
atsCalibrationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1))
atsCalibrationPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2))
atsCalibrationOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3))
atsStatusDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1))
atsStatusResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2))
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3))
atsStatusOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4))
dcmim2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1))
dcmim2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2))
dcmim2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3))
dcmim2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4))
dcmim2IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1))
dcmim2ControlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1))
dcmim2ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1))
dcmim2ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2))
dcmim2ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3))
dcmim2StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1))
dcmim2StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2))
dcmim2StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3))
dcmim2StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4))
dcmim2StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1))
integrated = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2))
envMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3))
modEnvMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4))
envWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5))
emIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1))
emConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2))
emStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3))
iemIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1))
iemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2))
iemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3))
emsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1))
emsOutputRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2))
emsOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3))
emsSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4))
emsAlarmDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5))
emsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6))
emsProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7))
emsInputContactConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8))
emsOutputRelayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9))
emsOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10))
emsSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11))
emsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12))
emsProbeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13))
emsInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14))
emsOutputRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15))
emsOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16))
emsAlarmDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17))
emsSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18))
emsInputStateSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19))
emsInputStateSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20))
memModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1))
memSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2))
memInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3))
memOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4))
memOutlets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5))
memBeacons = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6))
memInputStateSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7))
wirelessSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1))
wirelessSensorPodStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2))
wirelessSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3))
wirelessSensorPodConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4))
nlIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 1))
nlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 2))
airFM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1))
airFMIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1))
airFMStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2))
airFMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3))
airFMSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4))
airFMModule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5))
airFMAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6))
airFMGroupSysRoles = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4))
airFMGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5))
airFMGroupLoadShare = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6))
airFMGroupFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7))
airFMGroupFailoverSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1))
airFMGroupFailoverMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2))
airFMSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1))
airFMSysDemands = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2))
airFMSysSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3))
airFMSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4))
airFMSysCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5))
airFMSysHumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6))
airFMSysDehumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7))
airFMSysReheat = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8))
airFMSysThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9))
airFMSysInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10))
airFMSysOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11))
airFMSysAlarmMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12))
airFMSysAlarmMapSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1))
airFMSysAlarmMapMainMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2))
airFMSysAlarmMapExpMod1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3))
airFMSysAlarmMapExpMod2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4))
airFMSysAlarmMapInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5))
airFMSysAlarmMapOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6))
airFMModIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1))
airFMModStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2))
airFMModProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3))
airFMModCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4))
airFMModHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5))
airFMModBlower1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6))
airFMModBlower2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7))
airFMModRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8))
airFMModServIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9))
airFMModServIntResets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10))
airPA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2))
airPAIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1))
airPAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2))
airIR = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3))
airIRAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1))
airIRRC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2))
airIRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3))
airIRSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4))
airIRRCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1))
airIRRCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2))
airIRRCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1))
airIRRCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2))
airIRRCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3))
airIRRCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1))
airIRRCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2))
airIRRCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3))
airIRRCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4))
airIRRCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5))
airIRRCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6))
airIRRP100 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1))
airIRRP500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2))
airIRRP100Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1))
airIRRP100Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2))
airIRRP100GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1))
airIRRP100GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2))
airIRRP100GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3))
airIRRP100UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1))
airIRRP100UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2))
airIRRP100UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3))
airIRRP100UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4))
airIRRP100UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5))
airIRRP100UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6))
airIRRP500Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1))
airIRRP500Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2))
airIRRP500GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1))
airIRRP500GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2))
airIRRP500GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3))
airIRRP500UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1))
airIRRP500UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2))
airIRRP500UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3))
airIRRP500UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4))
airIRRP500UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5))
airIRRP500UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6))
airIRSCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1))
airIRSCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1))
airIRSCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2))
airIRSCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3))
airIRSCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4))
airIRSCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5))
airIRSCUnitSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6))
airIRSCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7))
airIRSCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2))
airIRSCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1))
airIRSCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2))
airIRSCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3))
airIRGen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4))
airIRG2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1))
airIRG2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2))
airIRG2Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3))
airIRG2RC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 4))
airIRG2RD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5))
airIRG2SC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 6))
airIRG2RA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 7))
airIRG2GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1))
airIRG2GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2))
airIRG2GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3))
airIRG2RDType1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 1))
airIRG2RDType2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2))
airIRG2RDT2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1))
airIRG2RDT2RunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2))
airIRG2RDT2ServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3))
airIRG2RDT2Thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4))
airIRG2RDT2Setpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 5))
airIRG2RDT2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6))
airInRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5))
airIRmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1))
airIRmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2))
airIRmPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3))
airIRmPmCommon1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2))
airIRmPmCommon2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3))
airIRmPmCommon3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4))
airIRmPmCommon4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5))
airIRmPmCommon5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6))
airIRmPmCompressor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7))
airIRmPmCompressor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8))
airIRmPmSuctionValve1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 9))
airIRmPmSuctionValve2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 10))
airIRmPmEheating1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11))
airIRmPmEheating2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12))
airIRmPmEheating3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13))
airIRmPmEheating4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14))
airIRmPmGECWvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15))
airIRmPmGvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16))
airIRmPmDrycooler1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17))
airIRmPmDrycooler2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18))
airIRmPmDrycooler3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19))
airIRmPmDrycooler4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20))
airIRmPmPump1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21))
airIRmPmPump2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22))
airIRmPmPump3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23))
airIRmPmPump4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24))
airIRmPmHotgasHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25))
airIRmPmPWWHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26))
airIRmPmHumidifier1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27))
airIRmPmHumidifier2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28))
airIRmPmDehumidification = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31))
airIRmPmFan1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32))
airIRmPmFan2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33))
airIRmPmFan3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34))
airIRmPmLouver1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35))
airIRmPmLouver2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36))
airIRmPmLouver3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37))
airIRmPmAuxAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 38))
airIRmPmAuxAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 39))
airIRmPmAuxAlarm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 40))
airIRmPmAuxAlarm4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 41))
airIRmPmAuxAlarm5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 42))
airIRmPmAlarmBits = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43))
airIRmPmMyZone = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44))
airIRmPmGlobalZoneData = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45))
airIRGen3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6))
airIRG3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1))
airIRG3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2))
airIRG3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3))
airIRG3RDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4))
airIRG3CM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5))
rARUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1))
rARUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2))
rARUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3))
rARUFanStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4))
rARUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5))
rARUSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6))
accessPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1))
accessPXIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1))
accessPXConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2))
accessPXConfigFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3))
accessPXStatusFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4))
accessPXConfigRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5))
accessPXStatusRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6))
accessPXConfigBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7))
accessPXStatusBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8))
apcLocalDisplayIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1))
apcLocalDisplayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2))
accPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22, 1))
isxModularPduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1))
isxModularPduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2))
isxModularPduStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3))
symmetraPx48kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 1))
symmetraPx160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 2))
symmetraPx250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 3))
symmetraPx500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 4))
symmetraPx100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 5))
symmetraPxDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 6))
isx24ModuleHalfRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 1))
isx6ModuleRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 2))
isxModularDistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1))
isxModularDistModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2))
isxModularDistSubFeeds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3))
isxModularDistTotals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4))
isxModularDistSysVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1))
isxModularDistSysCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2))
isxModularDistSysPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3))
isxcBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 1))
isxcStandard = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 2))
isxcEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 3))
isxcVirtual = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 4))
uioSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1))
uioInputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2))
uioOutputRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3))
mconfigNumTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigNumTrapReceivers.setStatus('mandatory')
mconfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 318, 2, 1, 2), )
if mibBuilder.loadTexts: mconfigTrapReceiverTable.setStatus('mandatory')
mconfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "trapIndex"))
if mibBuilder.loadTexts: mconfigTrapReceiverEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
receiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAddr.setStatus('mandatory')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('mandatory')
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('obsolete')
acceptThisReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisReceiver.setStatus('mandatory')
receiveTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powernet", 1), ("ietf", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveTrapType.setStatus('obsolete')
mconfigBOOTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigBOOTPEnabled.setStatus('mandatory')
mconfigTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigTFTPServerIP.setStatus('mandatory')
newCodeAuthentViaTFTP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("validNewAgentCodeImage", 2), ("sameAgentCodeImage", 3), ("invalidAgentCodeImage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCodeAuthentViaTFTP.setStatus('mandatory')
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockDate.setStatus('mandatory')
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockTime.setStatus('mandatory')
mcontrolRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("restartCurrentAgent", 1), ("continueCurrentAgent", 2), ("loadAndExecuteNewAgent", 3), ("restartWithoutAgent", 4), ("resetNetworkAndRestart", 5), ("resetNetworkLeaveModeAndRestart", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolRestartAgent.setStatus('mandatory')
mtrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger.setStatus('mandatory')
mtrapargsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress.setStatus('mandatory')
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString.setStatus('mandatory')
mtrapargsGauge = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge.setStatus('mandatory')
mtrapargsTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks.setStatus('mandatory')
mtrapargsInteger02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger02.setStatus('mandatory')
mtrapargsInteger03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger03.setStatus('mandatory')
mtrapargsIpAddress02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress02.setStatus('mandatory')
mtrapargsIpAddress03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress03.setStatus('mandatory')
mtrapargsString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString02.setStatus('mandatory')
mtrapargsString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString03.setStatus('mandatory')
mtrapargsGauge02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge02.setStatus('mandatory')
mtrapargsGauge03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge03.setStatus('mandatory')
mtrapargsTimeTicks02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks02.setStatus('mandatory')
mtrapargsTimeTicks03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks03.setStatus('mandatory')
mtrapargsString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString04.setStatus('mandatory')
mtrapargsString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString05.setStatus('mandatory')
mtrapargsInteger04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger04.setStatus('mandatory')
mtrapargsInteger05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger05.setStatus('mandatory')
mtrapargsString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString06.setStatus('mandatory')
mtrapargsString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString07.setStatus('mandatory')
mtrapargsString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString08.setStatus('mandatory')
mtrapargsOctetString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString.setStatus('mandatory')
mtrapargsOctetString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString02.setStatus('mandatory')
mtrapargsOctetString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString03.setStatus('mandatory')
mtrapargsOctetString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString04.setStatus('mandatory')
mtrapargsOctetString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString05.setStatus('mandatory')
mtrapargsOctetString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString06.setStatus('mandatory')
mtrapargsOctetString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString07.setStatus('mandatory')
mtrapargsOctetString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString08.setStatus('mandatory')
mfiletransferStatusLastTransferResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lastFileTransferResultSuccessful", 1), ("lastFileTransferResultNotAvailable", 2), ("lastFileTransferResultFailureUnknown", 3), ("lastFileTransferResultFailureServerInaccessible", 4), ("lastFileTransferResultFailureServerAccessDenied", 5), ("lastFileTransferResultFailureFileNotFound", 6), ("lastFileTransferResultFailureFileTypeUnknown", 7), ("lastFileTransferResultFailureFileCorrupted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfiletransferStatusLastTransferResult.setStatus('deprecated')
mfiletransferConfigSettingsFilename = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigSettingsFilename.setStatus('deprecated')
mfiletransferConfigTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigTFTPServerAddress.setStatus('deprecated')
mfiletransferConfigFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerAddress.setStatus('deprecated')
mfiletransferConfigFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerUser.setStatus('deprecated')
mfiletransferConfigFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerPassword.setStatus('deprecated')
mfiletransferControlInitiateFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doNotInitiateFileTransfer", 1), ("initiateFileTransferDownloadViaTFTP", 2), ("initiateFileTransferDownloadViaFTP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferControlInitiateFileTransfer.setStatus('deprecated')
battManIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManIdentProductName.setStatus('mandatory')
battManIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentHardwareRev.setStatus('mandatory')
battManIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentFirmwareRev.setStatus('mandatory')
battManIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentDateOfManufacture.setStatus('mandatory')
battManIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentModelNumber.setStatus('mandatory')
battManIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentSerialNumber.setStatus('mandatory')
battManOhmicValueCorrectionFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManOhmicValueCorrectionFactor.setStatus('mandatory')
battManUnitCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCalibTableSize.setStatus('mandatory')
battManUnitCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2), )
if mibBuilder.loadTexts: battManUnitCalibTable.setStatus('mandatory')
battManUnitCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManUnitCalibIndex"))
if mibBuilder.loadTexts: battManUnitCalibEntry.setStatus('mandatory')
battManUnitCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCalibIndex.setStatus('mandatory')
battManUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitSerialNumber.setStatus('mandatory')
battManBatteryVoltageZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManBatteryVoltageZeroCalib.setStatus('mandatory')
battManBatteryVoltageSpanCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManBatteryVoltageSpanCalib.setStatus('mandatory')
battManStringCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCalibTableSize.setStatus('mandatory')
battManStringCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2), )
if mibBuilder.loadTexts: battManStringCalibTable.setStatus('mandatory')
battManStringCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManStringCalibIndex"))
if mibBuilder.loadTexts: battManStringCalibEntry.setStatus('mandatory')
battManStringCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCalibIndex.setStatus('mandatory')
battManDCCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManDCCurrentZeroCalib.setStatus('mandatory')
battManACCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManACCurrentZeroCalib.setStatus('mandatory')
battManProbeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("amps1000", 1), ("amps500", 2), ("amps100", 3), ("amps200", 4), ("amps2000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManProbeRange.setStatus('mandatory')
battManString1BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCalibTableSize.setStatus('mandatory')
battManString1BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2), )
if mibBuilder.loadTexts: battManString1BatteryCalibTable.setStatus('mandatory')
battManString1BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryCalibIndex"))
if mibBuilder.loadTexts: battManString1BatteryCalibEntry.setStatus('mandatory')
battManString1BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCalibIndex.setStatus('mandatory')
battManString1BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManString1BatteryInterTierOhmicValue.setStatus('mandatory')
battManString2BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCalibTableSize.setStatus('mandatory')
battManString2BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4), )
if mibBuilder.loadTexts: battManString2BatteryCalibTable.setStatus('mandatory')
battManString2BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryCalibIndex"))
if mibBuilder.loadTexts: battManString2BatteryCalibEntry.setStatus('mandatory')
battManString2BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCalibIndex.setStatus('mandatory')
battManString2BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManString2BatteryInterTierOhmicValue.setStatus('mandatory')
battManConfigApplication = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("silcon", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigApplication.setStatus('deprecated')
battManConfigBatteryChemistry = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leadAcid", 1), ("nickel-Cadmium", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteryChemistry.setStatus('mandatory')
battManConfigBatteryAHCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteryAHCapacity.setStatus('mandatory')
battManConfigNumberofStrings = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigNumberofStrings.setStatus('mandatory')
battManConfigBatteriesperString = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteriesperString.setStatus('mandatory')
battManConfigCellsperBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("oneCell", 1), ("twoCells", 2), ("fourCells", 4), ("sixCells", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigCellsperBattery.setStatus('mandatory')
battManConfigMinCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinCellVoltage.setStatus('mandatory')
battManConfigMaxCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxCellVoltage.setStatus('mandatory')
battManConfigMaxPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxPilotTempF.setStatus('mandatory')
battManConfigMaxPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxPilotTempC.setStatus('mandatory')
battManConfigMaxAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxAmbientTempF.setStatus('mandatory')
battManConfigMaxAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxAmbientTempC.setStatus('mandatory')
battManConfigMinAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinAmbientTempF.setStatus('mandatory')
battManConfigMinAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinAmbientTempC.setStatus('mandatory')
battManConfigMaxRippleCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxRippleCurrent.setStatus('mandatory')
battManConfigMaxCurrentAcceptanceDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxCurrentAcceptanceDeviation.setStatus('mandatory')
battManConfigMonitorWireLength = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiftyFeetOrLess", 1), ("moreThanFiftyFeet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMonitorWireLength.setStatus('mandatory')
battManConfigDischargeVoltageAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigDischargeVoltageAlarmLevel.setStatus('mandatory')
battManConfigAutoAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigAutoAnnunciatorReset.setStatus('mandatory')
battManConfigSuspendCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigSuspendCellVoltage.setStatus('mandatory')
battManConfigOhmicTestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigOhmicTestWaitTime.setStatus('mandatory')
battManConfigNumberOfBoosts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigNumberOfBoosts.setStatus('mandatory')
battManAlarmManagementController = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmManagementController.setStatus('mandatory')
battManAlarmBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmBatteries.setStatus('mandatory')
battManAlarmCharger = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmCharger.setStatus('mandatory')
battManAlarmEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmEnvironment.setStatus('mandatory')
battManSystemAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientTempC.setStatus('mandatory')
battManSystemAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientTempF.setStatus('mandatory')
battManSystemPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotTempC.setStatus('mandatory')
battManSystemPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotTempF.setStatus('mandatory')
battManSystemAmbientHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientHighTempAlarm.setStatus('mandatory')
battManSystemAmbientLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientLowTempAlarm.setStatus('mandatory')
battManSystemPilotBatteryHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotBatteryHighTempAlarm.setStatus('mandatory')
battManSystemPilotProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotProbeDisconnected.setStatus('mandatory')
battManSystemAmbientProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientProbeDisconnected.setStatus('mandatory')
battManSystemConfigurationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemConfigurationInvalid.setStatus('mandatory')
battManSystemSuspendVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemSuspendVoltage.setStatus('mandatory')
battManInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactTableSize.setStatus('mandatory')
battManInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2), )
if mibBuilder.loadTexts: battManInputContactTable.setStatus('mandatory')
battManInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManInputContactIndex"))
if mibBuilder.loadTexts: battManInputContactEntry.setStatus('mandatory')
battManInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactIndex.setStatus('mandatory')
battManInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactName.setStatus('mandatory')
battManInputContactAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactAlarmState.setStatus('mandatory')
battManInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactState.setStatus('mandatory')
battManInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactNormalState.setStatus('mandatory')
battManInputContactAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactAlarmDelay.setStatus('mandatory')
battManStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringTableSize.setStatus('mandatory')
battManStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2), )
if mibBuilder.loadTexts: battManStringTable.setStatus('mandatory')
battManStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManStringIndex"))
if mibBuilder.loadTexts: battManStringEntry.setStatus('mandatory')
battManStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringIndex.setStatus('mandatory')
battManStringCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCurrent.setStatus('mandatory')
battManStringRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringRippleCurrent.setStatus('mandatory')
battManStringChargerHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringChargerHighVoltageAlarm.setStatus('mandatory')
battManStringChargerLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringChargerLowVoltageAlarm.setStatus('mandatory')
battManStringCurrentProbeDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCurrentProbeDisconnected.setStatus('mandatory')
battManStringOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringOnBattery.setStatus('mandatory')
battManStringHighRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringHighRippleCurrent.setStatus('mandatory')
battManStringVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringVoltage.setStatus('mandatory')
battManStringDischargeLess5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischargeLess5Seconds.setStatus('mandatory')
battManStringDischarge5to10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischarge5to10Seconds.setStatus('mandatory')
battManStringDischarge10to60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischarge10to60Seconds.setStatus('mandatory')
battManStringDischargeMore60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischargeMore60Seconds.setStatus('mandatory')
battManString1BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryTableSize.setStatus('mandatory')
battManString1BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2), )
if mibBuilder.loadTexts: battManString1BatteryTable.setStatus('mandatory')
battManString1BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryIndex"))
if mibBuilder.loadTexts: battManString1BatteryEntry.setStatus('mandatory')
battManString1BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryIndex.setStatus('mandatory')
battManString1BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryVoltage.setStatus('mandatory')
battManString1BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryLowestVoltage.setStatus('mandatory')
battManString1BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCellShorted.setStatus('mandatory')
battManString1BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryOpenFuseOrConnection.setStatus('mandatory')
battManString1BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryLowCapacity.setStatus('mandatory')
battManString1BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryHighOhmicValue.setStatus('mandatory')
battManString1BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryThermalRunaway.setStatus('mandatory')
battManString1BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryDryout.setStatus('mandatory')
battManString1BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryUserHighVoltageAlarm.setStatus('mandatory')
battManString1BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryUserLowVoltageAlarm.setStatus('mandatory')
battManString1BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryChemHighVoltageAlarm.setStatus('mandatory')
battManString1BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryChemLowVoltageAlarm.setStatus('mandatory')
battManString1BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryOpenCell.setStatus('mandatory')
battManString2BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryTableSize.setStatus('mandatory')
battManString2BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4), )
if mibBuilder.loadTexts: battManString2BatteryTable.setStatus('mandatory')
battManString2BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryIndex"))
if mibBuilder.loadTexts: battManString2BatteryEntry.setStatus('mandatory')
battManString2BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryIndex.setStatus('mandatory')
battManString2BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryVoltage.setStatus('mandatory')
battManString2BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryLowestVoltage.setStatus('mandatory')
battManString2BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCellShorted.setStatus('mandatory')
battManString2BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryOpenFuseOrConnection.setStatus('mandatory')
battManString2BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryLowCapacity.setStatus('mandatory')
battManString2BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryHighOhmicValue.setStatus('mandatory')
battManString2BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryThermalRunaway.setStatus('mandatory')
battManString2BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryDryout.setStatus('mandatory')
battManString2BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryUserHighVoltageAlarm.setStatus('mandatory')
battManString2BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryUserLowVoltageAlarm.setStatus('mandatory')
battManString2BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryChemHighVoltageAlarm.setStatus('mandatory')
battManString2BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryChemLowVoltageAlarm.setStatus('mandatory')
battManString2BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryOpenCell.setStatus('mandatory')
battManRemoteAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManRemoteAnnunciatorReset.setStatus('mandatory')
battManResetChargeCurrentDeviationBenchmark = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetChargeCurrentDeviationBenchmark.setStatus('mandatory')
battManResetLowestDischargeVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetLowestDischargeVoltages.setStatus('mandatory')
battManResetDischargeCounters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetDischargeCounters.setStatus('mandatory')
battManString1OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueLastDischargeInfo.setStatus('mandatory')
battManString1OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueTableSize.setStatus('mandatory')
battManString1OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3), )
if mibBuilder.loadTexts: battManString1OhmicValueTable.setStatus('mandatory')
battManString1OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1OhmicValueIndex"))
if mibBuilder.loadTexts: battManString1OhmicValueEntry.setStatus('mandatory')
battManString1OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueIndex.setStatus('mandatory')
battManString1OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueData.setStatus('mandatory')
battManString1ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeTableSize.setStatus('mandatory')
battManString1ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5), )
if mibBuilder.loadTexts: battManString1ResponseTestChangeTable.setStatus('mandatory')
battManString1ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestChangeIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestChangeEntry.setStatus('mandatory')
battManString1ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeIndex.setStatus('mandatory')
battManString1ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeData.setStatus('mandatory')
battManString2OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueLastDischargeInfo.setStatus('mandatory')
battManString2OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueTableSize.setStatus('mandatory')
battManString2OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8), )
if mibBuilder.loadTexts: battManString2OhmicValueTable.setStatus('mandatory')
battManString2OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2OhmicValueIndex"))
if mibBuilder.loadTexts: battManString2OhmicValueEntry.setStatus('mandatory')
battManString2OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueIndex.setStatus('mandatory')
battManString2OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueData.setStatus('mandatory')
battManString2ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeTableSize.setStatus('mandatory')
battManString2ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10), )
if mibBuilder.loadTexts: battManString2ResponseTestChangeTable.setStatus('mandatory')
battManString2ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestChangeIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestChangeEntry.setStatus('mandatory')
battManString2ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeIndex.setStatus('mandatory')
battManString2ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeData.setStatus('mandatory')
battManString1ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentTableSize.setStatus('mandatory')
battManString1ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12), )
if mibBuilder.loadTexts: battManString1ResponseTestCurrentTable.setStatus('mandatory')
battManString1ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentEntry.setStatus('mandatory')
battManString1ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentIndex.setStatus('mandatory')
battManString1ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentData.setStatus('mandatory')
battManString2ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentTableSize.setStatus('mandatory')
battManString2ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14), )
if mibBuilder.loadTexts: battManString2ResponseTestCurrentTable.setStatus('mandatory')
battManString2ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentEntry.setStatus('mandatory')
battManString2ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentIndex.setStatus('mandatory')
battManString2ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentData.setStatus('mandatory')
battManString1ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkTableSize.setStatus('mandatory')
battManString1ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16), )
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkTable.setStatus('mandatory')
battManString1ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentBenchmarkIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkEntry.setStatus('mandatory')
battManString1ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkIndex.setStatus('mandatory')
battManString1ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkData.setStatus('mandatory')
battManString2ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkTableSize.setStatus('mandatory')
battManString2ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18), )
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkTable.setStatus('mandatory')
battManString2ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1), ).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentBenchmarkIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkEntry.setStatus('mandatory')
battManString2ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkIndex.setStatus('mandatory')
battManString2ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkData.setStatus('mandatory')
battManUnitStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusTableSize.setStatus('mandatory')
battManUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2), )
if mibBuilder.loadTexts: battManUnitStatusTable.setStatus('mandatory')
battManUnitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "battManUnitStatusIndex"))
if mibBuilder.loadTexts: battManUnitStatusEntry.setStatus('mandatory')
battManUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusIndex.setStatus('mandatory')
battManUnitStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusSerialNumber.setStatus('mandatory')
battManUnitHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitHardwareRev.setStatus('mandatory')
battManUnitFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitFirmwareRev.setStatus('mandatory')
battManUnitCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCommLoss.setStatus('mandatory')
battManUnitRelayStuck = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitRelayStuck.setStatus('mandatory')
xPDUIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUIdentProductName.setStatus('mandatory')
xPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentHardwareRev.setStatus('mandatory')
xPDUIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareAppRev.setStatus('mandatory')
xPDUIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareAppOSRev.setStatus('mandatory')
xPDUIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareControllerRev.setStatus('mandatory')
xPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentDateOfManufacture.setStatus('mandatory')
xPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentModelNumber.setStatus('mandatory')
xPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentSerialNumber.setStatus('mandatory')
xPDUDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceNominalMainInputVoltage.setStatus('mandatory')
xPDUDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceServiceType.setStatus('mandatory')
xPDUDeviceNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceNominalOutputVoltage.setStatus('mandatory')
xPDUDeviceMainInputBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceMainInputBreakerRating.setStatus('mandatory')
xPDUDevicePanelBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDevicePanelBreakerRating.setStatus('mandatory')
xPDUDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceTransformerPresent.setStatus('mandatory')
xPDUDeviceLoadTieBreakerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceLoadTieBreakerPresent.setStatus('mandatory')
xPDUDeviceLoadTestPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceLoadTestPortPresent.setStatus('mandatory')
xPDUDeviceFusesPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceFusesPresent.setStatus('mandatory')
xPDUDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceFansPresent.setStatus('mandatory')
xPDUDeviceBypassInputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceBypassInputPresent.setStatus('mandatory')
xPDUDeviceCrossTieOutputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceCrossTieOutputPresent.setStatus('mandatory')
xPDUDeviceEarthGroundMonitorPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceEarthGroundMonitorPresent.setStatus('mandatory')
xPDUDeviceInfraStruXureType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("typeB", 1), ("typeC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceInfraStruXureType.setStatus('mandatory')
xPDUMainInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUMainInputOverVoltThreshold.setStatus('mandatory')
xPDUMainInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUMainInputUnderVoltThreshold.setStatus('mandatory')
xPDUMainInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageTableSize.setStatus('mandatory')
xPDUMainInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4), )
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseTable.setStatus('mandatory')
xPDUMainInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUMainInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseEntry.setStatus('mandatory')
xPDUMainInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseIndex.setStatus('mandatory')
xPDUMainInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageLtoL.setStatus('mandatory')
xPDUMainInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageLtoN.setStatus('mandatory')
xPDUBypassInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBypassInputOverVoltThreshold.setStatus('mandatory')
xPDUBypassInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBypassInputUnderVoltThreshold.setStatus('mandatory')
xPDUBypassInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseTableSize.setStatus('mandatory')
xPDUBypassInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4), )
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseTable.setStatus('mandatory')
xPDUBypassInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUBypassInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseEntry.setStatus('mandatory')
xPDUBypassInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseIndex.setStatus('mandatory')
xPDUBypassInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltageLtoL.setStatus('mandatory')
xPDUBypassInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltageLtoN.setStatus('mandatory')
xPDUUPSInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseTableSize.setStatus('mandatory')
xPDUUPSInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2), )
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseTable.setStatus('mandatory')
xPDUUPSInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUUPSInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseEntry.setStatus('mandatory')
xPDUUPSInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseIndex.setStatus('mandatory')
xPDUUPSInputVoltageLtoNPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltageLtoNPresent.setStatus('mandatory')
xPDUSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputFrequency.setStatus('mandatory')
xPDUSystemOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputNeutralCurrent.setStatus('mandatory')
xPDUSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalPower.setStatus('mandatory')
xPDUSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalApparentPower.setStatus('mandatory')
xPDUSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalPowerFactor.setStatus('mandatory')
xPDUSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputFrequencyTolerance.setStatus('mandatory')
xPDUSystemOutputMaxKWPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputMaxKWPower.setStatus('mandatory')
xPDUSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverVoltThreshold.setStatus('mandatory')
xPDUSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputUnderVoltThreshold.setStatus('mandatory')
xPDUSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverCurrentThreshold.setStatus('mandatory')
xPDUSystemOutputOverCurrentNeutralThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverCurrentNeutralThreshold.setStatus('mandatory')
xPDUSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputUnderCurrentThreshold.setStatus('mandatory')
xPDUSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTableSize.setStatus('mandatory')
xPDUSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14), )
if mibBuilder.loadTexts: xPDUSystemOutputPhaseTable.setStatus('mandatory')
xPDUSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUSystemOutputPhaseIndex"))
if mibBuilder.loadTexts: xPDUSystemOutputPhaseEntry.setStatus('mandatory')
xPDUSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPhaseIndex.setStatus('mandatory')
xPDUSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputVoltageLtoL.setStatus('mandatory')
xPDUSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputVoltageLtoN.setStatus('mandatory')
xPDUSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPhaseCurrent.setStatus('mandatory')
xPDUSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPower.setStatus('mandatory')
xPDUSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputApparentPower.setStatus('mandatory')
xPDUSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPowerFactor.setStatus('mandatory')
xPDUGroundCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUGroundCurrent.setStatus('mandatory')
xPDUGroundCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUGroundCurrentThreshold.setStatus('mandatory')
xPDUSystemBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerTableSize.setStatus('mandatory')
xPDUSystemBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2), )
if mibBuilder.loadTexts: xPDUSystemBreakerTable.setStatus('mandatory')
xPDUSystemBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUSystemBreakerTableIndex"))
if mibBuilder.loadTexts: xPDUSystemBreakerEntry.setStatus('mandatory')
xPDUSystemBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerTableIndex.setStatus('mandatory')
xPDUSystemBreakerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerDescription.setStatus('mandatory')
xPDUSystemBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerPosition.setStatus('mandatory')
xPDUNumOfBranchBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUNumOfBranchBreakers.setStatus('mandatory')
xPDUBranchBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerTableSize.setStatus('mandatory')
xPDUBranchBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3), )
if mibBuilder.loadTexts: xPDUBranchBreakerTable.setStatus('mandatory')
xPDUBranchBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUBranchBreakerTableIndex"))
if mibBuilder.loadTexts: xPDUBranchBreakerEntry.setStatus('mandatory')
xPDUBranchBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerTableIndex.setStatus('mandatory')
xPDUBranchBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerRating.setStatus('mandatory')
xPDUBranchBreakerRDPFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteDistribution", 1), ("noRemoteDistribution", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerRDPFeed.setStatus('mandatory')
xPDUBranchBreakerTieIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("breakerUnTied", 1), ("breakerTied", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerTieIndicator.setStatus('mandatory')
xPDUBranchBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerCurrent.setStatus('mandatory')
xPDUBranchBreakerOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerOverCurrentThreshold.setStatus('mandatory')
xPDUBranchBreakerUnderCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerUnderCurrentThreshold.setStatus('mandatory')
xPDUBranchBreakerMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerMaxCurrentThreshold.setStatus('mandatory')
xPDUBranchBreakerMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerMinCurrentThreshold.setStatus('mandatory')
xPDUBranchBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerName.setStatus('mandatory')
xPDUBranchBreakerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerLocation.setStatus('mandatory')
xPDUInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactNumContacts.setStatus('mandatory')
xPDUInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactTableSize.setStatus('mandatory')
xPDUInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3), )
if mibBuilder.loadTexts: xPDUInputContactTable.setStatus('mandatory')
xPDUInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUInputContactNumber"))
if mibBuilder.loadTexts: xPDUInputContactEntry.setStatus('mandatory')
xPDUInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactNumber.setStatus('mandatory')
xPDUInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUInputContactName.setStatus('mandatory')
xPDUInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUInputContactNormalState.setStatus('mandatory')
xPDUInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactCurrentState.setStatus('mandatory')
xPDUOutputRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelaysNumRelays.setStatus('mandatory')
xPDUOutputRelaysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelaysTableSize.setStatus('mandatory')
xPDUOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3), )
if mibBuilder.loadTexts: xPDUOutputRelayTable.setStatus('mandatory')
xPDUOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xPDUOutputRelayNumber"))
if mibBuilder.loadTexts: xPDUOutputRelayEntry.setStatus('mandatory')
xPDUOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelayNumber.setStatus('mandatory')
xPDUOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUOutputRelayName.setStatus('mandatory')
xPDUOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUOutputRelayNormalState.setStatus('mandatory')
xPDUOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelayCurrentState.setStatus('mandatory')
xPDUEPOMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("armed", 1), ("disarmed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUEPOMode.setStatus('mandatory')
xPDUTransformTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUTransformTempStatus.setStatus('mandatory')
xPDUCoolingFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUCoolingFanStatus.setStatus('mandatory')
pmmIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentModelNumber.setStatus('mandatory')
pmmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentSerialNumber.setStatus('mandatory')
pmmIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentDateOfManufacture.setStatus('mandatory')
pmmIdentHMISerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentHMISerialNumber.setStatus('mandatory')
pmmIdentHMIHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentHMIHardwareRev.setStatus('mandatory')
pmmIdentHMIFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentHMIFirmwareAppRev.setStatus('mandatory')
pmmIdentHMIFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmIdentHMIFirmwareAppOSRev.setStatus('mandatory')
pmmDeviceNominalInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmDeviceNominalInputVoltage.setStatus('mandatory')
pmmDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmDeviceServiceType.setStatus('mandatory')
pmmDeviceNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmDeviceNominalOutputVoltage.setStatus('mandatory')
pmmInputMeterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMeterTableSize.setStatus('mandatory')
pmmInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2), )
if mibBuilder.loadTexts: pmmInputTable.setStatus('mandatory')
pmmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmInputMeterIndex"))
if mibBuilder.loadTexts: pmmInputEntry.setStatus('mandatory')
pmmInputMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMeterIndex.setStatus('mandatory')
pmmInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputFrequency.setStatus('mandatory')
pmmInputTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputTotalActivePower.setStatus('mandatory')
pmmInputTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputTotalApparentPower.setStatus('mandatory')
pmmInputTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputTotalPowerFactor.setStatus('mandatory')
pmmInputActiveEnergyDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputActiveEnergyDelivered.setStatus('mandatory')
pmmInputActiveEnergyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputActiveEnergyReceived.setStatus('mandatory')
pmmInputApparentEnergyDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputApparentEnergyDelivered.setStatus('mandatory')
pmmInputApparentEnergyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputApparentEnergyReceived.setStatus('mandatory')
pmmInputFrequencyDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freqDeviationOff", 1), ("freqDeviationPointTwo", 2), ("freqDeviationPointFive", 3), ("freqDeviationOne", 4), ("freqDeviationOnePointFive", 5), ("freqDeviationTwo", 6), ("freqDeviationThree", 7), ("freqDeviationFour", 8), ("freqDeviationFive", 9), ("freqDeviationNine", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputFrequencyDeviation.setStatus('mandatory')
pmmInputPowerFactorDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputPowerFactorDeviation.setStatus('mandatory')
pmmInputMinVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMinVoltThreshold.setStatus('mandatory')
pmmInputLowVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputLowVoltThreshold.setStatus('mandatory')
pmmInputHighVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputHighVoltThreshold.setStatus('mandatory')
pmmInputMaxVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMaxVoltThreshold.setStatus('mandatory')
pmmInputMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMinCurrentThreshold.setStatus('mandatory')
pmmInputLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputLowCurrentThreshold.setStatus('mandatory')
pmmInputHighCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputHighCurrentThreshold.setStatus('mandatory')
pmmInputMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMaxCurrentThreshold.setStatus('mandatory')
pmmInputMinApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMinApparentPowerThreshold.setStatus('mandatory')
pmmInputMaxApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputMaxApparentPowerThreshold.setStatus('mandatory')
pmmInputOverActivePowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputOverActivePowerThreshold.setStatus('mandatory')
pmmInputBreakerState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputBreakerState.setStatus('mandatory')
pmmInputBreakerOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmInputBreakerOpenAlarm.setStatus('mandatory')
pmmInputAverageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputAverageCurrent.setStatus('mandatory')
pmmInputNeturalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputNeturalCurrent.setStatus('mandatory')
pmmInputMaxInstantaneousNeutralCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMaxInstantaneousNeutralCurrent.setStatus('mandatory')
pmmInputAverageCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputAverageCurrentTHD.setStatus('mandatory')
pmmInputAverageVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputAverageVoltageLtoL.setStatus('mandatory')
pmmInputAverageVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputAverageVoltageLtoN.setStatus('mandatory')
pmmInputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputLoad.setStatus('mandatory')
pmmInputMeterFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMeterFirmwareVersion.setStatus('mandatory')
pmmInputMeterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMeterSerialNumber.setStatus('mandatory')
pmmInputEnergyUsageAccumulatedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputEnergyUsageAccumulatedTotal.setStatus('mandatory')
pmmInputPhaseLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPhaseLoss.setStatus('mandatory')
pmmInputBreakerCTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputBreakerCTSize.setStatus('mandatory')
pmmInputBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputBreakerRating.setStatus('mandatory')
pmmInputKWHResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputKWHResetDate.setStatus('mandatory')
pmmInputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputAlarmGeneration.setStatus('mandatory')
pmmInputVoltageMaximumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageMaximumAlarm.setStatus('mandatory')
pmmInputVoltageHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageHighAlarm.setStatus('mandatory')
pmmInputVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageLowAlarm.setStatus('mandatory')
pmmInputVoltageMinimumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageMinimumAlarm.setStatus('mandatory')
pmmInputCurrentMaximumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputCurrentMaximumAlarm.setStatus('mandatory')
pmmInputCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputCurrentHighAlarm.setStatus('mandatory')
pmmInputCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputCurrentLowAlarm.setStatus('mandatory')
pmmInputCurrentMinimumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputCurrentMinimumAlarm.setStatus('mandatory')
pmmInputApparentPowerMaximumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputApparentPowerMaximumAlarm.setStatus('mandatory')
pmmInputApparentPowerMinimumAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputApparentPowerMinimumAlarm.setStatus('mandatory')
pmmInputKWOverAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputKWOverAlarm.setStatus('mandatory')
pmmInputPhaseLossAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPhaseLossAlarm.setStatus('mandatory')
pmmInputPowerFactorTotalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPowerFactorTotalAlarm.setStatus('mandatory')
pmmInputFrequencyDeviationAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputFrequencyDeviationAlarm.setStatus('mandatory')
pmmInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3), )
if mibBuilder.loadTexts: pmmInputPhaseTable.setStatus('mandatory')
pmmInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmInputMeterNum"), (0, "PowerNet-MIB", "pmmInputPhase"))
if mibBuilder.loadTexts: pmmInputPhaseEntry.setStatus('mandatory')
pmmInputMeterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMeterNum.setStatus('mandatory')
pmmInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPhase.setStatus('mandatory')
pmmInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageLtoL.setStatus('mandatory')
pmmInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputVoltageLtoN.setStatus('mandatory')
pmmInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPhaseCurrent.setStatus('mandatory')
pmmInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputActivePower.setStatus('mandatory')
pmmInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputApparentPower.setStatus('mandatory')
pmmInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPowerFactor.setStatus('mandatory')
pmmInputMaxInstantaneousCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputMaxInstantaneousCurrent.setStatus('mandatory')
pmmInputPhaseAngle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputPhaseAngle.setStatus('mandatory')
pmmInputTHDLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputTHDLtoL.setStatus('mandatory')
pmmInputTHDLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputTHDLtoN.setStatus('mandatory')
pmmInputCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmInputCurrentTHD.setStatus('mandatory')
pmmOutputMeterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputMeterTableSize.setStatus('mandatory')
pmmOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2), )
if mibBuilder.loadTexts: pmmOutputTable.setStatus('mandatory')
pmmOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmOutputMeterIndex"))
if mibBuilder.loadTexts: pmmOutputEntry.setStatus('mandatory')
pmmOutputMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputMeterIndex.setStatus('mandatory')
pmmOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputFrequency.setStatus('mandatory')
pmmOutputTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputTotalActivePower.setStatus('mandatory')
pmmOutputTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputTotalApparentPower.setStatus('mandatory')
pmmOutputTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputTotalPowerFactor.setStatus('mandatory')
pmmOutputActiveEnergyDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputActiveEnergyDelivered.setStatus('mandatory')
pmmOutputActiveEnergyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputActiveEnergyReceived.setStatus('mandatory')
pmmOutputApparentEnergyDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputApparentEnergyDelivered.setStatus('mandatory')
pmmOutputApparentEnergyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputApparentEnergyReceived.setStatus('mandatory')
pmmOutputFrequencyDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freqDeviationOff", 1), ("freqDeviationPointTwo", 2), ("freqDeviationPointFive", 3), ("freqDeviationOne", 4), ("freqDeviationOnePointFive", 5), ("freqDeviationTwo", 6), ("freqDeviationThree", 7), ("freqDeviationFour", 8), ("freqDeviationFive", 9), ("freqDeviationNine", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputFrequencyDeviation.setStatus('mandatory')
pmmOutputPowerFactorDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputPowerFactorDeviation.setStatus('mandatory')
pmmOutputMinVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMinVoltThreshold.setStatus('mandatory')
pmmOutputLowVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputLowVoltThreshold.setStatus('mandatory')
pmmOutputHighVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputHighVoltThreshold.setStatus('mandatory')
pmmOutputMaxVoltThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMaxVoltThreshold.setStatus('mandatory')
pmmOutputMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMinCurrentThreshold.setStatus('mandatory')
pmmOutputLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputLowCurrentThreshold.setStatus('mandatory')
pmmOutputHighCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputHighCurrentThreshold.setStatus('mandatory')
pmmOutputMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMaxCurrentThreshold.setStatus('mandatory')
pmmOutputMinApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMinApparentPowerThreshold.setStatus('mandatory')
pmmOutputMaxApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputMaxApparentPowerThreshold.setStatus('mandatory')
pmmOutputOverActivePowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputOverActivePowerThreshold.setStatus('mandatory')
pmmOutputPhaseLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputPhaseLossThreshold.setStatus('mandatory')
pmmOutputBreakerState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputBreakerState.setStatus('mandatory')
pmmOutputBreakerOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmOutputBreakerOpenAlarm.setStatus('mandatory')
pmmOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3), )
if mibBuilder.loadTexts: pmmOutputPhaseTable.setStatus('mandatory')
pmmOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmOutputMeterNum"), (0, "PowerNet-MIB", "pmmOutputPhase"))
if mibBuilder.loadTexts: pmmOutputPhaseEntry.setStatus('mandatory')
pmmOutputMeterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputMeterNum.setStatus('mandatory')
pmmOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputPhase.setStatus('mandatory')
pmmOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputVoltageLtoL.setStatus('mandatory')
pmmOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputVoltageLtoN.setStatus('mandatory')
pmmOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputPhaseCurrent.setStatus('mandatory')
pmmOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputActivePower.setStatus('mandatory')
pmmOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputApparentPower.setStatus('mandatory')
pmmOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmOutputPowerFactor.setStatus('mandatory')
pmmnumofBranchMeters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmnumofBranchMeters.setStatus('mandatory')
pmmBranchBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchBreakerTableSize.setStatus('mandatory')
pmmBranchBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3), )
if mibBuilder.loadTexts: pmmBranchBreakerTable.setStatus('mandatory')
pmmBranchBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmBranchCircuitMeterIndex"), (0, "PowerNet-MIB", "pmmBranchCircuitIndex"))
if mibBuilder.loadTexts: pmmBranchBreakerEntry.setStatus('mandatory')
pmmBranchCircuitMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitMeterIndex.setStatus('mandatory')
pmmBranchCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitIndex.setStatus('mandatory')
pmmBranchCircuitNumberOfPoles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitNumberOfPoles.setStatus('mandatory')
pmmBranchCircuitPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitPhase.setStatus('mandatory')
pmmBranchCircuitBreakerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerIdentifier.setStatus('mandatory')
pmmBranchCircuitLoadIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitLoadIdentifier.setStatus('mandatory')
pmmBranchCircuitCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitCurrent.setStatus('mandatory')
pmmBranchCircuitBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerRating.setStatus('mandatory')
pmmBranchCircuitTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitTotalActivePower.setStatus('mandatory')
pmmBranchCircuitTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitTotalApparentPower.setStatus('mandatory')
pmmBranchCircuitEnergyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitEnergyUsage.setStatus('mandatory')
pmmBranchCircuitEnergyUsageResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitEnergyUsageResetDate.setStatus('mandatory')
pmmBranchCircuitTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitTotalPowerFactor.setStatus('mandatory')
pmmBranchCircuitBreakerState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerState.setStatus('mandatory')
pmmBranchCircuitMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitMinCurrentThreshold.setStatus('mandatory')
pmmBranchCircuitLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitLowCurrentThreshold.setStatus('mandatory')
pmmBranchCircuitHighCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitHighCurrentThreshold.setStatus('mandatory')
pmmBranchCircuitMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitMaxCurrentThreshold.setStatus('mandatory')
pmmBranchCircuitMinApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitMinApparentPowerThreshold.setStatus('mandatory')
pmmBranchCircuitMaxApparentPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitMaxApparentPowerThreshold.setStatus('mandatory')
pmmBranchCircuitAlaramGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitAlaramGeneration.setStatus('mandatory')
pmmBranchCircuitBreakerOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerOpenAlarm.setStatus('mandatory')
pmmBranchCircuitBreakerAverageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerAverageCurrent.setStatus('mandatory')
pmmBranchCircuitMaxInstantaneousCurrentPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitMaxInstantaneousCurrentPhase.setStatus('mandatory')
pmmBranchCircuitBreakerMaxInstantaneousAverageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerMaxInstantaneousAverageCurrent.setStatus('mandatory')
pmmBranchCircuitAngle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitAngle.setStatus('mandatory')
pmmBranchCircuitActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitActivePower.setStatus('mandatory')
pmmBranchCircuitApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitApparentPower.setStatus('mandatory')
pmmBranchCircuitBreakerEnergyTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerEnergyTotalUsage.setStatus('mandatory')
pmmBranchCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitPowerFactor.setStatus('mandatory')
pmmBranchCircuitTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitTHD.setStatus('mandatory')
pmmBranchCircuitBreakerTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerTHD.setStatus('mandatory')
pmmBranchCircuitBreakerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBreakerLoad.setStatus('mandatory')
pmmBranchCircuitBranchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitBranchNumber.setStatus('mandatory')
pmmBranchCircuitChannelCTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchCircuitChannelCTSize.setStatus('mandatory')
pmmBranchcircuitCurrentMaxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitCurrentMaxAlarm.setStatus('mandatory')
pmmBranchcircuitCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitCurrentHighAlarm.setStatus('mandatory')
pmmBranchcircuitCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitCurrentLowAlarm.setStatus('mandatory')
pmmBranchcircuitCurrentMinAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitCurrentMinAlarm.setStatus('mandatory')
pmmBranchcircuitApparentPowerMaxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitApparentPowerMaxAlarm.setStatus('mandatory')
pmmBranchcircuitApparentPowerMinAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 3, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmBranchcircuitApparentPowerMinAlarm.setStatus('mandatory')
pmmSiteConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigTableSize.setStatus('mandatory')
pmmSiteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2), )
if mibBuilder.loadTexts: pmmSiteConfigTable.setStatus('mandatory')
pmmSiteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "pmmSiteConfigIndex"))
if mibBuilder.loadTexts: pmmSiteConfigEntry.setStatus('mandatory')
pmmSiteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigIndex.setStatus('mandatory')
pmmSiteConfigNominalPtoPVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNominalPtoPVoltage.setStatus('mandatory')
pmmSiteConfigNominalPtoNVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNominalPtoNVoltage.setStatus('mandatory')
pmmSiteConfigNominalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNominalCurrent.setStatus('mandatory')
pmmSiteConfigNominalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNominalFrequency.setStatus('mandatory')
pmmSiteConfigNominalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNominalApparentPower.setStatus('mandatory')
pmmSiteConfigServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigServiceType.setStatus('mandatory')
pmmSiteConfigNumberofPanel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNumberofPanel.setStatus('mandatory')
pmmSiteConfigNumberofChannel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNumberofChannel.setStatus('mandatory')
pmmSiteConfigNumberofsources = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigNumberofsources.setStatus('mandatory')
pmmSiteConfigProductModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigProductModelNumber.setStatus('mandatory')
pmmSiteConfigProductSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 28, 3, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmmSiteConfigProductSerialNumber.setStatus('mandatory')
chargerIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerIdentModel.setStatus('mandatory')
chargerBasicIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chargerBasicIdentName.setStatus('mandatory')
chargerIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerIdentSerialNumber.setStatus('mandatory')
chargerIdentModelType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerIdentModelType.setStatus('mandatory')
chargerInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1), )
if mibBuilder.loadTexts: chargerInputPhaseTable.setStatus('mandatory')
chargerInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "chargerInputPhaseTableIndex"))
if mibBuilder.loadTexts: chargerInputPhaseEntry.setStatus('mandatory')
chargerInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerInputPhaseTableIndex.setStatus('mandatory')
chargerInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerInputPhaseVoltage.setStatus('mandatory')
chargerInputPhaseMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerInputPhaseMinVoltage.setStatus('mandatory')
chargerInputPhaseMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerInputPhaseMaxVoltage.setStatus('mandatory')
chargerInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerInputPhaseCurrent.setStatus('mandatory')
chargerOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("initialising", 2), ("standby", 3), ("onBattery", 4), ("floatCharging", 5), ("boostCharging", 6), ("initialCharging", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerOutputStatus.setStatus('mandatory')
chargerOutputVauxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerOutputVauxVoltage.setStatus('mandatory')
chargerOutputTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerOutputTotalCurrent.setStatus('mandatory')
chargerOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 29, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargerOutputLoad.setStatus('mandatory')
xATSIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSIdentProductName.setStatus('mandatory')
xATSIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentHardwareRev.setStatus('mandatory')
xATSIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareAppRev.setStatus('mandatory')
xATSIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareAppOSRev.setStatus('mandatory')
xATSIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareControllerRev.setStatus('mandatory')
xATSIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentDateOfManufacture.setStatus('mandatory')
xATSIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentModelNumber.setStatus('mandatory')
xATSIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentSerialNumber.setStatus('mandatory')
xATSDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceServiceType.setStatus('mandatory')
xATSDeviceNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceNominalVoltage.setStatus('mandatory')
xATSDeviceNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceNominalFrequency.setStatus('mandatory')
xATSDeviceTransferSwitchRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceTransferSwitchRating.setStatus('mandatory')
xATSDeviceDCBackUpPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSDeviceDCBackUpPresent.setStatus('mandatory')
xATSSwitchStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("source1", 2), ("source2", 3), ("fault", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusSelectedSource.setStatus('mandatory')
xATSSwitchStatusOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("automatic", 1), ("notInAutoAbnormal", 2), ("notInAuto", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusOperationalMode.setStatus('mandatory')
xATSSwitchStatusAutomaticOperationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusAutomaticOperationSwitch.setStatus('mandatory')
xATSSwitchStatusEngineStartSignal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("run", 1), ("stop", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusEngineStartSignal.setStatus('mandatory')
xATSSwitchSettingsLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsLowVoltageTransferPoint.setStatus('mandatory')
xATSSwitchSettingsHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsHighVoltageTransferPoint.setStatus('mandatory')
xATSSwitchSettingsMaxFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMaxFrequencyDeviation.setStatus('mandatory')
xATSSwitchSettingsMinPhaseBalance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMinPhaseBalance.setStatus('mandatory')
xATSSwitchSettingsNominalRotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("any", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsNominalRotation.setStatus('mandatory')
xATSSwitchSettingsAllowClosedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsAllowClosedTransfer.setStatus('mandatory')
xATSSwitchSettingsMaxSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMaxSyncTime.setStatus('mandatory')
xATSSwitchSettingsNeutralTransferTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsNeutralTransferTime.setStatus('mandatory')
xATSSwitchSettingsClearLatchedAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsClearLatchedAlarms.setStatus('mandatory')
xATSSwitchSettingsSetToFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsSetToFactoryDefaults.setStatus('mandatory')
xATSSwitchTimersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersTableSize.setStatus('mandatory')
xATSSwitchTimersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2), )
if mibBuilder.loadTexts: xATSSwitchTimersTable.setStatus('mandatory')
xATSSwitchTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchTimersIndex"))
if mibBuilder.loadTexts: xATSSwitchTimersEntry.setStatus('mandatory')
xATSSwitchTimersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersIndex.setStatus('mandatory')
xATSSwitchTimersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersName.setStatus('mandatory')
xATSSwitchTimersAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchTimersAbort.setStatus('mandatory')
xATSSwitchTimersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersStatus.setStatus('mandatory')
xATSSwitchTimersRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersRemainingTime.setStatus('mandatory')
xATSSwitchTimersDelaySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchTimersDelaySetting.setStatus('mandatory')
xATSSwitchBlockMapTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapTableSize.setStatus('mandatory')
xATSSwitchBlockMapTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2), )
if mibBuilder.loadTexts: xATSSwitchBlockMapTable.setStatus('mandatory')
xATSSwitchBlockMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchBlockMapIndex"))
if mibBuilder.loadTexts: xATSSwitchBlockMapEntry.setStatus('mandatory')
xATSSwitchBlockMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapIndex.setStatus('mandatory')
xATSSwitchBlockMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapName.setStatus('mandatory')
xATSSwitchBlockMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapStatus.setStatus('mandatory')
xATSSwitchBlockMapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchBlockMapSetting.setStatus('mandatory')
xATSSwitchStatisticsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsTableSize.setStatus('mandatory')
xATSSwitchStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2), )
if mibBuilder.loadTexts: xATSSwitchStatisticsTable.setStatus('mandatory')
xATSSwitchStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSwitchStatisticsIndex"))
if mibBuilder.loadTexts: xATSSwitchStatisticsEntry.setStatus('mandatory')
xATSSwitchStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsIndex.setStatus('mandatory')
xATSSwitchStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsName.setStatus('mandatory')
xATSSwitchStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsValue.setStatus('mandatory')
xATSSwitchStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchStatisticsReset.setStatus('mandatory')
xATSSource1Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSource1Name.setStatus('mandatory')
xATSSource1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Position.setStatus('mandatory')
xATSSource1Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Frequency.setStatus('mandatory')
xATSSource1Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Quality.setStatus('mandatory')
xATSSource1Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Rotation.setStatus('mandatory')
xATSSource1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1TableSize.setStatus('mandatory')
xATSSource1PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7), )
if mibBuilder.loadTexts: xATSSource1PhaseTable.setStatus('mandatory')
xATSSource1PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSource1Index"))
if mibBuilder.loadTexts: xATSSource1PhaseEntry.setStatus('mandatory')
xATSSource1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Index.setStatus('mandatory')
xATSSource1VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1VoltageLtoL.setStatus('mandatory')
xATSSource1VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1VoltageLtoN.setStatus('mandatory')
xATSSource2Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSource2Name.setStatus('mandatory')
xATSSource2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Position.setStatus('mandatory')
xATSSource2Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Frequency.setStatus('mandatory')
xATSSource2Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Quality.setStatus('mandatory')
xATSSource2Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Rotation.setStatus('mandatory')
xATSSource2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2TableSize.setStatus('mandatory')
xATSSource2PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7), )
if mibBuilder.loadTexts: xATSSource2PhaseTable.setStatus('mandatory')
xATSSource2PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSource2Index"))
if mibBuilder.loadTexts: xATSSource2PhaseEntry.setStatus('mandatory')
xATSSource2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Index.setStatus('mandatory')
xATSSource2VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2VoltageLtoL.setStatus('mandatory')
xATSSource2VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2VoltageLtoN.setStatus('mandatory')
xATSSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputFrequency.setStatus('mandatory')
xATSSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalPower.setStatus('mandatory')
xATSSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalApparentPower.setStatus('mandatory')
xATSSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalPowerFactor.setStatus('mandatory')
xATSSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputFrequencyTolerance.setStatus('mandatory')
xATSSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputOverVoltThreshold.setStatus('mandatory')
xATSSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputUnderVoltThreshold.setStatus('mandatory')
xATSSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputOverCurrentThreshold.setStatus('mandatory')
xATSSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputUnderCurrentThreshold.setStatus('mandatory')
xATSSystemOutputAlarmDelayThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputAlarmDelayThreshold.setStatus('mandatory')
xATSSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTableSize.setStatus('mandatory')
xATSSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12), )
if mibBuilder.loadTexts: xATSSystemOutputPhaseTable.setStatus('mandatory')
xATSSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSSystemOutputPhaseIndex"))
if mibBuilder.loadTexts: xATSSystemOutputPhaseEntry.setStatus('mandatory')
xATSSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPhaseIndex.setStatus('mandatory')
xATSSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputVoltageLtoL.setStatus('mandatory')
xATSSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputVoltageLtoN.setStatus('mandatory')
xATSSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPhaseCurrent.setStatus('mandatory')
xATSSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPower.setStatus('mandatory')
xATSSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputApparentPower.setStatus('mandatory')
xATSSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPowerFactor.setStatus('mandatory')
xATSTestingStatusSelectTestProcess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("engineStartTest", 1), ("systemLoadTest", 2), ("generatorHoldTest", 3), ("cancelTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusSelectTestProcess.setStatus('mandatory')
xATSTestingStatusTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noTestInProcess", 1), ("testPending", 2), ("startingEngine", 3), ("engineWarmingUp", 4), ("awaitingTransferToS2", 5), ("testingWithLoad", 6), ("awaitingRetransferToS1", 7), ("testingWithoutLoad", 8), ("stoppingEngine", 9), ("holdingOnGenerator", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingStatusTestStatus.setStatus('mandatory')
xATSTestingStatusProfileWarmupTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileWarmupTime.setStatus('mandatory')
xATSTestingStatusProfileLoadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileLoadedTime.setStatus('mandatory')
xATSTestingStatusProfileUnloadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileUnloadedTime.setStatus('mandatory')
xATSTestingResultsLastDateOfTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastDateOfTest.setStatus('mandatory')
xATSTestingResultsLastResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("noResultsAvailable", 1), ("startTestPassed", 2), ("loadTestPassed", 3), ("startSignalFailure", 4), ("failedGenNotInAuto", 5), ("failedGenEmerStop", 6), ("failedGenShutdown", 7), ("failedGenDidNotStart", 8), ("failedS2NeverGood", 9), ("genFailedDuringWarmup", 10), ("failureOnXferToS1", 11), ("genFailedLoaded", 12), ("failureOnRexferToS2", 13), ("failedOnCooldown", 14), ("genFailedToStop", 15), ("failedAtsInternalFault", 16), ("failedAtsNotInAuto", 17), ("canceledManualTest", 18), ("canceledScheduledTest", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastResult.setStatus('mandatory')
xATSTestingResultsTestLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsTestLastTestTime.setStatus('mandatory')
xATSTestingResultsLastCrankDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastCrankDuration.setStatus('mandatory')
xATSTestingResultsLastWarmupDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastWarmupDuration.setStatus('mandatory')
xATSTestingResultsLastLoadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastLoadedDuration.setStatus('mandatory')
xATSTestingResultsLastUnloadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastUnloadedDuration.setStatus('mandatory')
xATSTestingScheduleFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("daily", 2), ("weekly", 3), ("monthly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleFrequency.setStatus('mandatory')
xATSTestingScheduleTestDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestDay.setStatus('mandatory')
xATSTestingScheduleTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestTime.setStatus('mandatory')
xATSTestingScheduleTestWithLoadInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("applyLoadEveryTest", 1), ("neverApplyLoad", 2), ("applyLoadMonthly", 3), ("applyLoadMonthlyDetailed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestWithLoadInterval.setStatus('mandatory')
xATSTestingScheduleTestWithLoadSelectMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestWithLoadSelectMonth.setStatus('mandatory')
xATSTestingScheduleNextTestDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingScheduleNextTestDate.setStatus('mandatory')
xATSTestingSimulatePowerFailTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cancelSimulation", 1), ("fiveSecondsSimulation", 2), ("tenSecondsSimulation", 3), ("thirtySecondsSimulation", 4), ("oneMinuteSimulation", 5), ("threeMinutesSimulation", 6), ("fiveMinutesSimulation", 7), ("tenMinutesSimulation", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingSimulatePowerFailTest.setStatus('mandatory')
xATSTestingSimulatePowerFailTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingSimulatePowerFailTimeRemaining.setStatus('mandatory')
xATSInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactNumContacts.setStatus('mandatory')
xATSInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactTableSize.setStatus('mandatory')
xATSInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3), )
if mibBuilder.loadTexts: xATSInputContactTable.setStatus('mandatory')
xATSInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSInputContactNumber"))
if mibBuilder.loadTexts: xATSInputContactEntry.setStatus('mandatory')
xATSInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactNumber.setStatus('mandatory')
xATSInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSInputContactName.setStatus('mandatory')
xATSInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSInputContactNormalState.setStatus('mandatory')
xATSInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactCurrentState.setStatus('mandatory')
xATSOutputRelayNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayNumRelays.setStatus('mandatory')
xATSOutputRelayTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayTableSize.setStatus('mandatory')
xATSOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3), )
if mibBuilder.loadTexts: xATSOutputRelayTable.setStatus('mandatory')
xATSOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSOutputRelayNumber"))
if mibBuilder.loadTexts: xATSOutputRelayEntry.setStatus('mandatory')
xATSOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayNumber.setStatus('mandatory')
xATSOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSOutputRelayName.setStatus('mandatory')
xATSOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSOutputRelayNormalState.setStatus('mandatory')
xATSOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayCurrentState.setStatus('mandatory')
xATSGeneratorIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentModelNumber.setStatus('mandatory')
xATSGeneratorIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentSerialNumber.setStatus('mandatory')
xATSGeneratorIdentDateofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentDateofManufacture.setStatus('mandatory')
xATSGeneratorIdentVoltageConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentVoltageConfiguration.setStatus('mandatory')
xATSGeneratorIdentMaxPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentMaxPowerRating.setStatus('mandatory')
xATSGeneratorIdentAlternatorFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentAlternatorFrequency.setStatus('mandatory')
xATSGeneratorStatusGeneratorName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorStatusGeneratorName.setStatus('mandatory')
xATSGeneratorStatusOperational = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("nocomm", 1), ("off", 2), ("ready", 3), ("starting", 4), ("idle", 5), ("running", 6), ("normalStop", 7), ("emergencyStop", 8), ("notInAuto", 9), ("shutdown", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusOperational.setStatus('mandatory')
xATSGeneratorStatusModeSwitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("automatic", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusModeSwitchPosition.setStatus('mandatory')
xATSGeneratorStatusRemoteStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("run", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusRemoteStart.setStatus('mandatory')
xATSGeneratorAdvStatusBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusBatteryVoltage.setStatus('mandatory')
xATSGeneratorAdvStatusOilPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusOilPressure.setStatus('mandatory')
xATSGeneratorAdvStatusCoolantTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusCoolantTemperature.setStatus('mandatory')
xATSGeneratorAdvStatusEngineRPM = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusEngineRPM.setStatus('mandatory')
xATSGeneratorAdvStatusOilLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusOilLevel.setStatus('mandatory')
xATSGeneratorAdvStatusCoolantLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusCoolantLevel.setStatus('mandatory')
xATSGeneratorOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputFrequency.setStatus('mandatory')
xATSGeneratorOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalPower.setStatus('mandatory')
xATSGeneratorOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalApparentPower.setStatus('mandatory')
xATSGeneratorOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalPowerFactor.setStatus('mandatory')
xATSGeneratorOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTableSize.setStatus('mandatory')
xATSGeneratorOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6), )
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseTable.setStatus('mandatory')
xATSGeneratorOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "xATSGeneratorOutputPhaseIndex"))
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseEntry.setStatus('mandatory')
xATSGeneratorOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseIndex.setStatus('mandatory')
xATSGeneratorOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputVoltageLtoL.setStatus('mandatory')
xATSGeneratorOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputVoltageLtoN.setStatus('mandatory')
xATSGeneratorOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseCurrent.setStatus('mandatory')
xATSGeneratorOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPower.setStatus('mandatory')
xATSGeneratorOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputApparentPower.setStatus('mandatory')
xATSGeneratorOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPowerFactor.setStatus('mandatory')
xATSGeneratorSettingsVoltageAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsVoltageAdjust.setStatus('mandatory')
xATSGeneratorSettingsFrequencyAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsFrequencyAdjust.setStatus('mandatory')
xATSGeneratorSettingsStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsStartDelay.setStatus('mandatory')
xATSGeneratorSettingsStopDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsStopDelay.setStatus('mandatory')
xATSGeneratorSettingsCrankCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankCycleEnable.setStatus('mandatory')
xATSGeneratorSettingsCrankTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankTime.setStatus('mandatory')
xATSGeneratorSettingsCrankRestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankRestTime.setStatus('mandatory')
xATSGeneratorSettingsNumberCrank = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsNumberCrank.setStatus('mandatory')
xATSGeneratorSettingsMetricUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorSettingsMetricUnit.setStatus('mandatory')
xATSGeneratorServiceTotalRunHoursLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalRunHoursLifetime.setStatus('mandatory')
xATSGeneratorServiceEngineStartsLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceEngineStartsLifetime.setStatus('mandatory')
xATSGeneratorServiceTotalkWhLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalkWhLifetime.setStatus('mandatory')
xATSGeneratorServiceTotalRunHoursSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalRunHoursSinceMaintenance.setStatus('mandatory')
xATSGeneratorServiceEngineStartsSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceEngineStartsSinceMaintenance.setStatus('mandatory')
xATSGeneratorServiceTotalkWhMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalkWhMaintenance.setStatus('mandatory')
xATSGeneratorServiceResetRecord = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceResetRecord.setStatus('mandatory')
xATSGeneratorServiceRecordResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceRecordResetDate.setStatus('mandatory')
xATSGeneratorServiceNextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceNextServiceDate.setStatus('mandatory')
xATSGeneratorServiceRunHoursUntilServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceRunHoursUntilServiceDate.setStatus('mandatory')
xATSGeneratorServiceRunHoursThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("runThreshold100Hours", 2), ("runThreshold150Hours", 3), ("runThreshold200Hours", 4), ("runThreshold250Hours", 5), ("runThreshold300Hours", 6), ("runThreshold400Hours", 7), ("runThreshold500Hours", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceRunHoursThreshold.setStatus('mandatory')
xATSGeneratorServiceCalendarIntervalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("interval1month", 2), ("interval2month", 3), ("interval3month", 4), ("interval6month", 5), ("intervalyearly", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceCalendarIntervalThreshold.setStatus('mandatory')
xATSGeneratorFuelSystemType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("diesel", 1), ("propane", 2), ("naturalGas", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemType.setStatus('mandatory')
xATSGeneratorFuelSystemTankSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemTankSize.setStatus('mandatory')
xATSGeneratorFuelSystemFuelLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemFuelLevel.setStatus('mandatory')
xATSGeneratorFuelSystemRuntimePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemRuntimePower.setStatus('mandatory')
xATSGeneratorFuelSystemEstimatedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemEstimatedRunTime.setStatus('mandatory')
xATSGeneratorFuelSystemLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("disabled", 1), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemLowRunTimeThreshold.setStatus('mandatory')
xATSGeneratorFuelSystemVeryLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("disabled", 1), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemVeryLowRunTimeThreshold.setStatus('mandatory')
xATSGeneratorFuelSystemLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemLowFuelLevelThreshold.setStatus('mandatory')
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemVeryLowFuelLevelThreshold.setStatus('mandatory')
apCPSpname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSpname.setStatus('mandatory')
apCPSversion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSversion.setStatus('mandatory')
apCPSPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3))
apCPSPwNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPwNum.setStatus('mandatory')
apCPSPw1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPw1.setStatus('mandatory')
apCPSPw2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPw2.setStatus('mandatory')
apCPSPcmcia = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4))
apCPSNPcmcia = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSNPcmcia.setStatus('mandatory')
cpsCardIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cpsCardIdentTable.setStatus('mandatory')
cpsCardIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardIdentIndex"))
if mibBuilder.loadTexts: cpsCardIdentEntry.setStatus('mandatory')
cpsCardIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentIndex.setStatus('mandatory')
cpsCardIdentProd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentProd.setStatus('mandatory')
cpsCardIdentMan = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentMan.setStatus('mandatory')
cpsCardIdentFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentFunc.setStatus('mandatory')
cpsCardIdentPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentPCI.setStatus('mandatory')
cpsCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cpsCardConfTable.setStatus('mandatory')
cpsCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardConfIndex"))
if mibBuilder.loadTexts: cpsCardConfEntry.setStatus('mandatory')
cpsCardConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfIndex.setStatus('mandatory')
cpsCardConfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPower.setStatus('mandatory')
cpsCardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfType.setStatus('mandatory')
cpsCardConfInter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfInter.setStatus('mandatory')
cpsCardConfFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfFunc.setStatus('mandatory')
cpsCardConfCardv = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfCardv.setStatus('mandatory')
cpsCardConfPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPort1.setStatus('mandatory')
cpsCardConfPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPort2.setStatus('mandatory')
cpsCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4), )
if mibBuilder.loadTexts: cpsCardStatusTable.setStatus('mandatory')
cpsCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsCardStatusIndex"))
if mibBuilder.loadTexts: cpsCardStatusEntry.setStatus('mandatory')
cpsCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusIndex.setStatus('mandatory')
cpsCardStatusCard = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusCard.setStatus('mandatory')
cpsCardStatusFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusFunc.setStatus('mandatory')
apCPSFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSFlashSize.setStatus('mandatory')
apCPSRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSRAMSize.setStatus('mandatory')
apCPSCPUfreq = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSCPUfreq.setStatus('mandatory')
apCPSDevId = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSDevId.setStatus('mandatory')
cpsHostName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsHostName.setStatus('mandatory')
cpsConsoleBanner = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsConsoleBanner.setStatus('mandatory')
cpsMotd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsMotd.setStatus('mandatory')
cpsEthItf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4))
cpsEthDhcpc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthDhcpc.setStatus('mandatory')
cpsEthIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPaddr.setStatus('mandatory')
cpsEthIPmask = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPmask.setStatus('mandatory')
cpsEthMTU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthMTU.setStatus('mandatory')
cpsEthIPaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPaddr2.setStatus('mandatory')
cpsEthIPmask2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPmask2.setStatus('mandatory')
cpsNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5))
cpsResolverOrder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsResolverOrder.setStatus('mandatory')
cpsMultipleIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsMultipleIP.setStatus('mandatory')
cpsDNSserv = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3))
cpsDNSpriserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSpriserv.setStatus('mandatory')
cpsDNSsecserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSsecserv.setStatus('mandatory')
cpsDNSdomain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSdomain.setStatus('mandatory')
cpsSerialPortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6))
cpsSerialGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1))
cpsSerialInclude = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialInclude.setStatus('mandatory')
cpsSerialNFS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialNFS.setStatus('mandatory')
cpsSerialLockDir = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialLockDir.setStatus('mandatory')
cpsSerialRlogin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialRlogin.setStatus('mandatory')
cpsSerialPppd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPppd.setStatus('mandatory')
cpsSerialTelnet = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialTelnet.setStatus('mandatory')
cpsSerialSsh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialSsh.setStatus('mandatory')
cpsSerialLocalLogins = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialLocalLogins.setStatus('mandatory')
cpsSerialFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialFacility.setStatus('mandatory')
cpsSerialDBFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialDBFacility.setStatus('mandatory')
cpsSerialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11), )
if mibBuilder.loadTexts: cpsSerialGroupTable.setStatus('mandatory')
cpsSerialGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsSerialGroupIndex"))
if mibBuilder.loadTexts: cpsSerialGroupEntry.setStatus('mandatory')
cpsSerialGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSerialGroupIndex.setStatus('mandatory')
cpsSerialGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialGroupName.setStatus('mandatory')
cpsSerialGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialGroupUsers.setStatus('mandatory')
cpsSerialSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2))
cpsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1), )
if mibBuilder.loadTexts: cpsSerialPortTable.setStatus('mandatory')
cpsSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsSerialPortNumber"))
if mibBuilder.loadTexts: cpsSerialPortEntry.setStatus('mandatory')
cpsSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSerialPortNumber.setStatus('mandatory')
cpsSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTty.setStatus('mandatory')
cpsSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortName.setStatus('mandatory')
cpsSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSpeed.setStatus('mandatory')
cpsSerialPortDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDataSize.setStatus('mandatory')
cpsSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortStopBits.setStatus('mandatory')
cpsSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortParity.setStatus('mandatory')
cpsSerialPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortFlowCtrl.setStatus('mandatory')
cpsSerialPortDTRdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDTRdelay.setStatus('mandatory')
cpsSerialPortDCDCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDCDCtrl.setStatus('mandatory')
cpsSerialPortLogUtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogUtmp.setStatus('mandatory')
cpsSerialPortLogWtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogWtmp.setStatus('mandatory')
cpsSerialPortLogform = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogform.setStatus('mandatory')
cpsSerialPortAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthtype.setStatus('mandatory')
cpsSerialPortAuthSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSrv1.setStatus('mandatory')
cpsSerialPortAccSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAccSrv1.setStatus('mandatory')
cpsSerialPortAuthTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthTmo.setStatus('mandatory')
cpsSerialPortAuthRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthRetr.setStatus('mandatory')
cpsSerialPortAuthSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSrv2.setStatus('mandatory')
cpsSerialPortAccSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAccSrv2.setStatus('mandatory')
cpsSerialPortAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSecret.setStatus('mandatory')
cpsSerialPortAuthRadP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthRadP.setStatus('mandatory')
cpsSerialPortAuthAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthAcc.setStatus('mandatory')
cpsSerialPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortProtocol.setStatus('mandatory')
cpsSerialPortRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortRemoteIP.setStatus('mandatory')
cpsSerialPortSocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSocketPort.setStatus('mandatory')
cpsSerialPortRemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortRemHost.setStatus('mandatory')
cpsSerialPortBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortBanner.setStatus('mandatory')
cpsSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPrompt.setStatus('mandatory')
cpsSerialPortTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTermType.setStatus('mandatory')
cpsSerialPortAutomUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutomUsr.setStatus('mandatory')
cpsSerialPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortNetMask.setStatus('mandatory')
cpsSerialPortPppMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppMtu.setStatus('mandatory')
cpsSerialPortPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppMru.setStatus('mandatory')
cpsSerialPortPppOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppOptions.setStatus('mandatory')
cpsSerialPortPppFoption = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppFoption.setStatus('mandatory')
cpsSerialPortModemChat = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortModemChat.setStatus('mandatory')
cpsSerialPortSttyCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSttyCmd.setStatus('mandatory')
cpsSerialPortSockTx = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockTx.setStatus('mandatory')
cpsSerialPortSockPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockPoll.setStatus('mandatory')
cpsSerialPortSockIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockIdle.setStatus('mandatory')
cpsSerialPortDBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBsize.setStatus('mandatory')
cpsSerialPortDBtime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBtime.setStatus('mandatory')
cpsSerialPortDBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBmode.setStatus('mandatory')
cpsSerialPortDBsyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBsyslog.setStatus('mandatory')
cpsSerialPortDBmenu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBmenu.setStatus('mandatory')
cpsSerialPortDBalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBalarm.setStatus('mandatory')
cpsSerialPortSSHbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSSHbreak.setStatus('mandatory')
cpsSerialPortSniffSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffSess.setStatus('mandatory')
cpsSerialPortSniffAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffAdm.setStatus('mandatory')
cpsSerialPortSniffEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffEsc.setStatus('mandatory')
cpsSerialPortSniffMsess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffMsess.setStatus('mandatory')
cpsSerialPortTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTelnetMode.setStatus('mandatory')
cpsSerialPortSysBufSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSysBufSess.setStatus('mandatory')
cpsSerialPortLFSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLFSuppress.setStatus('mandatory')
cpsSerialPortAutoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutoInput.setStatus('mandatory')
cpsSerialPortAutoOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutoOutput.setStatus('mandatory')
cpsSerialPortBreakInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortBreakInterval.setStatus('mandatory')
cpsInfoSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1), )
if mibBuilder.loadTexts: cpsInfoSerialPortTable.setStatus('mandatory')
cpsInfoSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "cpsInfoSerialPortNumber"))
if mibBuilder.loadTexts: cpsInfoSerialPortEntry.setStatus('mandatory')
cpsInfoSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortNumber.setStatus('mandatory')
cpsInfoSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortTty.setStatus('mandatory')
cpsInfoSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortName.setStatus('mandatory')
cpsInfoSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSpeed.setStatus('mandatory')
cpsInfoSerialPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortTxBytes.setStatus('mandatory')
cpsInfoSerialPortRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortRXBytes.setStatus('mandatory')
cpsInfoSerialPortErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrFrame.setStatus('mandatory')
cpsInfoSerialPortErrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrParity.setStatus('mandatory')
cpsInfoSerialPortErrBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrBreaks.setStatus('mandatory')
cpsInfoSerialPortErrOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrOverrun.setStatus('mandatory')
cpsInfoSerialPortSigDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigDTR.setStatus('mandatory')
cpsInfoSerialPortSigCD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigCD.setStatus('mandatory')
cpsInfoSerialPortSigDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigDSR.setStatus('mandatory')
cpsInfoSerialPortSigRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigRTS.setStatus('mandatory')
cpsInfoSerialPortSigCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigCTS.setStatus('mandatory')
cpsInfoSerialPortSigRI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigRI.setStatus('mandatory')
apCPSSave = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCPSSave.setStatus('mandatory')
apCPSSerialHUP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCPSSerialHUP.setStatus('mandatory')
accessPXIdentAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentAlarmStatus.setStatus('mandatory')
accessPXIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentProductNumber.setStatus('mandatory')
accessPXIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentHardwareRev.setStatus('mandatory')
accessPXIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentDateOfManufacture.setStatus('mandatory')
accessPXIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentSerialNumber.setStatus('mandatory')
accessPXConfigCardReaderEnableDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigCardReaderEnableDisableAction.setStatus('mandatory')
accessPXConfigAutoRelockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigAutoRelockTime.setStatus('mandatory')
accessPXConfigCardFormat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("hidStd26", 1), ("hid37Bit", 2), ("hid37BitWithFacility", 3), ("hidCorp1000", 4), ("mifareclassic4b", 5), ("mifareclassic7b", 6), ("mifaredesfire", 7), ("mifareplus", 8), ("iCLASS8b", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigCardFormat.setStatus('mandatory')
accessPXConfigFrontDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigFrontDoorLockControl.setStatus('mandatory')
accessPXConfigFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigFrontDoorMaxOpenTime.setStatus('mandatory')
accessPXStatusFrontDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorLock.setStatus('mandatory')
accessPXStatusFrontDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoor.setStatus('mandatory')
accessPXStatusFrontDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorHandle.setStatus('mandatory')
accessPXStatusFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorMaxOpenTime.setStatus('mandatory')
accessPXStatusFrontDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorAlarmStatus.setStatus('mandatory')
accessPXConfigRearDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigRearDoorLockControl.setStatus('mandatory')
accessPXConfigRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigRearDoorMaxOpenTime.setStatus('mandatory')
accessPXStatusRearDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorLock.setStatus('mandatory')
accessPXStatusRearDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoor.setStatus('mandatory')
accessPXStatusRearDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorHandle.setStatus('mandatory')
accessPXStatusRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorMaxOpenTime.setStatus('mandatory')
accessPXStatusRearDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorAlarmStatus.setStatus('mandatory')
accessPXConfigBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconName.setStatus('mandatory')
accessPXConfigBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconLocation.setStatus('mandatory')
accessPXConfigBeaconAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconAction.setStatus('mandatory')
accessPXStatusBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconName.setStatus('mandatory')
accessPXStatusBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconLocation.setStatus('mandatory')
accessPXStatusBeaconCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("notInstalled", 3), ("disconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconCurrentState.setStatus('mandatory')
apcLocalDisplayIdentDisplayType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDisplayFound", 1), ("powerviewRM", 2), ("powerviewWW", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentDisplayType.setStatus('mandatory')
apcLocalDisplayIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentModelNumber.setStatus('mandatory')
apcLocalDisplayIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentFirmwareRev.setStatus('mandatory')
apcLocalDisplayIdentOptions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentOptions.setStatus('mandatory')
apcLocalDisplayIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentDateOfManufacture.setStatus('mandatory')
apcLocalDisplayIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentSerialNumber.setStatus('mandatory')
apcLocalDisplayConfigAlarmBeeper = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("beeperDisabled", 1), ("beeperEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigAlarmBeeper.setStatus('mandatory')
apcLocalDisplayConfigBeeperVolume = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("beeperDisabled", 1), ("beeperLow", 2), ("beeperMedium", 3), ("beeperHigh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigBeeperVolume.setStatus('mandatory')
apcLocalDisplayConfigCheckLogIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("checklogNotPresent", 1), ("checklogDisabled", 2), ("checklogInformational", 3), ("checklogWarning", 4), ("checklogCritical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigCheckLogIndicator.setStatus('mandatory')
apcLocalDisplayConfigKeyClick = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keyclickDisabled", 1), ("keyclickEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigKeyClick.setStatus('mandatory')
apcLocalDisplayConfigContrast = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("contrast1", 1), ("contrast2", 2), ("contrast3", 3), ("contrast4", 4), ("contrast5", 5), ("contrast6", 6), ("contrast7", 7), ("contrast8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigContrast.setStatus('mandatory')
powerNetSoftwareSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareSystemDescription.setStatus('mandatory')
powerNetSoftwareOid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareOid.setStatus('mandatory')
powerNetSoftwareSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareSystemUpTime.setStatus('mandatory')
powerNetSoftwareTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareTableSize.setStatus('mandatory')
powerNetSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: powerNetSoftwareTable.setStatus('mandatory')
powerNetSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "moduleNumber"))
if mibBuilder.loadTexts: powerNetSoftwareEntry.setStatus('mandatory')
moduleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumber.setStatus('mandatory')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleName.setStatus('mandatory')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('mandatory')
moduleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDate.setStatus('mandatory')
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4), ("initializing", 5), ("starting", 6), ("disaster-recovery", 7), ("postoffice-inconsistent", 8), ("missing-jgroups", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStatus.setStatus('mandatory')
databaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("detached", 4), ("catching-up", 5), ("attaching", 6), ("running-master", 7), ("running-primary-slave", 8), ("running-slave", 9), ("running-alone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseStatus.setStatus('mandatory')
loadBalancerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadBalancerStatus.setStatus('mandatory')
essentialServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("time-sync-problems", 4), ("backup-problems", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: essentialServicesStatus.setStatus('mandatory')
etlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("failed", 3), ("paused", 4), ("stopped", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etlStatus.setStatus('mandatory')
pcnshostname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnshostname.setStatus('mandatory')
pcnsVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsVersion.setStatus('mandatory')
pcnsOS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsOS.setStatus('mandatory')
pcnsJavaVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsJavaVersion.setStatus('mandatory')
pcnsUIProtocol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsUIProtocol.setStatus('mandatory')
pcnsHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHttpPort.setStatus('mandatory')
pcnsHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHttpsPort.setStatus('mandatory')
pcnsNetworkConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNetworkConfig.setStatus('mandatory')
pcnsVirtualInstall = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("hyper-V", 2), ("vmWare", 3), ("nutanixAHV", 4), ("nutanixESXi", 5), ("simpliVity", 6), ("hyperFlex", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsVirtualInstall.setStatus('mandatory')
pcnsMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("redundant", 2), ("parallel", 3), ("advanced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMode.setStatus('mandatory')
pcnsNMCPort = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNMCPort.setStatus('mandatory')
pcnsNMCProtocol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNMCProtocol.setStatus('mandatory')
pcnsNmcTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 4), )
if mibBuilder.loadTexts: pcnsNmcTable.setStatus('mandatory')
pcnsNmcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "pcnsNmcIndex"))
if mibBuilder.loadTexts: pcnsNmcEntry.setStatus('mandatory')
pcnsNmcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNmcIndex.setStatus('mandatory')
pcnsNmcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNmcAddr.setStatus('mandatory')
pcnsNmcOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 3, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNmcOutlet.setStatus('mandatory')
pcnsPowerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1))
pcnsPowerFailedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsPowerFailedDesc.setStatus('mandatory')
pcnsPowerFailedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedEnableLogging.setStatus('mandatory')
pcnsPowerFailedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedEnableCommandFile.setStatus('mandatory')
pcnsPowerFailedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedCommandFilePath.setStatus('mandatory')
pcnsPowerFailedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedCommandFileDelay.setStatus('mandatory')
pcnsPowerFailedEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedEnableShutdown.setStatus('mandatory')
pcnsPowerFailedShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerFailedShutdownDelay.setStatus('mandatory')
pcnsPowerRestored = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2))
pcnsPowerRestoredDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsPowerRestoredDesc.setStatus('mandatory')
pcnsPowerRestoredEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerRestoredEnableLogging.setStatus('mandatory')
pcnsPowerRestoredEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerRestoredEnableCommandFile.setStatus('mandatory')
pcnsPowerRestoredCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerRestoredCommandFilePath.setStatus('mandatory')
pcnsPowerRestoredCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsPowerRestoredCommandFileDelay.setStatus('mandatory')
pcnsOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3))
pcnsOverloadDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsOverloadDesc.setStatus('mandatory')
pcnsOverloadEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadEnableLogging.setStatus('mandatory')
pcnsOverloadEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadEnableCommandFile.setStatus('mandatory')
pcnsOverloadCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadCommandFilePath.setStatus('mandatory')
pcnsOverloadCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadCommandFileDelay.setStatus('mandatory')
pcnsOverloadEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadEnableShutdown.setStatus('mandatory')
pcnsOverloadShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadShutdownDelay.setStatus('mandatory')
pcnsOverloadSolved = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4))
pcnsOverloadSolvedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsOverloadSolvedDesc.setStatus('mandatory')
pcnsOverloadSolvedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadSolvedEnableLogging.setStatus('mandatory')
pcnsOverloadSolvedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadSolvedEnableCommandFile.setStatus('mandatory')
pcnsOverloadSolvedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadSolvedCommandFilePath.setStatus('mandatory')
pcnsOverloadSolvedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsOverloadSolvedCommandFileDelay.setStatus('mandatory')
pcnsRunTimeExceeded = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5))
pcnsRunTimeExceededDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsRunTimeExceededDesc.setStatus('mandatory')
pcnsRunTimeExceededEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededEnableLogging.setStatus('mandatory')
pcnsRunTimeExceededEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededEnableCommandFile.setStatus('mandatory')
pcnsRunTimeExceededCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededCommandFilePath.setStatus('mandatory')
pcnsRunTimeExceededCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededCommandFileDelay.setStatus('mandatory')
pcnsRunTimeExceededEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededEnableShutdown.setStatus('mandatory')
pcnsRunTimeExceededShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeExceededShutdownDelay.setStatus('mandatory')
pcnsRunTimeWithinRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6))
pcnsRunTimeWithinRangeDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsRunTimeWithinRangeDesc.setStatus('mandatory')
pcnsRunTimeWithinRangeEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeWithinRangeEnableLogging.setStatus('mandatory')
pcnsRunTimeWithinRangeEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeWithinRangeEnableCommandFile.setStatus('mandatory')
pcnsRunTimeWithinRangeCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeWithinRangeCommandFilePath.setStatus('mandatory')
pcnsRunTimeWithinRangeCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeWithinRangeCommandFileDelay.setStatus('mandatory')
pcnsRunTimeBelowThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7))
pcnsRunTimeBelowThresholdDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdDesc.setStatus('mandatory')
pcnspcnsRunTimeBelowThresholdEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnspcnsRunTimeBelowThresholdEnableLogging.setStatus('mandatory')
pcnsRunTimeBelowThresholdEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdEnableCommandFile.setStatus('mandatory')
pcnsRunTimeBelowThresholdCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdCommandFilePath.setStatus('mandatory')
pcnsRunTimeBelowThresholdEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdEnableShutdown.setStatus('mandatory')
pcnsRunTimeBelowThresholdCommandFileThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdCommandFileThreshold.setStatus('mandatory')
pcnsRunTimeBelowThresholdShutdownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeBelowThresholdShutdownThreshold.setStatus('mandatory')
pcnsRunTimeAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8))
pcnsRunTimeAboveThresholdDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsRunTimeAboveThresholdDesc.setStatus('mandatory')
pcnsRunTimeAboveThresholdEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeAboveThresholdEnableLogging.setStatus('mandatory')
pcnsRunTimeAboveThresholdEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeAboveThresholdEnableCommandFile.setStatus('mandatory')
pcnsRunTimeAboveThresholdCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeAboveThresholdCommandFilePath.setStatus('mandatory')
pcnsRunTimeAboveThresholdCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRunTimeAboveThresholdCommandFileDelay.setStatus('mandatory')
pcnsBatteryDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10))
pcnsBatteryDischargedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBatteryDischargedDesc.setStatus('mandatory')
pcnsBatteryDischargedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedEnableLogging.setStatus('mandatory')
pcnsBatteryDischargedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedEnableCommandFile.setStatus('mandatory')
pcnsBatteryDischargedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedCommandFilePath.setStatus('mandatory')
pcnsBatteryDischargedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedCommandFileDelay.setStatus('mandatory')
pcnsBatteryDischargedEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedEnableShutdown.setStatus('mandatory')
pcnsBatteryDischargedShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryDischargedShutdownDelay.setStatus('mandatory')
pcnsBatteryChargeInRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11))
pcnsBatteryChargeInRangeDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBatteryChargeInRangeDesc.setStatus('mandatory')
pcnsBatteryChargeInRangeEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryChargeInRangeEnableLogging.setStatus('mandatory')
pcnsBatteryChargeInRangeEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryChargeInRangeEnableCommandFile.setStatus('mandatory')
pcnsBatteryChargeInRangeCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryChargeInRangeCommandFilePath.setStatus('mandatory')
pcnsBatteryChargeInRangeCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBatteryChargeInRangeCommandFileDelay.setStatus('mandatory')
pcnsFaultBypassEnabled = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12))
pcnsFaultBypassEnabledDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledDesc.setStatus('mandatory')
pcnsFaultBypassEnabledEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledEnableLogging.setStatus('mandatory')
pcnsFaultBypassEnabledEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledEnableCommandFile.setStatus('mandatory')
pcnsFaultBypassEnabledCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledCommandFilePath.setStatus('mandatory')
pcnsFaultBypassEnabledCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledCommandFileDelay.setStatus('mandatory')
pcnsFaultBypassEnabledEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledEnableShutdown.setStatus('mandatory')
pcnsFaultBypassEnabledShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsFaultBypassEnabledShutdownDelay.setStatus('mandatory')
pcnsBypassEnabled = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13))
pcnsBypassEnabledDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBypassEnabledDesc.setStatus('mandatory')
pcnsBypassEnabledEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledEnableLogging.setStatus('mandatory')
pcnsBypassEnabledEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledEnableCommandFile.setStatus('mandatory')
pcnsBypassEnabledCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledCommandFilePath.setStatus('mandatory')
pcnsBypassEnabledCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledCommandFileDelay.setStatus('mandatory')
pcnsBypassEnabledEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledEnableShutdown.setStatus('mandatory')
pcnsBypassEnabledShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassEnabledShutdownDelay.setStatus('mandatory')
pcnsBypassManualEnabled = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14))
pcnsBypassManualEnabledDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBypassManualEnabledDesc.setStatus('mandatory')
pcnsBypassManualEnabledEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledEnableLogging.setStatus('mandatory')
pcnsBypassManualEnabledEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledEnableCommandFile.setStatus('mandatory')
pcnsBypassManualEnabledCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledCommandFilePath.setStatus('mandatory')
pcnsBypassManualEnabledCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledCommandFileDelay.setStatus('mandatory')
pcnsBypassManualEnabledEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledEnableShutdown.setStatus('mandatory')
pcnsBypassManualEnabledShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassManualEnabledShutdownDelay.setStatus('mandatory')
pcnsBypassDisabled = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15))
pcnsBypassDisabledDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBypassDisabledDesc.setStatus('mandatory')
pcnsBypassDisabledEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassDisabledEnableLogging.setStatus('mandatory')
pcnsBypassDisabledEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassDisabledEnableCommandFile.setStatus('mandatory')
pcnsBypassDisabledCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassDisabledCommandFilePath.setStatus('mandatory')
pcnsBypassDisabledCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassDisabledCommandFileDelay.setStatus('mandatory')
pcnsBypassContactorFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16))
pcnsBypassContactorFailedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBypassContactorFailedDesc.setStatus('mandatory')
pcnsBypassContactorFailedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedEnableLogging.setStatus('mandatory')
pcnsBypassContactorFailedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedEnableCommandFile.setStatus('mandatory')
pcnsBypassContactorFailedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedCommandFilePath.setStatus('mandatory')
pcnsBypassContactorFailedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedCommandFileDelay.setStatus('mandatory')
pcnsBypassContactorFailedEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedEnableShutdown.setStatus('mandatory')
pcnsBypassContactorFailedShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 16, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorFailedShutdownDelay.setStatus('mandatory')
pcnsBypassContactorOk = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17))
pcnsBypassContactorOkDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsBypassContactorOkDesc.setStatus('mandatory')
pcnsBypassContactorOkEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorOkEnableLogging.setStatus('mandatory')
pcnsBypassContactorOkEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorOkEnableCommandFile.setStatus('mandatory')
pcnsBypassContactorOkCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorOkCommandFilePath.setStatus('mandatory')
pcnsBypassContactorOkCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 17, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsBypassContactorOkCommandFileDelay.setStatus('mandatory')
pcnsCommunicationLostOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18))
pcnsCommunicationLostOnBatteryDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryDesc.setStatus('mandatory')
pcnsCommunicationLostOnBatteryEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryEnableLogging.setStatus('mandatory')
pcnsCommunicationLostOnBatteryEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryEnableCommandFile.setStatus('mandatory')
pcnsCommunicationLostOnBatteryCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryCommandFilePath.setStatus('mandatory')
pcnsCommunicationLostOnBatteryCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryCommandFileDelay.setStatus('mandatory')
pcnsCommunicationLostOnBatteryEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryEnableShutdown.setStatus('mandatory')
pcnsCommunicationLostOnBatteryShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 18, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostOnBatteryShutdownDelay.setStatus('mandatory')
pcnsCommunicationLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19))
pcnsCommunicationLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsCommunicationLostDesc.setStatus('mandatory')
pcnsCommunicationLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostEnableLogging.setStatus('mandatory')
pcnsCommunicationLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostEnableCommandFile.setStatus('mandatory')
pcnsCommunicationLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostCommandFilePath.setStatus('mandatory')
pcnsCommunicationLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostCommandFileDelay.setStatus('mandatory')
pcnsCommunicationLostEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostEnableShutdown.setStatus('mandatory')
pcnsCommunicationLostShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 19, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationLostShutdownDelay.setStatus('mandatory')
pcnsNetCommunicationLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20))
pcnsNetCommunicationLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNetCommunicationLostDesc.setStatus('mandatory')
pcnsNetCommunicationLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostEnableLogging.setStatus('mandatory')
pcnsNetCommunicationLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostEnableCommandFile.setStatus('mandatory')
pcnsNetCommunicationLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostCommandFilePath.setStatus('mandatory')
pcnsNetCommunicationLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostCommandFileDelay.setStatus('mandatory')
pcnsNetCommunicationLostEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostEnableShutdown.setStatus('mandatory')
pcnsNetCommunicationLostShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsNetCommunicationLostShutdownDelay.setStatus('mandatory')
pcnsCommunicationEstablished = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21))
pcnsCommunicationEstablishedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsCommunicationEstablishedDesc.setStatus('mandatory')
pcnsCommunicationEstablishedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationEstablishedEnableLogging.setStatus('mandatory')
pcnsCommunicationEstablishedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationEstablishedEnableCommandFile.setStatus('mandatory')
pcnsCommunicationEstablishedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationEstablishedCommandFilePath.setStatus('mandatory')
pcnsCommunicationEstablishedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 21, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsCommunicationEstablishedCommandFileDelay.setStatus('mandatory')
pcnsMinRedundancyLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22))
pcnsMinRedundancyLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMinRedundancyLostDesc.setStatus('mandatory')
pcnsMinRedundancyLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostEnableLogging.setStatus('mandatory')
pcnsMinRedundancyLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostEnableCommandFile.setStatus('mandatory')
pcnsMinRedundancyLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostCommandFilePath.setStatus('mandatory')
pcnsMinRedundancyLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostCommandFileDelay.setStatus('mandatory')
pcnsMinRedundancyLostEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostEnableShutdown.setStatus('mandatory')
pcnsMinRedundancyLostShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 22, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyLostShutdownDelay.setStatus('mandatory')
pcnsMinRedundancyRegained = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23))
pcnsMinRedundancyRegainedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMinRedundancyRegainedDesc.setStatus('mandatory')
pcnsMinRedundancyRegainedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyRegainedEnableLogging.setStatus('mandatory')
pcnsMinRedundancyRegainedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyRegainedEnableCommandFile.setStatus('mandatory')
pcnsMinRedundancyRegainedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyRegainedCommandFilePath.setStatus('mandatory')
pcnsMinRedundancyRegainedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 23, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinRedundancyRegainedCommandFileDelay.setStatus('mandatory')
pcnsParallelRedundancyLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24))
pcnsParallelRedundancyLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostDesc.setStatus('mandatory')
pcnsParallelRedundancyLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostEnableLogging.setStatus('mandatory')
pcnsParallelRedundancyLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostEnableCommandFile.setStatus('mandatory')
pcnsParallelRedundancyLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostCommandFilePath.setStatus('mandatory')
pcnsParallelRedundancyLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostCommandFileDelay.setStatus('mandatory')
pcnsParallelRedundancyLostEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostEnableShutdown.setStatus('mandatory')
pcnsParallelRedundancyLostShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 24, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyLostShutdownDelay.setStatus('mandatory')
pcnsParallelRedundancyRegained = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25))
pcnsParallelRedundancyRegainedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsParallelRedundancyRegainedDesc.setStatus('mandatory')
pcnsParallelRedundancyRegainedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyRegainedEnableLogging.setStatus('mandatory')
pcnsParallelRedundancyRegainedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyRegainedEnableCommandFile.setStatus('mandatory')
pcnsParallelRedundancyRegainedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyRegainedCommandFilePath.setStatus('mandatory')
pcnsParallelRedundancyRegainedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 25, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsParallelRedundancyRegainedCommandFileDelay.setStatus('mandatory')
pcnsMaxInternalTempExceeded = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26))
pcnsMaxInternalTempExceededDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededDesc.setStatus('mandatory')
pcnsMaxInternalTempExceededEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededEnableLogging.setStatus('mandatory')
pcnsMaxInternalTempExceededEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededEnableCommandFile.setStatus('mandatory')
pcnsMaxInternalTempExceededCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededCommandFilePath.setStatus('mandatory')
pcnsMaxInternalTempExceededCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededCommandFileDelay.setStatus('mandatory')
pcnsMaxInternalTempExceededEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededEnableShutdown.setStatus('mandatory')
pcnsMaxInternalTempExceededShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 26, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempExceededShutdownDelay.setStatus('mandatory')
pcnsMaxInternalTempInRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27))
pcnsMaxInternalTempInRangeDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMaxInternalTempInRangeDesc.setStatus('mandatory')
pcnsMaxInternalTempInRangeEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempInRangeEnableLogging.setStatus('mandatory')
pcnsMaxInternalTempInRangeEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempInRangeEnableCommandFile.setStatus('mandatory')
pcnsMaxInternalTempInRangeCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempInRangeCommandFilePath.setStatus('mandatory')
pcnsMaxInternalTempInRangeCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 27, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMaxInternalTempInRangeCommandFileDelay.setStatus('mandatory')
pcnsMinLoadCapabilityLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28))
pcnsMinLoadCapabilityLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostDesc.setStatus('mandatory')
pcnsMinLoadCapabilityLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostEnableLogging.setStatus('mandatory')
pcnsMinLoadCapabilityLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostEnableCommandFile.setStatus('mandatory')
pcnsMinLoadCapabilityLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostCommandFilePath.setStatus('mandatory')
pcnsMinLoadCapabilityLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostCommandFileDelay.setStatus('mandatory')
pcnsMinLoadCapabilityLostEnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostEnableShutdown.setStatus('mandatory')
pcnsMinLoadCapabilityLostShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 28, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityLostShutdownDelay.setStatus('mandatory')
pcnsMinLoadCapabilityRegained = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29))
pcnsMinLoadCapabilityRegainedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityRegainedDesc.setStatus('mandatory')
pcnsMinLoadCapabilityRegainedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityRegainedEnableLogging.setStatus('mandatory')
pcnsMinLoadCapabilityRegainedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityRegainedEnableCommandFile.setStatus('mandatory')
pcnsMinLoadCapabilityRegainedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityRegainedCommandFilePath.setStatus('mandatory')
pcnsMinLoadCapabilityRegainedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsMinLoadCapabilityRegainedCommandFileDelay.setStatus('mandatory')
pcnsEnvironmentCommunicationEstablished = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30))
pcnsEnvironmentCommunicationEstablishedDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationEstablishedDesc.setStatus('mandatory')
pcnsEnvironmentCommunicationEstablishedEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationEstablishedEnableLogging.setStatus('mandatory')
pcnsEnvironmentCommunicationEstablishedEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationEstablishedEnableCommandFile.setStatus('mandatory')
pcnsEnvironmentCommunicationEstablishedCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationEstablishedCommandFilePath.setStatus('mandatory')
pcnsEnvironmentCommunicationEstablishedCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 30, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationEstablishedCommandFileDelay.setStatus('mandatory')
pcnsEnvironmentCommunicationLost = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31))
pcnsEnvironmentCommunicationLostDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationLostDesc.setStatus('mandatory')
pcnsEnvironmentCommunicationLostEnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationLostEnableLogging.setStatus('mandatory')
pcnsEnvironmentCommunicationLostEnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationLostEnableCommandFile.setStatus('mandatory')
pcnsEnvironmentCommunicationLostCommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationLostCommandFilePath.setStatus('mandatory')
pcnsEnvironmentCommunicationLostCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 31, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsEnvironmentCommunicationLostCommandFileDelay.setStatus('mandatory')
pcnsTempInRangeProbe1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32))
pcnsTempInRangeProbe1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsTempInRangeProbe1Desc.setStatus('mandatory')
pcnsTempInRangeProbe1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe1EnableLogging.setStatus('mandatory')
pcnsTempInRangeProbe1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe1EnableCommandFile.setStatus('mandatory')
pcnsTempInRangeProbe1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe1CommandFilePath.setStatus('mandatory')
pcnsTempInRangeProbe1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 32, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe1CommandFileDelay.setStatus('mandatory')
pcnsTempOutOfRangeProbe1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33))
pcnsTempOutOfRangeProbe1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1Desc.setStatus('mandatory')
pcnsTempOutOfRangeProbe1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1EnableLogging.setStatus('mandatory')
pcnsTempOutOfRangeProbe1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1EnableCommandFile.setStatus('mandatory')
pcnsTempOutOfRangeProbe1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1CommandFilePath.setStatus('mandatory')
pcnsTempOutOfRangeProbe1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1CommandFileDelay.setStatus('mandatory')
pcnsTempOutOfRangeProbe1EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1EnableShutdown.setStatus('mandatory')
pcnsTempOutOfRangeProbe1ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 33, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe1ShutdownDelay.setStatus('mandatory')
pcnsHumidityInRangeProbe1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34))
pcnsHumidityInRangeProbe1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe1Desc.setStatus('mandatory')
pcnsHumidityInRangeProbe1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe1EnableLogging.setStatus('mandatory')
pcnsHumidityInRangeProbe1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe1EnableCommandFile.setStatus('mandatory')
pcnsHumidityInRangeProbe1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe1CommandFilePath.setStatus('mandatory')
pcnsHumidityInRangeProbe1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 34, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe1CommandFileDelay.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35))
pcnsHumidityOutOfRangeProbe1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1Desc.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1EnableLogging.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1EnableCommandFile.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1CommandFilePath.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1CommandFileDelay.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1EnableShutdown.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe1ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 35, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe1ShutdownDelay.setStatus('mandatory')
pcnsTempInRangeProbe2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36))
pcnsTempInRangeProbe2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsTempInRangeProbe2Desc.setStatus('mandatory')
pcnsTempInRangeProbe2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe2EnableLogging.setStatus('mandatory')
pcnsTempInRangeProbe2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe2EnableCommandFile.setStatus('mandatory')
pcnsTempInRangeProbe2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe2CommandFilePath.setStatus('mandatory')
pcnsTempInRangeProbe2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 36, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempInRangeProbe2CommandFileDelay.setStatus('mandatory')
pcnsTempOutOfRangeProbe2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37))
pcnsTempOutOfRangeProbe2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2Desc.setStatus('mandatory')
pcnsTempOutOfRangeProbe2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2EnableLogging.setStatus('mandatory')
pcnsTempOutOfRangeProbe2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2EnableCommandFile.setStatus('mandatory')
pcnsTempOutOfRangeProbe2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2CommandFilePath.setStatus('mandatory')
pcnsTempOutOfRangeProbe2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2CommandFileDelay.setStatus('mandatory')
pcnsTempOutOfRangeProbe2EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2EnableShutdown.setStatus('mandatory')
pcnsTempOutOfRangeProbe2ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 37, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTempOutOfRangeProbe2ShutdownDelay.setStatus('mandatory')
pcnsHumidityInRangeProbe2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38))
pcnsHumidityInRangeProbe2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe2Desc.setStatus('mandatory')
pcnsHumidityInRangeProbe2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe2EnableLogging.setStatus('mandatory')
pcnsHumidityInRangeProbe2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe2EnableCommandFile.setStatus('mandatory')
pcnsHumidityInRangeProbe2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe2CommandFilePath.setStatus('mandatory')
pcnsHumidityInRangeProbe2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 38, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityInRangeProbe2CommandFileDelay.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39))
pcnsHumidityOutOfRangeProbe2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2Desc.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2EnableLogging.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2EnableCommandFile.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2CommandFilePath.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2CommandFileDelay.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2EnableShutdown.setStatus('mandatory')
pcnsHumidityOutOfRangeProbe2ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 39, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsHumidityOutOfRangeProbe2ShutdownDelay.setStatus('mandatory')
pcnsContactFault1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40))
pcnsContactFault1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactFault1Desc.setStatus('mandatory')
pcnsContactFault1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1EnableLogging.setStatus('mandatory')
pcnsContactFault1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1EnableCommandFile.setStatus('mandatory')
pcnsContactFault1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1CommandFilePath.setStatus('mandatory')
pcnsContactFault1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1CommandFileDelay.setStatus('mandatory')
pcnsContactFault1EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1EnableShutdown.setStatus('mandatory')
pcnsContactFault1ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 40, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault1ShutdownDelay.setStatus('mandatory')
pcnsContactFault2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41))
pcnsContactFault2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactFault2Desc.setStatus('mandatory')
pcnsContactFault2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2EnableLogging.setStatus('mandatory')
pcnsContactFault2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2EnableCommandFile.setStatus('mandatory')
pcnsContactFault2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2CommandFilePath.setStatus('mandatory')
pcnsContactFault2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2CommandFileDelay.setStatus('mandatory')
pcnsContactFault2EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2EnableShutdown.setStatus('mandatory')
pcnsContactFault2ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 41, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault2ShutdownDelay.setStatus('mandatory')
pcnsContactFault3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42))
pcnsContactFault3Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactFault3Desc.setStatus('mandatory')
pcnsContactFault3EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3EnableLogging.setStatus('mandatory')
pcnsContactFault3EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3EnableCommandFile.setStatus('mandatory')
pcnsContactFault3CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3CommandFilePath.setStatus('mandatory')
pcnsContactFault3CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3CommandFileDelay.setStatus('mandatory')
pcnsContactFault3EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3EnableShutdown.setStatus('mandatory')
pcnsContactFault3ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 42, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault3ShutdownDelay.setStatus('mandatory')
pcnsContactFault4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43))
pcnsContactFault4Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactFault4Desc.setStatus('mandatory')
pcnsContactFault4EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4EnableLogging.setStatus('mandatory')
pcnsContactFault4EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4EnableCommandFile.setStatus('mandatory')
pcnsContactFault4CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4CommandFilePath.setStatus('mandatory')
pcnsContactFault4CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4CommandFileDelay.setStatus('mandatory')
pcnsContactFault4EnableShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4EnableShutdown.setStatus('mandatory')
pcnsContactFault4ShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 43, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactFault4ShutdownDelay.setStatus('mandatory')
pcnsContactNormal1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44))
pcnsContactNormal1Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactNormal1Desc.setStatus('mandatory')
pcnsContactNormal1EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal1EnableLogging.setStatus('mandatory')
pcnsContactNormal1EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal1EnableCommandFile.setStatus('mandatory')
pcnsContactNormal1CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal1CommandFilePath.setStatus('mandatory')
pcnsContactNormal1CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 44, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal1CommandFileDelay.setStatus('mandatory')
pcnsContactNormal2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45))
pcnsContactNormal2Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactNormal2Desc.setStatus('mandatory')
pcnsContactNormal2EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal2EnableLogging.setStatus('mandatory')
pcnsContactNormal2EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal2EnableCommandFile.setStatus('mandatory')
pcnsContactNormal2CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal2CommandFilePath.setStatus('mandatory')
pcnsContactNormal2CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 45, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal2CommandFileDelay.setStatus('mandatory')
pcnsContactNormal3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46))
pcnsContactNormal3Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactNormal3Desc.setStatus('mandatory')
pcnsContactNormal3EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal3EnableLogging.setStatus('mandatory')
pcnsContactNormal3EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal3EnableCommandFile.setStatus('mandatory')
pcnsContactNormal3CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal3CommandFilePath.setStatus('mandatory')
pcnsContactNormal3CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 46, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal3CommandFileDelay.setStatus('mandatory')
pcnsContactNormal4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47))
pcnsContactNormal4Desc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsContactNormal4Desc.setStatus('mandatory')
pcnsContactNormal4EnableLogging = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal4EnableLogging.setStatus('mandatory')
pcnsContactNormal4EnableCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal4EnableCommandFile.setStatus('mandatory')
pcnsContactNormal4CommandFilePath = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal4CommandFilePath.setStatus('mandatory')
pcnsContactNormal4CommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 4, 47, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsContactNormal4CommandFileDelay.setStatus('mandatory')
pcnsShutdownCommandFileEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsShutdownCommandFileEnabled.setStatus('mandatory')
pcnsShutdownCommandFileDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsShutdownCommandFileDelay.setStatus('mandatory')
pcnsShutdownCommandFile = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsShutdownCommandFile.setStatus('mandatory')
pcnsShutdownCommandFileDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsShutdownCommandFileDuration.setStatus('mandatory')
pcnsTurnOffUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTurnOffUps.setStatus('mandatory')
pcnsTurnOffSOG = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsTurnOffSOG.setStatus('mandatory')
pcnsRuntimeRemainingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRuntimeRemainingThreshold.setStatus('mandatory')
pcnsRuntimeRemainingCmdFileThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsRuntimeRemainingCmdFileThreshold.setStatus('mandatory')
pcnsAdvancedShutdownTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9), )
if mibBuilder.loadTexts: pcnsAdvancedShutdownTable.setStatus('mandatory')
pcnsAdvancedShutdownEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "pcnsAdvancedGroupNo"))
if mibBuilder.loadTexts: pcnsAdvancedShutdownEntry.setStatus('mandatory')
pcnsAdvancedGroupNo = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsAdvancedGroupNo.setStatus('mandatory')
pcnsAdvancedGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedGroupName.setStatus('mandatory')
pcnsAdvancedGroupNMC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsAdvancedGroupNMC.setStatus('mandatory')
pcnsAdvancedShutdownUPSRequiredForLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownUPSRequiredForLoad.setStatus('mandatory')
pcnsAdvancedShutdownCommandFileEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownCommandFileEnabled.setStatus('mandatory')
pcnsAdvancedShutdownCommandFile = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownCommandFile.setStatus('mandatory')
pcnsAdvancedShutdownCommandFileDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownCommandFileDuration.setStatus('mandatory')
pcnsAdvancedShutdownPowerchuteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownPowerchuteServer.setStatus('mandatory')
pcnsAdvancedShutdownOnLostRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedShutdownOnLostRedundancy.setStatus('mandatory')
pcnsAdvancedTurnOffUps = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedTurnOffUps.setStatus('mandatory')
pcnsAdvancedTurnOffSOG = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 5, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcnsAdvancedTurnOffSOG.setStatus('mandatory')
pcnsCriticalFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsCriticalFlag.setStatus('mandatory')
pcnsCriticalCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsCriticalCause.setStatus('mandatory')
pcnsNetComsLostFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNetComsLostFlag.setStatus('mandatory')
pcnsNMCComsLostFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsNMCComsLostFlag.setStatus('mandatory')
pcnsUpdateAvailableFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsUpdateAvailableFlag.setStatus('mandatory')
pcnsUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 3, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcnsUpdateDesc.setStatus('mandatory')
pcbeHostname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeHostname.setStatus('mandatory')
pcbeVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeVersion.setStatus('mandatory')
pcbeOS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeOS.setStatus('mandatory')
pcbeJavaVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeJavaVersion.setStatus('mandatory')
pcbeUIProtocol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeUIProtocol.setStatus('mandatory')
pcbeHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeHttpPort.setStatus('mandatory')
pcbeHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeHttpsPort.setStatus('mandatory')
pcbeCriticalFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeCriticalFlag.setStatus('mandatory')
pcbeCriticalCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeCriticalCause.setStatus('mandatory')
pcbeComsLostFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeComsLostFlag.setStatus('mandatory')
pcbeUpdateAvailableFlag = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeUpdateAvailableFlag.setStatus('mandatory')
pcbeUpdateDesc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 4, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbeUpdateDesc.setStatus('mandatory')
upsBasicIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicIdentModel.setStatus('mandatory')
upsBasicIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicIdentName.setStatus('mandatory')
upsBasicIdentFamilyName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicIdentFamilyName.setStatus('mandatory')
upsBasicIdentModelType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicIdentModelType.setStatus('mandatory')
upsAdvIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentFirmwareRevision.setStatus('mandatory')
upsAdvIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentDateOfManufacture.setStatus('mandatory')
upsAdvIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentSerialNumber.setStatus('mandatory')
upsAdvIdentFirmwareRevision2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentFirmwareRevision2.setStatus('mandatory')
upsAdvIdentSkuNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentSkuNumber.setStatus('mandatory')
upsAdvIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentHardwareRevision.setStatus('mandatory')
upsAdvIdentUpsPhaseConfigType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("threePhaseInOut", 2), ("onePhaseInOut", 3), ("threePhaseInOneOut", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentUpsPhaseConfigType.setStatus('mandatory')
upsAdvEnergyStorageType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("vrlaOrWetCells", 2), ("niCdBatteries", 3), ("liIonBatteries", 4), ("noEnergyStorage", 5), ("flywheel", 6), ("ultracaps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvEnergyStorageType.setStatus('mandatory')
upsBasicBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryInFaultCondition", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicBatteryStatus.setStatus('mandatory')
upsBasicBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicBatteryTimeOnBattery.setStatus('mandatory')
upsBasicBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicBatteryLastReplaceDate.setStatus('mandatory')
upsAdvBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCapacity.setStatus('mandatory')
upsAdvBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryTemperature.setStatus('mandatory')
upsAdvBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryRunTimeRemaining.setStatus('mandatory')
upsAdvBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryReplaceIndicator.setStatus('mandatory')
upsAdvBatteryNumOfBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNumOfBattPacks.setStatus('mandatory')
upsAdvBatteryNumOfBadBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNumOfBadBattPacks.setStatus('mandatory')
upsAdvBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNominalVoltage.setStatus('mandatory')
upsAdvBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltage.setStatus('mandatory')
upsAdvBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrent.setStatus('mandatory')
upsAdvTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrent.setStatus('mandatory')
upsAdvBatteryFullCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFullCapacity.setStatus('mandatory')
upsAdvBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12), )
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageTable.setStatus('mandatory')
upsAdvBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryActualVoltageTableIndex"))
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageEntry.setStatus('mandatory')
upsAdvBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageTableIndex.setStatus('mandatory')
upsAdvBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltagePolarity.setStatus('mandatory')
upsAdvBatteryFrameActualVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFrameActualVoltage.setStatus('mandatory')
upsAdvTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13), )
if mibBuilder.loadTexts: upsAdvTotalDCCurrentTable.setStatus('mandatory')
upsAdvTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvTotalDCCurrentTableIndex"))
if mibBuilder.loadTexts: upsAdvTotalDCCurrentEntry.setStatus('mandatory')
upsAdvTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrentTableIndex.setStatus('mandatory')
upsAdvTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrentPolarity.setStatus('mandatory')
upsAdvTotalFrameDCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalFrameDCCurrent.setStatus('mandatory')
upsAdvBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14), )
if mibBuilder.loadTexts: upsAdvBatteryCurrentTable.setStatus('mandatory')
upsAdvBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsAdvBatteryCurrentIndex"))
if mibBuilder.loadTexts: upsAdvBatteryCurrentEntry.setStatus('mandatory')
upsAdvBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentTableIndex.setStatus('mandatory')
upsAdvBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentIndex.setStatus('mandatory')
upsAdvBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentPolarity.setStatus('mandatory')
upsAdvBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFrameCurrent.setStatus('mandatory')
upsAdvBatteryEstimatedChargeTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryEstimatedChargeTime.setStatus('mandatory')
upsAdvBatteryPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryPower.setStatus('mandatory')
upsAdvBatteryChargerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3), ("floatCharging", 4), ("boostCharging", 5), ("resting", 6), ("notCharging", 7), ("equalizationCharging", 8), ("testInProgress", 9), ("cyclicFloatCharging", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryChargerStatus.setStatus('mandatory')
upsAdvBatteryInternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryInternalSKU.setStatus('mandatory')
upsAdvBatteryExternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryExternalSKU.setStatus('mandatory')
upsAdvBatteryRecommendedReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryRecommendedReplaceDate.setStatus('mandatory')
upsAdvBatteryNominalBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNominalBackupTime.setStatus('mandatory')
upsAdvBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("weak", 3), ("poor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCondition.setStatus('mandatory')
upsAdvBatteryChargingCurrentRestricted = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryChargingCurrentRestricted.setStatus('mandatory')
upsAdvBatteryTotalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryTotalCapacity.setStatus('mandatory')
upsAdvBatteryFuseStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fuseOpen", 1), ("fuseOk", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFuseStatus.setStatus('mandatory')
upsAdvBatteryBreakerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disconnected", 1), ("closed", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryBreakerStatus.setStatus('mandatory')
upsAdvBatteryWiringConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWire", 1), ("threeWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryWiringConfiguration.setStatus('mandatory')
upsHighPrecBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCapacity.setStatus('mandatory')
upsHighPrecBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryTemperature.setStatus('mandatory')
upsHighPrecBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryNominalVoltage.setStatus('mandatory')
upsHighPrecBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltage.setStatus('mandatory')
upsHighPrecBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrent.setStatus('mandatory')
upsHighPrecTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrent.setStatus('mandatory')
upsHighPrecBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7), )
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageTable.setStatus('mandatory')
upsHighPrecBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryActualVoltageTableIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageEntry.setStatus('mandatory')
upsHighPrecBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageTableIndex.setStatus('mandatory')
upsHighPrecBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltagePolarity.setStatus('mandatory')
upsHighPrecBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryVoltage.setStatus('mandatory')
upsHighPrecTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8), )
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentTable.setStatus('mandatory')
upsHighPrecTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecTotalDCCurrentTableIndex"))
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentEntry.setStatus('mandatory')
upsHighPrecTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentTableIndex.setStatus('mandatory')
upsHighPrecTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentPolarity.setStatus('mandatory')
upsHighPrecTotalDCFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCFrameCurrent.setStatus('mandatory')
upsHighPrecBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9), )
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentTable.setStatus('mandatory')
upsHighPrecBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCurrentIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentEntry.setStatus('mandatory')
upsHighPrecBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentTableIndex.setStatus('mandatory')
upsHighPrecBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentIndex.setStatus('mandatory')
upsHighPrecBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentPolarity.setStatus('mandatory')
upsHighPrecBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryFrameCurrent.setStatus('mandatory')
upsHighPrecBatteryPacks = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10))
upsHighPrecBatteryPackTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackTableSize.setStatus('mandatory')
upsHighPrecBatteryPackTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2), )
if mibBuilder.loadTexts: upsHighPrecBatteryPackTable.setStatus('mandatory')
upsHighPrecBatteryPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryPackIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCartridgeIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryPackEntry.setStatus('mandatory')
upsHighPrecBatteryPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackIndex.setStatus('mandatory')
upsHighPrecBatteryCartridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCartridgeIndex.setStatus('mandatory')
upsHighPrecBatteryPackFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackFirmwareRevision.setStatus('mandatory')
upsHighPrecBatteryPackSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackSerialNumber.setStatus('mandatory')
upsHighPrecBatteryPackTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackTemperature.setStatus('mandatory')
upsHighPrecBatteryPackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackStatus.setStatus('mandatory')
upsHighPrecBatteryPackCartridgeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeHealth.setStatus('mandatory')
upsHighPrecBatteryPackCartridgeReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeReplaceDate.setStatus('mandatory')
upsHighPrecBatteryPackCartridgeInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeInstallDate.setStatus('mandatory')
upsHighPrecBatteryPackCartridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeStatus.setStatus('mandatory')
upsHighPrecBatteryPackOnlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyTableSize.setStatus('mandatory')
upsHighPrecBatteryPackOnlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4), )
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyTable.setStatus('mandatory')
upsHighPrecBatteryPackOnlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryPackOnlyIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyEntry.setStatus('mandatory')
upsHighPrecBatteryPackOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyIndex.setStatus('mandatory')
upsHighPrecBatteryPackOnlyFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyFirmwareRevision.setStatus('mandatory')
upsHighPrecBatteryPackOnlySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlySerialNumber.setStatus('mandatory')
upsHighPrecBatteryPackOnlyTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyTemperature.setStatus('mandatory')
upsHighPrecBatteryPackOnlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyStatus.setStatus('mandatory')
upsHighPrecBatteryPackOnlyHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyHealth.setStatus('mandatory')
upsHighPrecBatteryPackOnlyReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyReplaceDate.setStatus('mandatory')
upsHighPrecBatteryPackOnlyInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsHighPrecBatteryPackOnlyInstallDate.setStatus('mandatory')
upsHighPrecBatteryHealth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryHealth.setStatus('mandatory')
upsHighPrecActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecActivePower.setStatus('mandatory')
upsHighPrecExtdBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecExtdBatteryTemperature.setStatus('mandatory')
upsBatteryNumberOfCabinets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryNumberOfCabinets.setStatus('mandatory')
upsBatteryCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5), )
if mibBuilder.loadTexts: upsBatteryCabinetTable.setStatus('optional')
upsBatteryCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "upsBatteryCabinetIndex"))
if mibBuilder.loadTexts: upsBatteryCabinetEntry.setStatus('optional')
upsBatteryCabinetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetIndex.setStatus('optional')
upsBatteryCabinetLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetLocalIndex.setStatus('optional')
upsBatteryCabinetWiringConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWire", 1), ("threeWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetWiringConfiguration.setStatus('optional')
upsBatteryCabinetVoltagePolarity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetVoltagePolarity1.setStatus('optional')
upsBatteryCabinetVoltagePolarity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetVoltagePolarity2.setStatus('optional')
upsBatteryCabinetCurrentPolarity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetCurrentPolarity1.setStatus('optional')
upsBatteryCabinetCurrentPolarity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetCurrentPolarity2.setStatus('optional')
upsBatteryCabinetTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetTemperature.setStatus('optional')
upsBatteryCabinetMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetMaxTemperature.setStatus('optional')
upsBatteryCabinetMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetMinTemperature.setStatus('optional')
upsBatteryCabinetAverageTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetAverageTemperature.setStatus('optional')
upsBatteryCabinetFuse = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fuseOpen", 1), ("fuseOk", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetFuse.setStatus('optional')
upsBatteryCabinetBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noBreaker", 1), ("unknown", 2), ("breakerOpen", 3), ("breakerClosed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetBreaker.setStatus('optional')
upsBatteryCabinetNumberOfStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetNumberOfStrings.setStatus('optional')
upsBatteryCabinetNumberOfVerticalPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetNumberOfVerticalPositions.setStatus('optional')
upsBatteryCabinetNumberOfHorizontalPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabinetNumberOfHorizontalPositions.setStatus('optional')
upsBatteryCabStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6), )
if mibBuilder.loadTexts: upsBatteryCabStringTable.setStatus('optional')
upsBatteryCabStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "upsBatteryCabStringIndex"))
if mibBuilder.loadTexts: upsBatteryCabStringEntry.setStatus('optional')
upsBatteryCabStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringIndex.setStatus('optional')
upsBatteryCabStringCabReference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringCabReference.setStatus('optional')
upsBatteryCabStringLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringLocalIndex.setStatus('optional')
upsBatteryCabStringCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringCurrent.setStatus('optional')
upsBatteryCabStringAverageTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringAverageTemperature.setStatus('optional')
upsBatteryCabStringMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringMaxTemperature.setStatus('optional')
upsBatteryCabStringMinTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringMinTemperature.setStatus('optional')
upsBatteryCabStringFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fuseOpen", 1), ("fuseOk", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringFuseStatus.setStatus('optional')
upsBatteryCabStringNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabStringNumberOfBlocks.setStatus('optional')
upsBatteryCabBlockTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7), )
if mibBuilder.loadTexts: upsBatteryCabBlockTable.setStatus('optional')
upsBatteryCabBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "upsBatteryCabBlockIndex"))
if mibBuilder.loadTexts: upsBatteryCabBlockEntry.setStatus('optional')
upsBatteryCabBlockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockIndex.setStatus('optional')
upsBatteryCabBlockStringReference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockStringReference.setStatus('optional')
upsBatteryCabBlockLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockLocalIndex.setStatus('optional')
upsBatteryCabBlockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockPresent.setStatus('optional')
upsBatteryCabBlockType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockType.setStatus('optional')
upsBatteryCabBlockTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockTemperature.setStatus('optional')
upsBatteryCabBlockFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fuseOpen", 1), ("fuseOk", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockFuseStatus.setStatus('optional')
upsBatteryCabBlockVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockVoltage.setStatus('optional')
upsBatteryCabBlockNumberOfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockNumberOfCells.setStatus('optional')
upsBatteryCabBlockVerticalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockVerticalPosition.setStatus('optional')
upsBatteryCabBlockHorizontalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockHorizontalPosition.setStatus('optional')
upsBatteryCabBlockCellTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8), )
if mibBuilder.loadTexts: upsBatteryCabBlockCellTable.setStatus('optional')
upsBatteryCabBlockCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsBatteryCabBlockCellIndex"))
if mibBuilder.loadTexts: upsBatteryCabBlockCellEntry.setStatus('optional')
upsBatteryCabBlockCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockCellIndex.setStatus('optional')
upsBatteryCabBlockCellReference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockCellReference.setStatus('optional')
upsBatteryCabBlockCellLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockCellLocalIndex.setStatus('optional')
upsBatteryCabBlockCellVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockCellVoltage.setStatus('optional')
upsBatteryCabBlockCellTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCabBlockCellTemperature.setStatus('optional')
upsBasicInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicInputPhase.setStatus('mandatory')
upsAdvInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputLineVoltage.setStatus('mandatory')
upsAdvInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputMaxLineVoltage.setStatus('mandatory')
upsAdvInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputMinLineVoltage.setStatus('mandatory')
upsAdvInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputFrequency.setStatus('mandatory')
upsAdvInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("blackout", 4), ("smallMomentarySag", 5), ("deepMomentarySag", 6), ("smallMomentarySpike", 7), ("largeMomentarySpike", 8), ("selfTest", 9), ("rateOfVoltageChange", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputLineFailCause.setStatus('mandatory')
upsAdvInputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputNominalFrequency.setStatus('mandatory')
upsAdvInputNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputNominalVoltage.setStatus('mandatory')
upsAdvInputBypassNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassNominalFrequency.setStatus('mandatory')
upsAdvInputBypassNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassNominalVoltage.setStatus('mandatory')
upsAdvInputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10), )
if mibBuilder.loadTexts: upsAdvInputStatisticsTable.setStatus('mandatory')
upsAdvInputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvInputStatisticsIndex"))
if mibBuilder.loadTexts: upsAdvInputStatisticsEntry.setStatus('mandatory')
upsAdvInputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputStatisticsIndex.setStatus('mandatory')
upsAdvInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputApparentPower.setStatus('mandatory')
upsAdvInputVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputVoltageTHD.setStatus('mandatory')
upsAdvInputBypassVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassVoltageTHD.setStatus('mandatory')
upsAdvInputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputPeakCurrent.setStatus('mandatory')
upsAdvInputBypassPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassPeakCurrent.setStatus('mandatory')
upsAdvInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputActivePower.setStatus('mandatory')
upsAdvInputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputTotalApparentPower.setStatus('mandatory')
upsAdvInputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputTotalActivePower.setStatus('mandatory')
upsAdvInputBypassTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassTotalApparentPower.setStatus('mandatory')
upsAdvInputBypassTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassTotalActivePower.setStatus('mandatory')
upsAdvInputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputEnergyUsage.setStatus('mandatory')
upsAdvInputDCVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputDCVoltage.setStatus('mandatory')
upsAdvInputDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputDCCurrent.setStatus('mandatory')
upsHighPrecInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputLineVoltage.setStatus('mandatory')
upsHighPrecInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputMaxLineVoltage.setStatus('mandatory')
upsHighPrecInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputMinLineVoltage.setStatus('mandatory')
upsHighPrecInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputFrequency.setStatus('mandatory')
upsHighPrecInputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputEnergyUsage.setStatus('mandatory')
upsHighPrecInputBypassVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputBypassVoltage.setStatus('mandatory')
upsHighPrecInputBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputBypassFrequency.setStatus('mandatory')
upsBasicOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("hotStandby", 14), ("onBatteryTest", 15), ("emergencyStaticBypass", 16), ("staticBypassStandby", 17), ("powerSavingMode", 18), ("spotMode", 19), ("eConversion", 20), ("chargerSpotmode", 21), ("inverterSpotmode", 22), ("activeLoad", 23), ("batteryDischargeSpotmode", 24), ("inverterStandby", 25), ("chargerOnly", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputStatus.setStatus('mandatory')
upsBasicOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputPhase.setStatus('mandatory')
upsBasicSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("inverter", 14), ("eConversion", 15), ("staticBypassStandby", 16), ("efficiencyBoosterMode", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemStatus.setStatus('mandatory')
upsBasicSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemInternalTemperature.setStatus('mandatory')
upsBasicSystemInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemInverterStatus.setStatus('mandatory')
upsBasicSystemPFCStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemPFCStatus.setStatus('mandatory')
upsBasicOutputACwiringConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("noNeutralWiredonSystem", 2), ("neutralUsedforSupplyingLoad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputACwiringConfiguration.setStatus('mandatory')
upsAdvOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputVoltage.setStatus('mandatory')
upsAdvOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputFrequency.setStatus('mandatory')
upsAdvOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputLoad.setStatus('mandatory')
upsAdvOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCurrent.setStatus('mandatory')
upsAdvOutputRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputRedundancy.setStatus('mandatory')
upsAdvOutputKVACapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputKVACapacity.setStatus('mandatory')
upsAdvOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputNominalFrequency.setStatus('mandatory')
upsAdvOutputActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputActivePower.setStatus('mandatory')
upsAdvOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputApparentPower.setStatus('mandatory')
upsAdvOutputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10), )
if mibBuilder.loadTexts: upsAdvOutputStatisticsTable.setStatus('mandatory')
upsAdvOutputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsAdvOutputStatisticsIndex"))
if mibBuilder.loadTexts: upsAdvOutputStatisticsEntry.setStatus('mandatory')
upsAdvOutputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputStatisticsIndex.setStatus('mandatory')
upsAdvOutputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputPeakCurrent.setStatus('mandatory')
upsAdvOutputCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCurrentTHD.setStatus('mandatory')
upsAdvOutputCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCrestFactor.setStatus('mandatory')
upsAdvOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputNeutralCurrent.setStatus('mandatory')
upsAdvOutputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputEnergyUsage.setStatus('mandatory')
upsAdvOutputSourceSynchronization = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputSourceSynchronization.setStatus('mandatory')
upsAdvOutputInverterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputInverterFrequency.setStatus('mandatory')
upsHighPrecOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputVoltage.setStatus('mandatory')
upsHighPrecOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputFrequency.setStatus('mandatory')
upsHighPrecOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputLoad.setStatus('mandatory')
upsHighPrecOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputCurrent.setStatus('mandatory')
upsHighPrecOutputEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputEfficiency.setStatus('mandatory')
upsHighPrecOutputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputEnergyUsage.setStatus('mandatory')
upsBasicConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicConfigNumDevices.setStatus('mandatory')
upsBasicConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: upsBasicConfigDeviceTable.setStatus('mandatory')
upsBasicConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "deviceIndex"))
if mibBuilder.loadTexts: upsBasicConfigDeviceEntry.setStatus('mandatory')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRating.setStatus('mandatory')
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisDevice.setStatus('mandatory')
upsAdvConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigRatedOutputVoltage.setStatus('mandatory')
upsAdvConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigHighTransferVolt.setStatus('mandatory')
upsAdvConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowTransferVolt.setStatus('mandatory')
upsAdvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timed", 1), ("atLowBattery", 2), ("never", 3), ("mute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarm.setStatus('mandatory')
upsAdvConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmTimer.setStatus('mandatory')
upsAdvConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMinReturnCapacity.setStatus('mandatory')
upsAdvConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSensitivity.setStatus('mandatory')
upsAdvConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowBatteryRunTime.setStatus('mandatory')
upsAdvConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigReturnDelay.setStatus('mandatory')
upsAdvConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigShutoffDelay.setStatus('mandatory')
upsAdvConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpsSleepTime.setStatus('mandatory')
upsAdvConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSetEEPROMDefaults.setStatus('mandatory')
upsAdvConfigDipSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13), )
if mibBuilder.loadTexts: upsAdvConfigDipSwitchTable.setStatus('mandatory')
upsAdvConfigDipSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1), ).setIndexNames((0, "PowerNet-MIB", "dipSwitchIndex"))
if mibBuilder.loadTexts: upsAdvConfigDipSwitchEntry.setStatus('mandatory')
dipSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchIndex.setStatus('mandatory')
dipSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchStatus.setStatus('mandatory')
upsAdvConfigBattExhaustThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBattExhaustThresh.setStatus('mandatory')
upsAdvConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigPassword.setStatus('mandatory')
upsAdvConfigAllowedSetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16), )
if mibBuilder.loadTexts: upsAdvConfigAllowedSetTable.setStatus('mandatory')
upsAdvConfigAllowedSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "apcUpsConfigFieldIndex"))
if mibBuilder.loadTexts: upsAdvConfigAllowedSetEntry.setStatus('mandatory')
apcUpsConfigFieldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldIndex.setStatus('mandatory')
apcUpsConfigFieldOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldOID.setStatus('mandatory')
apcUpsConfigFieldValueRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldValueRange.setStatus('mandatory')
upsAdvConfigBattCabAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBattCabAmpHour.setStatus('mandatory')
upsAdvConfigPositionSelector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("rack", 2), ("tower", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigPositionSelector.setStatus('mandatory')
upsAdvConfigOutputFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("unknown", 1), ("freqRangeAUTO", 2), ("freqRange60Var1", 3), ("freqRange60Var3", 4), ("freqRange50Var1", 5), ("freqRange50Var3", 6), ("freqRange60Var10", 7), ("freqRange50Var10", 8), ("freqRange60Var1dot0", 9), ("freqRange50Var1dot0", 10), ("freqRange50Pct0dot5", 11), ("freqRange50Pct1", 12), ("freqRange50Pct2", 13), ("freqRange50Pct4", 14), ("freqRange50Pct6", 15), ("freqRange50Pct8", 16), ("freqRange60Pct0dot5", 17), ("freqRange60Pct1", 18), ("freqRange60Pct2", 19), ("freqRange60Pct4", 20), ("freqRange60Pct6", 21), ("freqRange60Pct8", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutputFreqRange.setStatus('mandatory')
upsAdvConfigUPSFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("gotoBypass", 2), ("dropLoad", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUPSFail.setStatus('mandatory')
upsAdvConfigAlarmRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmRedundancy.setStatus('mandatory')
upsAdvConfigAlarmLoadOver = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmLoadOver.setStatus('mandatory')
upsAdvConfigAlarmRuntimeUnder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmRuntimeUnder.setStatus('mandatory')
upsAdvConfigVoutReporting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("voutAUTO", 2), ("vout208", 3), ("vout240", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigVoutReporting.setStatus('mandatory')
upsAdvConfigNumExternalBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigNumExternalBatteries.setStatus('mandatory')
upsAdvConfigSimpleSignalShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSimpleSignalShutdowns.setStatus('mandatory')
upsAdvConfigMaxShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMaxShutdownTime.setStatus('mandatory')
upsAsiUpsControlServerRequestShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serverShutdownOff", 1), ("serverShutdownReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAsiUpsControlServerRequestShutdown.setStatus('mandatory')
upsAdvConfigMinReturnRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 29), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMinReturnRuntime.setStatus('mandatory')
upsAdvConfigBasicSignalLowBatteryDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 30), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBasicSignalLowBatteryDuration.setStatus('mandatory')
upsAdvConfigBypassPhaseLockRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBypassPhaseLockRequired.setStatus('mandatory')
upsAdvConfigOutputFreqSlewRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("slewRateQuarterHzPerSec", 2), ("slewRateHalfHzPerSec", 3), ("slewRate1HzPerSec", 4), ("slewRate2HzPerSec", 5), ("slewRate4HzPerSec", 6), ("slewRate6HzPerSec", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutputFreqSlewRate.setStatus('mandatory')
upsAdvConfigChargerLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("low", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigChargerLevel.setStatus('mandatory')
upsAdvConfigBypassToleranceSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("wide", 2), ("medium", 3), ("narrow", 4), ("custom", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBypassToleranceSetting.setStatus('mandatory')
upsAdvConfigMainsSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleInput", 1), ("dualInput", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvConfigMainsSetting.setStatus('mandatory')
upsAdvConfigACWiringSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2), ("fourWireHRG", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvConfigACWiringSetting.setStatus('mandatory')
upsAdvConfigUpperOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpperOutputVoltTolerance.setStatus('mandatory')
upsAdvConfigLowerOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowerOutputVoltTolerance.setStatus('mandatory')
upsAdvConfigUpperBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpperBypassVoltTolerance.setStatus('mandatory')
upsAdvConfigLowerBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowerBypassVoltTolerance.setStatus('mandatory')
upsAdvConfigOutofSyncBypassTransferDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutofSyncBypassTransferDelay.setStatus('mandatory')
upsAdvConfigWarningAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigWarningAlarmDelay.setStatus('mandatory')
upsAdvConfigInformationalAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigInformationalAlarmDelay.setStatus('mandatory')
upsAdvConfigGreenMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigGreenMode.setStatus('mandatory')
upsAdvConfigLCDLocalLanguage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("english", 1), ("french", 2), ("italian", 3), ("german", 4), ("spanish", 5), ("portuguese", 6), ("japanese", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLCDLocalLanguage.setStatus('mandatory')
upsAdvConfigLCDLockOut = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLCDLockOut.setStatus('mandatory')
upsAdvConfigChargerRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigChargerRate.setStatus('mandatory')
upsAdvConfigBatterySelection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vrla", 1), ("ventedcell", 2), ("nicd", 3), ("li-ion", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatterySelection.setStatus('mandatory')
upsAdvConfigBatteryHealthAlarmWarningTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryHealthAlarmWarningTime.setStatus('mandatory')
upsAdvConfigBatteryHealthAlarmSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryHealthAlarmSleepTime.setStatus('mandatory')
upsAdvConfigSignalFlashVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSignalFlashVoltage.setStatus('mandatory')
upsAdvConfigBatteryTemperatureCompensation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryTemperatureCompensation.setStatus('mandatory')
upsAdvConfigBatteryChargerType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryChargerType.setStatus('mandatory')
upsAdvConfigAutomaticRestart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAutomaticRestart.setStatus('mandatory')
upsAdvConfigDeepDischargeProtection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigDeepDischargeProtection.setStatus('mandatory')
upsAdvConfigFreqBypassTransferRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigFreqBypassTransferRange.setStatus('mandatory')
upsAdvConfigUpsPowerconverterType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpsPowerconverterType.setStatus('mandatory')
upsAdvConfigFrequencyConverterMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoRanging", 1), ("frequencyConverter", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigFrequencyConverterMode.setStatus('mandatory')
upsAdvConfigACQualificationTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigACQualificationTime.setStatus('mandatory')
upsSCGMembershipGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGMembershipGroupNumber.setStatus('mandatory')
upsSCGActiveMembershipStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledSCG", 1), ("disabledSCG", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGActiveMembershipStatus.setStatus('mandatory')
upsSCGPowerSynchronizationDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGPowerSynchronizationDelayTime.setStatus('mandatory')
upsSCGReturnBatteryCapacityOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGReturnBatteryCapacityOffset.setStatus('mandatory')
upsSCGMultiCastIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGMultiCastIP.setStatus('mandatory')
upsSCGNumOfGroupMembers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGNumOfGroupMembers.setStatus('mandatory')
upsSCGStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2), )
if mibBuilder.loadTexts: upsSCGStatusTable.setStatus('mandatory')
upsSCGStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsSCGStatusTableIndex"))
if mibBuilder.loadTexts: upsSCGStatusEntry.setStatus('mandatory')
upsSCGStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGStatusTableIndex.setStatus('mandatory')
upsSCGMemberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGMemberIP.setStatus('mandatory')
upsSCGACInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acInGood", 1), ("acInBad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGACInputStatus.setStatus('mandatory')
upsSCGACOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acOutOn", 1), ("acOutOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGACOutputStatus.setStatus('mandatory')
upsBasicStateOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicStateOutputState.setStatus('mandatory')
upsBasicStateAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAlarms", 1), ("infoAlarm", 2), ("warningAlarm", 3), ("criticalAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicStateAlarmStatus.setStatus('mandatory')
upsAdvStateAbnormalConditions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateAbnormalConditions.setStatus('mandatory')
upsAdvStateSymmetra3PhaseSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSymmetra3PhaseSpecificFaults.setStatus('mandatory')
upsAdvStateDP300ESpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateDP300ESpecificFaults.setStatus('mandatory')
upsAdvStateSymmetraSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSymmetraSpecificFaults.setStatus('mandatory')
upsAdvStateSmartUPSSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSmartUPSSpecificFaults.setStatus('mandatory')
upsAdvStateSystemMessages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSystemMessages.setStatus('mandatory')
upsAdvStateTotaltimeonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonbattery.setStatus('mandatory')
upsAdvStateTotaltimeonbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonbypass.setStatus('mandatory')
upsAdvStateTotaltimeonNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonNormal.setStatus('mandatory')
upsAdvStateNumberoftimesonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesonbattery.setStatus('mandatory')
upsAdvStateNumberoftimesbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesbypass.setStatus('mandatory')
upsAdvStateNumberoftimesNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesNormal.setStatus('mandatory')
upsAdvStateEcomode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOnEcoMode", 1), ("upsNotOnEcoMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateEcomode.setStatus('mandatory')
upsAdvStateLifeCycleManagement = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateLifeCycleManagement.setStatus('mandatory')
upsBasicControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnOffUpsToConserveBattery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicControlConserveBattery.setStatus('mandatory')
upsAdvControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2), ("turnUpsOffGracefully", 3), ("turnUpsSyncGroupOff", 4), ("turnUpsSyncGroupOffAfterDelay", 5), ("turnUpsSyncGroupOffGracefully", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlUpsOff.setStatus('mandatory')
upsAdvControlRebootShutdownUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noRebootShutdownUps", 1), ("rebootShutdownUps", 2), ("rebootShutdownUpsGracefully", 3), ("rebootShutdownSyncGroupUps", 4), ("rebootShutdownSyncGroupUpsGracefully", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlRebootShutdownUps.setStatus('mandatory')
upsAdvControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2), ("putUpsToSleepGracefully", 3), ("putUpsSyncGroupToSleep", 4), ("putUpsSyncGroupToSleepGracefully", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlUpsSleep.setStatus('mandatory')
upsAdvControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlSimulatePowerFail.setStatus('mandatory')
upsAdvControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2), ("flashAndBeepSyncGroup", 3), ("flashAndBeepCont", 4), ("flashAndBeepCancel", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlFlashAndBeep.setStatus('mandatory')
upsAdvControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTurnOnUPS", 1), ("turnOnUPS", 2), ("turnOnUPSSyncGroup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlTurnOnUPS.setStatus('mandatory')
upsAdvControlBypassSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noBypassSwitch", 1), ("switchToBypass", 2), ("switchOutOfBypass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlBypassSwitch.setStatus('mandatory')
upsAdvControlRebootUpsWithOrWithoutAC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRebootUpsWithOrWithoutAC", 1), ("rebootUpsImmediatelyWithOrWithoutAC", 2), ("rebootUpsDelayedWithOrWithoutAC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlRebootUpsWithOrWithoutAC.setStatus('mandatory')
upsAdvControlFirmwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noFirmwareUpdate", 1), ("firmwareUpdate", 2), ("updateInProcess", 3), ("updateSuccessful", 4), ("updateFailed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlFirmwareUpdate.setStatus('mandatory')
upsAdvTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("atTurnOn", 4), ("never", 5), ("fourWeeks", 6), ("twelveWeeks", 7), ("biweeklySinceLastTest", 8), ("weeklySinceLastTest", 9), ("eightWeeks", 10), ("twentysixWeeks", 11), ("fiftytwoWeeks", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticSchedule.setStatus('mandatory')
upsAdvTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnostics.setStatus('mandatory')
upsAdvTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestDiagnosticsResults.setStatus('mandatory')
upsAdvTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestLastDiagnosticsDate.setStatus('mandatory')
upsAdvTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPerformCalibration", 1), ("performCalibration", 2), ("cancelCurrentCalibration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestRuntimeCalibration.setStatus('mandatory')
upsAdvTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 1), ("invalidCalibration", 2), ("calibrationInProgress", 3), ("refused", 4), ("aborted", 5), ("pending", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestCalibrationResults.setStatus('mandatory')
upsAdvTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestCalibrationDate.setStatus('mandatory')
upsAdvTestDiagnosticTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticTime.setStatus('mandatory')
upsAdvTestDiagnosticDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticDay.setStatus('mandatory')
upsAdvTestBatteryInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestBatteryInterval.setStatus('mandatory')
upsAdvTestCalibrationLastSuccessfulDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestCalibrationLastSuccessfulDate.setStatus('mandatory')
upsAdvTestBatteryLastSuccessfulDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestBatteryLastSuccessfulDate.setStatus('mandatory')
upsAdvTestBatteryLastDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestBatteryLastDate.setStatus('optional')
upsAdvTestBatteryProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 1), ("preconditionNotMeet", 2), ("batteryTestInProgress", 3), ("refused", 4), ("aborted", 5), ("pending", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestBatteryProcessStatus.setStatus('mandatory')
upsAdvTestBatteryConditionStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryOK", 2), ("batteryCapacityDecreased", 3), ("batteryDefect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestBatteryConditionStatus.setStatus('mandatory')
upsAdvTestDiagnosticsBatteryInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("never", 1), ("weekly", 2), ("biweekly", 3), ("every4weeks", 4), ("every8weeks", 5), ("every12weeks", 6), ("every26weeks", 7), ("every52weeks", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestDiagnosticsBatteryInterval.setStatus('mandatory')
upsCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsCommStatus.setStatus('mandatory')
upsOutputRelayStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayStatusTableSize.setStatus('mandatory')
upsOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 2), )
if mibBuilder.loadTexts: upsOutputRelayStatusTable.setStatus('mandatory')
upsOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutputRelayIndex"))
if mibBuilder.loadTexts: upsOutputRelayStatusEntry.setStatus('mandatory')
upsOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayIndex.setStatus('mandatory')
upsOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outputRelayNormalState", 1), ("outputRelayAbnormalState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayState.setStatus('mandatory')
upsOutputRelayDetailedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayDetailedStatus.setStatus('mandatory')
upsOutputRelayConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayConfigTableSize.setStatus('mandatory')
upsOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 4), )
if mibBuilder.loadTexts: upsOutputRelayConfigTable.setStatus('mandatory')
upsOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutputRelayConfigIndex"))
if mibBuilder.loadTexts: upsOutputRelayConfigEntry.setStatus('mandatory')
upsOutputRelayConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputRelayConfigIndex.setStatus('mandatory')
upsOutputRelayConfigDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutputRelayConfigDelay.setStatus('mandatory')
upsOutputRelayConfigCause = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("outputRelayConfigCauseNone", 1), ("outputRelayConfigCauseOnBatPwrFail", 2), ("outputRelayConfigCauseOnBatPwrFailExceptPeakPeriod", 3), ("outputRelayConfigCauseLoBatWhileOnBat", 4), ("outputRelayConfigCauseAlarm", 5), ("outputRelayConfigCauseFault", 6), ("outputRelayConfigCauseOutputOn", 7), ("outputRelayConfigCauseOutputOff", 8), ("outputRelayConfigCauseOnline", 9), ("outputRelayConfigCauseInBypass", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutputRelayConfigCause.setStatus('mandatory')
upsOutputRelayConfigPolarity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutputRelayAllRelaysEnergizedWhenTrue", 1), ("upsOutputRelayAllRelaysNotEnergizedWhenTrue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutputRelayConfigPolarity.setStatus('mandatory')
upsOutputRelayConfigPeakPeriod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutputRelayConfigPeakPeriod.setStatus('mandatory')
upsInputContactStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputContactStatusTableSize.setStatus('mandatory')
upsInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 2), )
if mibBuilder.loadTexts: upsInputContactStatusTable.setStatus('mandatory')
upsInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsInputContactIndex"))
if mibBuilder.loadTexts: upsInputContactStatusEntry.setStatus('mandatory')
upsInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputContactIndex.setStatus('mandatory')
upsInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsInputContactNormalState", 1), ("upsInputContactAbnormalState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputContactState.setStatus('mandatory')
upsInputContactConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputContactConfigTableSize.setStatus('mandatory')
upsInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 4), )
if mibBuilder.loadTexts: upsInputContactConfigTable.setStatus('mandatory')
upsInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsInputContactConfigIndex"))
if mibBuilder.loadTexts: upsInputContactConfigEntry.setStatus('mandatory')
upsInputContactConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputContactConfigIndex.setStatus('mandatory')
upsInputContactConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("upsInputContactConfigActionNone", 1), ("upsInputContactConfigActionSelfTest", 2), ("upsInputContactConfigActionExternalAlarmOn", 3), ("upsInputContactConfigActionExternalAlarmOff", 4), ("upsInputContactConfigActionOutputOffNoDelay", 5), ("upsInputContactConfigActionOutputOn", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsInputContactConfigAction.setStatus('mandatory')
upsInputContactConfigPolarity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 18, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsInputContactAllContactsClosedEqualsTrue", 1), ("upsInputContactAllContactsOpenEqualsTrue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsInputContactConfigPolarity.setStatus('mandatory')
upsEcoModeFreqTransferRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeFreqTransferRange.setStatus('mandatory')
upsEcoModeHighVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeHighVoltThreshold.setStatus('mandatory')
upsEcoModeLowVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeLowVoltThreshold.setStatus('mandatory')
upsEcoModeSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeSetting.setStatus('mandatory')
upsEcoModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeStatus.setStatus('mandatory')
upsEcoModeCountSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeCountSinceReset.setStatus('mandatory')
upsEcoModeOnlineSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeOnlineSinceCommission.setStatus('mandatory')
upsEcoModeOnlineSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeOnlineSinceReset.setStatus('mandatory')
upsEcoModeTotalPercentTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeTotalPercentTimeSinceReset.setStatus('mandatory')
upsEcoModePercentTimeSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModePercentTimeSinceCommission.setStatus('mandatory')
upsEcoModeTotalTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeTotalTimeSinceReset.setStatus('mandatory')
upsEcoModeTotalTimeSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeTotalTimeSinceCommission.setStatus('mandatory')
upsEcoModeTotalTimeInMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEcoModeTotalTimeInMonth.setStatus('mandatory')
upsEbmModeSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeSetting.setStatus('mandatory')
upsEbmModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeStatus.setStatus('mandatory')
upsEbmModeCountSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeCountSinceReset.setStatus('mandatory')
upsEbmModeTotalTimeInMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeTotalTimeInMonth.setStatus('mandatory')
upsEbmModeTotalTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeTotalTimeSinceReset.setStatus('mandatory')
upsEbmModeTotalPercentTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeTotalPercentTimeSinceReset.setStatus('mandatory')
upsEbmModeOnlineSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeOnlineSinceCommission.setStatus('mandatory')
upsEbmModePercentTimeSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModePercentTimeSinceCommission.setStatus('mandatory')
upsEbmModeRuntimeSinceCommission = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeRuntimeSinceCommission.setStatus('mandatory')
upsEbmModeOnlineSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeOnlineSinceReset.setStatus('mandatory')
upsEbmModeUpsCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 20, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEbmModeUpsCount.setStatus('mandatory')
upsBatteryStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryStatsReset.setStatus('mandatory')
upsBatteryStatsTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatsTimeSinceReset.setStatus('mandatory')
upsBatteryStatsTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatsTimeOnBattery.setStatus('mandatory')
upsOpStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOpStatsReset.setStatus('mandatory')
upsOpStatsTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOpStatsTimeSinceReset.setStatus('mandatory')
upsOpStatsTimeInNormalOperation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOpStatsTimeInNormalOperation.setStatus('mandatory')
upsOpStatsTimeInBypassOperation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOpStatsTimeInBypassOperation.setStatus('mandatory')
upsOpStatsTimeInECOmodeOperation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOpStatsTimeInECOmodeOperation.setStatus('mandatory')
upsOpStatsTimeInECOnversionOperation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOpStatsTimeInECOnversionOperation.setStatus('mandatory')
upsEnergyEfficiencyStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsReset.setStatus('mandatory')
upsEnergyEfficiencyStatsOutputEnergyTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsOutputEnergyTimeSinceReset.setStatus('mandatory')
upsEnergyEfficiencyStatsTimeInECOmode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsTimeInECOmode.setStatus('optional')
upsEnergyEfficiencyStatsTimeInECOnversion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsTimeInECOnversion.setStatus('optional')
upsEnergyEfficiencyStatsInputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsInputEnergyUsage.setStatus('mandatory')
upsEnergyEfficiencyStatsOutputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsOutputEnergyUsage.setStatus('mandatory')
upsEnergyEfficiencyStatsInputEnergyTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsInputEnergyTimeSinceReset.setStatus('mandatory')
upsEnergyEfficiencyStatsECOmodeTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsECOmodeTimeSinceReset.setStatus('optional')
upsEnergyEfficiencyStatsECOnversionTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 22, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnergyEfficiencyStatsECOnversionTimeSinceReset.setStatus('optional')
mUpsEnvironAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironAmbientTemperature.setStatus('mandatory')
mUpsEnvironRelativeHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironRelativeHumidity.setStatus('mandatory')
mUpsEnvironAmbientTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironAmbientTemperature2.setStatus('mandatory')
mUpsEnvironRelativeHumidity2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironRelativeHumidity2.setStatus('mandatory')
mUpsContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsContactNumContacts.setStatus('mandatory')
mUpsContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: mUpsContactTable.setStatus('mandatory')
mUpsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "contactNumber"))
if mibBuilder.loadTexts: mUpsContactEntry.setStatus('mandatory')
contactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactNumber.setStatus('mandatory')
normalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("closed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: normalState.setStatus('mandatory')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: description.setStatus('mandatory')
monitoringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitoringStatus.setStatus('mandatory')
currentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("noFault", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStatus.setStatus('mandatory')
upsPhaseResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsPhaseResetMaxMinValues.setStatus('mandatory')
upsPhaseNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumInputs.setStatus('mandatory')
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2), )
if mibBuilder.loadTexts: upsPhaseInputTable.setStatus('mandatory')
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputTableIndex"))
if mibBuilder.loadTexts: upsPhaseInputEntry.setStatus('mandatory')
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableIndex.setStatus('mandatory')
upsPhaseNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumInputPhases.setStatus('mandatory')
upsPhaseInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltageOrientation.setStatus('mandatory')
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputFrequency.setStatus('mandatory')
upsPhaseInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputType.setStatus('mandatory')
upsPhaseInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsPhaseInputName.setStatus('mandatory')
upsPhaseInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3), )
if mibBuilder.loadTexts: upsPhaseInputPhaseTable.setStatus('mandatory')
upsPhaseInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseInputPhaseIndex"))
if mibBuilder.loadTexts: upsPhaseInputPhaseEntry.setStatus('mandatory')
upsPhaseInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPhaseTableIndex.setStatus('mandatory')
upsPhaseInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPhaseIndex.setStatus('mandatory')
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltage.setStatus('mandatory')
upsPhaseInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxVoltage.setStatus('mandatory')
upsPhaseInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinVoltage.setStatus('mandatory')
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputCurrent.setStatus('mandatory')
upsPhaseInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxCurrent.setStatus('mandatory')
upsPhaseInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinCurrent.setStatus('mandatory')
upsPhaseInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPower.setStatus('mandatory')
upsPhaseInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxPower.setStatus('mandatory')
upsPhaseInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinPower.setStatus('mandatory')
upsPhaseInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputApparentPower.setStatus('mandatory')
upsPhaseInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPowerFactor.setStatus('mandatory')
upsPhaseInputVoltagePN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltagePN.setStatus('mandatory')
upsPhaseNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumOutputs.setStatus('mandatory')
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2), )
if mibBuilder.loadTexts: upsPhaseOutputTable.setStatus('mandatory')
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputTableIndex"))
if mibBuilder.loadTexts: upsPhaseOutputEntry.setStatus('mandatory')
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableIndex.setStatus('mandatory')
upsPhaseNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumOutputPhases.setStatus('mandatory')
upsPhaseOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltageOrientation.setStatus('mandatory')
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputFrequency.setStatus('mandatory')
upsPhaseOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3), )
if mibBuilder.loadTexts: upsPhaseOutputPhaseTable.setStatus('mandatory')
upsPhaseOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseOutputPhaseIndex"))
if mibBuilder.loadTexts: upsPhaseOutputPhaseEntry.setStatus('mandatory')
upsPhaseOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPhaseTableIndex.setStatus('mandatory')
upsPhaseOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPhaseIndex.setStatus('mandatory')
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltage.setStatus('mandatory')
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputCurrent.setStatus('mandatory')
upsPhaseOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxCurrent.setStatus('mandatory')
upsPhaseOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinCurrent.setStatus('mandatory')
upsPhaseOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputLoad.setStatus('mandatory')
upsPhaseOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxLoad.setStatus('mandatory')
upsPhaseOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinLoad.setStatus('mandatory')
upsPhaseOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPercentLoad.setStatus('mandatory')
upsPhaseOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPercentLoad.setStatus('mandatory')
upsPhaseOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPercentLoad.setStatus('mandatory')
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPower.setStatus('mandatory')
upsPhaseOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPower.setStatus('mandatory')
upsPhaseOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPower.setStatus('mandatory')
upsPhaseOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPercentPower.setStatus('mandatory')
upsPhaseOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPercentPower.setStatus('mandatory')
upsPhaseOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPercentPower.setStatus('mandatory')
upsPhaseOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPowerFactor.setStatus('mandatory')
upsPhaseOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputApparentPower.setStatus('mandatory')
upsPhaseOutputInverterVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputInverterVoltage.setStatus('mandatory')
upsPhaseOutputVoltagePN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltagePN.setStatus('mandatory')
upsOutletGroupStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusTableSize.setStatus('mandatory')
upsOutletGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2), )
if mibBuilder.loadTexts: upsOutletGroupStatusTable.setStatus('mandatory')
upsOutletGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupStatusIndex"))
if mibBuilder.loadTexts: upsOutletGroupStatusEntry.setStatus('mandatory')
upsOutletGroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusIndex.setStatus('mandatory')
upsOutletGroupStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusName.setStatus('mandatory')
upsOutletGroupStatusGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upsOutletGroupStatusOn", 1), ("upsOutletGroupStatusOff", 2), ("upsOutletGroupStatusUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusGroupState.setStatus('mandatory')
upsOutletGroupStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupCommandPending", 1), ("upsOutletGroupNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusCommandPending.setStatus('mandatory')
upsOutletGroupStatusOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusOutletType.setStatus('mandatory')
upsOutletGroupStatusGroupFullState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusGroupFullState.setStatus('mandatory')
upsOutletGroupConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigTableSize.setStatus('mandatory')
upsOutletGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2), )
if mibBuilder.loadTexts: upsOutletGroupConfigTable.setStatus('mandatory')
upsOutletGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupConfigIndex"))
if mibBuilder.loadTexts: upsOutletGroupConfigEntry.setStatus('mandatory')
upsOutletGroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigIndex.setStatus('mandatory')
upsOutletGroupConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigName.setStatus('mandatory')
upsOutletGroupConfigPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigPowerOnDelay.setStatus('mandatory')
upsOutletGroupConfigPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigPowerOffDelay.setStatus('mandatory')
upsOutletGroupConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigRebootDuration.setStatus('mandatory')
upsOutletGroupConfigMinReturnRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigMinReturnRuntime.setStatus('mandatory')
upsOutletGroupConfigOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigOutletType.setStatus('mandatory')
upsOutletGroupConfigLoadShedControlSkipOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupConfigSkipOffDelay", 1), ("upsOutletGroupConfigUseOffDelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlSkipOffDelay.setStatus('mandatory')
upsOutletGroupConfigLoadShedControlAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupConfigAutoRestart", 1), ("upsOutletGroupConfigManualRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlAutoRestart.setStatus('mandatory')
upsOutletGroupConfigLoadShedControlTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableTimeOnBatteryLoadShed", 1), ("upsOutletGroupConfigEnableTimeOnBatteryLoadShed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlTimeOnBattery.setStatus('mandatory')
upsOutletGroupConfigLoadShedControlRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableRuntimeRemainingLoadShed", 1), ("upsOutletGroupConfigEnableRuntimeRemainingLoadShed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlRuntimeRemaining.setStatus('mandatory')
upsOutletGroupConfigLoadShedControlInOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsOutletGroupConfigDisableInOverloadLoadShed", 1), ("upsOutletGroupConfigEnableInOverloadLoadShed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlInOverload.setStatus('mandatory')
upsOutletGroupConfigLoadShedTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedTimeOnBattery.setStatus('mandatory')
upsOutletGroupConfigLoadShedRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedRuntimeRemaining.setStatus('mandatory')
upsOutletGroupControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlTableSize.setStatus('mandatory')
upsOutletGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2), )
if mibBuilder.loadTexts: upsOutletGroupControlTable.setStatus('mandatory')
upsOutletGroupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupControlIndex"))
if mibBuilder.loadTexts: upsOutletGroupControlEntry.setStatus('mandatory')
upsOutletGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlIndex.setStatus('mandatory')
upsOutletGroupControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlName.setStatus('mandatory')
upsOutletGroupControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("upsOutletGroupImmediateOn", 1), ("upsOutletGroupImmediateOff", 2), ("upsOutletGroupImmediateRebootWithOrWithoutAC", 3), ("upsOutletGroupDelayedOn", 4), ("upsOutletGroupDelayedOff", 5), ("upsOutletGroupDelayedRebootWithOrWithoutAC", 6), ("upsOutletGroupCancelPendingCommand", 7), ("upsOutletGroupControlUnknown", 8), ("upsOutletGroupImmediateRebootShutdown", 9), ("upsOutletGroupDelayedRebootShutdown", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupControlCommand.setStatus('mandatory')
upsOutletGroupControlOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlOutletType.setStatus('mandatory')
upsDiagIMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMTableSize.setStatus('mandatory')
upsDiagIMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2), )
if mibBuilder.loadTexts: upsDiagIMTable.setStatus('mandatory')
upsDiagIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagIMIndex"))
if mibBuilder.loadTexts: upsDiagIMEntry.setStatus('mandatory')
upsDiagIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMIndex.setStatus('mandatory')
upsDiagIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("imUnknown", 1), ("imMIM", 2), ("imRIM", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMType.setStatus('mandatory')
upsDiagIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMStatus.setStatus('mandatory')
upsDiagIMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMFirmwareRev.setStatus('mandatory')
upsDiagIMSlaveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMSlaveFirmwareRev.setStatus('mandatory')
upsDiagIMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMHardwareRev.setStatus('mandatory')
upsDiagIMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMSerialNum.setStatus('mandatory')
upsDiagIMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMManufactureDate.setStatus('mandatory')
upsDiagIMInControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activeInControl", 1), ("passive", 2), ("unknown", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMInControl.setStatus('mandatory')
upsDiagPMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMTableSize.setStatus('mandatory')
upsDiagPMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2), )
if mibBuilder.loadTexts: upsDiagPMTable.setStatus('mandatory')
upsDiagPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagPMIndex"))
if mibBuilder.loadTexts: upsDiagPMEntry.setStatus('mandatory')
upsDiagPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMIndex.setStatus('mandatory')
upsDiagPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMStatus.setStatus('mandatory')
upsDiagPMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFirmwareRev.setStatus('mandatory')
upsDiagPMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMHardwareRev.setStatus('mandatory')
upsDiagPMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMSerialNum.setStatus('mandatory')
upsDiagPMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMManufactureDate.setStatus('mandatory')
upsDiagPMModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMModelNum.setStatus('mandatory')
upsDiagPMLifetimeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3), )
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoTable.setStatus('mandatory')
upsDiagPMLifetimeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagPMLifetimeInfoIndex"))
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoEntry.setStatus('mandatory')
upsDiagPMLifetimeInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoIndex.setStatus('mandatory')
upsDiagPMLifetimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMLifetimeStatus.setStatus('mandatory')
upsDiagPMEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEstmtdLifetimeRmng.setStatus('mandatory')
upsDiagPMEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEstmtdLifetimeRmngPct.setStatus('mandatory')
upsDiagPMFanLifetimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanLifetimeStatus.setStatus('mandatory')
upsDiagPMFanEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanEstmtdLifetimeRmng.setStatus('mandatory')
upsDiagPMFanEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanEstmtdLifetimeRmngPct.setStatus('mandatory')
upsDiagPMEnclDoorFltrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrTableSize.setStatus('mandatory')
upsDiagPMEnclDoorFltrTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5), )
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrTable.setStatus('mandatory')
upsDiagPMEnclDoorFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagPMEnclIndex"))
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEntry.setStatus('mandatory')
upsDiagPMEnclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclIndex.setStatus('mandatory')
upsDiagPMEnclDoorFltrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("heavyFiltration15days", 1), ("normalFiltration30days", 2), ("lightFiltration60days", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrLifetime.setStatus('mandatory')
upsDiagPMEnclDoorFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrStatus.setStatus('mandatory')
upsDiagPMEnclDoorFltrEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEstmtdLifetimeRmng.setStatus('mandatory')
upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct.setStatus('mandatory')
upsDiagBatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryTableSize.setStatus('mandatory')
upsDiagBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2), )
if mibBuilder.loadTexts: upsDiagBatteryTable.setStatus('mandatory')
upsDiagBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagBatteryIndex"))
if mibBuilder.loadTexts: upsDiagBatteryEntry.setStatus('mandatory')
upsDiagBatteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameIndex.setStatus('mandatory')
upsDiagBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryIndex.setStatus('mandatory')
upsDiagBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("failed", 4), ("highTemperature", 5), ("replaceImmediately", 6), ("lowCapacity", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryStatus.setStatus('mandatory')
upsDiagBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatterySerialNumber.setStatus('mandatory')
upsDiagBatteryFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFirmwareRev.setStatus('mandatory')
upsDiagBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryManufactureDate.setStatus('mandatory')
upsDiagBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryType.setStatus('mandatory')
upsDiagBatteryFramePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notPresent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFramePresent.setStatus('mandatory')
upsDiagBatteryFrameTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameTemperature.setStatus('mandatory')
upsDiagBatteryFrameTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameTableSize.setStatus('mandatory')
upsDiagBatteryFrameTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4), )
if mibBuilder.loadTexts: upsDiagBatteryFrameTable.setStatus('mandatory')
upsDiagBatteryFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagBatteryFrameTableIndex"))
if mibBuilder.loadTexts: upsDiagBatteryFrameEntry.setStatus('mandatory')
upsDiagBatteryFrameTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameTableIndex.setStatus('mandatory')
upsDiagBatteryModuleStatusPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryModuleStatusPerFrame.setStatus('mandatory')
upsDiagBatteryPositiveVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryPositiveVoltage.setStatus('mandatory')
upsDiagBatteryNegativeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryNegativeVoltage.setStatus('mandatory')
upsDiagBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryTemperature.setStatus('mandatory')
upsDiagSubSysFrameTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameTableSize.setStatus('mandatory')
upsDiagSubSysFrameTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2), )
if mibBuilder.loadTexts: upsDiagSubSysFrameTable.setStatus('mandatory')
upsDiagSubSysFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysFrameIndex"))
if mibBuilder.loadTexts: upsDiagSubSysFrameEntry.setStatus('mandatory')
upsDiagSubSysFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameIndex.setStatus('mandatory')
upsDiagSubSysFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("frameTypeMain", 3), ("frameTypeXR", 4), ("frameTypeLXR", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameType.setStatus('mandatory')
upsDiagSubSysFrameFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameFirmwareRev.setStatus('mandatory')
upsDiagSubSysFrameHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameHardwareRev.setStatus('mandatory')
upsDiagSubSysFrameSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameSerialNum.setStatus('mandatory')
upsDiagSubSysFrameManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameManufactureDate.setStatus('mandatory')
upsDiagSubSysIntBypSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchTableSize.setStatus('mandatory')
upsDiagSubSysIntBypSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4), )
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchTable.setStatus('mandatory')
upsDiagSubSysIntBypSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysIntBypSwitchIndex"))
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchEntry.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFrameIndex.setStatus('mandatory')
upsDiagSubSysIntBypSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchIndex.setStatus('mandatory')
upsDiagSubSysIntBypSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchStatus.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFirmwareRev.setStatus('mandatory')
upsDiagSubSysIntBypSwitchHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchHardwareRev.setStatus('mandatory')
upsDiagSubSysIntBypSwitchSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchSerialNum.setStatus('mandatory')
upsDiagSubSysIntBypSwitchManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchManufactureDate.setStatus('mandatory')
upsDiagSubSysIntBypSwitchModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchModelNum.setStatus('mandatory')
upsDiagSubSysBattMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorTableSize.setStatus('mandatory')
upsDiagSubSysBattMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6), )
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorTable.setStatus('mandatory')
upsDiagSubSysBattMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysBattMonitorIndex"))
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorEntry.setStatus('mandatory')
upsDiagSubSysBattMonitorFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorFrameIndex.setStatus('mandatory')
upsDiagSubSysBattMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorIndex.setStatus('mandatory')
upsDiagSubSysBattMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorStatus.setStatus('mandatory')
upsDiagSubSysBattMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorFirmwareRev.setStatus('mandatory')
upsDiagSubSysBattMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorHardwareRev.setStatus('mandatory')
upsDiagSubSysBattMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorSerialNum.setStatus('mandatory')
upsDiagSubSysBattMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorManufactureDate.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearTableSize.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8), )
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearTable.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalSwitchGearIndex"))
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearEntry.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearFrameIndex.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearIndex.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearStatus.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearFirmwareRev.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearHardwareRev.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearSerialNum.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearManufactureDate.setStatus('mandatory')
upsDiagSubSysExternalSwitchGearTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearTemperature.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardTableSize.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10), )
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardTable.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDisplayInterfaceCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardEntry.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardFrameIndex.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardIndex.setStatus('mandatory')
upsDiagSubSysDisplayInterfaceCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardStatus.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerTableSize.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12), )
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerTable.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDCCircuitBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerEntry.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerFrameIndex.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerIndex.setStatus('mandatory')
upsDiagSubSysDCCircuitBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerStatus.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyTableSize.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14), )
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyTable.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysSystemPowerSupplyIndex"))
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyEntry.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyFrameIndex.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyIndex.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyStatus.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyFirmwareRev.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyHardwareRev.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplySerialNum.setStatus('mandatory')
upsDiagSubSysSystemPowerSupplyManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyManufactureDate.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardTableSize.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16), )
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardTable.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysXRCommunicationCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardEntry.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardFrameIndex.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardIndex.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardStatus.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardFirmwareRev.setStatus('mandatory')
upsDiagSubSysXRCommunicationCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardSerialNum.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardTableSize.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18), )
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardTable.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalPowerFrameBoardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardEntry.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardFrameIndex.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardIndex.setStatus('mandatory')
upsDiagSubSysExternalPowerFrameBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardStatus.setStatus('mandatory')
upsDiagSubSysChargerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerTableSize.setStatus('mandatory')
upsDiagSubSysChargerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20), )
if mibBuilder.loadTexts: upsDiagSubSysChargerTable.setStatus('mandatory')
upsDiagSubSysChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysChargerIndex"))
if mibBuilder.loadTexts: upsDiagSubSysChargerEntry.setStatus('mandatory')
upsDiagSubSysChargerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerFrameIndex.setStatus('mandatory')
upsDiagSubSysChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerIndex.setStatus('mandatory')
upsDiagSubSysChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerStatus.setStatus('mandatory')
upsDiagSubSysInverterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterTableSize.setStatus('mandatory')
upsDiagSubSysInverterTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22), )
if mibBuilder.loadTexts: upsDiagSubSysInverterTable.setStatus('mandatory')
upsDiagSubSysInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysInverterIndex"))
if mibBuilder.loadTexts: upsDiagSubSysInverterEntry.setStatus('mandatory')
upsDiagSubSysInverterFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterFrameIndex.setStatus('mandatory')
upsDiagSubSysInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterIndex.setStatus('mandatory')
upsDiagSubSysInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterStatus.setStatus('mandatory')
upsDiagSubSysInverterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterFirmwareRev.setStatus('mandatory')
upsDiagSubSysInverterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterHardwareRev.setStatus('mandatory')
upsDiagSubSysInverterSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterSerialNum.setStatus('mandatory')
upsDiagSubSysInverterManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterManufactureDate.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionTableSize.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24), )
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionTable.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysPowerFactorCorrectionIndex"))
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionEntry.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionFrameIndex.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionIndex.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionStatus.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionFirmwareRev.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionHardwareRev.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionSerialNum.setStatus('mandatory')
upsDiagSubSysPowerFactorCorrectionManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionManufactureDate.setStatus('mandatory')
upsDiagSubSysNetworkComCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardTableSize.setStatus('mandatory')
upsDiagSubSysNetworkComCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26), )
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardTable.setStatus('mandatory')
upsDiagSubSysNetworkComCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysNetworkComCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardEntry.setStatus('mandatory')
upsDiagSubSysNetworkComCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardIndex.setStatus('mandatory')
upsDiagSubSysNetworkComCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardModelNumber.setStatus('mandatory')
upsDiagSubSysNetworkComCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardSerialNumber.setStatus('mandatory')
upsDiagSubSysNetworkComCardDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardDateOfManufacture.setStatus('mandatory')
upsDiagSubSysNetworkComCardHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardHardwareRev.setStatus('mandatory')
upsDiagSubSysNetworkComCardFirmwareAppRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardFirmwareAppRev.setStatus('mandatory')
upsDiagSubSysNetworkComCardFirmwareAppOSRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardFirmwareAppOSRev.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorTableSize.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28), )
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorTable.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysUsrSuppBattMonitorIndex"))
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorEntry.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorIndex.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorStatus.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorFirmwareRev.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorHardwareRev.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorSerialNum.setStatus('mandatory')
upsDiagSubSysUsrSuppBattMonitorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattMonitorTemperature.setStatus('mandatory')
upsDiagSubSysUsrSuppBattBreakerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysUsrSuppBattBreakerStatus.setStatus('mandatory')
upsDiagSubSysPSUTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPSUTableSize.setStatus('mandatory')
upsDiagSubSysPSUTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 31), )
if mibBuilder.loadTexts: upsDiagSubSysPSUTable.setStatus('mandatory')
upsDiagSubSysPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 31, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysPSUIndex"))
if mibBuilder.loadTexts: upsDiagSubSysPSUEntry.setStatus('mandatory')
upsDiagSubSysPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPSUIndex.setStatus('mandatory')
upsDiagSubSysPSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPSUStatus.setStatus('mandatory')
upsDiagSubSysIDRCTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCTableSize.setStatus('mandatory')
upsDiagSubSysIDRCTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33), )
if mibBuilder.loadTexts: upsDiagSubSysIDRCTable.setStatus('mandatory')
upsDiagSubSysIDRCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysIDRCIndex"))
if mibBuilder.loadTexts: upsDiagSubSysIDRCEntry.setStatus('mandatory')
upsDiagSubSysIDRCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCIndex.setStatus('mandatory')
upsDiagSubSysIDRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCStatus.setStatus('mandatory')
upsDiagSubSysIDRCFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCFirmwareRev.setStatus('mandatory')
upsDiagSubSysIDRCHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCHardwareRev.setStatus('mandatory')
upsDiagSubSysIDRCSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 33, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIDRCSerialNum.setStatus('mandatory')
upsDiagSubSysExternalConnectorStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalConnectorStatus.setStatus('mandatory')
upsDiagSubSysBackfeedContactorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBackfeedContactorTableSize.setStatus('mandatory')
upsDiagSubSysBackfeedContactorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36), )
if mibBuilder.loadTexts: upsDiagSubSysBackfeedContactorTable.setStatus('mandatory')
upsDiagSubSysBackfeedContactorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysbackfeedContactorIndex"))
if mibBuilder.loadTexts: upsDiagSubSysBackfeedContactorEntry.setStatus('mandatory')
upsDiagSubSysbackfeedContactorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysbackfeedContactorIndex.setStatus('mandatory')
upsDiagSubSysbackfeedContactorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsDiagSubSysbackfeedContactorName.setStatus('mandatory')
upsDiagSubSysbackfeedContactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("normalAC", 2), ("bypassAC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysbackfeedContactorType.setStatus('mandatory')
upsDiagSubSysbackfeedContactorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 36, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("opened", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysbackfeedContactorStatus.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanLifetimeInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanLifetimeInfoTableSize.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanLifetimeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38), )
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanLifetimeInfoTable.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanLifetimeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysIntBypSwitchFanLifetimeInfoIndex"))
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanLifetimeInfoEntry.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanLifetimeInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanLifetimeInfoIndex.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanLifetimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanLifetimeStatus.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmng.setStatus('mandatory')
upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 38, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmngPct.setStatus('mandatory')
upsDiagSwitchGearStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearStatus.setStatus('mandatory')
upsDiagSwitchGearInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearInputSwitchStatus.setStatus('mandatory')
upsDiagSwitchGearOutputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearOutputSwitchStatus.setStatus('mandatory')
upsDiagSwitchGearBypassSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBypassSwitchStatus.setStatus('mandatory')
upsDiagSwitchGearBypassInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBypassInputSwitchStatus.setStatus('mandatory')
upsDiagSwitchGearBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerTableSize.setStatus('mandatory')
upsDiagSwitchGearBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7), )
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerTable.setStatus('mandatory')
upsDiagSwitchGearBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "switchgearBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerEntry.setStatus('mandatory')
switchgearBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerIndex.setStatus('mandatory')
switchgearBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerPresent.setStatus('mandatory')
switchgearBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchgearBreakerName.setStatus('mandatory')
switchgearBreakerType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("unitInputBreaker", 2), ("staticSwitchInputBreaker", 3), ("maintenanceBypassBreaker", 4), ("unitOutputBreaker", 5), ("systemIsolationBreaker", 6), ("batteryBreaker", 7), ("bypassBackFeedBreaker", 8), ("internalMaintenanceBypassBreaker", 9), ("redundantInternalMaintenanceBypassBreaker", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerType.setStatus('mandatory')
switchgearBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("opened", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerStatus.setStatus('mandatory')
upsDiagSubFeedBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedBreakerTableSize.setStatus('mandatory')
upsDiagSubFeedBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9), )
if mibBuilder.loadTexts: upsDiagSubFeedBreakerTable.setStatus('mandatory')
upsDiagSubFeedBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "subfeedBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSubFeedBreakerEntry.setStatus('mandatory')
subfeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerIndex.setStatus('mandatory')
subfeedBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerPresent.setStatus('mandatory')
subfeedBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerRating.setStatus('mandatory')
subfeedBreakerUpperAcceptPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerUpperAcceptPowerWarning.setStatus('mandatory')
subfeedBreakerUpperAcceptPowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerUpperAcceptPowerCritical.setStatus('mandatory')
subfeedBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerStatus.setStatus('mandatory')
subfeedBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerName.setStatus('mandatory')
subfeedBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerCurrent.setStatus('mandatory')
upsDiagSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearInstallationLoadPct.setStatus('mandatory')
upsDiagSubFeedPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11), )
if mibBuilder.loadTexts: upsDiagSubFeedPhaseTable.setStatus('mandatory')
upsDiagSubFeedPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagSubFeedPhaseIndex"))
if mibBuilder.loadTexts: upsDiagSubFeedPhaseEntry.setStatus('mandatory')
upsDiagSubFeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedBreakerIndex.setStatus('mandatory')
upsDiagSubFeedPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseIndex.setStatus('mandatory')
upsDiagSubFeedPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseCurrent.setStatus('mandatory')
upsDiagSubFeedPhaseCurrentAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseCurrentAlternate.setStatus('mandatory')
upsDiagSwitchgearSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchgearSerialNumber.setStatus('mandatory')
upsDiagSwitchgearAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchgearAmbientTemperature.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorTableSize.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15), )
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorTable.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagUsrSuppSwitchgearMonitorIndex"))
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorEntry.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorIndex.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorStatus.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorFirmwareRev.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorHardwareRev.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorSerialNum.setStatus('mandatory')
upsDiagUsrSuppSwitchgearMonitorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUsrSuppSwitchgearMonitorTemperature.setStatus('mandatory')
upsDiagMCCBBoxStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagMCCBBoxStatus.setStatus('mandatory')
upsDiagTransformerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6), ("opened", 7), ("closed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagTransformerStatus.setStatus('mandatory')
upsDiagFlyWheelStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("present", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagFlyWheelStatus.setStatus('mandatory')
upsDiagComBusInternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusInternalMIMStatus.setStatus('mandatory')
upsDiagComBusInternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusInternalRIMStatus.setStatus('mandatory')
upsDiagComBusMIMtoRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusMIMtoRIMStatus.setStatus('mandatory')
upsDiagComBusExternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusExternalMIMStatus.setStatus('mandatory')
upsDiagComBusExternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusExternalRIMStatus.setStatus('mandatory')
upsDiagnosticPowerCabinetTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticPowerCabinetTableSize.setStatus('mandatory')
upsDiagnosticPowerCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7, 2), )
if mibBuilder.loadTexts: upsDiagnosticPowerCabinetTable.setStatus('mandatory')
upsDiagnosticPowerCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagnosticPowerCabinetIndex"))
if mibBuilder.loadTexts: upsDiagnosticPowerCabinetEntry.setStatus('mandatory')
upsDiagnosticPowerCabinetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticPowerCabinetIndex.setStatus('mandatory')
upsDiagnosticPowerCabinetAmbientTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticPowerCabinetAmbientTemperature.setStatus('mandatory')
upsDiagnosticDisplayHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticDisplayHardwareRev.setStatus('mandatory')
upsDiagnosticDisplaySerialNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticDisplaySerialNum.setStatus('mandatory')
upsDiagnosticDisplayFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticDisplayFirmwareRev.setStatus('mandatory')
upsDiagnosticDisplayModelNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticDisplayModelNum.setStatus('mandatory')
upsDiagnosticDisplayStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticDisplayStatus.setStatus('mandatory')
upsDiagnosticSLCHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticSLCHardwareRev.setStatus('mandatory')
upsDiagnosticSLCSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticSLCSerialNum.setStatus('mandatory')
upsDiagnosticSLCFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticSLCFirmwareRev.setStatus('mandatory')
upsDiagnosticSLCModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticSLCModelNumber.setStatus('mandatory')
upsDiagSLCStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSLCStatus.setStatus('mandatory')
upsDiagnosticTemperatureAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagnosticTemperatureAmbientTemperature.setStatus('mandatory')
upsDiagUnitControllerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerTableSize.setStatus('mandatory')
upsDiagUnitControllerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2), )
if mibBuilder.loadTexts: upsDiagUnitControllerTable.setStatus('mandatory')
upsDiagUnitControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDiagUnitControllerIndex"))
if mibBuilder.loadTexts: upsDiagUnitControllerEntry.setStatus('mandatory')
upsDiagUnitControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerIndex.setStatus('mandatory')
upsDiagUnitControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerStatus.setStatus('mandatory')
upsDiagUnitControllerFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerFirmwareRev.setStatus('mandatory')
upsDiagUnitControllerHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerHardwareRev.setStatus('mandatory')
upsDiagUnitControllerSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerSerialNum.setStatus('mandatory')
upsDiagUnitControllerModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagUnitControllerModelNum.setStatus('mandatory')
upsParallelSysLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysLocalAddress.setStatus('mandatory')
upsParallelSysRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysRemoteAddress.setStatus('mandatory')
upsParallelSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysRedundancy.setStatus('mandatory')
upsParallelInputMaximumCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaximumCurrent.setStatus('mandatory')
upsParallelTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelTotalOutputPower.setStatus('mandatory')
upsParallelTotalOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelTotalOutputApparentPower.setStatus('mandatory')
upsParallelInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7), )
if mibBuilder.loadTexts: upsParallelInputPhaseTable.setStatus('mandatory')
upsParallelInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelInputPhaseIndex"))
if mibBuilder.loadTexts: upsParallelInputPhaseEntry.setStatus('mandatory')
upsParallelInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputPhaseTableIndex.setStatus('mandatory')
upsParallelInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputPhaseIndex.setStatus('mandatory')
upsParallelInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputCurrent.setStatus('mandatory')
upsParallelInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputActivePower.setStatus('mandatory')
upsParallelInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputApparentPower.setStatus('mandatory')
upsParallelInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputVoltage.setStatus('mandatory')
upsParallelInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaxVoltage.setStatus('mandatory')
upsParallelInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaxCurrent.setStatus('mandatory')
upsParallelInputTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputTotalActivePower.setStatus('mandatory')
upsParallelInputTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputTotalApparentPower.setStatus('mandatory')
upsParallelOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8), )
if mibBuilder.loadTexts: upsParallelOutputPhaseTable.setStatus('mandatory')
upsParallelOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelOutputPhaseIndex"))
if mibBuilder.loadTexts: upsParallelOutputPhaseEntry.setStatus('mandatory')
upsParallelOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPhaseTableIndex.setStatus('mandatory')
upsParallelOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPhaseIndex.setStatus('mandatory')
upsParallelOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputCurrent.setStatus('mandatory')
upsParallelOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputLoad.setStatus('mandatory')
upsParallelOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPercentLoad.setStatus('mandatory')
upsParallelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPower.setStatus('mandatory')
upsParallelOutputApparentPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9), )
if mibBuilder.loadTexts: upsParallelOutputApparentPowerTable.setStatus('mandatory')
upsParallelOutputApparentPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputApparentPowerTableIndex"))
if mibBuilder.loadTexts: upsParallelOutputApparentPowerEntry.setStatus('mandatory')
upsParallelOutputApparentPowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputApparentPowerTableIndex.setStatus('mandatory')
upsParallelOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputApparentPower.setStatus('mandatory')
upsParallelDiagSubSysBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10), )
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerTable.setStatus('mandatory')
upsParallelDiagSubSysBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerFrameIndex"), (0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerIndex"))
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerEntry.setStatus('mandatory')
upsParallelDiagSubSysBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerFrameIndex.setStatus('mandatory')
upsParallelDiagSubSysBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerIndex.setStatus('mandatory')
upsParallelDiagSubSysBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerStatus.setStatus('mandatory')
upsParallelDiagSubSysBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerName.setStatus('mandatory')
upsParallelOutputTotalPercentLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputTotalPercentLoad.setStatus('mandatory')
upsParallelOutputActivePowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12), )
if mibBuilder.loadTexts: upsParallelOutputActivePowerTable.setStatus('mandatory')
upsParallelOutputActivePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputActivePowerTableIndex"))
if mibBuilder.loadTexts: upsParallelOutputActivePowerEntry.setStatus('mandatory')
upsParallelOutputActivePowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputActivePowerTableIndex.setStatus('mandatory')
upsParallelOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputActivePower.setStatus('mandatory')
upsParallelSysSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysSwitchGearInstallationLoadPct.setStatus('mandatory')
upsParallelSysRedundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysRedundancyStatus.setStatus('mandatory')
upsParallelSysName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysName.setStatus('mandatory')
upsParallelSysUpsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsTableSize.setStatus('mandatory')
upsParallelSysUpsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17), )
if mibBuilder.loadTexts: upsParallelSysUpsTable.setStatus('mandatory')
upsParallelSysUpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1), ).setIndexNames((0, "PowerNet-MIB", "upsParallelSysUpsIndex"))
if mibBuilder.loadTexts: upsParallelSysUpsEntry.setStatus('mandatory')
upsParallelSysUpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsIndex.setStatus('mandatory')
upsParallelSysUpsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsName.setStatus('mandatory')
upsParallelSysUpsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("informational", 3), ("warning", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsAlarmStatus.setStatus('mandatory')
upsParallelSysUpsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBatteryTest", 4), ("requestedStaticBypass", 5), ("forcedBypass", 6), ("maintenanceBypass", 7), ("off", 8), ("ecoMode", 9), ("hotStandby", 10), ("inquiring", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsMode.setStatus('mandatory')
upsParallelSysUpsSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysUpsSerialNumber.setStatus('mandatory')
upsParallelNumOfUpsPoweringLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelNumOfUpsPoweringLoad.setStatus('mandatory')
upsParallelMinNumOfRequiredUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelMinNumOfRequiredUps.setStatus('mandatory')
upsIOFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIOFrameLayoutPositionID.setStatus('mandatory')
upsBottomFeedFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBottomFeedFrameLayoutPositionID.setStatus('mandatory')
upsSwitchGearLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSwitchGearLayoutPositionID.setStatus('mandatory')
upsBatteryFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryFrameLayoutTableSize.setStatus('mandatory')
upsBatteryFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5), )
if mibBuilder.loadTexts: upsBatteryFrameLayoutTable.setStatus('mandatory')
upsBatteryFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "batteryFrameIndex"))
if mibBuilder.loadTexts: upsBatteryFrameLayoutEntry.setStatus('mandatory')
batteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFrameIndex.setStatus('mandatory')
batteryFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFramePositionID.setStatus('mandatory')
upsSideCarFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSideCarFrameLayoutTableSize.setStatus('mandatory')
upsSideCarFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7), )
if mibBuilder.loadTexts: upsSideCarFrameLayoutTable.setStatus('mandatory')
upsSideCarFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "sideCarFrameIndex"))
if mibBuilder.loadTexts: upsSideCarFrameLayoutEntry.setStatus('mandatory')
sideCarFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sideCarFrameIndex.setStatus('mandatory')
sideCarFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sideCarFramePositionID.setStatus('mandatory')
upsPowerFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPowerFrameLayoutTableSize.setStatus('mandatory')
upsPowerFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9), )
if mibBuilder.loadTexts: upsPowerFrameLayoutTable.setStatus('mandatory')
upsPowerFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "powerFrameIndex"))
if mibBuilder.loadTexts: upsPowerFrameLayoutEntry.setStatus('mandatory')
powerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFrameIndex.setStatus('mandatory')
powerFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFramePositionID.setStatus('mandatory')
upsIntegratedATSSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSourceSelected", 1), ("unknown", 2), ("sourceA", 3), ("sourceB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSelectedSource.setStatus('mandatory')
upsIntegratedATSPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upsIntegratedATSNoSourcePreference", 1), ("upsIntegratedATSPreferSourceA", 2), ("upsIntegratedATSPreferSourceB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSPreferredSource.setStatus('mandatory')
upsIntegratedATSUpsReturnStaggering = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSUpsReturnStaggering.setStatus('mandatory')
upsIntegratedATSSourceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceTableSize.setStatus('mandatory')
upsIntegratedATSSourceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5), )
if mibBuilder.loadTexts: upsIntegratedATSSourceTable.setStatus('mandatory')
upsIntegratedATSSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "upsIntegratedATSSourceIndex"))
if mibBuilder.loadTexts: upsIntegratedATSSourceEntry.setStatus('mandatory')
upsIntegratedATSSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceIndex.setStatus('mandatory')
upsIntegratedATSSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceName.setStatus('mandatory')
upsIntegratedATSSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upsIntegratedATSSourceGood", 1), ("upsIntegratedATSSourceBad", 2), ("upsIntegratedATSSourceUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceStatus.setStatus('mandatory')
upsIntegratedATSLineFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSLineFailDelay.setStatus('mandatory')
upsIntegratedATSLineStabilityDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSLineStabilityDelay.setStatus('mandatory')
upsDCOutputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1))
upsDCOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusTableSize.setStatus('mandatory')
upsDCOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2), )
if mibBuilder.loadTexts: upsDCOutputStatusTable.setStatus('mandatory')
upsDCOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "upsDCOutputStatusTableIndex"))
if mibBuilder.loadTexts: upsDCOutputStatusEntry.setStatus('mandatory')
upsDCOutputStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusTableIndex.setStatus('mandatory')
upsDCOutputStatusVoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusVoltageNominal.setStatus('mandatory')
upsDCOutputStatusCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusCurrentRating.setStatus('mandatory')
upsDCOutputStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusVoltage.setStatus('mandatory')
upsDCOutputStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusCurrent.setStatus('mandatory')
upsDCOutputStatusAbnormalConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusAbnormalConditions.setStatus('mandatory')
serialPort2Mode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localConsole", 1), ("passthrough", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPort2Mode.setStatus('obsolete')
setPulseOnTXD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSetPulseOnTXD", 1), ("setPulseOnTXD", 2), ("setTXDLow", 3), ("setTXDHigh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPulseOnTXD.setStatus('obsolete')
sPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRev.setStatus('mandatory')
sPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRev.setStatus('mandatory')
sPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufacture.setStatus('mandatory')
sPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumber.setStatus('mandatory')
sPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumber.setStatus('mandatory')
sPDUMasterControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("turnAllOnNow", 1), ("turnAllOnSequence", 2), ("turnAllOffNow", 3), ("rebootAllNow", 4), ("rebootAllSequence", 5), ("noCommand", 6), ("turnAllOffSequence", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlSwitch.setStatus('mandatory')
sPDUMasterState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterState.setStatus('mandatory')
sPDUMasterPending = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterPending.setStatus('mandatory')
sPDUMasterConfigPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigPowerOn.setStatus('mandatory')
sPDUMasterConfigReboot = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigReboot.setStatus('mandatory')
sPDUMasterConfigPDUName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigPDUName.setStatus('mandatory')
sPDUOutletControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlTableSize.setStatus('mandatory')
sPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2), )
if mibBuilder.loadTexts: sPDUOutletControlTable.setStatus('mandatory')
sPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlIndex"))
if mibBuilder.loadTexts: sPDUOutletControlEntry.setStatus('mandatory')
sPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlIndex.setStatus('mandatory')
sPDUOutletPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletPending.setStatus('mandatory')
sPDUOutletCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("outletOn", 1), ("outletOff", 2), ("outletReboot", 3), ("outletUnknown", 4), ("outletOnWithDelay", 5), ("outletOffWithDelay", 6), ("outletRebootWithDelay", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletCtl.setStatus('mandatory')
sPDUOutletCtlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletCtlName.setStatus('mandatory')
sPDUOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigTableSize.setStatus('mandatory')
sPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2), )
if mibBuilder.loadTexts: sPDUOutletConfigTable.setStatus('mandatory')
sPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigEntry.setStatus('mandatory')
sPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigIndex.setStatus('mandatory')
sPDUOutletPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletPowerOnTime.setStatus('mandatory')
sPDUOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletName.setStatus('mandatory')
sPDUOutletPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletPowerOffTime.setStatus('mandatory')
sPDUOutletRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletRebootDuration.setStatus('mandatory')
sPDUIdentVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentVMTableSize.setStatus('mandatory')
sPDUIdentVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: sPDUIdentVMTable.setStatus('mandatory')
sPDUIdentVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUIdentVMIndex"))
if mibBuilder.loadTexts: sPDUIdentVMEntry.setStatus('mandatory')
sPDUIdentVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentVMIndex.setStatus('mandatory')
sPDUIdentNameVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentNameVM.setStatus('mandatory')
sPDUIdentHardwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRevVM.setStatus('mandatory')
sPDUIdentFirmwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRevVM.setStatus('mandatory')
sPDUIdentDateOfManufactureVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufactureVM.setStatus('mandatory')
sPDUIdentModelNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumberVM.setStatus('mandatory')
sPDUIdentSerialNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumberVM.setStatus('mandatory')
sPDUMasterControlVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMTableSize.setStatus('mandatory')
sPDUMasterControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: sPDUMasterControlVMTable.setStatus('mandatory')
sPDUMasterControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlVMIndex"))
if mibBuilder.loadTexts: sPDUMasterControlVMEntry.setStatus('mandatory')
sPDUMasterControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMIndex.setStatus('mandatory')
sPDUMasterControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMName.setStatus('mandatory')
sPDUMasterControlVMCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noCommandAllVM", 1), ("immediateAllOnVM", 2), ("immediateAllOffVM", 3), ("immediateAllRebootVM", 4), ("delayedAllOnVM", 5), ("delayedAllOffVM", 6), ("sequencedAllRebootVM", 7), ("delayedAllRebootVM", 8), ("delayedSequenceAllRebootVM", 9), ("cancelAllPendingCommandsVM", 10), ("audioAlarmMute", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlVMCommand.setStatus('mandatory')
sPDUMasterConfigVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigVMTableSize.setStatus('mandatory')
sPDUMasterConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: sPDUMasterConfigVMTable.setStatus('mandatory')
sPDUMasterConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigVMIndex"))
if mibBuilder.loadTexts: sPDUMasterConfigVMEntry.setStatus('mandatory')
sPDUMasterConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigVMIndex.setStatus('mandatory')
sPDUMasterConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMName.setStatus('mandatory')
sPDUMasterConfigVMColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMColdstartDelay.setStatus('mandatory')
sPDUMasterConfigVMAudioAlarmActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audioAlarmActiveNever", 1), ("audioAlarmActiveOnOverload", 2), ("audioAlarmActiveOnOverloadImminent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMAudioAlarmActivated.setStatus('mandatory')
sPDUMasterConfigVMHighLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMHighLoadWarningThreshold.setStatus('mandatory')
sPDUMasterConfigVMLowLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMLowLoadWarningThreshold.setStatus('mandatory')
sPDUMasterConfigVMOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnWarning", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMOverloadRestriction.setStatus('mandatory')
sPDUMasterStatusVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMTableSize.setStatus('mandatory')
sPDUMasterStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2), )
if mibBuilder.loadTexts: sPDUMasterStatusVMTable.setStatus('mandatory')
sPDUMasterStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusVMIndex"))
if mibBuilder.loadTexts: sPDUMasterStatusVMEntry.setStatus('mandatory')
sPDUMasterStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMIndex.setStatus('mandatory')
sPDUMasterStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMName.setStatus('mandatory')
sPDUMasterStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commandPendingMasterTrueVM", 1), ("commandPendingMasterFalseVM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMCommandPending.setStatus('mandatory')
sPDUMasterStatusVMOverloadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overloadConditionTrueVM", 1), ("overloadConditionFalseVM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMOverloadCondition.setStatus('mandatory')
sPDUMasterStatusVMLowLoadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowLoadConditionTrueVM", 1), ("lowLoadConditionFalseVM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMLowLoadCondition.setStatus('mandatory')
sPDUMasterStatusVMCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMCurrentLoad.setStatus('mandatory')
sPDUMasterStatusVMMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMMaxLoad.setStatus('mandatory')
sPDUMasterStatusVMOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMOutletCount.setStatus('mandatory')
sPDUMasterStatusVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMRebootDuration.setStatus('mandatory')
sPDUOutletControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: sPDUOutletControlVMTable.setStatus('mandatory')
sPDUOutletControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlVMIndex"), (0, "PowerNet-MIB", "sPDUOutletControlVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletControlVMEntry.setStatus('mandatory')
sPDUOutletControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMIndex.setStatus('mandatory')
sPDUOutletControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMName.setStatus('mandatory')
sPDUOutletControlVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletIndex.setStatus('mandatory')
sPDUOutletControlVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletName.setStatus('mandatory')
sPDUOutletControlVMOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("immediateOnVM", 1), ("immediateOffVM", 2), ("immediateRebootVM", 3), ("delayedOnVM", 4), ("delayedOffVM", 5), ("delayedRebootVM", 6), ("cancelPendingCommandVM", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletCommand.setStatus('mandatory')
sPDUOutletConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1), )
if mibBuilder.loadTexts: sPDUOutletConfigVMTable.setStatus('mandatory')
sPDUOutletConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigVMIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigVMEntry.setStatus('mandatory')
sPDUOutletConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMIndex.setStatus('mandatory')
sPDUOutletConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMName.setStatus('mandatory')
sPDUOutletConfigVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMOutletIndex.setStatus('mandatory')
sPDUOutletConfigVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMOutletName.setStatus('mandatory')
sPDUOutletConfigVMPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMPowerOnTime.setStatus('mandatory')
sPDUOutletConfigVMPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMPowerOffTime.setStatus('mandatory')
sPDUOutletConfigVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMRebootDuration.setStatus('mandatory')
sPDUOutletStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1), )
if mibBuilder.loadTexts: sPDUOutletStatusVMTable.setStatus('mandatory')
sPDUOutletStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusVMIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletStatusVMEntry.setStatus('mandatory')
sPDUOutletStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMIndex.setStatus('mandatory')
sPDUOutletStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMName.setStatus('mandatory')
sPDUOutletStatusVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletIndex.setStatus('mandatory')
sPDUOutletStatusVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletName.setStatus('mandatory')
sPDUOutletStatusVMOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusVMOn", 1), ("outletStatusVMOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletState.setStatus('mandatory')
sPDUOutletStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusVMCommandPending", 1), ("outletStatusVMNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMCommandPending.setStatus('mandatory')
sPDUIdentMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentMSPTableSize.setStatus('mandatory')
sPDUIdentMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: sPDUIdentMSPTable.setStatus('mandatory')
sPDUIdentMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUIdentMSPIndex"))
if mibBuilder.loadTexts: sPDUIdentMSPEntry.setStatus('mandatory')
sPDUIdentMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentMSPIndex.setStatus('mandatory')
sPDUIdentNameMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentNameMSP.setStatus('mandatory')
sPDUIdentHardwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRevMSP.setStatus('mandatory')
sPDUIdentFirmwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRevMSP.setStatus('mandatory')
sPDUIdentDateOfManufactureMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufactureMSP.setStatus('mandatory')
sPDUIdentModelNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumberMSP.setStatus('mandatory')
sPDUIdentSerialNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumberMSP.setStatus('mandatory')
sPDUMasterControlMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPTableSize.setStatus('mandatory')
sPDUMasterControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: sPDUMasterControlMSPTable.setStatus('mandatory')
sPDUMasterControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterControlMSPEntry.setStatus('mandatory')
sPDUMasterControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPIndex.setStatus('mandatory')
sPDUMasterControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPName.setStatus('mandatory')
sPDUMasterControlMSPCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noCommandAllMSP", 1), ("immediateAllOnMSP", 2), ("sequencedAllOnMSP", 3), ("immediateAllOffMSP", 4), ("gracefulAllRebootMSP", 5), ("immediateAllRebootMSP", 6), ("gracefulAllShutdownMSP", 7), ("overrideAllBatCapThreshMSP", 8), ("cancelAllPendingCommandsMSP", 9), ("restoreFactoryDefaultsMSP", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlMSPCommand.setStatus('mandatory')
sPDUMasterConfigMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigMSPTableSize.setStatus('mandatory')
sPDUMasterConfigMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2), )
if mibBuilder.loadTexts: sPDUMasterConfigMSPTable.setStatus('mandatory')
sPDUMasterConfigMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterConfigMSPEntry.setStatus('mandatory')
sPDUMasterConfigMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigMSPIndex.setStatus('mandatory')
sPDUMasterConfigMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPName.setStatus('mandatory')
sPDUMasterConfigMSPPowerOnTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPPowerOnTimeDelay.setStatus('mandatory')
sPDUMasterConfigMSPManualButton = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualButtonDisabled", 1), ("manualButtonEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPManualButton.setStatus('mandatory')
sPDUMasterStatusMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPTableSize.setStatus('mandatory')
sPDUMasterStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: sPDUMasterStatusMSPTable.setStatus('mandatory')
sPDUMasterStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterStatusMSPEntry.setStatus('mandatory')
sPDUMasterStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPIndex.setStatus('mandatory')
sPDUMasterStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPName.setStatus('mandatory')
sPDUMasterStatusMSPOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPOutletCount.setStatus('mandatory')
sPDUOutletControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1), )
if mibBuilder.loadTexts: sPDUOutletControlMSPTable.setStatus('mandatory')
sPDUOutletControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletControlMSPEntry.setStatus('mandatory')
sPDUOutletControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPIndex.setStatus('mandatory')
sPDUOutletControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPName.setStatus('mandatory')
sPDUOutletControlMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletIndex.setStatus('mandatory')
sPDUOutletControlMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletName.setStatus('mandatory')
sPDUOutletControlMSPOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOnMSP", 1), ("delayedOnMSP", 2), ("immediateOffMSP", 3), ("gracefulRebootMSP", 4), ("immediateRebootMSP", 5), ("gracefulshutdownMSP", 6), ("overrideBatCapThreshMSP", 7), ("cancelPendingCommandMSP", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletCommand.setStatus('mandatory')
sPDUOutletConfigMSPallTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1), )
if mibBuilder.loadTexts: sPDUOutletConfigMSPallTable.setStatus('mandatory')
sPDUOutletConfigMSPallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPallIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPallOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPallEntry.setStatus('mandatory')
sPDUOutletConfigMSPallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallIndex.setStatus('mandatory')
sPDUOutletConfigMSPallName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallName.setStatus('mandatory')
sPDUOutletConfigMSPallOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletIndex.setStatus('mandatory')
sPDUOutletConfigMSPallOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletName.setStatus('mandatory')
sPDUOutletConfigMSPallOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletCtrlMode.setStatus('mandatory')
sPDUOutletConfigMSPgsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1), )
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsTable.setStatus('mandatory')
sPDUOutletConfigMSPgsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPgsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPgsOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsEntry.setStatus('mandatory')
sPDUOutletConfigMSPgsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsIndex.setStatus('mandatory')
sPDUOutletConfigMSPgsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsName.setStatus('mandatory')
sPDUOutletConfigMSPgsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletIndex.setStatus('mandatory')
sPDUOutletConfigMSPgsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletName.setStatus('mandatory')
sPDUOutletConfigMSPgsOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletCtrlMode.setStatus('mandatory')
sPDUOutletConfigMSPgsDeviceConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deviceConfirmNo", 1), ("deviceConfirmYes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsDeviceConfirm.setStatus('mandatory')
sPDUOutletConfigMSPgsLowBattWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsLowBattWarning.setStatus('mandatory')
sPDUOutletConfigMSPgsLowBattMult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsLowBattMult.setStatus('mandatory')
sPDUOutletConfigMSPgsRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsRestartDelay.setStatus('mandatory')
sPDUOutletConfigMSPgsPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsPowerOnDelay.setStatus('mandatory')
sPDUOutletConfigMSPgsPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsPowerOffDelay.setStatus('mandatory')
sPDUOutletConfigMSPgsBattCapThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsBattCapThresh.setStatus('mandatory')
sPDUOutletConfigMSPgsRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsRebootDuration.setStatus('mandatory')
sPDUOutletConfigMSPannunTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1), )
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunTable.setStatus('mandatory')
sPDUOutletConfigMSPannunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPannunIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPannunOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunEntry.setStatus('mandatory')
sPDUOutletConfigMSPannunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunIndex.setStatus('mandatory')
sPDUOutletConfigMSPannunName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunName.setStatus('mandatory')
sPDUOutletConfigMSPannunOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletIndex.setStatus('mandatory')
sPDUOutletConfigMSPannunOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletName.setStatus('mandatory')
sPDUOutletConfigMSPannunOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletCtrlMode.setStatus('mandatory')
sPDUOutletConfigMSPannunInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialStateOff", 1), ("initialStateOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunInitialState.setStatus('mandatory')
sPDUOutletConfigMSPannunAlarmActionDly = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunAlarmActionDly.setStatus('mandatory')
sPDUOutletConfigMSPmupsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1), )
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsTable.setStatus('mandatory')
sPDUOutletConfigMSPmupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsEntry.setStatus('mandatory')
sPDUOutletConfigMSPmupsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsIndex.setStatus('mandatory')
sPDUOutletConfigMSPmupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsName.setStatus('mandatory')
sPDUOutletConfigMSPmupsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsOutletIndex.setStatus('mandatory')
sPDUOutletConfigMSPmupsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsOutletName.setStatus('mandatory')
sPDUOutletConfigMSPmupsZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone1.setStatus('mandatory')
sPDUOutletConfigMSPmupsZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone2.setStatus('mandatory')
sPDUOutletConfigMSPmupsZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone3.setStatus('mandatory')
sPDUOutletConfigMSPmupsZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone4.setStatus('mandatory')
sPDUOutletConfigMSPmupsP1LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1LowHum.setStatus('mandatory')
sPDUOutletConfigMSPmupsP1HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1HiHum.setStatus('mandatory')
sPDUOutletConfigMSPmupsP1LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1LowTemp.setStatus('mandatory')
sPDUOutletConfigMSPmupsP1HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1HiTemp.setStatus('mandatory')
sPDUOutletConfigMSPmupsP2LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2LowHum.setStatus('mandatory')
sPDUOutletConfigMSPmupsP2HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2HiHum.setStatus('mandatory')
sPDUOutletConfigMSPmupsP2LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2LowTemp.setStatus('mandatory')
sPDUOutletConfigMSPmupsP2HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2HiTemp.setStatus('mandatory')
sPDUOutletStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1), )
if mibBuilder.loadTexts: sPDUOutletStatusMSPTable.setStatus('mandatory')
sPDUOutletStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusMSPOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletStatusMSPEntry.setStatus('mandatory')
sPDUOutletStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPIndex.setStatus('mandatory')
sPDUOutletStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPName.setStatus('mandatory')
sPDUOutletStatusMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletIndex.setStatus('mandatory')
sPDUOutletStatusMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletName.setStatus('mandatory')
sPDUOutletStatusMSPOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusMSPOn", 1), ("outletStatusMSPOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletState.setStatus('mandatory')
sPDUOutletStatusMSPCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusMSPCommandPending", 1), ("outletStatusMSPNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPCommandPending.setStatus('mandatory')
sPDUOutletStatusMSPOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletCtrlMode.setStatus('mandatory')
rPDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentName.setStatus('mandatory')
rPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentHardwareRev.setStatus('mandatory')
rPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentFirmwareRev.setStatus('mandatory')
rPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDateOfManufacture.setStatus('mandatory')
rPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentModelNumber.setStatus('mandatory')
rPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentSerialNumber.setStatus('mandatory')
rPDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceRating.setStatus('mandatory')
rPDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumOutlets.setStatus('mandatory')
rPDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumPhases.setStatus('mandatory')
rPDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumBreakers.setStatus('mandatory')
rPDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceBreakerRating.setStatus('mandatory')
rPDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceOrientation.setStatus('mandatory')
rPDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceOutletLayout.setStatus('mandatory')
rPDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceDisplayOrientation.setStatus('mandatory')
rPDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceLinetoLineVoltage.setStatus('mandatory')
rPDUIdentDevicePowerWatts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDevicePowerWatts.setStatus('mandatory')
rPDUIdentDevicePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDevicePowerFactor.setStatus('mandatory')
rPDUIdentDevicePowerVA = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDevicePowerVA.setStatus('mandatory')
rPDUIdentDeviceLinetoNeutralVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceLinetoNeutralVoltage.setStatus('mandatory')
rPDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxPhaseLoad.setStatus('mandatory')
rPDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevNumPhases.setStatus('mandatory')
rPDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxBankLoad.setStatus('mandatory')
rPDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevNumBanks.setStatus('mandatory')
rPDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankTableSize.setStatus('mandatory')
rPDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6), )
if mibBuilder.loadTexts: rPDULoadDevBankTable.setStatus('mandatory')
rPDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevBankIndex"))
if mibBuilder.loadTexts: rPDULoadDevBankEntry.setStatus('mandatory')
rPDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankIndex.setStatus('mandatory')
rPDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankNumber.setStatus('mandatory')
rPDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankMaxLoad.setStatus('mandatory')
rPDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxOutletTableSize.setStatus('mandatory')
rPDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8), )
if mibBuilder.loadTexts: rPDULoadDevMaxOutletTable.setStatus('mandatory')
rPDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevOutletIndex"))
if mibBuilder.loadTexts: rPDULoadDevMaxOutletEntry.setStatus('mandatory')
rPDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevOutletIndex.setStatus('mandatory')
rPDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevOutletNumber.setStatus('mandatory')
rPDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxOutletLoad.setStatus('mandatory')
rPDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1), )
if mibBuilder.loadTexts: rPDULoadPhaseConfigTable.setStatus('mandatory')
rPDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadPhaseConfigIndex"))
if mibBuilder.loadTexts: rPDULoadPhaseConfigEntry.setStatus('mandatory')
rPDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadPhaseConfigIndex.setStatus('mandatory')
rPDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigLowLoadThreshold.setStatus('mandatory')
rPDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigNearOverloadThreshold.setStatus('mandatory')
rPDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigOverloadThreshold.setStatus('mandatory')
rPDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadPhaseConfigAlarm.setStatus('mandatory')
rPDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1), )
if mibBuilder.loadTexts: rPDULoadStatusTable.setStatus('mandatory')
rPDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadStatusIndex"))
if mibBuilder.loadTexts: rPDULoadStatusEntry.setStatus('mandatory')
rPDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusIndex.setStatus('mandatory')
rPDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusLoad.setStatus('mandatory')
rPDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusLoadState.setStatus('mandatory')
rPDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusPhaseNumber.setStatus('mandatory')
rPDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusBankNumber.setStatus('mandatory')
rPDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1), )
if mibBuilder.loadTexts: rPDULoadBankConfigTable.setStatus('mandatory')
rPDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDULoadBankConfigIndex"))
if mibBuilder.loadTexts: rPDULoadBankConfigEntry.setStatus('mandatory')
rPDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadBankConfigIndex.setStatus('mandatory')
rPDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigLowLoadThreshold.setStatus('mandatory')
rPDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigNearOverloadThreshold.setStatus('mandatory')
rPDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigOverloadThreshold.setStatus('mandatory')
rPDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadBankConfigAlarm.setStatus('mandatory')
rPDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletDevCommand.setStatus('mandatory')
rPDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletDevColdstartDelay.setStatus('mandatory')
rPDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevNumCntrlOutlets.setStatus('mandatory')
rPDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevNumTotalOutlets.setStatus('mandatory')
rPDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevMonitoredOutlets.setStatus('mandatory')
rPDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1), )
if mibBuilder.loadTexts: rPDUOutletPhaseTable.setStatus('mandatory')
rPDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletPhaseIndex"))
if mibBuilder.loadTexts: rPDUOutletPhaseEntry.setStatus('mandatory')
rPDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletPhaseIndex.setStatus('mandatory')
rPDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletPhaseOverloadRestriction.setStatus('mandatory')
rPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1), )
if mibBuilder.loadTexts: rPDUOutletControlTable.setStatus('mandatory')
rPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletControlIndex"))
if mibBuilder.loadTexts: rPDUOutletControlEntry.setStatus('mandatory')
rPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlIndex.setStatus('mandatory')
rPDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletName.setStatus('mandatory')
rPDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletPhase.setStatus('mandatory')
rPDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletControlOutletCommand.setStatus('mandatory')
rPDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletBank.setStatus('mandatory')
rPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1), )
if mibBuilder.loadTexts: rPDUOutletConfigTable.setStatus('mandatory')
rPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigIndex"))
if mibBuilder.loadTexts: rPDUOutletConfigEntry.setStatus('mandatory')
rPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigIndex.setStatus('mandatory')
rPDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigOutletName.setStatus('mandatory')
rPDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigOutletPhase.setStatus('mandatory')
rPDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigPowerOnTime.setStatus('mandatory')
rPDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigPowerOffTime.setStatus('mandatory')
rPDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigRebootDuration.setStatus('mandatory')
rPDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigOutletBank.setStatus('mandatory')
rPDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredTableSize.setStatus('mandatory')
rPDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3), )
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredTable.setStatus('mandatory')
rPDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigMonitoredIndex"))
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredEntry.setStatus('mandatory')
rPDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredIndex.setStatus('mandatory')
rPDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredName.setStatus('mandatory')
rPDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredNumber.setStatus('mandatory')
rPDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredLowLoadThreshold.setStatus('mandatory')
rPDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredNearOverloadThreshold.setStatus('mandatory')
rPDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredOverloadThreshold.setStatus('mandatory')
rPDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1), )
if mibBuilder.loadTexts: rPDUOutletStatusTable.setStatus('mandatory')
rPDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletStatusIndex"))
if mibBuilder.loadTexts: rPDUOutletStatusEntry.setStatus('mandatory')
rPDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusIndex.setStatus('mandatory')
rPDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletName.setStatus('mandatory')
rPDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletPhase.setStatus('mandatory')
rPDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletState.setStatus('mandatory')
rPDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusCommandPending.setStatus('mandatory')
rPDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletBank.setStatus('mandatory')
rPDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusLoad.setStatus('mandatory')
rPDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1), )
if mibBuilder.loadTexts: rPDUOutletBankTable.setStatus('mandatory')
rPDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUOutletBankIndex"))
if mibBuilder.loadTexts: rPDUOutletBankEntry.setStatus('mandatory')
rPDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletBankIndex.setStatus('mandatory')
rPDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletBankOverloadRestriction.setStatus('mandatory')
rPDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOneOk", 1), ("powerSupplyOneFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupply1Status.setStatus('mandatory')
rPDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powerSupplyTwoOk", 1), ("powerSupplyTwoFailed", 2), ("powerSupplyTwoNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupply2Status.setStatus('mandatory')
rPDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyOneFailed", 2), ("powerSupplyTwoFailed", 3), ("powerSupplyOneandTwoFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupplyAlarm.setStatus('mandatory')
rPDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankTableSize.setStatus('mandatory')
rPDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2), )
if mibBuilder.loadTexts: rPDUStatusBankTable.setStatus('mandatory')
rPDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusBankIndex"))
if mibBuilder.loadTexts: rPDUStatusBankEntry.setStatus('mandatory')
rPDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankIndex.setStatus('mandatory')
rPDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankNumber.setStatus('mandatory')
rPDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bankLoadNormal", 1), ("bankLoadLow", 2), ("bankLoadNearOverload", 3), ("bankLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankState.setStatus('mandatory')
rPDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseTableSize.setStatus('mandatory')
rPDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4), )
if mibBuilder.loadTexts: rPDUStatusPhaseTable.setStatus('mandatory')
rPDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusPhaseIndex"))
if mibBuilder.loadTexts: rPDUStatusPhaseEntry.setStatus('mandatory')
rPDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseIndex.setStatus('mandatory')
rPDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseNumber.setStatus('mandatory')
rPDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseState.setStatus('mandatory')
rPDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletTableSize.setStatus('mandatory')
rPDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6), )
if mibBuilder.loadTexts: rPDUStatusOutletTable.setStatus('mandatory')
rPDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDUStatusOutletIndex"))
if mibBuilder.loadTexts: rPDUStatusOutletEntry.setStatus('mandatory')
rPDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletIndex.setStatus('mandatory')
rPDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletNumber.setStatus('mandatory')
rPDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outletLoadNormal", 1), ("outletLoadLow", 2), ("outletLoadNearOverload", 3), ("outletLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletState.setStatus('mandatory')
class Rpdu2OutletPhaseLayoutType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6))

rPDU2IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentTableSize.setStatus('mandatory')
rPDU2IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2), )
if mibBuilder.loadTexts: rPDU2IdentTable.setStatus('mandatory')
rPDU2IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2IdentIndex"))
if mibBuilder.loadTexts: rPDU2IdentEntry.setStatus('mandatory')
rPDU2IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentIndex.setStatus('mandatory')
rPDU2IdentModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentModule.setStatus('mandatory')
rPDU2IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentName.setStatus('mandatory')
rPDU2IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentLocation.setStatus('mandatory')
rPDU2IdentHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentHardwareRev.setStatus('mandatory')
rPDU2IdentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentFirmwareRev.setStatus('mandatory')
rPDU2IdentDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentDateOfManufacture.setStatus('mandatory')
rPDU2IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentModelNumber.setStatus('mandatory')
rPDU2IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentSerialNumber.setStatus('mandatory')
rPDU2IdentContact = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentContact.setStatus('mandatory')
rPDU2IdentBootMonitorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentBootMonitorRev.setStatus('mandatory')
rPDU2IdentLongDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentLongDescription.setStatus('mandatory')
rPDU2IdentNMCSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentNMCSerialNumber.setStatus('mandatory')
rPDU2IndentAppBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IndentAppBuildDate.setStatus('mandatory')
rPDU2IndentAOSBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IndentAOSBuildDate.setStatus('mandatory')
rPDU2IndentBootMonBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IndentBootMonBuildDate.setStatus('mandatory')
rPDU2DeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceTableSize.setStatus('mandatory')
rPDU2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4))
rPDU2DeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1), )
if mibBuilder.loadTexts: rPDU2DeviceConfigTable.setStatus('mandatory')
rPDU2DeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceConfigIndex"))
if mibBuilder.loadTexts: rPDU2DeviceConfigEntry.setStatus('mandatory')
rPDU2DeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceConfigIndex.setStatus('mandatory')
rPDU2DeviceConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigModule.setStatus('mandatory')
rPDU2DeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigName.setStatus('mandatory')
rPDU2DeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigLocation.setStatus('mandatory')
rPDU2DeviceConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDisplayOrientation.setStatus('mandatory')
rPDU2DeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigColdstartDelay.setStatus('mandatory')
rPDU2DeviceConfigLowLoadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigLowLoadPowerThreshold.setStatus('mandatory')
rPDU2DeviceConfigNearOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigNearOverloadPowerThreshold.setStatus('mandatory')
rPDU2DeviceConfigOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOverloadPowerThreshold.setStatus('mandatory')
rPDU2DeviceConfigDevicePeakPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDevicePeakPowerReset.setStatus('mandatory')
rPDU2DeviceConfigDeviceEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDeviceEnergyReset.setStatus('mandatory')
rPDU2DeviceConfigOutletsEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOutletsEnergyReset.setStatus('mandatory')
rPDU2DeviceConfigOutletsPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOutletsPeakLoadReset.setStatus('mandatory')
rPDU2DeviceConfigContact = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigContact.setStatus('mandatory')
rPDU2DevicePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2), )
if mibBuilder.loadTexts: rPDU2DevicePropertiesTable.setStatus('mandatory')
rPDU2DevicePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DevicePropertiesIndex"))
if mibBuilder.loadTexts: rPDU2DevicePropertiesEntry.setStatus('mandatory')
rPDU2DevicePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesIndex.setStatus('mandatory')
rPDU2DevicePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesModule.setStatus('mandatory')
rPDU2DevicePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesName.setStatus('mandatory')
rPDU2DevicePropertiesNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumOutlets.setStatus('mandatory')
rPDU2DevicePropertiesNumSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumSwitchedOutlets.setStatus('mandatory')
rPDU2DevicePropertiesNumMeteredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumMeteredOutlets.setStatus('mandatory')
rPDU2DevicePropertiesNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumPhases.setStatus('mandatory')
rPDU2DevicePropertiesNumMeteredBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumMeteredBanks.setStatus('mandatory')
rPDU2DevicePropertiesMaxCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesMaxCurrentRating.setStatus('mandatory')
rPDU2DevicePropertiesOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("verticalISXv2", 3), ("verticalISXv3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesOrientation.setStatus('mandatory')
rPDU2DevicePropertiesOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9), ("seqPhToNPhToPhPhToN", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesOutletLayout.setStatus('mandatory')
rPDU2DevicePropertiesMaxPhaseCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesMaxPhaseCurrentRating.setStatus('mandatory')
rPDU2DevicePropertiesDevicePowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesDevicePowerRating.setStatus('mandatory')
rPDU2DeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3), )
if mibBuilder.loadTexts: rPDU2DeviceStatusTable.setStatus('mandatory')
rPDU2DeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceStatusIndex"))
if mibBuilder.loadTexts: rPDU2DeviceStatusEntry.setStatus('mandatory')
rPDU2DeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusIndex.setStatus('mandatory')
rPDU2DeviceStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusModule.setStatus('mandatory')
rPDU2DeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusName.setStatus('mandatory')
rPDU2DeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4), ("notsupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusLoadState.setStatus('mandatory')
rPDU2DeviceStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPower.setStatus('mandatory')
rPDU2DeviceStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPower.setStatus('mandatory')
rPDU2DeviceStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPowerTimestamp.setStatus('mandatory')
rPDU2DeviceStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPowerStartTime.setStatus('mandatory')
rPDU2DeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusEnergy.setStatus('mandatory')
rPDU2DeviceStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusEnergyStartTime.setStatus('mandatory')
rPDU2DeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusCommandPending.setStatus('mandatory')
rPDU2DeviceStatusPowerSupplyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupplyAlarm.setStatus('mandatory')
rPDU2DeviceStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupply1Status.setStatus('mandatory')
rPDU2DeviceStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupply2Status.setStatus('mandatory')
rPDU2DeviceStatusOutletsEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusOutletsEnergyStartTime.setStatus('mandatory')
rPDU2DeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusApparentPower.setStatus('mandatory')
rPDU2DeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerFactor.setStatus('mandatory')
rPDU2DeviceStatusNPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notNPS", 1), ("host", 2), ("guest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusNPSType.setStatus('mandatory')
rPDU2DeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4), )
if mibBuilder.loadTexts: rPDU2DeviceControlTable.setStatus('mandatory')
rPDU2DeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceControlIndex"))
if mibBuilder.loadTexts: rPDU2DeviceControlEntry.setStatus('mandatory')
rPDU2DeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlIndex.setStatus('mandatory')
rPDU2DeviceControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlModule.setStatus('mandatory')
rPDU2DeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlName.setStatus('mandatory')
rPDU2DeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateAllOn", 1), ("delayedAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllReboot", 5), ("noCommandAll", 6), ("delayedAllOff", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceControlCommand.setStatus('mandatory')
rPDU2PhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseTableSize.setStatus('mandatory')
rPDU2Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6))
rPDU2PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1), )
if mibBuilder.loadTexts: rPDU2PhaseConfigTable.setStatus('mandatory')
rPDU2PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseConfigIndex"))
if mibBuilder.loadTexts: rPDU2PhaseConfigEntry.setStatus('mandatory')
rPDU2PhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigIndex.setStatus('mandatory')
rPDU2PhaseConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigModule.setStatus('mandatory')
rPDU2PhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigNumber.setStatus('mandatory')
rPDU2PhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigOverloadRestriction.setStatus('mandatory')
rPDU2PhaseConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigLowLoadCurrentThreshold.setStatus('mandatory')
rPDU2PhaseConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigNearOverloadCurrentThreshold.setStatus('mandatory')
rPDU2PhaseConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigOverloadCurrentThreshold.setStatus('mandatory')
rPDU2PhaseConfigPhasePeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigPhasePeakCurrentReset.setStatus('mandatory')
rPDU2PhasePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2), )
if mibBuilder.loadTexts: rPDU2PhasePropertiesTable.setStatus('mandatory')
rPDU2PhasePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhasePropertiesIndex"))
if mibBuilder.loadTexts: rPDU2PhasePropertiesEntry.setStatus('mandatory')
rPDU2PhasePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesIndex.setStatus('mandatory')
rPDU2PhasePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesModule.setStatus('mandatory')
rPDU2PhasePropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesNumber.setStatus('mandatory')
rPDU2PhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3), )
if mibBuilder.loadTexts: rPDU2PhaseStatusTable.setStatus('mandatory')
rPDU2PhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseStatusIndex"))
if mibBuilder.loadTexts: rPDU2PhaseStatusEntry.setStatus('mandatory')
rPDU2PhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusIndex.setStatus('mandatory')
rPDU2PhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusModule.setStatus('mandatory')
rPDU2PhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusNumber.setStatus('mandatory')
rPDU2PhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusLoadState.setStatus('mandatory')
rPDU2PhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusCurrent.setStatus('mandatory')
rPDU2PhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusVoltage.setStatus('mandatory')
rPDU2PhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPower.setStatus('mandatory')
rPDU2PhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusApparentPower.setStatus('mandatory')
rPDU2PhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPowerFactor.setStatus('mandatory')
rPDU2PhaseStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrent.setStatus('mandatory')
rPDU2PhaseStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrentTimestamp.setStatus('mandatory')
rPDU2PhaseStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrentStartTime.setStatus('mandatory')
rPDU2BankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankTableSize.setStatus('mandatory')
rPDU2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8))
rPDU2BankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1), )
if mibBuilder.loadTexts: rPDU2BankConfigTable.setStatus('mandatory')
rPDU2BankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankConfigIndex"))
if mibBuilder.loadTexts: rPDU2BankConfigEntry.setStatus('mandatory')
rPDU2BankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigIndex.setStatus('mandatory')
rPDU2BankConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigModule.setStatus('mandatory')
rPDU2BankConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigNumber.setStatus('mandatory')
rPDU2BankConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigOverloadRestriction.setStatus('mandatory')
rPDU2BankConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigLowLoadCurrentThreshold.setStatus('mandatory')
rPDU2BankConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigNearOverloadCurrentThreshold.setStatus('mandatory')
rPDU2BankConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigOverloadCurrentThreshold.setStatus('mandatory')
rPDU2BankConfigBankPeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigBankPeakCurrentReset.setStatus('mandatory')
rPDU2BankPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2), )
if mibBuilder.loadTexts: rPDU2BankPropertiesTable.setStatus('mandatory')
rPDU2BankPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2BankPropertiesEntry.setStatus('mandatory')
rPDU2BankPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesIndex.setStatus('mandatory')
rPDU2BankPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesModule.setStatus('mandatory')
rPDU2BankPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesNumber.setStatus('mandatory')
rPDU2BankPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 4), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesPhaseLayout.setStatus('mandatory')
rPDU2BankPropertiesBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesBreakerRating.setStatus('mandatory')
rPDU2BankStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3), )
if mibBuilder.loadTexts: rPDU2BankStatusTable.setStatus('mandatory')
rPDU2BankStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2BankStatusIndex"))
if mibBuilder.loadTexts: rPDU2BankStatusEntry.setStatus('mandatory')
rPDU2BankStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusIndex.setStatus('mandatory')
rPDU2BankStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusModule.setStatus('mandatory')
rPDU2BankStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusNumber.setStatus('mandatory')
rPDU2BankStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusLoadState.setStatus('mandatory')
rPDU2BankStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusCurrent.setStatus('mandatory')
rPDU2BankStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrent.setStatus('mandatory')
rPDU2BankStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrentTimestamp.setStatus('mandatory')
rPDU2BankStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrentStartTime.setStatus('mandatory')
rPDU2Outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9))
rPDU2OutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedTableSize.setStatus('mandatory')
rPDU2OutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2))
rPDU2OutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1), )
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigTable.setStatus('mandatory')
rPDU2OutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigEntry.setStatus('mandatory')
rPDU2OutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigIndex.setStatus('mandatory')
rPDU2OutletSwitchedConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigModule.setStatus('mandatory')
rPDU2OutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigName.setStatus('mandatory')
rPDU2OutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigNumber.setStatus('mandatory')
rPDU2OutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigPowerOnTime.setStatus('mandatory')
rPDU2OutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigPowerOffTime.setStatus('mandatory')
rPDU2OutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigRebootDuration.setStatus('mandatory')
rPDU2OutletSwitchedConfigExternalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigExternalLink.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2), )
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesTable.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesEntry.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesIndex.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesModule.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesName.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesNumber.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesPhaseLayout.setStatus('mandatory')
rPDU2OutletSwitchedPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesBank.setStatus('mandatory')
rPDU2OutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3), )
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusTable.setStatus('mandatory')
rPDU2OutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusEntry.setStatus('mandatory')
rPDU2OutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusIndex.setStatus('mandatory')
rPDU2OutletSwitchedStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusModule.setStatus('mandatory')
rPDU2OutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusName.setStatus('mandatory')
rPDU2OutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusNumber.setStatus('mandatory')
rPDU2OutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusState.setStatus('mandatory')
rPDU2OutletSwitchedStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusCommandPending.setStatus('mandatory')
rPDU2OutletSwitchedStatusExternalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusExternalLink.setStatus('mandatory')
rPDU2OutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4), )
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlTable.setStatus('mandatory')
rPDU2OutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedControlIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlEntry.setStatus('mandatory')
rPDU2OutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlIndex.setStatus('mandatory')
rPDU2OutletSwitchedControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlModule.setStatus('mandatory')
rPDU2OutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlName.setStatus('mandatory')
rPDU2OutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlNumber.setStatus('mandatory')
rPDU2OutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("outletUnknown", 4), ("delayedOn", 5), ("delayedOff", 6), ("delayedReboot", 7), ("cancelPendingCommand", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlCommand.setStatus('mandatory')
rPDU2OutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredTableSize.setStatus('mandatory')
rPDU2OutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4))
rPDU2OutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1), )
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigTable.setStatus('mandatory')
rPDU2OutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredConfigIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigEntry.setStatus('mandatory')
rPDU2OutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigIndex.setStatus('mandatory')
rPDU2OutletMeteredConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigModule.setStatus('mandatory')
rPDU2OutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigName.setStatus('mandatory')
rPDU2OutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigNumber.setStatus('mandatory')
rPDU2OutletMeteredConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigLowLoadCurrentThreshold.setStatus('mandatory')
rPDU2OutletMeteredConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigNearOverloadCurrentThreshold.setStatus('mandatory')
rPDU2OutletMeteredConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigOverloadCurrentThreshold.setStatus('mandatory')
rPDU2OutletMeteredConfigExternalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigExternalLink.setStatus('mandatory')
rPDU2OutletMeteredPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2), )
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesTable.setStatus('mandatory')
rPDU2OutletMeteredPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesEntry.setStatus('mandatory')
rPDU2OutletMeteredPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesIndex.setStatus('mandatory')
rPDU2OutletMeteredPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesModule.setStatus('mandatory')
rPDU2OutletMeteredPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesName.setStatus('mandatory')
rPDU2OutletMeteredPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesNumber.setStatus('mandatory')
rPDU2OutletMeteredPropertiesLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesLayout.setStatus('mandatory')
rPDU2OutletMeteredPropertiesPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesPowerRating.setStatus('mandatory')
rPDU2OutletMeteredPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesBank.setStatus('mandatory')
rPDU2OutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3), )
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusTable.setStatus('mandatory')
rPDU2OutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredStatusIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusEntry.setStatus('mandatory')
rPDU2OutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusIndex.setStatus('mandatory')
rPDU2OutletMeteredStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusModule.setStatus('mandatory')
rPDU2OutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusName.setStatus('mandatory')
rPDU2OutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusNumber.setStatus('mandatory')
rPDU2OutletMeteredStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusState.setStatus('mandatory')
rPDU2OutletMeteredStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusCurrent.setStatus('mandatory')
rPDU2OutletMeteredStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPower.setStatus('mandatory')
rPDU2OutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPower.setStatus('mandatory')
rPDU2OutletMeteredStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPowerTimestamp.setStatus('mandatory')
rPDU2OutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPowerStartTime.setStatus('mandatory')
rPDU2OutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusEnergy.setStatus('mandatory')
rPDU2OutletMeteredStatusReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusReceptacleType.setStatus('mandatory')
rPDU2OutletMeteredStatusExternalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusExternalLink.setStatus('mandatory')
rPDU2Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10))
rPDU2SensorTempHumidityTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityTableSize.setStatus('mandatory')
rPDU2SensorTempHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2))
rPDU2SensorTempHumidityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1), )
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTable.setStatus('mandatory')
rPDU2SensorTempHumidityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityConfigIndex"))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigEntry.setStatus('mandatory')
rPDU2SensorTempHumidityConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigIndex.setStatus('mandatory')
rPDU2SensorTempHumidityConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigModule.setStatus('mandatory')
rPDU2SensorTempHumidityConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigName.setStatus('mandatory')
rPDU2SensorTempHumidityConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigNumber.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTemperatureAlarmEnable.setStatus('mandatory')
rPDU2SensorTempHumidityConfigHumidityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityAlarmEnable.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempMaxThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempMaxThreshF.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempHighThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHighThreshF.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempHysteresisF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHysteresisF.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempMaxThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempMaxThreshC.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempHighThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHighThreshC.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempHysteresisC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHysteresisC.setStatus('mandatory')
rPDU2SensorTempHumidityConfigHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityLowThresh.setStatus('mandatory')
rPDU2SensorTempHumidityConfigHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityMinThresh.setStatus('mandatory')
rPDU2SensorTempHumidityConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityHysteresis.setStatus('mandatory')
rPDU2SensorTempHumidityConfigTempPeakReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempPeakReset.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2), )
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTable.setStatus('mandatory')
rPDU2SensorTempHumidityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityStatusIndex"))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusEntry.setStatus('mandatory')
rPDU2SensorTempHumidityStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusIndex.setStatus('mandatory')
rPDU2SensorTempHumidityStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusModule.setStatus('mandatory')
rPDU2SensorTempHumidityStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusName.setStatus('mandatory')
rPDU2SensorTempHumidityStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusNumber.setStatus('mandatory')
rPDU2SensorTempHumidityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("temperatureOnly", 1), ("temperatureHumidity", 2), ("commsLost", 3), ("notInstalled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusType.setStatus('mandatory')
rPDU2SensorTempHumidityStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusCommStatus.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempF.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempC.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempStatus.setStatus('mandatory')
rPDU2SensorTempHumidityStatusRelativeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusRelativeHumidity.setStatus('mandatory')
rPDU2SensorTempHumidityStatusHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusHumidityStatus.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempPeakF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempPeakF.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempPeakC.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempPeakTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempPeakTimestamp.setStatus('mandatory')
rPDU2SensorTempHumidityStatusTempPeakStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempPeakStartTime.setStatus('mandatory')
rPDU2SensorDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteTableSize.setStatus('mandatory')
rPDU2SensorDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4))
rPDU2SensorDiscreteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1), )
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigTable.setStatus('mandatory')
rPDU2SensorDiscreteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteConfigIndex"))
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigEntry.setStatus('mandatory')
rPDU2SensorDiscreteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigIndex.setStatus('mandatory')
rPDU2SensorDiscreteConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigModule.setStatus('mandatory')
rPDU2SensorDiscreteConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigName.setStatus('mandatory')
rPDU2SensorDiscreteConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigNumber.setStatus('mandatory')
rPDU2SensorDiscreteConfigNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigNormalState.setStatus('mandatory')
rPDU2SensorDiscreteConfigAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigAbnormalSeverity.setStatus('mandatory')
rPDU2SensorDiscreteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2), )
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusTable.setStatus('mandatory')
rPDU2SensorDiscreteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteStatusIndex"))
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusEntry.setStatus('mandatory')
rPDU2SensorDiscreteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusIndex.setStatus('mandatory')
rPDU2SensorDiscreteStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusModule.setStatus('mandatory')
rPDU2SensorDiscreteStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusName.setStatus('mandatory')
rPDU2SensorDiscreteStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusNumber.setStatus('mandatory')
rPDU2SensorDiscreteStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notConnected", 1), ("doorContactSensor", 2), ("smokeSensor", 3), ("motionDetector", 4), ("vibrationSensor", 5), ("dryContactSensor", 6), ("spotLeakSensor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusType.setStatus('mandatory')
rPDU2SensorDiscreteStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusCommStatus.setStatus('mandatory')
rPDU2SensorDiscreteStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusCurrentState.setStatus('mandatory')
rPDU2SensorDiscreteStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusAlarmState.setStatus('mandatory')
rPDU2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11))
rPDU2GroupNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupNumberOfDevices.setStatus('mandatory')
rPDU2GroupTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupTotalPower.setStatus('mandatory')
rPDU2GroupTotalEnergy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupTotalEnergy.setStatus('mandatory')
rPDU2GroupEnergyReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2GroupEnergyReset.setStatus('mandatory')
rPDU2PhaseToPhaseStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusTableSize.setStatus('mandatory')
rPDU2PhaseToPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13))
rPDU2PhaseToPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1), )
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusTable.setStatus('mandatory')
rPDU2PhaseToPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseToPhaseStatusIndex"))
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusEntry.setStatus('mandatory')
rPDU2PhaseToPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusIndex.setStatus('mandatory')
rPDU2PhaseToPhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusModule.setStatus('mandatory')
rPDU2PhaseToPhaseStatusVoltage1to2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage1to2.setStatus('mandatory')
rPDU2PhaseToPhaseStatusVoltage2to3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage2to3.setStatus('mandatory')
rPDU2PhaseToPhaseStatusVoltage3to1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage3to1.setStatus('mandatory')
ePDUDeviceStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusTableSize.setStatus('mandatory')
ePDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2))
ePDUDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1), )
if mibBuilder.loadTexts: ePDUDeviceStatusTable.setStatus('mandatory')
ePDUDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUDeviceStatusIndex"))
if mibBuilder.loadTexts: ePDUDeviceStatusEntry.setStatus('mandatory')
ePDUDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusIndex.setStatus('mandatory')
ePDUDeviceStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusModule.setStatus('mandatory')
ePDUDeviceStatusVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusVersion.setStatus('mandatory')
ePDUDeviceStatusModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusModelNumber.setStatus('mandatory')
ePDUDeviceStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusSerialNumber.setStatus('mandatory')
ePDUDeviceStatusNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusNumPhases.setStatus('mandatory')
ePDUDeviceStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusActivePower.setStatus('mandatory')
ePDUDeviceStatusReactivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusReactivePower.setStatus('mandatory')
ePDUDeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusApparentPower.setStatus('mandatory')
ePDUDeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusPowerFactor.setStatus('mandatory')
ePDUDeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusEnergy.setStatus('mandatory')
ePDUDeviceStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceStatusFrequency.setStatus('mandatory')
ePDUDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2), )
if mibBuilder.loadTexts: ePDUDeviceControlTable.setStatus('mandatory')
ePDUDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUDeviceControlIndex"))
if mibBuilder.loadTexts: ePDUDeviceControlEntry.setStatus('mandatory')
ePDUDeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceControlIndex.setStatus('mandatory')
ePDUDeviceControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUDeviceControlModule.setStatus('mandatory')
ePDUDeviceControlReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUDeviceControlReboot.setStatus('mandatory')
ePDUDeviceControlEngeryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUDeviceControlEngeryReset.setStatus('mandatory')
ePDUDeviceControlBeepAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUDeviceControlBeepAlarm.setStatus('mandatory')
ePDUPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseTableSize.setStatus('mandatory')
ePDUPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4))
ePDUPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1), )
if mibBuilder.loadTexts: ePDUPhaseConfigTable.setStatus('mandatory')
ePDUPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUPhaseConfigIndex"))
if mibBuilder.loadTexts: ePDUPhaseConfigEntry.setStatus('mandatory')
ePDUPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseConfigIndex.setStatus('mandatory')
ePDUPhaseConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseConfigModule.setStatus('mandatory')
ePDUPhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseConfigNumber.setStatus('mandatory')
ePDUPhaseConfigOverVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUPhaseConfigOverVoltageThreshold.setStatus('mandatory')
ePDUPhaseConfigLowVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUPhaseConfigLowVoltageThreshold.setStatus('mandatory')
ePDUPhaseConfigOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUPhaseConfigOverCurrentThreshold.setStatus('mandatory')
ePDUPhaseConfigLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUPhaseConfigLowCurrentThreshold.setStatus('mandatory')
ePDUPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2), )
if mibBuilder.loadTexts: ePDUPhaseStatusTable.setStatus('mandatory')
ePDUPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUPhaseStatusIndex"))
if mibBuilder.loadTexts: ePDUPhaseStatusEntry.setStatus('mandatory')
ePDUPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusIndex.setStatus('mandatory')
ePDUPhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusModule.setStatus('mandatory')
ePDUPhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusNumber.setStatus('mandatory')
ePDUPhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusVoltage.setStatus('mandatory')
ePDUPhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusCurrent.setStatus('mandatory')
ePDUPhaseStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusActivePower.setStatus('mandatory')
ePDUPhaseStatusReactivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusReactivePower.setStatus('mandatory')
ePDUPhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusApparentPower.setStatus('mandatory')
ePDUPhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusPowerFactor.setStatus('mandatory')
ePDUPhaseStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPhaseStatusEnergy.setStatus('mandatory')
ePDUOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletTableSize.setStatus('mandatory')
ePDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6))
ePDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1), )
if mibBuilder.loadTexts: ePDUOutletStatusTable.setStatus('mandatory')
ePDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUOutletStatusIndex"))
if mibBuilder.loadTexts: ePDUOutletStatusEntry.setStatus('mandatory')
ePDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusIndex.setStatus('mandatory')
ePDUOutletStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusModule.setStatus('mandatory')
ePDUOutletStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusNumber.setStatus('mandatory')
ePDUOutletStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusState.setStatus('mandatory')
ePDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2), )
if mibBuilder.loadTexts: ePDUOutletControlTable.setStatus('mandatory')
ePDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUOutletControlIndex"))
if mibBuilder.loadTexts: ePDUOutletControlEntry.setStatus('mandatory')
ePDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlIndex.setStatus('mandatory')
ePDUOutletControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlModule.setStatus('mandatory')
ePDUOutletControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlNumber.setStatus('mandatory')
ePDUOutletControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("outletUnknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletControlCommand.setStatus('mandatory')
ePDUSensorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorTableSize.setStatus('mandatory')
ePDUSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8))
ePDUSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1), )
if mibBuilder.loadTexts: ePDUSensorConfigTable.setStatus('mandatory')
ePDUSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUSensorConfigIndex"))
if mibBuilder.loadTexts: ePDUSensorConfigEntry.setStatus('mandatory')
ePDUSensorConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorConfigIndex.setStatus('mandatory')
ePDUSensorConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorConfigModule.setStatus('mandatory')
ePDUSensorConfigTempMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUSensorConfigTempMaxThreshold.setStatus('mandatory')
ePDUSensorConfigTempMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUSensorConfigTempMinThreshold.setStatus('mandatory')
ePDUSensorConfigHumidityMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUSensorConfigHumidityMaxThreshold.setStatus('mandatory')
ePDUSensorConfigHumidityMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUSensorConfigHumidityMinThreshold.setStatus('mandatory')
ePDUSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2), )
if mibBuilder.loadTexts: ePDUSensorStatusTable.setStatus('mandatory')
ePDUSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "ePDUSensorStatusIndex"))
if mibBuilder.loadTexts: ePDUSensorStatusEntry.setStatus('mandatory')
ePDUSensorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorStatusIndex.setStatus('mandatory')
ePDUSensorStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorStatusModule.setStatus('mandatory')
ePDUSensorStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorStatusTemperature.setStatus('mandatory')
ePDUSensorStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 30, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUSensorStatusHumidity.setStatus('mandatory')
coolingUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1))
coolingUnitTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitTableSize.setStatus('mandatory')
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2), )
if mibBuilder.loadTexts: coolingUnitTable.setStatus('mandatory')
coolingUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"))
if mibBuilder.loadTexts: coolingUnitEntry.setStatus('mandatory')
coolingUnitTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitTableIndex.setStatus('mandatory')
coolingUnitAbout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3))
coolingUnitAboutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutTableSize.setStatus('mandatory')
coolingUnitAboutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2), )
if mibBuilder.loadTexts: coolingUnitAboutTable.setStatus('mandatory')
coolingUnitAboutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitAboutTableIndex"))
if mibBuilder.loadTexts: coolingUnitAboutEntry.setStatus('mandatory')
coolingUnitAboutTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitAboutTableIndex.setStatus('mandatory')
coolingUnitAboutDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutDescription.setStatus('mandatory')
coolingUnitAboutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutValue.setStatus('mandatory')
coolingUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4))
coolingUnitStatusAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1))
coolingUnitStatusAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogTableSize.setStatus('mandatory')
coolingUnitStatusAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2), )
if mibBuilder.loadTexts: coolingUnitStatusAnalogTable.setStatus('mandatory')
coolingUnitStatusAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitStatusAnalogEntry.setStatus('mandatory')
coolingUnitStatusAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitStatusAnalogTableIndex.setStatus('mandatory')
coolingUnitStatusAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogDescription.setStatus('mandatory')
coolingUnitStatusAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogValue.setStatus('mandatory')
coolingUnitStatusAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogUnits.setStatus('mandatory')
coolingUnitStatusAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogScale.setStatus('mandatory')
coolingUnitStatusDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2))
coolingUnitStatusDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTableSize.setStatus('mandatory')
coolingUnitStatusDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2), )
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTable.setStatus('mandatory')
coolingUnitStatusDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitStatusDiscreteEntry.setStatus('mandatory')
coolingUnitStatusDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTableIndex.setStatus('mandatory')
coolingUnitStatusDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteDescription.setStatus('mandatory')
coolingUnitStatusDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteValueAsString.setStatus('mandatory')
coolingUnitStatusDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteValueAsInteger.setStatus('mandatory')
coolingUnitStatusDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteIntegerReferenceKey.setStatus('mandatory')
coolingUnitConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5))
coolingUnitConfigurationAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1))
coolingUnitConfigurationAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTableSize.setStatus('mandatory')
coolingUnitConfigurationAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2), )
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTable.setStatus('mandatory')
coolingUnitConfigurationAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogEntry.setStatus('mandatory')
coolingUnitConfigurationAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTableIndex.setStatus('mandatory')
coolingUnitConfigurationAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogDescription.setStatus('mandatory')
coolingUnitConfigurationAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogValue.setStatus('mandatory')
coolingUnitConfigurationAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogUnits.setStatus('mandatory')
coolingUnitConfigurationAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogScale.setStatus('mandatory')
coolingUnitConfigurationAnalogAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogAccess.setStatus('mandatory')
coolingUnitConfigurationAnalogMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogMinimum.setStatus('mandatory')
coolingUnitConfigurationAnalogMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogMaximum.setStatus('mandatory')
coolingUnitConfigurationDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2))
coolingUnitConfigurationDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTableSize.setStatus('mandatory')
coolingUnitConfigurationDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2), )
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTable.setStatus('mandatory')
coolingUnitConfigurationDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteEntry.setStatus('mandatory')
coolingUnitConfigurationDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTableIndex.setStatus('mandatory')
coolingUnitConfigurationDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteDescription.setStatus('mandatory')
coolingUnitConfigurationDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteValueAsString.setStatus('mandatory')
coolingUnitConfigurationDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteValueAsInteger.setStatus('mandatory')
coolingUnitConfigurationDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteIntegerReferenceKey.setStatus('mandatory')
coolingUnitConfigurationDiscreteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteAccess.setStatus('mandatory')
coolingUnitConfigurationString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3))
coolingUnitConfigurationStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringTableSize.setStatus('mandatory')
coolingUnitConfigurationStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2), )
if mibBuilder.loadTexts: coolingUnitConfigurationStringTable.setStatus('mandatory')
coolingUnitConfigurationStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationStringTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationStringEntry.setStatus('mandatory')
coolingUnitConfigurationStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitConfigurationStringTableIndex.setStatus('mandatory')
coolingUnitConfigurationStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringDescription.setStatus('mandatory')
coolingUnitConfigurationStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationStringValue.setStatus('mandatory')
coolingUnitConfigurationStringMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringMaxLength.setStatus('mandatory')
coolingUnitConfigurationStringAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringAccess.setStatus('mandatory')
coolingUnitExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6))
coolingUnitExtendedAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1))
coolingUnitExtendedAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTableSize.setStatus('mandatory')
coolingUnitExtendedAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2), )
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTable.setStatus('mandatory')
coolingUnitExtendedAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedAnalogEntry.setStatus('mandatory')
coolingUnitExtendedAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTableIndex.setStatus('mandatory')
coolingUnitExtendedAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogDescription.setStatus('mandatory')
coolingUnitExtendedAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogValue.setStatus('mandatory')
coolingUnitExtendedAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogUnits.setStatus('mandatory')
coolingUnitExtendedAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogScale.setStatus('mandatory')
coolingUnitExtendedDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2))
coolingUnitExtendedDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTableSize.setStatus('mandatory')
coolingUnitExtendedDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2), )
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTable.setStatus('mandatory')
coolingUnitExtendedDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteEntry.setStatus('mandatory')
coolingUnitExtendedDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTableIndex.setStatus('mandatory')
coolingUnitExtendedDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteDescription.setStatus('mandatory')
coolingUnitExtendedDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteValueAsString.setStatus('mandatory')
coolingUnitExtendedDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteValueAsInteger.setStatus('mandatory')
coolingUnitExtendedDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteIntegerReferenceKey.setStatus('mandatory')
coolingUnitExtendedString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3))
coolingUnitExtendedStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringTableSize.setStatus('mandatory')
coolingUnitExtendedStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2), )
if mibBuilder.loadTexts: coolingUnitExtendedStringTable.setStatus('mandatory')
coolingUnitExtendedStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedStringTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedStringEntry.setStatus('mandatory')
coolingUnitExtendedStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coolingUnitExtendedStringTableIndex.setStatus('mandatory')
coolingUnitExtendedStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringDescription.setStatus('mandatory')
coolingUnitExtendedStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringValue.setStatus('mandatory')
dm3IdentSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionTableSize.setStatus('mandatory')
dm3IdentSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: dm3IdentSysDescriptionTable.setStatus('mandatory')
dm3IdentSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3IdentSysDescriptionIndex"))
if mibBuilder.loadTexts: dm3IdentSysDescriptionEntry.setStatus('mandatory')
dm3IdentSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionIndex.setStatus('mandatory')
dm3IdentSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionText.setStatus('mandatory')
dm3IdentSysModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysModel.setStatus('mandatory')
dm3IdentSysCntrlRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysCntrlRev.setStatus('mandatory')
dm3IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysFWVersion.setStatus('mandatory')
dm3ConfigSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionTableSize.setStatus('mandatory')
dm3ConfigSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2), )
if mibBuilder.loadTexts: dm3ConfigSysDescriptionTable.setStatus('mandatory')
dm3ConfigSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigSysDescriptionIndex"))
if mibBuilder.loadTexts: dm3ConfigSysDescriptionEntry.setStatus('mandatory')
dm3ConfigSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionIndex.setStatus('mandatory')
dm3ConfigSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionText.setStatus('mandatory')
dm3ConfigSysHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHighTempThresh.setStatus('mandatory')
dm3ConfigSysHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHighTempAlarm.setStatus('mandatory')
dm3ConfigSysLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysLowTempThresh.setStatus('mandatory')
dm3ConfigSysLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysLowTempAlarm.setStatus('mandatory')
dm3ConfigSysHardwareTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHardwareTempAlarm.setStatus('mandatory')
dm3ConfigSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysRemoteAccess.setStatus('mandatory')
dm3ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigLVDTableSize.setStatus('mandatory')
dm3ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2), )
if mibBuilder.loadTexts: dm3ConfigLVDTable.setStatus('mandatory')
dm3ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigLVDIndex"))
if mibBuilder.loadTexts: dm3ConfigLVDEntry.setStatus('mandatory')
dm3ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigLVDIndex.setStatus('mandatory')
dm3ConfigLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDName.setStatus('mandatory')
dm3ConfigLVDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDEnable.setStatus('mandatory')
dm3ConfigLVDTripThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDTripThresh.setStatus('mandatory')
dm3ConfigLVDResetThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDResetThresh.setStatus('mandatory')
dm3ConfigLVDOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDOpenAlarm.setStatus('mandatory')
dm3ConfigLVDHWAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDHWAlarm.setStatus('mandatory')
dm3ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattFloatVolt.setStatus('mandatory')
dm3ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattMaxRecharge.setStatus('mandatory')
dm3ConfigBattDischargeThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattDischargeThresh.setStatus('mandatory')
dm3ConfigBattDischargeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattDischargeAlarm.setStatus('mandatory')
dm3ConfigBattHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighVoltThresh.setStatus('mandatory')
dm3ConfigBattHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighVoltAlarm.setStatus('mandatory')
dm3ConfigBattLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowVoltThresh.setStatus('mandatory')
dm3ConfigBattLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowVoltAlarm.setStatus('mandatory')
dm3ConfigBattHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighTempThresh.setStatus('mandatory')
dm3ConfigBattHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighTempAlarm.setStatus('mandatory')
dm3ConfigBattLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowTempThresh.setStatus('mandatory')
dm3ConfigBattLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowTempAlarm.setStatus('mandatory')
dm3ConfigBattAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattAmpHour.setStatus('mandatory')
dm3ConfigCompMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tempcompOn", 1), ("tempcompOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigCompMethod.setStatus('mandatory')
dm3ConfigCompTempCoeff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigCompTempCoeff.setStatus('mandatory')
dm3ConfigHighKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigHighKneeTemp.setStatus('mandatory')
dm3ConfigLowKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLowKneeTemp.setStatus('mandatory')
dm3ConfigBattHwCurrentAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHwCurrentAlarm.setStatus('mandatory')
dm3ConfigBattHwTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHwTempAlarm.setStatus('mandatory')
dm3ConfigRectHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHighVoltThresh.setStatus('mandatory')
dm3ConfigRectLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectLowVoltThresh.setStatus('mandatory')
dm3ConfigRectFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailSafe.setStatus('mandatory')
dm3ConfigRectFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailComm.setStatus('mandatory')
dm3ConfigRectHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHighVoltAlarm.setStatus('mandatory')
dm3ConfigRectLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectLowVoltAlarm.setStatus('mandatory')
dm3ConfigRectConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectConfigAlarm.setStatus('mandatory')
dm3ConfigRect1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRect1ofNAlarm.setStatus('mandatory')
dm3ConfigRect2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRect2ofNAlarm.setStatus('mandatory')
dm3ConfigRectDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectDiagAlarm.setStatus('mandatory')
dm3ConfigRectImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectImbalanceAlarm.setStatus('mandatory')
dm3ConfigRectCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectCurrLimitAlarm.setStatus('mandatory')
dm3ConfigRectStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectStandbyAlarm.setStatus('mandatory')
dm3ConfigRectFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFanFailAlarm.setStatus('mandatory')
dm3ConfigRectFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailAlarm.setStatus('mandatory')
dm3ConfigRectHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHwVoltAlarm.setStatus('mandatory')
dm3ConfigConvHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHighVoltThresh.setStatus('mandatory')
dm3ConfigConvLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvLowVoltThresh.setStatus('mandatory')
dm3ConfigConvFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailSafe.setStatus('mandatory')
dm3ConfigConvSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvSetPoint.setStatus('mandatory')
dm3ConfigConvFailMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailMax.setStatus('mandatory')
dm3ConfigConvFailMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailMin.setStatus('mandatory')
dm3ConfigConvFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailComm.setStatus('mandatory')
dm3ConfigConvHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHighVoltAlarm.setStatus('mandatory')
dm3ConfigConvLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvLowVoltAlarm.setStatus('mandatory')
dm3ConfigConvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvConfigAlarm.setStatus('mandatory')
dm3ConfigConv1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConv1ofNAlarm.setStatus('mandatory')
dm3ConfigConv2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConv2ofNAlarm.setStatus('mandatory')
dm3ConfigConvDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvDiagAlarm.setStatus('mandatory')
dm3ConfigConvImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvImbalanceAlarm.setStatus('mandatory')
dm3ConfigConvCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvCurrLimitAlarm.setStatus('mandatory')
dm3ConfigConvStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvStandbyAlarm.setStatus('mandatory')
dm3ConfigConvFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFanFailAlarm.setStatus('mandatory')
dm3ConfigConvFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailAlarm.setStatus('mandatory')
dm3ConfigConvHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ("alarmNofN", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHwVoltAlarm.setStatus('mandatory')
dm3ConfigOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigOutRlyTableSize.setStatus('mandatory')
dm3ConfigOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2), )
if mibBuilder.loadTexts: dm3ConfigOutRlyTable.setStatus('mandatory')
dm3ConfigOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigOutRlyIndex"))
if mibBuilder.loadTexts: dm3ConfigOutRlyEntry.setStatus('mandatory')
dm3ConfigOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigOutRlyIndex.setStatus('mandatory')
dm3ConfigOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyName.setStatus('mandatory')
dm3ConfigOutRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyDelay.setStatus('mandatory')
dm3ConfigOutRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyAlarm.setStatus('mandatory')
dm3ConfigInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigInRlyTableSize.setStatus('mandatory')
dm3ConfigInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2), )
if mibBuilder.loadTexts: dm3ConfigInRlyTable.setStatus('mandatory')
dm3ConfigInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigInRlyIndex"))
if mibBuilder.loadTexts: dm3ConfigInRlyEntry.setStatus('mandatory')
dm3ConfigInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigInRlyIndex.setStatus('mandatory')
dm3ConfigInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyName.setStatus('mandatory')
dm3ConfigInRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyDelay.setStatus('mandatory')
dm3ConfigInRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyAlarm.setStatus('mandatory')
dm3ConfigBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigBreakersTableSize.setStatus('mandatory')
dm3ConfigBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2), )
if mibBuilder.loadTexts: dm3ConfigBreakersTable.setStatus('mandatory')
dm3ConfigBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigBreakersIndex"))
if mibBuilder.loadTexts: dm3ConfigBreakersEntry.setStatus('mandatory')
dm3ConfigBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigBreakersIndex.setStatus('mandatory')
dm3ConfigBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBreakersName.setStatus('mandatory')
dm3ConfigBreakersAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBreakersAlarm.setStatus('mandatory')
dm3ConfigFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigFusesTableSize.setStatus('mandatory')
dm3ConfigFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2), )
if mibBuilder.loadTexts: dm3ConfigFusesTable.setStatus('mandatory')
dm3ConfigFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3ConfigFusesIndex"))
if mibBuilder.loadTexts: dm3ConfigFusesEntry.setStatus('mandatory')
dm3ConfigFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigFusesIndex.setStatus('mandatory')
dm3ConfigFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigFusesName.setStatus('mandatory')
dm3ConfigFusesAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigFusesAlarm.setStatus('mandatory')
dm3StatusSystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSystemTemp.setStatus('mandatory')
dm3StatusSystemStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSystemStart.setStatus('mandatory')
dm3StatusSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRemoteAccess.setStatus('mandatory')
dm3StatusSysSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysSecurityLevel.setStatus('mandatory')
dm3StatusSysTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysTempSanity.setStatus('mandatory')
dm3StatusSysAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alarmMinor", 1), ("alarmMajor", 2), ("alarmBoth", 3), ("alarmNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysAlarmState.setStatus('mandatory')
dm3StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysTempUnits.setStatus('mandatory')
dm3StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsTableSize.setStatus('mandatory')
dm3StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2), )
if mibBuilder.loadTexts: dm3StatusAlarmsTable.setStatus('mandatory')
dm3StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusAlarmsIndex"))
if mibBuilder.loadTexts: dm3StatusAlarmsEntry.setStatus('mandatory')
dm3StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsIndex.setStatus('mandatory')
dm3StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsText.setStatus('mandatory')
dm3StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattCurrent.setStatus('mandatory')
dm3StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattTemp.setStatus('mandatory')
dm3StatusBattCurrentSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattCurrentSanity.setStatus('mandatory')
dm3StatusBattTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattTempSanity.setStatus('mandatory')
dm3StatusOEMrectOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMrectOffset.setStatus('mandatory')
dm3StatusOEMrectGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMrectGain.setStatus('mandatory')
dm3StatusOEMconvOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMconvOffset.setStatus('mandatory')
dm3StatusOEMconvGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMconvGain.setStatus('mandatory')
dm3StatusOEMshuntOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMshuntOffset.setStatus('mandatory')
dm3StatusOEMshuntGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMshuntGain.setStatus('mandatory')
dm3StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDTableSize.setStatus('mandatory')
dm3StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2), )
if mibBuilder.loadTexts: dm3StatusLVDTable.setStatus('mandatory')
dm3StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusLVDIndex"))
if mibBuilder.loadTexts: dm3StatusLVDEntry.setStatus('mandatory')
dm3StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDIndex.setStatus('mandatory')
dm3StatusLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDName.setStatus('mandatory')
dm3StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDState.setStatus('mandatory')
dm3StatusLVDHwFault = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusFault", 1), ("statusNofault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDHwFault.setStatus('mandatory')
dm3StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectTableSize.setStatus('mandatory')
dm3StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2), )
if mibBuilder.loadTexts: dm3StatusRectTable.setStatus('mandatory')
dm3StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusRectIndex"))
if mibBuilder.loadTexts: dm3StatusRectEntry.setStatus('mandatory')
dm3StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectIndex.setStatus('mandatory')
dm3StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectID.setStatus('mandatory')
dm3StatusRectDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDesc.setStatus('mandatory')
dm3StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCurrent.setStatus('mandatory')
dm3StatusRectCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCurrentLimit.setStatus('mandatory')
dm3StatusRectStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectStandby.setStatus('mandatory')
dm3StatusRectFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFanFail.setStatus('mandatory')
dm3StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFail.setStatus('mandatory')
dm3StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDevType.setStatus('mandatory')
dm3StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPhyAddr.setStatus('mandatory')
dm3StatusRectCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCfg.setStatus('mandatory')
dm3StatusRectPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPcbRev.setStatus('mandatory')
dm3StatusRectFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFwVer.setStatus('mandatory')
dm3StatusRectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPresent.setStatus('mandatory')
dm3StatusRectDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDiagPass.setStatus('mandatory')
dm3StatusRectState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectState.setStatus('mandatory')
dm3StatusSysRectVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectVoltSanity.setStatus('mandatory')
dm3StatusSysRectAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectAvailable.setStatus('mandatory')
dm3StatusSysRectType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectType.setStatus('mandatory')
dm3StatusSysRectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectVoltage.setStatus('mandatory')
dm3StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectCurrent.setStatus('mandatory')
dm3StatusConvTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvTableSize.setStatus('mandatory')
dm3StatusConvTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2), )
if mibBuilder.loadTexts: dm3StatusConvTable.setStatus('mandatory')
dm3StatusConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusConvIndex"))
if mibBuilder.loadTexts: dm3StatusConvEntry.setStatus('mandatory')
dm3StatusConvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvIndex.setStatus('mandatory')
dm3StatusConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvID.setStatus('mandatory')
dm3StatusConvDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDesc.setStatus('mandatory')
dm3StatusConvCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCurrent.setStatus('mandatory')
dm3StatusConvCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCurrentLimit.setStatus('mandatory')
dm3StatusConvStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvStandby.setStatus('mandatory')
dm3StatusConvFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFanFail.setStatus('mandatory')
dm3StatusConvFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFail.setStatus('mandatory')
dm3StatusConvDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDevType.setStatus('mandatory')
dm3StatusConvPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPhyAddr.setStatus('mandatory')
dm3StatusConvCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCfg.setStatus('mandatory')
dm3StatusConvPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPcbRev.setStatus('mandatory')
dm3StatusConvFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFwVer.setStatus('mandatory')
dm3StatusConvPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPresent.setStatus('mandatory')
dm3StatusConvDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDiagPass.setStatus('mandatory')
dm3StatusConvState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvState.setStatus('mandatory')
dm3StatusSysConvVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvVoltSanity.setStatus('mandatory')
dm3StatusSysConvAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvAvailable.setStatus('mandatory')
dm3StatusSysConvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvType.setStatus('mandatory')
dm3StatusSysConvVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvVoltage.setStatus('mandatory')
dm3StatusSysConvCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvCurrent.setStatus('mandatory')
dm3StatusOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyTableSize.setStatus('mandatory')
dm3StatusOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2), )
if mibBuilder.loadTexts: dm3StatusOutRlyTable.setStatus('mandatory')
dm3StatusOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusOutRlyIndex"))
if mibBuilder.loadTexts: dm3StatusOutRlyEntry.setStatus('mandatory')
dm3StatusOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyIndex.setStatus('mandatory')
dm3StatusOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyName.setStatus('mandatory')
dm3StatusOutRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyStatus.setStatus('mandatory')
dm3StatusInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyTableSize.setStatus('mandatory')
dm3StatusInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2), )
if mibBuilder.loadTexts: dm3StatusInRlyTable.setStatus('mandatory')
dm3StatusInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusInRlyIndex"))
if mibBuilder.loadTexts: dm3StatusInRlyEntry.setStatus('mandatory')
dm3StatusInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyIndex.setStatus('mandatory')
dm3StatusInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyName.setStatus('mandatory')
dm3StatusInRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyStatus.setStatus('mandatory')
dm3StatusBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersTableSize.setStatus('mandatory')
dm3StatusBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2), )
if mibBuilder.loadTexts: dm3StatusBreakersTable.setStatus('mandatory')
dm3StatusBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusBreakersIndex"))
if mibBuilder.loadTexts: dm3StatusBreakersEntry.setStatus('mandatory')
dm3StatusBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersIndex.setStatus('mandatory')
dm3StatusBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersName.setStatus('mandatory')
dm3StatusBreakersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersStatus.setStatus('mandatory')
dm3StatusFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesTableSize.setStatus('mandatory')
dm3StatusFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2), )
if mibBuilder.loadTexts: dm3StatusFusesTable.setStatus('mandatory')
dm3StatusFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dm3StatusFusesIndex"))
if mibBuilder.loadTexts: dm3StatusFusesEntry.setStatus('mandatory')
dm3StatusFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesIndex.setStatus('mandatory')
dm3StatusFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesName.setStatus('mandatory')
dm3StatusFusesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesStatus.setStatus('mandatory')
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentHardwareRev.setStatus('mandatory')
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareRev.setStatus('mandatory')
atsIdentFirmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareDate.setStatus('mandatory')
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDateOfManufacture.setStatus('mandatory')
atsIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentModelNumber.setStatus('mandatory')
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentSerialNumber.setStatus('mandatory')
atsIdentNominalLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentNominalLineVoltage.setStatus('mandatory')
atsIdentNominalLineFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentNominalLineFrequency.setStatus('mandatory')
atsIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRating.setStatus('mandatory')
atsCalibrationNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumInputs.setStatus('mandatory')
atsCalibrationNumInputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumInputPhases.setStatus('mandatory')
atsCalibrationInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3), )
if mibBuilder.loadTexts: atsCalibrationInputPhaseTable.setStatus('mandatory')
atsCalibrationInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationInputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationInputPhaseTableIndex"))
if mibBuilder.loadTexts: atsCalibrationInputPhaseEntry.setStatus('mandatory')
atsCalibrationInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationInputTableIndex.setStatus('mandatory')
atsCalibrationInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationInputPhaseTableIndex.setStatus('mandatory')
atsLineVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLineVoltageCalibrationFactor.setStatus('mandatory')
atsCalibrationPowerSupplyVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltages.setStatus('mandatory')
atsCalibrationPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2), )
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageTable.setStatus('mandatory')
atsCalibrationPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationPowerSupplyVoltageTableIndex"))
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageEntry.setStatus('mandatory')
atsCalibrationPowerSupplyVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageTableIndex.setStatus('mandatory')
atsCalibrationPowerSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerSupply24V", 1), ("powerSupply12V", 2), ("powerSupply", 3), ("powerSupply24VSourceB", 4), ("powerSupplyMinus12V", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltage.setStatus('mandatory')
atsPowerSupplyVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsPowerSupplyVoltageCalibrationFactor.setStatus('mandatory')
ats4gCalibrationPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 3), )
if mibBuilder.loadTexts: ats4gCalibrationPowerSupplyVoltageTable.setStatus('mandatory')
ats4gCalibrationPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "ats4gCalibrationPowerSupplyVoltageTableIndex"))
if mibBuilder.loadTexts: ats4gCalibrationPowerSupplyVoltageEntry.setStatus('mandatory')
ats4gCalibrationPowerSupplyVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gCalibrationPowerSupplyVoltageTableIndex.setStatus('mandatory')
ats4gCalibrationPowerSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("powerSupply24VA", 1), ("powerSupply24VB", 2), ("powerSupplyVBoostA", 3), ("powerSupplyVBoostB", 4), ("powerSupply3Dot3V", 5), ("powerSupply1Dot0V", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gCalibrationPowerSupplyVoltage.setStatus('mandatory')
ats4gPowerSupplyVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gPowerSupplyVoltageCalibrationFactor.setStatus('mandatory')
atsCalibrationNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumOutputs.setStatus('mandatory')
atsCalibrationNumOutputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumOutputPhases.setStatus('mandatory')
atsCalibrationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3), )
if mibBuilder.loadTexts: atsCalibrationOutputTable.setStatus('mandatory')
atsCalibrationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsCalibrationOutputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationOutputPhasesTableIndex"))
if mibBuilder.loadTexts: atsCalibrationOutputEntry.setStatus('mandatory')
atsCalibrationOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationOutputTableIndex.setStatus('mandatory')
atsCalibrationOutputPhasesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationOutputPhasesTableIndex.setStatus('mandatory')
atsOutputCurrentCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputCurrentCalibrationFactor.setStatus('mandatory')
ats4gCalibrationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: ats4gCalibrationOutputTable.setStatus('mandatory')
ats4gCalibrationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "ats4gCalibrationOutputTableIndex"), (0, "PowerNet-MIB", "ats4gCalibrationOutputPhasesTableIndex"))
if mibBuilder.loadTexts: ats4gCalibrationOutputEntry.setStatus('mandatory')
ats4gCalibrationOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gCalibrationOutputTableIndex.setStatus('mandatory')
ats4gCalibrationOutputPhasesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sourceALine", 1), ("sourneBLine", 2), ("bank1", 3), ("bank2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gCalibrationOutputPhasesTableIndex.setStatus('mandatory')
ats4gOutputCurrentCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats4gOutputCurrentCalibrationFactor.setStatus('mandatory')
atsControlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlResetATS.setStatus('mandatory')
atsControlClearAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlClearAllAlarms.setStatus('mandatory')
atsConfigProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigProductName.setStatus('mandatory')
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPreferredSource.setStatus('mandatory')
atsConfigFrontPanelLockout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableFrontPanel", 1), ("enableFrontPanel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrontPanelLockout.setStatus('mandatory')
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigVoltageSensitivity.setStatus('mandatory')
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("medium", 2), ("narrow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigTransferVoltageRange.setStatus('mandatory')
atsConfigCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigCurrentLimit.setStatus('mandatory')
atsConfigResetValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigResetValues.setStatus('mandatory')
atsConfigLineVRMS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMS.setStatus('mandatory')
atsConfigLineVRMSNarrowLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSNarrowLimit.setStatus('mandatory')
atsConfigLineVRMSMediumLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSMediumLimit.setStatus('mandatory')
atsConfigLineVRMSWideLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSWideLimit.setStatus('mandatory')
atsConfigFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("five", 5), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrequencyDeviation.setStatus('mandatory')
atsConfigBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBankTableSize.setStatus('mandatory')
atsConfigBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14), )
if mibBuilder.loadTexts: atsConfigBankTable.setStatus('mandatory')
atsConfigBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1), ).setIndexNames((0, "PowerNet-MIB", "atsConfigBankTableIndex"))
if mibBuilder.loadTexts: atsConfigBankEntry.setStatus('mandatory')
atsConfigBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBankTableIndex.setStatus('mandatory')
atsConfigBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBank.setStatus('mandatory')
atsConfigBankLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankLowLoadThreshold.setStatus('mandatory')
atsConfigBankNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankNearOverLoadThreshold.setStatus('mandatory')
atsConfigBankOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankOverLoadThreshold.setStatus('mandatory')
atsConfigPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhaseTableSize.setStatus('mandatory')
atsConfigPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16), )
if mibBuilder.loadTexts: atsConfigPhaseTable.setStatus('mandatory')
atsConfigPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1), ).setIndexNames((0, "PowerNet-MIB", "atsConfigPhaseTableIndex"))
if mibBuilder.loadTexts: atsConfigPhaseEntry.setStatus('mandatory')
atsConfigPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhaseTableIndex.setStatus('mandatory')
atsConfigPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhase.setStatus('mandatory')
atsConfigPhaseLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseLowLoadThreshold.setStatus('mandatory')
atsConfigPhaseNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseNearOverLoadThreshold.setStatus('mandatory')
atsConfigPhaseOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseOverLoadThreshold.setStatus('mandatory')
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atsNeverDiscovered", 1), ("atsCommEstablished", 2), ("atsCommLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusCommStatus.setStatus('mandatory')
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSelectedSource.setStatus('mandatory')
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsRedundancyLost", 1), ("atsFullyRedundant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusRedundancyState.setStatus('mandatory')
atsStatusOverCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsOverCurrent", 1), ("atsCurrentOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusOverCurrentState.setStatus('mandatory')
atsStatus5VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus5VPowerSupply.setStatus('mandatory')
atsStatus24VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus24VPowerSupply.setStatus('mandatory')
atsStatus24VSourceBPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus24VSourceBPowerSupply.setStatus('mandatory')
atsStatusPlus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPlus12VPowerSupply.setStatus('mandatory')
atsStatusMinus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusMinus12VPowerSupply.setStatus('mandatory')
atsStatusSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSwitchStatus.setStatus('mandatory')
atsStatusFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusFrontPanel.setStatus('mandatory')
atsStatusSourceAStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSourceAStatus.setStatus('mandatory')
atsStatusSourceBStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSourceBStatus.setStatus('mandatory')
atsStatusPhaseSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPhaseSyncStatus.setStatus('mandatory')
atsStatusVoltageOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusVoltageOutStatus.setStatus('mandatory')
atsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusHardwareStatus.setStatus('mandatory')
atsStatus3dot3VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus3dot3VPowerSupply.setStatus('mandatory')
atsStatus1Dot0VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus1Dot0VPowerSupply.setStatus('mandatory')
atsStatusVBoostSourceA = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusVBoostSourceA.setStatus('mandatory')
atsStatusVBoostSourceB = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusVBoostSourceB.setStatus('mandatory')
atsStatusResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsStatusResetMaxMinValues.setStatus('mandatory')
atsNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumInputs.setStatus('mandatory')
atsInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2), )
if mibBuilder.loadTexts: atsInputTable.setStatus('mandatory')
atsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsInputTableIndex"))
if mibBuilder.loadTexts: atsInputEntry.setStatus('mandatory')
atsInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputTableIndex.setStatus('mandatory')
atsNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumInputPhases.setStatus('mandatory')
atsInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputVoltageOrientation.setStatus('mandatory')
atsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputFrequency.setStatus('mandatory')
atsInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputType.setStatus('mandatory')
atsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputName.setStatus('mandatory')
atsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3), )
if mibBuilder.loadTexts: atsInputPhaseTable.setStatus('mandatory')
atsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsInputPhaseTableIndex"), (0, "PowerNet-MIB", "atsInputPhaseIndex"))
if mibBuilder.loadTexts: atsInputPhaseEntry.setStatus('mandatory')
atsInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPhaseTableIndex.setStatus('mandatory')
atsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPhaseIndex.setStatus('mandatory')
atsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputVoltage.setStatus('mandatory')
atsInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxVoltage.setStatus('mandatory')
atsInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinVoltage.setStatus('mandatory')
atsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputCurrent.setStatus('mandatory')
atsInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxCurrent.setStatus('mandatory')
atsInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinCurrent.setStatus('mandatory')
atsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPower.setStatus('mandatory')
atsInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxPower.setStatus('mandatory')
atsInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinPower.setStatus('mandatory')
atsNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumOutputs.setStatus('mandatory')
atsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2), )
if mibBuilder.loadTexts: atsOutputTable.setStatus('mandatory')
atsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputTableIndex"))
if mibBuilder.loadTexts: atsOutputEntry.setStatus('mandatory')
atsOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputTableIndex.setStatus('mandatory')
atsNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumOutputPhases.setStatus('mandatory')
atsOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputVoltageOrientation.setStatus('mandatory')
atsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputFrequency.setStatus('mandatory')
atsOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3), )
if mibBuilder.loadTexts: atsOutputPhaseTable.setStatus('mandatory')
atsOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputPhaseTableIndex"), (0, "PowerNet-MIB", "atsOutputPhaseIndex"))
if mibBuilder.loadTexts: atsOutputPhaseEntry.setStatus('mandatory')
atsOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseTableIndex.setStatus('mandatory')
atsOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseIndex.setStatus('mandatory')
atsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputVoltage.setStatus('mandatory')
atsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputCurrent.setStatus('mandatory')
atsOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxCurrent.setStatus('mandatory')
atsOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinCurrent.setStatus('mandatory')
atsOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputLoad.setStatus('mandatory')
atsOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxLoad.setStatus('mandatory')
atsOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinLoad.setStatus('mandatory')
atsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPercentLoad.setStatus('mandatory')
atsOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPercentLoad.setStatus('mandatory')
atsOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPercentLoad.setStatus('mandatory')
atsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPower.setStatus('mandatory')
atsOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPower.setStatus('mandatory')
atsOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPower.setStatus('mandatory')
atsOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPercentPower.setStatus('mandatory')
atsOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPercentPower.setStatus('mandatory')
atsOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPercentPower.setStatus('mandatory')
atsOutputPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseState.setStatus('mandatory')
atsOutputBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankTableSize.setStatus('mandatory')
atsOutputBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5), )
if mibBuilder.loadTexts: atsOutputBankTable.setStatus('mandatory')
atsOutputBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "atsOutputBankTableIndex"))
if mibBuilder.loadTexts: atsOutputBankEntry.setStatus('mandatory')
atsOutputBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankTableIndex.setStatus('mandatory')
atsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhase.setStatus('mandatory')
atsOutputBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBank.setStatus('mandatory')
atsOutputBankCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankCurrent.setStatus('mandatory')
atsOutputBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankState.setStatus('mandatory')
atsOutputBankOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankOutputVoltage.setStatus('mandatory')
atsOutputBankMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxCurrent.setStatus('mandatory')
atsOutputBankMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinCurrent.setStatus('mandatory')
atsOutputBankLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankLoad.setStatus('mandatory')
atsOutputBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxLoad.setStatus('mandatory')
atsOutputBankMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinLoad.setStatus('mandatory')
atsOutputBankPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPercentLoad.setStatus('mandatory')
atsOutputBankMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPercentLoad.setStatus('mandatory')
atsOutputBankMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPercentLoad.setStatus('mandatory')
atsOutputBankPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPower.setStatus('mandatory')
atsOutputBankMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPower.setStatus('mandatory')
atsOutputBankMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPower.setStatus('mandatory')
atsOutputBankPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPercentPower.setStatus('mandatory')
atsOutputBankMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPercentPower.setStatus('mandatory')
atsOutputBankMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPercentPower.setStatus('mandatory')
dcmim2IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2IdentSysFWVersion.setStatus('mandatory')
dcmim2ControlRunFunctBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ControlRunFunctBatteryTest.setStatus('mandatory')
dcmim2ControlRunCapacityBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ControlRunCapacityBatteryTest.setStatus('mandatory')
dcmim2ConfigSysHighTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysHighTempTrip.setStatus('mandatory')
dcmim2ConfigSysHighTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysHighTempReset.setStatus('mandatory')
dcmim2ConfigSysLowTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysLowTempTrip.setStatus('mandatory')
dcmim2ConfigSysLowTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysLowTempReset.setStatus('mandatory')
dcmim2ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFloatVolt.setStatus('mandatory')
dcmim2ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattMaxRecharge.setStatus('mandatory')
dcmim2ConfigBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattMfgCapacity.setStatus('mandatory')
dcmim2ConfigBattType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattType.setStatus('mandatory')
dcmim2ConfigBattFunctTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFunctTestDuration.setStatus('mandatory')
dcmim2ConfigBattFunctTestThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFunctTestThresh.setStatus('mandatory')
dcmim2ConfigBattCapacityTestPercent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestPercent.setStatus('mandatory')
dcmim2ConfigBattCapacityTestEndThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestEndThresh.setStatus('mandatory')
dcmim2ConfigBattCapacityTestCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestCurrent.setStatus('mandatory')
dcmim2ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDTableSize.setStatus('mandatory')
dcmim2ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2), )
if mibBuilder.loadTexts: dcmim2ConfigLVDTable.setStatus('mandatory')
dcmim2ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2ConfigLVDIndex"))
if mibBuilder.loadTexts: dcmim2ConfigLVDEntry.setStatus('mandatory')
dcmim2ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDIndex.setStatus('mandatory')
dcmim2ConfigLVDTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigLVDTrip.setStatus('mandatory')
dcmim2ConfigLVDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigLVDReset.setStatus('mandatory')
dcmim2ConfigLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDState.setStatus('mandatory')
dcmim2StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysRectCurrent.setStatus('mandatory')
dcmim2StatusSysLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysLoadCurrent.setStatus('mandatory')
dcmim2StatusSysBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysBusVoltage.setStatus('mandatory')
dcmim2StatusSysAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysAmbientTemp.setStatus('mandatory')
dcmim2StatusSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysUpTime.setStatus('mandatory')
dcmim2StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysTempUnits.setStatus('mandatory')
dcmim2StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectTableSize.setStatus('mandatory')
dcmim2StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2), )
if mibBuilder.loadTexts: dcmim2StatusRectTable.setStatus('mandatory')
dcmim2StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusRectIndex"))
if mibBuilder.loadTexts: dcmim2StatusRectEntry.setStatus('mandatory')
dcmim2StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectIndex.setStatus('mandatory')
dcmim2StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectDevType.setStatus('mandatory')
dcmim2StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectID.setStatus('mandatory')
dcmim2StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectPhyAddr.setStatus('mandatory')
dcmim2StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectFail.setStatus('mandatory')
dcmim2StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectCurrent.setStatus('mandatory')
dcmim2StatusBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattFloatVolt.setStatus('mandatory')
dcmim2StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattCurrent.setStatus('mandatory')
dcmim2StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattTemp.setStatus('mandatory')
dcmim2StatusBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattMfgCapacity.setStatus('mandatory')
dcmim2StatusBattTestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattTestCapacity.setStatus('mandatory')
dcmim2StatusBattFunctTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("functTestNotPerformed", 1), ("functTestInProcess", 2), ("functTestInterrupted", 3), ("functTestPass", 4), ("functTestFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattFunctTestResult.setStatus('mandatory')
dcmim2StatusBattCapacityTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("capacityTestNotPerformed", 1), ("capacityTestInProcess", 2), ("capacityTestInterrupted", 3), ("capacityTestPass", 4), ("capacityTestFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattCapacityTestResult.setStatus('mandatory')
dcmim2StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDTableSize.setStatus('mandatory')
dcmim2StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2), )
if mibBuilder.loadTexts: dcmim2StatusLVDTable.setStatus('mandatory')
dcmim2StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusLVDIndex"))
if mibBuilder.loadTexts: dcmim2StatusLVDEntry.setStatus('mandatory')
dcmim2StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDIndex.setStatus('mandatory')
dcmim2StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDState.setStatus('mandatory')
dcmim2StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsTableSize.setStatus('mandatory')
dcmim2StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2), )
if mibBuilder.loadTexts: dcmim2StatusAlarmsTable.setStatus('mandatory')
dcmim2StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusAlarmsIndex"))
if mibBuilder.loadTexts: dcmim2StatusAlarmsEntry.setStatus('mandatory')
dcmim2StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsIndex.setStatus('mandatory')
dcmim2StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsText.setStatus('mandatory')
emIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emIdentFirmwareRevision.setStatus('mandatory')
emConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbesNumProbes.setStatus('mandatory')
emConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2), )
if mibBuilder.loadTexts: emConfigProbesTable.setStatus('mandatory')
emConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "emConfigProbeNumber"))
if mibBuilder.loadTexts: emConfigProbesEntry.setStatus('mandatory')
emConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbeNumber.setStatus('mandatory')
emConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeName.setStatus('mandatory')
emConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighTempThreshold.setStatus('mandatory')
emConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowTempThreshold.setStatus('mandatory')
emConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbeTempUnits.setStatus('mandatory')
emConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighHumidThreshold.setStatus('mandatory')
emConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowHumidThreshold.setStatus('mandatory')
emConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighTempEnable.setStatus('mandatory')
emConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowTempEnable.setStatus('mandatory')
emConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighHumidEnable.setStatus('mandatory')
emConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowHumidEnable.setStatus('mandatory')
emConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxTempThreshold.setStatus('mandatory')
emConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinTempThreshold.setStatus('mandatory')
emConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxHumidThreshold.setStatus('mandatory')
emConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinHumidThreshold.setStatus('mandatory')
emConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxTempEnable.setStatus('mandatory')
emConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinTempEnable.setStatus('mandatory')
emConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxHumidEnable.setStatus('mandatory')
emConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinHumidEnable.setStatus('mandatory')
emConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeTempHysteresis.setStatus('mandatory')
emConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHumidHysteresis.setStatus('mandatory')
emConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLocation.setStatus('mandatory')
emConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigContactsNumContacts.setStatus('mandatory')
emConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4), )
if mibBuilder.loadTexts: emConfigContactsTable.setStatus('mandatory')
emConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "emConfigContactNumber"))
if mibBuilder.loadTexts: emConfigContactsEntry.setStatus('mandatory')
emConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigContactNumber.setStatus('mandatory')
emConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactName.setStatus('mandatory')
emConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactEnable.setStatus('mandatory')
emConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactSeverity.setStatus('mandatory')
emConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactNormalState.setStatus('mandatory')
emConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactLocation.setStatus('mandatory')
emStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusCommStatus.setStatus('mandatory')
emStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbesNumProbes.setStatus('mandatory')
emStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3), )
if mibBuilder.loadTexts: emStatusProbesTable.setStatus('mandatory')
emStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "emStatusProbeNumber"))
if mibBuilder.loadTexts: emStatusProbesEntry.setStatus('mandatory')
emStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeNumber.setStatus('mandatory')
emStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeName.setStatus('mandatory')
emStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeStatus.setStatus('mandatory')
emStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeCurrentTemp.setStatus('mandatory')
emStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeTempUnits.setStatus('mandatory')
emStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeCurrentHumid.setStatus('mandatory')
emStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeHighTempViolation.setStatus('mandatory')
emStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeLowTempViolation.setStatus('mandatory')
emStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeHighHumidViolation.setStatus('mandatory')
emStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeLowHumidViolation.setStatus('mandatory')
emStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMaxTempViolation.setStatus('mandatory')
emStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMinTempViolation.setStatus('mandatory')
emStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMaxHumidViolation.setStatus('mandatory')
emStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMinHumidViolation.setStatus('mandatory')
emStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactsNumContacts.setStatus('mandatory')
emStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5), )
if mibBuilder.loadTexts: emStatusContactsTable.setStatus('mandatory')
emStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "emStatusContactNumber"))
if mibBuilder.loadTexts: emStatusContactsEntry.setStatus('mandatory')
emStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactNumber.setStatus('mandatory')
emStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactName.setStatus('mandatory')
emStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactStatus.setStatus('mandatory')
memModulesStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusTableSize.setStatus('mandatory')
memModulesStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2), )
if mibBuilder.loadTexts: memModulesStatusTable.setStatus('mandatory')
memModulesStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memModulesStatusModuleNumber"))
if mibBuilder.loadTexts: memModulesStatusEntry.setStatus('mandatory')
memModulesStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleNumber.setStatus('mandatory')
memModulesStatusModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleName.setStatus('mandatory')
memModulesStatusModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleLocation.setStatus('mandatory')
memModulesStatusModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModelNumber.setStatus('mandatory')
memModulesStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusSerialNumber.setStatus('mandatory')
memModulesStatusFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusFirmwareRev.setStatus('mandatory')
memModulesStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusHardwareRev.setStatus('mandatory')
memModulesConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesConfigTableSize.setStatus('mandatory')
memModulesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4), )
if mibBuilder.loadTexts: memModulesConfigTable.setStatus('mandatory')
memModulesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memModulesConfigModuleNumber"))
if mibBuilder.loadTexts: memModulesConfigEntry.setStatus('mandatory')
memModulesConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesConfigModuleNumber.setStatus('mandatory')
memModulesConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memModulesConfigModuleName.setStatus('mandatory')
memModulesConfigModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memModulesConfigModuleLocation.setStatus('mandatory')
memSensorsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSysTempUnits.setStatus('mandatory')
memSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusTableSize.setStatus('mandatory')
memSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3), )
if mibBuilder.loadTexts: memSensorsStatusTable.setStatus('mandatory')
memSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "memSensorsStatusModuleNumber"), (0, "PowerNet-MIB", "memSensorsStatusSensorNumber"))
if mibBuilder.loadTexts: memSensorsStatusEntry.setStatus('mandatory')
memSensorsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusModuleNumber.setStatus('mandatory')
memSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorNumber.setStatus('mandatory')
memSensorsStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorName.setStatus('mandatory')
memSensorsStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorLocation.setStatus('mandatory')
memSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsTemperature.setStatus('mandatory')
memSensorsHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsHumidity.setStatus('mandatory')
memSensorsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsCommStatus.setStatus('mandatory')
memSensorsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsAlarmStatus.setStatus('mandatory')
memSensorsTemperatureHighPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsTemperatureHighPrec.setStatus('mandatory')
memSensorsVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsVoltage.setStatus('mandatory')
memSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigTableSize.setStatus('mandatory')
memSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5), )
if mibBuilder.loadTexts: memSensorsConfigTable.setStatus('mandatory')
memSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "memSensorsConfigModuleNumber"), (0, "PowerNet-MIB", "memSensorsConfigSensorNumber"))
if mibBuilder.loadTexts: memSensorsConfigEntry.setStatus('mandatory')
memSensorsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigModuleNumber.setStatus('mandatory')
memSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigSensorNumber.setStatus('mandatory')
memSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsName.setStatus('mandatory')
memSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsLocation.setStatus('mandatory')
memSensorsAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsAlarmGeneration.setStatus('mandatory')
memSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempMaxThresh.setStatus('mandatory')
memSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempHighThresh.setStatus('mandatory')
memSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLowThresh.setStatus('mandatory')
memSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempMinThresh.setStatus('mandatory')
memSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempThreshHysteresis.setStatus('mandatory')
memSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortDecRateThreshValue.setStatus('mandatory')
memSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortDecRateThreshTime.setStatus('mandatory')
memSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortIncRateThreshValue.setStatus('mandatory')
memSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortIncRateThreshTime.setStatus('mandatory')
memSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongDecRateThreshValue.setStatus('mandatory')
memSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongDecRateThreshTime.setStatus('mandatory')
memSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongIncRateThreshValue.setStatus('mandatory')
memSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongIncRateThreshTime.setStatus('mandatory')
memSensorsHumidityMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityMaxThresh.setStatus('mandatory')
memSensorsHumidityHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityHighThresh.setStatus('mandatory')
memSensorsHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityLowThresh.setStatus('mandatory')
memSensorsHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityMinThresh.setStatus('mandatory')
memSensorsHumidityThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityThreshHysteresis.setStatus('mandatory')
memSensorsVoltMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsVoltMaxThresh.setStatus('mandatory')
memSensorsVoltMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsVoltMinThresh.setStatus('mandatory')
memInputsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusTableSize.setStatus('mandatory')
memInputsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2), )
if mibBuilder.loadTexts: memInputsStatusTable.setStatus('mandatory')
memInputsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memInputsStatusModuleNumber"), (0, "PowerNet-MIB", "memInputsStatusInputNumber"))
if mibBuilder.loadTexts: memInputsStatusEntry.setStatus('mandatory')
memInputsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusModuleNumber.setStatus('mandatory')
memInputsStatusInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputNumber.setStatus('mandatory')
memInputsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputName.setStatus('mandatory')
memInputsStatusInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputLocation.setStatus('mandatory')
memInputsStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusCurrentState.setStatus('mandatory')
memInputsStatusCurrentAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusCurrentAnalogValue.setStatus('mandatory')
memInputsStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusAlarmStatus.setStatus('mandatory')
memInputsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsCommStatus.setStatus('mandatory')
memInputsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigTableSize.setStatus('mandatory')
memInputsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4), )
if mibBuilder.loadTexts: memInputsConfigTable.setStatus('mandatory')
memInputsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memInputsConfigModuleNumber"), (0, "PowerNet-MIB", "memInputsConfigInputNumber"))
if mibBuilder.loadTexts: memInputsConfigEntry.setStatus('mandatory')
memInputsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigModuleNumber.setStatus('mandatory')
memInputsConfigInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigInputNumber.setStatus('mandatory')
memInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputName.setStatus('mandatory')
memInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputLocation.setStatus('mandatory')
memInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noConnection", 1), ("dryContact", 2), ("digital", 3), ("analogmAmps", 4), ("analogVolts", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputType.setStatus('mandatory')
memInputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAlarmGeneration.setStatus('mandatory')
memInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputNormalState.setStatus('mandatory')
memInputAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inputSeverityinformational", 1), ("inputSeveritywarning", 2), ("inputSeveritysevere", 3), ("inputSeverityNotApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAbnormalSeverity.setStatus('mandatory')
memInputNumberCalibrationPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputNumberCalibrationPoints.setStatus('mandatory')
memInputAnalogCalibrationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint1.setStatus('mandatory')
memInputAnalogCalibrationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint2.setStatus('mandatory')
memInputAnalogCalibrationPoint3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint3.setStatus('mandatory')
memInputAnalogCalibrationPoint4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint4.setStatus('mandatory')
memInputAnalogCalibrationPoint5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint5.setStatus('mandatory')
memInputAnalogCalibrationPoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint1Value.setStatus('mandatory')
memInputAnalogCalibrationPoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint2Value.setStatus('mandatory')
memInputAnalogCalibrationPoint3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint3Value.setStatus('mandatory')
memInputAnalogCalibrationPoint4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint4Value.setStatus('mandatory')
memInputAnalogCalibrationPoint5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint5Value.setStatus('mandatory')
memInputAnalogMeasurementUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMeasurementUnits.setStatus('mandatory')
memInputAnalogMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMaxThresh.setStatus('mandatory')
memInputAnalogHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogHighThresh.setStatus('mandatory')
memInputAnalogLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogLowThresh.setStatus('mandatory')
memInputAnalogMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMinThresh.setStatus('mandatory')
memInputAnalogThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogThreshHysteresis.setStatus('mandatory')
memOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusTableSize.setStatus('mandatory')
memOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2), )
if mibBuilder.loadTexts: memOutputStatusTable.setStatus('mandatory')
memOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutputStatusModuleNumber"), (0, "PowerNet-MIB", "memOutputStatusOutputNumber"))
if mibBuilder.loadTexts: memOutputStatusEntry.setStatus('mandatory')
memOutputStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusModuleNumber.setStatus('mandatory')
memOutputStatusOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputNumber.setStatus('mandatory')
memOutputStatusOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputName.setStatus('mandatory')
memOutputStatusOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputLocation.setStatus('mandatory')
memOutputStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusCurrentState.setStatus('mandatory')
memOutputStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memOutputNormal", 1), ("memOutputAbnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusAlarmState.setStatus('mandatory')
memOutputConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigTableSize.setStatus('mandatory')
memOutputConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4), )
if mibBuilder.loadTexts: memOutputConfigTable.setStatus('mandatory')
memOutputConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutputConfigModuleNumber"), (0, "PowerNet-MIB", "memOutputConfigOutputNumber"))
if mibBuilder.loadTexts: memOutputConfigEntry.setStatus('mandatory')
memOutputConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigModuleNumber.setStatus('mandatory')
memOutputConfigOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigOutputNumber.setStatus('mandatory')
memOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputName.setStatus('mandatory')
memOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputLocation.setStatus('mandatory')
memOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputNormalState.setStatus('mandatory')
memOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memActionClose", 1), ("memActionOpen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputAction.setStatus('mandatory')
memOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusTableSize.setStatus('mandatory')
memOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2), )
if mibBuilder.loadTexts: memOutletStatusTable.setStatus('mandatory')
memOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutletStatusModuleNumber"), (0, "PowerNet-MIB", "memOutletStatusOutletNumber"))
if mibBuilder.loadTexts: memOutletStatusEntry.setStatus('mandatory')
memOutletStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusModuleNumber.setStatus('mandatory')
memOutletStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletNumber.setStatus('mandatory')
memOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletName.setStatus('mandatory')
memOutletStatusOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletLocation.setStatus('mandatory')
memOutletStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusCurrentState.setStatus('mandatory')
memOutletStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memOutletNormal", 1), ("memOutletAbnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusAlarmState.setStatus('mandatory')
memOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigTableSize.setStatus('mandatory')
memOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4), )
if mibBuilder.loadTexts: memOutletConfigTable.setStatus('mandatory')
memOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memOutletConfigModuleNumber"), (0, "PowerNet-MIB", "memOutletConfigOutletNumber"))
if mibBuilder.loadTexts: memOutletConfigEntry.setStatus('mandatory')
memOutletConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigModuleNumber.setStatus('mandatory')
memOutletConfigOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigOutletNumber.setStatus('mandatory')
memOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletName.setStatus('mandatory')
memOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletLocation.setStatus('mandatory')
memOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletNormalState.setStatus('mandatory')
memOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletAction.setStatus('mandatory')
memBeaconStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusTableSize.setStatus('mandatory')
memBeaconStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2), )
if mibBuilder.loadTexts: memBeaconStatusTable.setStatus('mandatory')
memBeaconStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memBeaconStatusModuleNumber"), (0, "PowerNet-MIB", "memBeaconStatusBeaconNumber"))
if mibBuilder.loadTexts: memBeaconStatusEntry.setStatus('mandatory')
memBeaconStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusModuleNumber.setStatus('mandatory')
memBeaconStatusBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconNumber.setStatus('mandatory')
memBeaconStatusBeaconName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconName.setStatus('mandatory')
memBeaconStatusBeaconLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconLocation.setStatus('mandatory')
memBeaconStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusCurrentState.setStatus('mandatory')
memBeaconStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memBeaconNormal", 1), ("memBeaconAbnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusAlarmState.setStatus('mandatory')
memBeaconConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigTableSize.setStatus('mandatory')
memBeaconConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4), )
if mibBuilder.loadTexts: memBeaconConfigTable.setStatus('mandatory')
memBeaconConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memBeaconConfigModuleNumber"), (0, "PowerNet-MIB", "memBeaconConfigBeaconNumber"))
if mibBuilder.loadTexts: memBeaconConfigEntry.setStatus('mandatory')
memBeaconConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigModuleNumber.setStatus('mandatory')
memBeaconConfigBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigBeaconNumber.setStatus('mandatory')
memBeaconConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconConfigName.setStatus('mandatory')
memBeaconConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconConfigLocation.setStatus('mandatory')
memBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconAction.setStatus('mandatory')
memSmokeSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusTableSize.setStatus('mandatory')
memSmokeSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2), )
if mibBuilder.loadTexts: memSmokeSensorStatusTable.setStatus('mandatory')
memSmokeSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "memSmokeSensorStatusModuleIndex"))
if mibBuilder.loadTexts: memSmokeSensorStatusEntry.setStatus('mandatory')
memSmokeSensorStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusModuleIndex.setStatus('mandatory')
memSmokeSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusSensorIndex.setStatus('mandatory')
memSmokeSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusSensorName.setStatus('mandatory')
memSmokeSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusSensorLocation.setStatus('mandatory')
memSmokeSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smokeDetected", 1), ("noSmoke", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusSensorState.setStatus('mandatory')
memSmokeSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorStatusSensorSeverity.setStatus('mandatory')
memSmokeStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeStatusAlarmStatus.setStatus('mandatory')
memSmokeSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorCommStatus.setStatus('mandatory')
memVibrationSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusTableSize.setStatus('mandatory')
memVibrationSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4), )
if mibBuilder.loadTexts: memVibrationSensorStatusTable.setStatus('mandatory')
memVibrationSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "memVibrationSensorStatusModuleIndex"))
if mibBuilder.loadTexts: memVibrationSensorStatusEntry.setStatus('mandatory')
memVibrationSensorStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusModuleIndex.setStatus('mandatory')
memVibrationSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusSensorIndex.setStatus('mandatory')
memVibrationSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusSensorName.setStatus('mandatory')
memVibrationSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusSensorLocation.setStatus('mandatory')
memVibrationSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vibrationDetected", 1), ("noVibration", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusSensorState.setStatus('mandatory')
memVibrationSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorStatusSensorSeverity.setStatus('mandatory')
memVibrationStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationStatusAlarmStatus.setStatus('mandatory')
memVibrationSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorCommStatus.setStatus('mandatory')
memFluidSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusTableSize.setStatus('mandatory')
memFluidSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6), )
if mibBuilder.loadTexts: memFluidSensorStatusTable.setStatus('mandatory')
memFluidSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "memFluidSensorStatusModuleIndex"))
if mibBuilder.loadTexts: memFluidSensorStatusEntry.setStatus('mandatory')
memFluidSensorStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusModuleIndex.setStatus('mandatory')
memFluidSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusSensorIndex.setStatus('mandatory')
memFluidSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusSensorName.setStatus('mandatory')
memFluidSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusSensorLocation.setStatus('mandatory')
memFluidSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fluidDetected", 1), ("noFluid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusSensorState.setStatus('mandatory')
memFluidSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorStatusSensorSeverity.setStatus('mandatory')
memFluidStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidStatusAlarmStatus.setStatus('mandatory')
memFluidSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorCommStatus.setStatus('mandatory')
memDoorSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusTableSize.setStatus('mandatory')
memDoorSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8), )
if mibBuilder.loadTexts: memDoorSensorStatusTable.setStatus('mandatory')
memDoorSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "memDoorSensorStatusModuleIndex"))
if mibBuilder.loadTexts: memDoorSensorStatusEntry.setStatus('mandatory')
memDoorSensorStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusModuleIndex.setStatus('mandatory')
memDoorSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusSensorIndex.setStatus('mandatory')
memDoorSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusSensorName.setStatus('mandatory')
memDoorSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusSensorLocation.setStatus('mandatory')
memDoorSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusSensorState.setStatus('mandatory')
memDoorSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorStatusSensorSeverity.setStatus('mandatory')
memDoorStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorStatusAlarmStatus.setStatus('mandatory')
memDoorSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorCommStatus.setStatus('mandatory')
memSmokeSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9), )
if mibBuilder.loadTexts: memSmokeSensorConfigTable.setStatus('mandatory')
memSmokeSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1), ).setIndexNames((0, "PowerNet-MIB", "memSmokeSensorConfigSensorModuleIndex"))
if mibBuilder.loadTexts: memSmokeSensorConfigEntry.setStatus('mandatory')
memSmokeSensorConfigSensorModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorConfigSensorModuleIndex.setStatus('mandatory')
memSmokeSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSmokeSensorConfigSensorIndex.setStatus('mandatory')
memSmokeSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSmokeSensorConfigSensorName.setStatus('mandatory')
memSmokeSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSmokeSensorConfigSensorLocation.setStatus('mandatory')
memSmokeSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSmokeSensorConfigSensorSeverity.setStatus('mandatory')
memSmokeSensorConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSmokeSensorConfigAlarmGeneration.setStatus('mandatory')
memVibrationSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10), )
if mibBuilder.loadTexts: memVibrationSensorConfigTable.setStatus('mandatory')
memVibrationSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1), ).setIndexNames((0, "PowerNet-MIB", "memVibrationSensorModuleConfigIndex"))
if mibBuilder.loadTexts: memVibrationSensorConfigEntry.setStatus('mandatory')
memVibrationSensorModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorModuleConfigIndex.setStatus('mandatory')
memVibrationSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVibrationSensorConfigSensorIndex.setStatus('mandatory')
memVibrationSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memVibrationSensorConfigSensorName.setStatus('mandatory')
memVibrationSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memVibrationSensorConfigSensorLocation.setStatus('mandatory')
memVibrationSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memVibrationSensorConfigSensorSeverity.setStatus('mandatory')
memVibrationSensorConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memVibrationSensorConfigAlarmGeneration.setStatus('mandatory')
memFluidSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11), )
if mibBuilder.loadTexts: memFluidSensorConfigTable.setStatus('mandatory')
memFluidSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "memFluidSensorModuleConfigIndex"))
if mibBuilder.loadTexts: memFluidSensorConfigEntry.setStatus('mandatory')
memFluidSensorModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorModuleConfigIndex.setStatus('mandatory')
memFluidSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFluidSensorConfigSensorIndex.setStatus('mandatory')
memFluidSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memFluidSensorConfigSensorName.setStatus('mandatory')
memFluidSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memFluidSensorConfigSensorLocation.setStatus('mandatory')
memFluidSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memFluidSensorConfigSensorSeverity.setStatus('mandatory')
memFluidSensorConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memFluidSensorConfigAlarmGeneration.setStatus('mandatory')
memDoorSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12), )
if mibBuilder.loadTexts: memDoorSensorConfigTable.setStatus('mandatory')
memDoorSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1), ).setIndexNames((0, "PowerNet-MIB", "memDoorSensorModuleConfigIndex"))
if mibBuilder.loadTexts: memDoorSensorConfigEntry.setStatus('mandatory')
memDoorSensorModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorModuleConfigIndex.setStatus('mandatory')
memDoorSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDoorSensorConfigSensorIndex.setStatus('mandatory')
memDoorSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memDoorSensorConfigSensorName.setStatus('mandatory')
memDoorSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memDoorSensorConfigSensorLocation.setStatus('mandatory')
memDoorSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memDoorSensorConfigSensorSeverity.setStatus('mandatory')
memDoorSensorConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 7, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memDoorSensorConfigAlarmGeneration.setStatus('mandatory')
wirelessSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1), )
if mibBuilder.loadTexts: wirelessSensorStatusTable.setStatus('mandatory')
wirelessSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "wirelessSensorStatusIndex"))
if mibBuilder.loadTexts: wirelessSensorStatusEntry.setStatus('mandatory')
wirelessSensorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusIndex.setStatus('mandatory')
wirelessSensorStatusExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusExtAddr.setStatus('mandatory')
wirelessSensorStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusName.setStatus('mandatory')
wirelessSensorStatusAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusAlarmGeneration.setStatus('mandatory')
wirelessSensorStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusTemperature.setStatus('mandatory')
wirelessSensorStatusHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusHighTempThresh.setStatus('mandatory')
wirelessSensorStatusLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusLowTempThresh.setStatus('mandatory')
wirelessSensorStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusHumidity.setStatus('mandatory')
wirelessSensorStatusHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusHighHumidityThresh.setStatus('mandatory')
wirelessSensorStatusLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusLowHumidityThresh.setStatus('mandatory')
wirelessSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusCommStatus.setStatus('mandatory')
wirelessSensorStatusMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMaxTempThresh.setStatus('mandatory')
wirelessSensorStatusMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMinTempThresh.setStatus('mandatory')
wirelessSensorStatusMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMaxHumidityThresh.setStatus('mandatory')
wirelessSensorStatusMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMinHumidityThresh.setStatus('mandatory')
wirelessSensorStatusBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusBattery.setStatus('mandatory')
wirelessSensorStatusLowBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusLowBatteryThresh.setStatus('mandatory')
wirelessSensorStatusMinBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMinBatteryThresh.setStatus('mandatory')
wirelessSensorStatusRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusRssi.setStatus('mandatory')
wirelessSensorStatusLowRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusLowRssiThresh.setStatus('mandatory')
wirelessSensorStatusMinRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusMinRssiThresh.setStatus('mandatory')
wirelessSensorStatusLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusLocation.setStatus('mandatory')
wirelessSensorStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorStatusAlarmStatus.setStatus('mandatory')
wirelessSensorPodStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1), )
if mibBuilder.loadTexts: wirelessSensorPodStatusTable.setStatus('mandatory')
wirelessSensorPodStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "wirelessSensorPodStatusIndex"))
if mibBuilder.loadTexts: wirelessSensorPodStatusEntry.setStatus('mandatory')
wirelessSensorPodStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusIndex.setStatus('mandatory')
wirelessSensorPodPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodPortIndex.setStatus('mandatory')
wirelessSensorPodStatusExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusExtAddr.setStatus('mandatory')
wirelessSensorPodStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusName.setStatus('mandatory')
wirelessSensorPodStatusAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusAlarmGeneration.setStatus('mandatory')
wirelessSensorPodStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusTemperature.setStatus('mandatory')
wirelessSensorPodStatusHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusHighTempThresh.setStatus('mandatory')
wirelessSensorPodStatusLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusLowTempThresh.setStatus('mandatory')
wirelessSensorPodStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusHumidity.setStatus('mandatory')
wirelessSensorPodStatusHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusHighHumidityThresh.setStatus('mandatory')
wirelessSensorPodStatusLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusLowHumidityThresh.setStatus('mandatory')
wirelessSensorPodStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusCommStatus.setStatus('mandatory')
wirelessSensorPodStatusMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMaxTempThresh.setStatus('mandatory')
wirelessSensorPodStatusMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMinTempThresh.setStatus('mandatory')
wirelessSensorPodStatusMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMaxHumidityThresh.setStatus('mandatory')
wirelessSensorPodStatusMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMinHumidityThresh.setStatus('mandatory')
wirelessSensorPodStatusDryContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drycontactOpen", 0), ("drycontactClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusDryContactState.setStatus('mandatory')
wirelessSensorPodStatusDryContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyOpen", 0), ("normallyClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusDryContactNormalState.setStatus('mandatory')
wirelessSensorPodStatusBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusBattery.setStatus('mandatory')
wirelessSensorPodStatusLowBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusLowBatteryThresh.setStatus('mandatory')
wirelessSensorPodStatusMinBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMinBatteryThresh.setStatus('mandatory')
wirelessSensorPodStatusRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusRssi.setStatus('mandatory')
wirelessSensorPodStatusLowRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusLowRssiThresh.setStatus('mandatory')
wirelessSensorPodStatusMinRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusMinRssiThresh.setStatus('mandatory')
wirelessSensorPodStatusLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusLocation.setStatus('mandatory')
wirelessSensorPodStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodStatusAlarmStatus.setStatus('mandatory')
wirelessSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1), )
if mibBuilder.loadTexts: wirelessSensorConfigTable.setStatus('mandatory')
wirelessSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "wirelessSensorConfigIndex"))
if mibBuilder.loadTexts: wirelessSensorConfigEntry.setStatus('mandatory')
wirelessSensorConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorConfigIndex.setStatus('mandatory')
wirelessSensorConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigName.setStatus('mandatory')
wirelessSensorConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigAlarmGeneration.setStatus('mandatory')
wirelessSensorConfigHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigHighTempThresh.setStatus('mandatory')
wirelessSensorConfigLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigLowTempThresh.setStatus('mandatory')
wirelessSensorConfigHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigHighHumidityThresh.setStatus('mandatory')
wirelessSensorConfigLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigLowHumidityThresh.setStatus('mandatory')
wirelessSensorConfigMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMaxTempThresh.setStatus('mandatory')
wirelessSensorConfigMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMinTempThresh.setStatus('mandatory')
wirelessSensorConfigMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMaxHumidityThresh.setStatus('mandatory')
wirelessSensorConfigMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMinHumidityThresh.setStatus('mandatory')
wirelessSensorConfigLowBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigLowBatteryThresh.setStatus('mandatory')
wirelessSensorConfigMinBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMinBatteryThresh.setStatus('mandatory')
wirelessSensorConfigLowRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigLowRssiThresh.setStatus('mandatory')
wirelessSensorConfigMinRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigMinRssiThresh.setStatus('mandatory')
wirelessSensorConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 3, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorConfigLocation.setStatus('mandatory')
wirelessSensorPodConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1), )
if mibBuilder.loadTexts: wirelessSensorPodConfigTable.setStatus('mandatory')
wirelessSensorPodConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "wirelessSensorPodConfigIndex"), (0, "PowerNet-MIB", "wirelessSensorPodConfigPortIndex"))
if mibBuilder.loadTexts: wirelessSensorPodConfigEntry.setStatus('mandatory')
wirelessSensorPodConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodConfigIndex.setStatus('mandatory')
wirelessSensorPodConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessSensorPodConfigPortIndex.setStatus('mandatory')
wirelessSensorPodConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigName.setStatus('mandatory')
wirelessSensorPodConfigAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigAlarmGeneration.setStatus('mandatory')
wirelessSensorPodConfigDryContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyOpen", 0), ("normallyClosed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigDryContactNormalState.setStatus('mandatory')
wirelessSensorPodConfigHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigHighTempThresh.setStatus('mandatory')
wirelessSensorPodConfigLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigLowTempThresh.setStatus('mandatory')
wirelessSensorPodConfigHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigHighHumidityThresh.setStatus('mandatory')
wirelessSensorPodConfigLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigLowHumidityThresh.setStatus('mandatory')
wirelessSensorPodConfigMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMaxTempThresh.setStatus('mandatory')
wirelessSensorPodConfigMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMinTempThresh.setStatus('mandatory')
wirelessSensorPodConfigMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMaxHumidityThresh.setStatus('mandatory')
wirelessSensorPodConfigMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMinHumidityThresh.setStatus('mandatory')
wirelessSensorPodConfigLowBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigLowBatteryThresh.setStatus('mandatory')
wirelessSensorPodConfigMinBatteryThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMinBatteryThresh.setStatus('mandatory')
wirelessSensorPodConfigLowRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigLowRssiThresh.setStatus('mandatory')
wirelessSensorPodConfigMinRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigMinRssiThresh.setStatus('mandatory')
wirelessSensorPodConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 5, 4, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSensorPodConfigLocation.setStatus('mandatory')
iemIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemIdentHardwareRevision.setStatus('mandatory')
iemConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbesNumProbes.setStatus('mandatory')
iemConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2), )
if mibBuilder.loadTexts: iemConfigProbesTable.setStatus('mandatory')
iemConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigProbeNumber"))
if mibBuilder.loadTexts: iemConfigProbesEntry.setStatus('mandatory')
iemConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbeNumber.setStatus('mandatory')
iemConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeName.setStatus('mandatory')
iemConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighTempThreshold.setStatus('mandatory')
iemConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowTempThreshold.setStatus('mandatory')
iemConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbeTempUnits.setStatus('mandatory')
iemConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighHumidThreshold.setStatus('mandatory')
iemConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowHumidThreshold.setStatus('mandatory')
iemConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighTempEnable.setStatus('mandatory')
iemConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowTempEnable.setStatus('mandatory')
iemConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighHumidEnable.setStatus('mandatory')
iemConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowHumidEnable.setStatus('mandatory')
iemConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxTempThreshold.setStatus('mandatory')
iemConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinTempThreshold.setStatus('mandatory')
iemConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxHumidThreshold.setStatus('mandatory')
iemConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinHumidThreshold.setStatus('mandatory')
iemConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxTempEnable.setStatus('mandatory')
iemConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinTempEnable.setStatus('mandatory')
iemConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxHumidEnable.setStatus('mandatory')
iemConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinHumidEnable.setStatus('mandatory')
iemConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeTempHysteresis.setStatus('mandatory')
iemConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHumidHysteresis.setStatus('mandatory')
iemConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLocation.setStatus('mandatory')
iemConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigContactsNumContacts.setStatus('mandatory')
iemConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4), )
if mibBuilder.loadTexts: iemConfigContactsTable.setStatus('mandatory')
iemConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigContactNumber"))
if mibBuilder.loadTexts: iemConfigContactsEntry.setStatus('mandatory')
iemConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigContactNumber.setStatus('mandatory')
iemConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactName.setStatus('mandatory')
iemConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactEnable.setStatus('mandatory')
iemConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactSeverity.setStatus('mandatory')
iemConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactNormalState.setStatus('mandatory')
iemConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactLocation.setStatus('mandatory')
iemConfigConfigRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigConfigRelaysNumRelays.setStatus('mandatory')
iemConfigRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6), )
if mibBuilder.loadTexts: iemConfigRelaysTable.setStatus('mandatory')
iemConfigRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "iemConfigRelayNumber"))
if mibBuilder.loadTexts: iemConfigRelaysEntry.setStatus('mandatory')
iemConfigRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigRelayNumber.setStatus('mandatory')
iemConfigRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayName.setStatus('mandatory')
iemConfigRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayNormalState.setStatus('mandatory')
iemConfigRelayFaultCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayFaultCondition.setStatus('mandatory')
iemStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbesNumProbes.setStatus('mandatory')
iemStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2), )
if mibBuilder.loadTexts: iemStatusProbesTable.setStatus('mandatory')
iemStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusProbeNumber"))
if mibBuilder.loadTexts: iemStatusProbesEntry.setStatus('mandatory')
iemStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeNumber.setStatus('mandatory')
iemStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeName.setStatus('mandatory')
iemStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeStatus.setStatus('mandatory')
iemStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeCurrentTemp.setStatus('mandatory')
iemStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeTempUnits.setStatus('mandatory')
iemStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeCurrentHumid.setStatus('mandatory')
iemStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeHighTempViolation.setStatus('mandatory')
iemStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLowTempViolation.setStatus('mandatory')
iemStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeHighHumidViolation.setStatus('mandatory')
iemStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLowHumidViolation.setStatus('mandatory')
iemStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMaxTempViolation.setStatus('mandatory')
iemStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMinTempViolation.setStatus('mandatory')
iemStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMaxHumidViolation.setStatus('mandatory')
iemStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMinHumidViolation.setStatus('mandatory')
iemStatusProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLocation.setStatus('mandatory')
iemStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactsNumContacts.setStatus('mandatory')
iemStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4), )
if mibBuilder.loadTexts: iemStatusContactsTable.setStatus('mandatory')
iemStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusContactNumber"))
if mibBuilder.loadTexts: iemStatusContactsEntry.setStatus('mandatory')
iemStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactNumber.setStatus('mandatory')
iemStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactName.setStatus('mandatory')
iemStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactStatus.setStatus('mandatory')
iemStatusRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelaysNumRelays.setStatus('mandatory')
iemStatusRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7), )
if mibBuilder.loadTexts: iemStatusRelaysTable.setStatus('mandatory')
iemStatusRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "iemStatusRelayNumber"))
if mibBuilder.loadTexts: iemStatusRelaysEntry.setStatus('mandatory')
iemStatusRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayNumber.setStatus('mandatory')
iemStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayName.setStatus('mandatory')
iemStatusRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("faultState", 1), ("normalState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayStatus.setStatus('mandatory')
emsIdentEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentEMSName.setStatus('mandatory')
emsIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentProductNumber.setStatus('mandatory')
emsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentFirmwareRev.setStatus('mandatory')
emsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentHardwareRev.setStatus('mandatory')
emsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentDateOfManufacture.setStatus('mandatory')
emsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentSerialNumber.setStatus('mandatory')
emsOutputRelayControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1), )
if mibBuilder.loadTexts: emsOutputRelayControlTable.setStatus('mandatory')
emsOutputRelayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayControlOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayControlEntry.setStatus('mandatory')
emsOutputRelayControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayIndex.setStatus('mandatory')
emsOutputRelayControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayName.setStatus('mandatory')
emsOutputRelayControlOutputRelayCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediateCloseEMS", 1), ("immediateOpenEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayCommand.setStatus('mandatory')
emsOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1), )
if mibBuilder.loadTexts: emsOutletControlTable.setStatus('mandatory')
emsOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletControlOutletIndex"))
if mibBuilder.loadTexts: emsOutletControlEntry.setStatus('mandatory')
emsOutletControlOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletControlOutletIndex.setStatus('mandatory')
emsOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletControlOutletName.setStatus('mandatory')
emsOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediateOnEMS", 1), ("immediateOffEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletControlOutletCommand.setStatus('mandatory')
emsSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1), )
if mibBuilder.loadTexts: emsSensorControlTable.setStatus('mandatory')
emsSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorControlSensorIndex"))
if mibBuilder.loadTexts: emsSensorControlEntry.setStatus('mandatory')
emsSensorControlSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorIndex.setStatus('mandatory')
emsSensorControlSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorSystemName.setStatus('mandatory')
emsSensorControlSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorUserName.setStatus('mandatory')
emsSensorControlSensorCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noCommandEMS", 1), ("resetCommandEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorControlSensorCommand.setStatus('mandatory')
emsAlarmDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1), )
if mibBuilder.loadTexts: emsAlarmDeviceControlTable.setStatus('mandatory')
emsAlarmDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceControlDeviceIndex"))
if mibBuilder.loadTexts: emsAlarmDeviceControlEntry.setStatus('mandatory')
emsAlarmDeviceControlDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceIndex.setStatus('mandatory')
emsAlarmDeviceControlDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceName.setStatus('mandatory')
emsAlarmDeviceControlDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceCommand.setStatus('mandatory')
emsConfigName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsConfigName.setStatus('mandatory')
emsConfigCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lightDisabled", 1), ("lightOnInformational", 2), ("lightOnWarning", 3), ("lightOnSevere", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsConfigCheckLogLight.setStatus('mandatory')
emsProbeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1), )
if mibBuilder.loadTexts: emsProbeConfigTable.setStatus('mandatory')
emsProbeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsProbeConfigProbeIndex"))
if mibBuilder.loadTexts: emsProbeConfigEntry.setStatus('mandatory')
emsProbeConfigProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeConfigProbeIndex.setStatus('mandatory')
emsProbeConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeName.setStatus('mandatory')
emsProbeConfigProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeHighTempThresh.setStatus('mandatory')
emsProbeConfigProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLowTempThresh.setStatus('mandatory')
emsProbeConfigProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeHighHumidityThresh.setStatus('mandatory')
emsProbeConfigProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLowHumidityThresh.setStatus('mandatory')
emsProbeConfigProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMaxTempThresh.setStatus('mandatory')
emsProbeConfigProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMinTempThresh.setStatus('mandatory')
emsProbeConfigProbeDeltaTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeDeltaTemp.setStatus('mandatory')
emsProbeConfigProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMaxHumidityThresh.setStatus('mandatory')
emsProbeConfigProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMinHumidityThresh.setStatus('mandatory')
emsProbeConfigProbeDeltaHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeDeltaHumidity.setStatus('mandatory')
emsProbeConfigProbeSTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTIncTempVariance.setStatus('mandatory')
emsProbeConfigProbeSTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTIncTempTime.setStatus('mandatory')
emsProbeConfigProbeSTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTDecTempVariance.setStatus('mandatory')
emsProbeConfigProbeSTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTDecTempTime.setStatus('mandatory')
emsProbeConfigProbeLTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTIncTempVariance.setStatus('mandatory')
emsProbeConfigProbeLTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTIncTempTime.setStatus('mandatory')
emsProbeConfigProbeLTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTDecTempVariance.setStatus('mandatory')
emsProbeConfigProbeLTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTDecTempTime.setStatus('mandatory')
emsProbeConfigProbeMaxVoltThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMaxVoltThresh.setStatus('mandatory')
emsProbeConfigProbeMinVoltThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMinVoltThresh.setStatus('mandatory')
emsInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1), )
if mibBuilder.loadTexts: emsInputContactConfigTable.setStatus('mandatory')
emsInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsInputContactConfigInputContactIndex"))
if mibBuilder.loadTexts: emsInputContactConfigEntry.setStatus('mandatory')
emsInputContactConfigInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactConfigInputContactIndex.setStatus('mandatory')
emsInputContactConfigInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsInputContactConfigInputContactName.setStatus('mandatory')
emsInputContactConfigInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsInputContactConfigInputContactNormalState.setStatus('mandatory')
emsOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1), )
if mibBuilder.loadTexts: emsOutputRelayConfigTable.setStatus('mandatory')
emsOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayConfigOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayConfigEntry.setStatus('mandatory')
emsOutputRelayConfigOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayIndex.setStatus('mandatory')
emsOutputRelayConfigOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayName.setStatus('mandatory')
emsOutputRelayConfigOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayNormalState.setStatus('mandatory')
emsOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1), )
if mibBuilder.loadTexts: emsOutletConfigTable.setStatus('mandatory')
emsOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletConfigOutletIndex"))
if mibBuilder.loadTexts: emsOutletConfigEntry.setStatus('mandatory')
emsOutletConfigOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletConfigOutletIndex.setStatus('mandatory')
emsOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletConfigOutletName.setStatus('mandatory')
emsOutletConfigOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletConfigOutletNormalState.setStatus('mandatory')
emsSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1), )
if mibBuilder.loadTexts: emsSensorConfigTable.setStatus('mandatory')
emsSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsSensorConfigEntry.setStatus('mandatory')
emsSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorConfigSensorIndex.setStatus('mandatory')
emsSensorConfigSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorConfigSensorSystemName.setStatus('mandatory')
emsSensorConfigSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorUserName.setStatus('mandatory')
emsSensorConfigSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorNormalState.setStatus('mandatory')
emsSensorConfigSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorAlarmDelay.setStatus('mandatory')
emsStatusEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusEMSName.setStatus('mandatory')
emsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusCommStatus.setStatus('mandatory')
emsStatusProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusProbeCount.setStatus('mandatory')
emsStatusInputContactCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusInputContactCount.setStatus('mandatory')
emsStatusOutputRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusOutputRelayCount.setStatus('mandatory')
emsStatusOutletCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusOutletCount.setStatus('mandatory')
emsStatusSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusSensorCount.setStatus('mandatory')
emsStatusAlinkAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlinkAruDeviceCount.setStatus('mandatory')
emsStatusAlinkProbeDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlinkProbeDeviceCount.setStatus('mandatory')
emsStatusAlarmDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlarmDeviceCount.setStatus('mandatory')
emsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusSysTempUnits.setStatus('mandatory')
emsStatusCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lightOff", 1), ("lightOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusCheckLogLight.setStatus('mandatory')
emsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusHardwareStatus.setStatus('mandatory')
emsProbeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1), )
if mibBuilder.loadTexts: emsProbeStatusTable.setStatus('mandatory')
emsProbeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsProbeStatusProbeIndex"))
if mibBuilder.loadTexts: emsProbeStatusEntry.setStatus('mandatory')
emsProbeStatusProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeIndex.setStatus('mandatory')
emsProbeStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeName.setStatus('mandatory')
emsProbeStatusProbeTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeTemperature.setStatus('mandatory')
emsProbeStatusProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHighTempThresh.setStatus('mandatory')
emsProbeStatusProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeLowTempThresh.setStatus('mandatory')
emsProbeStatusProbeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHumidity.setStatus('mandatory')
emsProbeStatusProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHighHumidityThresh.setStatus('mandatory')
emsProbeStatusProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeLowHumidityThresh.setStatus('mandatory')
emsProbeStatusProbeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeSerialNumber.setStatus('mandatory')
emsProbeStatusProbeCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeCommStatus.setStatus('mandatory')
emsProbeStatusProbeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeAlarmStatus.setStatus('mandatory')
emsProbeStatusProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMaxTempThresh.setStatus('mandatory')
emsProbeStatusProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMinTempThresh.setStatus('mandatory')
emsProbeStatusProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMaxHumidityThresh.setStatus('mandatory')
emsProbeStatusProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMinHumidityThresh.setStatus('mandatory')
emsProbeStatusProbeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeVoltage.setStatus('mandatory')
emsProbeStatusProbeMaxVoltThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMaxVoltThresh.setStatus('mandatory')
emsProbeStatusProbeMinVoltThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMinVoltThresh.setStatus('mandatory')
emsInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1), )
if mibBuilder.loadTexts: emsInputContactStatusTable.setStatus('mandatory')
emsInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsInputContactStatusInputContactIndex"))
if mibBuilder.loadTexts: emsInputContactStatusEntry.setStatus('mandatory')
emsInputContactStatusInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactIndex.setStatus('mandatory')
emsInputContactStatusInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactName.setStatus('mandatory')
emsInputContactStatusInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("contactClosedEMS", 1), ("contactOpenEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactState.setStatus('mandatory')
emsInputContactStatusInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactNormalState.setStatus('mandatory')
emsOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1), )
if mibBuilder.loadTexts: emsOutputRelayStatusTable.setStatus('mandatory')
emsOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayStatusEntry.setStatus('mandatory')
emsOutputRelayStatusOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayIndex.setStatus('mandatory')
emsOutputRelayStatusOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayName.setStatus('mandatory')
emsOutputRelayStatusOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayClosedEMS", 1), ("relayOpenEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayState.setStatus('mandatory')
emsOutputRelayStatusOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayNormalState.setStatus('mandatory')
emsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1), )
if mibBuilder.loadTexts: emsOutletStatusTable.setStatus('mandatory')
emsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsOutletStatusOutletIndex"))
if mibBuilder.loadTexts: emsOutletStatusEntry.setStatus('mandatory')
emsOutletStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletIndex.setStatus('mandatory')
emsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletName.setStatus('mandatory')
emsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletOnEMS", 1), ("outletOffEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletState.setStatus('mandatory')
emsOutletStatusOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletNormalState.setStatus('mandatory')
emsAlarmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1), )
if mibBuilder.loadTexts: emsAlarmDeviceStatusTable.setStatus('mandatory')
emsAlarmDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceStatusDeviceIndex"))
if mibBuilder.loadTexts: emsAlarmDeviceStatusEntry.setStatus('mandatory')
emsAlarmDeviceStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceIndex.setStatus('mandatory')
emsAlarmDeviceStatusDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceName.setStatus('mandatory')
emsAlarmDeviceStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceState.setStatus('mandatory')
emsSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1), )
if mibBuilder.loadTexts: emsSensorStatusTable.setStatus('mandatory')
emsSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsSensorStatusEntry.setStatus('mandatory')
emsSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorIndex.setStatus('mandatory')
emsSensorStatusSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorSystemName.setStatus('mandatory')
emsSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorName.setStatus('mandatory')
emsSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sensorFaultedEMS", 1), ("sensorOKEMS", 2), ("sensorNotInstalledEMS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorState.setStatus('mandatory')
emsSensorStatusSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorNormalState.setStatus('mandatory')
emsSensorStatusSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorAlarmDelay.setStatus('mandatory')
emsSmokeSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1), )
if mibBuilder.loadTexts: emsSmokeSensorConfigTable.setStatus('mandatory')
emsSmokeSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSmokeSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsSmokeSensorConfigEntry.setStatus('mandatory')
emsSmokeSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorConfigSensorIndex.setStatus('mandatory')
emsSmokeSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSmokeSensorConfigSensorName.setStatus('mandatory')
emsSmokeSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSmokeSensorConfigSensorLocation.setStatus('mandatory')
emsSmokeSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSmokeSensorConfigSensorSeverity.setStatus('mandatory')
emsVibrationSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2), )
if mibBuilder.loadTexts: emsVibrationSensorConfigTable.setStatus('mandatory')
emsVibrationSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "emsVibrationSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsVibrationSensorConfigEntry.setStatus('mandatory')
emsVibrationSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorConfigSensorIndex.setStatus('mandatory')
emsVibrationSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsVibrationSensorConfigSensorName.setStatus('mandatory')
emsVibrationSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsVibrationSensorConfigSensorLocation.setStatus('mandatory')
emsVibrationSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsVibrationSensorConfigSensorSeverity.setStatus('mandatory')
emsFluidSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3), )
if mibBuilder.loadTexts: emsFluidSensorConfigTable.setStatus('mandatory')
emsFluidSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "emsFluidSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsFluidSensorConfigEntry.setStatus('mandatory')
emsFluidSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorConfigSensorIndex.setStatus('mandatory')
emsFluidSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsFluidSensorConfigSensorName.setStatus('mandatory')
emsFluidSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsFluidSensorConfigSensorLocation.setStatus('mandatory')
emsFluidSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsFluidSensorConfigSensorSeverity.setStatus('mandatory')
emsDoorSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4), )
if mibBuilder.loadTexts: emsDoorSensorConfigTable.setStatus('mandatory')
emsDoorSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "emsDoorSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsDoorSensorConfigEntry.setStatus('mandatory')
emsDoorSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorConfigSensorIndex.setStatus('mandatory')
emsDoorSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsDoorSensorConfigSensorName.setStatus('mandatory')
emsDoorSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsDoorSensorConfigSensorLocation.setStatus('mandatory')
emsDoorSensorConfigSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 19, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsDoorSensorConfigSensorSeverity.setStatus('mandatory')
emsSmokeSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusTableSize.setStatus('mandatory')
emsSmokeSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2), )
if mibBuilder.loadTexts: emsSmokeSensorStatusTable.setStatus('mandatory')
emsSmokeSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "emsSmokeSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsSmokeSensorStatusEntry.setStatus('mandatory')
emsSmokeSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusSensorIndex.setStatus('mandatory')
emsSmokeSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusSensorName.setStatus('mandatory')
emsSmokeSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusSensorLocation.setStatus('mandatory')
emsSmokeSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smokeDetected", 1), ("noSmoke", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusSensorState.setStatus('mandatory')
emsSmokeSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorStatusSensorSeverity.setStatus('mandatory')
emsSmokeSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSmokeSensorCommStatus.setStatus('mandatory')
emsVibrationSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusTableSize.setStatus('mandatory')
emsVibrationSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4), )
if mibBuilder.loadTexts: emsVibrationSensorStatusTable.setStatus('mandatory')
emsVibrationSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "emsVibrationSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsVibrationSensorStatusEntry.setStatus('mandatory')
emsVibrationSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusSensorIndex.setStatus('mandatory')
emsVibrationSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusSensorName.setStatus('mandatory')
emsVibrationSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusSensorLocation.setStatus('mandatory')
emsVibrationSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vibrationDetected", 1), ("noVibration", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusSensorState.setStatus('mandatory')
emsVibrationSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorStatusSensorSeverity.setStatus('mandatory')
emsVibrationSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsVibrationSensorCommStatus.setStatus('mandatory')
emsFluidSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusTableSize.setStatus('mandatory')
emsFluidSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6), )
if mibBuilder.loadTexts: emsFluidSensorStatusTable.setStatus('mandatory')
emsFluidSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "emsFluidSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsFluidSensorStatusEntry.setStatus('mandatory')
emsFluidSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusSensorIndex.setStatus('mandatory')
emsFluidSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusSensorName.setStatus('mandatory')
emsFluidSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusSensorLocation.setStatus('mandatory')
emsFluidSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fluidDetected", 1), ("noFluid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusSensorState.setStatus('mandatory')
emsFluidSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorStatusSensorSeverity.setStatus('mandatory')
emsFluidSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsFluidSensorCommStatus.setStatus('mandatory')
emsDoorSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusTableSize.setStatus('mandatory')
emsDoorSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8), )
if mibBuilder.loadTexts: emsDoorSensorStatusTable.setStatus('mandatory')
emsDoorSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1), ).setIndexNames((0, "PowerNet-MIB", "emsDoorSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsDoorSensorStatusEntry.setStatus('mandatory')
emsDoorSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusSensorIndex.setStatus('mandatory')
emsDoorSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusSensorName.setStatus('mandatory')
emsDoorSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusSensorLocation.setStatus('mandatory')
emsDoorSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusSensorState.setStatus('mandatory')
emsDoorSensorStatusSensorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorStatusSensorSeverity.setStatus('mandatory')
emsDoorSensorCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 20, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsDoorSensorCommStatus.setStatus('mandatory')
airFMIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentName.setStatus('mandatory')
airFMIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentTableSize.setStatus('mandatory')
airFMIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3), )
if mibBuilder.loadTexts: airFMIdentTable.setStatus('mandatory')
airFMIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMIdentModuleIndex"))
if mibBuilder.loadTexts: airFMIdentEntry.setStatus('mandatory')
airFMIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleIndex.setStatus('mandatory')
airFMIdentModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleModelNumber.setStatus('mandatory')
airFMIdentModuleDateOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleDateOfMfg.setStatus('mandatory')
airFMIdentModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleSerialNumber.setStatus('mandatory')
airFMIdentModuleFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleFirmwareRev.setStatus('mandatory')
airFMIdentModuleHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleHardwareRev.setStatus('mandatory')
airFMIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentLocation.setStatus('mandatory')
airFMIdentContact = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentContact.setStatus('mandatory')
airFMStatusSystemOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemOn.setStatus('mandatory')
airFMStatusSystemAverageRetTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetTempC.setStatus('mandatory')
airFMStatusSystemAverageRetTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetTempF.setStatus('mandatory')
airFMStatusSystemAverageRetHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetHum.setStatus('mandatory')
airFMStatusSystemActionTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionTempC.setStatus('mandatory')
airFMStatusSystemActionTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionTempF.setStatus('mandatory')
airFMStatusSystemActionHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionHum.setStatus('mandatory')
airFMStatusSystemRemoteHighTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteHighTempC.setStatus('mandatory')
airFMStatusSystemRemoteHighTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteHighTempF.setStatus('mandatory')
airFMStatusSystemRemoteAvgTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgTempC.setStatus('mandatory')
airFMStatusSystemRemoteAvgTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgTempF.setStatus('mandatory')
airFMStatusSystemRemoteAvgHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgHum.setStatus('mandatory')
airFMStatusSystemRemoteLowTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteLowTempC.setStatus('mandatory')
airFMStatusSystemRemoteLowTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteLowTempF.setStatus('mandatory')
airFMStatusSystemCoolingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemCoolingEnabled.setStatus('mandatory')
airFMStatusSystemReheatingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemReheatingEnabled.setStatus('mandatory')
airFMStatusSystemHumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemHumidifyEnabled.setStatus('mandatory')
airFMStatusSystemDehumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemDehumidifyEnabled.setStatus('mandatory')
airFMStatusModuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleTableSize.setStatus('mandatory')
airFMStatusModuleTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20), )
if mibBuilder.loadTexts: airFMStatusModuleTable.setStatus('mandatory')
airFMStatusModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMStatusModuleIndex"))
if mibBuilder.loadTexts: airFMStatusModuleEntry.setStatus('mandatory')
airFMStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleIndex.setStatus('mandatory')
airFMStatusModuleOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleOutputCapacity.setStatus('mandatory')
airFMStatusModuleSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyTempC.setStatus('mandatory')
airFMStatusModuleSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyTempF.setStatus('mandatory')
airFMStatusModuleSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyHum.setStatus('mandatory')
airFMStatusModuleReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnTempC.setStatus('mandatory')
airFMStatusModuleReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnTempF.setStatus('mandatory')
airFMStatusModuleReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnHum.setStatus('mandatory')
airFMGroupSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statusOnLine", 1), ("statusIdle", 2), ("statusLoadShare", 3), ("statusOffLine", 4), ("statusFailed", 5), ("statusDisabled", 6), ("statusUndefined", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysStatus.setStatus('mandatory')
airFMGroupSysRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRuntime.setStatus('mandatory')
airFMGroupSysRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rolePrimary", 1), ("roleBackup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRole.setStatus('mandatory')
airFMGroupSysRolesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRolesTableSize.setStatus('mandatory')
airFMGroupSysRolesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2), )
if mibBuilder.loadTexts: airFMGroupSysRolesTable.setStatus('mandatory')
airFMGroupSysRolesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMGroupSysIndex"))
if mibBuilder.loadTexts: airFMGroupSysRolesEntry.setStatus('mandatory')
airFMGroupSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysIndex.setStatus('mandatory')
airFMGroupSysRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved1", 1), ("reserved2", 2), ("onLine", 3), ("idle", 4), ("loadShare", 5), ("failed", 6), ("offLine", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRoleStatus.setStatus('mandatory')
airFMGroupSysPresentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysPresentRole.setStatus('mandatory')
airFMGroupSysManualRoleSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupSysManualRoleSetting.setStatus('mandatory')
airFMGroupSysRunHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRunHours.setStatus('mandatory')
airFMGroupSysComm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commLost", 1), ("commEstablished", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysComm.setStatus('mandatory')
airFMGroupSysIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysIPAddress.setStatus('mandatory')
airFMGroupSysRoleAssignment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticManual", 1), ("dynamicAutomatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupSysRoleAssignment.setStatus('mandatory')
airFMGroupAutoRoleNumPrimary = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupAutoRoleNumPrimary.setStatus('mandatory')
airFMGroupCfgName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgName.setStatus('mandatory')
airFMGroupCfgNumSystems = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgNumSystems.setStatus('mandatory')
airFMGroupCfgIdleBlower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("minimumSpeed", 2), ("normalSpeed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgIdleBlower.setStatus('mandatory')
airFMGroupCfgShutdownSmoke = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgShutdownSmoke.setStatus('mandatory')
airFMGroupCfgShutdownFire = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgShutdownFire.setStatus('mandatory')
airFMGroupCfgFailoverCommLoss = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgFailoverCommLoss.setStatus('mandatory')
airFMGroupCfgDmdFightStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupCfgDmdFightStatus.setStatus('mandatory')
airFMGroupCfgDmdFightSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgDmdFightSetting.setStatus('mandatory')
airFMGroupCfgSetpointShareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupCfgSetpointShareStatus.setStatus('mandatory')
airFMGroupCfgSetpointShareSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgSetpointShareSetting.setStatus('mandatory')
airFMGroupCfgResetFieldServiceDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgResetFieldServiceDefaults.setStatus('mandatory')
airFMGroupLoadShareCoolRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolRequests.setStatus('mandatory')
airFMGroupLoadShareCoolThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolThreshC.setStatus('mandatory')
airFMGroupLoadShareCoolThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolThreshF.setStatus('mandatory')
airFMGroupLoadShareReheatRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatRequests.setStatus('mandatory')
airFMGroupLoadShareReheatThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatThreshC.setStatus('mandatory')
airFMGroupLoadShareReheatThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatThreshF.setStatus('mandatory')
airFMGroupLoadShareHumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareHumRequests.setStatus('mandatory')
airFMGroupLoadShareHumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareHumThresh.setStatus('mandatory')
airFMGroupLoadShareDehumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareDehumRequests.setStatus('mandatory')
airFMGroupLoadShareDehumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareDehumThresh.setStatus('mandatory')
airFMGroupFailoverSysAnyMinorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysAnyMinorAlarm.setStatus('mandatory')
airFMGroupFailoverSysAnyMajorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysAnyMajorAlarm.setStatus('mandatory')
airFMGroupFailoverSysHighEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysHighEnvTemp.setStatus('mandatory')
airFMGroupFailoverSysLowEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysLowEnvTemp.setStatus('mandatory')
airFMGroupFailoverSysHighEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysHighEnvHum.setStatus('mandatory')
airFMGroupFailoverSysLowEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysLowEnvHum.setStatus('mandatory')
airFMGroupFailoverSysFireAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysFireAlarm.setStatus('mandatory')
airFMGroupFailoverSysSmokeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSmokeAlarm.setStatus('mandatory')
airFMGroupFailoverSysCommLost = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysCommLost.setStatus('mandatory')
airFMGroupFailoverSysSupplySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSupplySensorFail.setStatus('mandatory')
airFMGroupFailoverSysReturnSensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysReturnSensorFail.setStatus('mandatory')
airFMGroupFailoverSysPrimarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysPrimarySensorFail.setStatus('mandatory')
airFMGroupFailoverSysSecondarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSecondarySensorFail.setStatus('mandatory')
airFMGroupFailoverSysNoSensorsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysNoSensorsAvailable.setStatus('mandatory')
airFMGroupFailoverModMaintRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModMaintRequired.setStatus('mandatory')
airFMGroupFailoverModCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModCoolFail.setStatus('mandatory')
airFMGroupFailoverModHumFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHumFail.setStatus('mandatory')
airFMGroupFailoverModBlwrCntrl1Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModBlwrCntrl1Fail.setStatus('mandatory')
airFMGroupFailoverModBlwrCntrl2Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModBlwrCntrl2Fail.setStatus('mandatory')
airFMGroupFailoverModHighFilterDP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHighFilterDP.setStatus('mandatory')
airFMGroupFailoverModHighSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHighSupplyTemp.setStatus('mandatory')
airFMGroupFailoverModLowSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModLowSupplyTemp.setStatus('mandatory')
airFMGroupFailoverModLossOrLowAirFlow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModLossOrLowAirFlow.setStatus('mandatory')
airFMGroupFailoverModHumReplaceCylinder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHumReplaceCylinder.setStatus('mandatory')
airFMGroupFailoverModAirBlockInterlockOpen = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModAirBlockInterlockOpen.setStatus('mandatory')
airFMGroupFailoverModWaterDetected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModWaterDetected.setStatus('mandatory')
airFMGroupFailoverModCondensatePumpFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModCondensatePumpFail.setStatus('mandatory')
airFMSysNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumber.setStatus('mandatory')
airFMSysPresentStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("reserved1", 2), ("reserved2", 3), ("onLine", 4), ("idle", 5), ("loadShare", 6), ("failed", 7), ("offLine", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysPresentStatus.setStatus('mandatory')
airFMSysPresentRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysPresentRole.setStatus('mandatory')
airFMSysRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysRunHours.setStatus('mandatory')
airFMSysCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidTempC.setStatus('mandatory')
airFMSysCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidTempF.setStatus('mandatory')
airFMSysHotWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterTempC.setStatus('mandatory')
airFMSysHotWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterTempF.setStatus('mandatory')
airFMSysAvgReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnTempC.setStatus('mandatory')
airFMSysAvgReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnTempF.setStatus('mandatory')
airFMSysAvgReturnHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnHum.setStatus('mandatory')
airFMSysAvgRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteTempC.setStatus('mandatory')
airFMSysAvgRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteTempF.setStatus('mandatory')
airFMSysAvgRemoteHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteHum.setStatus('mandatory')
airFMSysMaxRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMaxRemoteTempC.setStatus('mandatory')
airFMSysMaxRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMaxRemoteTempF.setStatus('mandatory')
airFMSysMinRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMinRemoteTempC.setStatus('mandatory')
airFMSysMinRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMinRemoteTempF.setStatus('mandatory')
airFMSysTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysTempCtrlMethod.setStatus('mandatory')
airFMSysActualTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualTempCtrlMethod.setStatus('mandatory')
airFMSysHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHumCtrlMethod.setStatus('mandatory')
airFMSysActualHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualHumCtrlMethod.setStatus('mandatory')
airFMSysCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlTempC.setStatus('mandatory')
airFMSysCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlTempF.setStatus('mandatory')
airFMSysCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlHum.setStatus('mandatory')
airFMSysDXCoolingDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXCoolingDmd.setStatus('mandatory')
airFMSysDXDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXDehumDmd.setStatus('mandatory')
airFMSysDXActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXActualCoolDehum.setStatus('mandatory')
airFMSysCoilFluidCoolDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidCoolDmd.setStatus('mandatory')
airFMSysCoilFluidDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidDehumDmd.setStatus('mandatory')
airFMSysCoilFluidActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidActualCoolDehum.setStatus('mandatory')
airFMSysElectricReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysElectricReheatDmd.setStatus('mandatory')
airFMSysActualElectricReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualElectricReheat.setStatus('mandatory')
airFMSysSteamHotGasReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamHotGasReheatDmd.setStatus('mandatory')
airFMSysActualSteamHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamHotGasReheat.setStatus('mandatory')
airFMSysSteamElectrodeHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamElectrodeHumDmd.setStatus('mandatory')
airFMSysActualSteamElectrodeHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamElectrodeHum.setStatus('mandatory')
airFMSysSteamHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamHumDmd.setStatus('mandatory')
airFMSysActualSteamHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamHum.setStatus('mandatory')
airFMSysNumModules = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumModules.setStatus('mandatory')
airFMSysNumPCIOMs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumPCIOMs.setStatus('mandatory')
airFMSysMainsVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMainsVlt.setStatus('mandatory')
airFMSysUPSVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysUPSVlt.setStatus('mandatory')
airFMSysCoilCfg = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("dx", 2), ("econ", 3), ("multicool", 4), ("chilledWater", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilCfg.setStatus('mandatory')
airFMSysRefrigType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("r22", 2), ("r407C", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysRefrigType.setStatus('mandatory')
airFMSysHeatRejection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("airCooled", 2), ("waterCooled", 3), ("glycolCooled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHeatRejection.setStatus('mandatory')
airFMSysDischAirPtrn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("upFlow", 2), ("downFlow", 3), ("horizFlow", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDischAirPtrn.setStatus('mandatory')
airFMSysAirFltr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("standard", 2), ("highEfficiency", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAirFltr.setStatus('mandatory')
airFMSysFlowSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("dxEcon", 3), ("multiCoolChillWater", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysFlowSwitch.setStatus('mandatory')
airFMSysCoilFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidVlvAct.setStatus('mandatory')
airFMSysCoilFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidVlvType.setStatus('mandatory')
airFMSysCndsrFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("floatingControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvAct.setStatus('mandatory')
airFMSysCndsrFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvType.setStatus('mandatory')
airFMSysHotWaterVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterVlvAct.setStatus('mandatory')
airFMSysNumRemoteSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumRemoteSensors.setStatus('mandatory')
airFMSysPrimaryControlSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("return", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysPrimaryControlSensor.setStatus('mandatory')
airFMSysRemoteSensorData = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("average", 2), ("maximum", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysRemoteSensorData.setStatus('mandatory')
airFMSysFastStartup = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysFastStartup.setStatus('mandatory')
airFMSysStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysStartupDelay.setStatus('mandatory')
airFMSysModeDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysModeDelay.setStatus('mandatory')
airFMSysCommLossShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCommLossShutdownDelay.setStatus('mandatory')
airFMSysResetSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetSysFailure.setStatus('mandatory')
airFMSysResetUserDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetUserDflts.setStatus('mandatory')
airFMSysResetFldSrvcDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetFldSrvcDflts.setStatus('mandatory')
airFMSysResetRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetRunHours.setStatus('mandatory')
airFMSysCompMinOnTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompMinOnTime.setStatus('mandatory')
airFMSysCompMinOffTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompMinOffTime.setStatus('mandatory')
airFMSysCompRotPeriod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompRotPeriod.setStatus('mandatory')
airFMSysEconIsolVlvOpenDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysEconIsolVlvOpenDelay.setStatus('mandatory')
airFMSysEconIsolVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysEconIsolVlvCloseDelay.setStatus('mandatory')
airFMSysCndsrFluidVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvCloseDelay.setStatus('mandatory')
airFMSysInterstageDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInterstageDelay.setStatus('mandatory')
airFMSysCoolState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolState.setStatus('mandatory')
airFMSysCoolEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolEssFunction.setStatus('mandatory')
airFMSysCoolSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolSetpointC.setStatus('mandatory')
airFMSysCoolSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolSetpointF.setStatus('mandatory')
airFMSysCoolDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolDeadbandC.setStatus('mandatory')
airFMSysCoolDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolDeadbandF.setStatus('mandatory')
airFMSysCoolEconIsolFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolEconIsolFunction.setStatus('mandatory')
airFMSysSuctPresCompensation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysSuctPresCompensation.setStatus('mandatory')
airFMSysCoilFluidActivThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivThreshC.setStatus('mandatory')
airFMSysCoilFluidActivThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivThreshF.setStatus('mandatory')
airFMSysCoilFluidActivDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivDeadbandC.setStatus('mandatory')
airFMSysCoilFluidActivDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivDeadbandF.setStatus('mandatory')
airFMSysCoolPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDMethod.setStatus('mandatory')
airFMSysCoolPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDGainP.setStatus('mandatory')
airFMSysCoolPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDResetRateI.setStatus('mandatory')
airFMSysCoolPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDDerivativeD.setStatus('mandatory')
airFMSysHumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumState.setStatus('mandatory')
airFMSysHumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumEssFunction.setStatus('mandatory')
airFMSysHumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumSetpoint.setStatus('mandatory')
airFMSysHumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumDeadband.setStatus('mandatory')
airFMSysHumCtrlSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumCtrlSetting.setStatus('mandatory')
airFMSysActualHumCtrl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualHumCtrl.setStatus('mandatory')
airFMSysHumSensBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumSensBand.setStatus('mandatory')
airFMSysDehumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumState.setStatus('mandatory')
airFMSysDehumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumEssFunction.setStatus('mandatory')
airFMSysDehumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumSetpoint.setStatus('mandatory')
airFMSysDehumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumDeadband.setStatus('mandatory')
airFMSysDehumCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumCapacity.setStatus('mandatory')
airFMSysDehumPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDMethod.setStatus('mandatory')
airFMSysDehumPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDGainP.setStatus('mandatory')
airFMSysDehumPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDResetRateI.setStatus('mandatory')
airFMSysDehumPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDDerivativeD.setStatus('mandatory')
airFMSysReheatState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatState.setStatus('mandatory')
airFMSysReheatEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatEssFunction.setStatus('mandatory')
airFMSysReheatSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatSetpointC.setStatus('mandatory')
airFMSysReheatSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatSetpointF.setStatus('mandatory')
airFMSysReheatDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatDeadbandC.setStatus('mandatory')
airFMSysReheatDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatDeadbandF.setStatus('mandatory')
airFMSysReheatPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDMethod.setStatus('mandatory')
airFMSysReheatPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDGainP.setStatus('mandatory')
airFMSysReheatPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDResetRateI.setStatus('mandatory')
airFMSysReheatPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDDerivativeD.setStatus('mandatory')
airFMSysHighSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighSplyTempC.setStatus('mandatory')
airFMSysHighSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighSplyTempF.setStatus('mandatory')
airFMSysLowSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowSplyTempC.setStatus('mandatory')
airFMSysLowSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowSplyTempF.setStatus('mandatory')
airFMSysHighCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCoilFluidTempC.setStatus('mandatory')
airFMSysHighCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCoilFluidTempF.setStatus('mandatory')
airFMSysLowCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCoilFluidTempC.setStatus('mandatory')
airFMSysLowCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCoilFluidTempF.setStatus('mandatory')
airFMSysHighCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlTempC.setStatus('mandatory')
airFMSysHighCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlTempF.setStatus('mandatory')
airFMSysLowCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlTempC.setStatus('mandatory')
airFMSysLowCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlTempF.setStatus('mandatory')
airFMSysHighCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlHum.setStatus('mandatory')
airFMSysLowCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlHum.setStatus('mandatory')
airFMSysTempAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysTempAlarmDelay.setStatus('mandatory')
airFMSysHumAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumAlarmDelay.setStatus('mandatory')
airFMSysInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputTableSize.setStatus('mandatory')
airFMSysInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2), )
if mibBuilder.loadTexts: airFMSysInputTable.setStatus('mandatory')
airFMSysInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysInputIndex"))
if mibBuilder.loadTexts: airFMSysInputEntry.setStatus('mandatory')
airFMSysInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputIndex.setStatus('mandatory')
airFMSysInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputName.setStatus('mandatory')
airFMSysInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputStatus.setStatus('mandatory')
airFMSysInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputNormalState.setStatus('mandatory')
airFMSysInputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputDelay.setStatus('mandatory')
airFMSysInputAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("statusOnly", 1), ("minor", 2), ("major", 3), ("remoteRunStop", 4), ("nonessStop", 5), ("immShutdown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputAlarmAction.setStatus('mandatory')
airFMSysOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputTableSize.setStatus('mandatory')
airFMSysOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2), )
if mibBuilder.loadTexts: airFMSysOutputTable.setStatus('mandatory')
airFMSysOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysOutputIndex"))
if mibBuilder.loadTexts: airFMSysOutputEntry.setStatus('mandatory')
airFMSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputIndex.setStatus('mandatory')
airFMSysOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputStatus.setStatus('mandatory')
airFMSysOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysOutputNormalState.setStatus('mandatory')
airFMSysAlarmMapSysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapSysTableSize.setStatus('mandatory')
airFMSysAlarmMapSysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapSysTable.setStatus('mandatory')
airFMSysAlarmMapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapSysOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapSysEntry.setStatus('mandatory')
airFMSysAlarmMapSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapSysOutputIndex.setStatus('mandatory')
airFMSysAlarmMapSysAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysAnyAlarm.setStatus('mandatory')
airFMSysAlarmMapSystemOn = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSystemOn.setStatus('mandatory')
airFMSysAlarmMapSystemOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSystemOffline.setStatus('mandatory')
airFMSysAlarmMapSysHighEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysHighEnvTemp.setStatus('mandatory')
airFMSysAlarmMapSysLowEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysLowEnvTemp.setStatus('mandatory')
airFMSysAlarmMapSysHighEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysHighEnvHum.setStatus('mandatory')
airFMSysAlarmMapSysLowEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysLowEnvHum.setStatus('mandatory')
airFMSysAlarmMapSysFireDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysFireDet.setStatus('mandatory')
airFMSysAlarmMapSysSmokeDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSmokeDet.setStatus('mandatory')
airFMSysAlarmMapSysEconIsol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysEconIsol.setStatus('mandatory')
airFMSysAlarmMapSysSupplySensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSupplySensFail.setStatus('mandatory')
airFMSysAlarmMapSysReturnSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysReturnSensFail.setStatus('mandatory')
airFMSysAlarmMapSysRemSensRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysRemSensRemoved.setStatus('mandatory')
airFMSysAlarmMapSysPrimSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysPrimSensFail.setStatus('mandatory')
airFMSysAlarmMapSysSecSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSecSensFail.setStatus('mandatory')
airFMSysAlarmMapSysSecSensActive = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSecSensActive.setStatus('mandatory')
airFMSysAlarmMapMainModTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModTableSize.setStatus('mandatory')
airFMSysAlarmMapMainModTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapMainModTable.setStatus('mandatory')
airFMSysAlarmMapMainModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapMainModOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapMainModEntry.setStatus('mandatory')
airFMSysAlarmMapMainModOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModOutputIndex.setStatus('mandatory')
airFMSysAlarmMapMainModAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModAnyAlarm.setStatus('mandatory')
airFMSysAlarmMapMainModMaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModMaintReq.setStatus('mandatory')
airFMSysAlarmMapMainModCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModCoolFail.setStatus('mandatory')
airFMSysAlarmMapMainModHighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHighSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapMainModLowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModLowSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapMainModHumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHumFail.setStatus('mandatory')
airFMSysAlarmMapMainModHumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHumReplCyl.setStatus('mandatory')
airFMSysAlarmMapMainModCondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModCondPumpFail.setStatus('mandatory')
airFMSysAlarmMapMainModBlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModBlwrCntl1Fail.setStatus('mandatory')
airFMSysAlarmMapMainModBlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModBlwrCntl2Fail.setStatus('mandatory')
airFMSysAlarmMapMainModHighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHighFltrDP.setStatus('mandatory')
airFMSysAlarmMapMainModLowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModLowAirFlow.setStatus('mandatory')
airFMSysAlarmMapMainModAirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModAirBlckIntOpen.setStatus('mandatory')
airFMSysAlarmMapMainModWaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModWaterDetected.setStatus('mandatory')
airFMSysAlarmMapExpMod1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1TableSize.setStatus('mandatory')
airFMSysAlarmMapExpMod1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1Table.setStatus('mandatory')
airFMSysAlarmMapExpMod1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod1OutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1Entry.setStatus('mandatory')
airFMSysAlarmMapExpMod1OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1OutputIndex.setStatus('mandatory')
airFMSysAlarmMapExpMod1AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1AnyAlarm.setStatus('mandatory')
airFMSysAlarmMapExpMod1MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1MaintReq.setStatus('mandatory')
airFMSysAlarmMapExpMod1CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1CoolFail.setStatus('mandatory')
airFMSysAlarmMapExpMod1HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HighSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapExpMod1LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1LowSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapExpMod1HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HumFail.setStatus('mandatory')
airFMSysAlarmMapExpMod1HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HumReplCyl.setStatus('mandatory')
airFMSysAlarmMapExpMod1CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1CondPumpFail.setStatus('mandatory')
airFMSysAlarmMapExpMod1BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1BlwrCntl1Fail.setStatus('mandatory')
airFMSysAlarmMapExpMod1BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1BlwrCntl2Fail.setStatus('mandatory')
airFMSysAlarmMapExpMod1HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HighFltrDP.setStatus('mandatory')
airFMSysAlarmMapExpMod1LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1LowAirFlow.setStatus('mandatory')
airFMSysAlarmMapExpMod1AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1AirBlckIntOpen.setStatus('mandatory')
airFMSysAlarmMapExpMod1WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1WaterDetected.setStatus('mandatory')
airFMSysAlarmMapExpMod2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2TableSize.setStatus('mandatory')
airFMSysAlarmMapExpMod2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2Table.setStatus('mandatory')
airFMSysAlarmMapExpMod2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod2OutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2Entry.setStatus('mandatory')
airFMSysAlarmMapExpMod2OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2OutputIndex.setStatus('mandatory')
airFMSysAlarmMapExpMod2AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2AnyAlarm.setStatus('mandatory')
airFMSysAlarmMapExpMod2MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2MaintReq.setStatus('mandatory')
airFMSysAlarmMapExpMod2CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2CoolFail.setStatus('mandatory')
airFMSysAlarmMapExpMod2HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HighSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapExpMod2LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2LowSupplyTemp.setStatus('mandatory')
airFMSysAlarmMapExpMod2HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HumFail.setStatus('mandatory')
airFMSysAlarmMapExpMod2HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HumReplCyl.setStatus('mandatory')
airFMSysAlarmMapExpMod2CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2CondPumpFail.setStatus('mandatory')
airFMSysAlarmMapExpMod2BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2BlwrCntl1Fail.setStatus('mandatory')
airFMSysAlarmMapExpMod2BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2BlwrCntl2Fail.setStatus('mandatory')
airFMSysAlarmMapExpMod2HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HighFltrDP.setStatus('mandatory')
airFMSysAlarmMapExpMod2LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2LowAirFlow.setStatus('mandatory')
airFMSysAlarmMapExpMod2AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2AirBlckIntOpen.setStatus('mandatory')
airFMSysAlarmMapExpMod2WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2WaterDetected.setStatus('mandatory')
airFMSysAlarmMapInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapInputTableSize.setStatus('mandatory')
airFMSysAlarmMapInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapInputTable.setStatus('mandatory')
airFMSysAlarmMapInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapInputOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapInputEntry.setStatus('mandatory')
airFMSysAlarmMapInputOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapInputOutputIndex.setStatus('mandatory')
airFMSysAlarmMapInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput1.setStatus('mandatory')
airFMSysAlarmMapInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput2.setStatus('mandatory')
airFMSysAlarmMapInput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput3.setStatus('mandatory')
airFMSysAlarmMapInput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput4.setStatus('mandatory')
airFMSysAlarmMapInput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput5.setStatus('mandatory')
airFMSysAlarmMapInput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput6.setStatus('mandatory')
airFMSysAlarmMapInput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput7.setStatus('mandatory')
airFMSysAlarmMapInput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput8.setStatus('mandatory')
airFMSysAlarmMapInput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput9.setStatus('mandatory')
airFMSysAlarmMapInput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput10.setStatus('mandatory')
airFMSysAlarmMapInput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput11.setStatus('mandatory')
airFMSysAlarmMapInput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput12.setStatus('mandatory')
airFMSysAlarmMapInput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput13.setStatus('mandatory')
airFMSysAlarmMapInput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput14.setStatus('mandatory')
airFMSysAlarmMapInput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput15.setStatus('mandatory')
airFMSysAlarmMapInput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput16.setStatus('mandatory')
airFMSysAlarmMapOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapOutputTableSize.setStatus('mandatory')
airFMSysAlarmMapOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2), )
if mibBuilder.loadTexts: airFMSysAlarmMapOutputTable.setStatus('mandatory')
airFMSysAlarmMapOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapOutputEntry.setStatus('mandatory')
airFMSysAlarmMapOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapOutputIndex.setStatus('mandatory')
airFMSysAlarmMapOutput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput1.setStatus('mandatory')
airFMSysAlarmMapOutput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput2.setStatus('mandatory')
airFMSysAlarmMapOutput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput3.setStatus('mandatory')
airFMSysAlarmMapOutput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput4.setStatus('mandatory')
airFMSysAlarmMapOutput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput5.setStatus('mandatory')
airFMSysAlarmMapOutput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput6.setStatus('mandatory')
airFMSysAlarmMapOutput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput7.setStatus('mandatory')
airFMSysAlarmMapOutput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput8.setStatus('mandatory')
airFMSysAlarmMapOutput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput9.setStatus('mandatory')
airFMSysAlarmMapOutput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput10.setStatus('mandatory')
airFMSysAlarmMapOutput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput11.setStatus('mandatory')
airFMSysAlarmMapOutput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput12.setStatus('mandatory')
airFMSysAlarmMapOutput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput13.setStatus('mandatory')
airFMSysAlarmMapOutput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput14.setStatus('mandatory')
airFMSysAlarmMapOutput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput15.setStatus('mandatory')
airFMSysAlarmMapOutput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput16.setStatus('mandatory')
airFMModIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModIdentTableSize.setStatus('mandatory')
airFMModIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2), )
if mibBuilder.loadTexts: airFMModIdentTable.setStatus('mandatory')
airFMModIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModIdentModuleIndex"))
if mibBuilder.loadTexts: airFMModIdentEntry.setStatus('mandatory')
airFMModIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModIdentModuleIndex.setStatus('mandatory')
airFMModModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModModelNumber.setStatus('mandatory')
airFMModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSerialNumber.setStatus('mandatory')
airFMModManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModManufactureDate.setStatus('mandatory')
airFMModFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFirmwareRev.setStatus('mandatory')
airFMModHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHardwareRev.setStatus('mandatory')
airFMModStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModStatusTableSize.setStatus('mandatory')
airFMModStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2), )
if mibBuilder.loadTexts: airFMModStatusTable.setStatus('mandatory')
airFMModStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModStatusModuleIndex"))
if mibBuilder.loadTexts: airFMModStatusEntry.setStatus('mandatory')
airFMModStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModStatusModuleIndex.setStatus('mandatory')
airFMModSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyTempC.setStatus('mandatory')
airFMModSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyTempF.setStatus('mandatory')
airFMModSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyHum.setStatus('mandatory')
airFMModReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnTempC.setStatus('mandatory')
airFMModReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnTempF.setStatus('mandatory')
airFMModReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnHum.setStatus('mandatory')
airFMModFilterDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFilterDiffPresPa.setStatus('mandatory')
airFMModFilterDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFilterDiffPresInWC.setStatus('mandatory')
airFMModCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilDiffPresPa.setStatus('mandatory')
airFMModCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilDiffPresInWC.setStatus('mandatory')
airFMModPropTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModPropTableSize.setStatus('mandatory')
airFMModPropTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2), )
if mibBuilder.loadTexts: airFMModPropTable.setStatus('mandatory')
airFMModPropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModPropModuleIndex"))
if mibBuilder.loadTexts: airFMModPropEntry.setStatus('mandatory')
airFMModPropModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModPropModuleIndex.setStatus('mandatory')
airFMModOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("kw45", 2), ("kw35", 3), ("kw40", 4), ("kw50", 5), ("kw80", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModOutputCapacity.setStatus('mandatory')
airFMModCapacityCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("tandem", 2), ("hotGasBypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCapacityCtrl.setStatus('mandatory')
airFMModHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("electricSCR", 3), ("steam", 4), ("hotWaterOnOff", 5), ("hotGasReheat", 6), ("hotGasAndElectric", 7), ("hotWaterProp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHeaterType.setStatus('mandatory')
airFMModElectricHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("kw10", 2), ("kw15", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModElectricHeaterType.setStatus('mandatory')
airFMModHumidifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumidifierType.setStatus('mandatory')
airFMModBlwrFreqSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwrFreqSetting.setStatus('mandatory')
airFMModNomCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModNomCoilDiffPresPa.setStatus('mandatory')
airFMModNomCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModNomCoilDiffPresInWC.setStatus('mandatory')
airFMModCondPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCondPump.setStatus('mandatory')
airFMModFireDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFireDetector.setStatus('mandatory')
airFMModSmokeDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSmokeDetector.setStatus('mandatory')
airFMModWaterDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModWaterDetector.setStatus('mandatory')
airFMModCoolTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoolTableSize.setStatus('mandatory')
airFMModCoolTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2), )
if mibBuilder.loadTexts: airFMModCoolTable.setStatus('mandatory')
airFMModCoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModCoolModuleIndex"))
if mibBuilder.loadTexts: airFMModCoolEntry.setStatus('mandatory')
airFMModCoolModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoolModuleIndex.setStatus('mandatory')
airFMModComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModComp1.setStatus('mandatory')
airFMModComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModComp2.setStatus('mandatory')
airFMModSuctPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSuctPresKPa.setStatus('mandatory')
airFMModSuctPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSuctPresPSI.setStatus('mandatory')
airFMModDischPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModDischPresKPa.setStatus('mandatory')
airFMModDischPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModDischPresPSI.setStatus('mandatory')
airFMModCondFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCondFluidVlvPos.setStatus('mandatory')
airFMModCoilFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilFluidVlvPos.setStatus('mandatory')
airFMModHumTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumTableSize.setStatus('mandatory')
airFMModHumTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2), )
if mibBuilder.loadTexts: airFMModHumTable.setStatus('mandatory')
airFMModHumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModHumModuleIndex"))
if mibBuilder.loadTexts: airFMModHumEntry.setStatus('mandatory')
airFMModHumModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumModuleIndex.setStatus('mandatory')
airFMModHumidifier = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumidifier.setStatus('mandatory')
airFMModElectrodeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModElectrodeCurrent.setStatus('mandatory')
airFMModHumActualOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumActualOutput.setStatus('mandatory')
airFMModWaterConductivity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModWaterConductivity.setStatus('mandatory')
airFMModHotWaterVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHotWaterVlvPos.setStatus('mandatory')
airFMModStmElectHumMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("auto", 3), ("drain", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModStmElectHumMode.setStatus('mandatory')
airFMModBlwr1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1TableSize.setStatus('mandatory')
airFMModBlwr1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2), )
if mibBuilder.loadTexts: airFMModBlwr1Table.setStatus('mandatory')
airFMModBlwr1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr1ModuleIndex"))
if mibBuilder.loadTexts: airFMModBlwr1Entry.setStatus('mandatory')
airFMModBlwr1ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ModuleIndex.setStatus('mandatory')
airFMModBlwr1CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CtrlType.setStatus('mandatory')
airFMModBlwr1CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CmdFreq.setStatus('mandatory')
airFMModBlwr1ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ActFreq.setStatus('mandatory')
airFMModBlwr1Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Poles.setStatus('mandatory')
airFMModBlwr1RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1RatedHorsePower.setStatus('mandatory')
airFMModBlwr1RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1RatedCurrent.setStatus('mandatory')
airFMModBlwr1ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ActTorq.setStatus('mandatory')
airFMModBlwr1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Current.setStatus('mandatory')
airFMModBlwr1Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Vlt.setStatus('mandatory')
airFMModBlwr1DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1DCLinkVlt.setStatus('mandatory')
airFMModBlwr1AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1AccTime.setStatus('mandatory')
airFMModBlwr1DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1DecTime.setStatus('mandatory')
airFMModBlwr1CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CapLife.setStatus('mandatory')
airFMModBlwr1CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CtrlCoolFanLife.setStatus('mandatory')
airFMModBlwr1ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvMode.setStatus('mandatory')
airFMModBlwr1ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvSetting.setStatus('mandatory')
airFMModBlwr1ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvTimeConst.setStatus('mandatory')
airFMModBlwr1FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1FanPower.setStatus('mandatory')
airFMModBlwr1HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1HeatsinkTempC.setStatus('mandatory')
airFMModBlwr1HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1HeatsinkTempF.setStatus('mandatory')
airFMModBlwr1ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ChokeTempC.setStatus('mandatory')
airFMModBlwr1ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ChokeTempF.setStatus('mandatory')
airFMModBlwr1InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1InverterTempC.setStatus('mandatory')
airFMModBlwr1InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1InverterTempF.setStatus('mandatory')
airFMModBlwr2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2TableSize.setStatus('mandatory')
airFMModBlwr2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2), )
if mibBuilder.loadTexts: airFMModBlwr2Table.setStatus('mandatory')
airFMModBlwr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr2ModuleIndex"))
if mibBuilder.loadTexts: airFMModBlwr2Entry.setStatus('mandatory')
airFMModBlwr2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ModuleIndex.setStatus('mandatory')
airFMModBlwr2CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CtrlType.setStatus('mandatory')
airFMModBlwr2CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CmdFreq.setStatus('mandatory')
airFMModBlwr2ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ActFreq.setStatus('mandatory')
airFMModBlwr2Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Poles.setStatus('mandatory')
airFMModBlwr2RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2RatedHorsePower.setStatus('mandatory')
airFMModBlwr2RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2RatedCurrent.setStatus('mandatory')
airFMModBlwr2ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ActTorq.setStatus('mandatory')
airFMModBlwr2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Current.setStatus('mandatory')
airFMModBlwr2Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Vlt.setStatus('mandatory')
airFMModBlwr2DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2DCLinkVlt.setStatus('mandatory')
airFMModBlwr2AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2AccTime.setStatus('mandatory')
airFMModBlwr2DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2DecTime.setStatus('mandatory')
airFMModBlwr2CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CapLife.setStatus('mandatory')
airFMModBlwr2CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CtrlCoolFanLife.setStatus('mandatory')
airFMModBlwr2ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvMode.setStatus('mandatory')
airFMModBlwr2ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvSetting.setStatus('mandatory')
airFMModBlwr2ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvTimeConst.setStatus('mandatory')
airFMModBlwr2FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2FanPower.setStatus('mandatory')
airFMModBlwr2HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2HeatsinkTempC.setStatus('mandatory')
airFMModBlwr2HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2HeatsinkTempF.setStatus('mandatory')
airFMModBlwr2ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ChokeTempC.setStatus('mandatory')
airFMModBlwr2ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ChokeTempF.setStatus('mandatory')
airFMModBlwr2InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2InverterTempC.setStatus('mandatory')
airFMModBlwr2InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2InverterTempF.setStatus('mandatory')
airFMModRHTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHTableSize.setStatus('mandatory')
airFMModRHTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2), )
if mibBuilder.loadTexts: airFMModRHTable.setStatus('mandatory')
airFMModRHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModRHModuleIndex"))
if mibBuilder.loadTexts: airFMModRHEntry.setStatus('mandatory')
airFMModRHModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHModuleIndex.setStatus('mandatory')
airFMModRHComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHComp1.setStatus('mandatory')
airFMModRHComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHComp2.setStatus('mandatory')
airFMModRHHeater = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHHeater.setStatus('mandatory')
airFMModRHHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHHum.setStatus('mandatory')
airFMModRHBlwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwr1.setStatus('mandatory')
airFMModRHBlwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwr2.setStatus('mandatory')
airFMModRHBlwrCtrl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwrCtrl1.setStatus('mandatory')
airFMModRHBlwrCtrl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwrCtrl2.setStatus('mandatory')
airFMModRHComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHComp1Reset.setStatus('mandatory')
airFMModRHComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHComp2Reset.setStatus('mandatory')
airFMModRHHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHHeaterReset.setStatus('mandatory')
airFMModRHHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHHumReset.setStatus('mandatory')
airFMModRHBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHBlwr1Reset.setStatus('mandatory')
airFMModRHBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHBlwr2Reset.setStatus('mandatory')
airFMModServIntComp1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp1.setStatus('mandatory')
airFMModServIntComp2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp2.setStatus('mandatory')
airFMModServIntHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHeater.setStatus('mandatory')
airFMModServIntHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHum.setStatus('mandatory')
airFMModServIntBlwr1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr1.setStatus('mandatory')
airFMModServIntBlwr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr2.setStatus('mandatory')
airFMModServIntBlwrCtrl1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl1.setStatus('mandatory')
airFMModServIntBlwrCtrl2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl2.setStatus('mandatory')
airFMModServIntResetTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModServIntResetTableSize.setStatus('mandatory')
airFMModServIntResetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2), )
if mibBuilder.loadTexts: airFMModServIntResetTable.setStatus('mandatory')
airFMModServIntResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMModServIntResetModuleIndex"))
if mibBuilder.loadTexts: airFMModServIntResetEntry.setStatus('mandatory')
airFMModServIntResetModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModServIntResetModuleIndex.setStatus('mandatory')
airFMModServIntComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp1Reset.setStatus('mandatory')
airFMModServIntComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp2Reset.setStatus('mandatory')
airFMModServIntHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHeaterReset.setStatus('mandatory')
airFMModServIntHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHumReset.setStatus('mandatory')
airFMModServIntBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr1Reset.setStatus('mandatory')
airFMModServIntBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr2Reset.setStatus('mandatory')
airFMModServIntBlwrCtrl1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl1Reset.setStatus('mandatory')
airFMModServIntBlwrCtrl2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl2Reset.setStatus('mandatory')
airFMAlarmClearActiveGroupAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMAlarmClearActiveGroupAlarms.setStatus('mandatory')
airFMAlarmClearActiveSysModAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMAlarmClearActiveSysModAlarms.setStatus('mandatory')
airFMAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmConditionsTableSize.setStatus('mandatory')
airFMAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4), )
if mibBuilder.loadTexts: airFMAlarmConditionsTable.setStatus('mandatory')
airFMAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airFMAlarmConditionsIndex"))
if mibBuilder.loadTexts: airFMAlarmConditionsEntry.setStatus('mandatory')
airFMAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmConditionsIndex.setStatus('mandatory')
airFMAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warningMinor", 2), ("criticalMajor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmSeverity.setStatus('mandatory')
airFMAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("group", 1), ("system", 2), ("mainMod", 3), ("expMod1", 4), ("expMod2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmType.setStatus('mandatory')
airFMEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMEventCode.setStatus('mandatory')
airFMAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmDate.setStatus('mandatory')
airFMAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmTime.setStatus('mandatory')
airFMAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmDescription.setStatus('mandatory')
airPAIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAIdentName.setStatus('mandatory')
airPAModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAModelNumber.setStatus('mandatory')
airPADateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPADateOfManufacture.setStatus('mandatory')
airPASerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASerialNumber.setStatus('mandatory')
airPAFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAFirmwareRevision.setStatus('mandatory')
airPAHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAHardwareRevision.setStatus('mandatory')
airPASystemPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerON", 1), ("powerOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASystemPower.setStatus('mandatory')
airPAOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modeOFF", 1), ("modeVENTING", 2), ("modeCOOLING", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAOperatingMode.setStatus('mandatory')
airPASetpointTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASetpointTempF.setStatus('mandatory')
airPASetpointTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASetpointTempC.setStatus('mandatory')
airPABlowerSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speedLOW", 1), ("speedHIGH", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPABlowerSpeed.setStatus('mandatory')
airPACompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACompressor.setStatus('mandatory')
airPACondenserFan = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACondenserFan.setStatus('mandatory')
airPACondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACondensatePump.setStatus('mandatory')
airPASupplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASupplyTempF.setStatus('mandatory')
airPASupplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASupplyTempC.setStatus('mandatory')
airPAReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAReturnTempF.setStatus('mandatory')
airPAReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAReturnTempC.setStatus('mandatory')
airPARemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteTempF.setStatus('mandatory')
airPARemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteTempC.setStatus('mandatory')
airPARemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteHumidity.setStatus('mandatory')
airIRAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmConditionsTableSize.setStatus('mandatory')
airIRAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2), )
if mibBuilder.loadTexts: airIRAlarmConditionsTable.setStatus('mandatory')
airIRAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRAlarmConditionsIndex"))
if mibBuilder.loadTexts: airIRAlarmConditionsEntry.setStatus('mandatory')
airIRAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmConditionsIndex.setStatus('mandatory')
airIREventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIREventCode.setStatus('mandatory')
airIRAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmDescription.setStatus('mandatory')
airIRRCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusCoolOutput.setStatus('mandatory')
airIRRCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusCoolDemand.setStatus('mandatory')
airIRRCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusAirFlowUS.setStatus('mandatory')
airIRRCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusAirFlowMetric.setStatus('mandatory')
airIRRCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRRCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRRCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRRCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRRCGroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusActiveFlowControlStatus.setStatus('mandatory')
airIRRCGroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsCoolUS.setStatus('mandatory')
airIRRCGroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsCoolMetric.setStatus('mandatory')
airIRRCGroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsSupplyAirUS.setStatus('mandatory')
airIRRCGroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsSupplyAirMetric.setStatus('mandatory')
airIRRCGroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsFanSpeedPreference.setStatus('mandatory')
airIRRCGroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsFanSpeedControl.setStatus('mandatory')
airIRRCGroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsActiveFlowControlBias.setStatus('mandatory')
airIRRCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRRCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigConfigurationType.setStatus('mandatory')
airIRRCGroupConfigPctGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigPctGlycol.setStatus('mandatory')
airIRRCGroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolGainP.setStatus('mandatory')
airIRRCGroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolResetRateI.setStatus('mandatory')
airIRRCGroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolDerivativeD.setStatus('mandatory')
airIRRCGroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigMaxFanSpeed.setStatus('mandatory')
airIRRCGroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigNumberOfActiveFlowControllers.setStatus('mandatory')
airIRRCGroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigActiveFlowControllerLampTest.setStatus('mandatory')
airIRRCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigAltitudeUS.setStatus('mandatory')
airIRRCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigAltitudeMetric.setStatus('mandatory')
airIRRCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusOperateMode.setStatus('mandatory')
airIRRCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusCoolOutput.setStatus('mandatory')
airIRRCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusCoolDemand.setStatus('mandatory')
airIRRCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusAirFlowUS.setStatus('mandatory')
airIRRCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusAirFlowMetric.setStatus('mandatory')
airIRRCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusRackInletTempUS.setStatus('mandatory')
airIRRCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusRackInletTempMetric.setStatus('mandatory')
airIRRCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusSupplyAirTempUS.setStatus('mandatory')
airIRRCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusSupplyAirTempMetric.setStatus('mandatory')
airIRRCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusReturnAirTempUS.setStatus('mandatory')
airIRRCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusReturnAirTempMetric.setStatus('mandatory')
airIRRCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusContainmtDPUS.setStatus('mandatory')
airIRRCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusContainmtDPMetric.setStatus('mandatory')
airIRRCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFilterDPUS.setStatus('mandatory')
airIRRCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFilterDPMetric.setStatus('mandatory')
airIRRCUnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFanSpeed.setStatus('mandatory')
airIRRCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusInputState.setStatus('mandatory')
airIRRCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusOutputState.setStatus('mandatory')
airIRRCUnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusActivePowerSource.setStatus('mandatory')
airIRRCUnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidValvePosition.setStatus('mandatory')
airIRRCUnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidFlowUS.setStatus('mandatory')
airIRRCUnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidFlowMetric.setStatus('mandatory')
airIRRCUnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusEnteringFluidTemperatureUS.setStatus('mandatory')
airIRRCUnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusEnteringFluidTemperatureMetric.setStatus('mandatory')
airIRRCUnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusLeavingFluidTemperatureUS.setStatus('mandatory')
airIRRCUnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusLeavingFluidTemperatureMetric.setStatus('mandatory')
airIRRCUnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusLeakSensor.setStatus('mandatory')
airIRRCUnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentID.setStatus('mandatory')
airIRRCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentName.setStatus('mandatory')
airIRRCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentLocation.setStatus('mandatory')
airIRRCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentModelNumber.setStatus('mandatory')
airIRRCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentSerialNumber.setStatus('mandatory')
airIRRCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentFirmwareRevision.setStatus('mandatory')
airIRRCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentHardwareRevision.setStatus('mandatory')
airIRRCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentManufactureDate.setStatus('mandatory')
airIRRCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursAirFilter.setStatus('mandatory')
airIRRCUnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan1.setStatus('mandatory')
airIRRCUnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan2.setStatus('mandatory')
airIRRCUnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan3.setStatus('mandatory')
airIRRCUnitRunHoursFan4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan4.setStatus('mandatory')
airIRRCUnitRunHoursFan5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan5.setStatus('mandatory')
airIRRCUnitRunHoursFan6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan6.setStatus('mandatory')
airIRRCUnitRunHoursFan7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan7.setStatus('mandatory')
airIRRCUnitRunHoursFan8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan8.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyLeft.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyRight.setStatus('mandatory')
airIRRCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursCondensatePump.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyFeedALeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedALeft.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyFeedARight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedARight.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyFeedBLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedBLeft.setStatus('mandatory')
airIRRCUnitRunHoursFanPowerSupplyFeedBRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedBRight.setStatus('mandatory')
airIRRCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitServiceIntervalsAirFilter.setStatus('mandatory')
airIRRCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitServiceIntervalsAirFilterAlarm.setStatus('mandatory')
airIRRCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsRackInletHighTempUS.setStatus('mandatory')
airIRRCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsRackInletHighTempMetric.setStatus('mandatory')
airIRRCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsSupplyAirHighTempUS.setStatus('mandatory')
airIRRCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsSupplyAirHighTempMetric.setStatus('mandatory')
airIRRCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsReturnAirHighTempUS.setStatus('mandatory')
airIRRCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsReturnAirHighTempMetric.setStatus('mandatory')
airIRRCUnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsEnteringFluidHighTempUS.setStatus('mandatory')
airIRRCUnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsEnteringFluidHighTempMetric.setStatus('mandatory')
airIRRCUnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigCoolCapacity.setStatus('mandatory')
airIRRCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigStartupDelay.setStatus('mandatory')
airIRRCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigIdleOnLeakDetect.setStatus('mandatory')
airIRRCUnitConfigPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("sourceAandB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigPowerSource.setStatus('mandatory')
airIRRCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigInputNormalState.setStatus('mandatory')
airIRRCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigOutputNormalState.setStatus('mandatory')
airIRRCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigOutputSource.setStatus('mandatory')
airIRRCUnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigIdleOnCoolFail.setStatus('mandatory')
airIRRP100GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusAirFlowUS.setStatus('mandatory')
airIRRP100GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusAirFlowMetric.setStatus('mandatory')
airIRRP100GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRRP100GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRRP100GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRRP100GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRRP100GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusCoolDemand.setStatus('mandatory')
airIRRP100GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusCoolOutput.setStatus('mandatory')
airIRRP100GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusHumidifyDemand.setStatus('mandatory')
airIRRP100GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusHumidifyOutput.setStatus('mandatory')
airIRRP100GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDehumidifyDemand.setStatus('mandatory')
airIRRP100GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDehumidifyOutput.setStatus('mandatory')
airIRRP100GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusReheatDemand.setStatus('mandatory')
airIRRP100GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusReheatOutput.setStatus('mandatory')
airIRRP100GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusActiveFlowControlStatus.setStatus('mandatory')
airIRRP100GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDewPointTempUS.setStatus('mandatory')
airIRRP100GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDewPointTempMetric.setStatus('mandatory')
airIRRP100GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsCoolUS.setStatus('mandatory')
airIRRP100GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsCoolMetric.setStatus('mandatory')
airIRRP100GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsSupplyAirUS.setStatus('mandatory')
airIRRP100GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsSupplyAirMetric.setStatus('mandatory')
airIRRP100GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsHumidify.setStatus('mandatory')
airIRRP100GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsDehumidify.setStatus('mandatory')
airIRRP100GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsDehumidifyDeadband.setStatus('mandatory')
airIRRP100GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsReheatUS.setStatus('mandatory')
airIRRP100GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsReheatMetric.setStatus('mandatory')
airIRRP100GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsFanSpeedPreference.setStatus('mandatory')
airIRRP100GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsFanSpeedControl.setStatus('mandatory')
airIRRP100GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsActiveFlowControlBias.setStatus('mandatory')
airIRRP100GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRRP100GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigConfigurationType.setStatus('mandatory')
airIRRP100GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolGainP.setStatus('mandatory')
airIRRP100GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolResetRateI.setStatus('mandatory')
airIRRP100GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolDerivativeD.setStatus('mandatory')
airIRRP100GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigHumidifySensitivityBand.setStatus('mandatory')
airIRRP100GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatGainP.setStatus('mandatory')
airIRRP100GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatResetRateI.setStatus('mandatory')
airIRRP100GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatDerivativeD.setStatus('mandatory')
airIRRP100GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberofBackupUnits.setStatus('mandatory')
airIRRP100GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigRuntimeBalancingEnable.setStatus('mandatory')
airIRRP100GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigLoadAssistEnable.setStatus('mandatory')
airIRRP100GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigFullRPBackups.setStatus('mandatory')
airIRRP100GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigMaxFanSpeed.setStatus('mandatory')
airIRRP100GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberOfActiveFlowControllers.setStatus('mandatory')
airIRRP100GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigActiveFlowControllerLampTest.setStatus('mandatory')
airIRRP100GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigAltitudeUS.setStatus('mandatory')
airIRRP100GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigAltitudeMetric.setStatus('mandatory')
airIRRP100UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("service", 5), ("backup", 6), ("assist", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusOperateMode.setStatus('mandatory')
airIRRP100UnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTempUS.setStatus('mandatory')
airIRRP100UnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTempMetric.setStatus('mandatory')
airIRRP100UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyAirTempUS.setStatus('mandatory')
airIRRP100UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyAirTempMetric.setStatus('mandatory')
airIRRP100UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnAirTempUS.setStatus('mandatory')
airIRRP100UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnAirTempMetric.setStatus('mandatory')
airIRRP100UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyHumidity.setStatus('mandatory')
airIRRP100UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnHumidity.setStatus('mandatory')
airIRRP100UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusAirFlowUS.setStatus('mandatory')
airIRRP100UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusAirFlowMetric.setStatus('mandatory')
airIRRP100UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFanSpeed.setStatus('mandatory')
airIRRP100UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCoolDemand.setStatus('mandatory')
airIRRP100UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCoolOutput.setStatus('mandatory')
airIRRP100UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifyDemand.setStatus('mandatory')
airIRRP100UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifyOutput.setStatus('mandatory')
airIRRP100UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDehumidifyDemand.setStatus('mandatory')
airIRRP100UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDehumidifyOutput.setStatus('mandatory')
airIRRP100UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReheatDemand.setStatus('mandatory')
airIRRP100UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReheatOutput.setStatus('mandatory')
airIRRP100UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusInputState.setStatus('mandatory')
airIRRP100UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusOutputState.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature1US.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature1Metric.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature2US.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature2Metric.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature3US.setStatus('mandatory')
airIRRP100UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature3Metric.setStatus('mandatory')
airIRRP100UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFilterDPUS.setStatus('mandatory')
airIRRP100UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFilterDPMetric.setStatus('mandatory')
airIRRP100UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusContainmtDPUS.setStatus('mandatory')
airIRRP100UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusContainmtDPMetric.setStatus('mandatory')
airIRRP100UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifierCurrent.setStatus('mandatory')
airIRRP100UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifierWaterConductivity.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveSpeed.setStatus('mandatory')
airIRRP100UnitStatusCompressorDrivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDrivePower.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveVoltage.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveCurrent.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveDCLinkVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveDCLinkVoltage.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveHeatSinkTempUS.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveControlCardTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveControlCardTempUS.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveControlCardTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveControlCardTempMetric.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveWarningStatus.setStatus('mandatory')
airIRRP100UnitStatusCompressorDriveAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveAlarmStatus.setStatus('mandatory')
airIRRP100UnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSuctionPressureUS.setStatus('mandatory')
airIRRP100UnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSuctionPressureMetric.setStatus('mandatory')
airIRRP100UnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDischargePressureUS.setStatus('mandatory')
airIRRP100UnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDischargePressureMetric.setStatus('mandatory')
airIRRP100UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusLeakSensor.setStatus('mandatory')
airIRRP100UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentID.setStatus('mandatory')
airIRRP100UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentName.setStatus('mandatory')
airIRRP100UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentLocation.setStatus('mandatory')
airIRRP100UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentModelNumber.setStatus('mandatory')
airIRRP100UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentSerialNumber.setStatus('mandatory')
airIRRP100UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentFirmwareRevision.setStatus('mandatory')
airIRRP100UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentHardwareRevision.setStatus('mandatory')
airIRRP100UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentManufactureDate.setStatus('mandatory')
airIRRP100UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursAirFilter.setStatus('mandatory')
airIRRP100UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursCondensatePump.setStatus('mandatory')
airIRRP100UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHumidifier.setStatus('mandatory')
airIRRP100UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursFan1.setStatus('mandatory')
airIRRP100UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHeater1.setStatus('mandatory')
airIRRP100UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursFan2.setStatus('mandatory')
airIRRP100UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHeater2.setStatus('mandatory')
airIRRP100UnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursCompressor.setStatus('mandatory')
airIRRP100UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursSystem.setStatus('mandatory')
airIRRP100UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalAirFilter.setStatus('mandatory')
airIRRP100UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalAirFilterAlarm.setStatus('mandatory')
airIRRP100UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHumidifier.setStatus('mandatory')
airIRRP100UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHumidifierAlarm.setStatus('mandatory')
airIRRP100UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHeater.setStatus('mandatory')
airIRRP100UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHeaterAlarm.setStatus('mandatory')
airIRRP100UnitServiceIntervalCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCompressor.setStatus('mandatory')
airIRRP100UnitServiceIntervalCompressorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCompressorAlarm.setStatus('mandatory')
airIRRP100UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCondensatePump.setStatus('mandatory')
airIRRP100UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCondensatePumpAlarm.setStatus('mandatory')
airIRRP100UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalFans.setStatus('mandatory')
airIRRP100UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalFansAlarm.setStatus('mandatory')
airIRRP100UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsRackInletHighTempUS.setStatus('mandatory')
airIRRP100UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsRackInletHighTempMetric.setStatus('mandatory')
airIRRP100UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyAirHighTempUS.setStatus('mandatory')
airIRRP100UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyAirHighTempMetric.setStatus('mandatory')
airIRRP100UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsReturnAirHighTempUS.setStatus('mandatory')
airIRRP100UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsReturnAirHighTempMetric.setStatus('mandatory')
airIRRP100UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyHumidityHigh.setStatus('mandatory')
airIRRP100UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyHumidityLow.setStatus('mandatory')
airIRRP100UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigStartupDelay.setStatus('mandatory')
airIRRP100UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigCoolCapacity.setStatus('mandatory')
airIRRP100UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigIdleOnLeakDetect.setStatus('mandatory')
airIRRP100UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigInputNormalState.setStatus('mandatory')
airIRRP100UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigOutputNormalState.setStatus('mandatory')
airIRRP100UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigOutputSource.setStatus('mandatory')
airIRRP100UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHumidifyEnable.setStatus('mandatory')
airIRRP100UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("drainOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHumidifierControl.setStatus('mandatory')
airIRRP100UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigDehumidifyEnable.setStatus('mandatory')
airIRRP100UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigReheatEnable.setStatus('mandatory')
airIRRP100UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHeatAssistEnable.setStatus('mandatory')
airIRRP100UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigPowerSourceConfig.setStatus('mandatory')
airIRRP100UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigUnitRoleOverride.setStatus('mandatory')
airIRRP100UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("reduced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigSecondaryPowerFeedCapability.setStatus('mandatory')
airIRRP100UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigIdleOnCoolFail.setStatus('mandatory')
airIRRP500GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusAirFlowUS.setStatus('mandatory')
airIRRP500GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusAirFlowMetric.setStatus('mandatory')
airIRRP500GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRRP500GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRRP500GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRRP500GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRRP500GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusCoolDemand.setStatus('mandatory')
airIRRP500GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusCoolOutput.setStatus('mandatory')
airIRRP500GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusHumidifyDemand.setStatus('mandatory')
airIRRP500GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusHumidifyOutput.setStatus('mandatory')
airIRRP500GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDehumidifyDemand.setStatus('mandatory')
airIRRP500GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDehumidifyOutput.setStatus('mandatory')
airIRRP500GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusReheatDemand.setStatus('mandatory')
airIRRP500GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusReheatOutput.setStatus('mandatory')
airIRRP500GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusActiveFlowControlStatus.setStatus('mandatory')
airIRRP500GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDewPointTempUS.setStatus('mandatory')
airIRRP500GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDewPointTempMetric.setStatus('mandatory')
airIRRP500GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsCoolUS.setStatus('mandatory')
airIRRP500GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsCoolMetric.setStatus('mandatory')
airIRRP500GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsSupplyAirUS.setStatus('mandatory')
airIRRP500GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsSupplyAirMetric.setStatus('mandatory')
airIRRP500GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsHumidify.setStatus('mandatory')
airIRRP500GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsDehumidify.setStatus('mandatory')
airIRRP500GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsDehumidifyDeadband.setStatus('mandatory')
airIRRP500GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsReheatUS.setStatus('mandatory')
airIRRP500GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsReheatMetric.setStatus('mandatory')
airIRRP500GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsFanSpeedPreference.setStatus('mandatory')
airIRRP500GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsFanSpeedControl.setStatus('mandatory')
airIRRP500GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsActiveFlowControlBias.setStatus('mandatory')
airIRRP500GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRRP500GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigConfigurationType.setStatus('mandatory')
airIRRP500GroupConfigPercentGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigPercentGlycol.setStatus('mandatory')
airIRRP500GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolGainP.setStatus('mandatory')
airIRRP500GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolResetRateI.setStatus('mandatory')
airIRRP500GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolDerivativeD.setStatus('mandatory')
airIRRP500GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigHumidifySensitivityBand.setStatus('mandatory')
airIRRP500GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatGainP.setStatus('mandatory')
airIRRP500GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatResetRateI.setStatus('mandatory')
airIRRP500GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatDerivativeD.setStatus('mandatory')
airIRRP500GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigMaxFanSpeed.setStatus('mandatory')
airIRRP500GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberofBackupUnits.setStatus('mandatory')
airIRRP500GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigRuntimeBalancingEnable.setStatus('mandatory')
airIRRP500GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigLoadAssistEnable.setStatus('mandatory')
airIRRP500GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigFullRPBackups.setStatus('mandatory')
airIRRP500GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberOfActiveFlowControllers.setStatus('mandatory')
airIRRP500GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigActiveFlowControllerLampTest.setStatus('mandatory')
airIRRP500GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigAltitudeUS.setStatus('mandatory')
airIRRP500GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigAltitudeMetric.setStatus('mandatory')
airIRRP500UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("backup", 5), ("assist", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusOperateMode.setStatus('mandatory')
airIRRP500UnitStatusMaximumRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusMaximumRackInletTempUS.setStatus('mandatory')
airIRRP500UnitStatusMaximumRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusMaximumRackInletTempMetric.setStatus('mandatory')
airIRRP500UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyAirTempUS.setStatus('mandatory')
airIRRP500UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyAirTempMetric.setStatus('mandatory')
airIRRP500UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnAirTempUS.setStatus('mandatory')
airIRRP500UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnAirTempMetric.setStatus('mandatory')
airIRRP500UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyHumidity.setStatus('mandatory')
airIRRP500UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnHumidity.setStatus('mandatory')
airIRRP500UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusAirFlowUS.setStatus('mandatory')
airIRRP500UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusAirFlowMetric.setStatus('mandatory')
airIRRP500UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFanSpeed.setStatus('mandatory')
airIRRP500UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusCoolDemand.setStatus('mandatory')
airIRRP500UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusCoolOutput.setStatus('mandatory')
airIRRP500UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifyDemand.setStatus('mandatory')
airIRRP500UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifyOutput.setStatus('mandatory')
airIRRP500UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusDehumidifyDemand.setStatus('mandatory')
airIRRP500UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusDehumidifyOutput.setStatus('mandatory')
airIRRP500UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReheatDemand.setStatus('mandatory')
airIRRP500UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReheatOutput.setStatus('mandatory')
airIRRP500UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusInputState.setStatus('mandatory')
airIRRP500UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusOutputState.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature1US.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature1Metric.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature2US.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature2Metric.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature3US.setStatus('mandatory')
airIRRP500UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature3Metric.setStatus('mandatory')
airIRRP500UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusContainmtDPUS.setStatus('mandatory')
airIRRP500UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusContainmtDPMetric.setStatus('mandatory')
airIRRP500UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFilterDPUS.setStatus('mandatory')
airIRRP500UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFilterDPMetric.setStatus('mandatory')
airIRRP500UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifierCurrent.setStatus('mandatory')
airIRRP500UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifierWaterConductivity.setStatus('mandatory')
airIRRP500UnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusActivePowerSource.setStatus('mandatory')
airIRRP500UnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidValvePosition.setStatus('mandatory')
airIRRP500UnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidFlowUS.setStatus('mandatory')
airIRRP500UnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidFlowMetric.setStatus('mandatory')
airIRRP500UnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusEnteringFluidTemperatureUS.setStatus('mandatory')
airIRRP500UnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusEnteringFluidTemperatureMetric.setStatus('mandatory')
airIRRP500UnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeavingFluidTemperatureUS.setStatus('mandatory')
airIRRP500UnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeavingFluidTemperatureMetric.setStatus('mandatory')
airIRRP500UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeakSensor.setStatus('mandatory')
airIRRP500UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentID.setStatus('mandatory')
airIRRP500UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentName.setStatus('mandatory')
airIRRP500UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentLocation.setStatus('mandatory')
airIRRP500UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentModelNumber.setStatus('mandatory')
airIRRP500UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentSerialNumber.setStatus('mandatory')
airIRRP500UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentFirmwareRevision.setStatus('mandatory')
airIRRP500UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentHardwareRevision.setStatus('mandatory')
airIRRP500UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentManufactureDate.setStatus('mandatory')
airIRRP500UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursAirFilter.setStatus('mandatory')
airIRRP500UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursCondensatePump.setStatus('mandatory')
airIRRP500UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHumidifier.setStatus('mandatory')
airIRRP500UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan1.setStatus('mandatory')
airIRRP500UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater1.setStatus('mandatory')
airIRRP500UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan2.setStatus('mandatory')
airIRRP500UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater2.setStatus('mandatory')
airIRRP500UnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan3.setStatus('mandatory')
airIRRP500UnitRunHoursHeater3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater3.setStatus('mandatory')
airIRRP500UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursSystem.setStatus('mandatory')
airIRRP500UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalAirFilter.setStatus('mandatory')
airIRRP500UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalAirFilterAlarm.setStatus('mandatory')
airIRRP500UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHumidifier.setStatus('mandatory')
airIRRP500UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHumidifierAlarm.setStatus('mandatory')
airIRRP500UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHeater.setStatus('mandatory')
airIRRP500UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHeaterAlarm.setStatus('mandatory')
airIRRP500UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalCondensatePump.setStatus('mandatory')
airIRRP500UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalCondensatePumpAlarm.setStatus('mandatory')
airIRRP500UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalFans.setStatus('mandatory')
airIRRP500UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalFansAlarm.setStatus('mandatory')
airIRRP500UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsRackInletHighTempUS.setStatus('mandatory')
airIRRP500UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsRackInletHighTempMetric.setStatus('mandatory')
airIRRP500UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyAirHighTempUS.setStatus('mandatory')
airIRRP500UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyAirHighTempMetric.setStatus('mandatory')
airIRRP500UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnAirHighTempUS.setStatus('mandatory')
airIRRP500UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnAirHighTempMetric.setStatus('mandatory')
airIRRP500UnitThresholdsReturnHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnHumidityHigh.setStatus('mandatory')
airIRRP500UnitThresholdsReturnHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnHumidityLow.setStatus('mandatory')
airIRRP500UnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsEnteringFluidHighTempUS.setStatus('mandatory')
airIRRP500UnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsEnteringFluidHighTempMetric.setStatus('mandatory')
airIRRP500UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigStartupDelay.setStatus('mandatory')
airIRRP500UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("maximum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigCoolCapacity.setStatus('mandatory')
airIRRP500UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigIdleOnLeakDetect.setStatus('mandatory')
airIRRP500UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigInputNormalState.setStatus('mandatory')
airIRRP500UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigOutputNormalState.setStatus('mandatory')
airIRRP500UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigOutputSource.setStatus('mandatory')
airIRRP500UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHumidifyEnable.setStatus('mandatory')
airIRRP500UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("drainOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHumidifierControl.setStatus('mandatory')
airIRRP500UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigDehumidifyEnable.setStatus('mandatory')
airIRRP500UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigReheatEnable.setStatus('mandatory')
airIRRP500UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHeatAssistEnable.setStatus('mandatory')
airIRRP500UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigPowerSourceConfig.setStatus('mandatory')
airIRRP500UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigUnitRoleOverride.setStatus('mandatory')
airIRRP500UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("reduced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigSecondaryPowerFeedCapability.setStatus('mandatory')
airIRRP500UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigIdleOnCoolFail.setStatus('mandatory')
class AirIRSCConfigType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("racs", 1), ("spot", 2), ("in-row", 3))

class AirIRSCCapacityControlType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("discrete", 1), ("proportional", 2))

class AirIRSCFanSpeedPreference(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5))

class AirIRSCFanSpeedControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("automatic", 1), ("manual", 2))

airIRSCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusOperateMode.setStatus('mandatory')
airIRSCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCoolOutput.setStatus('mandatory')
airIRSCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCoolDemand.setStatus('mandatory')
airIRSCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusAirFlowUS.setStatus('mandatory')
airIRSCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusAirFlowMetric.setStatus('mandatory')
airIRSCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusRackInletTempUS.setStatus('mandatory')
airIRSCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusRackInletTempMetric.setStatus('mandatory')
airIRSCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSupplyAirTempUS.setStatus('mandatory')
airIRSCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSupplyAirTempMetric.setStatus('mandatory')
airIRSCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusReturnAirTempUS.setStatus('mandatory')
airIRSCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusReturnAirTempMetric.setStatus('mandatory')
airIRSCUnitStatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionTempUS.setStatus('mandatory')
airIRSCUnitStatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionTempMetric.setStatus('mandatory')
airIRSCUnitStatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuperheatTempUS.setStatus('mandatory')
airIRSCUnitStatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuperheatTempMetric.setStatus('mandatory')
airIRSCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusContainmtDPUS.setStatus('mandatory')
airIRSCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusContainmtDPMetric.setStatus('mandatory')
airIRSCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusFilterDPUS.setStatus('mandatory')
airIRSCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusFilterDPMetric.setStatus('mandatory')
airIRSCUnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionPressureUS.setStatus('mandatory')
airIRSCUnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionPressureMetric.setStatus('mandatory')
airIRSCUnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusDischargePressureUS.setStatus('mandatory')
airIRSCUnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusDischargePressureMetric.setStatus('mandatory')
airIRSCUnitStatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusEvaporatorFanSpeed.setStatus('mandatory')
airIRSCUnitStatusCondenserFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondenserFanSpeed.setStatus('mandatory')
airIRSCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusInputState.setStatus('mandatory')
airIRSCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusOutputState.setStatus('mandatory')
airIRSCUnitStatusCondOutletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondOutletTempUS.setStatus('mandatory')
airIRSCUnitStatusCondOutletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondOutletTempMetric.setStatus('mandatory')
airIRSCUnitStatusCondInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondInletTempUS.setStatus('mandatory')
airIRSCUnitStatusCondInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondInletTempMetric.setStatus('mandatory')
airIRSCUnitStatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCompressor.setStatus('mandatory')
airIRSCUnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusLeakSensor.setStatus('mandatory')
airIRSCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitIdentName.setStatus('mandatory')
airIRSCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitIdentLocation.setStatus('mandatory')
airIRSCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentModelNumber.setStatus('mandatory')
airIRSCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentSerialNumber.setStatus('mandatory')
airIRSCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentFirmwareRevision.setStatus('mandatory')
airIRSCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentHardwareRevision.setStatus('mandatory')
airIRSCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentManufactureDate.setStatus('mandatory')
airIRSCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursAirFilter.setStatus('mandatory')
airIRSCUnitRunHoursEvaporatorFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan1.setStatus('mandatory')
airIRSCUnitRunHoursEvaporatorFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan2.setStatus('mandatory')
airIRSCUnitRunHoursEvaporatorFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan3.setStatus('mandatory')
airIRSCUnitRunHoursCondenserFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan1.setStatus('mandatory')
airIRSCUnitRunHoursCondenserFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan2.setStatus('mandatory')
airIRSCUnitRunHoursCondenserFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan3.setStatus('mandatory')
airIRSCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursFanPowerSupplyLeft.setStatus('mandatory')
airIRSCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursFanPowerSupplyRight.setStatus('mandatory')
airIRSCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondensatePump.setStatus('mandatory')
airIRSCUnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCompressor.setStatus('mandatory')
airIRSCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitServiceIntervalsAirFilter.setStatus('mandatory')
airIRSCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitServiceIntervalsAirFilterAlarm.setStatus('mandatory')
airIRSCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsRackInletHighTempUS.setStatus('mandatory')
airIRSCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsRackInletHighTempMetric.setStatus('mandatory')
airIRSCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsSupplyAirHighTempUS.setStatus('mandatory')
airIRSCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsSupplyAirHighTempMetric.setStatus('mandatory')
airIRSCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsReturnAirHighTempUS.setStatus('mandatory')
airIRSCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsReturnAirHighTempMetric.setStatus('mandatory')
airIRSCUnitSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolSetpointUS.setStatus('mandatory')
airIRSCUnitSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolSetpointMetric.setStatus('mandatory')
airIRSCUnitSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolDeadbandUS.setStatus('mandatory')
airIRSCUnitSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolDeadbandMetric.setStatus('mandatory')
airIRSCUnitSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsFanSpeedPreference.setStatus('mandatory')
airIRSCUnitSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsSupplyAirSetpointUS.setStatus('mandatory')
airIRSCUnitSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsSupplyAirSetpointMetric.setStatus('mandatory')
airIRSCUnitConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 1), AirIRSCConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigConfigurationType.setStatus('mandatory')
airIRSCUnitConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 2), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigCapacityControlType.setStatus('mandatory')
airIRSCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigStartupDelay.setStatus('mandatory')
airIRSCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigIdleOnLeakDetect.setStatus('mandatory')
airIRSCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigInputNormalState.setStatus('mandatory')
airIRSCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOutputNormalState.setStatus('mandatory')
airIRSCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOutputSource.setStatus('mandatory')
airIRSCUnitConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigAltitudeUS.setStatus('mandatory')
airIRSCUnitConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigAltitudeMetric.setStatus('mandatory')
airIRSCUnitConfigOpControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOpControl.setStatus('mandatory')
airIRSCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusCoolOutput.setStatus('mandatory')
airIRSCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusCoolDemand.setStatus('mandatory')
airIRSCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusAirFlowUS.setStatus('mandatory')
airIRSCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusAirFlowMetric.setStatus('mandatory')
airIRSCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRSCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRSCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRSCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRSCGroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxReturnAirTempUS.setStatus('mandatory')
airIRSCGroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxReturnAirTempMetric.setStatus('mandatory')
airIRSCGroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinReturnAirTempUS.setStatus('mandatory')
airIRSCGroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinReturnAirTempMetric.setStatus('mandatory')
airIRSCGroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusActiveFlowControlStatus.setStatus('mandatory')
airIRSCGroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolSetpointUS.setStatus('mandatory')
airIRSCGroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolSetpointMetric.setStatus('mandatory')
airIRSCGroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolDeadbandUS.setStatus('mandatory')
airIRSCGroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolDeadbandMetric.setStatus('mandatory')
airIRSCGroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsFanSpeedPreference.setStatus('mandatory')
airIRSCGroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsSupplyAirSetpointUS.setStatus('mandatory')
airIRSCGroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsSupplyAirSetpointMetric.setStatus('mandatory')
airIRSCGroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetpointsActiveFlowControlBias.setStatus('mandatory')
airIRSCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRSCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 2), AirIRSCConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigConfigurationType.setStatus('mandatory')
airIRSCGroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 3), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigCapacityControlType.setStatus('mandatory')
airIRSCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigAltitudeUS.setStatus('mandatory')
airIRSCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigAltitudeMetric.setStatus('mandatory')
airIRSCGroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 6), AirIRSCFanSpeedControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigFanSpeedControl.setStatus('mandatory')
airIRSCGroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigNumberOfActiveFlowControllers.setStatus('mandatory')
airIRSCGroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigActiveFlowControllerLampTest.setStatus('mandatory')
airIRG2IdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2IdentName.setStatus('mandatory')
airIRG2IdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2IdentLocation.setStatus('mandatory')
airIRG2IdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentModelNumber.setStatus('mandatory')
airIRG2IdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentSerialNumber.setStatus('mandatory')
airIRG2IdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentFirmwareRevision.setStatus('mandatory')
airIRG2IdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentHardwareRevision.setStatus('mandatory')
airIRG2IdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentManufactureDate.setStatus('mandatory')
airIRG2IdentUnitSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentUnitSysOID.setStatus('mandatory')
airIRG2IdentGroupSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentGroupSysOID.setStatus('mandatory')
airIRG2GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusCoolOutput.setStatus('mandatory')
airIRG2GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusCoolDemand.setStatus('mandatory')
airIRG2GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusAirFlowUS.setStatus('mandatory')
airIRG2GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusAirFlowMetric.setStatus('mandatory')
airIRG2GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRG2GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRG2GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRG2GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRG2GroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxReturnAirTempUS.setStatus('mandatory')
airIRG2GroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxReturnAirTempMetric.setStatus('mandatory')
airIRG2GroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinReturnAirTempUS.setStatus('mandatory')
airIRG2GroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinReturnAirTempMetric.setStatus('mandatory')
airIRG2GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusActiveFlowControlStatus.setStatus('mandatory')
airIRG2GroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolSetpointUS.setStatus('mandatory')
airIRG2GroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolSetpointMetric.setStatus('mandatory')
airIRG2GroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolDeadbandUS.setStatus('mandatory')
airIRG2GroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolDeadbandMetric.setStatus('mandatory')
airIRG2GroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsFanSpeedPreference.setStatus('mandatory')
airIRG2GroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsSupplyAirSetpointUS.setStatus('mandatory')
airIRG2GroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsSupplyAirSetpointMetric.setStatus('mandatory')
airIRG2GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetpointsActiveFlowControlBias.setStatus('mandatory')
airIRG2GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRG2GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4), ("cacs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigConfigurationType.setStatus('mandatory')
airIRG2GroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discrete", 1), ("proportional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCapacityControlType.setStatus('mandatory')
airIRG2GroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigFanSpeedControl.setStatus('mandatory')
airIRG2GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolGainP.setStatus('mandatory')
airIRG2GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolResetRateI.setStatus('mandatory')
airIRG2GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolDerivativeD.setStatus('mandatory')
airIRG2GroupConfigCoolPIDReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readBack", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolPIDReset.setStatus('mandatory')
airIRG2GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberofBackupUnits.setStatus('mandatory')
airIRG2GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigRuntimeBalancingEnable.setStatus('mandatory')
airIRG2GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigLoadAssistEnable.setStatus('mandatory')
airIRG2GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberOfActiveFlowControllers.setStatus('mandatory')
airIRG2GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigActiveFlowControllerLampTest.setStatus('mandatory')
airIRG2GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigAltitudeUS.setStatus('mandatory')
airIRG2GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigAltitudeMetric.setStatus('mandatory')
airIRG2AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsTableSize.setStatus('mandatory')
airIRG2AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2), )
if mibBuilder.loadTexts: airIRG2AlarmsTable.setStatus('mandatory')
airIRG2AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2AlarmsIndex"))
if mibBuilder.loadTexts: airIRG2AlarmsEntry.setStatus('mandatory')
airIRG2AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsIndex.setStatus('mandatory')
airIRG2AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsEventCode.setStatus('mandatory')
airIRG2AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsDescription.setStatus('mandatory')
class AirIRG2RDType2IOState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("open", 1), ("closed", 2))

airIRG2RDT2StatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("reserved", 4), ("service", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOperateMode.setStatus('mandatory')
airIRG2RDT2StatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCoolOutput.setStatus('mandatory')
airIRG2RDT2StatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCoolDemand.setStatus('mandatory')
airIRG2RDT2StatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusAirFlowUS.setStatus('mandatory')
airIRG2RDT2StatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusAirFlowMetric.setStatus('mandatory')
airIRG2RDT2StatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusRackInletTempUS.setStatus('mandatory')
airIRG2RDT2StatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusRackInletTempMetric.setStatus('mandatory')
airIRG2RDT2StatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSupplyAirTempUS.setStatus('mandatory')
airIRG2RDT2StatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSupplyAirTempMetric.setStatus('mandatory')
airIRG2RDT2StatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusReturnAirTempUS.setStatus('mandatory')
airIRG2RDT2StatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusReturnAirTempMetric.setStatus('mandatory')
airIRG2RDT2StatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionTempUS.setStatus('mandatory')
airIRG2RDT2StatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionTempMetric.setStatus('mandatory')
airIRG2RDT2StatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuperheatTempUS.setStatus('mandatory')
airIRG2RDT2StatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuperheatTempMetric.setStatus('mandatory')
airIRG2RDT2StatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFilterDPUS.setStatus('mandatory')
airIRG2RDT2StatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFilterDPMetric.setStatus('mandatory')
airIRG2RDT2StatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionPressureUS.setStatus('mandatory')
airIRG2RDT2StatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionPressureMetric.setStatus('mandatory')
airIRG2RDT2StatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusDischargePressureUS.setStatus('mandatory')
airIRG2RDT2StatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusDischargePressureMetric.setStatus('mandatory')
airIRG2RDT2StatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusEvaporatorFanSpeed.setStatus('mandatory')
airIRG2RDT2StatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 23), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusInputState.setStatus('mandatory')
airIRG2RDT2StatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 24), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOutputState.setStatus('mandatory')
airIRG2RDT2StatusOHEInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 25), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOHEInputState.setStatus('mandatory')
airIRG2RDT2StatusOHEOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 26), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOHEOutputState.setStatus('mandatory')
airIRG2RDT2StatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCompressor.setStatus('mandatory')
airIRG2RDT2StatusFluidValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFluidValvePos.setStatus('mandatory')
airIRG2RDT2StatusHotGasBypassValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusHotGasBypassValvePos.setStatus('mandatory')
airIRG2RDT2StatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-leak", 1), ("leak", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusLeakSensor.setStatus('mandatory')
airIRG2RDT2RunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursAirFilter.setStatus('mandatory')
airIRG2RDT2RunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursCondensatePump.setStatus('mandatory')
airIRG2RDT2RunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursCompressor.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSTableSize.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5), )
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSTable.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursFanPSIndex"))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSEntry.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSIndex.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSHours.setStatus('mandatory')
airIRG2RDT2RunHoursFanPSPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upper", 1), ("lower", 2), ("left", 3), ("right", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSPosition.setStatus('mandatory')
airIRG2RDT2RunHoursEvapFanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanTableSize.setStatus('mandatory')
airIRG2RDT2RunHoursEvapFanTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7), )
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanTable.setStatus('mandatory')
airIRG2RDT2RunHoursEvapFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursEvapFanIndex"))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanEntry.setStatus('mandatory')
airIRG2RDT2RunHoursEvapFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanIndex.setStatus('mandatory')
airIRG2RDT2RunHoursEvapFanHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanHours.setStatus('mandatory')
airIRG2RDT2RunHoursUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursUnit.setStatus('mandatory')
airIRG2RDT2ServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ServiceIntervalsAirFilter.setStatus('mandatory')
airIRG2RDT2ServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ServiceIntervalsAirFilterAlarm.setStatus('mandatory')
airIRG2RDT2ThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsRackInletHighTempUS.setStatus('mandatory')
airIRG2RDT2ThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsRackInletHighTempMetric.setStatus('mandatory')
airIRG2RDT2ThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsSupplyAirHighTempUS.setStatus('mandatory')
airIRG2RDT2ThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsSupplyAirHighTempMetric.setStatus('mandatory')
airIRG2RDT2ThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsReturnAirHighTempUS.setStatus('mandatory')
airIRG2RDT2ThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsReturnAirHighTempMetric.setStatus('mandatory')
airIRG2RDT2ConfigUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fluidCooled", 1), ("airCooled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitType.setStatus('mandatory')
airIRG2RDT2ConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigStartupDelay.setStatus('mandatory')
airIRG2RDT2ConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigIdleOnLeakDetect.setStatus('mandatory')
airIRG2RDT2ConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 4), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigInputNormalState.setStatus('mandatory')
airIRG2RDT2ConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 5), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOutputNormalState.setStatus('mandatory')
airIRG2RDT2ConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOutputSource.setStatus('mandatory')
airIRG2RDT2ConfigOHEInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 7), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOHEInputNormalState.setStatus('mandatory')
airIRG2RDT2ConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitRoleOverride.setStatus('mandatory')
airIRG2RDT2ConfigUnitIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitIdleOnCoolFail.setStatus('mandatory')
class AirIRmAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ok", 1), ("alarm", 2))

class AirIRmControlState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class AirIRmStopState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("maybeOn", 1), ("unitOff", 2))

class AirIRmActivityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inactive", 1), ("active", 2))

airIRmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmIdentName.setStatus('mandatory')
airIRmIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmIdentLocation.setStatus('mandatory')
airIRmIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentModelNumber.setStatus('mandatory')
airIRmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentSerialNumber.setStatus('mandatory')
airIRmIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentFirmwareRevision.setStatus('mandatory')
airIRmIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentHardwareRevision.setStatus('mandatory')
airIRmIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentManufactureDate.setStatus('mandatory')
airIRmIdentSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentSysOID.setStatus('mandatory')
airIRmAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsTableSize.setStatus('mandatory')
airIRmAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2), )
if mibBuilder.loadTexts: airIRmAlarmsTable.setStatus('mandatory')
airIRmAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRmAlarmsIndex"))
if mibBuilder.loadTexts: airIRmAlarmsEntry.setStatus('mandatory')
airIRmAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsIndex.setStatus('mandatory')
airIRmAlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsEventCode.setStatus('mandatory')
airIRmAlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsDescription.setStatus('mandatory')
airIRmPmUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 256))).clone(namedValues=NamedValues(("mc", 1), ("dx", 2), ("cw", 3), ("ch", 4), ("ecoCool", 5), ("msc", 6), ("ge1", 7), ("ge2", 8), ("dualFluid", 9), ("cw2", 10), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitType.setStatus('mandatory')
airIRmPmSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSwVersion.setStatus('mandatory')
airIRmPmBusAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmBusAddress.setStatus('mandatory')
airIRmPmControllerType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("c4000", 2), ("c1001", 3), ("c1002", 4), ("c5000", 5), ("c6000", 6), ("c1010", 7), ("c7000IOC", 8), ("c7000AT", 9), ("c7000PT", 10), ("c5MSC", 11), ("c7000PT2", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmControllerType.setStatus('mandatory')
airIRmPmGeneralError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 8), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGeneralError.setStatus('mandatory')
airIRmPmErrorOnBus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 9), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmErrorOnBus.setStatus('mandatory')
airIRmPmPCStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 1), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPCStop.setStatus('mandatory')
airIRmPmRemoteStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 2), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRemoteStop.setStatus('mandatory')
airIRmPmLocalStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 3), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLocalStop.setStatus('mandatory')
airIRmPmTimerStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 4), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmTimerStop.setStatus('mandatory')
airIRmPmSeqStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 5), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSeqStop.setStatus('mandatory')
airIRmPmRemoteUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRemoteUPS.setStatus('mandatory')
airIRmPmLocalUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 8), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLocalUPS.setStatus('mandatory')
airIRmPmCommonAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 11), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCommonAlarm.setStatus('mandatory')
airIRmPmResetAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmResetAllAlarms.setStatus('mandatory')
airIRmPmUnitOnOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 14), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitOnOff.setStatus('mandatory')
airIRmPmMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notNecessary", 1), ("necessary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMaintenance.setStatus('mandatory')
airIRmPmUnitTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureScale.setStatus('mandatory')
airIRmPmUnitWinterMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("summer", 1), ("winter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitWinterMode.setStatus('mandatory')
airIRmPmDayNightMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("day", 1), ("night", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDayNightMode.setStatus('mandatory')
airIRmPmLastMaintenanceYear = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceYear.setStatus('mandatory')
airIRmPmLastMaintenanceMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceMonth.setStatus('mandatory')
airIRmPmLastMaintenanceDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceDay.setStatus('mandatory')
airIRmPmUnitMaintenanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitMaintenanceInterval.setStatus('mandatory')
airIRmPmRuntimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeUnit.setStatus('mandatory')
airIRmPmStoptimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmStoptimeUnit.setStatus('mandatory')
airIRmPmRuntimeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeCooling.setStatus('mandatory')
airIRmPmRuntimeHeating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeHeating.setStatus('mandatory')
airIRmPmRuntimeHumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeHumidification.setStatus('mandatory')
airIRmPmRuntimeDehumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeDehumidification.setStatus('mandatory')
airIRmPmUnitTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11))
airIRmPmUnitTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureC.setStatus('mandatory')
airIRmPmUnitTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureF.setStatus('mandatory')
airIRmPmUnitHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitHumidity.setStatus('mandatory')
airIRmPmSetpointTemperatureDay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14))
airIRmPmSetpointTemperatureDayC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureDayC.setStatus('mandatory')
airIRmPmSetpointTemperatureDayF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureDayF.setStatus('mandatory')
airIRmPmSetpointTemperatureNight = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15))
airIRmPmSetpointTemperatureNightC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureNightC.setStatus('mandatory')
airIRmPmSetpointTemperatureNightF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureNightF.setStatus('mandatory')
airIRmPmSetpointHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointHumidity.setStatus('mandatory')
airIRmPmUnitControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("room", 1), ("supply", 2), ("room-SupplyLimit", 3), ("supply-RoomLimit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitControlType.setStatus('mandatory')
airIRmPmWinterModeStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29))
airIRmPmWinterModeStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeStartTempC.setStatus('mandatory')
airIRmPmWinterModeStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeStartTempF.setStatus('mandatory')
airIRmPmWinterModeHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30))
airIRmPmWinterModeHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeHysteresisK.setStatus('mandatory')
airIRmPmWinterModeHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeHysteresisF.setStatus('mandatory')
airIRmPmWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32))
airIRmPmWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureC.setStatus('mandatory')
airIRmPmWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureF.setStatus('mandatory')
airIRmPmReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33))
airIRmPmReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureC.setStatus('mandatory')
airIRmPmReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureF.setStatus('mandatory')
airIRmPmSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34))
airIRmPmSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureC.setStatus('mandatory')
airIRmPmSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureF.setStatus('mandatory')
airIRmPmReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidity.setStatus('mandatory')
airIRmPmSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidity.setStatus('mandatory')
airIRmPmOutsideAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37))
airIRmPmOutsideAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirTemperatureC.setStatus('mandatory')
airIRmPmOutsideAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirTemperatureF.setStatus('mandatory')
airIRmPmOutsideAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirHumidity.setStatus('mandatory')
airIRmPmCoolingPriority = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ge", 1), ("cw", 2), ("dx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCoolingPriority.setStatus('mandatory')
airIRmPmWaterTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43))
airIRmPmWaterTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperature2C.setStatus('mandatory')
airIRmPmWaterTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperature2F.setStatus('mandatory')
airIRmPmRuntimeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeFreeCooling.setStatus('mandatory')
airIRmPmRuntimeMixedModeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeMixedModeFreeCooling.setStatus('mandatory')
airIRmPmNumberOfCompressors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfCompressors.setStatus('mandatory')
airIRmPmNumberOfSuctionValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfSuctionValves.setStatus('mandatory')
airIRmPmNumberOfDryCoolers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfDryCoolers.setStatus('mandatory')
airIRmPmNumberOfPumps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfPumps.setStatus('mandatory')
airIRmPmNumberOfElectricHeaters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfElectricHeaters.setStatus('mandatory')
airIRmPmNumberOfHumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfHumidifiers.setStatus('mandatory')
airIRmPmNumberOfFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfFans.setStatus('mandatory')
airIRmPmNumberOfLouvers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfLouvers.setStatus('mandatory')
airIRmPmNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfSensors.setStatus('mandatory')
airIRmPmNumberOfExternalAlarmInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfExternalAlarmInputs.setStatus('mandatory')
airIRmPmNumberOfGECWValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfGECWValves.setStatus('mandatory')
airIRmPmNumberOfHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfHotGasReheat.setStatus('mandatory')
airIRmPmNumberOfPWWReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfPWWReheat.setStatus('mandatory')
airIRmPmNumberOfDehumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfDehumidifiers.setStatus('mandatory')
airIRmPmUnitEvaporationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1))
airIRmPmUnitEvaporationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature1C.setStatus('mandatory')
airIRmPmUnitEvaporationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature1F.setStatus('mandatory')
airIRmPmUnitEvaporationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationPressure1.setStatus('mandatory')
airIRmPmUnitCondensationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3))
airIRmPmUnitCondensationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature1C.setStatus('mandatory')
airIRmPmUnitCondensationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature1F.setStatus('mandatory')
airIRmPmUnitCondensationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationPressure1.setStatus('mandatory')
airIRmPmMaxLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8))
airIRmPmMaxLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirTemperatureC.setStatus('mandatory')
airIRmPmMaxLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirTemperatureF.setStatus('mandatory')
airIRmPmMinLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9))
airIRmPmMinLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirTemperatureC.setStatus('mandatory')
airIRmPmMinLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirTemperatureF.setStatus('mandatory')
airIRmPmMaxLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10))
airIRmPmMaxLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirTemperatureC.setStatus('mandatory')
airIRmPmMaxLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirTemperatureF.setStatus('mandatory')
airIRmPmMinLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11))
airIRmPmMinLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirTemperatureC.setStatus('mandatory')
airIRmPmMinLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirTemperatureF.setStatus('mandatory')
airIRmPmMaxLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12))
airIRmPmMaxLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitWaterTemperatureC.setStatus('mandatory')
airIRmPmMaxLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitWaterTemperatureF.setStatus('mandatory')
airIRmPmMinLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13))
airIRmPmMinLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitWaterTemperatureC.setStatus('mandatory')
airIRmPmMinLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitWaterTemperatureF.setStatus('mandatory')
airIRmPmMaxLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirHumidity.setStatus('mandatory')
airIRmPmMinLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirHumidity.setStatus('mandatory')
airIRmPmMaxLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirHumidity.setStatus('mandatory')
airIRmPmMinLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirHumidity.setStatus('mandatory')
airIRmPmLowPressureWinterDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLowPressureWinterDelay.setStatus('mandatory')
airIRmPmUnitCondensationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationPressure2.setStatus('mandatory')
airIRmPmUnitOverloadSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitOverloadSwitch.setStatus('mandatory')
airIRmPmUnitCondensationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41))
airIRmPmUnitCondensationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature2C.setStatus('mandatory')
airIRmPmUnitCondensationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature2F.setStatus('mandatory')
airIRmPmUnitEvaporationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationPressure2.setStatus('mandatory')
airIRmPmUnitEvaporationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43))
airIRmPmUnitEvaporationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature2C.setStatus('mandatory')
airIRmPmUnitEvaporationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature2F.setStatus('mandatory')
airIRmPmCmp1ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1ManOperationActive.setStatus('mandatory')
airIRmPmCmp1ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1ManOperationState.setStatus('mandatory')
airIRmPmCmp1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1Running.setStatus('mandatory')
airIRmPmCmp1StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17))
airIRmPmCmp1StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempSummerK.setStatus('mandatory')
airIRmPmCmp1StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempSummerF.setStatus('mandatory')
airIRmPmCmp1HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18))
airIRmPmCmp1HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisSummerK.setStatus('mandatory')
airIRmPmCmp1HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisSummerF.setStatus('mandatory')
airIRmPmCmp1StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19))
airIRmPmCmp1StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempWinterK.setStatus('mandatory')
airIRmPmCmp1StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempWinterF.setStatus('mandatory')
airIRmPmCmp1HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20))
airIRmPmCmp1HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisWinterK.setStatus('mandatory')
airIRmPmCmp1HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisWinterF.setStatus('mandatory')
airIRmPmCmp1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1Runtime.setStatus('mandatory')
airIRmPmCmp2ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2ManOperationActive.setStatus('mandatory')
airIRmPmCmp2ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2ManOperationState.setStatus('mandatory')
airIRmPmCmp2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2Running.setStatus('mandatory')
airIRmPmCmp2StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17))
airIRmPmCmp2StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempSummerK.setStatus('mandatory')
airIRmPmCmp2StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempSummerF.setStatus('mandatory')
airIRmPmCmp2HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18))
airIRmPmCmp2HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisSummerK.setStatus('mandatory')
airIRmPmCmp2HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisSummerF.setStatus('mandatory')
airIRmPmCmp2StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19))
airIRmPmCmp2StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempWinterK.setStatus('mandatory')
airIRmPmCmp2StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempWinterF.setStatus('mandatory')
airIRmPmCmp2HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20))
airIRmPmCmp2HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisWinterK.setStatus('mandatory')
airIRmPmCmp2HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisWinterF.setStatus('mandatory')
airIRmPmCmp2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2Runtime.setStatus('mandatory')
airIRmPmEheating1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1ManOpEnable.setStatus('mandatory')
airIRmPmEheating1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Running.setStatus('mandatory')
airIRmPmEheating1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1ManOpRunning.setStatus('mandatory')
airIRmPmEheating1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Type.setStatus('mandatory')
airIRmPmEheating1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10))
airIRmPmEheating1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1StartTemperatureK.setStatus('mandatory')
airIRmPmEheating1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1StartTemperatureF.setStatus('mandatory')
airIRmPmEheating1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11))
airIRmPmEheating1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1HysteresisK.setStatus('mandatory')
airIRmPmEheating1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1HysteresisF.setStatus('mandatory')
airIRmPmEheating1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Runtime.setStatus('mandatory')
airIRmPmEheating2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2ManOpEnable.setStatus('mandatory')
airIRmPmEheating2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Running.setStatus('mandatory')
airIRmPmEheating2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2ManOpRunning.setStatus('mandatory')
airIRmPmEheating2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Type.setStatus('mandatory')
airIRmPmEheating2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10))
airIRmPmEheating2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2StartTemperatureK.setStatus('mandatory')
airIRmPmEheating2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2StartTemperatureF.setStatus('mandatory')
airIRmPmEheating2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11))
airIRmPmEheating2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2HysteresisK.setStatus('mandatory')
airIRmPmEheating2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2HysteresisF.setStatus('mandatory')
airIRmPmEheating2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Runtime.setStatus('mandatory')
airIRmPmEheating3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3ManOpEnable.setStatus('mandatory')
airIRmPmEheating3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Running.setStatus('mandatory')
airIRmPmEheating3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3ManOpRunning.setStatus('mandatory')
airIRmPmEheating3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Type.setStatus('mandatory')
airIRmPmEheating3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10))
airIRmPmEheating3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3StartTemperatureK.setStatus('mandatory')
airIRmPmEheating3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3StartTemperatureF.setStatus('mandatory')
airIRmPmEheating3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11))
airIRmPmEheating3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3HysteresisK.setStatus('mandatory')
airIRmPmEheating3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3HysteresisF.setStatus('mandatory')
airIRmPmEheating3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Runtime.setStatus('mandatory')
airIRmPmEheating4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4ManOpEnable.setStatus('mandatory')
airIRmPmEheating4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Running.setStatus('mandatory')
airIRmPmEheating4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4ManOpRunning.setStatus('mandatory')
airIRmPmEheating4Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("pwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Type.setStatus('mandatory')
airIRmPmEheating4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10))
airIRmPmEheating4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4StartTemperatureK.setStatus('mandatory')
airIRmPmEheating4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4StartTemperatureF.setStatus('mandatory')
airIRmPmEheating4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11))
airIRmPmEheating4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4HysteresisK.setStatus('mandatory')
airIRmPmEheating4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4HysteresisF.setStatus('mandatory')
airIRmPmEheating4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Runtime.setStatus('mandatory')
airIRmPmGECWvalveManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveManOpEnable.setStatus('mandatory')
airIRmPmGECWvalveStartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9))
airIRmPmGECWvalveStartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveStartTemperatureK.setStatus('mandatory')
airIRmPmGECWvalveStartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveStartTemperatureF.setStatus('mandatory')
airIRmPmGECWvalveLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10))
airIRmPmGECWvalveLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveLinearRangeK.setStatus('mandatory')
airIRmPmGECWvalveLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveLinearRangeF.setStatus('mandatory')
airIRmPmGECWvalveGEOffTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12))
airIRmPmGECWvalveGEOffTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveGEOffTempC.setStatus('mandatory')
airIRmPmGECWvalveGEOffTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveGEOffTempF.setStatus('mandatory')
airIRmPmGECWvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveOpeningGrade.setStatus('mandatory')
airIRmPmGECWvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveManOpOpeningGrade.setStatus('mandatory')
airIRmPmGvalveManOperationEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveManOperationEnable.setStatus('mandatory')
airIRmPmGvalvePreOpeningTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalvePreOpeningTime.setStatus('mandatory')
airIRmPmGvalvePreOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalvePreOpeningGrade.setStatus('mandatory')
airIRmPmGvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveOpeningGrade.setStatus('mandatory')
airIRmPmGvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveManOpOpeningGrade.setStatus('mandatory')
airIRmPmDrycooler1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1ManOpEnable.setStatus('mandatory')
airIRmPmDrycooler1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Running.setStatus('mandatory')
airIRmPmDrycooler1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1ManOpRunning.setStatus('mandatory')
airIRmPmDrycooler1WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9))
airIRmPmDrycooler1WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1WinterStartTempC.setStatus('mandatory')
airIRmPmDrycooler1WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1WinterStartTempF.setStatus('mandatory')
airIRmPmDrycooler1SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10))
airIRmPmDrycooler1SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1SummerStartTempC.setStatus('mandatory')
airIRmPmDrycooler1SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1SummerStartTempF.setStatus('mandatory')
airIRmPmDrycooler1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11))
airIRmPmDrycooler1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1HysteresisK.setStatus('mandatory')
airIRmPmDrycooler1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1HysteresisF.setStatus('mandatory')
airIRmPmDrycooler1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Runtime.setStatus('mandatory')
airIRmPmDrycooler2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2ManOpEnable.setStatus('mandatory')
airIRmPmDrycooler2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Running.setStatus('mandatory')
airIRmPmDrycooler2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2ManOpRunning.setStatus('mandatory')
airIRmPmDrycooler2WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9))
airIRmPmDrycooler2WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2WinterStartTempC.setStatus('mandatory')
airIRmPmDrycooler2WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2WinterStartTempF.setStatus('mandatory')
airIRmPmDrycooler2SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10))
airIRmPmDrycooler2SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2SummerStartTempC.setStatus('mandatory')
airIRmPmDrycooler2SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2SummerStartTempF.setStatus('mandatory')
airIRmPmDrycooler2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11))
airIRmPmDrycooler2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2HysteresisK.setStatus('mandatory')
airIRmPmDrycooler2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2HysteresisF.setStatus('mandatory')
airIRmPmDrycooler2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Runtime.setStatus('mandatory')
airIRmPmDrycooler3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3ManOpEnable.setStatus('mandatory')
airIRmPmDrycooler3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Running.setStatus('mandatory')
airIRmPmDrycooler3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3ManOpRunning.setStatus('mandatory')
airIRmPmDrycooler3WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9))
airIRmPmDrycooler3WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3WinterStartTempC.setStatus('mandatory')
airIRmPmDrycooler3WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3WinterStartTempF.setStatus('mandatory')
airIRmPmDrycooler3SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10))
airIRmPmDrycooler3SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3SummerStartTempC.setStatus('mandatory')
airIRmPmDrycooler3SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3SummerStartTempF.setStatus('mandatory')
airIRmPmDrycooler3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11))
airIRmPmDrycooler3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3HysteresisK.setStatus('mandatory')
airIRmPmDrycooler3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3HysteresisF.setStatus('mandatory')
airIRmPmDrycooler3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Runtime.setStatus('mandatory')
airIRmPmDrycooler4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4ManOpEnable.setStatus('mandatory')
airIRmPmDrycooler4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Running.setStatus('mandatory')
airIRmPmDrycooler4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4ManOpRunning.setStatus('mandatory')
airIRmPmDrycooler4WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9))
airIRmPmDrycooler4WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4WinterStartTempC.setStatus('mandatory')
airIRmPmDrycooler4WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4WinterStartTempF.setStatus('mandatory')
airIRmPmDrycooler4SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10))
airIRmPmDrycooler4SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4SummerStartTempC.setStatus('mandatory')
airIRmPmDrycooler4SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4SummerStartTempF.setStatus('mandatory')
airIRmPmDrycooler4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11))
airIRmPmDrycooler4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4HysteresisK.setStatus('mandatory')
airIRmPmDrycooler4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4HysteresisF.setStatus('mandatory')
airIRmPmDrycooler4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Runtime.setStatus('mandatory')
airIRmPmPump1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1ManOpEnable.setStatus('mandatory')
airIRmPmPump1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Running.setStatus('mandatory')
airIRmPmPump1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1ManOpRunning.setStatus('mandatory')
airIRmPmPump1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10))
airIRmPmPump1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1StartTemperatureK.setStatus('mandatory')
airIRmPmPump1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1StartTemperatureF.setStatus('mandatory')
airIRmPmPump1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11))
airIRmPmPump1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1HysteresisK.setStatus('mandatory')
airIRmPmPump1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1HysteresisF.setStatus('mandatory')
airIRmPmPump1LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12))
airIRmPmPump1LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1LinearRangeK.setStatus('mandatory')
airIRmPmPump1LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1LinearRangeF.setStatus('mandatory')
airIRmPmPump1PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1PressureSetpoint.setStatus('mandatory')
airIRmPmPump1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Runtime.setStatus('mandatory')
airIRmPmPump1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Speed.setStatus('mandatory')
airIRmPmPump1ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1ControlCycle.setStatus('mandatory')
airIRmPmPump1MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1MaxAdjust.setStatus('mandatory')
airIRmPmPump1ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1ControlFactor.setStatus('mandatory')
airIRmPmPump2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2ManOpEnable.setStatus('mandatory')
airIRmPmPump2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Running.setStatus('mandatory')
airIRmPmPump2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2ManOpRunning.setStatus('mandatory')
airIRmPmPump2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10))
airIRmPmPump2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2StartTemperatureK.setStatus('mandatory')
airIRmPmPump2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2StartTemperatureF.setStatus('mandatory')
airIRmPmPump2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11))
airIRmPmPump2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2HysteresisK.setStatus('mandatory')
airIRmPmPump2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2HysteresisF.setStatus('mandatory')
airIRmPmPump2LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12))
airIRmPmPump2LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2LinearRangeK.setStatus('mandatory')
airIRmPmPump2LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2LinearRangeF.setStatus('mandatory')
airIRmPmPump2PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2PressureSetpoint.setStatus('mandatory')
airIRmPmPump2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Runtime.setStatus('mandatory')
airIRmPmPump2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Speed.setStatus('mandatory')
airIRmPmPump2ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2ControlCycle.setStatus('mandatory')
airIRmPmPump2MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2MaxAdjust.setStatus('mandatory')
airIRmPmPump2ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2ControlFactor.setStatus('mandatory')
airIRmPmPump3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3ManOpEnable.setStatus('mandatory')
airIRmPmPump3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Running.setStatus('mandatory')
airIRmPmPump3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3ManOpRunning.setStatus('mandatory')
airIRmPmPump3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10))
airIRmPmPump3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3StartTemperatureK.setStatus('mandatory')
airIRmPmPump3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3StartTemperatureF.setStatus('mandatory')
airIRmPmPump3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11))
airIRmPmPump3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3HysteresisK.setStatus('mandatory')
airIRmPmPump3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3HysteresisF.setStatus('mandatory')
airIRmPmPump3LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12))
airIRmPmPump3LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3LinearRangeK.setStatus('mandatory')
airIRmPmPump3LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3LinearRangeF.setStatus('mandatory')
airIRmPmPump3PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3PressureSetpoint.setStatus('mandatory')
airIRmPmPump3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Runtime.setStatus('mandatory')
airIRmPmPump3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Speed.setStatus('mandatory')
airIRmPmPump3ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3ControlCycle.setStatus('mandatory')
airIRmPmPump3MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3MaxAdjust.setStatus('mandatory')
airIRmPmPump3ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3ControlFactor.setStatus('mandatory')
airIRmPmPump4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4ManOpEnable.setStatus('mandatory')
airIRmPmPump4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Running.setStatus('mandatory')
airIRmPmPump4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4ManOpRunning.setStatus('mandatory')
airIRmPmPump4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10))
airIRmPmPump4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4StartTemperatureK.setStatus('mandatory')
airIRmPmPump4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4StartTemperatureF.setStatus('mandatory')
airIRmPmPump4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11))
airIRmPmPump4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4HysteresisK.setStatus('mandatory')
airIRmPmPump4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4HysteresisF.setStatus('mandatory')
airIRmPmPump4LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12))
airIRmPmPump4LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4LinearRangeK.setStatus('mandatory')
airIRmPmPump4LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4LinearRangeF.setStatus('mandatory')
airIRmPmPump4PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4PressureSetpoint.setStatus('mandatory')
airIRmPmPump4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Runtime.setStatus('mandatory')
airIRmPmPump4Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Speed.setStatus('mandatory')
airIRmPmPump4ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4ControlCycle.setStatus('mandatory')
airIRmPmPump4MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4MaxAdjust.setStatus('mandatory')
airIRmPmPump4ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4ControlFactor.setStatus('mandatory')
airIRmPmHotgasHeatRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHotgasHeatRunning.setStatus('mandatory')
airIRmPmPWWHeatingManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpEnable.setStatus('mandatory')
airIRmPmPWWHeatingRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingRunning.setStatus('mandatory')
airIRmPmPWWHeatingManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpRunning.setStatus('mandatory')
airIRmPmPWWHeatingType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("undefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingType.setStatus('mandatory')
airIRmPmPWWHeatingStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10))
airIRmPmPWWHeatingStartTempK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingStartTempK.setStatus('mandatory')
airIRmPmPWWHeatingStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingStartTempF.setStatus('mandatory')
airIRmPmPWWHeatingHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12))
airIRmPmPWWHeatingHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingHysteresisK.setStatus('mandatory')
airIRmPmPWWHeatingHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingHysteresisF.setStatus('mandatory')
airIRmPmPWWHeatingLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13))
airIRmPmPWWHeatingLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingLinearRangeK.setStatus('mandatory')
airIRmPmPWWHeatingLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingLinearRangeF.setStatus('mandatory')
airIRmPmPWWHeatingCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingCurrentValue.setStatus('mandatory')
airIRmPmPWWHeatingManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpValue.setStatus('mandatory')
airIRmPmHumidifier1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpEnable.setStatus('mandatory')
airIRmPmHumidifier1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Running.setStatus('mandatory')
airIRmPmHumidifier1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpRunning.setStatus('mandatory')
airIRmPmHumidifier1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Type.setStatus('mandatory')
airIRmPmHumidifier1StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1StartHumidity.setStatus('mandatory')
airIRmPmHumidifier1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1Hysteresis.setStatus('mandatory')
airIRmPmHumidifier1LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1LinearRange.setStatus('mandatory')
airIRmPmHumidifier1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Runtime.setStatus('mandatory')
airIRmPmHumidifier1CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1CurrentValue.setStatus('mandatory')
airIRmPmHumidifier1ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpValue.setStatus('mandatory')
airIRmPmHumidifier2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpEnable.setStatus('mandatory')
airIRmPmHumidifier2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Running.setStatus('mandatory')
airIRmPmHumidifier2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpRunning.setStatus('mandatory')
airIRmPmHumidifier2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Type.setStatus('mandatory')
airIRmPmHumidifier2StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2StartHumidity.setStatus('mandatory')
airIRmPmHumidifier2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2Hysteresis.setStatus('mandatory')
airIRmPmHumidifier2LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2LinearRange.setStatus('mandatory')
airIRmPmHumidifier2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Runtime.setStatus('mandatory')
airIRmPmHumidifier2CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2CurrentValue.setStatus('mandatory')
airIRmPmHumidifier2ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpValue.setStatus('mandatory')
airIRmPmDehumidificManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificManOpEnable.setStatus('mandatory')
airIRmPmDehumidificRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificRunning.setStatus('mandatory')
airIRmPmDehumidificManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificManOpRunning.setStatus('mandatory')
airIRmPmDehumidificStartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificStartHumidity.setStatus('mandatory')
airIRmPmDehumidificHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificHysteresis.setStatus('mandatory')
airIRmPmDehumidificMinWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18))
airIRmPmDehumidificMinWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMinWaterTempC.setStatus('mandatory')
airIRmPmDehumidificMinWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMinWaterTempF.setStatus('mandatory')
airIRmPmDehumidificMaxWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19))
airIRmPmDehumidificMaxWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMaxWaterTempC.setStatus('mandatory')
airIRmPmDehumidificMaxWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMaxWaterTempF.setStatus('mandatory')
airIRmPmDehumidificRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificRuntime.setStatus('mandatory')
airIRmPmFan1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpEnable.setStatus('mandatory')
airIRmPmFan1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Running.setStatus('mandatory')
airIRmPmFan1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpRunning.setStatus('mandatory')
airIRmPmFan1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Type.setStatus('mandatory')
airIRmPmFan1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Runtime.setStatus('mandatory')
airIRmPmFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Speed.setStatus('mandatory')
airIRmPmFan1ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpSpeed.setStatus('mandatory')
airIRmPmFan2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpEnable.setStatus('mandatory')
airIRmPmFan2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Running.setStatus('mandatory')
airIRmPmFan2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpRunning.setStatus('mandatory')
airIRmPmFan2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Type.setStatus('mandatory')
airIRmPmFan2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Runtime.setStatus('mandatory')
airIRmPmFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Speed.setStatus('mandatory')
airIRmPmFan2ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpSpeed.setStatus('mandatory')
airIRmPmFan3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpEnable.setStatus('mandatory')
airIRmPmFan3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Running.setStatus('mandatory')
airIRmPmFan3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpRunning.setStatus('mandatory')
airIRmPmFan3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("proportional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Type.setStatus('mandatory')
airIRmPmFan3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Runtime.setStatus('mandatory')
airIRmPmFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Speed.setStatus('mandatory')
airIRmPmFan3ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpSpeed.setStatus('mandatory')
airIRmPmLouver1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1ManOpEnable.setStatus('mandatory')
airIRmPmLouver1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1Position.setStatus('mandatory')
airIRmPmLouver1ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1ManOpPosition.setStatus('mandatory')
airIRmPmLouver2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2ManOpEnable.setStatus('mandatory')
airIRmPmLouver2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2Position.setStatus('mandatory')
airIRmPmLouver2ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2ManOpPosition.setStatus('mandatory')
airIRmPmLouver3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3ManOpEnable.setStatus('mandatory')
airIRmPmLouver3Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3Position.setStatus('mandatory')
airIRmPmLouver3ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3ManOpPosition.setStatus('mandatory')
airIRmPmFan1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 1), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Failure.setStatus('mandatory')
airIRmPmFan2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 2), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Failure.setStatus('mandatory')
airIRmPmFan3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 3), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Failure.setStatus('mandatory')
airIRmPmCompressor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 4), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1Failure.setStatus('mandatory')
airIRmPmCompressor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 5), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2Failure.setStatus('mandatory')
airIRmPmWaterDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 6), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterDetector.setStatus('mandatory')
airIRmPmPhaseFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 7), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPhaseFailure.setStatus('mandatory')
airIRmPmFireSmokeDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 8), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFireSmokeDetector.setStatus('mandatory')
airIRmPmReturnAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 9), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureTooHigh.setStatus('mandatory')
airIRmPmReturnAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 10), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidityTooHigh.setStatus('mandatory')
airIRmPmSupplyAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 11), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureTooHigh.setStatus('mandatory')
airIRmPmSupplyAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 12), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidityTooHigh.setStatus('mandatory')
airIRmPmWaterTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 13), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureTooHigh.setStatus('mandatory')
airIRmPmReturnAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 14), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureTooLow.setStatus('mandatory')
airIRmPmReturnAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 15), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidityTooLow.setStatus('mandatory')
airIRmPmSupplyAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 16), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureTooLow.setStatus('mandatory')
airIRmPmSupplyAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 17), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidityTooLow.setStatus('mandatory')
airIRmPmWaterTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 18), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureTooLow.setStatus('mandatory')
airIRmPmSensor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 19), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor1Failure.setStatus('mandatory')
airIRmPmSensor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 20), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor2Failure.setStatus('mandatory')
airIRmPmSensor3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 21), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor3Failure.setStatus('mandatory')
airIRmPmSensor4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 22), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor4Failure.setStatus('mandatory')
airIRmPmSensor5Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 23), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor5Failure.setStatus('mandatory')
airIRmPmSensor6Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 24), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor6Failure.setStatus('mandatory')
airIRmPmSensor7Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 25), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor7Failure.setStatus('mandatory')
airIRmPmSensor8Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 26), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor8Failure.setStatus('mandatory')
airIRmPmSensor9Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 27), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor9Failure.setStatus('mandatory')
airIRmPmSensor10Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 28), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor10Failure.setStatus('mandatory')
airIRmPmSensor11Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 29), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor11Failure.setStatus('mandatory')
airIRmPmSensor12Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 30), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor12Failure.setStatus('mandatory')
airIRmPmSensor13Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 31), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor13Failure.setStatus('mandatory')
airIRmPmSensor14Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 32), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor14Failure.setStatus('mandatory')
airIRmPmSensor15Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 33), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor15Failure.setStatus('mandatory')
airIRmPmSensor16Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 34), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor16Failure.setStatus('mandatory')
airIRmPmSensor17Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 35), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor17Failure.setStatus('mandatory')
airIRmPmSensor18Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 36), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor18Failure.setStatus('mandatory')
airIRmPmSensor19Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 37), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor19Failure.setStatus('mandatory')
airIRmPmSensor20Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 38), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor20Failure.setStatus('mandatory')
airIRmPmSensor21Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 39), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor21Failure.setStatus('mandatory')
airIRmPmSensor1Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 40), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor1Defect.setStatus('mandatory')
airIRmPmSensor2Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 41), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor2Defect.setStatus('mandatory')
airIRmPmSensor3Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 42), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor3Defect.setStatus('mandatory')
airIRmPmSensor4Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 43), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor4Defect.setStatus('mandatory')
airIRmPmSensor5Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 44), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor5Defect.setStatus('mandatory')
airIRmPmSensor6Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 45), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor6Defect.setStatus('mandatory')
airIRmPmSensor7Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 46), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor7Defect.setStatus('mandatory')
airIRmPmSensor8Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 47), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor8Defect.setStatus('mandatory')
airIRmPmSensor9Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 48), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor9Defect.setStatus('mandatory')
airIRmPmSensor10Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 49), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor10Defect.setStatus('mandatory')
airIRmPmSensor11Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 50), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor11Defect.setStatus('mandatory')
airIRmPmSensor12Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 51), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor12Defect.setStatus('mandatory')
airIRmPmSensor13Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 52), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor13Defect.setStatus('mandatory')
airIRmPmSensor14Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 53), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor14Defect.setStatus('mandatory')
airIRmPmSensor15Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 54), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor15Defect.setStatus('mandatory')
airIRmPmSensor16Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 55), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor16Defect.setStatus('mandatory')
airIRmPmSensor17Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 56), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor17Defect.setStatus('mandatory')
airIRmPmSensor18Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 57), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor18Defect.setStatus('mandatory')
airIRmPmSensor19Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 58), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor19Defect.setStatus('mandatory')
airIRmPmSensor20Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 59), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor20Defect.setStatus('mandatory')
airIRmPmSensor21Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 60), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor21Defect.setStatus('mandatory')
airIRmPmCompressor1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 61), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1Alarm.setStatus('mandatory')
airIRmPmCompressor2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 62), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2Alarm.setStatus('mandatory')
airIRmPmCompressor1LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 63), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1LowPressure.setStatus('mandatory')
airIRmPmCompressor2LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 64), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2LowPressure.setStatus('mandatory')
airIRmPmReheat1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 65), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat1Failure.setStatus('mandatory')
airIRmPmReheat2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 66), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat2Failure.setStatus('mandatory')
airIRmPmReheat3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 67), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat3Failure.setStatus('mandatory')
airIRmPmReheat4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 68), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat4Failure.setStatus('mandatory')
airIRmPmDrycooler1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 69), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Failure.setStatus('mandatory')
airIRmPmDrycooler2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 70), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Failure.setStatus('mandatory')
airIRmPmDrycooler3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 71), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Failure.setStatus('mandatory')
airIRmPmDrycooler4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 72), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Failure.setStatus('mandatory')
airIRmPmPump1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 73), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Failure.setStatus('mandatory')
airIRmPmPump2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 74), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Failure.setStatus('mandatory')
airIRmPmPump3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 75), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Failure.setStatus('mandatory')
airIRmPmPump4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 76), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Failure.setStatus('mandatory')
airIRmPmHumidifier1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 77), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Failure.setStatus('mandatory')
airIRmPmHumidifier2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 78), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Failure.setStatus('mandatory')
airIRmPmHumidifier3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 79), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Failure.setStatus('mandatory')
airIRmPmHumidifier1Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 80), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Alarm5us.setStatus('mandatory')
airIRmPmHumidifier2Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 81), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Alarm5us.setStatus('mandatory')
airIRmPmHumidifier3Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 82), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Alarm5us.setStatus('mandatory')
airIRmPmHumidifier1Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 83), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Alarm20us.setStatus('mandatory')
airIRmPmHumidifier2Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 84), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Alarm20us.setStatus('mandatory')
airIRmPmHumidifier3Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 85), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Alarm20us.setStatus('mandatory')
airIRmPmFan1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 86), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Alarm.setStatus('mandatory')
airIRmPmFan2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 87), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Alarm.setStatus('mandatory')
airIRmPmFan3Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 88), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Alarm.setStatus('mandatory')
airIRmPmFilter1Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 89), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter1Clogged.setStatus('mandatory')
airIRmPmFilter2Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 90), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter2Clogged.setStatus('mandatory')
airIRmPmFilter3Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 91), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter3Clogged.setStatus('mandatory')
airIRmPmAuxiliaryAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 92), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm1.setStatus('mandatory')
airIRmPmAuxiliaryAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 93), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm2.setStatus('mandatory')
airIRmPmAuxiliaryAlarm3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 94), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm3.setStatus('mandatory')
airIRmPmAuxiliaryAlarm4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 95), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm4.setStatus('mandatory')
airIRmPmAuxiliaryAlarm5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 96), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm5.setStatus('mandatory')
airIRmPmAuxiliaryAlarm6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 97), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm6.setStatus('mandatory')
airIRmPmAuxiliaryAlarm7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 98), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm7.setStatus('mandatory')
airIRmPmAuxiliaryAlarm8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 99), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm8.setStatus('mandatory')
airIRmPmAuxiliaryAlarm9 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 100), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm9.setStatus('mandatory')
airIRmPmAuxiliaryAlarm10 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 101), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm10.setStatus('mandatory')
airIRmPmHotGasHeatingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 102), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHotGasHeatingAlarm.setStatus('mandatory')
airIRmPmEEV1PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 103), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1PressureSensorError.setStatus('mandatory')
airIRmPmEEV1TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 104), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1TemperatureSensorError.setStatus('mandatory')
airIRmPmEEV1StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 105), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1StepperMotorError.setStatus('mandatory')
airIRmPmEEV2PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 106), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2PressureSensorError.setStatus('mandatory')
airIRmPmEEV2TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 107), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2TemperatureSensorError.setStatus('mandatory')
airIRmPmEEV2StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 108), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2StepperMotorError.setStatus('mandatory')
airIRmPmMyZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneNumber.setStatus('mandatory')
airIRmPmMyZoneRoomTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2))
airIRmPmMyZoneRoomTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomTemperatureC.setStatus('mandatory')
airIRmPmMyZoneRoomTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomTemperatureF.setStatus('mandatory')
airIRmPmMyZoneRoomHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomHumidity.setStatus('mandatory')
airIRmPmMyZoneSupplyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4))
airIRmPmMyZoneSupplyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyTemperatureC.setStatus('mandatory')
airIRmPmMyZoneSupplyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyTemperatureF.setStatus('mandatory')
airIRmPmMyZoneSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyHumidity.setStatus('mandatory')
airIRmPmMyZoneSequencingTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSequencingTime.setStatus('mandatory')
airIRmPmMyZoneNumberOfErrorUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneNumberOfErrorUnits.setStatus('mandatory')
airIRmPmMyZoneEmergencyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8))
airIRmPmMyZoneEmergencyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneEmergencyTemperatureC.setStatus('mandatory')
airIRmPmMyZoneEmergencyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneEmergencyTemperatureF.setStatus('mandatory')
airIRmPmMyZoneCWEnergySaveMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 9), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneCWEnergySaveMode.setStatus('mandatory')
airIRmPmGlobalZoneDataEmergencyOpMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45, 1), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGlobalZoneDataEmergencyOpMode.setStatus('mandatory')
airIRG3IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentTableSize.setStatus('mandatory')
airIRG3IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2), )
if mibBuilder.loadTexts: airIRG3IdentTable.setStatus('mandatory')
airIRG3IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3IdentIndex"))
if mibBuilder.loadTexts: airIRG3IdentEntry.setStatus('mandatory')
airIRG3IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentIndex.setStatus('mandatory')
airIRG3IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3IdentName.setStatus('mandatory')
airIRG3IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3IdentLocation.setStatus('mandatory')
airIRG3IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentModelNumber.setStatus('mandatory')
airIRG3IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentSerialNumber.setStatus('mandatory')
airIRG3IdentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentFirmwareRevision.setStatus('mandatory')
airIRG3IdentHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentHardwareRevision.setStatus('mandatory')
airIRG3IdentManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentManufactureDate.setStatus('mandatory')
airIRG3IdentRDUSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentRDUSysOID.setStatus('mandatory')
airIRG3IdentCMSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentCMSysOID.setStatus('mandatory')
airIRG3IdentGroupSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentGroupSysOID.setStatus('mandatory')
airIRG3GroupTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupTableSize.setStatus('mandatory')
airIRG3GroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2), )
if mibBuilder.loadTexts: airIRG3GroupStatusTable.setStatus('mandatory')
airIRG3GroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupStatusIndex"))
if mibBuilder.loadTexts: airIRG3GroupStatusEntry.setStatus('mandatory')
airIRG3GroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusIndex.setStatus('mandatory')
airIRG3GroupStatusCoolOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusCoolOutput.setStatus('mandatory')
airIRG3GroupStatusCoolDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusCoolDemand.setStatus('mandatory')
airIRG3GroupStatusAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAirFlowUS.setStatus('mandatory')
airIRG3GroupStatusAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAirFlowMetric.setStatus('mandatory')
airIRG3GroupStatusMaxRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxRackInletTempUS.setStatus('mandatory')
airIRG3GroupStatusMaxRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxRackInletTempMetric.setStatus('mandatory')
airIRG3GroupStatusMinRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinRackInletTempUS.setStatus('mandatory')
airIRG3GroupStatusMinRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinRackInletTempMetric.setStatus('mandatory')
airIRG3GroupStatusMaxReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxReturnAirTempUS.setStatus('mandatory')
airIRG3GroupStatusMaxReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxReturnAirTempMetric.setStatus('mandatory')
airIRG3GroupStatusMinReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinReturnAirTempUS.setStatus('mandatory')
airIRG3GroupStatusMinReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinReturnAirTempMetric.setStatus('mandatory')
airIRG3GroupStatusAvgSupplyTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgSupplyTempUS.setStatus('mandatory')
airIRG3GroupStatusAvgSupplyTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgSupplyTempMetric.setStatus('mandatory')
airIRG3GroupStatusAvgReturnTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgReturnTempUS.setStatus('mandatory')
airIRG3GroupStatusAvgReturnTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgReturnTempMetric.setStatus('mandatory')
airIRG3GroupStatusAvgFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgFanSpeed.setStatus('mandatory')
airIRG3GroupStatusAvgAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgAirFlowUS.setStatus('mandatory')
airIRG3GroupStatusAvgAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgAirFlowMetric.setStatus('mandatory')
airIRG3GroupStatusTotalAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusTotalAirFlowUS.setStatus('mandatory')
airIRG3GroupStatusTotalAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusTotalAirFlowMetric.setStatus('mandatory')
airIRG3GroupSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3), )
if mibBuilder.loadTexts: airIRG3GroupSetpointsTable.setStatus('mandatory')
airIRG3GroupSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupSetpointsIndex"))
if mibBuilder.loadTexts: airIRG3GroupSetpointsEntry.setStatus('mandatory')
airIRG3GroupSetpointsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupSetpointsIndex.setStatus('mandatory')
airIRG3GroupSetpointsCoolSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolSetpointUS.setStatus('mandatory')
airIRG3GroupSetpointsCoolSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolSetpointMetric.setStatus('mandatory')
airIRG3GroupSetpointsCoolDeadbandUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolDeadbandUS.setStatus('mandatory')
airIRG3GroupSetpointsCoolDeadbandMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolDeadbandMetric.setStatus('mandatory')
airIRG3GroupSetpointsFanSpeedPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsFanSpeedPreference.setStatus('mandatory')
airIRG3GroupSetpointsSupplyAirSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsSupplyAirSetpointUS.setStatus('mandatory')
airIRG3GroupSetpointsSupplyAirSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsSupplyAirSetpointMetric.setStatus('mandatory')
airIRG3GroupSetpointsAirFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsAirFlowControl.setStatus('mandatory')
airIRG3GroupSetpointsLightingOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsLightingOnTime.setStatus('mandatory')
airIRG3GroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4), )
if mibBuilder.loadTexts: airIRG3GroupConfigTable.setStatus('mandatory')
airIRG3GroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupConfigIndex"))
if mibBuilder.loadTexts: airIRG3GroupConfigEntry.setStatus('mandatory')
airIRG3GroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupConfigIndex.setStatus('mandatory')
airIRG3GroupConfigNumberofCoolingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigNumberofCoolingUnits.setStatus('mandatory')
airIRG3GroupConfigConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigConfigurationType.setStatus('mandatory')
airIRG3GroupConfigCapacityControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discrete", 1), ("proportional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCapacityControlType.setStatus('mandatory')
airIRG3GroupConfigFanSpeedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigFanSpeedControl.setStatus('mandatory')
airIRG3GroupConfigCoolGainP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolGainP.setStatus('mandatory')
airIRG3GroupConfigCoolResetRateI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolResetRateI.setStatus('mandatory')
airIRG3GroupConfigCoolDerivativeD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolDerivativeD.setStatus('mandatory')
airIRG3GroupConfigCoolPIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readBack", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolPIDReset.setStatus('mandatory')
airIRG3GroupConfigNumberofBackupUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigNumberofBackupUnits.setStatus('mandatory')
airIRG3GroupConfigRuntimeBalancingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigRuntimeBalancingEnable.setStatus('mandatory')
airIRG3GroupConfigLoadAssistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigLoadAssistEnable.setStatus('mandatory')
airIRG3AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsTableSize.setStatus('mandatory')
airIRG3AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2), )
if mibBuilder.loadTexts: airIRG3AlarmsTable.setStatus('mandatory')
airIRG3AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3AlarmsIndex"))
if mibBuilder.loadTexts: airIRG3AlarmsEntry.setStatus('mandatory')
airIRG3AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsIndex.setStatus('mandatory')
airIRG3AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsEventCode.setStatus('mandatory')
airIRG3AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsDescription.setStatus('mandatory')
airIRG3RDUTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUTableSize.setStatus('mandatory')
airIRG3RDUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2), )
if mibBuilder.loadTexts: airIRG3RDUStatusTable.setStatus('mandatory')
airIRG3RDUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUStatusDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUStatusEntry.setStatus('mandatory')
airIRG3RDUStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDeviceIndex.setStatus('mandatory')
airIRG3RDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUID.setStatus('mandatory')
airIRG3RDUStatusOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOnReadyStandby.setStatus('mandatory')
airIRG3RDUStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3), ("stop", 4), ("maintenancemode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOperatingMode.setStatus('mandatory')
airIRG3RDUStatusLeadPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pump1", 1), ("pump2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusLeadPump.setStatus('mandatory')
airIRG3RDUStatusStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusStartupDelay.setStatus('mandatory')
airIRG3RDUStatusPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpChangeOverInterval.setStatus('mandatory')
airIRG3RDUStatusStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusStopOnLeakDetect.setStatus('mandatory')
airIRG3RDUStatusPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPowerSource.setStatus('mandatory')
airIRG3RDUStatusTotalRDUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusTotalRDUOutputPower.setStatus('mandatory')
airIRG3RDUStatusInletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInletWaterTempUS.setStatus('mandatory')
airIRG3RDUStatusInletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInletWaterTempMetric.setStatus('mandatory')
airIRG3RDUStatusOutletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutletWaterTempUS.setStatus('mandatory')
airIRG3RDUStatusOutletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutletWaterTempMetric.setStatus('mandatory')
airIRG3RDUStatusCondenserSaturationTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserSaturationTempUS.setStatus('mandatory')
airIRG3RDUStatusCondenserSaturationTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserSaturationTempMetric.setStatus('mandatory')
airIRG3RDUStatusDewPointTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDewPointTempUS.setStatus('mandatory')
airIRG3RDUStatusDewPointTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDewPointTempMetric.setStatus('mandatory')
airIRG3RDUStatusPumpOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpOutletTempUS.setStatus('mandatory')
airIRG3RDUStatusPumpOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpOutletTempMetric.setStatus('mandatory')
airIRG3RDUStatusSubcoolerOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusSubcoolerOutletTempUS.setStatus('mandatory')
airIRG3RDUStatusSubcoolerOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusSubcoolerOutletTempMetric.setStatus('mandatory')
airIRG3RDUStatusCondenserOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletTempUS.setStatus('mandatory')
airIRG3RDUStatusCondenserOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletTempMetric.setStatus('mandatory')
airIRG3RDUStatusCondenserInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserInletTempUS.setStatus('mandatory')
airIRG3RDUStatusCondenserInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserInletTempMetric.setStatus('mandatory')
airIRG3RDUStatusCondenserOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletPressureUS.setStatus('mandatory')
airIRG3RDUStatusCondenserOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletPressureMetric.setStatus('mandatory')
airIRG3RDUStatusPump1HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1HeadPressureUS.setStatus('mandatory')
airIRG3RDUStatusPump1HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1HeadPressureMetric.setStatus('mandatory')
airIRG3RDUStatusPump2HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2HeadPressureUS.setStatus('mandatory')
airIRG3RDUStatusPump2HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2HeadPressureMetric.setStatus('mandatory')
airIRG3RDUStatusPump1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1Speed.setStatus('mandatory')
airIRG3RDUStatusPump2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2Speed.setStatus('mandatory')
airIRG3RDUStatusCWValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCWValvePosition.setStatus('mandatory')
airIRG3RDUStatusReceiverLiquidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusReceiverLiquidLevel.setStatus('mandatory')
airIRG3RDUStatusDCPowerSupply1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDCPowerSupply1Current.setStatus('mandatory')
airIRG3RDUStatusDCPowerSupply2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDCPowerSupply2Current.setStatus('mandatory')
airIRG3RDUStatusTotalDCPowerSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusTotalDCPowerSupplyCurrent.setStatus('mandatory')
airIRG3RDUStatusInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInputState.setStatus('mandatory')
airIRG3RDUStatusOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutputState.setStatus('mandatory')
airIRG3RDUStatusByPassValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusByPassValvePosition.setStatus('mandatory')
airIRG3RDUStatusRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("suspended", 1), ("calibrating", 2), ("operating", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusRefrigerantLeakDetector.setStatus('mandatory')
airIRG3RDURunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3), )
if mibBuilder.loadTexts: airIRG3RDURunHoursTable.setStatus('mandatory')
airIRG3RDURunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDURunHoursDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDURunHoursEntry.setStatus('mandatory')
airIRG3RDURunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursDeviceIndex.setStatus('mandatory')
airIRG3RDURunHoursRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursRDUID.setStatus('mandatory')
airIRG3RDURunHoursPump1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPump1.setStatus('mandatory')
airIRG3RDURunHoursPump2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPump2.setStatus('mandatory')
airIRG3RDURunHoursPowerSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPowerSupply1.setStatus('mandatory')
airIRG3RDURunHoursPowerSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPowerSupply2.setStatus('mandatory')
airIRG3RDUServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4), )
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsTable.setStatus('mandatory')
airIRG3RDUServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUServiceIntervalsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsEntry.setStatus('mandatory')
airIRG3RDUServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsDeviceIndex.setStatus('mandatory')
airIRG3RDUServiceIntervalsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsRDUID.setStatus('mandatory')
airIRG3RDUServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsAirFilterInterval.setStatus('mandatory')
airIRG3RDUServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsAirFilterAlarm.setStatus('mandatory')
airIRG3RDUThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5), )
if mibBuilder.loadTexts: airIRG3RDUThresholdsTable.setStatus('mandatory')
airIRG3RDUThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUThresholdsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUThresholdsEntry.setStatus('mandatory')
airIRG3RDUThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUThresholdsDeviceIndex.setStatus('mandatory')
airIRG3RDUThresholdsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUThresholdsRDUID.setStatus('mandatory')
airIRG3RDUThresholdsEnteringFluidTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUThresholdsEnteringFluidTempHighUS.setStatus('mandatory')
airIRG3RDUThresholdsEnteringFluidTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUThresholdsEnteringFluidTempHighMetric.setStatus('mandatory')
airIRG3RDUSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6), )
if mibBuilder.loadTexts: airIRG3RDUSetpointsTable.setStatus('mandatory')
airIRG3RDUSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUSetpointsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUSetpointsEntry.setStatus('mandatory')
airIRG3RDUSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUSetpointsDeviceIndex.setStatus('mandatory')
airIRG3RDUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7), )
if mibBuilder.loadTexts: airIRG3RDUConfigTable.setStatus('mandatory')
airIRG3RDUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUConfigDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUConfigEntry.setStatus('mandatory')
airIRG3RDUConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUConfigDeviceIndex.setStatus('mandatory')
airIRG3RDUConfigRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUConfigRDUID.setStatus('mandatory')
airIRG3RDUConfigStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigStopOnLeakDetect.setStatus('mandatory')
airIRG3RDUConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigStartupDelay.setStatus('mandatory')
airIRG3RDUConfigPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigPumpChangeOverInterval.setStatus('mandatory')
airIRG3RDUConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigPowerSource.setStatus('mandatory')
airIRG3RDUConfigOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anyalarm", 1), ("onlycriticalalarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOutputSource.setStatus('mandatory')
airIRG3RDUConfigInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigInputNormalState.setStatus('mandatory')
airIRG3RDUConfigOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOutputNormalState.setStatus('mandatory')
airIRG3RDUConfigByPassValveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigByPassValveEnabled.setStatus('mandatory')
airIRG3RDUConfigRefrigerantLeakDetectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigRefrigerantLeakDetectorEnabled.setStatus('mandatory')
airIRG3RDUConfigCalibrateRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigCalibrateRefrigerantLeakDetector.setStatus('mandatory')
airIRG3RDUConfigOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOnReadyStandby.setStatus('mandatory')
airIRG3CMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMTableSize.setStatus('mandatory')
airIRG3CMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2), )
if mibBuilder.loadTexts: airIRG3CMStatusTable.setStatus('mandatory')
airIRG3CMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMStatusDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMStatusEntry.setStatus('mandatory')
airIRG3CMStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusDeviceIndex.setStatus('mandatory')
airIRG3CMStatusCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusCMID.setStatus('mandatory')
airIRG3CMStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standBy", 1), ("on", 2), ("idle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusOperatingMode.setStatus('mandatory')
airIRG3CMStatusUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("oa", 2), ("ra", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusUnitType.setStatus('mandatory')
airIRG3CMStatusRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusRackInletTempUS.setStatus('mandatory')
airIRG3CMStatusRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusRackInletTempMetric.setStatus('mandatory')
airIRG3CMStatusReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusReturnAirTempUS.setStatus('mandatory')
airIRG3CMStatusReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusReturnAirTempMetric.setStatus('mandatory')
airIRG3CMStatusLiquidTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidTempUS.setStatus('mandatory')
airIRG3CMStatusLiquidTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidTempMetric.setStatus('mandatory')
airIRG3CMStatusVaporTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporTempUS.setStatus('mandatory')
airIRG3CMStatusVaporTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporTempMetric.setStatus('mandatory')
airIRG3CMStatusEvaporatorTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEvaporatorTempUS.setStatus('mandatory')
airIRG3CMStatusEvaporatorTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEvaporatorTempMetric.setStatus('mandatory')
airIRG3CMStatusLiquidInletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidInletPressureUS.setStatus('mandatory')
airIRG3CMStatusLiquidInletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidInletPressureMetric.setStatus('mandatory')
airIRG3CMStatusVaporOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporOutletPressureUS.setStatus('mandatory')
airIRG3CMStatusVaporOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporOutletPressureMetric.setStatus('mandatory')
airIRG3CMStatusExpansionValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusExpansionValvePosition.setStatus('mandatory')
airIRG3CMStatusEPRValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEPRValvePosition.setStatus('mandatory')
airIRG3CMStatusLocalDisplayOnOffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLocalDisplayOnOffEnabled.setStatus('mandatory')
airIRG3CMStatusAverageFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusAverageFanSpeed.setStatus('mandatory')
airIRG3CMRunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3), )
if mibBuilder.loadTexts: airIRG3CMRunHoursTable.setStatus('mandatory')
airIRG3CMRunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMRunHoursDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMRunHoursEntry.setStatus('mandatory')
airIRG3CMRunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursDeviceIndex.setStatus('mandatory')
airIRG3CMRunHoursCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursCMID.setStatus('mandatory')
airIRG3CMRunHoursFan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan1.setStatus('mandatory')
airIRG3CMRunHoursFan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan2.setStatus('mandatory')
airIRG3CMRunHoursFan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan3.setStatus('mandatory')
airIRG3CMRunHoursFan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan4.setStatus('mandatory')
airIRG3CMRunHoursFan5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan5.setStatus('mandatory')
airIRG3CMRunHoursAirFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursAirFilter.setStatus('mandatory')
airIRG3CMServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4), )
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsTable.setStatus('mandatory')
airIRG3CMServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMServiceIntervalsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsEntry.setStatus('mandatory')
airIRG3CMServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsDeviceIndex.setStatus('mandatory')
airIRG3CMServiceIntervalsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsCMID.setStatus('mandatory')
airIRG3CMServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsAirFilterInterval.setStatus('mandatory')
airIRG3CMServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsAirFilterAlarm.setStatus('mandatory')
airIRG3CMThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5), )
if mibBuilder.loadTexts: airIRG3CMThresholdsTable.setStatus('mandatory')
airIRG3CMThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMThresholdsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMThresholdsEntry.setStatus('mandatory')
airIRG3CMThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMThresholdsDeviceIndex.setStatus('mandatory')
airIRG3CMThresholdsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMThresholdsCMID.setStatus('mandatory')
airIRG3CMThresholdsRackInletTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsRackInletTempHighUS.setStatus('mandatory')
airIRG3CMThresholdsRackInletTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsRackInletTempHighMetric.setStatus('mandatory')
airIRG3CMThresholdsSupplyAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsSupplyAirTempHighUS.setStatus('mandatory')
airIRG3CMThresholdsSupplyAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsSupplyAirTempHighMetric.setStatus('mandatory')
airIRG3CMThresholdsReturnAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsReturnAirTempHighUS.setStatus('mandatory')
airIRG3CMThresholdsReturnAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsReturnAirTempHighMetric.setStatus('mandatory')
airIRG3CMSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6), )
if mibBuilder.loadTexts: airIRG3CMSetpointsTable.setStatus('mandatory')
airIRG3CMSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMSetpointsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMSetpointsEntry.setStatus('mandatory')
airIRG3CMSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMSetpointsDeviceIndex.setStatus('mandatory')
airIRG3CMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7), )
if mibBuilder.loadTexts: airIRG3CMConfigTable.setStatus('mandatory')
airIRG3CMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1), ).setIndexNames((0, "PowerNet-MIB", "airIRG3CMConfigDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMConfigEntry.setStatus('mandatory')
airIRG3CMConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMConfigDeviceIndex.setStatus('mandatory')
airIRG3CMConfigCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMConfigCMID.setStatus('mandatory')
airIRG3CMConfigStopOnCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigStopOnCoolFail.setStatus('mandatory')
airIRG3CMConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigStartupDelay.setStatus('mandatory')
airIRG3CMConfigRemoteOnStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standBy", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigRemoteOnStandby.setStatus('mandatory')
airIRG3CMConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigPowerSource.setStatus('mandatory')
rARUIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1), )
if mibBuilder.loadTexts: rARUIdentTable.setStatus('mandatory')
rARUIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUIdentAruIndex"))
if mibBuilder.loadTexts: rARUIdentEntry.setStatus('mandatory')
rARUIdentAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUIdentAruIndex.setStatus('mandatory')
rARUIdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUIdentName.setStatus('mandatory')
rARUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1), )
if mibBuilder.loadTexts: rARUConfigTable.setStatus('mandatory')
rARUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUConfigAruIndex"))
if mibBuilder.loadTexts: rARUConfigEntry.setStatus('mandatory')
rARUConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUConfigAruIndex.setStatus('mandatory')
rARUConfigAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruName.setStatus('mandatory')
rARUConfigAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruRemoteSetpoint.setStatus('mandatory')
rARUConfigAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruTempOvrdEnableDisable.setStatus('mandatory')
rARUConfigAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruTempOvrdSetpoint.setStatus('mandatory')
rARUConfigAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruMasterControl.setStatus('mandatory')
rARUStatusAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruDeviceCount.setStatus('mandatory')
rARUStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusSysTempUnits.setStatus('mandatory')
rARUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3), )
if mibBuilder.loadTexts: rARUStatusTable.setStatus('mandatory')
rARUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUStatusAruIndex"))
if mibBuilder.loadTexts: rARUStatusEntry.setStatus('mandatory')
rARUStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruIndex.setStatus('mandatory')
rARUStatusAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruName.setStatus('mandatory')
rARUStatusAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruRemoteSetpoint.setStatus('mandatory')
rARUStatusAruManualSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("aruOff", 1), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW", 6), ("aru5kW", 7), ("aru3kW", 8), ("aru2kW", 9), ("aruRem", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruManualSetpoint.setStatus('mandatory')
rARUStatusAruTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp1.setStatus('mandatory')
rARUStatusAruTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp2.setStatus('mandatory')
rARUStatusAruTemp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp3.setStatus('mandatory')
rARUStatusAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdEnableDisable.setStatus('mandatory')
rARUStatusAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdSetpoint.setStatus('mandatory')
rARUStatusAruAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruAlarmState.setStatus('mandatory')
rARUStatusAruCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruCommStatus.setStatus('mandatory')
rARUStatusAruTempOvrdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdStatus.setStatus('mandatory')
rARUStatusAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruMasterControl.setStatus('mandatory')
rARUStatusAruTotalAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTotalAirflow.setStatus('mandatory')
rARUFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1), )
if mibBuilder.loadTexts: rARUFanStatusTable.setStatus('mandatory')
rARUFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUFanStatusAruIndex"), (0, "PowerNet-MIB", "rARUFanStatusFanIndex"))
if mibBuilder.loadTexts: rARUFanStatusEntry.setStatus('mandatory')
rARUFanStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusAruIndex.setStatus('mandatory')
rARUFanStatusNominalFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusNominalFanSpeed.setStatus('mandatory')
rARUFanStatusSelectedFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusSelectedFanLevel.setStatus('mandatory')
rARUFanStatusReplacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("khr20", 2), ("khr25", 3), ("khr30", 4), ("khr35", 5), ("khr40", 6), ("khr50", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusReplacementThreshold.setStatus('mandatory')
rARUFanStatusFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanIndex.setStatus('mandatory')
rARUFanStatusFanOperatingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("onOk", 3), ("onDegraded", 4), ("offFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanOperatingStatus.setStatus('mandatory')
rARUFanStatusFanRpmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanRpmSpeed.setStatus('mandatory')
rARUFanStatusFanFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanFlowRate.setStatus('mandatory')
rARUFanStatusFanInServiceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusFanInServiceDate.setStatus('mandatory')
rARUFanStatusFanRunhourCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanRunhourCounter.setStatus('mandatory')
rARUFanStatusFanRunhourReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusFanRunhourReset.setStatus('mandatory')
rARUPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1), )
if mibBuilder.loadTexts: rARUPowerStatusTable.setStatus('mandatory')
rARUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUPowerStatusAruIndex"))
if mibBuilder.loadTexts: rARUPowerStatusEntry.setStatus('mandatory')
rARUPowerStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusAruIndex.setStatus('mandatory')
rARUPowerStatusPrimaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusPrimaryAcPresent.setStatus('mandatory')
rARUPowerStatusAuxiliaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusAuxiliaryAcPresent.setStatus('mandatory')
rARUPowerStatusRedundantAcConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleCord", 1), ("dualCord", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUPowerStatusRedundantAcConfig.setStatus('mandatory')
rARUSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusTableSize.setStatus('mandatory')
rARUSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2), )
if mibBuilder.loadTexts: rARUSensorsStatusTable.setStatus('mandatory')
rARUSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUSensorsStatusAruIndex"), (0, "PowerNet-MIB", "rARUSensorsStatusSensorNumber"))
if mibBuilder.loadTexts: rARUSensorsStatusEntry.setStatus('mandatory')
rARUSensorsStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusAruIndex.setStatus('mandatory')
rARUSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusSensorNumber.setStatus('mandatory')
rARUSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsTemperature.setStatus('mandatory')
rARUSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigTableSize.setStatus('mandatory')
rARUSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4), )
if mibBuilder.loadTexts: rARUSensorsConfigTable.setStatus('mandatory')
rARUSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "rARUSensorsConfigAruIndex"), (0, "PowerNet-MIB", "rARUSensorsConfigSensorNumber"))
if mibBuilder.loadTexts: rARUSensorsConfigEntry.setStatus('mandatory')
rARUSensorsConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigAruIndex.setStatus('mandatory')
rARUSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigSensorNumber.setStatus('mandatory')
rARUSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsName.setStatus('mandatory')
rARUSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsLocation.setStatus('mandatory')
rARUSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempMaxThresh.setStatus('mandatory')
rARUSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempHighThresh.setStatus('mandatory')
rARUSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLowThresh.setStatus('mandatory')
rARUSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempMinThresh.setStatus('mandatory')
rARUSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempThreshHysteresis.setStatus('mandatory')
rARUSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortDecRateThreshValue.setStatus('mandatory')
rARUSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortDecRateThreshTime.setStatus('mandatory')
rARUSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortIncRateThreshValue.setStatus('mandatory')
rARUSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortIncRateThreshTime.setStatus('mandatory')
rARUSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongDecRateThreshValue.setStatus('mandatory')
rARUSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongDecRateThreshTime.setStatus('mandatory')
rARUSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongIncRateThreshValue.setStatus('mandatory')
rARUSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongIncRateThreshTime.setStatus('mandatory')
isxModularDistInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoTableSize.setStatus('mandatory')
isxModularDistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2), )
if mibBuilder.loadTexts: isxModularDistInfoTable.setStatus('mandatory')
isxModularDistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistInfoSegmentIndex"))
if mibBuilder.loadTexts: isxModularDistInfoEntry.setStatus('mandatory')
isxModularDistInfoSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoSegmentIndex.setStatus('mandatory')
isxModularDistInfoMeterModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterModelNumber.setStatus('mandatory')
isxModularDistInfoMeterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterSerialNumber.setStatus('mandatory')
isxModularDistInfoMeterDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterDateOfManufacture.setStatus('mandatory')
isxModularDistInfoMeterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterFirmwareRev.setStatus('mandatory')
isxModularDistInfoMeterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterHardwareRev.setStatus('mandatory')
isxModularDistModuleInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoTableSize.setStatus('mandatory')
isxModularDistModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2), )
if mibBuilder.loadTexts: isxModularDistModuleInfoTable.setStatus('mandatory')
isxModularDistModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleInfoModIndex"))
if mibBuilder.loadTexts: isxModularDistModuleInfoEntry.setStatus('mandatory')
isxModularDistModuleInfoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoModIndex.setStatus('mandatory')
isxModularDistModuleInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoAlarmStatus.setStatus('mandatory')
isxModularDistModuleInfoModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoModelNumber.setStatus('mandatory')
isxModularDistModuleInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoSerialNumber.setStatus('mandatory')
isxModularDistModuleInfoDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoDateOfManufacture.setStatus('mandatory')
isxModularDistModuleInfoNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoNumCables.setStatus('mandatory')
isxModularDistModuleBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerTableSize.setStatus('mandatory')
isxModularDistModuleBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4), )
if mibBuilder.loadTexts: isxModularDistModuleBreakerTable.setStatus('mandatory')
isxModularDistModuleBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleBreakerModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleBreakerPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistModuleBreakerEntry.setStatus('mandatory')
isxModularDistModuleBreakerModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerModIndex.setStatus('mandatory')
isxModularDistModuleBreakerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phaseL1", 1), ("phaseL2", 2), ("phaseL3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPhaseIndex.setStatus('mandatory')
isxModularDistModuleBreakerAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerAlarmStatus.setStatus('mandatory')
isxModularDistModuleBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerRating.setStatus('mandatory')
isxModularDistModuleBreakerPhysicalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPhysicalGroup.setStatus('mandatory')
isxModularDistModuleBreakerCableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerCableNum.setStatus('mandatory')
isxModularDistModuleBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPosition.setStatus('mandatory')
isxModularDistModuleBreakerPositionAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPositionAlarms.setStatus('mandatory')
isxModularDistModuleBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerCurrent.setStatus('mandatory')
isxModularDistModuleBreakerPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPercent.setStatus('mandatory')
isxModularDistModuleBreakerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPower.setStatus('mandatory')
isxModularDistModuleOutputsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputsTableSize.setStatus('mandatory')
isxModularDistModuleOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6), )
if mibBuilder.loadTexts: isxModularDistModuleOutputTable.setStatus('mandatory')
isxModularDistModuleOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleOutputModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleOutputCordIndex"))
if mibBuilder.loadTexts: isxModularDistModuleOutputEntry.setStatus('mandatory')
isxModularDistModuleOutputModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputModIndex.setStatus('mandatory')
isxModularDistModuleOutputNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputNumCables.setStatus('mandatory')
isxModularDistModuleOutputCordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputCordIndex.setStatus('mandatory')
isxModularDistModuleOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputName.setStatus('mandatory')
isxModularDistModuleOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputLocation.setStatus('mandatory')
isxModularDistModuleOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputStatus.setStatus('mandatory')
isxModularDistModuleOutputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmGeneration.setStatus('mandatory')
isxModularDistModuleOutputBreakerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputBreakerMap.setStatus('mandatory')
isxModularDistModuleOutputThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdMin.setStatus('mandatory')
isxModularDistModuleOutputThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdLow.setStatus('mandatory')
isxModularDistModuleOutputThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdHigh.setStatus('mandatory')
isxModularDistModuleOutputThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdMax.setStatus('mandatory')
isxModularDistModuleOutputAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmMinEnable.setStatus('mandatory')
isxModularDistModuleOutputAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmLowEnable.setStatus('mandatory')
isxModularDistModuleOutputAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmHighEnable.setStatus('mandatory')
isxModularDistModuleOutputAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmMaxEnable.setStatus('mandatory')
isxModularDistModuleOutputCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputCableLength.setStatus('mandatory')
isxModularDistModuleOutputConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputConnectorType.setStatus('mandatory')
isxModularDistModuleOutputAvailableVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputAvailableVoltages.setStatus('mandatory')
isxModularDistModuleOutputTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputTotalPower.setStatus('mandatory')
isxModularDistModuleOutputKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhUsage.setStatus('mandatory')
isxModularDistModuleOutputKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhReset.setStatus('mandatory')
isxModularDistModuleOutputKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhResetDate.setStatus('mandatory')
isxModularDistSubFeedInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTableSize.setStatus('mandatory')
isxModularDistSubFeedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2), )
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTable.setStatus('mandatory')
isxModularDistSubFeedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedInfoSubIndex"))
if mibBuilder.loadTexts: isxModularDistSubFeedInfoEntry.setStatus('mandatory')
isxModularDistSubFeedInfoSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoSubIndex.setStatus('mandatory')
isxModularDistSubFeedInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoName.setStatus('mandatory')
isxModularDistSubFeedInfoLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoLocation.setStatus('mandatory')
isxModularDistSubFeedInfoBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerRating.setStatus('mandatory')
isxModularDistSubFeedInfoBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerPosition.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmStatus.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmGeneration.setStatus('mandatory')
isxModularDistSubFeedInfoThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdMin.setStatus('mandatory')
isxModularDistSubFeedInfoThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdLow.setStatus('mandatory')
isxModularDistSubFeedInfoThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdHigh.setStatus('mandatory')
isxModularDistSubFeedInfoThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdMax.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmMinEnable.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmLowEnable.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmHighEnable.setStatus('mandatory')
isxModularDistSubFeedInfoAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmMaxEnable.setStatus('mandatory')
isxModularDistSubFeedInfoBreakerAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerAlarmEnable.setStatus('mandatory')
isxModularDistSubFeedInfoTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTotalPower.setStatus('mandatory')
isxModularDistSubFeedInfoKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhUsage.setStatus('mandatory')
isxModularDistSubFeedInfoKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhReset.setStatus('mandatory')
isxModularDistSubFeedInfoKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhResetDate.setStatus('mandatory')
isxModularDistSubFeedLoadingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingTableSize.setStatus('mandatory')
isxModularDistSubFeedLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4), )
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingTable.setStatus('mandatory')
isxModularDistSubFeedLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedLoadingSubIndex"), (0, "PowerNet-MIB", "isxModularDistSubFeedLoadingPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingEntry.setStatus('mandatory')
isxModularDistSubFeedLoadingSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingSubIndex.setStatus('mandatory')
isxModularDistSubFeedLoadingPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPhaseIndex.setStatus('mandatory')
isxModularDistSubFeedLoadingAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingAlarmStatus.setStatus('mandatory')
isxModularDistSubFeedLoadingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingCurrent.setStatus('mandatory')
isxModularDistSubFeedLoadingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPercent.setStatus('mandatory')
isxModularDistSubFeedLoadingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPower.setStatus('mandatory')
isxModularDistSysOutputVoltageNominalLineToNeutral = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageNominalLineToNeutral.setStatus('mandatory')
isxModularDistSysOutputVoltageNominalLineToLine = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageNominalLineToLine.setStatus('mandatory')
isxModularDistSysOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputNominalFrequency.setStatus('mandatory')
isxModularDistSysOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputFrequency.setStatus('mandatory')
isxModularDistSysOutputVoltageMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageMonitoring.setStatus('mandatory')
isxModularDistSysOutputVoltageThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdMin.setStatus('mandatory')
isxModularDistSysOutputVoltageThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdLow.setStatus('mandatory')
isxModularDistSysOutputVoltageThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdHigh.setStatus('mandatory')
isxModularDistSysOutputVoltageThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdMax.setStatus('mandatory')
isxModularDistSysOutputVoltageAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmMinEnable.setStatus('mandatory')
isxModularDistSysOutputVoltageAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmLowEnable.setStatus('mandatory')
isxModularDistSysOutputVoltageAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmHighEnable.setStatus('mandatory')
isxModularDistSysOutputVoltageAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmMaxEnable.setStatus('mandatory')
isxModularDistSysOutputVoltageFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("freqToleranceOff", 1), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ("freqToleranceNine", 10), ("freqToleranceNotAvailable", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageFrequencyTolerance.setStatus('mandatory')
isxModularDistSysVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15), )
if mibBuilder.loadTexts: isxModularDistSysVoltageTable.setStatus('mandatory')
isxModularDistSysVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysVoltagePhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysVoltageEntry.setStatus('mandatory')
isxModularDistSysVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltagePhaseIndex.setStatus('mandatory')
isxModularDistSysVoltageAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageAlarmStatus.setStatus('mandatory')
isxModularDistSysVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageLtoN.setStatus('mandatory')
isxModularDistSysVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageLtoL.setStatus('mandatory')
isxModularDistSysCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentRating.setStatus('mandatory')
isxModularDistSysCurrentMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentMonitoring.setStatus('mandatory')
isxModularDistSysCurrentThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdMin.setStatus('mandatory')
isxModularDistSysCurrentThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdLow.setStatus('mandatory')
isxModularDistSysCurrentThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdHigh.setStatus('mandatory')
isxModularDistSysCurrentThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdMax.setStatus('mandatory')
isxModularDistSysCurrentAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmMinEnable.setStatus('mandatory')
isxModularDistSysCurrentAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmLowEnable.setStatus('mandatory')
isxModularDistSysCurrentAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmHighEnable.setStatus('mandatory')
isxModularDistSysCurrentAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmMaxEnable.setStatus('mandatory')
isxModularDistSysCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11), )
if mibBuilder.loadTexts: isxModularDistSysCurrentTable.setStatus('mandatory')
isxModularDistSysCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysCurrentPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysCurrentEntry.setStatus('mandatory')
isxModularDistSysCurrentPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentPhaseIndex.setStatus('mandatory')
isxModularDistSysCurrentAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmStatus.setStatus('mandatory')
isxModularDistSysCurrentAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentAmps.setStatus('mandatory')
isxModularDistSysCurrentPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentPercent.setStatus('mandatory')
isxModularDistSysPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerTotal.setStatus('mandatory')
isxModularDistSysPowerKwhUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhUsage.setStatus('mandatory')
isxModularDistSysPowerKwhReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhReset.setStatus('mandatory')
isxModularDistSysPowerKwhResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhResetDate.setStatus('mandatory')
isxModularDistSysPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5), )
if mibBuilder.loadTexts: isxModularDistSysPowerTable.setStatus('mandatory')
isxModularDistSysPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1), ).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysPowerPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysPowerEntry.setStatus('mandatory')
isxModularDistSysPowerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerPhaseIndex.setStatus('mandatory')
isxModularDistSysPowerKw = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKw.setStatus('mandatory')
isxModularDistSysPowerKwhPhaseUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhPhaseUsage.setStatus('mandatory')
isxModularPduIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentModelNumber.setStatus('mandatory')
isxModularPduIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentSerialNumber.setStatus('mandatory')
isxModularPduIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentDateOfManufacture.setStatus('mandatory')
isxModularPduIdentMonitorCardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardSerialNumber.setStatus('mandatory')
isxModularPduIdentMonitorCardHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardHardwareRev.setStatus('mandatory')
isxModularPduIdentMonitorCardFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardFirmwareAppRev.setStatus('mandatory')
isxModularPduIdentMonitorCardFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardFirmwareAppOSRev.setStatus('mandatory')
isxModularPduDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("isoXfmrPresent", 2), ("autoXfmrPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceTransformerPresent.setStatus('mandatory')
isxModularPduDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceServiceType.setStatus('mandatory')
isxModularPduDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceFansPresent.setStatus('mandatory')
isxModularPduDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceNominalMainInputVoltage.setStatus('mandatory')
isxModularPduAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduAlarmStatus.setStatus('mandatory')
isxModularPduTransformerTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduTransformerTempStatus.setStatus('mandatory')
isxModularPduFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduFanStatus.setStatus('mandatory')
uioSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTableSize.setStatus('mandatory')
uioSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2), )
if mibBuilder.loadTexts: uioSensorStatusTable.setStatus('mandatory')
uioSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioSensorStatusPortID"), (0, "PowerNet-MIB", "uioSensorStatusSensorID"))
if mibBuilder.loadTexts: uioSensorStatusEntry.setStatus('mandatory')
uioSensorStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusPortID.setStatus('mandatory')
uioSensorStatusSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorID.setStatus('mandatory')
uioSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorName.setStatus('mandatory')
uioSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorLocation.setStatus('mandatory')
uioSensorStatusTemperatureDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTemperatureDegF.setStatus('mandatory')
uioSensorStatusTemperatureDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTemperatureDegC.setStatus('mandatory')
uioSensorStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusHumidity.setStatus('mandatory')
uioSensorStatusViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusViolationStatus.setStatus('mandatory')
uioSensorStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("sensorStatusNotApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusAlarmStatus.setStatus('mandatory')
uioSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusCommStatus.setStatus('mandatory')
uioSensorConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorConfigTableSize.setStatus('mandatory')
uioSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4), )
if mibBuilder.loadTexts: uioSensorConfigTable.setStatus('mandatory')
uioSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "uioSensorConfigPortID"), (0, "PowerNet-MIB", "uioSensorConfigSensorID"))
if mibBuilder.loadTexts: uioSensorConfigEntry.setStatus('mandatory')
uioSensorConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorConfigPortID.setStatus('mandatory')
uioSensorConfigSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorConfigSensorID.setStatus('mandatory')
uioSensorConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigSensorName.setStatus('mandatory')
uioSensorConfigSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigSensorLocation.setStatus('mandatory')
uioSensorConfigMinTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMinTemperatureThreshold.setStatus('mandatory')
uioSensorConfigLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigLowTemperatureThreshold.setStatus('mandatory')
uioSensorConfigHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigHighTemperatureThreshold.setStatus('mandatory')
uioSensorConfigMaxTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMaxTemperatureThreshold.setStatus('mandatory')
uioSensorConfigTemperatureHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigTemperatureHysteresis.setStatus('mandatory')
uioSensorConfigMinTemperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMinTemperatureEnable.setStatus('mandatory')
uioSensorConfigLowTemperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigLowTemperatureEnable.setStatus('mandatory')
uioSensorConfigHighTemperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigHighTemperatureEnable.setStatus('mandatory')
uioSensorConfigMaxTemperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMaxTemperatureEnable.setStatus('mandatory')
uioSensorConfigMinHumidityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMinHumidityThreshold.setStatus('mandatory')
uioSensorConfigLowHumidityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigLowHumidityThreshold.setStatus('mandatory')
uioSensorConfigHighHumidityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigHighHumidityThreshold.setStatus('mandatory')
uioSensorConfigMaxHumidityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMaxHumidityThreshold.setStatus('mandatory')
uioSensorConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigHumidityHysteresis.setStatus('mandatory')
uioSensorConfigMinHumidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMinHumidityEnable.setStatus('mandatory')
uioSensorConfigLowHumidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigLowHumidityEnable.setStatus('mandatory')
uioSensorConfigHighHumidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigHighHumidityEnable.setStatus('mandatory')
uioSensorConfigMaxHumidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioSensorConfigMaxHumidityEnable.setStatus('mandatory')
uioInputContactStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusTableSize.setStatus('mandatory')
uioInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2), )
if mibBuilder.loadTexts: uioInputContactStatusTable.setStatus('mandatory')
uioInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioInputContactStatusPortID"), (0, "PowerNet-MIB", "uioInputContactStatusContactID"))
if mibBuilder.loadTexts: uioInputContactStatusEntry.setStatus('mandatory')
uioInputContactStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusPortID.setStatus('mandatory')
uioInputContactStatusContactID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactID.setStatus('mandatory')
uioInputContactStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactName.setStatus('mandatory')
uioInputContactStatusContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactLocation.setStatus('mandatory')
uioInputContactStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uioInputClosed", 1), ("uioInputOpen", 2), ("uioInputDisabled", 3), ("inputStateNotApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusCurrentState.setStatus('mandatory')
uioInputContactStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusAlarmStatus.setStatus('mandatory')
uioInputContactStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusCommStatus.setStatus('mandatory')
uioInputContactConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactConfigTableSize.setStatus('mandatory')
uioInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4), )
if mibBuilder.loadTexts: uioInputContactConfigTable.setStatus('mandatory')
uioInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "uioInputContactConfigPortID"), (0, "PowerNet-MIB", "uioInputContactConfigContactID"))
if mibBuilder.loadTexts: uioInputContactConfigEntry.setStatus('mandatory')
uioInputContactConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactConfigPortID.setStatus('mandatory')
uioInputContactConfigContactID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactConfigContactID.setStatus('mandatory')
uioInputContactConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioInputContactConfigContactName.setStatus('mandatory')
uioInputContactConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioInputContactConfigContactLocation.setStatus('mandatory')
uioInputContactConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uioInputContactDisabled", 1), ("uioInputContactEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioInputContactConfigEnable.setStatus('mandatory')
uioInputContactConfigNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uioInputNormallyOpen", 1), ("uioInputNormallyClosed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioInputContactConfigNormalState.setStatus('mandatory')
uioInputContactConfigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uioInputCriticalSeverity", 1), ("uioInputWarningSeverity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioInputContactConfigSeverity.setStatus('mandatory')
uioOutputRelayStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusTableSize.setStatus('mandatory')
uioOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2), )
if mibBuilder.loadTexts: uioOutputRelayStatusTable.setStatus('mandatory')
uioOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1), ).setIndexNames((0, "PowerNet-MIB", "uioOutputRelayStatusPortID"), (0, "PowerNet-MIB", "uioOutputRelayStatusRelayID"))
if mibBuilder.loadTexts: uioOutputRelayStatusEntry.setStatus('mandatory')
uioOutputRelayStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusPortID.setStatus('mandatory')
uioOutputRelayStatusRelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayID.setStatus('mandatory')
uioOutputRelayStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayName.setStatus('mandatory')
uioOutputRelayStatusRelayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayLocation.setStatus('mandatory')
uioOutputRelayStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uioOutputClosed", 1), ("uioOutputOpen", 2), ("outputStateNotApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusCurrentState.setStatus('mandatory')
uioOutputRelayStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusAlarmStatus.setStatus('mandatory')
uioOutputRelayStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusCommStatus.setStatus('mandatory')
uioOutputRelayConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayConfigTableSize.setStatus('mandatory')
uioOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4), )
if mibBuilder.loadTexts: uioOutputRelayConfigTable.setStatus('mandatory')
uioOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1), ).setIndexNames((0, "PowerNet-MIB", "uioOutputRelayConfigPortID"), (0, "PowerNet-MIB", "uioOutputRelayConfigRelayID"))
if mibBuilder.loadTexts: uioOutputRelayConfigEntry.setStatus('mandatory')
uioOutputRelayConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayConfigPortID.setStatus('mandatory')
uioOutputRelayConfigRelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayConfigRelayID.setStatus('mandatory')
uioOutputRelayConfigRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigRelayName.setStatus('mandatory')
uioOutputRelayConfigRelayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigRelayLocation.setStatus('mandatory')
uioOutputRelayConfigNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uioOutputNormallyOpen", 1), ("uioOutputNormallyClosed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigNormalState.setStatus('mandatory')
uioOutputRelayConfigControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uioOutputClose", 1), ("uioOutputOpen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigControlState.setStatus('mandatory')
uioOutputRelayConfigDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigDelay.setStatus('mandatory')
uioOutputRelayConfigHold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 4, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uioOutputRelayConfigHold.setStatus('mandatory')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,1)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,2)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,3)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,4)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,5)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,6)).setObjects(("PowerNet-MIB", "mtrapargsString"))
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,7)).setObjects(("PowerNet-MIB", "mtrapargsString"))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,8)).setObjects(("PowerNet-MIB", "mtrapargsString"))
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,9)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,10)).setObjects(("PowerNet-MIB", "mtrapargsString"))
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,11)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,12)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,13)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,14)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,15)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsDipSwitchChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,16)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,17)).setObjects(("PowerNet-MIB", "mtrapargsString"))
contactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,18)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
contactFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,19)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
hardwareFailureBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,20)).setObjects(("PowerNet-MIB", "mtrapargsString"))
softwareBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,21)).setObjects(("PowerNet-MIB", "mtrapargsString"))
switchedBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,22)).setObjects(("PowerNet-MIB", "mtrapargsString"))
returnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,23)).setObjects(("PowerNet-MIB", "mtrapargsString"))
bypassPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,24)).setObjects(("PowerNet-MIB", "mtrapargsString"))
baseFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,25)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryPackCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,26)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryPackCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,27)).setObjects(("PowerNet-MIB", "mtrapargsString"))
calibrationStart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,28)).setObjects(("PowerNet-MIB", "mtrapargsString"))
restartAgent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,29)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,30)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartAvrReducing = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,31)).setObjects(("PowerNet-MIB", "mtrapargsString"))
codeAuthenticationDone = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,32)).setObjects(("PowerNet-MIB", "mconfigTFTPServerIP"), ("PowerNet-MIB", "newCodeAuthentViaTFTP"))
upsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,33)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartBoostOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,34)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartAvrReducingOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,35)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryReplaced = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,36)).setObjects(("PowerNet-MIB", "mtrapargsString"))
calibrationEnd = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,37)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dischargeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,38)).setObjects(("PowerNet-MIB", "mtrapargsString"))
gracefulShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,39)).setObjects(("PowerNet-MIB", "mtrapargsString"))
outletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,41)).setObjects(("PowerNet-MIB", "sPDUOutletControlIndex"))
outletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,42)).setObjects(("PowerNet-MIB", "sPDUOutletControlIndex"))
outletReboot = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,43)).setObjects(("PowerNet-MIB", "sPDUOutletControlIndex"))
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,44)).setObjects(("PowerNet-MIB", "mtrapargsString"))
configChangeOutlet = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,45)).setObjects(("PowerNet-MIB", "sPDUOutletConfigIndex"))
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,46)).setObjects(("PowerNet-MIB", "mtrapargsString"))
accessViolationHTTP = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,47)).setObjects(("PowerNet-MIB", "mtrapargsString"))
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,48)).setObjects(("PowerNet-MIB", "mtrapargsString"))
badVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,49)).setObjects(("PowerNet-MIB", "mtrapargsString"))
badVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,50)).setObjects(("PowerNet-MIB", "mtrapargsString"))
chargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,51)).setObjects(("PowerNet-MIB", "mtrapargsString"))
chargerFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,52)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,53)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,54)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,55)).setObjects(("PowerNet-MIB", "mtrapargsString"))
smartRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,56)).setObjects(("PowerNet-MIB", "mtrapargsString"))
humidityThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,57)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
humidityThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,58)).setObjects(("PowerNet-MIB", "mtrapargsString"))
temperatureThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,59)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
temperatureThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,60)).setObjects(("PowerNet-MIB", "mtrapargsString"))
humidityThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,61)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
humidityThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,62)).setObjects(("PowerNet-MIB", "mtrapargsString"))
temperatureThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,63)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
temperatureThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,64)).setObjects(("PowerNet-MIB", "mtrapargsString"))
mupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,65)).setObjects(("PowerNet-MIB", "mtrapargsString"))
mupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,66)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,67)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,68)).setObjects(("PowerNet-MIB", "mtrapargsString"))
powerModuleIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,69)).setObjects(("PowerNet-MIB", "mtrapargsString"))
powerModuleDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,70)).setObjects(("PowerNet-MIB", "mtrapargsString"))
intelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,71)).setObjects(("PowerNet-MIB", "mtrapargsString"))
intelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,72)).setObjects(("PowerNet-MIB", "mtrapargsString"))
rintelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,73)).setObjects(("PowerNet-MIB", "mtrapargsString"))
rintelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,74)).setObjects(("PowerNet-MIB", "mtrapargsString"))
extBatteryFrameIncease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,75)).setObjects(("PowerNet-MIB", "mtrapargsString"))
extBatteryFrameDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,76)).setObjects(("PowerNet-MIB", "mtrapargsString"))
abnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,77)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
abnormalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,78)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
deviceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,79)).setObjects(("PowerNet-MIB", "mtrapargsString"))
noBatteries = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,80)).setObjects(("PowerNet-MIB", "mtrapargsString"))
noBatteriesCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,81)).setObjects(("PowerNet-MIB", "mtrapargsString"))
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,82)).setObjects(("PowerNet-MIB", "mtrapargsString"))
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,83)).setObjects(("PowerNet-MIB", "mtrapargsString"))
userModified = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,84)).setObjects(("PowerNet-MIB", "mtrapargsString"))
msvmCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,85)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,86)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,87)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,88)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,89)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"))
msvmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,90)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"))
msvmDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,91)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,92)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "mtrapargsString"))
msvmLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,93)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,94)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,95)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,96)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"))
msvmPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,97)).setObjects(("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
mspCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,98)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"))
mspCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,99)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"))
mspOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,100)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"))
mspOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,101)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"))
mspDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,102)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"))
mspOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,103)).setObjects(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "mtrapargsString"))
rsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,104)).setObjects(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
rsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,105)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
rsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,106)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
rsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,107)).setObjects(("PowerNet-MIB", "mtrapargsString"))
rsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,108)).setObjects(("PowerNet-MIB", "mtrapargsString"))
rsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,109)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,110)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,111)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcPINChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,112)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,113)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,114)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,115)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,116)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcOutputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,117)).setObjects(("PowerNet-MIB", "dm3StatusOutRlyIndex"), ("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"))
dcOutputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,118)).setObjects(("PowerNet-MIB", "dm3StatusOutRlyIndex"), ("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"))
dcInputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,119)).setObjects(("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ("PowerNet-MIB", "mtrapargsString"))
dcInputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,120)).setObjects(("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ("PowerNet-MIB", "mtrapargsString"))
logicPowerSuppliesIncreased = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,121)).setObjects(("PowerNet-MIB", "mtrapargsString"))
logicPowerSuppliesDecreased = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,122)).setObjects(("PowerNet-MIB", "mtrapargsString"))
externalSwitchGearClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,123)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
externalSwitchGearOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,124)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
generalDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,125)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,126)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
atsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,127)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,128)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
atsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,129)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,130)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,131)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,132)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsOverCurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,133)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,134)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsPowerSupplyFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,135)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
dcMainsFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,136)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMainsFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,137)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,138)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcFanFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,139)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierOvertempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,140)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierOvertempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,141)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcCurrentLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,142)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcCurrentLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,143)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,144)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,145)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMultRectFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,146)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcMultRectFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,147)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcBatteryBreakerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,148)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcBatteryBreakerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,149)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierOVPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,150)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcRectifierOVPAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,151)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcLVDImminentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,152)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcLVDImminentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,153)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcFuseCBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,154)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcFuseCBAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,155)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,156)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,157)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,158)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,159)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcHumidityAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,160)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcBBCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,161)).setObjects(("PowerNet-MIB", "mtrapargsString"))
dcBBCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,162)).setObjects(("PowerNet-MIB", "mtrapargsString"))
iemHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,163)).setObjects(("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,164)).setObjects(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,165)).setObjects(("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,166)).setObjects(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemHighHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,167)).setObjects(("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemHighHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,168)).setObjects(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemLowHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,169)).setObjects(("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemLowHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,170)).setObjects(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
iemProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,171)).setObjects(("PowerNet-MIB", "mtrapargsString"))
iemProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,172)).setObjects(("PowerNet-MIB", "mtrapargsString"))
iemContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,173)).setObjects(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"))
iemContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,174)).setObjects(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"))
iemRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,175)).setObjects(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "iemStatusRelayName"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
iemRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,176)).setObjects(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "iemStatusRelayName"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManCommEstab = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,177)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,178)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManKneeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,179)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManKneeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,180)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManChargerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,181)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManChargerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,182)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,183)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManBatteryAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,184)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManEnvironmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,185)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManEnvironmentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,186)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManMaintenanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,187)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmBatManMaintenanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,188)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,189)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,190)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduUtilityLineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,191)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduUtilityLineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,192)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduUtilityLineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,193)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduUtilityLineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,194)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduGroundOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,195)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduGroundOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,196)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,197)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,198)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,199)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,200)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputUndercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,201)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputUndercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,202)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,203)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelInputOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,204)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,205)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelFrequencyOutofRangeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,206)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelNeutralOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,207)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduCircuitPanelNeutralOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,208)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduSystemOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,209)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduOnBatteryMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,210)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,211)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduAtypicalBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,212)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduNoPanelFeedMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,213)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduUpsOperationMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,214)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduForcedBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,215)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduInputTransformerOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,216)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduInputTransformerOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,217)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
pduUPSInputVoltageLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,218)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduUPSInputVoltageRestored = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,219)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,220)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
pduContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,221)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,222)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,223)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,224)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,225)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,226)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUBankPhaseOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,227)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
aruDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,228)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
rmPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,229)).setObjects(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"))
emsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,230)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,231)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,232)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
emsProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,233)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
emsSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,234)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"))
emsSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,235)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"))
emsSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,236)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"))
emsSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,237)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"))
emsBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,238)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,239)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,240)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,241)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,242)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,243)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,244)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,245)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,246)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,247)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,248)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,249)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,250)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,251)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"))
emsDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,252)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
envHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,253)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,254)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,255)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,256)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,257)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,258)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,259)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,260)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,266)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,267)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,268)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,269)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,270)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,271)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"))
rPDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,272)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,273)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,274)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,275)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,276)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,277)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "mtrapargsString"))
rPDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,278)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,279)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,280)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,281)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "mtrapargsString"))
rPDUPhaseConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,282)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDULoadPhaseConfigIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,283)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "mtrapargsString"))
aruAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,284)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,285)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruFanFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,286)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruFanFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,287)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruSmokeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,288)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruSmokeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,289)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruHighTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,290)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruHighTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,291)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruExhaustTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,292)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruExhaustTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,293)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
envAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,294)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,295)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
emsAlinkPowerOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,296)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsAlinkPowerOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,297)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
upsOutletGroupTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,298)).setObjects(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"))
upsOutletGroupTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,299)).setObjects(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"))
smwCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,300)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
smwCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,301)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
smwWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,302)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
smwWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,303)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
smwInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,304)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
smwInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,305)).setObjects(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"))
airCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,306)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
airCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,307)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
airWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,308)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
airWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,309)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
airInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,310)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
airInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,311)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,312)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,313)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,314)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,315)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBypassVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,316)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBypassVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,317)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBypassVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,318)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBypassVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,319)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,320)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,321)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,322)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,323)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,324)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,325)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,326)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,327)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,328)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,329)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemGroundCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,330)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemGroundCurrentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,331)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,332)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,333)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputNeutralCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,334)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUOutputNeutralCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,335)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,336)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,337)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUTransformerTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,338)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUTransformerTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,339)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,340)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,341)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,342)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,343)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,344)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
emsHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,345)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
emsHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,346)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsString"))
ceSevereCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,347)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
ceSevereConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,348)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
ceWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,349)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
ceWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,350)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
ceInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,351)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
ceInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,352)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsInternalOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,353)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInternalOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,354)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsMpuReset = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,355)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOutputSwitchClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,356)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOutputSwitchOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,357)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsCalibrationStackChanged = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,358)).setObjects(("PowerNet-MIB", "mtrapargsString"))
envMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,359)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,360)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,361)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,362)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,363)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,364)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,365)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,366)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,367)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,368)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,369)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,370)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,371)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,372)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,373)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
envLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,374)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"))
bmsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,375)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,376)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,377)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,378)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,379)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bmsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,380)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,381)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,382)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,383)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,384)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,385)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,386)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,387)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,388)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,389)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,390)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,391)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,392)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,393)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,394)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGenCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,395)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGenCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,396)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSNeutralPosition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,397)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSSwitchTransferEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,398)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSInternalATSFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,399)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSInternalATSFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,400)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSEngineStartAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,401)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSEngineStopAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,402)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSStartFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,403)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSStopFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,404)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSNotInAutomaticMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,405)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSNotInAutomaticModeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,406)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSEpoTripped = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,407)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSEpoReset = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,408)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,409)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,410)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,411)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,412)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,413)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,414)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,415)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,416)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xATSRemoteStartContactMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,417)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSRemoteStartContactMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,418)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDoorOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,419)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDoorOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,420)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDCBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,421)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSDCBackupAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,422)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,423)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,424)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,425)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,426)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,427)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,428)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,429)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,430)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,431)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,432)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowOilLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,433)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowOilLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,434)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,435)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,436)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,437)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,438)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorEStop = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,439)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorEStopCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,440)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,441)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,442)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,443)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,444)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorControlSwitchNotAuto = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,445)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorControlSwitchNotAutoCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,446)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,447)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,448)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,449)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,450)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,451)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,452)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,453)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,454)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,455)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorHighACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,456)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOverspeed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,457)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOverspeedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,458)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorEngineCold = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,459)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorEngineColdCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,460)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOutputBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,461)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorOutputBreakerOpenCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,462)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,463)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,464)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,465)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,466)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,467)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,468)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,469)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorVeryLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,470)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorServiceDueAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,471)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorServiceDueAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,472)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,473)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorShutdownCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,474)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorBatteryCharger = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,475)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorBatteryChargerCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,476)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,477)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorGenericEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,478)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,479)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,480)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemStateAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,481)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,482)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,483)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUFuseBlownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,484)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUFuseBlownAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,485)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBreakerPositionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,486)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBreakerPositionAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,487)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBreakerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,488)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,489)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,490)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemInMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,491)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xPDUSystemInUPSOperationalMode = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,492)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorFuelTankRuptureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,493)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorFuelTankRuptureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,494)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorGroundFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,495)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSGeneratorGroundFaultAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,496)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputLoadPoweredByGeneratorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,497)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSOutputLoadPoweredByGeneratorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,498)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xAPCControllerFirmwareUpdateTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,499)).setObjects(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xAPCControllerFirmwareUpdateTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,500)).setObjects(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
xAPCControllerFirmwareUpdateTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,501)).setObjects(("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
upsPfcInputRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,502)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsPfcInputRelayFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,503)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInverterOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,504)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInverterOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,505)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,506)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,507)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsEepromFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,508)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsEepromFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,509)).setObjects(("PowerNet-MIB", "mtrapargsString"))
aruFanRuntimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,510)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
aruFanRuntimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,511)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
aruFanPoorPerformanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,512)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
aruFanPoorPerformanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,513)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
aruRedundantPowerLostAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,514)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
aruRedundantPowerLostAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,515)).setObjects(("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"))
apcDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,516)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,517)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,518)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,519)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,520)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,521)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,522)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,523)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,524)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,525)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,526)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,527)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,528)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,529)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,530)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,531)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,532)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,533)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,534)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,535)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,536)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,537)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,538)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,539)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,540)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,541)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcEnvMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,542)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,543)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,544)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,545)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,546)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,547)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,548)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,549)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,550)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,551)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,552)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcCriticalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,553)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcCriticalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,554)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcWarningDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,555)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcWarningDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,556)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcInformationalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,557)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcInformationalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,558)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,559)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,560)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,561)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,562)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,563)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,564)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,565)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcAnalogInputMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,566)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcDeviceClearLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,567)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
apcDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,568)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,569)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
apcUnregisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,570)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"))
apcRegisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,571)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"))
apcRegisteredUserConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,572)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,573)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorLocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,574)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
apcHandleOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,575)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcHandleClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,576)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,577)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,578)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcKeyOverrideUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,580)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcKeyOverrideLocked = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,581)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcForcedEntry = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,582)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcForcedEntryCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,583)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcRelockTimeout = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,584)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcRelockTimeoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,585)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorSenseDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,586)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorSenseConnected = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,587)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,588)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorEstablishedComms = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,589)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcRegisteredUserAccessChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,590)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"))
apcUnregisteredUserStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,591)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString"))
apcDeviceClearUserConfigs = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,592)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString"))
upsBatteryTempSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,600)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryTempSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,601)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatterySoftBusStartFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,602)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatterySoftBusStartFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,603)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,604)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcOutputShortCircuitCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,605)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcOutputRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,606)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcOutputRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,607)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsPfcFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,608)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsPfcFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,609)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcDcBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,610)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcDcBusOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,611)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,612)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,613)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcAdConverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,614)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcAdConverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,615)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcLogicPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,616)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcLogicPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,617)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcTransformerDCImbalanceFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,618)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcTransformerDCImbalanceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,619)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBackfeedRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,620)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBackfeedRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,621)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBypassRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,622)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBypassRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,623)).setObjects(("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentMinAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,626)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentMinAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,627)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentMaxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,628)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
xPDUBranchCurrentMaxAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,629)).setObjects(("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,630)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,631)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,632)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,633)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,634)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
rPDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,635)).setObjects(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUIdentName"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"))
apcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,636)).setObjects(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
baseFanFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,637)).setObjects(("PowerNet-MIB", "mtrapargsString"))
atsLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,638)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,639)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,640)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,641)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,642)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,643)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,644)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,645)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,646)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSUnderVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,647)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSOverFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,648)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSOverFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,649)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSUnderFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,650)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsRMSUnderFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,651)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularDistributionCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,652)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularDistributionCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,653)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularDistributionModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,654)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularDistributionModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,655)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,656)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,657)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,658)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,659)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,660)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,661)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,662)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,663)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,664)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,665)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,666)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,667)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,668)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,669)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,670)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,671)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,672)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,673)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,674)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularSubfeedMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,675)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,676)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,677)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,678)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,679)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,680)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,681)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,682)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTotalOutputCurrentMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,683)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,684)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,685)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,686)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,687)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,688)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,689)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,690)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputVoltageMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,691)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorClosedImproperly = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,692)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcDoorClosedImproperlyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,693)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcUserScheduleViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,694)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
apcUserScheduleViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,695)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputFrequencyThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,696)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxModularOutputFrequencyViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,697)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
atsSourceStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,698)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsSourceStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,699)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsHardwareStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,700)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsHardwareStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,701)).setObjects(("PowerNet-MIB", "atsIdentSerialNumber"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
atsControllerRestart = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,702)).setObjects(("PowerNet-MIB", "mtrapargsString"))
inputWarningError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,703)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
inputOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,704)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bypassWarningError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,705)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
bypassOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,706)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
communicationWarningError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,707)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
communicationOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,708)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
powerModuleSevereError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,709)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
powerModuleOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,710)).setObjects(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
outputVoltageWaveformError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,711)).setObjects(("PowerNet-MIB", "mtrapargsString"))
outputVoltageWaveformOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,712)).setObjects(("PowerNet-MIB", "mtrapargsString"))
bypassStaticSwitchOverload = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,713)).setObjects(("PowerNet-MIB", "mtrapargsString"))
noOverloadOnBypassStaticSwitch = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,714)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryVoltageCollapse = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,715)).setObjects(("PowerNet-MIB", "mtrapargsString"))
batteryVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,716)).setObjects(("PowerNet-MIB", "mtrapargsString"))
overloadOnInstallation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,717)).setObjects(("PowerNet-MIB", "mtrapargsString"))
noOverloadOnInstallation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,718)).setObjects(("PowerNet-MIB", "mtrapargsString"))
bypassStaticSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,719)).setObjects(("PowerNet-MIB", "mtrapargsString"))
bypassStaticSwitchOK = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,720)).setObjects(("PowerNet-MIB", "mtrapargsString"))
forcedBypassSwitchActivated = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,721)).setObjects(("PowerNet-MIB", "mtrapargsString"))
forcedBypassSwitchReleased = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,722)).setObjects(("PowerNet-MIB", "mtrapargsString"))
epoActivated = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,723)).setObjects(("PowerNet-MIB", "mtrapargsString"))
xATSS1BadPhaseRotation = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,724)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSS1BadPhaseRotationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,725)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
xATSS1BadPhaseBalance = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,726)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
xATSS1BadPhaseBalanceCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,727)).setObjects(("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTransformerOverheating = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,728)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularTransformerOverheatingCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,729)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
apcInternalCommunicationFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,730)).setObjects(("PowerNet-MIB", "mtrapargsString"))
apcInternalCommunicationFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,731)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOutletGroupCommand = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,732)).setObjects(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"))
onbatterycommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,733)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,734)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,735)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,736)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,737)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,738)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
upsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,739)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"))
isxcInformationalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,740)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcInformationalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,741)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,742)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcWarningAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,743)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,744)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcErrorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,745)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,746)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcCriticalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,747)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,748)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
isxcFailureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,749)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsString"))
rpduCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,750)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
rpduCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,751)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
rpduWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,752)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
rpduWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,753)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
rpduInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,754)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
rpduInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,755)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,756)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
isxModularCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,757)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString"))
upsFirmwareUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,758)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsFirmwareUpdateFinished = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,759)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsFirmwareUpdateSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,760)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsFirmwareUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,761)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsHasNoValidFirmware = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,762)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsHasNoValidFirmwareCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,763)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsLocalDisplayButtonFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,767)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsLocalDisplayButtonFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,768)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsNeedsFactorySetupFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,769)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsNeedsFactorySetupFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,770)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,771)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsEPOActiveCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,772)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsFirmwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,773)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsFirmwareMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,774)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOscillatorFailed = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,775)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOscillatorFailedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,776)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOnBatteryDueToFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,777)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOnBatteryDueToFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,778)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsCriticalEventActive = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,779)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsCriticalEventResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,780)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsNetworkComsLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,781)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsNetworkComsLostResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,782)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsNMCComsLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,783)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsNMCComsLostResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,784)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsTest = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,785)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcnsUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,786)).setObjects(("PowerNet-MIB", "mtrapargsString"))
temporaryBypass = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,787)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeCriticalEventActive = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,790)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeCriticalEventResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,791)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeComsLost = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,792)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeComsLostResolved = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,793)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeTest = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,794)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pcbeUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,795)).setObjects(("PowerNet-MIB", "mtrapargsString"))
pmmCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,796)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
pmmCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,797)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
pmmWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,798)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
pmmWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,799)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
pmmInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,800)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
pmmInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,801)).setObjects(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"))
upsInputContactOutputRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,802)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInputContactOutputRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,803)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsAirFilterWarning = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,804)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsAirFilterWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,805)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryPackIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,806)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsBatteryPackIncompatibleCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,807)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInputContactAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,808)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsInputContactAbnormalCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,809)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOutputRelayAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,810)).setObjects(("PowerNet-MIB", "mtrapargsString"))
upsOutputRelayAbnormalCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,811)).setObjects(("PowerNet-MIB", "mtrapargsString"))
ePDUCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,812)).setObjects(("PowerNet-MIB", "mtrapargsString"))
ePDUCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,813)).setObjects(("PowerNet-MIB", "mtrapargsString"))
ePDUWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,814)).setObjects(("PowerNet-MIB", "mtrapargsString"))
ePDUWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318) + (0,815)).setObjects(("PowerNet-MIB", "mtrapargsString"))
mibBuilder.exportSymbols("PowerNet-MIB", airIRAlarmDescription=airIRAlarmDescription, mtrapargsOctetString07=mtrapargsOctetString07, pcnsBypassManualEnabledCommandFileDelay=pcnsBypassManualEnabledCommandFileDelay, masterSwitchVM=masterSwitchVM, sPDUOutletConfigMSPannunTable=sPDUOutletConfigMSPannunTable, upsOutputRelayStatusTable=upsOutputRelayStatusTable, rPDULoadDevMaxBankLoad=rPDULoadDevMaxBankLoad, airIRRCUnitRunHoursFan3=airIRRCUnitRunHoursFan3, sPDUMasterControlMSPTable=sPDUMasterControlMSPTable, upsInputContactAbnormalCleared=upsInputContactAbnormalCleared, galaxy5500UPS20KVA=galaxy5500UPS20KVA, emsVibrationSensorStatusSensorName=emsVibrationSensorStatusSensorName, rPDU2OutletSwitchedStatusModule=rPDU2OutletSwitchedStatusModule, dm3StatusFuses=dm3StatusFuses, coolingUnitConfigurationAnalogDescription=coolingUnitConfigurationAnalogDescription, airIRmPmSupplyAirTemperatureTooLow=airIRmPmSupplyAirTemperatureTooLow, emsOutputRelayConfigEntry=emsOutputRelayConfigEntry, rARUFanStatusFanRpmSpeed=rARUFanStatusFanRpmSpeed, upsAdvInputStatisticsEntry=upsAdvInputStatisticsEntry, xPDUInputContactNormalState=xPDUInputContactNormalState, xATSGeneratorEStopCleared=xATSGeneratorEStopCleared, sPDUIdentMSPEntry=sPDUIdentMSPEntry, airIRmPmRemoteUPS=airIRmPmRemoteUPS, iemLowHumidThresholdViolationCleared=iemLowHumidThresholdViolationCleared, airIRmPmMaxLimitSupplyAirTemperatureF=airIRmPmMaxLimitSupplyAirTemperatureF, mtrapargsString06=mtrapargsString06, airFMGroupLoadShareReheatRequests=airFMGroupLoadShareReheatRequests, symmetraPX=symmetraPX, pcnsShutdownCommandFileDelay=pcnsShutdownCommandFileDelay, rPDU2OutletSwitchedStatusExternalLink=rPDU2OutletSwitchedStatusExternalLink, envLTIncTempRateViolation=envLTIncTempRateViolation, apcEnvSTIncTempRateViolation=apcEnvSTIncTempRateViolation, dcmim2StatusLVDState=dcmim2StatusLVDState, memSensorsVoltage=memSensorsVoltage, airFMSysAlarmMapExpMod1OutputIndex=airFMSysAlarmMapExpMod1OutputIndex, emsFluidSensorStatusTableSize=emsFluidSensorStatusTableSize, upsEbmModeSetting=upsEbmModeSetting, airIRmPmReheat1Failure=airIRmPmReheat1Failure, subfeedBreakerPresent=subfeedBreakerPresent, pcnsContactFault4ShutdownDelay=pcnsContactFault4ShutdownDelay, upsDiagSubSysDCCircuitBreakerIndex=upsDiagSubSysDCCircuitBreakerIndex, rPDU2OutletSwitchedControlTable=rPDU2OutletSwitchedControlTable, apcEnvHighTempThresholdViolation=apcEnvHighTempThresholdViolation, memFluidSensorConfigEntry=memFluidSensorConfigEntry, airIRG3GroupSetpointsCoolSetpointUS=airIRG3GroupSetpointsCoolSetpointUS, pcnsBypassEnabledCommandFilePath=pcnsBypassEnabledCommandFilePath, powerNetSoftwareSystemDescription=powerNetSoftwareSystemDescription, upsParallelSysUpsSerialNumber=upsParallelSysUpsSerialNumber, upsDiagUnitControllerHardwareRev=upsDiagUnitControllerHardwareRev, rARUSensorsTempLongDecRateThreshValue=rARUSensorsTempLongDecRateThreshValue, xATSGeneratorIdentMaxPowerRating=xATSGeneratorIdentMaxPowerRating, pmmOutputOverActivePowerThreshold=pmmOutputOverActivePowerThreshold, airIRG2RDT2RunHoursEvapFanHours=airIRG2RDT2RunHoursEvapFanHours, pmmInputMeterNum=pmmInputMeterNum, airIRRP100UnitStatusCompressorDriveDCLinkVoltage=airIRRP100UnitStatusCompressorDriveDCLinkVoltage, upsAdvInputBypassTotalActivePower=upsAdvInputBypassTotalActivePower, rPDU2IdentHardwareRev=rPDU2IdentHardwareRev, xATSGeneratorServiceTotalkWhMaintenance=xATSGeneratorServiceTotalkWhMaintenance, chargerOutputVauxVoltage=chargerOutputVauxVoltage, upsAdvBatteryFrameCurrent=upsAdvBatteryFrameCurrent, airIRmPmUnitCondensationPressure1=airIRmPmUnitCondensationPressure1, airIRSC=airIRSC, airFMGroupSysPresentRole=airFMGroupSysPresentRole, xATSGeneratorHighCoolantTempAlarmCleared=xATSGeneratorHighCoolantTempAlarmCleared, airPASupplyTempF=airPASupplyTempF, airFMSysAlarmMapExpMod1AirBlckIntOpen=airFMSysAlarmMapExpMod1AirBlckIntOpen, xATSSwitchSettingsAllowClosedTransfer=xATSSwitchSettingsAllowClosedTransfer, xATSGeneratorOutputPhaseIndex=xATSGeneratorOutputPhaseIndex, sPDUIdentMSPTableSize=sPDUIdentMSPTableSize, pcnsHumidityOutOfRangeProbe1ShutdownDelay=pcnsHumidityOutOfRangeProbe1ShutdownDelay, rPDU2SensorTempHumidityStatusTable=rPDU2SensorTempHumidityStatusTable, sPDUIdentVMEntry=sPDUIdentVMEntry, emsSmokeSensorStatusTableSize=emsSmokeSensorStatusTableSize, upsDiagSubSysPowerFactorCorrectionStatus=upsDiagSubSysPowerFactorCorrectionStatus, airIRSCGroupStatusMinReturnAirTempMetric=airIRSCGroupStatusMinReturnAirTempMetric, airIRRP500UnitStatusMaximumRackInletTempUS=airIRRP500UnitStatusMaximumRackInletTempUS, upsAdvConfigBypassPhaseLockRequired=upsAdvConfigBypassPhaseLockRequired, galaxyVMUPS160kVA=galaxyVMUPS160kVA, ePDUOutlet=ePDUOutlet, atsInputMaxCurrent=atsInputMaxCurrent, airFMSysCoolSetpointC=airFMSysCoolSetpointC, airIRG2RDT2RunHoursUnit=airIRG2RDT2RunHoursUnit, upsDiagBatteryFrameTableIndex=upsDiagBatteryFrameTableIndex, emsOutletStatusOutletNormalState=emsOutletStatusOutletNormalState, airIRmPmEEV1TemperatureSensorError=airIRmPmEEV1TemperatureSensorError, sPDUMasterControlVM=sPDUMasterControlVM, airFMModCoolTable=airFMModCoolTable, battManString2BatteryInterTierOhmicValue=battManString2BatteryInterTierOhmicValue, airIRmPmEheating3=airIRmPmEheating3, upsAdvConfigSensitivity=upsAdvConfigSensitivity, dm3StatusInRlyName=dm3StatusInRlyName, airIRmPmCmp2StartTempWinterK=airIRmPmCmp2StartTempWinterK, rPDUOutletConfigMonitoredTable=rPDUOutletConfigMonitoredTable, iemConfigProbeLocation=iemConfigProbeLocation, upsDiagSubSysFrameTableSize=upsDiagSubSysFrameTableSize, products=products, pcnsContactFault1EnableCommandFile=pcnsContactFault1EnableCommandFile, airFMSysCtrlTempC=airFMSysCtrlTempC, upsHighPrecBatteryPackCartridgeStatus=upsHighPrecBatteryPackCartridgeStatus, xPDUSystemOutputFrequency=xPDUSystemOutputFrequency, airIRmPmGeneralError=airIRmPmGeneralError, airIRSCGroupStatusMaxRackInletTempUS=airIRSCGroupStatusMaxRackInletTempUS, ePDUSensorConfigIndex=ePDUSensorConfigIndex, coolingUnitExtendedDiscreteEntry=coolingUnitExtendedDiscreteEntry, xPDUOutputVoltageLowAlarm=xPDUOutputVoltageLowAlarm, pcnsNmcOutlet=pcnsNmcOutlet, airIRG3RDUStatusDeviceIndex=airIRG3RDUStatusDeviceIndex, apCPSPw1=apCPSPw1, upsEnergyEfficiencyStatsTimeInECOnversion=upsEnergyEfficiencyStatsTimeInECOnversion, iemStatusProbeLocation=iemStatusProbeLocation, xPDUSystemOutputPhaseIndex=xPDUSystemOutputPhaseIndex, airFMStatus=airFMStatus, sPDUIdentHardwareRevVM=sPDUIdentHardwareRevVM, rPDULoadDevMaxOutletTable=rPDULoadDevMaxOutletTable, airFMSysReheatPIDMethod=airFMSysReheatPIDMethod, pcnsCommunicationEstablishedDesc=pcnsCommunicationEstablishedDesc, emsSensorStatusSensorAlarmDelay=emsSensorStatusSensorAlarmDelay, xATSIdentHardwareRev=xATSIdentHardwareRev, airIRmPmSensor11Defect=airIRmPmSensor11Defect, dm3ConfigRect1ofNAlarm=dm3ConfigRect1ofNAlarm, rPDU2OutletMeteredConfigExternalLink=rPDU2OutletMeteredConfigExternalLink, rARUConfigAruMasterControl=rARUConfigAruMasterControl, pcbeCriticalCause=pcbeCriticalCause, airIRRP100UnitStatusHumidifyOutput=airIRRP100UnitStatusHumidifyOutput, cpsAP930xAdm=cpsAP930xAdm, sPDUIdentSerialNumber=sPDUIdentSerialNumber, airFMModServIntBlwrCtrl1=airFMModServIntBlwrCtrl1, airIRG3CMThresholdsTable=airIRG3CMThresholdsTable, sPDUOutletConfigMSPmupsZone4=sPDUOutletConfigMSPmupsZone4, emsSmokeSensorConfigEntry=emsSmokeSensorConfigEntry, airIRRP100GroupConfigFullRPBackups=airIRRP100GroupConfigFullRPBackups, airIRG2GroupSetptsCoolSetpointMetric=airIRG2GroupSetptsCoolSetpointMetric, airFMSysAlarmMapOutput8=airFMSysAlarmMapOutput8, pcnsShutdownCommandFileDuration=pcnsShutdownCommandFileDuration, airIRmPmCmp1ManOperationActive=airIRmPmCmp1ManOperationActive, sPDUMasterStatusMSPTableSize=sPDUMasterStatusMSPTableSize, memOutputStatusOutputName=memOutputStatusOutputName, upsAdvBatteryCondition=upsAdvBatteryCondition, wirelessSensorStatusMinTempThresh=wirelessSensorStatusMinTempThresh, emStatusProbeHighTempViolation=emStatusProbeHighTempViolation, airIRmPmEheating4Type=airIRmPmEheating4Type, upsBatteryCabinetNumberOfVerticalPositions=upsBatteryCabinetNumberOfVerticalPositions, ePDUPhaseStatusCurrent=ePDUPhaseStatusCurrent, upsBatteryCabBlockHorizontalPosition=upsBatteryCabBlockHorizontalPosition, rsConfigChange=rsConfigChange, rPDU2PhaseConfigOverloadCurrentThreshold=rPDU2PhaseConfigOverloadCurrentThreshold, airIRmPmLocalStop=airIRmPmLocalStop, memSensorsStatusModuleNumber=memSensorsStatusModuleNumber, airIRmPmSensor17Failure=airIRmPmSensor17Failure, powerFrameIndex=powerFrameIndex, upsDiagSubSysBattMonitorStatus=upsDiagSubSysBattMonitorStatus, sPDUIdentHardwareRev=sPDUIdentHardwareRev, airIRmPmEEV2TemperatureSensorError=airIRmPmEEV2TemperatureSensorError, upsAdvOutputRedundancy=upsAdvOutputRedundancy, upsBatterySoftBusStartFaultCleared=upsBatterySoftBusStartFaultCleared, xPDUOutputRelayTable=xPDUOutputRelayTable, wirelessSensorStatus=wirelessSensorStatus, isx6ModuleRackPdu=isx6ModuleRackPdu, dcmim2IdentSysFWVersion=dcmim2IdentSysFWVersion, atsCalibrationNumOutputPhases=atsCalibrationNumOutputPhases, iemStatusProbeHighHumidViolation=iemStatusProbeHighHumidViolation, airIRmPmWaterTemperatureTooHigh=airIRmPmWaterTemperatureTooHigh, mfiletransferControl=mfiletransferControl, pcnsNetCommunicationLostShutdownDelay=pcnsNetCommunicationLostShutdownDelay, emsProbeConfigProbeIndex=emsProbeConfigProbeIndex, pmmOutputPowerFactor=pmmOutputPowerFactor, airFMGroupLoadShareDehumRequests=airFMGroupLoadShareDehumRequests, airIREventCode=airIREventCode, upsDiagSubSysUsrSuppBattBreakerStatus=upsDiagSubSysUsrSuppBattBreakerStatus, pcnsBypassContactorOkCommandFilePath=pcnsBypassContactorOkCommandFilePath, upsBasicControlConserveBattery=upsBasicControlConserveBattery, rPDU2DeviceStatusPower=rPDU2DeviceStatusPower, upsParallelOutputApparentPowerTable=upsParallelOutputApparentPowerTable, isxModularDistSysVoltagePhaseIndex=isxModularDistSysVoltagePhaseIndex, airIRG3RDUSetpointsDeviceIndex=airIRG3RDUSetpointsDeviceIndex, upsAirFilterWarningCleared=upsAirFilterWarningCleared, battManString1BatteryChemLowVoltageAlarm=battManString1BatteryChemLowVoltageAlarm, sideCarFrameIndex=sideCarFrameIndex, upsInputContactConfigTable=upsInputContactConfigTable, emsHardwareStateAbnormal=emsHardwareStateAbnormal, chargerOutputLoad=chargerOutputLoad, rPDU2DevicePropertiesTable=rPDU2DevicePropertiesTable, rPDU2OutletMeteredPropertiesBank=rPDU2OutletMeteredPropertiesBank, upsDiagSubSysNetworkComCardEntry=upsDiagSubSysNetworkComCardEntry, airIRmPmEheating3StartTemperature=airIRmPmEheating3StartTemperature, description=description, upsOutletGroupStatusGroupState=upsOutletGroupStatusGroupState, pmmInputActiveEnergyReceived=pmmInputActiveEnergyReceived, xATSSwitchStatusAutomaticOperationSwitch=xATSSwitchStatusAutomaticOperationSwitch, temperatureThresholdViolation2=temperatureThresholdViolation2, rPDUNearOverloadCleared=rPDUNearOverloadCleared, upsParallelOutputApparentPowerTableIndex=upsParallelOutputApparentPowerTableIndex, xATSIdent=xATSIdent, airIRSCGroupSetptsCoolSetpointUS=airIRSCGroupSetptsCoolSetpointUS, xATSTestingScheduleFrequency=xATSTestingScheduleFrequency, dm3ConfigRectConfigAlarm=dm3ConfigRectConfigAlarm, emConfigProbeHighHumidEnable=emConfigProbeHighHumidEnable, airFMModRHBlwr2Reset=airFMModRHBlwr2Reset, airIRmPmFan2Alarm=airIRmPmFan2Alarm, airIRmPmPCStop=airIRmPmPCStop, pcnsBatteryDischarged=pcnsBatteryDischarged, upsBatteryCabinetCurrentPolarity2=upsBatteryCabinetCurrentPolarity2, dm3ConfigSysDescriptionTable=dm3ConfigSysDescriptionTable, upsDiagPMEntry=upsDiagPMEntry, airIRRP100UnitIdentName=airIRRP100UnitIdentName, airIRmPmEheating4ManOpRunning=airIRmPmEheating4ManOpRunning, memOutputConfigEntry=memOutputConfigEntry, pcnsMinLoadCapabilityLostCommandFilePath=pcnsMinLoadCapabilityLostCommandFilePath, airIRmPmPump3StartTemperatureF=airIRmPmPump3StartTemperatureF, memInputAnalogCalibrationPoint3Value=memInputAnalogCalibrationPoint3Value, iemConfigRelayName=iemConfigRelayName, uioInputContactStatusCommStatus=uioInputContactStatusCommStatus, pcnspcnsRunTimeBelowThresholdEnableLogging=pcnspcnsRunTimeBelowThresholdEnableLogging, emsFluidSensorStatusSensorName=emsFluidSensorStatusSensorName, xATSGeneratorServiceDueAlarm=xATSGeneratorServiceDueAlarm, aruFanRuntimeAlarm=aruFanRuntimeAlarm, sPDUOutletStatusVMCommandPending=sPDUOutletStatusVMCommandPending, airIRmPmDrycooler1Runtime=airIRmPmDrycooler1Runtime, pcnsBypassEnabledEnableLogging=pcnsBypassEnabledEnableLogging, sPDUOutletConfigTable=sPDUOutletConfigTable, emsOutletConfigOutletIndex=emsOutletConfigOutletIndex, rPDU2OutletMeteredStatusPeakPower=rPDU2OutletMeteredStatusPeakPower, apc=apc, airIRG3GroupStatusMinRackInletTempMetric=airIRG3GroupStatusMinRackInletTempMetric, upsAdvBatteryChargerStatus=upsAdvBatteryChargerStatus, coolingUnitStatusAnalogValue=coolingUnitStatusAnalogValue, memBeaconConfigLocation=memBeaconConfigLocation, airFMStatusModuleReturnHum=airFMStatusModuleReturnHum, airIRRCGroupStatusActiveFlowControlStatus=airIRRCGroupStatusActiveFlowControlStatus, xATSGeneratorLowFuelLevelAlarm=xATSGeneratorLowFuelLevelAlarm, xATSGeneratorServiceDueAlarmCleared=xATSGeneratorServiceDueAlarmCleared, memInputsStatusInputLocation=memInputsStatusInputLocation, airIRG3IdentEntry=airIRG3IdentEntry, airIRRP100UnitConfigInputNormalState=airIRRP100UnitConfigInputNormalState, airFMModStatusTableSize=airFMModStatusTableSize, pmmInputCurrentLowAlarm=pmmInputCurrentLowAlarm, upsOpStatsTimeSinceReset=upsOpStatsTimeSinceReset, upsDiagSubSysExternalPowerFrameBoardStatus=upsDiagSubSysExternalPowerFrameBoardStatus, emConfigProbesTable=emConfigProbesTable, airIRG3RDUStatusCondenserOutletPressureMetric=airIRG3RDUStatusCondenserOutletPressureMetric, rPDU2DeviceStatusPeakPowerTimestamp=rPDU2DeviceStatusPeakPowerTimestamp, rPDU2SensorTempHumidityStatusNumber=rPDU2SensorTempHumidityStatusNumber, coolingUnitExtendedAnalogValue=coolingUnitExtendedAnalogValue, userDeleted=userDeleted, smartAvrReducingOff=smartAvrReducingOff, upsDiagTransformerStatus=upsDiagTransformerStatus, emConfigProbesNumProbes=emConfigProbesNumProbes, airIRmPmFan1Runtime=airIRmPmFan1Runtime, airIRmPmPWWHeatingLinearRange=airIRmPmPWWHeatingLinearRange, airIRmPmPWWHeatingManOpValue=airIRmPmPWWHeatingManOpValue, coolingUnitConfigurationAnalogScale=coolingUnitConfigurationAnalogScale, isxModularMaxCurrentThresholdViolation=isxModularMaxCurrentThresholdViolation, airIRG3CMServiceIntervalsAirFilterInterval=airIRG3CMServiceIntervalsAirFilterInterval, upsPhaseInputTable=upsPhaseInputTable)
mibBuilder.exportSymbols("PowerNet-MIB", battManStringDischarge5to10Seconds=battManStringDischarge5to10Seconds, xATSSwitchStatusSelectedSource=xATSSwitchStatusSelectedSource, atsOutputBankMaxPower=atsOutputBankMaxPower, airFMModServIntHeater=airFMModServIntHeater, emsProbeConfigProbeSTDecTempVariance=emsProbeConfigProbeSTDecTempVariance, emsFluidSensorConfigEntry=emsFluidSensorConfigEntry, dm3ConfigConvCurrLimitAlarm=dm3ConfigConvCurrLimitAlarm, airIRSCUnitStatusCondInletTempMetric=airIRSCUnitStatusCondInletTempMetric, airIRSCGroupStatusAirFlowMetric=airIRSCGroupStatusAirFlowMetric, bmsWarningCondition=bmsWarningCondition, xATSGeneratorAdvStatusBatteryVoltage=xATSGeneratorAdvStatusBatteryVoltage, airIRmPmPump2Runtime=airIRmPmPump2Runtime, pmmOutputHighCurrentThreshold=pmmOutputHighCurrentThreshold, airIRRP100UnitServiceIntervalAirFilter=airIRRP100UnitServiceIntervalAirFilter, accessPXStatusRearDoor=accessPXStatusRearDoor, battManConfigMinCellVoltage=battManConfigMinCellVoltage, upsDiagSwitchGearBypassSwitchStatus=upsDiagSwitchGearBypassSwitchStatus, emsProbeConfigProbeSTDecTempTime=emsProbeConfigProbeSTDecTempTime, isxModularDistModuleBreakerCableNum=isxModularDistModuleBreakerCableNum, upsDiagSubSysDisplayInterfaceCardEntry=upsDiagSubSysDisplayInterfaceCardEntry, airIRRP100UnitRunHoursSystem=airIRRP100UnitRunHoursSystem, upsAdvInputBypassNominalFrequency=upsAdvInputBypassNominalFrequency, sPDUOutletConfigMSPgsLowBattMult=sPDUOutletConfigMSPgsLowBattMult, airIRmPmMaxLimitSupplyAirTemperature=airIRmPmMaxLimitSupplyAirTemperature, airIRmPmCommon4=airIRmPmCommon4, coolingUnitStatusDiscreteTableSize=coolingUnitStatusDiscreteTableSize, memInputsStatusCurrentAnalogValue=memInputsStatusCurrentAnalogValue, upsDiagPMTable=upsDiagPMTable, dm3ConfigLVDResetThresh=dm3ConfigLVDResetThresh, airIRmPmReturnAirTemperature=airIRmPmReturnAirTemperature, rPDU2SensorTempHumidityConfigHumidityHysteresis=rPDU2SensorTempHumidityConfigHumidityHysteresis, airIRRP500GroupConfigReheatResetRateI=airIRRP500GroupConfigReheatResetRateI, galaxyVXUPS1100kVA=galaxyVXUPS1100kVA, dm3ConfigRectFailAlarm=dm3ConfigRectFailAlarm, airIRmPmFan3Running=airIRmPmFan3Running, xATSSwitchSettingsSetToFactoryDefaults=xATSSwitchSettingsSetToFactoryDefaults, pcnsMinLoadCapabilityLostEnableCommandFile=pcnsMinLoadCapabilityLostEnableCommandFile, emConfigProbeMaxTempEnable=emConfigProbeMaxTempEnable, pcnsCommunicationEstablished=pcnsCommunicationEstablished, airIRRP100UnitStatusRackInletTempUS=airIRRP100UnitStatusRackInletTempUS, rARUStatusAruRemoteSetpoint=rARUStatusAruRemoteSetpoint, emConfigContactLocation=emConfigContactLocation, msvmPowerSupplyStatusChange=msvmPowerSupplyStatusChange, emsDoorSensorCommStatus=emsDoorSensorCommStatus, airIRRP500UnitStatusDehumidifyOutput=airIRRP500UnitStatusDehumidifyOutput, atsCalibrationInputPhaseTableIndex=atsCalibrationInputPhaseTableIndex, cpsCardConfType=cpsCardConfType, upsOutletGroupStatusCommandPending=upsOutletGroupStatusCommandPending, upsDiagSubSysDisplayInterfaceCardStatus=upsDiagSubSysDisplayInterfaceCardStatus, airIRmPmPump3Failure=airIRmPmPump3Failure, pcnsContactNormal1CommandFileDelay=pcnsContactNormal1CommandFileDelay, sPDUOutletControlMSPName=sPDUOutletControlMSPName, wirelessSensorPodStatusTemperature=wirelessSensorPodStatusTemperature, airFMSysCoilFluidActualCoolDehum=airFMSysCoilFluidActualCoolDehum, apcDeviceClearLostComms=apcDeviceClearLostComms, upsDiagPMLifetimeStatus=upsDiagPMLifetimeStatus, battManString1ResponseTestCurrentTable=battManString1ResponseTestCurrentTable, memOutletStatusEntry=memOutletStatusEntry, coolingUnitExtendedStringEntry=coolingUnitExtendedStringEntry, iemHighTempThresholdViolationCleared=iemHighTempThresholdViolationCleared, airIRmPmPump4StartTemperatureK=airIRmPmPump4StartTemperatureK, galaxyVXUPS750kVA=galaxyVXUPS750kVA, airFMSysLowCoilFluidTempF=airFMSysLowCoilFluidTempF, airIRmPmDehumidificMaxWaterTempC=airIRmPmDehumidificMaxWaterTempC, airIRG3IdentModelNumber=airIRG3IdentModelNumber, isxModularDistModuleOutputAlarmMinEnable=isxModularDistModuleOutputAlarmMinEnable, apCPSFlashSize=apCPSFlashSize, battManString2ResponseTestChangeEntry=battManString2ResponseTestChangeEntry, mfiletransferConfigTFTPServerAddress=mfiletransferConfigTFTPServerAddress, airCriticalCondition=airCriticalCondition, atsNearOverloadCleared=atsNearOverloadCleared, airIRG3RDUStatusCondenserOutletTempMetric=airIRG3RDUStatusCondenserOutletTempMetric, rPDUOutletStatusOutletBank=rPDUOutletStatusOutletBank, iemStatusRelaysTable=iemStatusRelaysTable, pcnsUpdateAvailable=pcnsUpdateAvailable, rPDUPowerSupply1Ok=rPDUPowerSupply1Ok, upsBatteryCabBlockCellVoltage=upsBatteryCabBlockCellVoltage, galaxyVXUPS1500kVA=galaxyVXUPS1500kVA, airFMSysActualSteamHotGasReheat=airFMSysActualSteamHotGasReheat, pmmOutputTable=pmmOutputTable, mconfigTrapReceiverEntry=mconfigTrapReceiverEntry, upsPfcFault=upsPfcFault, rPDU2OutletMeteredConfigTable=rPDU2OutletMeteredConfigTable, dm3StatusBreakersEntry=dm3StatusBreakersEntry, dcmim2StatusLVDTableSize=dcmim2StatusLVDTableSize, sPDUOutletConfigMSPmupsP2HiHum=sPDUOutletConfigMSPmupsP2HiHum, dm3ConfigLVDIndex=dm3ConfigLVDIndex, battManString1ResponseTestCurrentIndex=battManString1ResponseTestCurrentIndex, pcnsFaultBypassEnabledShutdownDelay=pcnsFaultBypassEnabledShutdownDelay, upsBatteryCabStringCurrent=upsBatteryCabStringCurrent, airIRG3RDUStatusInletWaterTempMetric=airIRG3RDUStatusInletWaterTempMetric, upsBatteryCabStringAverageTemperature=upsBatteryCabStringAverageTemperature, ceSevereCondition=ceSevereCondition, rPDU2=rPDU2, xPDUOutputRelayCurrentState=xPDUOutputRelayCurrentState, airFMGroupFailoverModCoolFail=airFMGroupFailoverModCoolFail, battManString1BatteryVoltage=battManString1BatteryVoltage, cpsSerialPortName=cpsSerialPortName, upsDiagSubSysChargerEntry=upsDiagSubSysChargerEntry, airIRmPmFan2Running=airIRmPmFan2Running, rPDU2DeviceStatusPowerFactor=rPDU2DeviceStatusPowerFactor, communicationWarningError=communicationWarningError, upsParallelOutputPhaseTable=upsParallelOutputPhaseTable, airIRG3RDUStatusRefrigerantLeakDetector=airIRG3RDUStatusRefrigerantLeakDetector, emsVibrationSensorConfigSensorSeverity=emsVibrationSensorConfigSensorSeverity, xPDUInternalCommErrorCleared=xPDUInternalCommErrorCleared, xATSTestingScheduleTestWithLoadSelectMonth=xATSTestingScheduleTestWithLoadSelectMonth, upsDiagSubSysSystemPowerSupplyIndex=upsDiagSubSysSystemPowerSupplyIndex, airFMSysAlarmMapOutputTable=airFMSysAlarmMapOutputTable, airIRmPmDrycooler4ManOpEnable=airIRmPmDrycooler4ManOpEnable, rARUPowerStatusRedundantAcConfig=rARUPowerStatusRedundantAcConfig, switchgearBreakerStatus=switchgearBreakerStatus, airIRmPmPump3HysteresisF=airIRmPmPump3HysteresisF, sPDUOutletConfigMSPannunIndex=sPDUOutletConfigMSPannunIndex, inputOK=inputOK, dm3StatusLVDHwFault=dm3StatusLVDHwFault, airIRRP500GroupConfigHumidifySensitivityBand=airIRRP500GroupConfigHumidifySensitivityBand, smwInformationalCondition=smwInformationalCondition, airIRmPmWaterTemperature2F=airIRmPmWaterTemperature2F, mtrapargsGauge03=mtrapargsGauge03, isxModularDistModuleOutputAlarmLowEnable=isxModularDistModuleOutputAlarmLowEnable, emConfigProbeMaxTempThreshold=emConfigProbeMaxTempThreshold, isxModularDistModuleOutputAlarmHighEnable=isxModularDistModuleOutputAlarmHighEnable, uioOutputRelay=uioOutputRelay, atsCalibrationInputPhaseEntry=atsCalibrationInputPhaseEntry, galaxy300UPS15kVA31=galaxy300UPS15kVA31, dm3ConfigFusesTable=dm3ConfigFusesTable, emsMinorAlarm=emsMinorAlarm, pcnsParallelRedundancyLostDesc=pcnsParallelRedundancyLostDesc, mupsCommunicationLost=mupsCommunicationLost, upsIntegratedATSSourceTableSize=upsIntegratedATSSourceTableSize, airIRRP100UnitServiceIntervalHumidifier=airIRRP100UnitServiceIntervalHumidifier, battManString1BatteryLowestVoltage=battManString1BatteryLowestVoltage, emStatus=emStatus, airIRG2RDT2ConfigInputNormalState=airIRG2RDT2ConfigInputNormalState, xATSSource2TableSize=xATSSource2TableSize, memDoorSensorConfigAlarmGeneration=memDoorSensorConfigAlarmGeneration, upsDiagSubSysDisplayInterfaceCardTable=upsDiagSubSysDisplayInterfaceCardTable, airIRG2RDT2StatusFilterDPMetric=airIRG2RDT2StatusFilterDPMetric, xPDUIdentProductName=xPDUIdentProductName, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, rPDULoadDevMaxOutletTableSize=rPDULoadDevMaxOutletTableSize, airFMSysAlarmMapMainModMaintReq=airFMSysAlarmMapMainModMaintReq, coolingUnitConfigurationDiscreteValueAsInteger=coolingUnitConfigurationDiscreteValueAsInteger, airFMModIdentEntry=airFMModIdentEntry, rsCommunicationEstablished=rsCommunicationEstablished, pcnsRunTimeAboveThresholdCommandFilePath=pcnsRunTimeAboveThresholdCommandFilePath, battManAlarmCharger=battManAlarmCharger, pcnsRunTimeExceededEnableLogging=pcnsRunTimeExceededEnableLogging, apcLocalDisplayConfigCheckLogIndicator=apcLocalDisplayConfigCheckLogIndicator, emsAlarmDeviceStatusTable=emsAlarmDeviceStatusTable, upsDiagSubSysNetworkComCardTableSize=upsDiagSubSysNetworkComCardTableSize, symmetraPx100kVA=symmetraPx100kVA, dm3StatusConvFanFail=dm3StatusConvFanFail, dm3ConfigBattDischargeAlarm=dm3ConfigBattDischargeAlarm, airIRmPmEheating2Type=airIRmPmEheating2Type, airFMSysAlarmMapOutput4=airFMSysAlarmMapOutput4, airFMSysCoolPIDDerivativeD=airFMSysCoolPIDDerivativeD, dcmim2StatusSysTempUnits=dcmim2StatusSysTempUnits, isxModularDistModuleBreakerPhysicalGroup=isxModularDistModuleBreakerPhysicalGroup, dm3StatusConvFail=dm3StatusConvFail, emStatusProbeTempUnits=emStatusProbeTempUnits, airPAReturnTempC=airPAReturnTempC, emsProbeStatusProbeMinTempThresh=emsProbeStatusProbeMinTempThresh, pmmInputAverageVoltageLtoN=pmmInputAverageVoltageLtoN, pmmInputMaxApparentPowerThreshold=pmmInputMaxApparentPowerThreshold, onbatterycommunicationLost=onbatterycommunicationLost, airIRmPmDayNightMode=airIRmPmDayNightMode, atsSourceStatusOk=atsSourceStatusOk, upsInformationalConditionCleared=upsInformationalConditionCleared, pcnsAdvancedShutdownCommandFileDuration=pcnsAdvancedShutdownCommandFileDuration, emsStatusOutputRelayCount=emsStatusOutputRelayCount, rPDUBankPhaseLowLoadCleared=rPDUBankPhaseLowLoadCleared, upsPhaseOutputMinPercentLoad=upsPhaseOutputMinPercentLoad, xPDUBranchBreakerMinCurrentThreshold=xPDUBranchBreakerMinCurrentThreshold, wirelessSensorStatusMaxTempThresh=wirelessSensorStatusMaxTempThresh, xATSGeneratorStatusRemoteStart=xATSGeneratorStatusRemoteStart, pcnsHumidityOutOfRangeProbe2CommandFilePath=pcnsHumidityOutOfRangeProbe2CommandFilePath, dm3ConfigBattMaxRecharge=dm3ConfigBattMaxRecharge, galaxy5500UPS80KVA=galaxy5500UPS80KVA, airIRG3RDUStatusPumpChangeOverInterval=airIRG3RDUStatusPumpChangeOverInterval, pcbeUpdateAvailableFlag=pcbeUpdateAvailableFlag, pcnsBypassManualEnabled=pcnsBypassManualEnabled, sPDUMasterStatusVMIndex=sPDUMasterStatusVMIndex, xATSGeneratorFuelSystem=xATSGeneratorFuelSystem, airIRRCGroupConfigAltitudeUS=airIRRCGroupConfigAltitudeUS, airFMGroupFailoverSysSmokeAlarm=airFMGroupFailoverSysSmokeAlarm, rPDULoadDevMaxOutletLoad=rPDULoadDevMaxOutletLoad, upsDiagPMFanLifetimeStatus=upsDiagPMFanLifetimeStatus, airFMSysDemands=airFMSysDemands, battManString2OhmicValueTable=battManString2OhmicValueTable, airFMSysLowCtrlTempC=airFMSysLowCtrlTempC, mtrapargsOctetString06=mtrapargsOctetString06, atsOutputBankMinPercentLoad=atsOutputBankMinPercentLoad, upsInputContactOutputRelayFault=upsInputContactOutputRelayFault, atsHardwareStatusOk=atsHardwareStatusOk, battManSystemPilotBatteryHighTempAlarm=battManSystemPilotBatteryHighTempAlarm, airIRRP100GroupSetpointsDehumidifyDeadband=airIRRP100GroupSetpointsDehumidifyDeadband, rPDU2PhasePropertiesNumber=rPDU2PhasePropertiesNumber, pcnsMaxInternalTempExceededEnableShutdown=pcnsMaxInternalTempExceededEnableShutdown, pcnsHumidityInRangeProbe2CommandFileDelay=pcnsHumidityInRangeProbe2CommandFileDelay, ePDUDeviceControlModule=ePDUDeviceControlModule, userModified=userModified, sPDUMasterControlVMTable=sPDUMasterControlVMTable, airPAStatus=airPAStatus, rPDULoadStatusEntry=rPDULoadStatusEntry, airIRmPmDrycooler4SummerStartTemp=airIRmPmDrycooler4SummerStartTemp, airIRmPmEheating2Runtime=airIRmPmEheating2Runtime, airFMGroupFailoverSysHighEnvTemp=airFMGroupFailoverSysHighEnvTemp, atsInputFrequency=atsInputFrequency, airIRRP500UnitStatusEnteringFluidTemperatureMetric=airIRRP500UnitStatusEnteringFluidTemperatureMetric, upsAdvBatteryCurrentTable=upsAdvBatteryCurrentTable, coolingUnitStatusAnalogScale=coolingUnitStatusAnalogScale, isxModularDistSysVoltageLtoN=isxModularDistSysVoltageLtoN, xPDUSystemOutputTotalPower=xPDUSystemOutputTotalPower, coolingUnitExtendedAnalogUnits=coolingUnitExtendedAnalogUnits, battManStringCalib=battManStringCalib, airPACondensatePump=airPACondensatePump, smartUPS1400=smartUPS1400, upsDiagSubSysNetworkComCardDateOfManufacture=upsDiagSubSysNetworkComCardDateOfManufacture, dm3ConfigRectFanFailAlarm=dm3ConfigRectFanFailAlarm, airIRRP500UnitStatusReturnAirTempMetric=airIRRP500UnitStatusReturnAirTempMetric, airFMSysAlarmMapSysHighEnvHum=airFMSysAlarmMapSysHighEnvHum, pmmBranchCircuitHighCurrentThreshold=pmmBranchCircuitHighCurrentThreshold, iemConfigProbeMaxHumidEnable=iemConfigProbeMaxHumidEnable, galaxy5500UPS130KVA=galaxy5500UPS130KVA, airIRG2RDT2StatusReturnAirTempMetric=airIRG2RDT2StatusReturnAirTempMetric, battManConfigMaxRippleCurrent=battManConfigMaxRippleCurrent, bmsInformationalConditionCleared=bmsInformationalConditionCleared, pcnsNetCommunicationLost=pcnsNetCommunicationLost, pcnsHumidityOutOfRangeProbe1Desc=pcnsHumidityOutOfRangeProbe1Desc, upsAdvTestDiagnosticsResults=upsAdvTestDiagnosticsResults, airIRRP500UnitConfig=airIRRP500UnitConfig, airIRRCUnitThresholdsEnteringFluidHighTempMetric=airIRRCUnitThresholdsEnteringFluidHighTempMetric, dm3StatusSysConvVoltSanity=dm3StatusSysConvVoltSanity, isxModularDistSubFeedInfoKwhUsage=isxModularDistSubFeedInfoKwhUsage, atsCalibrationOutputTableIndex=atsCalibrationOutputTableIndex, airIRG2RDT2StatusSuctionTempMetric=airIRG2RDT2StatusSuctionTempMetric, battManBatteryVoltageZeroCalib=battManBatteryVoltageZeroCalib, emsSensorConfigSensorSystemName=emsSensorConfigSensorSystemName, rPDUStatusBankNumber=rPDUStatusBankNumber, pcnsContactFault1ShutdownDelay=pcnsContactFault1ShutdownDelay, atsOutputBankPercentLoad=atsOutputBankPercentLoad, airFMSysReheatEssFunction=airFMSysReheatEssFunction, coolingUnitStatusDiscreteDescription=coolingUnitStatusDiscreteDescription, upsDiagSubSysIntBypSwitchFanLifetimeInfoEntry=upsDiagSubSysIntBypSwitchFanLifetimeInfoEntry, upsHighPrecBatteryPackFirmwareRevision=upsHighPrecBatteryPackFirmwareRevision, airIRG3GroupStatusMaxReturnAirTempUS=airIRG3GroupStatusMaxReturnAirTempUS, airIRRP500UnitThresholdsSupplyAirHighTempUS=airIRRP500UnitThresholdsSupplyAirHighTempUS, xATSGeneratorHighCoolantTempAlarm=xATSGeneratorHighCoolantTempAlarm, memSensorsConfigTable=memSensorsConfigTable, emsDoorSensorStatusEntry=emsDoorSensorStatusEntry, upsPhaseOutputFrequency=upsPhaseOutputFrequency, airFMSysAlarmMapSysTableSize=airFMSysAlarmMapSysTableSize)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmCmp1StartTempWinterF=airIRmPmCmp1StartTempWinterF, airIRmPmSupplyAirHumidityTooHigh=airIRmPmSupplyAirHumidityTooHigh, memSmokeSensorStatusSensorLocation=memSmokeSensorStatusSensorLocation, airIRSCUnitRunHours=airIRSCUnitRunHours, dm3ConfigConvFailComm=dm3ConfigConvFailComm, apcAnalogInputMaxThresholdViolationCleared=apcAnalogInputMaxThresholdViolationCleared, isxModularDistSysOutputNominalFrequency=isxModularDistSysOutputNominalFrequency, pmmOutputLowCurrentThreshold=pmmOutputLowCurrentThreshold, atsRMSUnderVoltageCleared=atsRMSUnderVoltageCleared, uioOutputRelayStatusAlarmStatus=uioOutputRelayStatusAlarmStatus, airIRmPmPWWHeatingHysteresisF=airIRmPmPWWHeatingHysteresisF, atsControlResetATS=atsControlResetATS, pcnsMode=pcnsMode, dm3StatusRectFail=dm3StatusRectFail, xPDUBranchBreakerMaxCurrentThreshold=xPDUBranchBreakerMaxCurrentThreshold, ePDUDeviceStatusEnergy=ePDUDeviceStatusEnergy, upsBasicSystemInternalTemperature=upsBasicSystemInternalTemperature, sPDUOutletConfigMSPgsPowerOffDelay=sPDUOutletConfigMSPgsPowerOffDelay, xATSOutputRelayNormalState=xATSOutputRelayNormalState, airIRG3GroupStatusMinRackInletTempUS=airIRG3GroupStatusMinRackInletTempUS, upsOpStatsTimeInBypassOperation=upsOpStatsTimeInBypassOperation, xATSS1BadPhaseBalance=xATSS1BadPhaseBalance, dcmim2ConfigBattCapacityTestEndThresh=dcmim2ConfigBattCapacityTestEndThresh, airFMGroupSysRuntime=airFMGroupSysRuntime, airIRSCUnitStatusCondOutletTempMetric=airIRSCUnitStatusCondOutletTempMetric, emsSmokeSensorStatusSensorLocation=emsSmokeSensorStatusSensorLocation, airIRG3RDUStatusPumpOutletTempUS=airIRG3RDUStatusPumpOutletTempUS, pcnsRunTimeBelowThresholdDesc=pcnsRunTimeBelowThresholdDesc, powerChuteBusinessEdition=powerChuteBusinessEdition, atsInputVoltage=atsInputVoltage, upsDCOutputStatusCurrent=upsDCOutputStatusCurrent, airFMStatusModuleSupplyTempF=airFMStatusModuleSupplyTempF, airIRSCUnitStatusCompressor=airIRSCUnitStatusCompressor, pcnsNMCComsLostFlag=pcnsNMCComsLostFlag, airIRG2GroupConfigCoolPIDReset=airIRG2GroupConfigCoolPIDReset, airIRmPmMyZoneSupplyTemperatureC=airIRmPmMyZoneSupplyTemperatureC, pcnsFaultBypassEnabledDesc=pcnsFaultBypassEnabledDesc, emStatusProbeNumber=emStatusProbeNumber, chargerInputPhaseVoltage=chargerInputPhaseVoltage, memBeaconAction=memBeaconAction, cpsInfoSerialPortSigRTS=cpsInfoSerialPortSigRTS, airIRmAlarmsTable=airIRmAlarmsTable, rPDULoadDevice=rPDULoadDevice, cpsSerialPortSniffSess=cpsSerialPortSniffSess, wirelessSensorPodConfigHighTempThresh=wirelessSensorPodConfigHighTempThresh, uioInputContactConfigPortID=uioInputContactConfigPortID, upsAdvConfigUpsSleepTime=upsAdvConfigUpsSleepTime, airFMModBlwr2ElOvTimeConst=airFMModBlwr2ElOvTimeConst, smartUPS1500=smartUPS1500, airIRmPmPump2Failure=airIRmPmPump2Failure, apcEnvLowTempThresholdViolationCleared=apcEnvLowTempThresholdViolationCleared, battManIdentFirmwareRev=battManIdentFirmwareRev, rPDULoadPhaseConfigNearOverloadThreshold=rPDULoadPhaseConfigNearOverloadThreshold, airFMModSupplyHum=airFMModSupplyHum, airFMSysAlarmMapInput6=airFMSysAlarmMapInput6, mfiletransferConfigSettings=mfiletransferConfigSettings, pmmOutputVoltageLtoN=pmmOutputVoltageLtoN, dm3StatusConvPhyAddr=dm3StatusConvPhyAddr, apcCriticalDiscreteInputContactStateAbnormal=apcCriticalDiscreteInputContactStateAbnormal, sPDUOutletStatusMSPIndex=sPDUOutletStatusMSPIndex, accessPXStatusRear=accessPXStatusRear, rPDU2SensorTempHumidityTableSize=rPDU2SensorTempHumidityTableSize, memSensorsAlarmStatus=memSensorsAlarmStatus, isxModularHighCurrentThresholdViolationCleared=isxModularHighCurrentThresholdViolationCleared, isxModularOutputVoltageMinThresholdViolationCleared=isxModularOutputVoltageMinThresholdViolationCleared, memModulesConfigModuleName=memModulesConfigModuleName, airIRRP100UnitStatusRackInletTemperature3Metric=airIRRP100UnitStatusRackInletTemperature3Metric, pduForcedBypassMode=pduForcedBypassMode, upsDiagSubFeedPhaseTable=upsDiagSubFeedPhaseTable, dcmim2ConfigLVDEntry=dcmim2ConfigLVDEntry, galaxyVSUPS50kW=galaxyVSUPS50kW, dm3ConfigRectLowVoltThresh=dm3ConfigRectLowVoltThresh, pcnsBypassManualEnabledCommandFilePath=pcnsBypassManualEnabledCommandFilePath, ais5000UPS80kVA=ais5000UPS80kVA, iemHighHumidThresholdViolationCleared=iemHighHumidThresholdViolationCleared, pcnsEnvironmentCommunicationEstablishedCommandFilePath=pcnsEnvironmentCommunicationEstablishedCommandFilePath, airFMSysActualHumCtrl=airFMSysActualHumCtrl, xATSGeneratorOverloadCleared=xATSGeneratorOverloadCleared, wirelessSensorPodStatusAlarmStatus=wirelessSensorPodStatusAlarmStatus, upsDiagSubFeedBreakerTable=upsDiagSubFeedBreakerTable, dm3ConfigConvLowVoltAlarm=dm3ConfigConvLowVoltAlarm, airIRG3RDUStatusInputState=airIRG3RDUStatusInputState, pmmOutputFrequencyDeviation=pmmOutputFrequencyDeviation, memSmokeSensorStatusTableSize=memSmokeSensorStatusTableSize, upsPhaseNumOutputs=upsPhaseNumOutputs, isxModularSubfeedBreakerOpenAlarmCleared=isxModularSubfeedBreakerOpenAlarmCleared, battManString2OhmicValueIndex=battManString2OhmicValueIndex, xPDU=xPDU, emIdentFirmwareRevision=emIdentFirmwareRevision, emConfigProbeLowHumidEnable=emConfigProbeLowHumidEnable, emsIdentSerialNumber=emsIdentSerialNumber, xATSGeneratorServiceNextServiceDate=xATSGeneratorServiceNextServiceDate, upsAdvInputNominalVoltage=upsAdvInputNominalVoltage, upsAdvBatteryExternalSKU=upsAdvBatteryExternalSKU, upsParallelSysUpsName=upsParallelSysUpsName, xATSGeneratorServiceCalendarIntervalThreshold=xATSGeneratorServiceCalendarIntervalThreshold, ePDUOutletTableSize=ePDUOutletTableSize, airFMSysAlarmMap=airFMSysAlarmMap, rPDUOutletStatus=rPDUOutletStatus, memSensorsStatusSensorNumber=memSensorsStatusSensorNumber, xATSGeneratorLowBatteryVolt=xATSGeneratorLowBatteryVolt, memOutputConfigOutputNumber=memOutputConfigOutputNumber, rpduCriticalCondition=rpduCriticalCondition, sPDUIdentDateOfManufactureMSP=sPDUIdentDateOfManufactureMSP, upsPhaseOutputInverterVoltage=upsPhaseOutputInverterVoltage, pcnsBypassManualEnabledEnableLogging=pcnsBypassManualEnabledEnableLogging, airIRmPmUnitCondensationTemperature1F=airIRmPmUnitCondensationTemperature1F, pcnsMinLoadCapabilityRegainedCommandFileDelay=pcnsMinLoadCapabilityRegainedCommandFileDelay, memInputsStatusInputName=memInputsStatusInputName, airIRmPmUnitEvaporationTemperature2C=airIRmPmUnitEvaporationTemperature2C, rPDU2PhaseToPhaseStatusVoltage2to3=rPDU2PhaseToPhaseStatusVoltage2to3, airIRG2AlarmsDescription=airIRG2AlarmsDescription, pcnsTempOutOfRangeProbe2ShutdownDelay=pcnsTempOutOfRangeProbe2ShutdownDelay, sPDUOutletStatusVMTable=sPDUOutletStatusVMTable, rARUStatusAruTemp1=rARUStatusAruTemp1, rPDU2DeviceConfigOutletsPeakLoadReset=rPDU2DeviceConfigOutletsPeakLoadReset, airIRG2RDT2StatusAirFlowMetric=airIRG2RDT2StatusAirFlowMetric, airFMModBlwr1CtrlType=airFMModBlwr1CtrlType, airFMSysAlarmMapSysSecSensFail=airFMSysAlarmMapSysSecSensFail, airIRmIdentName=airIRmIdentName, memSensorsStatusEntry=memSensorsStatusEntry, isxModularDistSubFeedLoadingEntry=isxModularDistSubFeedLoadingEntry, airFMGroupLoadShareReheatThreshF=airFMGroupLoadShareReheatThreshF, rPDU2SensorTempHumidityStatusName=rPDU2SensorTempHumidityStatusName, airIRmPmCmp1StartTempSummerF=airIRmPmCmp1StartTempSummerF, airFMGroupFailoverSysCommLost=airFMGroupFailoverSysCommLost, atsConfigPhaseOverLoadThreshold=atsConfigPhaseOverLoadThreshold, isxModularDistModuleOutputNumCables=isxModularDistModuleOutputNumCables, airFMSysAlarmMapExpMod1WaterDetected=airFMSysAlarmMapExpMod1WaterDetected, apcDcBusOverVoltageCleared=apcDcBusOverVoltageCleared, dp300E=dp300E, battManInputContactState=battManInputContactState, cpsCardConfInter=cpsCardConfInter, upsDiagBatteryFrameTable=upsDiagBatteryFrameTable, pcnsShutdownCommandFile=pcnsShutdownCommandFile, xPDUOutputRelays=xPDUOutputRelays, pmmInputBreakerRating=pmmInputBreakerRating, airIRRCUnitConfigIdleOnCoolFail=airIRRCUnitConfigIdleOnCoolFail, airIRRP500UnitIdent=airIRRP500UnitIdent, wirelessSensorStatusLowBatteryThresh=wirelessSensorStatusLowBatteryThresh, xATSSource2Position=xATSSource2Position, airACRD300Series=airACRD300Series, atsOutputPhaseTableIndex=atsOutputPhaseTableIndex, coolingUnitAboutTableIndex=coolingUnitAboutTableIndex, airIRmPmPump2HysteresisF=airIRmPmPump2HysteresisF, upsBasicOutputPhase=upsBasicOutputPhase, galaxyVMUPS120kVA=galaxyVMUPS120kVA, rPDU2OutletSwitchedStatusNumber=rPDU2OutletSwitchedStatusNumber, airIRRP100UnitServiceIntervalHeaterAlarm=airIRRP100UnitServiceIntervalHeaterAlarm, airIRRP500UnitStatusRackInletTemperature1US=airIRRP500UnitStatusRackInletTemperature1US, airFMSysAlarmMapInput9=airFMSysAlarmMapInput9, batteryVoltageOK=batteryVoltageOK, upsAdvConfigBypassToleranceSetting=upsAdvConfigBypassToleranceSetting, atsInputMaxVoltage=atsInputMaxVoltage, airFMModBlwr2ModuleIndex=airFMModBlwr2ModuleIndex, galaxyVMUPS110kVA=galaxyVMUPS110kVA, uioSensorConfigMaxTemperatureEnable=uioSensorConfigMaxTemperatureEnable, battManConfigNumberOfBoosts=battManConfigNumberOfBoosts, cpsCardIdentPCI=cpsCardIdentPCI, dm3ConfigConvFailSafe=dm3ConfigConvFailSafe, atsOutputBankMaxPercentPower=atsOutputBankMaxPercentPower, pmmBranchcircuitCurrentMaxAlarm=pmmBranchcircuitCurrentMaxAlarm, airIRmPmDrycooler2WinterStartTempF=airIRmPmDrycooler2WinterStartTempF, cpsSerialPortConf=cpsSerialPortConf, airIRRP100UnitStatusReturnAirTempUS=airIRRP100UnitStatusReturnAirTempUS, isxModularPduDeviceFansPresent=isxModularPduDeviceFansPresent, rPDU2PhaseStatusTable=rPDU2PhaseStatusTable, rPDU2BankConfigTable=rPDU2BankConfigTable, cpsAP930xConf=cpsAP930xConf, airFMModPropTableSize=airFMModPropTableSize, upsAirFilterWarning=upsAirFilterWarning, xATSGeneratorIdentSerialNumber=xATSGeneratorIdentSerialNumber, airPA=airPA, AirIRSCFanSpeedControl=AirIRSCFanSpeedControl, pcnsRunTimeExceededEnableShutdown=pcnsRunTimeExceededEnableShutdown, memVibrationSensorConfigSensorLocation=memVibrationSensorConfigSensorLocation, coolingUnitExtendedDiscreteValueAsString=coolingUnitExtendedDiscreteValueAsString, isxModularSubfeedLowCurrentThresholdViolationCleared=isxModularSubfeedLowCurrentThresholdViolationCleared, apcAdConverterFaultCleared=apcAdConverterFaultCleared, airIRSCGroupStatusMaxRackInletTempMetric=airIRSCGroupStatusMaxRackInletTempMetric, battManUnitCalibTableSize=battManUnitCalibTableSize, upsAdvInputNominalFrequency=upsAdvInputNominalFrequency, dcFuseCBAlarmCleared=dcFuseCBAlarmCleared, memSmokeSensorStatusTable=memSmokeSensorStatusTable, airIRG2RDT2RunHoursCondensatePump=airIRG2RDT2RunHoursCondensatePump, airIRRCGroup=airIRRCGroup, upsParallelDiagSubSysBreakerName=upsParallelDiagSubSysBreakerName, memInputsStatusAlarmStatus=memInputsStatusAlarmStatus, airIRmPmSupplyAirTemperatureTooHigh=airIRmPmSupplyAirTemperatureTooHigh, upsInputContactConfigAction=upsInputContactConfigAction, upsDiagIMFirmwareRev=upsDiagIMFirmwareRev, airIRRCGroupConfigActiveFlowControllerLampTest=airIRRCGroupConfigActiveFlowControllerLampTest, airInformationalConditionCleared=airInformationalConditionCleared, xATSGenerator=xATSGenerator, pcnsRunTimeWithinRangeEnableLogging=pcnsRunTimeWithinRangeEnableLogging, pmmDeviceNominalOutputVoltage=pmmDeviceNominalOutputVoltage, airFMModRHHum=airFMModRHHum, airIRRP100GroupConfigNumberofCoolingUnits=airIRRP100GroupConfigNumberofCoolingUnits, airIRRP100UnitConfigStartupDelay=airIRRP100UnitConfigStartupDelay, dcmim2ConfigBattCapacityTestCurrent=dcmim2ConfigBattCapacityTestCurrent, pcnsContactNormal3=pcnsContactNormal3, airFMGroupSysIndex=airFMGroupSysIndex, xATSEpoArmed=xATSEpoArmed, msvmOutletOn=msvmOutletOn, xATSGeneratorSettingsCrankTime=xATSGeneratorSettingsCrankTime, airIRG3GroupStatusMinReturnAirTempUS=airIRG3GroupStatusMinReturnAirTempUS, emsSensorControlSensorIndex=emsSensorControlSensorIndex, airIRmPmEheating4StartTemperatureF=airIRmPmEheating4StartTemperatureF, xATSSwitchSettingsMinPhaseBalance=xATSSwitchSettingsMinPhaseBalance, airIRmPmEheating1HysteresisF=airIRmPmEheating1HysteresisF, isxModularDistSysCurrentAlarmLowEnable=isxModularDistSysCurrentAlarmLowEnable, airIRRP500UnitThresholdsRackInletHighTempUS=airIRRP500UnitThresholdsRackInletHighTempUS, upsEPOActiveCleared=upsEPOActiveCleared, upsHighPrecBatteryPacks=upsHighPrecBatteryPacks, airIRG2RDT2StatusFilterDPUS=airIRG2RDT2StatusFilterDPUS, airInRoomPerimeter=airInRoomPerimeter, emsAlarmDeviceStatusDeviceName=emsAlarmDeviceStatusDeviceName, airIRRCUnitStatusFluidValvePosition=airIRRCUnitStatusFluidValvePosition, emsDoorSensorStatusTable=emsDoorSensorStatusTable, airFMSysConfig=airFMSysConfig, isxModularDistSysCurrentTable=isxModularDistSysCurrentTable, dcmim2StatusRectID=dcmim2StatusRectID, wirelessSensorPodStatusAlarmGeneration=wirelessSensorPodStatusAlarmGeneration, airIRmPmUnitEvaporationPressure1=airIRmPmUnitEvaporationPressure1, xATSGeneratorFuelSystemVeryLowRunTimeThreshold=xATSGeneratorFuelSystemVeryLowRunTimeThreshold, dcmim2StatusLVD=dcmim2StatusLVD, upsBatteryNumberOfCabinets=upsBatteryNumberOfCabinets, dm3StatusSysSecurityLevel=dm3StatusSysSecurityLevel, airIRG3RDUStatusOutletWaterTempMetric=airIRG3RDUStatusOutletWaterTempMetric, aruRedundantPowerLostAlarm=aruRedundantPowerLostAlarm, airIRRP100UnitStatusCompressorDriveHeatSinkTempUS=airIRRP100UnitStatusCompressorDriveHeatSinkTempUS, pcnsHumidityInRangeProbe2EnableCommandFile=pcnsHumidityInRangeProbe2EnableCommandFile, envLTDecTempRateViolationCleared=envLTDecTempRateViolationCleared, coolingUnitExtendedAnalog=coolingUnitExtendedAnalog, rPDUOutletConfig=rPDUOutletConfig, airFMGroupLoadShareReheatThreshC=airFMGroupLoadShareReheatThreshC, pcnsOverloadEnableCommandFile=pcnsOverloadEnableCommandFile, pcnsTest=pcnsTest, emsVibrationSensorConfigSensorName=emsVibrationSensorConfigSensorName, airIRmPmSensor19Failure=airIRmPmSensor19Failure, memFluidSensorModuleConfigIndex=memFluidSensorModuleConfigIndex, airFMGroupLoadShareCoolThreshC=airFMGroupLoadShareCoolThreshC, wirelessSensorStatusAlarmGeneration=wirelessSensorStatusAlarmGeneration, airIRmPmEheating1Type=airIRmPmEheating1Type, airIRSCUnitServiceIntervalsAirFilterAlarm=airIRSCUnitServiceIntervalsAirFilterAlarm, upsDiagnosticComBus=upsDiagnosticComBus, pmmInputPowerFactorDeviation=pmmInputPowerFactorDeviation, atsCalibrationPowerSupplyVoltage=atsCalibrationPowerSupplyVoltage, mspCommunicationEstablished=mspCommunicationEstablished, airIRG2RDT2StatusLeakSensor=airIRG2RDT2StatusLeakSensor, airIRG2GroupConfigRuntimeBalancingEnable=airIRG2GroupConfigRuntimeBalancingEnable, airFMModBlwr1FanPower=airFMModBlwr1FanPower, airIRG3GroupConfigTable=airIRG3GroupConfigTable, upsPhaseOutputTable=upsPhaseOutputTable)
mibBuilder.exportSymbols("PowerNet-MIB", deviceStatusChange=deviceStatusChange, xPDUSystemOutputNeutralCurrent=xPDUSystemOutputNeutralCurrent, pcnsContactFault3=pcnsContactFault3, battManStringCalibTableSize=battManStringCalibTableSize, rPDUOutletOff=rPDUOutletOff, emsOutputRelayStatusOutputRelayNormalState=emsOutputRelayStatusOutputRelayNormalState, upsOutletGroups=upsOutletGroups, eps6000UPS=eps6000UPS, atsOutputPhaseEntry=atsOutputPhaseEntry, upsEcoModePercentTimeSinceCommission=upsEcoModePercentTimeSinceCommission, pcnsBatteryChargeInRangeCommandFileDelay=pcnsBatteryChargeInRangeCommandFileDelay, isxModularPduDeviceNominalMainInputVoltage=isxModularPduDeviceNominalMainInputVoltage, airFMSysCoolEssFunction=airFMSysCoolEssFunction, coolingUnitConfigurationAnalogTableSize=coolingUnitConfigurationAnalogTableSize, xATSSource1VoltageLtoN=xATSSource1VoltageLtoN, airFMGroupSysRoleAssignment=airFMGroupSysRoleAssignment, airIRG3GroupStatusAvgSupplyTempMetric=airIRG3GroupStatusAvgSupplyTempMetric, airFMSysReheatDeadbandC=airFMSysReheatDeadbandC, apcDoorClosedImproperly=apcDoorClosedImproperly, airTSAChillers=airTSAChillers, airFMSysSteamElectrodeHumDmd=airFMSysSteamElectrodeHumDmd, upsAdvControlSimulatePowerFail=upsAdvControlSimulatePowerFail, serialPort2=serialPort2, airIRRP100UnitConfigUnitRoleOverride=airIRRP100UnitConfigUnitRoleOverride, isxModularDistSysCurrentAlarmStatus=isxModularDistSysCurrentAlarmStatus, masterswitchMSP=masterswitchMSP, upsDCOutputStatusTableSize=upsDCOutputStatusTableSize, isxModularDistModuleOutputKwhUsage=isxModularDistModuleOutputKwhUsage, rPDU2OutletMeteredStatusExternalLink=rPDU2OutletMeteredStatusExternalLink, airIRRP100GroupStatusDehumidifyOutput=airIRRP100GroupStatusDehumidifyOutput, airIRG3GroupStatusEntry=airIRG3GroupStatusEntry, atsStatusDeviceStatus=atsStatusDeviceStatus, upsPhaseInputPhaseIndex=upsPhaseInputPhaseIndex, upsDiagSubSysPowerFactorCorrectionSerialNum=upsDiagSubSysPowerFactorCorrectionSerialNum, rARU=rARU, atsConfigCurrentLimit=atsConfigCurrentLimit, upsAdvIdentSkuNumber=upsAdvIdentSkuNumber, rPDU2OutletSwitchedControlCommand=rPDU2OutletSwitchedControlCommand, softwareBypass=softwareBypass, pcnsCommunicationLostEnableShutdown=pcnsCommunicationLostEnableShutdown, dm3ConfigOutRlyTableSize=dm3ConfigOutRlyTableSize, airFMGroupCfgIdleBlower=airFMGroupCfgIdleBlower, airFMGroupFailoverSysLowEnvHum=airFMGroupFailoverSysLowEnvHum, pcnsContactNormal2CommandFileDelay=pcnsContactNormal2CommandFileDelay, pcnsMinLoadCapabilityLostCommandFileDelay=pcnsMinLoadCapabilityLostCommandFileDelay, rPDU2IdentTable=rPDU2IdentTable, upsEnergyEfficiencyStatsECOmodeTimeSinceReset=upsEnergyEfficiencyStatsECOmodeTimeSinceReset, wirelessSensorConfigLowTempThresh=wirelessSensorConfigLowTempThresh, airIRRP100UnitStatusCompressorDriveAlarmStatus=airIRRP100UnitStatusCompressorDriveAlarmStatus, dm3StatusOEMshuntGain=dm3StatusOEMshuntGain, apcAnalogInputHighThresholdViolation=apcAnalogInputHighThresholdViolation, wirelessSensorConfigTable=wirelessSensorConfigTable, airIRmPmEheating1ManOpEnable=airIRmPmEheating1ManOpEnable, xATSTestingStatusProfileUnloadedTime=xATSTestingStatusProfileUnloadedTime, dm3ConfigBattDischargeThresh=dm3ConfigBattDischargeThresh, pmmBranchCircuitBreakerLoad=pmmBranchCircuitBreakerLoad, airIRmPmEheating4ManOpEnable=airIRmPmEheating4ManOpEnable, symmetra3PhaseUPS80kVA=symmetra3PhaseUPS80kVA, airIRSCGroupStatusMaxReturnAirTempUS=airIRSCGroupStatusMaxReturnAirTempUS, rPDUIdentDeviceNumOutlets=rPDUIdentDeviceNumOutlets, airIRmPmPump4Hysteresis=airIRmPmPump4Hysteresis, memInputNumberCalibrationPoints=memInputNumberCalibrationPoints, bypassStaticSwitchOverload=bypassStaticSwitchOverload, upsHighPrecBattery=upsHighPrecBattery, memFluidSensorStatusSensorIndex=memFluidSensorStatusSensorIndex, airIRmPmRuntimeCooling=airIRmPmRuntimeCooling, chargerInputPhaseMaxVoltage=chargerInputPhaseMaxVoltage, ats4gCalibrationPowerSupplyVoltageTableIndex=ats4gCalibrationPowerSupplyVoltageTableIndex, uioOutputRelayStatusEntry=uioOutputRelayStatusEntry, airIRG3RDUConfigRefrigerantLeakDetectorEnabled=airIRG3RDUConfigRefrigerantLeakDetectorEnabled, emConfigProbeName=emConfigProbeName, dcmim2ConfigSysHighTempReset=dcmim2ConfigSysHighTempReset, isxModularDistModuleBreakerPosition=isxModularDistModuleBreakerPosition, upsEcoModeTotalTimeSinceCommission=upsEcoModeTotalTimeSinceCommission, airIRRP500UnitServiceIntervalAirFilterAlarm=airIRRP500UnitServiceIntervalAirFilterAlarm, airIRmPmFan1Type=airIRmPmFan1Type, airIRmPmFan3Alarm=airIRmPmFan3Alarm, atsCalibrationOutput=atsCalibrationOutput, upsSCGStatusEntry=upsSCGStatusEntry, rPDU2PhaseStatusPowerFactor=rPDU2PhaseStatusPowerFactor, ePDUOutletControlTable=ePDUOutletControlTable, upsBatteryTempSensorFault=upsBatteryTempSensorFault, iemStatusProbeLowTempViolation=iemStatusProbeLowTempViolation, atsConfigPreferredSource=atsConfigPreferredSource, rPDU2DeviceConfigTable=rPDU2DeviceConfigTable, airIRmPmCmp2Running=airIRmPmCmp2Running, upsParallelSysSwitchGearInstallationLoadPct=upsParallelSysSwitchGearInstallationLoadPct, upsDiagSubSysBattMonitorFrameIndex=upsDiagSubSysBattMonitorFrameIndex, pcnsContactNormal2EnableCommandFile=pcnsContactNormal2EnableCommandFile, airFMSysMainsVlt=airFMSysMainsVlt, airIRmPmDrycooler2Running=airIRmPmDrycooler2Running, memSensorsTempShortIncRateThreshValue=memSensorsTempShortIncRateThreshValue, airIRmPmAuxiliaryAlarm3=airIRmPmAuxiliaryAlarm3, rPDUOutletConfigMonitoredName=rPDUOutletConfigMonitoredName, xATSGeneratorHighACVEvent=xATSGeneratorHighACVEvent, upsHighPrecBatteryActualVoltagePolarity=upsHighPrecBatteryActualVoltagePolarity, airIRG2Ident=airIRG2Ident, memInputAlarmGeneration=memInputAlarmGeneration, battManString2BatteryChemHighVoltageAlarm=battManString2BatteryChemHighVoltageAlarm, airIRRP500GroupStatusReheatOutput=airIRRP500GroupStatusReheatOutput, uioOutputRelayStatusRelayID=uioOutputRelayStatusRelayID, battManString1ResponseTestChangeTableSize=battManString1ResponseTestChangeTableSize, loadBalancerStatus=loadBalancerStatus, pcnsMaxInternalTempInRangeEnableLogging=pcnsMaxInternalTempInRangeEnableLogging, airIRRP500GroupSetpointsActiveFlowControlBias=airIRRP500GroupSetpointsActiveFlowControlBias, airIRmPmCmp1HysteresisSummerK=airIRmPmCmp1HysteresisSummerK, airIRmPmEheating4=airIRmPmEheating4, uioOutputRelayConfigEntry=uioOutputRelayConfigEntry, upsDiagSwitchGearBreakerTable=upsDiagSwitchGearBreakerTable, apcLocalDisplayIdentFirmwareRev=apcLocalDisplayIdentFirmwareRev, airIRmIdentHardwareRevision=airIRmIdentHardwareRevision, sPDUOutletControlVMOutletIndex=sPDUOutletControlVMOutletIndex, eps8000FreqConverter=eps8000FreqConverter, airIRmPmGlobalZoneData=airIRmPmGlobalZoneData, dm3ConfigSysDescriptionIndex=dm3ConfigSysDescriptionIndex, rPDUStatusOutletNumber=rPDUStatusOutletNumber, isxcWarningAlarmCleared=isxcWarningAlarmCleared, xATSInputContactTable=xATSInputContactTable, dm3StatusRectDesc=dm3StatusRectDesc, xATSSwitchBlockMapIndex=xATSSwitchBlockMapIndex, airIRG3RDUStatusPump2HeadPressureMetric=airIRG3RDUStatusPump2HeadPressureMetric, airIRmPmGECWvalveGEOffTempF=airIRmPmGECWvalveGEOffTempF, dm3ConfigFuses=dm3ConfigFuses, airIRRP100GroupConfigLoadAssistEnable=airIRRP100GroupConfigLoadAssistEnable, pcnsAdvancedGroupNMC=pcnsAdvancedGroupNMC, airIRmPmSensor13Defect=airIRmPmSensor13Defect, airIRmPmAuxiliaryAlarm4=airIRmPmAuxiliaryAlarm4, pmmInformationalCondition=pmmInformationalCondition, airFMSysAlarmMapExpMod1BlwrCntl1Fail=airFMSysAlarmMapExpMod1BlwrCntl1Fail, airIRG3RDUServiceIntervalsRDUID=airIRG3RDUServiceIntervalsRDUID, rPDULoadPhaseConfigAlarm=rPDULoadPhaseConfigAlarm, upsBatteryCabBlockEntry=upsBatteryCabBlockEntry, upsBatteryStats=upsBatteryStats, isxModularPduIdent=isxModularPduIdent, dm3StatusRectFwVer=dm3StatusRectFwVer, pmmOutputActiveEnergyReceived=pmmOutputActiveEnergyReceived, airIRSCGroupConfigAltitudeMetric=airIRSCGroupConfigAltitudeMetric, mtrapargsOctetString02=mtrapargsOctetString02, emsMajorAlarmCleared=emsMajorAlarmCleared, upsDiagBatteryTable=upsDiagBatteryTable, pcnsPowerRestoredEnableCommandFile=pcnsPowerRestoredEnableCommandFile, airIRG3AlarmsDescription=airIRG3AlarmsDescription, wirelessSensorPodConfigMinHumidityThresh=wirelessSensorPodConfigMinHumidityThresh, airIRmPmDrycooler1SummerStartTempC=airIRmPmDrycooler1SummerStartTempC, pcnsRunTimeAboveThreshold=pcnsRunTimeAboveThreshold, upsParallelOutputPercentLoad=upsParallelOutputPercentLoad, iemConfigProbeMinTempThreshold=iemConfigProbeMinTempThreshold, xATSGeneratorSettings=xATSGeneratorSettings, upsAdvTestCalibrationLastSuccessfulDate=upsAdvTestCalibrationLastSuccessfulDate, upsDiagSubSysBattMonitorTableSize=upsDiagSubSysBattMonitorTableSize, cpsSerialPortAuthRetr=cpsSerialPortAuthRetr, cpsCardIdentTable=cpsCardIdentTable, upsDiagSubSysIntBypSwitchEntry=upsDiagSubSysIntBypSwitchEntry, pmmInputMinCurrentThreshold=pmmInputMinCurrentThreshold, upsBasicIdentModelType=upsBasicIdentModelType, mconfigClockTime=mconfigClockTime, xPDUSystemOutputUnderVoltThreshold=xPDUSystemOutputUnderVoltThreshold, upsBatteryCabinetNumberOfHorizontalPositions=upsBatteryCabinetNumberOfHorizontalPositions, xATSSwitchTimersTable=xATSSwitchTimersTable, xPDUBypassInputVoltagePhaseEntry=xPDUBypassInputVoltagePhaseEntry, upsDiagSubSysFrameIndex=upsDiagSubSysFrameIndex, airFMIdentModuleDateOfMfg=airFMIdentModuleDateOfMfg, emsProbeConfigProbeLTIncTempVariance=emsProbeConfigProbeLTIncTempVariance, apcForcedEntryCleared=apcForcedEntryCleared, airIRmPmSensor20Defect=airIRmPmSensor20Defect, dm3ConfigConv1ofNAlarm=dm3ConfigConv1ofNAlarm, airIRRP100UnitStatusCompressorDriveSpeed=airIRRP100UnitStatusCompressorDriveSpeed, airIRmPmMaxLimitSupplyAirHumidity=airIRmPmMaxLimitSupplyAirHumidity, atsRMSUnderFrequency=atsRMSUnderFrequency, xATSSystemOutputPower=xATSSystemOutputPower, airFMSysAlarmMapOutput1=airFMSysAlarmMapOutput1, pmmInputMaxVoltThreshold=pmmInputMaxVoltThreshold, apcWarningDiscreteInputContactStateAbnormal=apcWarningDiscreteInputContactStateAbnormal, upsAdvBatteryInternalSKU=upsAdvBatteryInternalSKU, xPDUSystemOutputMaxKWPower=xPDUSystemOutputMaxKWPower, emsSmokeSensorConfigTable=emsSmokeSensorConfigTable, airIRmPmDehumidificMinWaterTempC=airIRmPmDehumidificMinWaterTempC, airIRSCGroupStatusMinRackInletTempUS=airIRSCGroupStatusMinRackInletTempUS, iemStatusProbeMaxHumidViolation=iemStatusProbeMaxHumidViolation, outputVoltageWaveformOK=outputVoltageWaveformOK, dm3StatusRectPresent=dm3StatusRectPresent, rPDU2OutletMeteredConfigLowLoadCurrentThreshold=rPDU2OutletMeteredConfigLowLoadCurrentThreshold, xATSGeneratorOutputBreakerOpenCleared=xATSGeneratorOutputBreakerOpenCleared, airIRG3GroupStatusTable=airIRG3GroupStatusTable, ePDUDeviceControlReboot=ePDUDeviceControlReboot, isxModularDistSysPowerKwhUsage=isxModularDistSysPowerKwhUsage, upsOutputRelayConfigIndex=upsOutputRelayConfigIndex, AirIRSCConfigType=AirIRSCConfigType, sPDUMasterStatusVMRebootDuration=sPDUMasterStatusVMRebootDuration, pcnsPowerFailedDesc=pcnsPowerFailedDesc, airIRRP500UnitIdentManufactureDate=airIRRP500UnitIdentManufactureDate, airIRSCUnitStatusReturnAirTempUS=airIRSCUnitStatusReturnAirTempUS, airFMModPropTable=airFMModPropTable, airFMAlarmConditionsTableSize=airFMAlarmConditionsTableSize, airIRmPmEheating2StartTemperature=airIRmPmEheating2StartTemperature, airIRmPmFan3Failure=airIRmPmFan3Failure, ePDUSensorConfigTempMinThreshold=ePDUSensorConfigTempMinThreshold, upsDiagSubFeedPhaseCurrentAlternate=upsDiagSubFeedPhaseCurrentAlternate, xATSGeneratorSettingsMetricUnit=xATSGeneratorSettingsMetricUnit, sPDUOutletConfigMSPmupsP1HiTemp=sPDUOutletConfigMSPmupsP1HiTemp, uioInputContactStatusCurrentState=uioInputContactStatusCurrentState, sPDUOutletConfigMSPannunOutletCtrlMode=sPDUOutletConfigMSPannunOutletCtrlMode, upsInputContactStatusEntry=upsInputContactStatusEntry, rPDU2OutletSwitchedConfigIndex=rPDU2OutletSwitchedConfigIndex, wirelessSensorConfigHighHumidityThresh=wirelessSensorConfigHighHumidityThresh, msvmLowLoadCleared=msvmLowLoadCleared, upsDiagUnitControllerEntry=upsDiagUnitControllerEntry, sPDUIdent=sPDUIdent, airIRmPmPump1HysteresisF=airIRmPmPump1HysteresisF, airIRG3RDUStatusCondenserInletTempMetric=airIRG3RDUStatusCondenserInletTempMetric, xATSSwitchStatisticsTableSize=xATSSwitchStatisticsTableSize, upsDiagnosticSLCModelNumber=upsDiagnosticSLCModelNumber, upsAdvConfigAlarmTimer=upsAdvConfigAlarmTimer, airIRRP500UnitRunHoursFan3=airIRRP500UnitRunHoursFan3, accessControl=accessControl, upsDiagPMFirmwareRev=upsDiagPMFirmwareRev, airIRG2RDT2ConfigUnitIdleOnCoolFail=airIRG2RDT2ConfigUnitIdleOnCoolFail, galaxy5000UPS130KVA=galaxy5000UPS130KVA, upsBasicInput=upsBasicInput, isxModularDistSysPowerKwhReset=isxModularDistSysPowerKwhReset, airIRSCGroupConfigNumberOfActiveFlowControllers=airIRSCGroupConfigNumberOfActiveFlowControllers, pcnsBypassContactorFailed=pcnsBypassContactorFailed, emStatusContactStatus=emStatusContactStatus, pcnsContactNormal4EnableLogging=pcnsContactNormal4EnableLogging, uioInputContactStatusAlarmStatus=uioInputContactStatusAlarmStatus, dcRectifierOvertempAlarmCleared=dcRectifierOvertempAlarmCleared, airIRRCGroupStatus=airIRRCGroupStatus, galaxyVXUPS625kVA=galaxyVXUPS625kVA, sPDUOutletPowerOnTime=sPDUOutletPowerOnTime, batteryDecrease=batteryDecrease, communityString=communityString, airIRmPmPWWHeatingType=airIRmPmPWWHeatingType, airFMModBlwr2TableSize=airFMModBlwr2TableSize, airIRmPmFilter1Clogged=airIRmPmFilter1Clogged, dcRectifierOVPAlarm=dcRectifierOVPAlarm, airIRmPmAuxAlarm3=airIRmPmAuxAlarm3, airIRG2IdentHardwareRevision=airIRG2IdentHardwareRevision, upsHighPrecOutputFrequency=upsHighPrecOutputFrequency, ePDUSensorStatusModule=ePDUSensorStatusModule, airFMSysDXActualCoolDehum=airFMSysDXActualCoolDehum, coolingUnitEntry=coolingUnitEntry, upsBatteryCabinetTable=upsBatteryCabinetTable, rPDUOverload=rPDUOverload, apcDoorLocked=apcDoorLocked, iemStatusProbeLowHumidViolation=iemStatusProbeLowHumidViolation, ePDUPhaseStatusApparentPower=ePDUPhaseStatusApparentPower, airIRSCUnitIdentModelNumber=airIRSCUnitIdentModelNumber, wirelessSensorPodStatus=wirelessSensorPodStatus, pcnsEnvironmentCommunicationLostEnableLogging=pcnsEnvironmentCommunicationLostEnableLogging, airFMSysAlarmMapOutput11=airFMSysAlarmMapOutput11, isxModularDistModules=isxModularDistModules, rPDUOutletControlTable=rPDUOutletControlTable, rPDU2PhaseConfigOverloadRestriction=rPDU2PhaseConfigOverloadRestriction, airIRmPmFan3=airIRmPmFan3)
mibBuilder.exportSymbols("PowerNet-MIB", airIRRP100UnitConfigHumidifyEnable=airIRRP100UnitConfigHumidifyEnable, rPDU2DeviceStatusApparentPower=rPDU2DeviceStatusApparentPower, airFMSysCtrlTempF=airFMSysCtrlTempF, airFMSysDehumDeadband=airFMSysDehumDeadband, rPDU2IndentAppBuildDate=rPDU2IndentAppBuildDate, airFMAlarmConditionsIndex=airFMAlarmConditionsIndex, airIRmPmSetpointTemperatureNight=airIRmPmSetpointTemperatureNight, isxModularDistSysPowerKw=isxModularDistSysPowerKw, upsBatteryCabinetFuse=upsBatteryCabinetFuse, airFMModServIntComp2=airFMModServIntComp2, xATSOutputFrequencyAlarm=xATSOutputFrequencyAlarm, atsStatusInput=atsStatusInput, airIRmPmSensor16Failure=airIRmPmSensor16Failure, ceInformationalConditionCleared=ceInformationalConditionCleared, pmmInputActiveEnergyDelivered=pmmInputActiveEnergyDelivered, dm3ConfigOutRlyAlarm=dm3ConfigOutRlyAlarm, atsOutputBankPower=atsOutputBankPower, airIRmPmCmp1HysteresisWinterK=airIRmPmCmp1HysteresisWinterK, airIRRCUnitRunHoursFan6=airIRRCUnitRunHoursFan6, airFMSysCoolPIDMethod=airFMSysCoolPIDMethod, coolingUnitExtendedStringValue=coolingUnitExtendedStringValue, airFMSysResetSysFailure=airFMSysResetSysFailure, battManString2BatteryCalibIndex=battManString2BatteryCalibIndex, xPDUIdentFirmwareAppOSRev=xPDUIdentFirmwareAppOSRev, emsSensorStatusSensorNormalState=emsSensorStatusSensorNormalState, airIRG2GroupConfigConfigurationType=airIRG2GroupConfigConfigurationType, ePDUPhaseStatusVoltage=ePDUPhaseStatusVoltage, dm3StatusFusesTable=dm3StatusFusesTable, airIRRCUnitRunHoursFanPowerSupplyLeft=airIRRCUnitRunHoursFanPowerSupplyLeft, rARUPowerStatusAruIndex=rARUPowerStatusAruIndex, atsOutputEntry=atsOutputEntry, airIRG3RDUStatusCondenserSaturationTempUS=airIRG3RDUStatusCondenserSaturationTempUS, atsOutputMinPercentLoad=atsOutputMinPercentLoad, upsOutletGroupControlTable=upsOutletGroupControlTable, upsDiagSubSysChargerStatus=upsDiagSubSysChargerStatus, xATSSwitchTimersTableSize=xATSSwitchTimersTableSize, galaxy300UPS20kVA31=galaxy300UPS20kVA31, airIRG3GroupStatusTotalAirFlowMetric=airIRG3GroupStatusTotalAirFlowMetric, accessPXConfigAutoRelockTime=accessPXConfigAutoRelockTime, dcmim2StatusBattCapacityTestResult=dcmim2StatusBattCapacityTestResult, upsDiagSubSysIDRCHardwareRev=upsDiagSubSysIDRCHardwareRev, sPDUOutletControl=sPDUOutletControl, memOutletConfigTable=memOutletConfigTable, xATSTestingResultsLastUnloadedDuration=xATSTestingResultsLastUnloadedDuration, pcbeHttpsPort=pcbeHttpsPort, battManOhmicValueCorrectionFactor=battManOhmicValueCorrectionFactor, airIRRP100UnitThresholdsReturnAirHighTempUS=airIRRP100UnitThresholdsReturnAirHighTempUS, coolingUnitStatusAnalogTableSize=coolingUnitStatusAnalogTableSize, upsComm=upsComm, sPDUOutletConfigMSPgsBattCapThresh=sPDUOutletConfigMSPgsBattCapThresh, isxModularOutputFrequencyViolationCleared=isxModularOutputFrequencyViolationCleared, airIRmPmLouver1ManOpEnable=airIRmPmLouver1ManOpEnable, coolingUnitExtendedStringTableSize=coolingUnitExtendedStringTableSize, airFMSysDehumPIDResetRateI=airFMSysDehumPIDResetRateI, airIRG3GroupSetpointsEntry=airIRG3GroupSetpointsEntry, pcnsContactFault3ShutdownDelay=pcnsContactFault3ShutdownDelay, airIRmPmHotgasHeating=airIRmPmHotgasHeating, xPDUBranchBreakerRDPFeed=xPDUBranchBreakerRDPFeed, mtrapargsIpAddress=mtrapargsIpAddress, contactNumber=contactNumber, xATSACMonitoringPoint=xATSACMonitoringPoint, airIRmPmEheating3HysteresisF=airIRmPmEheating3HysteresisF, airIRmPmFan1Running=airIRmPmFan1Running, pcnsContactNormal4EnableCommandFile=pcnsContactNormal4EnableCommandFile, pcbeAlarms=pcbeAlarms, airIRmPmMyZoneRoomTemperatureC=airIRmPmMyZoneRoomTemperatureC, airIRG3CMStatusEvaporatorTempMetric=airIRG3CMStatusEvaporatorTempMetric, xPDUBypassInputVoltagePhaseTable=xPDUBypassInputVoltagePhaseTable, battManSystemPilotTempF=battManSystemPilotTempF, galaxyVMUPS80kVA=galaxyVMUPS80kVA, airIRmPmPump4Speed=airIRmPmPump4Speed, dm3StatusSysTempSanity=dm3StatusSysTempSanity, rPDU2SensorTempHumidityStatusTempPeakC=rPDU2SensorTempHumidityStatusTempPeakC, ais5000UPS40kVA=ais5000UPS40kVA, xPDUOutputRelaysTableSize=xPDUOutputRelaysTableSize, isxModularOutputVoltageHighThresholdViolationCleared=isxModularOutputVoltageHighThresholdViolationCleared, eps6000UPSWithSSC=eps6000UPSWithSSC, upsDiagPMFanEstmtdLifetimeRmngPct=upsDiagPMFanEstmtdLifetimeRmngPct, upsPhaseInputTableIndex=upsPhaseInputTableIndex, pcnsCommunicationLostOnBatteryEnableShutdown=pcnsCommunicationLostOnBatteryEnableShutdown, upsOutletGroupConfigName=upsOutletGroupConfigName, airIRRCUnitIdentModelNumber=airIRRCUnitIdentModelNumber, airFMSysCoilFluidCoolDmd=airFMSysCoilFluidCoolDmd, upsOutputRelayStatusEntry=upsOutputRelayStatusEntry, airIRmPmSensor12Failure=airIRmPmSensor12Failure, pmmInputAverageVoltageLtoL=pmmInputAverageVoltageLtoL, airIRRP500UnitStatusSupplyAirTempMetric=airIRRP500UnitStatusSupplyAirTempMetric, airIRG2RDT2RunHoursFanPSEntry=airIRG2RDT2RunHoursFanPSEntry, airFMModHeaterType=airFMModHeaterType, dc2=dc2, memVibrationStatusAlarmStatus=memVibrationStatusAlarmStatus, airFMSysInputs=airFMSysInputs, airIRRP500UnitServiceIntervalHumidifier=airIRRP500UnitServiceIntervalHumidifier, sPDUIdentMSPIndex=sPDUIdentMSPIndex, xATSInputContactNumContacts=xATSInputContactNumContacts, dm3ConfigRect2ofNAlarm=dm3ConfigRect2ofNAlarm, moduleName=moduleName, galaxyVSUPS100kW=galaxyVSUPS100kW, battManConfigApplication=battManConfigApplication, pcnsAdvancedGroupName=pcnsAdvancedGroupName, airIRmPmHumidifier2Alarm5us=airIRmPmHumidifier2Alarm5us, airIRRP500UnitConfigStartupDelay=airIRRP500UnitConfigStartupDelay, airFMSysAirFltr=airFMSysAirFltr, isxModularDistSubFeedInfoName=isxModularDistSubFeedInfoName, coolingUnitStatusAnalogDescription=coolingUnitStatusAnalogDescription, xATSGeneratorLowOilLevelAlarmCleared=xATSGeneratorLowOilLevelAlarmCleared, upsOutputRelayDetailedStatus=upsOutputRelayDetailedStatus, airIRRP500UnitConfigIdleOnCoolFail=airIRRP500UnitConfigIdleOnCoolFail, pduOnBatteryMode=pduOnBatteryMode, sPDUOutletStatusMSPOutletIndex=sPDUOutletStatusMSPOutletIndex, isxModularDistModuleBreakerPhaseIndex=isxModularDistModuleBreakerPhaseIndex, upsAdvInputMinLineVoltage=upsAdvInputMinLineVoltage, xATSSwitchSettingsNeutralTransferTime=xATSSwitchSettingsNeutralTransferTime, airFMModIdentModuleIndex=airFMModIdentModuleIndex, upsAdvOutputCrestFactor=upsAdvOutputCrestFactor, airIRG2RDT2StatusDischargePressureUS=airIRG2RDT2StatusDischargePressureUS, airFMSysAlarmMapInput7=airFMSysAlarmMapInput7, airFMStatusModuleSupplyHum=airFMStatusModuleSupplyHum, chargerOutput=chargerOutput, uioOutputRelayStatusRelayLocation=uioOutputRelayStatusRelayLocation, wirelessSensorPodStatusEntry=wirelessSensorPodStatusEntry, ePDUDeviceStatusVersion=ePDUDeviceStatusVersion, pmmInputFrequencyDeviationAlarm=pmmInputFrequencyDeviationAlarm, memFluidSensorStatusSensorState=memFluidSensorStatusSensorState, pcbeComsLostResolved=pcbeComsLostResolved, upsEcoModeCountSinceReset=upsEcoModeCountSinceReset, airIRRP100UnitStatusDehumidifyDemand=airIRRP100UnitStatusDehumidifyDemand, pmmInputTotalPowerFactor=pmmInputTotalPowerFactor, coolingUnitExtendedDiscreteTableSize=coolingUnitExtendedDiscreteTableSize, sPDUMasterStatusVMOverloadCondition=sPDUMasterStatusVMOverloadCondition, dm3ConfigRelays=dm3ConfigRelays, emsDoorSensorConfigTable=emsDoorSensorConfigTable, upsInputContactOutputRelayFaultCleared=upsInputContactOutputRelayFaultCleared, xPDUInputContactCurrentState=xPDUInputContactCurrentState, pcnsBypassManualEnabledDesc=pcnsBypassManualEnabledDesc, rPDU2OutletMeteredStatusName=rPDU2OutletMeteredStatusName, emConfigProbeMaxHumidEnable=emConfigProbeMaxHumidEnable, rPDU2GroupEnergyReset=rPDU2GroupEnergyReset, mtrapargsString07=mtrapargsString07, battManStringStatus=battManStringStatus, xATSInputContactNormalState=xATSInputContactNormalState, rPDU2OutletMeteredStatusCurrent=rPDU2OutletMeteredStatusCurrent, pcbeCriticalFlag=pcbeCriticalFlag, xPDUBranchBreakerRating=xPDUBranchBreakerRating, pcnsHumidityInRangeProbe1CommandFileDelay=pcnsHumidityInRangeProbe1CommandFileDelay, airIRRP100GroupStatusReheatDemand=airIRRP100GroupStatusReheatDemand, airIRmPmPump3LinearRangeF=airIRmPmPump3LinearRangeF, airIRmPmFan1Speed=airIRmPmFan1Speed, uioSensorStatusSensorID=uioSensorStatusSensorID, rPDU2SensorDiscreteConfigIndex=rPDU2SensorDiscreteConfigIndex, pcnsTempOutOfRangeProbe1EnableLogging=pcnsTempOutOfRangeProbe1EnableLogging, upsAdvIdentSerialNumber=upsAdvIdentSerialNumber, rARUFanStatusTable=rARUFanStatusTable, airFMGroupAutoRoleNumPrimary=airFMGroupAutoRoleNumPrimary, isxModularDistSubFeedInfoAlarmMinEnable=isxModularDistSubFeedInfoAlarmMinEnable, airIRRP100UnitStatusCompressorDriveControlCardTempUS=airIRRP100UnitStatusCompressorDriveControlCardTempUS, xATSGeneratorOverspeed=xATSGeneratorOverspeed, airIRRP500UnitThresholds=airIRRP500UnitThresholds, bypassOK=bypassOK, iemConfigProbeLowTempThreshold=iemConfigProbeLowTempThreshold, coolingUnitStatusAnalog=coolingUnitStatusAnalog, envLowTempThresholdViolationCleared=envLowTempThresholdViolationCleared, rPDU2OutletMeteredConfigModule=rPDU2OutletMeteredConfigModule, wirelessSensorConfigMinTempThresh=wirelessSensorConfigMinTempThresh, battManConfigCellsperBattery=battManConfigCellsperBattery, memInputAnalogHighThresh=memInputAnalogHighThresh, apcOutletStateAbnormal=apcOutletStateAbnormal, upsHighPrecBatteryPackCartridgeInstallDate=upsHighPrecBatteryPackCartridgeInstallDate, ePDUOutletControlIndex=ePDUOutletControlIndex, atsIdentDateOfManufacture=atsIdentDateOfManufacture, apcEnvLowHumidityThresholdViolation=apcEnvLowHumidityThresholdViolation, xATSDevice=xATSDevice, airIRmPmPump1MaxAdjust=airIRmPmPump1MaxAdjust, sideCarFramePositionID=sideCarFramePositionID, memSensorsCommStatus=memSensorsCommStatus, xATSS1BadPhaseBalanceCleared=xATSS1BadPhaseBalanceCleared, airFMSysCndsrFluidVlvType=airFMSysCndsrFluidVlvType, upsParallelSysUpsAlarmStatus=upsParallelSysUpsAlarmStatus, airFMModServIntResetEntry=airFMModServIntResetEntry, upsInverterOverTemperatureCleared=upsInverterOverTemperatureCleared, rPDU2OutletSwitchedControlIndex=rPDU2OutletSwitchedControlIndex, upsIntegratedATSSourceTable=upsIntegratedATSSourceTable, apcOutletStateNormal=apcOutletStateNormal, emsSensorControl=emsSensorControl, upsDiagIMType=upsDiagIMType, pmmInputCurrentMaximumAlarm=pmmInputCurrentMaximumAlarm, gracefulShutdown=gracefulShutdown, rPDUOutletConfigIndex=rPDUOutletConfigIndex, airIRmPmSensor16Defect=airIRmPmSensor16Defect, modEnvMgr=modEnvMgr, emConfigProbeLocation=emConfigProbeLocation, accessPXConfigBeaconLocation=accessPXConfigBeaconLocation, upsDiagSubSysInverterFrameIndex=upsDiagSubSysInverterFrameIndex, cpsSerialFacility=cpsSerialFacility, emConfigProbeHighTempEnable=emConfigProbeHighTempEnable, rPDU2BankStatusModule=rPDU2BankStatusModule, xPDUOutputCurrentHighAlarm=xPDUOutputCurrentHighAlarm, airIRG3GroupStatusCoolOutput=airIRG3GroupStatusCoolOutput, airIRmPmSetpointTemperatureNightF=airIRmPmSetpointTemperatureNightF, airIRmPmDrycooler1WinterStartTemp=airIRmPmDrycooler1WinterStartTemp, airIRRP100UnitServiceIntervalAirFilterAlarm=airIRRP100UnitServiceIntervalAirFilterAlarm, airIRG2RDT2StatusOperateMode=airIRG2RDT2StatusOperateMode, ais5000UPS=ais5000UPS, battManString2ResponseTestCurrentBenchmarkTableSize=battManString2ResponseTestCurrentBenchmarkTableSize, pmmInputFrequency=pmmInputFrequency, isxModularTotalOutputCurrentMinThresholdViolation=isxModularTotalOutputCurrentMinThresholdViolation, airIRG2RDT2RunHoursEvapFanIndex=airIRG2RDT2RunHoursEvapFanIndex, airIRSCUnitIdentName=airIRSCUnitIdentName, isxModularDistSysPowerKwhPhaseUsage=isxModularDistSysPowerKwhPhaseUsage, aruFanPoorPerformanceAlarm=aruFanPoorPerformanceAlarm, atsOutputBankMaxLoad=atsOutputBankMaxLoad, wirelessSensorStatusMaxHumidityThresh=wirelessSensorStatusMaxHumidityThresh, airIRmPmAuxAlarm2=airIRmPmAuxAlarm2, ePDUDeviceStatusModule=ePDUDeviceStatusModule, airIRG2RDT2ThresholdsRackInletHighTempMetric=airIRG2RDT2ThresholdsRackInletHighTempMetric, airIRmPmCommon5=airIRmPmCommon5, xATSGeneratorOutputPhaseEntry=xATSGeneratorOutputPhaseEntry, upsEcoModeStatus=upsEcoModeStatus, airIRmPmPump2StartTemperatureF=airIRmPmPump2StartTemperatureF, apcRegisteredUserConfigChange=apcRegisteredUserConfigChange, apcInternalCommunicationFault=apcInternalCommunicationFault, upsDiagSubSysUsrSuppBattMonitorStatus=upsDiagSubSysUsrSuppBattMonitorStatus, sPDUIdentVMTable=sPDUIdentVMTable, atsOutputMinLoad=atsOutputMinLoad, airIRRP500GroupConfigNumberofBackupUnits=airIRRP500GroupConfigNumberofBackupUnits, airIRRP500Series=airIRRP500Series, xPDUCircuitBreakers=xPDUCircuitBreakers, battManUnitFirmwareRev=battManUnitFirmwareRev, atsNumInputPhases=atsNumInputPhases, airIRG3GroupSetpointsAirFlowControl=airIRG3GroupSetpointsAirFlowControl, upsDiagnosticPowerCabinetAmbientTemperature=upsDiagnosticPowerCabinetAmbientTemperature, emsStatusProbeCount=emsStatusProbeCount, rPDUOutletBankIndex=rPDUOutletBankIndex, xATSGeneratorOutputPowerFactor=xATSGeneratorOutputPowerFactor, rpduWarningCondition=rpduWarningCondition, dcMinorAlarm=dcMinorAlarm, upsOutletGroupConfig=upsOutletGroupConfig, upsDiagBatteryEntry=upsDiagBatteryEntry, upsIntegratedATSSourceIndex=upsIntegratedATSSourceIndex, xATSTestingScheduleTestTime=xATSTestingScheduleTestTime, rARUSensorsConfigTableSize=rARUSensorsConfigTableSize, upsDiagSubSysExternalSwitchGearSerialNum=upsDiagSubSysExternalSwitchGearSerialNum, dm3StatusFusesTableSize=dm3StatusFusesTableSize, emsProbeStatusProbeHighTempThresh=emsProbeStatusProbeHighTempThresh, xATSTestInitiated=xATSTestInitiated, dcmim2ControlSystem=dcmim2ControlSystem, upsDiagSubSysFrameEntry=upsDiagSubSysFrameEntry, airIRmAlarmsEventCode=airIRmAlarmsEventCode, cpsSerialPortSocketPort=cpsSerialPortSocketPort, upsAdvBatteryPower=upsAdvBatteryPower, airIRmPmPump2StartTemperature=airIRmPmPump2StartTemperature, envHighTempThresholdViolationCleared=envHighTempThresholdViolationCleared, memDoorStatusAlarmStatus=memDoorStatusAlarmStatus, airIRSCUnitSetptsCoolDeadbandMetric=airIRSCUnitSetptsCoolDeadbandMetric)
mibBuilder.exportSymbols("PowerNet-MIB", upsDiagSubSysIDRCIndex=upsDiagSubSysIDRCIndex, pcnsMinLoadCapabilityRegainedEnableLogging=pcnsMinLoadCapabilityRegainedEnableLogging, dm3IdentSysDescriptionTableSize=dm3IdentSysDescriptionTableSize, upsEcoModeSetting=upsEcoModeSetting, airIRmPmDehumidificStartHumidity=airIRmPmDehumidificStartHumidity, bypassPowerSupplyFailure=bypassPowerSupplyFailure, airIRG2GroupStatusMaxRackInletTempMetric=airIRG2GroupStatusMaxRackInletTempMetric, airFMGroupFailoverModMaintRequired=airFMGroupFailoverModMaintRequired, emsProbeStatusProbeHumidity=emsProbeStatusProbeHumidity, isxModularDistSysPowerEntry=isxModularDistSysPowerEntry, emConfigProbeMinTempThreshold=emConfigProbeMinTempThreshold, airIRSCUnitConfigOutputSource=airIRSCUnitConfigOutputSource, envLowHumidityThresholdViolation=envLowHumidityThresholdViolation, pmmInputPhaseTable=pmmInputPhaseTable, sPDUMasterStatusMSPName=sPDUMasterStatusMSPName, cpsSerialInclude=cpsSerialInclude, pmmBranchCircuitBreakerIdentifier=pmmBranchCircuitBreakerIdentifier, sPDUMasterStatusMSPEntry=sPDUMasterStatusMSPEntry, pmmInputPhaseAngle=pmmInputPhaseAngle, airIRmPmCommon2=airIRmPmCommon2, xATSGeneratorStatusModeSwitchPosition=xATSGeneratorStatusModeSwitchPosition, airFMSysDischAirPtrn=airFMSysDischAirPtrn, upsPhaseInputCurrent=upsPhaseInputCurrent, upsParallelDiagSubSysBreakerStatus=upsParallelDiagSubSysBreakerStatus, pmmInput=pmmInput, airFMGroupCfg=airFMGroupCfg, rARUConfigEntry=rARUConfigEntry, airIRmIdentModelNumber=airIRmIdentModelNumber, emsStatusOutletCount=emsStatusOutletCount, airIRG3AlarmsEventCode=airIRG3AlarmsEventCode, airIRRP500GroupConfigLoadAssistEnable=airIRRP500GroupConfigLoadAssistEnable, external=external, airIRRP500UnitStatusContainmtDPMetric=airIRRP500UnitStatusContainmtDPMetric, rPDUStatusPhaseTableSize=rPDUStatusPhaseTableSize, dm3StatusLVDState=dm3StatusLVDState, xATSGeneratorLowBatteryVoltDuringCrankAlarm=xATSGeneratorLowBatteryVoltDuringCrankAlarm, atsOutputLoad=atsOutputLoad, upsDiagSubSysIDRCSerialNum=upsDiagSubSysIDRCSerialNum, pcnsParallelRedundancyLostShutdownDelay=pcnsParallelRedundancyLostShutdownDelay, apCPSSerialHUP=apCPSSerialHUP, iemConfigRelayNormalState=iemConfigRelayNormalState, sPDUOutletControlMSPEntry=sPDUOutletControlMSPEntry, pcnsMinRedundancyLostEnableLogging=pcnsMinRedundancyLostEnableLogging, airFMModServIntResetModuleIndex=airFMModServIntResetModuleIndex, upsBasicIdentName=upsBasicIdentName, xPDUBranchBreakerUnderCurrentThreshold=xPDUBranchBreakerUnderCurrentThreshold, rARUSensorsConfigTable=rARUSensorsConfigTable, xATSGeneratorVeryHighCoolantTempAlarmCleared=xATSGeneratorVeryHighCoolantTempAlarmCleared, rPDU2OutletSwitchedControlNumber=rPDU2OutletSwitchedControlNumber, isxModDistribution=isxModDistribution, upsWarningCondition=upsWarningCondition, airIRG3CMStatusEvaporatorTempUS=airIRG3CMStatusEvaporatorTempUS, rPDU2BankPropertiesIndex=rPDU2BankPropertiesIndex, airIRRP100UnitStatusRackInletTempMetric=airIRRP100UnitStatusRackInletTempMetric, pcnsCommunicationEstablishedCommandFileDelay=pcnsCommunicationEstablishedCommandFileDelay, atsConfigBankOverLoadThreshold=atsConfigBankOverLoadThreshold, cpsSerialGlobal=cpsSerialGlobal, sPDUMasterConfigVM=sPDUMasterConfigVM, airIRRP500UnitIdentHardwareRevision=airIRRP500UnitIdentHardwareRevision, cpsInfoSerialPortEntry=cpsInfoSerialPortEntry, airIRmPmCompressor1Alarm=airIRmPmCompressor1Alarm, emsStatusSysTempUnits=emsStatusSysTempUnits, airFMSysReheat=airFMSysReheat, isxModularDistSubFeeds=isxModularDistSubFeeds, airFMSysInputTableSize=airFMSysInputTableSize, airIRmPmDrycooler4Hysteresis=airIRmPmDrycooler4Hysteresis, mspOutletOff=mspOutletOff, rPDU2PhaseStatusModule=rPDU2PhaseStatusModule, airIRSCUnitServiceIntervals=airIRSCUnitServiceIntervals, airIRSCUnitRunHoursCondenserFan1=airIRSCUnitRunHoursCondenserFan1, dcCurrentLimitAlarm=dcCurrentLimitAlarm, emsInputContactStatusInputContactState=emsInputContactStatusInputContactState, pcnsContactFault2=pcnsContactFault2, airFMSysEconIsolVlvOpenDelay=airFMSysEconIsolVlvOpenDelay, emStatusContactsNumContacts=emStatusContactsNumContacts, airFMStatusSystemRemoteAvgTempF=airFMStatusSystemRemoteAvgTempF, smartRelayFaultCleared=smartRelayFaultCleared, upsOutputRelayConfigTable=upsOutputRelayConfigTable, upsOutletGroupConfigLoadShedRuntimeRemaining=upsOutletGroupConfigLoadShedRuntimeRemaining, pcnsShutdown=pcnsShutdown, dm3StatusOEMrectOffset=dm3StatusOEMrectOffset, dm3StatusSysRectType=dm3StatusSysRectType, atsOutputBankMaxPercentLoad=atsOutputBankMaxPercentLoad, upsHighPrecBatteryCurrentPolarity=upsHighPrecBatteryCurrentPolarity, airFMGroupFailoverSysNoSensorsAvailable=airFMGroupFailoverSysNoSensorsAvailable, sPDUOutletConfigVMPowerOnTime=sPDUOutletConfigVMPowerOnTime, wirelessSensorPodConfigPortIndex=wirelessSensorPodConfigPortIndex, pcnsEnvironmentCommunicationLost=pcnsEnvironmentCommunicationLost, airFMGroupFailoverModWaterDetected=airFMGroupFailoverModWaterDetected, battManConfigNumberofStrings=battManConfigNumberofStrings, upsOutletGroupConfigTable=upsOutletGroupConfigTable, memOutputStatusEntry=memOutputStatusEntry, xATSGeneratorServiceTotalRunHoursLifetime=xATSGeneratorServiceTotalRunHoursLifetime, upsBatteryCabBlockLocalIndex=upsBatteryCabBlockLocalIndex, coolingUnitStatusDiscreteValueAsInteger=coolingUnitStatusDiscreteValueAsInteger, memSensorsHumidityThreshHysteresis=memSensorsHumidityThreshHysteresis, emsSensorConfigSensorUserName=emsSensorConfigSensorUserName, memOutletStatusOutletNumber=memOutletStatusOutletNumber, airIRmPmMinLimitWaterTemperatureF=airIRmPmMinLimitWaterTemperatureF, upsHighPrecBatteryActualVoltageEntry=upsHighPrecBatteryActualVoltageEntry, isxModularDistInfoEntry=isxModularDistInfoEntry, dcMajorAlarmCleared=dcMajorAlarmCleared, upsParallelSysUpsTableSize=upsParallelSysUpsTableSize, airLEG2Series=airLEG2Series, xATSGeneratorAdvStatusOilPressure=xATSGeneratorAdvStatusOilPressure, apcEnvSTDecTempRateViolation=apcEnvSTDecTempRateViolation, dm3ConfigLVDOpenAlarm=dm3ConfigLVDOpenAlarm, airIRG2RDT2ConfigUnitRoleOverride=airIRG2RDT2ConfigUnitRoleOverride, airFMSysAlarmMapMainModEntry=airFMSysAlarmMapMainModEntry, airIRG3CMServiceIntervalsTable=airIRG3CMServiceIntervalsTable, airIRRP500GroupSetpointsFanSpeedPreference=airIRRP500GroupSetpointsFanSpeedPreference, sPDUOutletConfigMSPmupsName=sPDUOutletConfigMSPmupsName, upsAdvEnergyStorageType=upsAdvEnergyStorageType, dcmim2ConfigBattType=dcmim2ConfigBattType, battManString2BatteryCalibTableSize=battManString2BatteryCalibTableSize, emStatusProbesTable=emStatusProbesTable, emsIdentEMSName=emsIdentEMSName, emsMinorAlarmCleared=emsMinorAlarmCleared, memBeaconConfigModuleNumber=memBeaconConfigModuleNumber, upsPhaseOutput=upsPhaseOutput, airIRRP100GroupStatusDehumidifyDemand=airIRRP100GroupStatusDehumidifyDemand, xPDUSystemOutputPhaseEntry=xPDUSystemOutputPhaseEntry, airIRmPmUnitControlType=airIRmPmUnitControlType, dm3ConfigInRlyEntry=dm3ConfigInRlyEntry, airIRmPmHumidifier2Alarm20us=airIRmPmHumidifier2Alarm20us, rPDULoadDevNumBanks=rPDULoadDevNumBanks, xATSDeviceNominalVoltage=xATSDeviceNominalVoltage, xATS=xATS, airIRRCUnitConfigIdleOnLeakDetect=airIRRCUnitConfigIdleOnLeakDetect, airIRG3CMStatusEntry=airIRG3CMStatusEntry, airIRmPmLouver2=airIRmPmLouver2, upsDiagSubSysIntBypSwitchTableSize=upsDiagSubSysIntBypSwitchTableSize, rPDUOutletNearOverload=rPDUOutletNearOverload, airIRG3RDUThresholdsRDUID=airIRG3RDUThresholdsRDUID, airIRRCUnitStatusFanSpeed=airIRRCUnitStatusFanSpeed, upsCalibrationStackChanged=upsCalibrationStackChanged, rPDU2PhaseToPhaseStatusVoltage1to2=rPDU2PhaseToPhaseStatusVoltage1to2, mconfigClockDate=mconfigClockDate, emsProbeConfigProbeLowHumidityThresh=emsProbeConfigProbeLowHumidityThresh, airFMModRHBlwr1Reset=airFMModRHBlwr1Reset, emsOutputRelayStatusOutputRelayName=emsOutputRelayStatusOutputRelayName, pcnsTurnOffUps=pcnsTurnOffUps, airIRRP100GroupConfigNumberofBackupUnits=airIRRP100GroupConfigNumberofBackupUnits, upsDiagBatteryFrameTableSize=upsDiagBatteryFrameTableSize, chargerIdentModelType=chargerIdentModelType, atsStatus5VPowerSupply=atsStatus5VPowerSupply, dm3IdentSysDescriptionTable=dm3IdentSysDescriptionTable, airIRmPmSetpointTemperatureDayF=airIRmPmSetpointTemperatureDayF, coolingUnitStatusDiscreteTableIndex=coolingUnitStatusDiscreteTableIndex, rPDU2DeviceStatusEnergy=rPDU2DeviceStatusEnergy, airIRmPmDrycooler2SummerStartTempF=airIRmPmDrycooler2SummerStartTempF, airFMSysEconIsolVlvCloseDelay=airFMSysEconIsolVlvCloseDelay, pcnsHumidityInRangeProbe2Desc=pcnsHumidityInRangeProbe2Desc, rPDU2SensorDiscreteStatusName=rPDU2SensorDiscreteStatusName, sPDUIdentSerialNumberVM=sPDUIdentSerialNumberVM, emsProbeConfigProbeLTDecTempVariance=emsProbeConfigProbeLTDecTempVariance, xATSGeneratorServiceTotalRunHoursSinceMaintenance=xATSGeneratorServiceTotalRunHoursSinceMaintenance, pcnsHumidityInRangeProbe1EnableCommandFile=pcnsHumidityInRangeProbe1EnableCommandFile, acceptThisDevice=acceptThisDevice, iemConfigProbeLowHumidEnable=iemConfigProbeLowHumidEnable, airFMSysMaxRemoteTempC=airFMSysMaxRemoteTempC, airFMSysActualHumCtrlMethod=airFMSysActualHumCtrlMethod, airIRSCUnitStatusSuctionPressureUS=airIRSCUnitStatusSuctionPressureUS, sPDUOutletConfigVMOutletIndex=sPDUOutletConfigVMOutletIndex, airIRmPmSupplyAirTemperatureF=airIRmPmSupplyAirTemperatureF, emsSensorStatusSensorName=emsSensorStatusSensorName, memModulesStatusModuleNumber=memModulesStatusModuleNumber, emStatusProbeCurrentHumid=emStatusProbeCurrentHumid, apcDoorSenseDisconnected=apcDoorSenseDisconnected, atsOutputBankMinLoad=atsOutputBankMinLoad, rPDUOutletControlOutletName=rPDUOutletControlOutletName, airIRRP500GroupConfigNumberOfActiveFlowControllers=airIRRP500GroupConfigNumberOfActiveFlowControllers, xATSSwitchTimersStatus=xATSSwitchTimersStatus, isxcErrorAlarmCleared=isxcErrorAlarmCleared, xATSGeneratorOutputTotalPowerFactor=xATSGeneratorOutputTotalPowerFactor, airIRmPmNumberOfDehumidifiers=airIRmPmNumberOfDehumidifiers, isxModularDistModuleOutputLocation=isxModularDistModuleOutputLocation, atsStatus24VPowerSupply=atsStatus24VPowerSupply, dm3Config=dm3Config, rPDU2BankPropertiesBreakerRating=rPDU2BankPropertiesBreakerRating, dm3ConfigBattHighVoltAlarm=dm3ConfigBattHighVoltAlarm, rPDU2DevicePropertiesOrientation=rPDU2DevicePropertiesOrientation, battManString2BatteryEntry=battManString2BatteryEntry, sPDUIdentSerialNumberMSP=sPDUIdentSerialNumberMSP, xATSGeneratorVeryLowOilPressure=xATSGeneratorVeryLowOilPressure, upsOnBatteryDueToFaultCleared=upsOnBatteryDueToFaultCleared, airIRG3CMServiceIntervalsCMID=airIRG3CMServiceIntervalsCMID, emStatusProbeCurrentTemp=emStatusProbeCurrentTemp, atsConfigFrontPanelLockout=atsConfigFrontPanelLockout, airFMModServIntBlwrCtrl1Reset=airFMModServIntBlwrCtrl1Reset, dm3StatusOEMshuntOffset=dm3StatusOEMshuntOffset, atsStatusFrontPanel=atsStatusFrontPanel, iemConfigProbeName=iemConfigProbeName, upsDiagPMEnclIndex=upsDiagPMEnclIndex, upsHighPrecBatteryPackTemperature=upsHighPrecBatteryPackTemperature, xATSGeneratorServiceEngineStartsSinceMaintenance=xATSGeneratorServiceEngineStartsSinceMaintenance, upsParallelSysRedundancy=upsParallelSysRedundancy, airIRmPmPump4Runtime=airIRmPmPump4Runtime, atsInputType=atsInputType, memInputStateSensors=memInputStateSensors, atsOverloadCleared=atsOverloadCleared, battManStringDischarge10to60Seconds=battManStringDischarge10to60Seconds, smartUPS1000=smartUPS1000, airIRmPmDehumidificManOpRunning=airIRmPmDehumidificManOpRunning, atsInputVoltageOrientation=atsInputVoltageOrientation, ats4gPowerSupplyVoltageCalibrationFactor=ats4gPowerSupplyVoltageCalibrationFactor, pcnsNetworkComsLostResolved=pcnsNetworkComsLostResolved, memVibrationSensorStatusTable=memVibrationSensorStatusTable, airIRRCGroupConfigCoolResetRateI=airIRRCGroupConfigCoolResetRateI, uioSensorStatusEntry=uioSensorStatusEntry, airIRmPmDehumidificRuntime=airIRmPmDehumidificRuntime, airIRmPmDrycooler4Running=airIRmPmDrycooler4Running, airIRG3IdentTableSize=airIRG3IdentTableSize, airFMSysAlarmMapExpMod2HighSupplyTemp=airFMSysAlarmMapExpMod2HighSupplyTemp, upsBasicIdentFamilyName=upsBasicIdentFamilyName, pmmBranchCircuitAngle=pmmBranchCircuitAngle, rPDUStatusPhaseState=rPDUStatusPhaseState, memOutputStatusCurrentState=memOutputStatusCurrentState, airIRG2Group=airIRG2Group, ePDUPhaseConfigEntry=ePDUPhaseConfigEntry, airFMModBlwr2DecTime=airFMModBlwr2DecTime, mtrapargsString02=mtrapargsString02, airIRmPmWinterModeStartTemp=airIRmPmWinterModeStartTemp, emsProbeConfigTable=emsProbeConfigTable, emsAlarmDeviceControlDeviceIndex=emsAlarmDeviceControlDeviceIndex, xAPCControllerFirmwareUpdateTransferFailed=xAPCControllerFirmwareUpdateTransferFailed, isxcWarningAlarm=isxcWarningAlarm, upsAdvConfigBasicSignalLowBatteryDuration=upsAdvConfigBasicSignalLowBatteryDuration, airFMSysCompMinOffTime=airFMSysCompMinOffTime, memInputsStatusTableSize=memInputsStatusTableSize, pcbeCriticalEventResolved=pcbeCriticalEventResolved, pcnsContactFault1=pcnsContactFault1, battManConfigMaxPilotTempC=battManConfigMaxPilotTempC, airIRG2IdentSerialNumber=airIRG2IdentSerialNumber, pcnsRunTimeBelowThresholdCommandFileThreshold=pcnsRunTimeBelowThresholdCommandFileThreshold, cpsCardIdentFunc=cpsCardIdentFunc, iemConfigProbeMaxTempEnable=iemConfigProbeMaxTempEnable, cpsMultipleIP=cpsMultipleIP, mconfigTFTPServerIP=mconfigTFTPServerIP, galaxy300UPS60kVA33=galaxy300UPS60kVA33, dm3ConfigSysDescriptionEntry=dm3ConfigSysDescriptionEntry, rPDU2GroupNumberOfDevices=rPDU2GroupNumberOfDevices, atsSourceStatusFail=atsSourceStatusFail, airFMModCoolModuleIndex=airFMModCoolModuleIndex, rPDU2IdentFirmwareRev=rPDU2IdentFirmwareRev, pcnsAdvancedShutdownOnLostRedundancy=pcnsAdvancedShutdownOnLostRedundancy, upsDiagnosticPowerModules=upsDiagnosticPowerModules, wirelessSensorPodConfigEntry=wirelessSensorPodConfigEntry, rPDU2OutletSwitchedStatusEntry=rPDU2OutletSwitchedStatusEntry, wirelessSensorPodStatusHighTempThresh=wirelessSensorPodStatusHighTempThresh, airIRmPmDrycooler4SummerStartTempC=airIRmPmDrycooler4SummerStartTempC, atsInputName=atsInputName, pcnsUpdateDesc=pcnsUpdateDesc, upsInputContactAbnormal=upsInputContactAbnormal)
mibBuilder.exportSymbols("PowerNet-MIB", dm3StatusSystemTemp=dm3StatusSystemTemp, upsPhaseOutputEntry=upsPhaseOutputEntry, airIRmPmPWWHeatingLinearRangeF=airIRmPmPWWHeatingLinearRangeF, xATSTestingSimulatePowerFailTimeRemaining=xATSTestingSimulatePowerFailTimeRemaining, airFMModHumidity=airFMModHumidity, rpp400kVA=rpp400kVA, cpsNameService=cpsNameService, airIRmPmDrycooler4HysteresisK=airIRmPmDrycooler4HysteresisK, ePDUCriticalCondition=ePDUCriticalCondition, airFMSysAlarmMapSysEconIsol=airFMSysAlarmMapSysEconIsol, dm3StatusSysRectCurrent=dm3StatusSysRectCurrent, airFMSysAlarmMapSysPrimSensFail=airFMSysAlarmMapSysPrimSensFail, airIRmPmEheating2HysteresisK=airIRmPmEheating2HysteresisK, airIRRP500GroupStatusAirFlowMetric=airIRRP500GroupStatusAirFlowMetric, airFMModCoilDiffPresInWC=airFMModCoilDiffPresInWC, mfiletransferStatus=mfiletransferStatus, memDoorSensorStatusEntry=memDoorSensorStatusEntry, airIRRP100UnitStatusOutputState=airIRRP100UnitStatusOutputState, iemHighTempThresholdViolation=iemHighTempThresholdViolation, xATSIdentModelNumber=xATSIdentModelNumber, pcnsTempOutOfRangeProbe1CommandFileDelay=pcnsTempOutOfRangeProbe1CommandFileDelay, nlStatus=nlStatus, upsDiagSubSysExternalPowerFrameBoardTableSize=upsDiagSubSysExternalPowerFrameBoardTableSize, airIRmPmSensor10Defect=airIRmPmSensor10Defect, airFMSysAlarmMapExpMod2MaintReq=airFMSysAlarmMapExpMod2MaintReq, xPDUSystemOutputTotalPowerFactor=xPDUSystemOutputTotalPowerFactor, airFMModRHBlwr2=airFMModRHBlwr2, airIRmPmReheat3Failure=airIRmPmReheat3Failure, airIRG3Alarms=airIRG3Alarms, matrixUPS5000=matrixUPS5000, pcnsBypassContactorFailedCommandFilePath=pcnsBypassContactorFailedCommandFilePath, pcnsNetCommunicationLostCommandFileDelay=pcnsNetCommunicationLostCommandFileDelay, upsDiagMCCBBoxStatus=upsDiagMCCBBoxStatus, uioSensorConfigLowTemperatureEnable=uioSensorConfigLowTemperatureEnable, pcnsPowerFailedShutdownDelay=pcnsPowerFailedShutdownDelay, xATSTestingResultsLastLoadedDuration=xATSTestingResultsLastLoadedDuration, airFMModFirmwareRev=airFMModFirmwareRev, wirelessSensorPodConfigAlarmGeneration=wirelessSensorPodConfigAlarmGeneration, subfeedBreakerUpperAcceptPowerCritical=subfeedBreakerUpperAcceptPowerCritical, airLELSeries=airLELSeries, dm3ConfigSystem=dm3ConfigSystem, upsBatteryCabStringFuseStatus=upsBatteryCabStringFuseStatus, upsDiagSubSysXRCommunicationCardFrameIndex=upsDiagSubSysXRCommunicationCardFrameIndex, dm3ConfigConvDiagAlarm=dm3ConfigConvDiagAlarm, upsParallelInputTotalActivePower=upsParallelInputTotalActivePower, memSmokeSensorConfigEntry=memSmokeSensorConfigEntry, cpsHostName=cpsHostName, apcUnregisteredUserAccessDenied=apcUnregisteredUserAccessDenied, emStatusCommStatus=emStatusCommStatus, rPDU2DeviceStatusIndex=rPDU2DeviceStatusIndex, xATSOutputCurrentLowAlarmCleared=xATSOutputCurrentLowAlarmCleared, memDoorSensorConfigSensorName=memDoorSensorConfigSensorName, pmmInputMaxInstantaneousNeutralCurrent=pmmInputMaxInstantaneousNeutralCurrent, xATSGeneratorLowFuelLevelAlarmCleared=xATSGeneratorLowFuelLevelAlarmCleared, pcnsCommunicationLostOnBatteryDesc=pcnsCommunicationLostOnBatteryDesc, xPDUInputContactNumber=xPDUInputContactNumber, emStatusProbeMaxTempViolation=emStatusProbeMaxTempViolation, airIRRP500UnitThresholdsReturnAirHighTempMetric=airIRRP500UnitThresholdsReturnAirHighTempMetric, airIRRP100GroupSetpointsSupplyAirMetric=airIRRP100GroupSetpointsSupplyAirMetric, atsOutputBankMaxCurrent=atsOutputBankMaxCurrent, airIRmPmDrycooler3=airIRmPmDrycooler3, airFMSysAlarmMapExpMod1Table=airFMSysAlarmMapExpMod1Table, moduleNumber=moduleNumber, xPDUBranchBreakerLocation=xPDUBranchBreakerLocation, upsDiagSubSysPowerFactorCorrectionTable=upsDiagSubSysPowerFactorCorrectionTable, pcnshostname=pcnshostname, coolingUnitConfigurationAnalogEntry=coolingUnitConfigurationAnalogEntry, upsHighPrecBatteryPackOnlyEntry=upsHighPrecBatteryPackOnlyEntry, airIRRP500UnitServiceIntervalCondensatePump=airIRRP500UnitServiceIntervalCondensatePump, galaxyVMUPS200kVA=galaxyVMUPS200kVA, airFMSysAlarmMapExpMod1CoolFail=airFMSysAlarmMapExpMod1CoolFail, memModulesConfigTable=memModulesConfigTable, rPDUOutletStatusOutletPhase=rPDUOutletStatusOutletPhase, airIRRP500UnitServiceIntervalFansAlarm=airIRRP500UnitServiceIntervalFansAlarm, pmmBranchCircuitBreakerAverageCurrent=pmmBranchCircuitBreakerAverageCurrent, airFMModBlwr2InverterTempC=airFMModBlwr2InverterTempC, upsSideCarFrameLayoutTableSize=upsSideCarFrameLayoutTableSize, pcnsContactNormal3CommandFileDelay=pcnsContactNormal3CommandFileDelay, airIRG2RDT2RunHours=airIRG2RDT2RunHours, airFMModHumModuleIndex=airFMModHumModuleIndex, airIRG3RDUStatusStopOnLeakDetect=airIRG3RDUStatusStopOnLeakDetect, xATSGeneratorOutputTotalApparentPower=xATSGeneratorOutputTotalApparentPower, galaxy5500UPS100KVA=galaxy5500UPS100KVA, isxModularDistSysOutputFrequency=isxModularDistSysOutputFrequency, airFMModServIntComp1Reset=airFMModServIntComp1Reset, upsAdvStateTotaltimeonbypass=upsAdvStateTotaltimeonbypass, airFMAlarmConditionsTable=airFMAlarmConditionsTable, dm3IdentSysFWVersion=dm3IdentSysFWVersion, dcmim2StatusSysAmbientTemp=dcmim2StatusSysAmbientTemp, sPDUIdentMSPTable=sPDUIdentMSPTable, airIRmIdentSerialNumber=airIRmIdentSerialNumber, xPDUBypassInputVoltagePhaseTableSize=xPDUBypassInputVoltagePhaseTableSize, atsOutputPower=atsOutputPower, upsParallelInputMaxCurrent=upsParallelInputMaxCurrent, airIRmPmDrycooler1HysteresisK=airIRmPmDrycooler1HysteresisK, upsDiagIMStatus=upsDiagIMStatus, upsDiagUsrSuppSwitchgearMonitorSerialNum=upsDiagUsrSuppSwitchgearMonitorSerialNum, rPDU2OutletMeteredTableSize=rPDU2OutletMeteredTableSize, airFMSysAlarmMapExpMod1Entry=airFMSysAlarmMapExpMod1Entry, airIRmPmGvalveManOperationEnable=airIRmPmGvalveManOperationEnable, airFMModReturnTempF=airFMModReturnTempF, dcRectifierOVPAlarmCleared=dcRectifierOVPAlarmCleared, isxModularDistModuleInfoModIndex=isxModularDistModuleInfoModIndex, pmmSiteConfigNumberofPanel=pmmSiteConfigNumberofPanel, dm3StatusLVDName=dm3StatusLVDName, dm3ConfigRectAlarms=dm3ConfigRectAlarms, memModulesStatusEntry=memModulesStatusEntry, upsAdvBatteryCapacity=upsAdvBatteryCapacity, upsDiagSubSysPSUTable=upsDiagSubSysPSUTable, sPDUOutletConfigMSPmupsP1HiHum=sPDUOutletConfigMSPmupsP1HiHum, battManUnitRelayStuck=battManUnitRelayStuck, airFMIdentContact=airFMIdentContact, dm3ConfigFusesEntry=dm3ConfigFusesEntry, memSmokeSensorStatusSensorName=memSmokeSensorStatusSensorName, upsDiagnosticSLCFirmwareRev=upsDiagnosticSLCFirmwareRev, symmetra3PhaseUPS=symmetra3PhaseUPS, airFMSysAlarmMapExpMod1CondPumpFail=airFMSysAlarmMapExpMod1CondPumpFail, airFMModHotWaterVlvPos=airFMModHotWaterVlvPos, cpsSerialPortDBalarm=cpsSerialPortDBalarm, cpsInfoSerialPortErrOverrun=cpsInfoSerialPortErrOverrun, airIRRP500UnitStatusReturnHumidity=airIRRP500UnitStatusReturnHumidity, airIRmPmCompressor2Alarm=airIRmPmCompressor2Alarm, emsVibrationSensorCommStatus=emsVibrationSensorCommStatus, airIRRP500GroupStatusReheatDemand=airIRRP500GroupStatusReheatDemand, airIRmPmEheating1HysteresisK=airIRmPmEheating1HysteresisK, airIRRP100UnitStatusDehumidifyOutput=airIRRP100UnitStatusDehumidifyOutput, msvmOverload=msvmOverload, airIRRDU=airIRRDU, emConfigProbeMinHumidThreshold=emConfigProbeMinHumidThreshold, airIRSCGroupStatusMinRackInletTempMetric=airIRSCGroupStatusMinRackInletTempMetric, galaxy300UPS20kVA33=galaxy300UPS20kVA33, emsVibrationSensorStatusTableSize=emsVibrationSensorStatusTableSize, chargerInputPhaseMinVoltage=chargerInputPhaseMinVoltage, airFMModHumTableSize=airFMModHumTableSize, airIRmPmEheating4StartTemperature=airIRmPmEheating4StartTemperature, airIRmPmGvalve=airIRmPmGvalve, cpsSerialPortTty=cpsSerialPortTty, dm3IdentSysModel=dm3IdentSysModel, wirelessSensorStatusMinRssiThresh=wirelessSensorStatusMinRssiThresh, airIRmPmCmp1HysteresisSummerF=airIRmPmCmp1HysteresisSummerF, iemConfigConfigRelaysNumRelays=iemConfigConfigRelaysNumRelays, airIRG3CMStatusLocalDisplayOnOffEnabled=airIRG3CMStatusLocalDisplayOnOffEnabled, apcEnvHighTempThresholdViolationCleared=apcEnvHighTempThresholdViolationCleared, pcnsHumidityOutOfRangeProbe2EnableLogging=pcnsHumidityOutOfRangeProbe2EnableLogging, upsEcoModeLowVoltThreshold=upsEcoModeLowVoltThreshold, airIRRP100GroupSetpointsFanSpeedControl=airIRRP100GroupSetpointsFanSpeedControl, rPDU2PhaseStatusVoltage=rPDU2PhaseStatusVoltage, wirelessSensorPodStatusMinBatteryThresh=wirelessSensorPodStatusMinBatteryThresh, xATSSwitchStatisticsEntry=xATSSwitchStatisticsEntry, atsStatusCommStatus=atsStatusCommStatus, airFMSysAlarmMapSysOutputIndex=airFMSysAlarmMapSysOutputIndex, pcnsContactFault2EnableLogging=pcnsContactFault2EnableLogging, memInputLocation=memInputLocation, emsOutputRelayConfigOutputRelayIndex=emsOutputRelayConfigOutputRelayIndex, airFMSysNumber=airFMSysNumber, rPDUIdentDateOfManufacture=rPDUIdentDateOfManufacture, upsDiagSubSysChargerIndex=upsDiagSubSysChargerIndex, emsOutputRelayConfigOutputRelayName=emsOutputRelayConfigOutputRelayName, rPDULoadPhaseConfig=rPDULoadPhaseConfig, pmmInputApparentEnergyDelivered=pmmInputApparentEnergyDelivered, memSensorsStatusTableSize=memSensorsStatusTableSize, rARUSensorsTempHighThresh=rARUSensorsTempHighThresh, memFluidSensorConfigAlarmGeneration=memFluidSensorConfigAlarmGeneration, airIRmPmFan1ManOpSpeed=airIRmPmFan1ManOpSpeed, envMaxTempThresholdViolation=envMaxTempThresholdViolation, symmetra3PhaseUPS60kVA=symmetra3PhaseUPS60kVA, airIRRP100UnitStatusContainmtDPUS=airIRRP100UnitStatusContainmtDPUS, battManString2ResponseTestChangeTable=battManString2ResponseTestChangeTable, upsEnergyEfficiency=upsEnergyEfficiency, airIRRP500UnitStatusAirFlowMetric=airIRRP500UnitStatusAirFlowMetric, emConfigProbeTempUnits=emConfigProbeTempUnits, dm3ConfigConvHwVoltAlarm=dm3ConfigConvHwVoltAlarm, airIRG2RDT2StatusHotGasBypassValvePos=airIRG2RDT2StatusHotGasBypassValvePos, apcLocalDisplayIdentDisplayType=apcLocalDisplayIdentDisplayType, upsDiagSubSysXRCommunicationCardTableSize=upsDiagSubSysXRCommunicationCardTableSize, memVibrationSensorConfigSensorName=memVibrationSensorConfigSensorName, upsParallelOutputPower=upsParallelOutputPower, pcnsBypassEnabledCommandFileDelay=pcnsBypassEnabledCommandFileDelay, upsBatteryCabinetEntry=upsBatteryCabinetEntry, airIRmPmHumidifier2Running=airIRmPmHumidifier2Running, receiveTrapType=receiveTrapType, isxModularDistModuleOutputAlarmGeneration=isxModularDistModuleOutputAlarmGeneration, airFMStatusSystemAverageRetTempF=airFMStatusSystemAverageRetTempF, airFMModRHTableSize=airFMModRHTableSize, airIRRP500UnitStatusSupplyHumidity=airIRRP500UnitStatusSupplyHumidity, sPDUOutletControlVMOutletName=sPDUOutletControlVMOutletName, rPDUCommunicationEstablished=rPDUCommunicationEstablished, airFMStatusModuleTableSize=airFMStatusModuleTableSize, airIRRCUnitStatusCoolDemand=airIRRCUnitStatusCoolDemand, upsAdvConfigAlarmLoadOver=upsAdvConfigAlarmLoadOver, emsProbeConnected=emsProbeConnected, rPDU2DeviceStatusPowerSupply2Status=rPDU2DeviceStatusPowerSupply2Status, airIRG2IdentLocation=airIRG2IdentLocation, galaxyVSUPS15kW=galaxyVSUPS15kW, chargerInputPhaseEntry=chargerInputPhaseEntry, sPDUOutletConfigVMName=sPDUOutletConfigVMName, airIRG2RDT2Config=airIRG2RDT2Config, upsInternalOverTemperatureCleared=upsInternalOverTemperatureCleared, mconfigNumTrapReceivers=mconfigNumTrapReceivers, pmmBranchCircuitChannelCTSize=pmmBranchCircuitChannelCTSize, pduInputTransformerOverTemperature=pduInputTransformerOverTemperature, isxModularOutputFrequencyThresholdViolation=isxModularOutputFrequencyThresholdViolation, airIRRP100UnitRunHoursFan1=airIRRP100UnitRunHoursFan1, airIRG3GroupConfigCoolResetRateI=airIRG3GroupConfigCoolResetRateI, upsBypassRelayFaultCleared=upsBypassRelayFaultCleared, apcInternalCommunicationFaultCleared=apcInternalCommunicationFaultCleared, upsEcoModeOnlineSinceReset=upsEcoModeOnlineSinceReset, dm3StatusBreakersTableSize=dm3StatusBreakersTableSize, battManConfigBatteryChemistry=battManConfigBatteryChemistry, ePDUDeviceStatusNumPhases=ePDUDeviceStatusNumPhases, upsBasicSystemInverterStatus=upsBasicSystemInverterStatus, upsOperationalStats=upsOperationalStats, atsOutputMaxCurrent=atsOutputMaxCurrent, uioInputContactStatusEntry=uioInputContactStatusEntry, pcnsParallelRedundancyRegained=pcnsParallelRedundancyRegained, upsAdvConfigUPSFail=upsAdvConfigUPSFail, airFMModCondFluidVlvPos=airFMModCondFluidVlvPos, pcnsHumidityInRangeProbe1=pcnsHumidityInRangeProbe1, xATSSwitchStatistics=xATSSwitchStatistics, xATSSwitchStatisticsIndex=xATSSwitchStatisticsIndex, airIRG3CMConfigDeviceIndex=airIRG3CMConfigDeviceIndex, galaxy5500UPS60KVA=galaxy5500UPS60KVA, airIRmPmEheating3ManOpEnable=airIRmPmEheating3ManOpEnable, rPDU2IdentDateOfManufacture=rPDU2IdentDateOfManufacture, experimental=experimental, airFMGroupCfgSetpointShareStatus=airFMGroupCfgSetpointShareStatus, cpsCardConfPort2=cpsCardConfPort2, upsBasicBatteryLastReplaceDate=upsBasicBatteryLastReplaceDate, dcmim2ConfigSysLowTempReset=dcmim2ConfigSysLowTempReset, wirelessSensorStatusLowTempThresh=wirelessSensorStatusLowTempThresh, memVibrationSensorStatusSensorLocation=memVibrationSensorStatusSensorLocation, airIRmPmSwVersion=airIRmPmSwVersion, rPDU2OutletSwitchedConfigPowerOnTime=rPDU2OutletSwitchedConfigPowerOnTime, battManString2BatteryVoltage=battManString2BatteryVoltage, dm3StatusRectCfg=dm3StatusRectCfg, bmBatManBatteryAlarm=bmBatManBatteryAlarm, apCPSPcmcia=apCPSPcmcia, rPDU2DeviceConfigLocation=rPDU2DeviceConfigLocation, batteryVoltageCollapse=batteryVoltageCollapse, rPDUOutletConfigOutletName=rPDUOutletConfigOutletName, airIRG3RDUStatusCondenserOutletTempUS=airIRG3RDUStatusCondenserOutletTempUS, sPDUOutletConfigMSPgsOutletIndex=sPDUOutletConfigMSPgsOutletIndex, rPDU2SensorTempHumidityStatusHumidityStatus=rPDU2SensorTempHumidityStatusHumidityStatus, atsInputCurrent=atsInputCurrent, rPDUOutletConfigMonitoredNearOverloadThreshold=rPDUOutletConfigMonitoredNearOverloadThreshold, airIRRCGroupStatusMinRackInletTempUS=airIRRCGroupStatusMinRackInletTempUS, isxModularDistSysOutputVoltageAlarmHighEnable=isxModularDistSysOutputVoltageAlarmHighEnable, emsOutputRelayStateNormal=emsOutputRelayStateNormal, xATSInternalATSFault=xATSInternalATSFault, airFMGroupFailoverSysHighEnvHum=airFMGroupFailoverSysHighEnvHum, upsBatteryOverVoltage=upsBatteryOverVoltage, dm3StatusOutRlyEntry=dm3StatusOutRlyEntry, memInputsConfigTable=memInputsConfigTable, airIRG2RDT2StatusSuctionPressureUS=airIRG2RDT2StatusSuctionPressureUS)
mibBuilder.exportSymbols("PowerNet-MIB", upsParallelDiagSubSysBreakerIndex=upsParallelDiagSubSysBreakerIndex, upsDCOutputStatusEntry=upsDCOutputStatusEntry, pmmBranch=pmmBranch, upsDiagSubSysDCCircuitBreakerTableSize=upsDiagSubSysDCCircuitBreakerTableSize, atsCalibrationNumInputs=atsCalibrationNumInputs, airFMStatusSystemActionTempF=airFMStatusSystemActionTempF, airFMSysAlarmMapSysRemSensRemoved=airFMSysAlarmMapSysRemSensRemoved, emsAlarmDeviceStatus=emsAlarmDeviceStatus, upsDiagPMStatus=upsDiagPMStatus, upsEepromFaultCleared=upsEepromFaultCleared, powerModuleSevereError=powerModuleSevereError, charger=charger, airFMModBlwr1ChokeTempC=airFMModBlwr1ChokeTempC, emStatusProbeHighHumidViolation=emStatusProbeHighHumidViolation, xATSGeneratorStatus=xATSGeneratorStatus, upsDiagPMIndex=upsDiagPMIndex, airIRmPmHotgasHeatRunning=airIRmPmHotgasHeatRunning, airIRmPmFan3Type=airIRmPmFan3Type, dm3StatusConvIndex=dm3StatusConvIndex, airIRmPmUnitEvaporationTemperature1=airIRmPmUnitEvaporationTemperature1, airFMSysHumidify=airFMSysHumidify, airFMSysInputEntry=airFMSysInputEntry, moduleVersion=moduleVersion, battManUnitStatusSerialNumber=battManUnitStatusSerialNumber, airIRmPmCmp1ManOperationState=airIRmPmCmp1ManOperationState, dcHumidityAlarmCleared=dcHumidityAlarmCleared, airIRRP100UnitThresholdsSupplyHumidityLow=airIRRP100UnitThresholdsSupplyHumidityLow, galaxyVSUPS75kW=galaxyVSUPS75kW, rPDUOutletPhaseEntry=rPDUOutletPhaseEntry, rPDUOutletPhase=rPDUOutletPhase, airIRRCUnitThresholdsSupplyAirHighTempUS=airIRRCUnitThresholdsSupplyAirHighTempUS, airIRmPmPump4StartTemperatureF=airIRmPmPump4StartTemperatureF, airIRAlarmConditionsEntry=airIRAlarmConditionsEntry, eps8000UPS=eps8000UPS, airIRG3RDUStatusInletWaterTempUS=airIRG3RDUStatusInletWaterTempUS, dcmim2StatusAlarms=dcmim2StatusAlarms, coolingUnitExtendedDiscreteIntegerReferenceKey=coolingUnitExtendedDiscreteIntegerReferenceKey, airConditioners=airConditioners, wirelessSensorPodStatusDryContactNormalState=wirelessSensorPodStatusDryContactNormalState, airUniflarSP=airUniflarSP, airIRG3CMStatusExpansionValvePosition=airIRG3CMStatusExpansionValvePosition, airIRRP500UnitStatusRackInletTemperature2US=airIRRP500UnitStatusRackInletTemperature2US, emsFluidSensorStatusSensorSeverity=emsFluidSensorStatusSensorSeverity, mtrapargsString=mtrapargsString, rPDU2OutletSwitchedConfigTable=rPDU2OutletSwitchedConfigTable, pcnsVirtualInstall=pcnsVirtualInstall, airFMSysDehumEssFunction=airFMSysDehumEssFunction, airIRmPmAuxAlarm1=airIRmPmAuxAlarm1, pmmInputPhaseLossAlarm=pmmInputPhaseLossAlarm, dm3ConfigRectHighVoltAlarm=dm3ConfigRectHighVoltAlarm, upsPhaseResetMaxMinValues=upsPhaseResetMaxMinValues, airIRmPmHumidifier1Alarm5us=airIRmPmHumidifier1Alarm5us, airIRRP500UnitConfigIdleOnLeakDetect=airIRRP500UnitConfigIdleOnLeakDetect, upsEepromFault=upsEepromFault, isxModularDistributionModuleInserted=isxModularDistributionModuleInserted, sPDUOutletConfigVM=sPDUOutletConfigVM, airFMSysAlarmMapInput11=airFMSysAlarmMapInput11, airIRRP100UnitStatusContainmtDPMetric=airIRRP100UnitStatusContainmtDPMetric, netLock=netLock, airFMSysAlarmMapOutput16=airFMSysAlarmMapOutput16, Rpdu2OutletPhaseLayoutType=Rpdu2OutletPhaseLayoutType, isxModularDistSubFeedInfoBreakerRating=isxModularDistSubFeedInfoBreakerRating, memSensorsName=memSensorsName, airIRRCGroupConfigCoolDerivativeD=airIRRCGroupConfigCoolDerivativeD, rPDULoadStatusLoadState=rPDULoadStatusLoadState, airFMModServIntResets=airFMModServIntResets, dm3StatusSysRectVoltage=dm3StatusSysRectVoltage, upsIntegratedATSUpsReturnStaggering=upsIntegratedATSUpsReturnStaggering, intelligenceModuleInserted=intelligenceModuleInserted, emsOutputRelayStatusTable=emsOutputRelayStatusTable, airFMSysAlarmMapSysFireDet=airFMSysAlarmMapSysFireDet, airIRRP500UnitStatusMaximumRackInletTempMetric=airIRRP500UnitStatusMaximumRackInletTempMetric, rPDU2SensorTempHumidityStatusType=rPDU2SensorTempHumidityStatusType, xPDUInputContactName=xPDUInputContactName, ats4gCalibrationPowerSupplyVoltageEntry=ats4gCalibrationPowerSupplyVoltageEntry, atsPowerSupplyVoltageCalibrationFactor=atsPowerSupplyVoltageCalibrationFactor, uioSensorStatusViolationStatus=uioSensorStatusViolationStatus, airFMSysAlarmMapMainModBlwrCntl2Fail=airFMSysAlarmMapMainModBlwrCntl2Fail, galaxy5000UPS40KVA=galaxy5000UPS40KVA, battManString2BatteryHighOhmicValue=battManString2BatteryHighOhmicValue, upsOutputSwitchClosed=upsOutputSwitchClosed, rPDU2OutletMeteredStatusModule=rPDU2OutletMeteredStatusModule, pcnsPowerFailedEnableCommandFile=pcnsPowerFailedEnableCommandFile, xATSSource1Frequency=xATSSource1Frequency, sPDUOutletPowerOffTime=sPDUOutletPowerOffTime, pcnsMaxInternalTempExceededCommandFilePath=pcnsMaxInternalTempExceededCommandFilePath, upsAdvConfigAlarm=upsAdvConfigAlarm, pmmIdent=pmmIdent, airIRmPmResetAllAlarms=airIRmPmResetAllAlarms, dm3ConfigConvFanFailAlarm=dm3ConfigConvFanFailAlarm, xATSDataCommMismatchErrorCleared=xATSDataCommMismatchErrorCleared, upsHighPrecTotalDCCurrentTableIndex=upsHighPrecTotalDCCurrentTableIndex, airIRmPmFan1ManOpEnable=airIRmPmFan1ManOpEnable, sPDUOutletStatusVMEntry=sPDUOutletStatusVMEntry, upsEPOActive=upsEPOActive, battManConfigSuspendCellVoltage=battManConfigSuspendCellVoltage, wirelessSensorStatusMinHumidityThresh=wirelessSensorStatusMinHumidityThresh, xATSGeneratorShutdown=xATSGeneratorShutdown, battManConfigMinAmbientTempF=battManConfigMinAmbientTempF, emStatusContactsEntry=emStatusContactsEntry, airIRRP100UnitStatusSupplyAirTempUS=airIRRP100UnitStatusSupplyAirTempUS, airIRmPmPump4Failure=airIRmPmPump4Failure, upsSCGActiveMembershipStatus=upsSCGActiveMembershipStatus, dm3StatusInRlyStatus=dm3StatusInRlyStatus, airIRSCUnitSetptsCoolSetpointUS=airIRSCUnitSetptsCoolSetpointUS, airIRmPmAuxAlarm5=airIRmPmAuxAlarm5, upsPhaseInputPhaseTableIndex=upsPhaseInputPhaseTableIndex, rPDU2SensorTempHumidityStatusTempPeakStartTime=rPDU2SensorTempHumidityStatusTempPeakStartTime, airIRRP100UnitServiceIntervalFansAlarm=airIRRP100UnitServiceIntervalFansAlarm, dm3StatusOEMconvOffset=dm3StatusOEMconvOffset, isxModularTotalOutputCurrentMaxThresholdViolation=isxModularTotalOutputCurrentMaxThresholdViolation, airIRG3RDUStatusPump2HeadPressureUS=airIRG3RDUStatusPump2HeadPressureUS, battManStringTable=battManStringTable, airFMModBlwr2CtrlCoolFanLife=airFMModBlwr2CtrlCoolFanLife, memModulesStatusModelNumber=memModulesStatusModelNumber, airFMSysAvgRemoteTempF=airFMSysAvgRemoteTempF, pcnsRunTimeBelowThresholdCommandFilePath=pcnsRunTimeBelowThresholdCommandFilePath, wirelessSensorStatusCommStatus=wirelessSensorStatusCommStatus, airIRG2RDT2ServiceIntervalsAirFilter=airIRG2RDT2ServiceIntervalsAirFilter, battManStringRippleCurrent=battManStringRippleCurrent, airIRRP100UnitStatusCompressorDriveVoltage=airIRRP100UnitStatusCompressorDriveVoltage, dm3ConfigBattHighTempThresh=dm3ConfigBattHighTempThresh, upsDiagUsrSuppSwitchgearMonitorEntry=upsDiagUsrSuppSwitchgearMonitorEntry, smartAvrReducing=smartAvrReducing, pmmInputPhaseEntry=pmmInputPhaseEntry, sPDUOutletConfigMSPannunOutletIndex=sPDUOutletConfigMSPannunOutletIndex, configChangeSNMP=configChangeSNMP, upsHighPrecBatteryCapacity=upsHighPrecBatteryCapacity, airIRG3GroupStatusMaxReturnAirTempMetric=airIRG3GroupStatusMaxReturnAirTempMetric, dcCurrentLimitAlarmCleared=dcCurrentLimitAlarmCleared, airIRSCGroupConfigAltitudeUS=airIRSCGroupConfigAltitudeUS, rPDU2BankConfigNumber=rPDU2BankConfigNumber, upsDiagSwitchGearInputSwitchStatus=upsDiagSwitchGearInputSwitchStatus, airIRRCUnitStatusContainmtDPMetric=airIRRCUnitStatusContainmtDPMetric, airIRG2RDT2StatusSuctionTempUS=airIRG2RDT2StatusSuctionTempUS, airIRmPmPump3ControlCycle=airIRmPmPump3ControlCycle, memVibrationSensorStatusSensorState=memVibrationSensorStatusSensorState, airIRRCUnitRunHoursFanPowerSupplyRight=airIRRCUnitRunHoursFanPowerSupplyRight, accessPXStatusFrontDoorMaxOpenTime=accessPXStatusFrontDoorMaxOpenTime, upsDiagComBusInternalMIMStatus=upsDiagComBusInternalMIMStatus, dm3StatusConvTable=dm3StatusConvTable, pcnsBypassManualEnabledEnableShutdown=pcnsBypassManualEnabledEnableShutdown, pcnsCommunicationLostShutdownDelay=pcnsCommunicationLostShutdownDelay, pmmOutput=pmmOutput, dm3ConfigConvFailMin=dm3ConfigConvFailMin, eps8000SSC=eps8000SSC, upsAdvConfigLowerBypassVoltTolerance=upsAdvConfigLowerBypassVoltTolerance, upsDiagSwitchGearInstallationLoadPct=upsDiagSwitchGearInstallationLoadPct, airIRmPmPump3Runtime=airIRmPmPump3Runtime, rPDUPowerSupply=rPDUPowerSupply, memBeaconConfigName=memBeaconConfigName, upsBasicTest=upsBasicTest, pmmInputKWHResetDate=pmmInputKWHResetDate, rPDU2PhaseStatusLoadState=rPDU2PhaseStatusLoadState, airFMGroupSysIPAddress=airFMGroupSysIPAddress, accessPXIdent=accessPXIdent, airIRmPmDrycooler3ManOpRunning=airIRmPmDrycooler3ManOpRunning, cpsSerialPortSttyCmd=cpsSerialPortSttyCmd, rPDU2PhaseToPhaseStatusTable=rPDU2PhaseToPhaseStatusTable, xATSSwitch=xATSSwitch, rPDU2PhasePropertiesEntry=rPDU2PhasePropertiesEntry, upsDiagPMManufactureDate=upsDiagPMManufactureDate, pcnsParallelRedundancyLostEnableLogging=pcnsParallelRedundancyLostEnableLogging, xATSEngineStopAsserted=xATSEngineStopAsserted, airIRmPmWaterTemperature2C=airIRmPmWaterTemperature2C, memOutletStatusCurrentState=memOutletStatusCurrentState, airIRRP100UnitStatusFanSpeed=airIRRP100UnitStatusFanSpeed, upsSCGMemberIP=upsSCGMemberIP, upsBatteryCabStringNumberOfBlocks=upsBatteryCabStringNumberOfBlocks, airIRRP100UnitServiceIntervalHeater=airIRRP100UnitServiceIntervalHeater, dcmim2StatusRectEntry=dcmim2StatusRectEntry, mfiletransferConfigFTPServerPassword=mfiletransferConfigFTPServerPassword, memDoorSensorStatusSensorState=memDoorSensorStatusSensorState, airFMStatusSystemReheatingEnabled=airFMStatusSystemReheatingEnabled, airFMSysTempCtrlMethod=airFMSysTempCtrlMethod, battManInputContactNormalState=battManInputContactNormalState, airFMSysAlarmMapExpMod1=airFMSysAlarmMapExpMod1, pcnsRunTimeAboveThresholdCommandFileDelay=pcnsRunTimeAboveThresholdCommandFileDelay, upsDischarged=upsDischarged, isxModularDistSubFeedInfoLocation=isxModularDistSubFeedInfoLocation, rARUConfigTable=rARUConfigTable, rPDUCancelPendingCommand=rPDUCancelPendingCommand, pcnsTempInRangeProbe1EnableLogging=pcnsTempInRangeProbe1EnableLogging, iemConfigRelaysTable=iemConfigRelaysTable, airIRRP500GroupSetpointsReheatMetric=airIRRP500GroupSetpointsReheatMetric, apcLocalDisplayIdentOptions=apcLocalDisplayIdentOptions, airIRSCGroupConfigFanSpeedControl=airIRSCGroupConfigFanSpeedControl, iemConfigProbesEntry=iemConfigProbesEntry, airIRRP100GroupStatusActiveFlowControlStatus=airIRRP100GroupStatusActiveFlowControlStatus, coolingUnitAboutEntry=coolingUnitAboutEntry, apcBeaconDisconnected=apcBeaconDisconnected, airIRRP100GroupConfigReheatGainP=airIRRP100GroupConfigReheatGainP, upsAdvTestDiagnosticsBatteryInterval=upsAdvTestDiagnosticsBatteryInterval, airIRRCGroupStatusAirFlowMetric=airIRRCGroupStatusAirFlowMetric, airIRmPmDrycooler4ManOpRunning=airIRmPmDrycooler4ManOpRunning, airIRmPmMyZoneNumber=airIRmPmMyZoneNumber, uioSensorConfigHighTemperatureEnable=uioSensorConfigHighTemperatureEnable, airIRSCUnitStatusSuctionTempMetric=airIRSCUnitStatusSuctionTempMetric, upsAdvControlUpsOff=upsAdvControlUpsOff, airIRRCUnitRunHoursFan2=airIRRCUnitRunHoursFan2, pmmBranchCircuitActivePower=pmmBranchCircuitActivePower, rARUStatusAruTempOvrdSetpoint=rARUStatusAruTempOvrdSetpoint, airIRmPmHumidifier1ManOpValue=airIRmPmHumidifier1ManOpValue, etlStatus=etlStatus, emsDeviceConfigChange=emsDeviceConfigChange, xPDUBranchBreakerEntry=xPDUBranchBreakerEntry, pcbeJavaVersion=pcbeJavaVersion, upsAdvInputActivePower=upsAdvInputActivePower, xATSOutputCurrentHighAlarm=xATSOutputCurrentHighAlarm, sPDUMasterConfigVMAudioAlarmActivated=sPDUMasterConfigVMAudioAlarmActivated, batteryIncrease=batteryIncrease, airIRRP100UnitIdentSerialNumber=airIRRP100UnitIdentSerialNumber, pcnsHumidityInRangeProbe2EnableLogging=pcnsHumidityInRangeProbe2EnableLogging, airFMModPropModuleIndex=airFMModPropModuleIndex, coolingUnitConfigurationDiscreteEntry=coolingUnitConfigurationDiscreteEntry, upsPhaseOutputMaxPercentPower=upsPhaseOutputMaxPercentPower, airIRmPmHumidifier1ManOpEnable=airIRmPmHumidifier1ManOpEnable, upsDiagSubSysFrameHardwareRev=upsDiagSubSysFrameHardwareRev, atsOutputPercentLoad=atsOutputPercentLoad, pmmWarningCondition=pmmWarningCondition, airIRmPmNumberOfDryCoolers=airIRmPmNumberOfDryCoolers, ePDUSensorConfigHumidityMaxThreshold=ePDUSensorConfigHumidityMaxThreshold, upsAdvConfigAlarmRedundancy=upsAdvConfigAlarmRedundancy, memSensors=memSensors, isxModularDistInfoMeterDateOfManufacture=isxModularDistInfoMeterDateOfManufacture, upsHighPrecInputBypassFrequency=upsHighPrecInputBypassFrequency, airFMSysCoolEconIsolFunction=airFMSysCoolEconIsolFunction, airIRG3CMRunHoursAirFilter=airIRG3CMRunHoursAirFilter, isx24ModuleHalfRackPdu=isx24ModuleHalfRackPdu, airIRmPmMinLimitSupplyAirTemperatureF=airIRmPmMinLimitSupplyAirTemperatureF, airIRmPmAuxiliaryAlarm5=airIRmPmAuxiliaryAlarm5, noOverloadOnInstallation=noOverloadOnInstallation, airIRG3CMStatusLiquidTempUS=airIRG3CMStatusLiquidTempUS, isxModularCoolingFanAlarmCleared=isxModularCoolingFanAlarmCleared, pmmIdentHMISerialNumber=pmmIdentHMISerialNumber, memSensorsConfigEntry=memSensorsConfigEntry, upsAdvConfigSetEEPROMDefaults=upsAdvConfigSetEEPROMDefaults, airFMAlarmClearActiveSysModAlarms=airFMAlarmClearActiveSysModAlarms, airFMGroupSysComm=airFMGroupSysComm, atsStatus=atsStatus, chargerOutputTotalCurrent=chargerOutputTotalCurrent, memOutletStatusTableSize=memOutletStatusTableSize, upsBasicControl=upsBasicControl, xPDUBypassVoltageHighAlarmCleared=xPDUBypassVoltageHighAlarmCleared, battManStringChargerLowVoltageAlarm=battManStringChargerLowVoltageAlarm, airFMGroupCfgResetFieldServiceDefaults=airFMGroupCfgResetFieldServiceDefaults, battManString1ResponseTestCurrentBenchmarkData=battManString1ResponseTestCurrentBenchmarkData, pcnsCriticalEventActive=pcnsCriticalEventActive, upsBatteryCabinetNumberOfStrings=upsBatteryCabinetNumberOfStrings, airIRG3AlarmsTable=airIRG3AlarmsTable, rPDU2BankConfigEntry=rPDU2BankConfigEntry, galaxyVMUPS225kVA=galaxyVMUPS225kVA, atsConfigBankTableSize=atsConfigBankTableSize, upsAdvOutputPeakCurrent=upsAdvOutputPeakCurrent)
mibBuilder.exportSymbols("PowerNet-MIB", dm3StatusConverter=dm3StatusConverter, cpsSerialPortAccSrv1=cpsSerialPortAccSrv1, emsProbeStatusProbeIndex=emsProbeStatusProbeIndex, pcnsEnvironmentCommunicationEstablishedEnableCommandFile=pcnsEnvironmentCommunicationEstablishedEnableCommandFile, airIRRCGroupStatusMinRackInletTempMetric=airIRRCGroupStatusMinRackInletTempMetric, upsOutput=upsOutput, pcnsParallelRedundancyRegainedEnableLogging=pcnsParallelRedundancyRegainedEnableLogging, airFMModPropEntry=airFMModPropEntry, airIRRP100UnitRunHoursAirFilter=airIRRP100UnitRunHoursAirFilter, airIRRP500UnitStatusDehumidifyDemand=airIRRP500UnitStatusDehumidifyDemand, emsOutletControlOutletIndex=emsOutletControlOutletIndex, rPDU2DeviceConfigName=rPDU2DeviceConfigName, dm3ConfigConvImbalanceAlarm=dm3ConfigConvImbalanceAlarm, rARUFanStatusNominalFanSpeed=rARUFanStatusNominalFanSpeed, memDoorSensorStatusSensorIndex=memDoorSensorStatusSensorIndex, xPDUUPSInputVoltageLtoNPresent=xPDUUPSInputVoltageLtoNPresent, airIRmPmRuntimeFreeCooling=airIRmPmRuntimeFreeCooling, eps7000FreqConverter=eps7000FreqConverter, wirelessSensorStatusHumidity=wirelessSensorStatusHumidity, airFMModHumTable=airFMModHumTable, airIRG3GroupStatusAvgSupplyTempUS=airIRG3GroupStatusAvgSupplyTempUS, airFMStatusModuleEntry=airFMStatusModuleEntry, galaxyVSUPS150kW=galaxyVSUPS150kW, sPDUMasterState=sPDUMasterState, airFMStatusSystemAverageRetTempC=airFMStatusSystemAverageRetTempC, airIRRP100UnitStatusHumidifierWaterConductivity=airIRRP100UnitStatusHumidifierWaterConductivity, rPDULoadPhaseConfigEntry=rPDULoadPhaseConfigEntry, emsOutputRelayStatusEntry=emsOutputRelayStatusEntry, airFMModServIntResetTable=airFMModServIntResetTable, airFMModBlwr2Vlt=airFMModBlwr2Vlt, rmPDUCommunicationLost=rmPDUCommunicationLost, rPDU2DevicePropertiesNumMeteredBanks=rPDU2DevicePropertiesNumMeteredBanks, ePDUDeviceControlBeepAlarm=ePDUDeviceControlBeepAlarm, airIRmPmPump4ManOpEnable=airIRmPmPump4ManOpEnable, airIRmPmFan1Alarm=airIRmPmFan1Alarm, xPDUSystemBreakers=xPDUSystemBreakers, airIRG2RDT2StatusSuperheatTempUS=airIRG2RDT2StatusSuperheatTempUS, airIRSCUnitStatusFilterDPMetric=airIRSCUnitStatusFilterDPMetric, rPDU2OutletMeteredConfigName=rPDU2OutletMeteredConfigName, cpsCardStatusIndex=cpsCardStatusIndex, airIRG2GroupConfig=airIRG2GroupConfig, upsState=upsState, matrixUPS3000=matrixUPS3000, xPDUBreakerChangeEvent=xPDUBreakerChangeEvent, pcnsParallelRedundancyRegainedEnableCommandFile=pcnsParallelRedundancyRegainedEnableCommandFile, airIRG2RD=airIRG2RD, dm3StatusConvCurrent=dm3StatusConvCurrent, battManAlarmEnvironment=battManAlarmEnvironment, upsDiagComBusExternalRIMStatus=upsDiagComBusExternalRIMStatus, airIRRCUnitStatusRackInletTempMetric=airIRRCUnitStatusRackInletTempMetric, upsAdvTotalDCCurrentPolarity=upsAdvTotalDCCurrentPolarity, pcnsTempOutOfRangeProbe2CommandFilePath=pcnsTempOutOfRangeProbe2CommandFilePath, pcnsHumidityOutOfRangeProbe1=pcnsHumidityOutOfRangeProbe1, wirelessSensorPodStatusMinHumidityThresh=wirelessSensorPodStatusMinHumidityThresh, rPDU2DeviceStatusTable=rPDU2DeviceStatusTable, airIRmPmSupplyAirHumidityTooLow=airIRmPmSupplyAirHumidityTooLow, uioSensor=uioSensor, airIRmPmAuxiliaryAlarm1=airIRmPmAuxiliaryAlarm1, upsDiagBatteryModuleStatusPerFrame=upsDiagBatteryModuleStatusPerFrame, upsEbmModeCountSinceReset=upsEbmModeCountSinceReset, airIRRP100UnitStatusReheatOutput=airIRRP100UnitStatusReheatOutput, rARUSensorsTemperature=rARUSensorsTemperature, rPDU2PhaseStatusPeakCurrentStartTime=rPDU2PhaseStatusPeakCurrentStartTime, airIRmPmNumberOfLouvers=airIRmPmNumberOfLouvers, sPDUMasterConfigMSPEntry=sPDUMasterConfigMSPEntry, cpsSerialGroupEntry=cpsSerialGroupEntry, airIRmPmSensor6Defect=airIRmPmSensor6Defect, wirelessSensorConfigMinRssiThresh=wirelessSensorConfigMinRssiThresh, battManConfigOhmicTestWaitTime=battManConfigOhmicTestWaitTime, pcnsContactNormal4Desc=pcnsContactNormal4Desc, upsHighPrecInputEnergyUsage=upsHighPrecInputEnergyUsage, rPDULoadDevOutletIndex=rPDULoadDevOutletIndex, airIRRCUnitRunHoursFan7=airIRRCUnitRunHoursFan7, rPDU2BankConfigIndex=rPDU2BankConfigIndex, airIRmPmGECWvalveStartTemperature=airIRmPmGECWvalveStartTemperature, cpsSerialPortNumber=cpsSerialPortNumber, battManStringChargerHighVoltageAlarm=battManStringChargerHighVoltageAlarm, airIRRP=airIRRP, airFMStatusSystemAverageRetHum=airFMStatusSystemAverageRetHum, cpsSerialSpec=cpsSerialSpec, airIRmPmDrycooler3Running=airIRmPmDrycooler3Running, chargerInputPhaseCurrent=chargerInputPhaseCurrent, sPDUOutletControlMSPOutletName=sPDUOutletControlMSPOutletName, dm3ConfigSysRemoteAccess=dm3ConfigSysRemoteAccess, airIRmPmRemoteStop=airIRmPmRemoteStop, pcbe=pcbe, airIRmPmEheating1ManOpRunning=airIRmPmEheating1ManOpRunning, mtrapargsString03=mtrapargsString03, upsPhaseInputPhaseEntry=upsPhaseInputPhaseEntry, pcnsMaxInternalTempExceededEnableLogging=pcnsMaxInternalTempExceededEnableLogging, airIRmPmSuctionValve2=airIRmPmSuctionValve2, emsCommunicationLost=emsCommunicationLost, apcRelockTimeout=apcRelockTimeout, airIRRCUnitRunHoursFan1=airIRRCUnitRunHoursFan1, airIRmPmEheating4Running=airIRmPmEheating4Running, airIRmPmOutsideAirHumidity=airIRmPmOutsideAirHumidity, ePDUDeviceStatusTable=ePDUDeviceStatusTable, atsStatusOverCurrentState=atsStatusOverCurrentState, logicPowerSuppliesDecreased=logicPowerSuppliesDecreased, airFMSysCoilFluidDehumDmd=airFMSysCoilFluidDehumDmd, airIRmPmCmp2ManOperationState=airIRmPmCmp2ManOperationState, upsAdvInputLineVoltage=upsAdvInputLineVoltage, pcnsBatteryDischargedCommandFilePath=pcnsBatteryDischargedCommandFilePath, airIRAlarmConditionsTable=airIRAlarmConditionsTable, rARUFanStatusEntry=rARUFanStatusEntry, airIRRP100UnitStatusCompressorDriveWarningStatus=airIRRP100UnitStatusCompressorDriveWarningStatus, airIRmAlarmsEntry=airIRmAlarmsEntry, iemIdentHardwareRevision=iemIdentHardwareRevision, airIRmPmEheating1=airIRmPmEheating1, isxModularDistSysVoltage=isxModularDistSysVoltage, battManString1ResponseTestCurrentBenchmarkTableSize=battManString1ResponseTestCurrentBenchmarkTableSize, wirelessSensorConfigMaxHumidityThresh=wirelessSensorConfigMaxHumidityThresh, airIRG2GroupStatusCoolOutput=airIRG2GroupStatusCoolOutput, pcnsContactFault4=pcnsContactFault4, pcnsContactFault3CommandFilePath=pcnsContactFault3CommandFilePath, rPDU2DeviceConfigDeviceEnergyReset=rPDU2DeviceConfigDeviceEnergyReset, emsSensorConfigSensorIndex=emsSensorConfigSensorIndex, xATSGeneratorLowBatteryVoltCleared=xATSGeneratorLowBatteryVoltCleared, airIRG3RDUThresholdsTable=airIRG3RDUThresholdsTable, airIRRP100GroupStatusAirFlowUS=airIRRP100GroupStatusAirFlowUS, airIRSCUnitRunHoursCondenserFan3=airIRSCUnitRunHoursCondenserFan3, airIRRP500UnitRunHours=airIRRP500UnitRunHours, upsDiagSubSysBattMonitorEntry=upsDiagSubSysBattMonitorEntry, uioOutputRelayConfigNormalState=uioOutputRelayConfigNormalState, xAPCControllerFirmwareUpdateTransferComplete=xAPCControllerFirmwareUpdateTransferComplete, upsBatteryCabBlockCellTemperature=upsBatteryCabBlockCellTemperature, airFMModBlwr2ChokeTempC=airFMModBlwr2ChokeTempC, xATSInputContactStateAbnormal=xATSInputContactStateAbnormal, emsInputContactConfig=emsInputContactConfig, sPDUOutletStatusVMOutletState=sPDUOutletStatusVMOutletState, airFMModule=airFMModule, pcnsContactNormal1EnableLogging=pcnsContactNormal1EnableLogging, coolingUnitExtendedString=coolingUnitExtendedString, airIRmPmGECWvalve=airIRmPmGECWvalve, airIRRCUnitIdentFirmwareRevision=airIRRCUnitIdentFirmwareRevision, airIRmPmDrycooler3Runtime=airIRmPmDrycooler3Runtime, airIRRP500UnitIdentModelNumber=airIRRP500UnitIdentModelNumber, battManInputContactStatus=battManInputContactStatus, memInputsConfigEntry=memInputsConfigEntry, airFMSysAlarmMapOutput6=airFMSysAlarmMapOutput6, pcnsNMCPort=pcnsNMCPort, airIRSCUnitThresholdsRackInletHighTempMetric=airIRSCUnitThresholdsRackInletHighTempMetric, ePDUPhaseStatusPowerFactor=ePDUPhaseStatusPowerFactor, rPDUOutletStatusCommandPending=rPDUOutletStatusCommandPending, atsInputMaxPower=atsInputMaxPower, airIRmPmPWWHeatingCurrentValue=airIRmPmPWWHeatingCurrentValue, wirelessSensorConfig=wirelessSensorConfig, pmmInputMeterFirmwareVersion=pmmInputMeterFirmwareVersion, airIRmPmMinLimitSupplyAirTemperature=airIRmPmMinLimitSupplyAirTemperature, airIRmPmDrycooler3Failure=airIRmPmDrycooler3Failure, upsParallelOutputPhaseEntry=upsParallelOutputPhaseEntry, upsAdvInputEnergyUsage=upsAdvInputEnergyUsage, airFMIdentModuleHardwareRev=airFMIdentModuleHardwareRev, battManString2BatteryIndex=battManString2BatteryIndex, airIRmPmUnitOnOff=airIRmPmUnitOnOff, airIRSCUnitStatusEvaporatorFanSpeed=airIRSCUnitStatusEvaporatorFanSpeed, wirelessSensorStatusLowHumidityThresh=wirelessSensorStatusLowHumidityThresh, airFMSysAvgRemoteTempC=airFMSysAvgRemoteTempC, dm3StatusRectState=dm3StatusRectState, airIRG3RDUConfigInputNormalState=airIRG3RDUConfigInputNormalState, airIRRCUnitConfigPowerSource=airIRRCUnitConfigPowerSource, upsAdvConfigMinReturnRuntime=upsAdvConfigMinReturnRuntime, cpsDNSdomain=cpsDNSdomain, pcnsCommunicationLostOnBattery=pcnsCommunicationLostOnBattery, airIRSCUnitIdentManufactureDate=airIRSCUnitIdentManufactureDate, upsAdvControlUpsSleep=upsAdvControlUpsSleep, envHighTempThresholdViolation=envHighTempThresholdViolation, pcnsCommunicationLostOnBatteryShutdownDelay=pcnsCommunicationLostOnBatteryShutdownDelay, airIRG2GroupStatusMaxReturnAirTempMetric=airIRG2GroupStatusMaxReturnAirTempMetric, airFMModDischPresPSI=airFMModDischPresPSI, upsPhaseOutputApparentPower=upsPhaseOutputApparentPower, upsInput=upsInput, battManString2BatteryCalibEntry=battManString2BatteryCalibEntry, pmmOutputActiveEnergyDelivered=pmmOutputActiveEnergyDelivered, rPDU2OutletSwitchedStatusCommandPending=rPDU2OutletSwitchedStatusCommandPending, upsOutletGroupConfigPowerOnDelay=upsOutletGroupConfigPowerOnDelay, airIRG2RDT2ConfigOutputNormalState=airIRG2RDT2ConfigOutputNormalState, eps7000UPSWithSSC=eps7000UPSWithSSC, atsInputMinCurrent=atsInputMinCurrent, rPDUOutletDevMonitoredOutlets=rPDUOutletDevMonitoredOutlets, symmetraUPS8kVA=symmetraUPS8kVA, airIRSCUnitStatusCoolOutput=airIRSCUnitStatusCoolOutput, pmmInputCurrentMinimumAlarm=pmmInputCurrentMinimumAlarm, airIRG3GroupConfigNumberofBackupUnits=airIRG3GroupConfigNumberofBackupUnits, pcnsTempInRangeProbe2EnableCommandFile=pcnsTempInRangeProbe2EnableCommandFile, xATSSystemOutputVoltageLtoL=xATSSystemOutputVoltageLtoL, xATSSystemOutputPhaseIndex=xATSSystemOutputPhaseIndex, iemStatusProbesTable=iemStatusProbesTable, emsFluidSensorConfigSensorIndex=emsFluidSensorConfigSensorIndex, pmmSiteConfigProductSerialNumber=pmmSiteConfigProductSerialNumber, cpsSerialPppd=cpsSerialPppd, isxModularDistTotals=isxModularDistTotals, airIRGen3=airIRGen3, airIRmPmPump1LinearRangeK=airIRmPmPump1LinearRangeK, airIRmPmGlobalZoneDataEmergencyOpMode=airIRmPmGlobalZoneDataEmergencyOpMode, sPDUOutletConfigMSPmupsOutletName=sPDUOutletConfigMSPmupsOutletName, pmmIdentHMIFirmwareAppRev=pmmIdentHMIFirmwareAppRev, memBeaconStatusTable=memBeaconStatusTable, xATSS1BadPhaseRotationCleared=xATSS1BadPhaseRotationCleared, upsInformationalCondition=upsInformationalCondition, xPDUOutputRelaysNumRelays=xPDUOutputRelaysNumRelays, dm3StatusSysAlarmState=dm3StatusSysAlarmState, pcnsContactNormal2=pcnsContactNormal2, airIRG3IdentLocation=airIRG3IdentLocation, airFMModBlwr1CmdFreq=airFMModBlwr1CmdFreq, airFMModBlwr1CapLife=airFMModBlwr1CapLife, dm3ConfigSysHighTempAlarm=dm3ConfigSysHighTempAlarm, rPDU2SensorTempHumidityStatusRelativeHumidity=rPDU2SensorTempHumidityStatusRelativeHumidity, iemLowTempThresholdViolation=iemLowTempThresholdViolation, battManString2ResponseTestChangeData=battManString2ResponseTestChangeData, upsOutletGroupStatusName=upsOutletGroupStatusName, isxModularDistModuleBreakerTableSize=isxModularDistModuleBreakerTableSize, emStatusProbesNumProbes=emStatusProbesNumProbes, airFMGroupFailoverModLowSupplyTemp=airFMGroupFailoverModLowSupplyTemp, isxModularTotalOutputCurrentHighThresholdViolationCleared=isxModularTotalOutputCurrentHighThresholdViolationCleared, rPDU2DeviceConfigContact=rPDU2DeviceConfigContact, cpsInfoSerialPortErrBreaks=cpsInfoSerialPortErrBreaks, dm3StatusConvFwVer=dm3StatusConvFwVer, xATSSwitchStatusOperationalMode=xATSSwitchStatusOperationalMode, upsHighPrecBatteryPackEntry=upsHighPrecBatteryPackEntry, atsConfigPhaseTable=atsConfigPhaseTable, upsDiagUsrSuppSwitchgearMonitorTemperature=upsDiagUsrSuppSwitchgearMonitorTemperature, atsIdent=atsIdent, pmmBranchcircuitCurrentHighAlarm=pmmBranchcircuitCurrentHighAlarm, xPDUDataCommMismatchErrorCleared=xPDUDataCommMismatchErrorCleared, upsAdvConfigPositionSelector=upsAdvConfigPositionSelector, airIRmPmPWWHeatingStartTempK=airIRmPmPWWHeatingStartTempK, galaxy7000UPS400kVA=galaxy7000UPS400kVA, sPDUOutletConfigMSPmupsP1LowTemp=sPDUOutletConfigMSPmupsP1LowTemp, upsAsiUpsControlServerRequestShutdown=upsAsiUpsControlServerRequestShutdown, emsInputContactStatusEntry=emsInputContactStatusEntry, rPDU2OutletSwitchedConfigNumber=rPDU2OutletSwitchedConfigNumber, gutorSDC=gutorSDC, pcbeComsLostFlag=pcbeComsLostFlag, wirelessSensorPodConfigDryContactNormalState=wirelessSensorPodConfigDryContactNormalState, battManStringDischargeLess5Seconds=battManStringDischargeLess5Seconds, msvmOverloadCleared=msvmOverloadCleared, xATSOutputRelayTableSize=xATSOutputRelayTableSize, airIRmPmGECWvalveStartTemperatureF=airIRmPmGECWvalveStartTemperatureF, airIRmPmLouver1ManOpPosition=airIRmPmLouver1ManOpPosition, upsParallelSysLocalAddress=upsParallelSysLocalAddress, airPASystemPower=airPASystemPower, dcmim2StatusLVDTable=dcmim2StatusLVDTable, bmBatManCommLost=bmBatManCommLost, upsAdvIdent=upsAdvIdent, dm3ConfigRectCurrLimitAlarm=dm3ConfigRectCurrLimitAlarm, dcBBCommunicationLost=dcBBCommunicationLost, airFMAlarmDate=airFMAlarmDate, battManIdentHardwareRev=battManIdentHardwareRev, airIRRCGroupConfigNumberofCoolingUnits=airIRRCGroupConfigNumberofCoolingUnits, xATSGeneratorVeryLowCoolantLevelAlarm=xATSGeneratorVeryLowCoolantLevelAlarm, apcDoorEstablishedComms=apcDoorEstablishedComms, upsEnergyEfficiencyStatsECOnversionTimeSinceReset=upsEnergyEfficiencyStatsECOnversionTimeSinceReset, airPARemoteTempC=airPARemoteTempC)
mibBuilder.exportSymbols("PowerNet-MIB", battManString1BatteryCellShorted=battManString1BatteryCellShorted, pcnsFaultBypassEnabledEnableShutdown=pcnsFaultBypassEnabledEnableShutdown, airIRRP100GroupSetpointsActiveFlowControlBias=airIRRP100GroupSetpointsActiveFlowControlBias, airIRmPmFan2ManOpSpeed=airIRmPmFan2ManOpSpeed, airIRRP500UnitIdentSerialNumber=airIRRP500UnitIdentSerialNumber, memVibrationSensorStatusSensorName=memVibrationSensorStatusSensorName, upsBatteryFrameLayoutTableSize=upsBatteryFrameLayoutTableSize, atsLostRedundancy=atsLostRedundancy, upsDiagSubSysIntBypSwitchFanLifetimeStatus=upsDiagSubSysIntBypSwitchFanLifetimeStatus, ais5000UPS100kVA=ais5000UPS100kVA, extBatteryFrameIncease=extBatteryFrameIncease, airFMSysAlarmMapExpMod1BlwrCntl2Fail=airFMSysAlarmMapExpMod1BlwrCntl2Fail, battManString2ResponseTestCurrentTable=battManString2ResponseTestCurrentTable, apcWarningDiscreteInputContactStateNormal=apcWarningDiscreteInputContactStateNormal, battManSystemConfigurationInvalid=battManSystemConfigurationInvalid, airIRRP100UnitStatusHumidifyDemand=airIRRP100UnitStatusHumidifyDemand, airFMGroupCfgSetpointShareSetting=airFMGroupCfgSetpointShareSetting, sPDUOutletConfigMSPmupsZone2=sPDUOutletConfigMSPmupsZone2, galaxy=galaxy, automaticXferSwitch=automaticXferSwitch, accessPXConfigFront=accessPXConfigFront, airIRG3AlarmsEntry=airIRG3AlarmsEntry, airIRmPmSensor21Defect=airIRmPmSensor21Defect, airIRG3RDUStatusReceiverLiquidLevel=airIRG3RDUStatusReceiverLiquidLevel, airIRRP100GroupStatusHumidifyOutput=airIRRP100GroupStatusHumidifyOutput, airFMSysPresentRole=airFMSysPresentRole, airIRRP100UnitStatusAirFlowMetric=airIRRP100UnitStatusAirFlowMetric, emsOutputRelayConfigOutputRelayNormalState=emsOutputRelayConfigOutputRelayNormalState, airIRmPmDrycooler2Failure=airIRmPmDrycooler2Failure, airIRmPmEheating2ManOpEnable=airIRmPmEheating2ManOpEnable, airFMModIdent=airFMModIdent, airFMModBlwr2RatedCurrent=airFMModBlwr2RatedCurrent, airIRmPmHumidifier2ManOpEnable=airIRmPmHumidifier2ManOpEnable, airFMSysAlarmMapInput12=airFMSysAlarmMapInput12, airFMModHumidifierType=airFMModHumidifierType, airIRSCUnitSetpoints=airIRSCUnitSetpoints, memSmokeStatusAlarmStatus=memSmokeStatusAlarmStatus, apcInformationalDiscreteInputContactStateAbnormal=apcInformationalDiscreteInputContactStateAbnormal, upsDiagIMSlaveFirmwareRev=upsDiagIMSlaveFirmwareRev, monitoringStatus=monitoringStatus, upsPhaseOutputPercentLoad=upsPhaseOutputPercentLoad, acceptThisReceiver=acceptThisReceiver, dm3IdentSystem=dm3IdentSystem, isxModularDistInfoTableSize=isxModularDistInfoTableSize, dm3StatusFusesStatus=dm3StatusFusesStatus, aruFanRuntimeAlarmCleared=aruFanRuntimeAlarmCleared, upsParallelOutputTotalPercentLoad=upsParallelOutputTotalPercentLoad, rARUConfigAruName=rARUConfigAruName, upsOutletGroupConfigLoadShedControlTimeOnBattery=upsOutletGroupConfigLoadShedControlTimeOnBattery, ais5000UPS10kVA=ais5000UPS10kVA, coolingUnitExtendedStringTableIndex=coolingUnitExtendedStringTableIndex, airIRRP500UnitThresholdsReturnHumidityLow=airIRRP500UnitThresholdsReturnHumidityLow, sPDUOutletConfigMSPgsDeviceConfirm=sPDUOutletConfigMSPgsDeviceConfirm, airIRmPmDrycooler1ManOpEnable=airIRmPmDrycooler1ManOpEnable, pmmBranchCircuitBreakerOpenAlarm=pmmBranchCircuitBreakerOpenAlarm, rPDU2SensorDiscreteConfigEntry=rPDU2SensorDiscreteConfigEntry, pcnsContactFault1CommandFileDelay=pcnsContactFault1CommandFileDelay, pcnsBatteryChargeInRange=pcnsBatteryChargeInRange, airIRG3RDUStatusByPassValvePosition=airIRG3RDUStatusByPassValvePosition, pcnsBypassDisabled=pcnsBypassDisabled, xATSSwitchTimersDelaySetting=xATSSwitchTimersDelaySetting, airIRG3CMConfigRemoteOnStandby=airIRG3CMConfigRemoteOnStandby, dcLVDImminentAlarmCleared=dcLVDImminentAlarmCleared, rARUStatusAruIndex=rARUStatusAruIndex, coolingUnitAboutValue=coolingUnitAboutValue, xATSGeneratorOutput=xATSGeneratorOutput, upsInputContactConfigIndex=upsInputContactConfigIndex, airIRRCGroupStatusMaxRackInletTempMetric=airIRRCGroupStatusMaxRackInletTempMetric, isxServers=isxServers, rPDU2OutletMeteredPropertiesEntry=rPDU2OutletMeteredPropertiesEntry, pduCircuitPanelInputUndervoltage=pduCircuitPanelInputUndervoltage, isxModularSubfeedBreakerOpenAlarm=isxModularSubfeedBreakerOpenAlarm, rPDU2DevicePropertiesModule=rPDU2DevicePropertiesModule, upsAdvInputApparentPower=upsAdvInputApparentPower, battManSystemStatus=battManSystemStatus, airIRmPmLastMaintenanceDay=airIRmPmLastMaintenanceDay, airIRRCGroupStatusMaxRackInletTempUS=airIRRCGroupStatusMaxRackInletTempUS, airIRRP500UnitConfigUnitRoleOverride=airIRRP500UnitConfigUnitRoleOverride, pcnsContactFault1Desc=pcnsContactFault1Desc, airFMSysReheatPIDResetRateI=airFMSysReheatPIDResetRateI, dm3StatusSystem=dm3StatusSystem, rPDU2PhaseStatusPower=rPDU2PhaseStatusPower, pmmOutputMinApparentPowerThreshold=pmmOutputMinApparentPowerThreshold, xATSIdentFirmwareAppRev=xATSIdentFirmwareAppRev, upsBasicStateAlarmStatus=upsBasicStateAlarmStatus, masterSwitchsPDU=masterSwitchsPDU, sPDUOutletConfigVMTable=sPDUOutletConfigVMTable, upsPhaseOutputVoltagePN=upsPhaseOutputVoltagePN, airIRmPmFan3ManOpEnable=airIRmPmFan3ManOpEnable, memSmokeSensorConfigSensorIndex=memSmokeSensorConfigSensorIndex, airIRRP500UnitRunHoursFan1=airIRRP500UnitRunHoursFan1, ePDUOutletStatusNumber=ePDUOutletStatusNumber, atsInputEntry=atsInputEntry, isxModularDistModuleOutputCableLength=isxModularDistModuleOutputCableLength, xATSDeviceServiceType=xATSDeviceServiceType, airIRRP500UnitRunHoursHeater2=airIRRP500UnitRunHoursHeater2, upsDiagSubSysExternalSwitchGearTable=upsDiagSubSysExternalSwitchGearTable, rPDUOutletConfigPowerOnTime=rPDUOutletConfigPowerOnTime, sPDUOutletConfigVMRebootDuration=sPDUOutletConfigVMRebootDuration, airIRRP500GroupConfigActiveFlowControllerLampTest=airIRRP500GroupConfigActiveFlowControllerLampTest, pcnsCommunicationEstablishedCommandFilePath=pcnsCommunicationEstablishedCommandFilePath, dcmim2StatusRectTable=dcmim2StatusRectTable, airIRSCUnitThresholdsSupplyAirHighTempUS=airIRSCUnitThresholdsSupplyAirHighTempUS, airIRRCUnitStatusLeavingFluidTemperatureMetric=airIRRCUnitStatusLeavingFluidTemperatureMetric, emsOutputRelayControlOutputRelayIndex=emsOutputRelayControlOutputRelayIndex, upsDiagPMEnclDoorFltrEstmtdLifetimeRmng=upsDiagPMEnclDoorFltrEstmtdLifetimeRmng, rPDU2IndentBootMonBuildDate=rPDU2IndentBootMonBuildDate, xPDUInputContacts=xPDUInputContacts, xATSGeneratorOutputPhaseTable=xATSGeneratorOutputPhaseTable, battManString1ResponseTestCurrentEntry=battManString1ResponseTestCurrentEntry, pcnsCommunicationLostEnableCommandFile=pcnsCommunicationLostEnableCommandFile, airIRmPmMyZoneCWEnergySaveMode=airIRmPmMyZoneCWEnergySaveMode, pcnsBypassContactorFailedEnableCommandFile=pcnsBypassContactorFailedEnableCommandFile, airFMSysLowSplyTempC=airFMSysLowSplyTempC, upsParallelOutputActivePowerTableIndex=upsParallelOutputActivePowerTableIndex, atsConfigPhaseNearOverLoadThreshold=atsConfigPhaseNearOverLoadThreshold, upsAdvControlRebootShutdownUps=upsAdvControlRebootShutdownUps, eps8000UPSWithSSC=eps8000UPSWithSSC, airFMSysAlarmMapOutput=airFMSysAlarmMapOutput, xPDUSystemOutputVoltageLtoL=xPDUSystemOutputVoltageLtoL, pcnsNetComsLostFlag=pcnsNetComsLostFlag, envLowHumidityThresholdViolationCleared=envLowHumidityThresholdViolationCleared, emsIdentFirmwareRev=emsIdentFirmwareRev, pcnsMinRedundancyLostShutdownDelay=pcnsMinRedundancyLostShutdownDelay, atsOverCurrentCleared=atsOverCurrentCleared, upsEnergyEfficiencyStatsReset=upsEnergyEfficiencyStatsReset, airIRmPmCompressor1LowPressure=airIRmPmCompressor1LowPressure, upsAdvIdentFirmwareRevision2=upsAdvIdentFirmwareRevision2, upsDiagSubSysbackfeedContactorStatus=upsDiagSubSysbackfeedContactorStatus, galaxyVMUPS60kVA=galaxyVMUPS60kVA, battManString2BatteryCalibTable=battManString2BatteryCalibTable, iemStatusProbeName=iemStatusProbeName, upsDiagSubSysSystemPowerSupplyFirmwareRev=upsDiagSubSysSystemPowerSupplyFirmwareRev, airIRmPmDrycooler3ManOpEnable=airIRmPmDrycooler3ManOpEnable, aruHighTemperatureAlarm=aruHighTemperatureAlarm, pmmOutputMinVoltThreshold=pmmOutputMinVoltThreshold, dm3StatusRectStandby=dm3StatusRectStandby, airIRG3RDUThresholdsEntry=airIRG3RDUThresholdsEntry, airIRmPmEheating3Type=airIRmPmEheating3Type, airIRRP500GroupConfigCoolDerivativeD=airIRRP500GroupConfigCoolDerivativeD, upsPhaseInputPhaseTable=upsPhaseInputPhaseTable, rPDUIdentDeviceOutletLayout=rPDUIdentDeviceOutletLayout, airIRRCUnitRunHoursAirFilter=airIRRCUnitRunHoursAirFilter, pduUpsOperationMode=pduUpsOperationMode, rPDU2Outlet=rPDU2Outlet, memSensorsConfigModuleNumber=memSensorsConfigModuleNumber, airFMSysAlarmMapMainModCoolFail=airFMSysAlarmMapMainModCoolFail, pmmBranchcircuitCurrentLowAlarm=pmmBranchcircuitCurrentLowAlarm, airIRRP100UnitConfig=airIRRP100UnitConfig, airIRmPmPump4HysteresisK=airIRmPmPump4HysteresisK, airIRG2AlarmsTableSize=airIRG2AlarmsTableSize, airIRG3IdentGroupSysOID=airIRG3IdentGroupSysOID, pmmInputMinVoltThreshold=pmmInputMinVoltThreshold, airFMModBlower1=airFMModBlower1, upsAdvConfigBattCabAmpHour=upsAdvConfigBattCabAmpHour, airIRG2RDT2StatusRackInletTempMetric=airIRG2RDT2StatusRackInletTempMetric, airIRRCUnitIdentHardwareRevision=airIRRCUnitIdentHardwareRevision, airIRmPmCmp2StartTempSummerF=airIRmPmCmp2StartTempSummerF, rPDUOutletConfigMonitoredOverloadThreshold=rPDUOutletConfigMonitoredOverloadThreshold, dm3StatusRectPhyAddr=dm3StatusRectPhyAddr, upsHighPrecTotalDCCurrentPolarity=upsHighPrecTotalDCCurrentPolarity, atsRMSOverFrequency=atsRMSOverFrequency, airIRmPmDrycooler4Failure=airIRmPmDrycooler4Failure, smwWarningCondition=smwWarningCondition, pcnsBypassDisabledEnableLogging=pcnsBypassDisabledEnableLogging, masterSwitchrPDU2=masterSwitchrPDU2, rPDULoadStatusLoad=rPDULoadStatusLoad, emsProbeConfigProbeLTDecTempTime=emsProbeConfigProbeLTDecTempTime, airFMStatusSystemCoolingEnabled=airFMStatusSystemCoolingEnabled, upsCriticalCondition=upsCriticalCondition, uioInputContactConfigTable=uioInputContactConfigTable, emsDoorSensorConfigSensorSeverity=emsDoorSensorConfigSensorSeverity, airIRmPmPump3Running=airIRmPmPump3Running, upsAdvConfigShutoffDelay=upsAdvConfigShutoffDelay, iemConfig=iemConfig, emsProbeStatus=emsProbeStatus, upsOutputRelayIndex=upsOutputRelayIndex, cpsSerialPortAuthAcc=cpsSerialPortAuthAcc, upsDiagComBusMIMtoRIMStatus=upsDiagComBusMIMtoRIMStatus, isxModularDistribution=isxModularDistribution, dm3StatusOEMrectGain=dm3StatusOEMrectGain, airFMSysCoilFluidActivDeadbandF=airFMSysCoilFluidActivDeadbandF, pduCircuitPanelNeutralOvercurrentCleared=pduCircuitPanelNeutralOvercurrentCleared, upsHighPrecBatteryPackOnlyTemperature=upsHighPrecBatteryPackOnlyTemperature, airIRmPmDrycooler3Hysteresis=airIRmPmDrycooler3Hysteresis, atsOutputMaxLoad=atsOutputMaxLoad, xPDUMainInputVoltageTableSize=xPDUMainInputVoltageTableSize, emsProbeStatusProbeSerialNumber=emsProbeStatusProbeSerialNumber, ePDUDeviceStatusEntry=ePDUDeviceStatusEntry, airFMGroupFailoverSysAnyMajorAlarm=airFMGroupFailoverSysAnyMajorAlarm, xATSGeneratorVeryLowRunTimeAlarm=xATSGeneratorVeryLowRunTimeAlarm, airIRmPmGECWvalveGEOffTemp=airIRmPmGECWvalveGEOffTemp, airIRG3GroupStatusAirFlowMetric=airIRG3GroupStatusAirFlowMetric, rARUSensorsTempLongDecRateThreshTime=rARUSensorsTempLongDecRateThreshTime, upsSCGACOutputStatus=upsSCGACOutputStatus, rARUSensorsConfigAruIndex=rARUSensorsConfigAruIndex, airIRmPmCmp2HysteresisWinterF=airIRmPmCmp2HysteresisWinterF, pcnsMinRedundancyRegainedEnableLogging=pcnsMinRedundancyRegainedEnableLogging, rPDU2OutletMeteredStatusState=rPDU2OutletMeteredStatusState, airIRmPmNumberOfHumidifiers=airIRmPmNumberOfHumidifiers, emsSensorFaultCleared=emsSensorFaultCleared, pduCommunicationLost=pduCommunicationLost, upsDiagUnitControllerFirmwareRev=upsDiagUnitControllerFirmwareRev, rPDU2DevicePropertiesOutletLayout=rPDU2DevicePropertiesOutletLayout, rPDU2PhaseConfigPhasePeakCurrentReset=rPDU2PhaseConfigPhasePeakCurrentReset, upsStatistics=upsStatistics, airFMSysAlarmMapExpMod2Table=airFMSysAlarmMapExpMod2Table, pcnsContactFault4EnableLogging=pcnsContactFault4EnableLogging, coolingUnitStatusAnalogTable=coolingUnitStatusAnalogTable, pmm=pmm, xPDUGroundMonitorPoint=xPDUGroundMonitorPoint, emsStatusCheckLogLight=emsStatusCheckLogLight, pcnsMinLoadCapabilityRegainedEnableCommandFile=pcnsMinLoadCapabilityRegainedEnableCommandFile, apcHardwareStateAbnormal=apcHardwareStateAbnormal, powerNetSoftwareSystemUpTime=powerNetSoftwareSystemUpTime, emsSmokeSensorStatusSensorName=emsSmokeSensorStatusSensorName, atsInputTable=atsInputTable, battManString1OhmicValueIndex=battManString1OhmicValueIndex, galaxyVSUPS25kW=galaxyVSUPS25kW, pcnsPowerFailedEnableShutdown=pcnsPowerFailedEnableShutdown, iemConfigContactNormalState=iemConfigContactNormalState, subfeedBreakerRating=subfeedBreakerRating, airIRRCUnitStatusOutputState=airIRRCUnitStatusOutputState, xPDUDeviceServiceType=xPDUDeviceServiceType, airIRmPmSensor5Defect=airIRmPmSensor5Defect, upsAdvConfigInformationalAlarmDelay=upsAdvConfigInformationalAlarmDelay, airIRRP500GroupConfigFullRPBackups=airIRRP500GroupConfigFullRPBackups, memDoorSensorConfigTable=memDoorSensorConfigTable, battManString1ResponseTestChangeEntry=battManString1ResponseTestChangeEntry, nlIdent=nlIdent, upsDiagnosticDisplayStatus=upsDiagnosticDisplayStatus, cpsSerialPortDBsize=cpsSerialPortDBsize, airIRmPmHumidifier2ManOpValue=airIRmPmHumidifier2ManOpValue, pmmInputPowerFactor=pmmInputPowerFactor, upsBatteryCabStringMinTemperature=upsBatteryCabStringMinTemperature, sPDUOutletStatusVMName=sPDUOutletStatusVMName, upsAdvOutputApparentPower=upsAdvOutputApparentPower, memSensorsTempShortIncRateThreshTime=memSensorsTempShortIncRateThreshTime, airIRmPmPump1=airIRmPmPump1, pmmSiteConfigProductModelNumber=pmmSiteConfigProductModelNumber, pcnsContactFault4EnableShutdown=pcnsContactFault4EnableShutdown, pmmBranchCircuitEnergyUsageResetDate=pmmBranchCircuitEnergyUsageResetDate, xPDUMainInputUnderVoltThreshold=xPDUMainInputUnderVoltThreshold, sPDUIdentMSP=sPDUIdentMSP, battManString1BatteryTableSize=battManString1BatteryTableSize, sPDUOutletControlTableSize=sPDUOutletControlTableSize, xATSStopFailure=xATSStopFailure, emsInputContactStateAbnormal=emsInputContactStateAbnormal, airIRG3RDUConfigPowerSource=airIRG3RDUConfigPowerSource, battManString1BatteryHighOhmicValue=battManString1BatteryHighOhmicValue, pcnsBypassEnabledDesc=pcnsBypassEnabledDesc, airIRmPmDrycooler2Hysteresis=airIRmPmDrycooler2Hysteresis, airIRmPmMinLimitSupplyAirHumidity=airIRmPmMinLimitSupplyAirHumidity, apcEnvLTIncTempRateViolation=apcEnvLTIncTempRateViolation)
mibBuilder.exportSymbols("PowerNet-MIB", pcnsBypassDisabledDesc=pcnsBypassDisabledDesc, airIRSCUnitConfigCapacityControlType=airIRSCUnitConfigCapacityControlType, isxModularDistSubFeedInfoThresholdMin=isxModularDistSubFeedInfoThresholdMin, contactFault=contactFault, airIRG3CMConfigStopOnCoolFail=airIRG3CMConfigStopOnCoolFail, pcnsBypassContactorOk=pcnsBypassContactorOk, airIRG3GroupSetpointsCoolDeadbandUS=airIRG3GroupSetpointsCoolDeadbandUS, pcnsMinRedundancyLostCommandFilePath=pcnsMinRedundancyLostCommandFilePath, iemConfigContactsNumContacts=iemConfigContactsNumContacts, airFMSysThresholds=airFMSysThresholds, upsParallelSystem=upsParallelSystem, airIRG3RDUServiceIntervalsEntry=airIRG3RDUServiceIntervalsEntry, airIRSCUnitStatusSuctionTempUS=airIRSCUnitStatusSuctionTempUS, upsDiagSubSysFrameTable=upsDiagSubSysFrameTable, msvmOutletConfigChange=msvmOutletConfigChange, memBeaconConfigBeaconNumber=memBeaconConfigBeaconNumber, dm3ConfigCompTempCoeff=dm3ConfigCompTempCoeff, airIRRP100UnitThresholdsRackInletHighTempMetric=airIRRP100UnitThresholdsRackInletHighTempMetric, rPDU2DevicePropertiesMaxCurrentRating=rPDU2DevicePropertiesMaxCurrentRating, ePDUOutletStatusModule=ePDUOutletStatusModule, xATSOutputCurrentHighAlarmCleared=xATSOutputCurrentHighAlarmCleared, upsHighPrecBatteryCurrentEntry=upsHighPrecBatteryCurrentEntry, dm3StatusRectCurrent=dm3StatusRectCurrent, iemStatusContactStatus=iemStatusContactStatus, cpsInfoSerialPortErrFrame=cpsInfoSerialPortErrFrame, rPDUIdentDevicePowerFactor=rPDUIdentDevicePowerFactor, cpsSerialPortAuthSrv1=cpsSerialPortAuthSrv1, iemConfigProbeHighTempEnable=iemConfigProbeHighTempEnable, subfeedBreakerIndex=subfeedBreakerIndex, airIRSCUnitStatusContainmtDPUS=airIRSCUnitStatusContainmtDPUS, xATSOutputRelays=xATSOutputRelays, rPDUPowerSupply2Ok=rPDUPowerSupply2Ok, rPDUStatusOutletTable=rPDUStatusOutletTable, airFMModBlwr1DCLinkVlt=airFMModBlwr1DCLinkVlt, sPDUMasterStatusVMCurrentLoad=sPDUMasterStatusVMCurrentLoad, airIRRP500UnitStatusRackInletTemperature1Metric=airIRRP500UnitStatusRackInletTemperature1Metric, airIRmPmEheating2Running=airIRmPmEheating2Running, airIRmPmMyZoneEmergencyTemperatureF=airIRmPmMyZoneEmergencyTemperatureF, rARUConfigAruIndex=rARUConfigAruIndex, memOutputStatusOutputLocation=memOutputStatusOutputLocation, airIRRP500UnitStatusFilterDPMetric=airIRRP500UnitStatusFilterDPMetric, battManUnitStatus=battManUnitStatus, coolingUnit=coolingUnit, isxModularDistSysOutputVoltageNominalLineToLine=isxModularDistSysOutputVoltageNominalLineToLine, airIRRP500GroupConfigNumberofCoolingUnits=airIRRP500GroupConfigNumberofCoolingUnits, apcDoorClosedImproperlyCleared=apcDoorClosedImproperlyCleared, airIRG3CMServiceIntervalsAirFilterAlarm=airIRG3CMServiceIntervalsAirFilterAlarm, battManStringEntry=battManStringEntry, xATSGeneratorBatteryChargerCleared=xATSGeneratorBatteryChargerCleared, xPDUDeviceCrossTieOutputPresent=xPDUDeviceCrossTieOutputPresent, apcDeviceConfigChange=apcDeviceConfigChange, upsDiagSubSysBackfeedContactorTable=upsDiagSubSysBackfeedContactorTable, powerModuleOK=powerModuleOK, upsDiagSubSysNetworkComCardFirmwareAppOSRev=upsDiagSubSysNetworkComCardFirmwareAppOSRev, atsOutputVoltageOrientation=atsOutputVoltageOrientation, galaxy7000UPS200kVA=galaxy7000UPS200kVA, upsPhaseOutputMaxPercentLoad=upsPhaseOutputMaxPercentLoad, upsDiagSubSysExternalSwitchGearTableSize=upsDiagSubSysExternalSwitchGearTableSize, pcnsPowerRestoredCommandFilePath=pcnsPowerRestoredCommandFilePath, airIRmPmDrycooler3WinterStartTempC=airIRmPmDrycooler3WinterStartTempC, pmmWarningConditionCleared=pmmWarningConditionCleared, upsAdvConfigVoutReporting=upsAdvConfigVoutReporting, xPDUInputContactStateAbnormal=xPDUInputContactStateAbnormal, airIRmPmSensor9Failure=airIRmPmSensor9Failure, memOutletLocation=memOutletLocation, smartUPS2=smartUPS2, airIRRP100GroupConfigMaxFanSpeed=airIRRP100GroupConfigMaxFanSpeed, airIRmPmLastMaintenanceYear=airIRmPmLastMaintenanceYear, upsDiagIMSerialNum=upsDiagIMSerialNum, sPDUIdentFirmwareRevVM=sPDUIdentFirmwareRevVM, galaxy5000UPS120KVA=galaxy5000UPS120KVA, airIRmPmFan3ManOpSpeed=airIRmPmFan3ManOpSpeed, airFMSysSuctPresCompensation=airFMSysSuctPresCompensation, isxModularDistSysOutputVoltageFrequencyTolerance=isxModularDistSysOutputVoltageFrequencyTolerance, pcnsCommunicationLost=pcnsCommunicationLost, rPDU2DevicePropertiesNumSwitchedOutlets=rPDU2DevicePropertiesNumSwitchedOutlets, accessPXStatusFrontDoorHandle=accessPXStatusFrontDoorHandle, pmmInformationalConditionCleared=pmmInformationalConditionCleared, airFMStatusModuleReturnTempF=airFMStatusModuleReturnTempF, rPDU2SensorDiscreteStatusCommStatus=rPDU2SensorDiscreteStatusCommStatus, airIRmPmHumidifier1StartHumidity=airIRmPmHumidifier1StartHumidity, airIRRCUnitIdentName=airIRRCUnitIdentName, airIRmPmLouver3Position=airIRmPmLouver3Position, iemContactFault=iemContactFault, airIRmPmMyZoneSupplyTemperature=airIRmPmMyZoneSupplyTemperature, airIRG3CMStatusLiquidTempMetric=airIRG3CMStatusLiquidTempMetric, upsDiagnosticPowerCabinetTable=upsDiagnosticPowerCabinetTable, battManString1ResponseTestCurrentBenchmarkTable=battManString1ResponseTestCurrentBenchmarkTable, upsBatteryCabBlockTemperature=upsBatteryCabBlockTemperature, galaxy5500UPS120KVA=galaxy5500UPS120KVA, rPDU2OutletSwitchedControlName=rPDU2OutletSwitchedControlName, cpsCardConfPower=cpsCardConfPower, smartUPS900=smartUPS900, mconfigBOOTPEnabled=mconfigBOOTPEnabled, apcEnvMaxHumidityThresholdViolationCleared=apcEnvMaxHumidityThresholdViolationCleared, upsBatteryCabBlockStringReference=upsBatteryCabBlockStringReference, isxModularDistModuleOutputThresholdMin=isxModularDistModuleOutputThresholdMin, airFMStatusSystemActionHum=airFMStatusSystemActionHum, airIRRP100UnitStatusRackInletTemperature3US=airIRRP100UnitStatusRackInletTemperature3US, wirelessSensorConfigLowRssiThresh=wirelessSensorConfigLowRssiThresh, airIRmPmPump4ManOpRunning=airIRmPmPump4ManOpRunning, xATSSource1Name=xATSSource1Name, airACRC300Series=airACRC300Series, apcAnalogInputLowThresholdViolation=apcAnalogInputLowThresholdViolation, airIRRP100UnitRunHoursCondensatePump=airIRRP100UnitRunHoursCondensatePump, xATSSystemOutputUnderCurrentThreshold=xATSSystemOutputUnderCurrentThreshold, upsDiagSubSysIDRCTable=upsDiagSubSysIDRCTable, upsOutputRelayConfigDelay=upsOutputRelayConfigDelay, atsPowerSupplyFailureCleared=atsPowerSupplyFailureCleared, ats4gCalibrationOutputPhasesTableIndex=ats4gCalibrationOutputPhasesTableIndex, dm3ConfigLVDTable=dm3ConfigLVDTable, atsCommunicationLost=atsCommunicationLost, airFMModIdentTable=airFMModIdentTable, sPDUOutletConfigMSPallOutletIndex=sPDUOutletConfigMSPallOutletIndex, upsDiagBatteryFramePresent=upsDiagBatteryFramePresent, dm3StatusAlarmsTable=dm3StatusAlarmsTable, airIRmPmSensor8Failure=airIRmPmSensor8Failure, upsFirmwareUpdateStarted=upsFirmwareUpdateStarted, dm3ConfigConvAlarms=dm3ConfigConvAlarms, airIRmPmRuntimeHeating=airIRmPmRuntimeHeating, xATSDataCommMismatchError=xATSDataCommMismatchError, cpsSerialNFS=cpsSerialNFS, rPDU2OutletMeteredConfigOverloadCurrentThreshold=rPDU2OutletMeteredConfigOverloadCurrentThreshold, cpsEthIPaddr2=cpsEthIPaddr2, upsAdvOutputStatisticsIndex=upsAdvOutputStatisticsIndex, airIRG2RDT2StatusOHEOutputState=airIRG2RDT2StatusOHEOutputState, rPDUIdentHardwareRev=rPDUIdentHardwareRev, mUpsEnvironAmbientTemperature2=mUpsEnvironAmbientTemperature2, rPDULoadBankConfigEntry=rPDULoadBankConfigEntry, wirelessSensorPodStatusMaxHumidityThresh=wirelessSensorPodStatusMaxHumidityThresh, airFMIdentEntry=airFMIdentEntry, xPDUBypassVoltageLowAlarm=xPDUBypassVoltageLowAlarm, upsHighPrecInput=upsHighPrecInput, upsBatteryCabStringCabReference=upsBatteryCabStringCabReference, airFMModFilterDiffPresPa=airFMModFilterDiffPresPa, coolingUnitConfigurationDiscreteAccess=coolingUnitConfigurationDiscreteAccess, xATSGeneratorStatusOperational=xATSGeneratorStatusOperational, upsHighPrecActivePower=upsHighPrecActivePower, upsAdvConfigBatteryHealthAlarmWarningTime=upsAdvConfigBatteryHealthAlarmWarningTime, emsOutletStateAbnormal=emsOutletStateAbnormal, airFMSystem=airFMSystem, rPDUStatusPhaseNumber=rPDUStatusPhaseNumber, forcedBypassSwitchActivated=forcedBypassSwitchActivated, apcAnalogInputMaxThresholdViolation=apcAnalogInputMaxThresholdViolation, upsAdvBatteryCurrent=upsAdvBatteryCurrent, rPDU2OutletMeteredStatusNumber=rPDU2OutletMeteredStatusNumber, pmmDeviceNominalInputVoltage=pmmDeviceNominalInputVoltage, epoActivated=epoActivated, isxModularDistModuleInfoDateOfManufacture=isxModularDistModuleInfoDateOfManufacture, upsPfcFaultCleared=upsPfcFaultCleared, battManUnitStatusIndex=battManUnitStatusIndex, automaticTransferSwitch=automaticTransferSwitch, ats4gOutputCurrentCalibrationFactor=ats4gOutputCurrentCalibrationFactor, atsStatusResetValues=atsStatusResetValues, upsDiagSubSysUsrSuppBattMonitorIndex=upsDiagSubSysUsrSuppBattMonitorIndex, isxModularPduIdentMonitorCardFirmwareAppOSRev=isxModularPduIdentMonitorCardFirmwareAppOSRev, airIRG3IdentSerialNumber=airIRG3IdentSerialNumber, airIRG3CMThresholdsEntry=airIRG3CMThresholdsEntry, gutorPXC=gutorPXC, badVoltageCleared=badVoltageCleared, dm3ConfigInRlyIndex=dm3ConfigInRlyIndex, dm3ConfigBattery=dm3ConfigBattery, rPDU2OutletSwitchedStatusIndex=rPDU2OutletSwitchedStatusIndex, sPDUOutletConfigMSPallOutletName=sPDUOutletConfigMSPallOutletName, xATSSource2VoltageLtoN=xATSSource2VoltageLtoN, rPDU2IdentContact=rPDU2IdentContact, dcBBCommunicationEstablished=dcBBCommunicationEstablished, isxModularDistModuleInfoTable=isxModularDistModuleInfoTable, galaxyVSUPS20kW=galaxyVSUPS20kW, xPDUBranchBreakerTableIndex=xPDUBranchBreakerTableIndex, airIRmPmPWWHeating=airIRmPmPWWHeating, airIRmPmWinterModeHysteresisK=airIRmPmWinterModeHysteresisK, battManString1OhmicValueTable=battManString1OhmicValueTable, atsOutputBankMinPower=atsOutputBankMinPower, airIRRP500UnitRunHoursAirFilter=airIRRP500UnitRunHoursAirFilter, mUpsEnviron=mUpsEnviron, dm3StatusAlarmsTableSize=dm3StatusAlarmsTableSize, upsBatteryPackIncompatibleCleared=upsBatteryPackIncompatibleCleared, emStatusProbeStatus=emStatusProbeStatus, airIRRP500GroupConfigCoolGainP=airIRRP500GroupConfigCoolGainP, airIRmPmWaterTemperature=airIRmPmWaterTemperature, airIRmPmNumberOfPWWReheat=airIRmPmNumberOfPWWReheat, emsProbeDisconnected=emsProbeDisconnected, sPDUOutletConfigMSPgsLowBattWarning=sPDUOutletConfigMSPgsLowBattWarning, upsSCGACInputStatus=upsSCGACInputStatus, upsDiagnosticIM=upsDiagnosticIM, logicPowerSuppliesIncreased=logicPowerSuppliesIncreased, xATSSystemOutput=xATSSystemOutput, apcLocalDisplay=apcLocalDisplay, cpsSerialPortAuthRadP=cpsSerialPortAuthRadP, airIRSCUnitThresholdsRackInletHighTempUS=airIRSCUnitThresholdsRackInletHighTempUS, airIRmPmReheat4Failure=airIRmPmReheat4Failure, xATSOutputVoltageLowAlarmCleared=xATSOutputVoltageLowAlarmCleared, pmmInputLoad=pmmInputLoad, rPDU2IdentTableSize=rPDU2IdentTableSize, upsBatteryCabBlockVoltage=upsBatteryCabBlockVoltage, xPDUInputVoltageHighAlarmCleared=xPDUInputVoltageHighAlarmCleared, powerNetSoftwareTable=powerNetSoftwareTable, xATSOutputRelayNumber=xATSOutputRelayNumber, pmmBranchCircuitNumberOfPoles=pmmBranchCircuitNumberOfPoles, memOutlets=memOutlets, airIRSCUnitStatusRackInletTempMetric=airIRSCUnitStatusRackInletTempMetric, airIRG3RDUStatusPump1HeadPressureMetric=airIRG3RDUStatusPump1HeadPressureMetric, atsConfigBank=atsConfigBank, pmmOutputMaxApparentPowerThreshold=pmmOutputMaxApparentPowerThreshold, envWireless=envWireless, pcnsFaultBypassEnabledEnableLogging=pcnsFaultBypassEnabledEnableLogging, upsAdvConfigNumExternalBatteries=upsAdvConfigNumExternalBatteries, xPDUBypassInputVoltagePhaseIndex=xPDUBypassInputVoltagePhaseIndex, upsDiagSubSysInverterManufactureDate=upsDiagSubSysInverterManufactureDate, dm3ConfigBattLowVoltAlarm=dm3ConfigBattLowVoltAlarm, dm3StatusOutRlyName=dm3StatusOutRlyName, airFMSysAvgReturnHum=airFMSysAvgReturnHum, accControl=accControl, airIRmPmSetpointTemperatureDay=airIRmPmSetpointTemperatureDay, rPDU2DeviceStatusPeakPowerStartTime=rPDU2DeviceStatusPeakPowerStartTime, airFMSysAlarmMapExpMod2AirBlckIntOpen=airFMSysAlarmMapExpMod2AirBlckIntOpen, envMgtSystem=envMgtSystem, airIRRP100GroupStatusMinRackInletTempMetric=airIRRP100GroupStatusMinRackInletTempMetric, pcnsMaxInternalTempExceededShutdownDelay=pcnsMaxInternalTempExceededShutdownDelay, pcnsParallelRedundancyLostCommandFilePath=pcnsParallelRedundancyLostCommandFilePath, memFluidSensorStatusTableSize=memFluidSensorStatusTableSize, xATSSource2Quality=xATSSource2Quality, dm3StatusBreakersStatus=dm3StatusBreakersStatus, rPDU2PhaseStatusPeakCurrent=rPDU2PhaseStatusPeakCurrent, accessPXIdentSerialNumber=accessPXIdentSerialNumber, pcnsBatteryChargeInRangeEnableLogging=pcnsBatteryChargeInRangeEnableLogging, rARUStatusTable=rARUStatusTable, pcnsTempInRangeProbe1CommandFilePath=pcnsTempInRangeProbe1CommandFilePath, coolingUnitExtended=coolingUnitExtended, upsBasicBattery=upsBasicBattery, uioOutputRelayConfigTable=uioOutputRelayConfigTable, isxModularCoolingFanAlarm=isxModularCoolingFanAlarm, airFMSysAlarmMapSysHighEnvTemp=airFMSysAlarmMapSysHighEnvTemp, rPDU2BankConfigBankPeakCurrentReset=rPDU2BankConfigBankPeakCurrentReset, airIRRP500UnitRunHoursHumidifier=airIRRP500UnitRunHoursHumidifier, airIRmPmDehumidification=airIRmPmDehumidification, upsParallelDiagSubSysBreakerEntry=upsParallelDiagSubSysBreakerEntry, xATSGeneratorOutputVoltageLtoL=xATSGeneratorOutputVoltageLtoL, airIRG3CMStatusVaporTempUS=airIRG3CMStatusVaporTempUS, rPDU2Group=rPDU2Group, galaxy5500UPS50KVA=galaxy5500UPS50KVA, pmmInputMeterTableSize=pmmInputMeterTableSize, upsOutletGroupCommand=upsOutletGroupCommand, upsHighPrecInputBypassVoltage=upsHighPrecInputBypassVoltage, pcnsContactFault4CommandFilePath=pcnsContactFault4CommandFilePath, coolingUnitAboutTable=coolingUnitAboutTable, rPDU2DeviceStatusEntry=rPDU2DeviceStatusEntry, xATSSource1VoltageLtoL=xATSSource1VoltageLtoL, ePDUPhaseConfigLowVoltageThreshold=ePDUPhaseConfigLowVoltageThreshold, battManConfigAutoAnnunciatorReset=battManConfigAutoAnnunciatorReset, wirelessSensorPodConfigHighHumidityThresh=wirelessSensorPodConfigHighHumidityThresh, upsDiagTransformer=upsDiagTransformer, upsAdvTestDiagnostics=upsAdvTestDiagnostics)
mibBuilder.exportSymbols("PowerNet-MIB", sPDUMasterConfigVMName=sPDUMasterConfigVMName, memInputsStatusCurrentState=memInputsStatusCurrentState, airFMSysDehumidify=airFMSysDehumidify, gutorPEW=gutorPEW, pmmOutputMaxCurrentThreshold=pmmOutputMaxCurrentThreshold, atsCalibrationOutputEntry=atsCalibrationOutputEntry, airIRG3RDUConfigOutputSource=airIRG3RDUConfigOutputSource, isxModularPduIdentDateOfManufacture=isxModularPduIdentDateOfManufacture, isxcInformationalAlarm=isxcInformationalAlarm, airIRG2RDT2StatusCoolOutput=airIRG2RDT2StatusCoolOutput, upsHighPrecTotalDCCurrentTable=upsHighPrecTotalDCCurrentTable, airIRSCUnitConfigConfigurationType=airIRSCUnitConfigConfigurationType, dcmim2StatusSysUpTime=dcmim2StatusSysUpTime, wirelessSensorPodConfigName=wirelessSensorPodConfigName, upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmng=upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmng, upsAdvConfigChargerLevel=upsAdvConfigChargerLevel, dp100E=dp100E, airFMSysInputIndex=airFMSysInputIndex, rARUStatusEntry=rARUStatusEntry, memSensorsHumidityLowThresh=memSensorsHumidityLowThresh, battManAlarmBatteries=battManAlarmBatteries, deviceName=deviceName, miniSNMPadapter=miniSNMPadapter, emsVibrationSensorConfigSensorIndex=emsVibrationSensorConfigSensorIndex, smartBoostOn=smartBoostOn, upsDiagBatteryTemperature=upsDiagBatteryTemperature, airIRmPmAlarmBits=airIRmPmAlarmBits, airFMSysAlarmMapInput15=airFMSysAlarmMapInput15, apcOutputRelayStateNormal=apcOutputRelayStateNormal, emsSensorControlSensorSystemName=emsSensorControlSensorSystemName, airIRG3RDUStatusPump2Speed=airIRG3RDUStatusPump2Speed, coolingUnitConfigurationDiscrete=coolingUnitConfigurationDiscrete, abnormalConditionCleared=abnormalConditionCleared, wirelessSensorPodConfigMinRssiThresh=wirelessSensorPodConfigMinRssiThresh, isxModularDistModuleBreakerRating=isxModularDistModuleBreakerRating, emConfigContactsNumContacts=emConfigContactsNumContacts, pcnsMaxInternalTempInRangeDesc=pcnsMaxInternalTempInRangeDesc, airIRRD100Series=airIRRD100Series, ePDUPhase=ePDUPhase, bmBatManMaintenanceAlarmCleared=bmBatManMaintenanceAlarmCleared, upsAdvControl=upsAdvControl, sPDUMasterControlMSPIndex=sPDUMasterControlMSPIndex, switchgearBreakerIndex=switchgearBreakerIndex, dcmim2StatusBattFloatVolt=dcmim2StatusBattFloatVolt, dm3ConfigOutRlyEntry=dm3ConfigOutRlyEntry, airIRmPmSensor4Failure=airIRmPmSensor4Failure, iemLowTempThresholdViolationCleared=iemLowTempThresholdViolationCleared, isxModularDistModuleOutputKwhReset=isxModularDistModuleOutputKwhReset, airIRRP500UnitStatusEnteringFluidTemperatureUS=airIRRP500UnitStatusEnteringFluidTemperatureUS, xPDUIdentFirmwareControllerRev=xPDUIdentFirmwareControllerRev, sPDUIdentModelNumberVM=sPDUIdentModelNumberVM, pmmSiteConfigNominalPtoNVoltage=pmmSiteConfigNominalPtoNVoltage, pcnsOverloadSolvedCommandFileDelay=pcnsOverloadSolvedCommandFileDelay, rPDUStatusOutletState=rPDUStatusOutletState, apcDeviceConnected=apcDeviceConnected, airFMSysAlarmMapOutput7=airFMSysAlarmMapOutput7, airFMGroupFailoverSysLowEnvTemp=airFMGroupFailoverSysLowEnvTemp, pcnsAdvancedShutdownCommandFile=pcnsAdvancedShutdownCommandFile, pcnsMinLoadCapabilityRegained=pcnsMinLoadCapabilityRegained, upsDiagPMEnclDoorFltrStatus=upsDiagPMEnclDoorFltrStatus, pcnsBatteryChargeInRangeDesc=pcnsBatteryChargeInRangeDesc, coolingUnitConfigurationStringAccess=coolingUnitConfigurationStringAccess, battManStringTableSize=battManStringTableSize, airFMModBlwr2AccTime=airFMModBlwr2AccTime, airIRmPmEheating1StartTemperatureF=airIRmPmEheating1StartTemperatureF, pcbeIdent=pcbeIdent, wirelessSensorConfigEntry=wirelessSensorConfigEntry, airFMSysDehumState=airFMSysDehumState, dcmim2Ident=dcmim2Ident, upsPhaseInputVoltage=upsPhaseInputVoltage, emsProbeConfigProbeName=emsProbeConfigProbeName, upsDiagSubSysUsrSuppBattMonitorEntry=upsDiagSubSysUsrSuppBattMonitorEntry, airIRG3GroupStatusMaxRackInletTempMetric=airIRG3GroupStatusMaxRackInletTempMetric, airFMSysMinRemoteTempC=airFMSysMinRemoteTempC, atsRMSUnderVoltage=atsRMSUnderVoltage, memBeaconStatusTableSize=memBeaconStatusTableSize, setPulseOnTXD=setPulseOnTXD, pmmBranchCircuitMaxInstantaneousCurrentPhase=pmmBranchCircuitMaxInstantaneousCurrentPhase, conPortServAP930x=conPortServAP930x, battManString1BatteryUserHighVoltageAlarm=battManString1BatteryUserHighVoltageAlarm, airFMGroupFailoverModBlwrCntrl2Fail=airFMGroupFailoverModBlwrCntrl2Fail, dm3StatusRectTable=dm3StatusRectTable, masterSwitchMSP=masterSwitchMSP, coolingUnitExtendedDiscreteTableIndex=coolingUnitExtendedDiscreteTableIndex, mUpsEnvironRelativeHumidity=mUpsEnvironRelativeHumidity, uioSensorConfigMinHumidityThreshold=uioSensorConfigMinHumidityThreshold, airIRmPmWaterTemperatureC=airIRmPmWaterTemperatureC, airIRG2RDT2StatusSupplyAirTempUS=airIRG2RDT2StatusSupplyAirTempUS, airIRG2IdentName=airIRG2IdentName, airIRRCUnitStatusEnteringFluidTemperatureUS=airIRRCUnitStatusEnteringFluidTemperatureUS, battManUnitCalibTable=battManUnitCalibTable, airFMModBlwr1ActTorq=airFMModBlwr1ActTorq, pmmInputPhaseCurrent=pmmInputPhaseCurrent, airIRmPmSensor1Failure=airIRmPmSensor1Failure, mtrapargsTimeTicks02=mtrapargsTimeTicks02, chargerInputPhaseTableIndex=chargerInputPhaseTableIndex, iemConfigProbeLowHumidThreshold=iemConfigProbeLowHumidThreshold, xATSGeneratorGenericEventCleared=xATSGeneratorGenericEventCleared, airFMStatusModuleSupplyTempC=airFMStatusModuleSupplyTempC, upsAdvInputBypassPeakCurrent=upsAdvInputBypassPeakCurrent, coolingUnitConfigurationDiscreteIntegerReferenceKey=coolingUnitConfigurationDiscreteIntegerReferenceKey, isxModularDistInfoMeterSerialNumber=isxModularDistInfoMeterSerialNumber, pduUtilityLineUndervoltageCleared=pduUtilityLineUndervoltageCleared, rPDUOutlet=rPDUOutlet, airIRG2GroupSetptsFanSpeedPreference=airIRG2GroupSetptsFanSpeedPreference, coolingUnitExtendedStringTable=coolingUnitExtendedStringTable, airFMStatusModuleTable=airFMStatusModuleTable, airIRmPmSensor4Defect=airIRmPmSensor4Defect, uioSensorConfigMaxTemperatureThreshold=uioSensorConfigMaxTemperatureThreshold, airIRRP500GroupConfigReheatDerivativeD=airIRRP500GroupConfigReheatDerivativeD, rPDU2IndentAOSBuildDate=rPDU2IndentAOSBuildDate, galaxy5000UPS20KVA=galaxy5000UPS20KVA, pmmOutputHighVoltThreshold=pmmOutputHighVoltThreshold, upsHighPrecBatteryCurrentIndex=upsHighPrecBatteryCurrentIndex, airIRmPmLastMaintenanceMonth=airIRmPmLastMaintenanceMonth, upsDiagFlyWheel=upsDiagFlyWheel, rPDUIdentDeviceLinetoNeutralVoltage=rPDUIdentDeviceLinetoNeutralVoltage, rPDULoadStatusBankNumber=rPDULoadStatusBankNumber, dcmim2ConfigSysHighTempTrip=dcmim2ConfigSysHighTempTrip, coolingUnitExtendedAnalogEntry=coolingUnitExtendedAnalogEntry, airIRG3RDUConfigTable=airIRG3RDUConfigTable, uioInputContactConfigEnable=uioInputContactConfigEnable, atsStatus24VSourceBPowerSupply=atsStatus24VSourceBPowerSupply, xATSGenCommEstablished=xATSGenCommEstablished, emsSensorStatusSensorSystemName=emsSensorStatusSensorSystemName, airFMSysAlarmMapExpMod2LowAirFlow=airFMSysAlarmMapExpMod2LowAirFlow, pcnsContactFault4CommandFileDelay=pcnsContactFault4CommandFileDelay, rARUPowerStatusPrimaryAcPresent=rARUPowerStatusPrimaryAcPresent, airIRG3RDUStatusSubcoolerOutletTempUS=airIRG3RDUStatusSubcoolerOutletTempUS, xPDUBranchCurrentHighAlarm=xPDUBranchCurrentHighAlarm, airIRSCUnitRunHoursCompressor=airIRSCUnitRunHoursCompressor, airIRmPmFireSmokeDetector=airIRmPmFireSmokeDetector, upsAdvConfigFreqBypassTransferRange=upsAdvConfigFreqBypassTransferRange, upsParallelOutputActivePowerTable=upsParallelOutputActivePowerTable, rPDU2BankConfigLowLoadCurrentThreshold=rPDU2BankConfigLowLoadCurrentThreshold, airIRG2RDT2ServiceIntervalsAirFilterAlarm=airIRG2RDT2ServiceIntervalsAirFilterAlarm, cpsSerialPortTelnetMode=cpsSerialPortTelnetMode, airIRRP500UnitStatusHumidifierWaterConductivity=airIRRP500UnitStatusHumidifierWaterConductivity, airIRG2RDT2ThresholdsSupplyAirHighTempUS=airIRG2RDT2ThresholdsSupplyAirHighTempUS, airIRRP500UnitConfigSecondaryPowerFeedCapability=airIRRP500UnitConfigSecondaryPowerFeedCapability, xATSGeneratorIdent=xATSGeneratorIdent, ePDUSensorConfigHumidityMinThreshold=ePDUSensorConfigHumidityMinThreshold, databaseStatus=databaseStatus, dcmim2ConfigBattery=dcmim2ConfigBattery, airFMModBlwr2CmdFreq=airFMModBlwr2CmdFreq, airIRRP500GroupConfigReheatGainP=airIRRP500GroupConfigReheatGainP, emsAlinkPowerOverload=emsAlinkPowerOverload, sPDUMasterControlMSPEntry=sPDUMasterControlMSPEntry, rPDUOutletBank=rPDUOutletBank, emConfigContactSeverity=emConfigContactSeverity, upsAdvControlBypassSwitch=upsAdvControlBypassSwitch, airIRRP100GroupConfigCoolResetRateI=airIRRP100GroupConfigCoolResetRateI, airIRG3RDUStatusPump1HeadPressureUS=airIRG3RDUStatusPump1HeadPressureUS, battManInputContactTable=battManInputContactTable, pcnsHumidityOutOfRangeProbe1CommandFileDelay=pcnsHumidityOutOfRangeProbe1CommandFileDelay, airIRmPmEheating1StartTemperatureK=airIRmPmEheating1StartTemperatureK, atsInputPhaseEntry=atsInputPhaseEntry, accessPXConfig=accessPXConfig, apcEnvLTDecTempRateViolationCleared=apcEnvLTDecTempRateViolationCleared, upsAdvBatteryActualVoltagePolarity=upsAdvBatteryActualVoltagePolarity, pmmBranchCircuitTotalPowerFactor=pmmBranchCircuitTotalPowerFactor, pmmBranchCircuitBranchNumber=pmmBranchCircuitBranchNumber, rPDU2Device=rPDU2Device, atsOutputPhase=atsOutputPhase, airIRSCUnitThresholds=airIRSCUnitThresholds, bmBatManKneeAlarmCleared=bmBatManKneeAlarmCleared, airFMSysAlarmMapOutput10=airFMSysAlarmMapOutput10, xATSSystemOutputOverCurrentThreshold=xATSSystemOutputOverCurrentThreshold, rARUStatusAruCommStatus=rARUStatusAruCommStatus, upsOutletGroupConfigPowerOffDelay=upsOutletGroupConfigPowerOffDelay, airFMGroupSysStatus=airFMGroupSysStatus, rPDUIdentDeviceBreakerRating=rPDUIdentDeviceBreakerRating, airIRmPmOutsideAirTemperatureF=airIRmPmOutsideAirTemperatureF, dm3StatusRectFanFail=dm3StatusRectFanFail, pmmInputAverageCurrentTHD=pmmInputAverageCurrentTHD, airIRG3CMStatusVaporOutletPressureUS=airIRG3CMStatusVaporOutletPressureUS, dm3StatusOEM=dm3StatusOEM, upsDiagBatteryType=upsDiagBatteryType, airIRmPmEheating2StartTemperatureK=airIRmPmEheating2StartTemperatureK, battManString1BatteryCalibTable=battManString1BatteryCalibTable, pmmSiteConfigTableSize=pmmSiteConfigTableSize, upsDiagSubFeedBreakerIndex=upsDiagSubFeedBreakerIndex, airIRRP500UnitIdentID=airIRRP500UnitIdentID, pmmBranchBreakerTable=pmmBranchBreakerTable, airFMSysCoilFluidVlvType=airFMSysCoilFluidVlvType, pmmBranchCircuitMinApparentPowerThreshold=pmmBranchCircuitMinApparentPowerThreshold, airIRRCUnitStatusAirFlowUS=airIRRCUnitStatusAirFlowUS, xPDUUPSInputVoltagePhaseEntry=xPDUUPSInputVoltagePhaseEntry, rPDUOutletConfigTable=rPDUOutletConfigTable, rPDU2OutletMeteredStatusTable=rPDU2OutletMeteredStatusTable, upsHighPrecTotalDCCurrentEntry=upsHighPrecTotalDCCurrentEntry, upsEnergyEfficiencyStatsInputEnergyUsage=upsEnergyEfficiencyStatsInputEnergyUsage, upsDiagSubSysXRCommunicationCardEntry=upsDiagSubSysXRCommunicationCardEntry, airIRG3RDUStatusDewPointTempUS=airIRG3RDUStatusDewPointTempUS, isxModularDistSubFeedInfoSubIndex=isxModularDistSubFeedInfoSubIndex, xATSSwitchStatisticsName=xATSSwitchStatisticsName, emsVibrationSensorStatusSensorLocation=emsVibrationSensorStatusSensorLocation, rPDU2OutletSwitchedPropertiesEntry=rPDU2OutletSwitchedPropertiesEntry, dm3ConfigInRlyName=dm3ConfigInRlyName, iemConfigProbeMaxTempThreshold=iemConfigProbeMaxTempThreshold, atsStatusVBoostSourceB=atsStatusVBoostSourceB, ePDUPhaseConfigTable=ePDUPhaseConfigTable, pcnsCommunicationLostOnBatteryCommandFilePath=pcnsCommunicationLostOnBatteryCommandFilePath, airFMSysAlarmMapMainModBlwrCntl1Fail=airFMSysAlarmMapMainModBlwrCntl1Fail, airIRG2RDT2ConfigStartupDelay=airIRG2RDT2ConfigStartupDelay, pcnsContactNormal1EnableCommandFile=pcnsContactNormal1EnableCommandFile, airIRSCUnitStatusLeakSensor=airIRSCUnitStatusLeakSensor, rPDUBankPhaseNearOverload=rPDUBankPhaseNearOverload, upsDiagSubSysSystemPowerSupplyStatus=upsDiagSubSysSystemPowerSupplyStatus, emsOutletConfigTable=emsOutletConfigTable, airIRG2GroupStatusAirFlowMetric=airIRG2GroupStatusAirFlowMetric, airIRmPmMaxLimitSupplyAirTemperatureC=airIRmPmMaxLimitSupplyAirTemperatureC, airIRRP500UnitStatusRackInletTemperature2Metric=airIRRP500UnitStatusRackInletTemperature2Metric, rPDUPowerSupply1Status=rPDUPowerSupply1Status, airIRmPmNumberOfElectricHeaters=airIRmPmNumberOfElectricHeaters, upsEcoModeTotalTimeSinceReset=upsEcoModeTotalTimeSinceReset, airFMSysAlarmMapInputTable=airFMSysAlarmMapInputTable, memVibrationSensorStatusModuleIndex=memVibrationSensorStatusModuleIndex, xATSGeneratorServiceRunHoursThreshold=xATSGeneratorServiceRunHoursThreshold, pmmOutputBreakerOpenAlarm=pmmOutputBreakerOpenAlarm, pmmSiteConfigNominalApparentPower=pmmSiteConfigNominalApparentPower, airFMAlarmClearActiveGroupAlarms=airFMAlarmClearActiveGroupAlarms, coolingUnitExtendedAnalogScale=coolingUnitExtendedAnalogScale, sPDUOutletConfigMSPgsRebootDuration=sPDUOutletConfigMSPgsRebootDuration, upsDiagSubSysSystemPowerSupplyTableSize=upsDiagSubSysSystemPowerSupplyTableSize, rPDU2OutletSwitchedPropertiesBank=rPDU2OutletSwitchedPropertiesBank, emsStatusCommStatus=emsStatusCommStatus, airIRG3CMRunHoursFan3=airIRG3CMRunHoursFan3, xATSTestFailed=xATSTestFailed, rPDUPowerSupply1Fail=rPDUPowerSupply1Fail, airPAOperatingMode=airPAOperatingMode, emsSensorControlTable=emsSensorControlTable, upsOutletGroupConfigOutletType=upsOutletGroupConfigOutletType, pcnsHumidityOutOfRangeProbe1EnableCommandFile=pcnsHumidityOutOfRangeProbe1EnableCommandFile, iemStatusProbeCurrentHumid=iemStatusProbeCurrentHumid, cpsSerialSsh=cpsSerialSsh, uioOutputRelayConfigControlState=uioOutputRelayConfigControlState, smartUPS=smartUPS, battManSystemCalib=battManSystemCalib, apcBeaconOn=apcBeaconOn, pmmOutputBreakerState=pmmOutputBreakerState, sPDUOutletControlMSPTable=sPDUOutletControlMSPTable, upsAdvStateNumberoftimesbypass=upsAdvStateNumberoftimesbypass, isxModularDistSysPower=isxModularDistSysPower, dcMultRectFailAlarmCleared=dcMultRectFailAlarmCleared, emsSensorControlSensorUserName=emsSensorControlSensorUserName, cpsInfoSerialPortName=cpsInfoSerialPortName, rPDU2IdentEntry=rPDU2IdentEntry, upsOutputRelayAbnormal=upsOutputRelayAbnormal, accessPXStatusBeacon=accessPXStatusBeacon, airFMModCoilFluidVlvPos=airFMModCoilFluidVlvPos, airIRmPmPump2MaxAdjust=airIRmPmPump2MaxAdjust, sPDUOutletConfigIndex=sPDUOutletConfigIndex, isxModularDistSubFeedInfoTable=isxModularDistSubFeedInfoTable)
mibBuilder.exportSymbols("PowerNet-MIB", xATSGeneratorServiceResetRecord=xATSGeneratorServiceResetRecord, atsNumInputs=atsNumInputs, dcmim2ConfigBattMfgCapacity=dcmim2ConfigBattMfgCapacity, xATSGeneratorServiceTotalkWhLifetime=xATSGeneratorServiceTotalkWhLifetime, airFMModCooling=airFMModCooling, airIRRCUnitStatusFluidFlowMetric=airIRRCUnitStatusFluidFlowMetric, aruDeviceConfigChange=aruDeviceConfigChange, rPDU2SensorDiscreteStatusCurrentState=rPDU2SensorDiscreteStatusCurrentState, gutorPXP=gutorPXP, emsConfigCheckLogLight=emsConfigCheckLogLight, emsSmokeSensorCommStatus=emsSmokeSensorCommStatus, airFMSysAlarmMapOutput3=airFMSysAlarmMapOutput3, rPDULoadDevMaxPhaseLoad=rPDULoadDevMaxPhaseLoad, pmmInputVoltageHighAlarm=pmmInputVoltageHighAlarm, airFMModBlwr1HeatsinkTempF=airFMModBlwr1HeatsinkTempF, ePDUPhaseStatusActivePower=ePDUPhaseStatusActivePower, airIRRP500UnitStatusRackInletTemperature3Metric=airIRRP500UnitStatusRackInletTemperature3Metric, airPASupplyTempC=airPASupplyTempC, configChangeOutlet=configChangeOutlet, upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmngPct=upsDiagSubSysIntBypSwitchFanEstmtdLifetimeRmngPct, rPDULoadDevNumPhases=rPDULoadDevNumPhases, memInputAnalogCalibrationPoint2Value=memInputAnalogCalibrationPoint2Value, intelligenceModuleRemoved=intelligenceModuleRemoved, upsHighPrecBatteryActualVoltageTable=upsHighPrecBatteryActualVoltageTable, upsAdvTotalDCCurrentTable=upsAdvTotalDCCurrentTable, atsControllerRestart=atsControllerRestart, memBeaconConfigTableSize=memBeaconConfigTableSize, iemConfigProbeTempUnits=iemConfigProbeTempUnits, bmBatManCommEstab=bmBatManCommEstab, upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct=upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct, galaxy5000UPS80KVA=galaxy5000UPS80KVA, dm3StatusBreakersName=dm3StatusBreakersName, isxModularSubfeedMinCurrentThresholdViolation=isxModularSubfeedMinCurrentThresholdViolation, airFMSysAlarmMapMainModAirBlckIntOpen=airFMSysAlarmMapMainModAirBlckIntOpen, battManInputContactAlarmDelay=battManInputContactAlarmDelay, pcnsLoggingLevel=pcnsLoggingLevel, upsHighPrecBatteryPackOnlyTable=upsHighPrecBatteryPackOnlyTable, airFMSysAlarmMapSysLowEnvTemp=airFMSysAlarmMapSysLowEnvTemp, xPDUCoolingFanAlarm=xPDUCoolingFanAlarm, dcCommunicationEstablished=dcCommunicationEstablished, upsDiagSwitchGearBreakerEntry=upsDiagSwitchGearBreakerEntry, memBeaconConfigTable=memBeaconConfigTable, rPDUOutletConfigPowerOffTime=rPDUOutletConfigPowerOffTime, pmmBranchCircuitBreakerMaxInstantaneousAverageCurrent=pmmBranchCircuitBreakerMaxInstantaneousAverageCurrent, uioSensorStatusTemperatureDegC=uioSensorStatusTemperatureDegC, sPDUOutletConfigMSPmups=sPDUOutletConfigMSPmups, upsEbmModePercentTimeSinceCommission=upsEbmModePercentTimeSinceCommission, cpsSerialPortAuthtype=cpsSerialPortAuthtype, airIRG3RDUStatusOutletWaterTempUS=airIRG3RDUStatusOutletWaterTempUS, apcEnvSensorConnected=apcEnvSensorConnected, xATSGeneratorAdvStatus=xATSGeneratorAdvStatus, battManString1ResponseTestChangeIndex=battManString1ResponseTestChangeIndex, upsBatteryCabinetTemperature=upsBatteryCabinetTemperature, ats4gCalibrationPowerSupplyVoltageTable=ats4gCalibrationPowerSupplyVoltageTable, iemStatusProbesNumProbes=iemStatusProbesNumProbes, wirelessSensorConfigAlarmGeneration=wirelessSensorConfigAlarmGeneration, airFMModHumActualOutput=airFMModHumActualOutput, memInputType=memInputType, isxModularDistModuleOutputTotalPower=isxModularDistModuleOutputTotalPower, memOutletStatusTable=memOutletStatusTable, mtrapargsTimeTicks=mtrapargsTimeTicks, airIRG3RDUServiceIntervalsAirFilterInterval=airIRG3RDUServiceIntervalsAirFilterInterval, dm3StatusLVDEntry=dm3StatusLVDEntry, coolingUnitConfigurationStringMaxLength=coolingUnitConfigurationStringMaxLength, bmsCriticalCondition=bmsCriticalCondition, battManString1ResponseTestChangeData=battManString1ResponseTestChangeData, powerNetSoftwareEntry=powerNetSoftwareEntry, airIRSCUnitRunHoursFanPowerSupplyLeft=airIRSCUnitRunHoursFanPowerSupplyLeft, rPDUOutletLowLoadCleared=rPDUOutletLowLoadCleared, airIRSCGroupStatusActiveFlowControlStatus=airIRSCGroupStatusActiveFlowControlStatus, dm3ConfigInputRelays=dm3ConfigInputRelays, airIRmPmLouver3=airIRmPmLouver3, upsParallelInputMaxVoltage=upsParallelInputMaxVoltage, dm3ConfigBreakersAlarm=dm3ConfigBreakersAlarm, airIRRP500UnitStatusSupplyAirTempUS=airIRRP500UnitStatusSupplyAirTempUS, upsAdvOutput=upsAdvOutput, cpsCardIdentProd=cpsCardIdentProd, pmmBranchCircuitAlaramGeneration=pmmBranchCircuitAlaramGeneration, ePDUSensorConfigTempMaxThreshold=ePDUSensorConfigTempMaxThreshold, dm3ConfigBattFloatVolt=dm3ConfigBattFloatVolt, mfiletransferConfig=mfiletransferConfig, upsDiagSubSysUsrSuppBattMonitorFirmwareRev=upsDiagSubSysUsrSuppBattMonitorFirmwareRev, upsDiagUnitControllerStatus=upsDiagUnitControllerStatus, rsCommunicationLost=rsCommunicationLost, pcnsShutdownCommandFileEnabled=pcnsShutdownCommandFileEnabled, dm3StatusSysTempUnits=dm3StatusSysTempUnits, sPDUOutletCtl=sPDUOutletCtl, airIRG3RDUID=airIRG3RDUID, airIRG3Group=airIRG3Group, atsConfigBankNearOverLoadThreshold=atsConfigBankNearOverLoadThreshold, aruAlinkCommunicationEstablished=aruAlinkCommunicationEstablished, upsSwitchGearLayoutPositionID=upsSwitchGearLayoutPositionID, sPDUOutletControlVMName=sPDUOutletControlVMName, airIRmPmMyZone=airIRmPmMyZone, airIRG3RDUStatusTotalRDUOutputPower=airIRG3RDUStatusTotalRDUOutputPower, rARUStatusAruMasterControl=rARUStatusAruMasterControl, emsSmokeSensorConfigSensorIndex=emsSmokeSensorConfigSensorIndex, cpsDNSserv=cpsDNSserv, mUpsContactNumContacts=mUpsContactNumContacts, upsOutputRelayConfigEntry=upsOutputRelayConfigEntry, pcnsMinLoadCapabilityLostEnableShutdown=pcnsMinLoadCapabilityLostEnableShutdown, airFMModServIntBlwr2=airFMModServIntBlwr2, upsAdvConfigLowerOutputVoltTolerance=upsAdvConfigLowerOutputVoltTolerance, rPDU2BankPropertiesPhaseLayout=rPDU2BankPropertiesPhaseLayout, atsStatusRedundancyState=atsStatusRedundancyState, upsBatteryCabBlockNumberOfCells=upsBatteryCabBlockNumberOfCells, airIRG3CMRunHoursFan5=airIRG3CMRunHoursFan5, airIRmPmPump3ManOpRunning=airIRmPmPump3ManOpRunning, pcnsMinRedundancyLostCommandFileDelay=pcnsMinRedundancyLostCommandFileDelay, airPACondenserFan=airPACondenserFan, airIRmPmPump4Running=airIRmPmPump4Running, emsProbeConfigProbeHighTempThresh=emsProbeConfigProbeHighTempThresh, upsPhaseInputVoltagePN=upsPhaseInputVoltagePN, dm3ConfigConvStandbyAlarm=dm3ConfigConvStandbyAlarm, dcmim2Status=dcmim2Status, battManStringHighRippleCurrent=battManStringHighRippleCurrent, rPDUOutletControlOutletBank=rPDUOutletControlOutletBank, xATSSystemOutputApparentPower=xATSSystemOutputApparentPower, airIRmPmFilter3Clogged=airIRmPmFilter3Clogged, airIRmPmPump3=airIRmPmPump3, upsOutputRelayConfigTableSize=upsOutputRelayConfigTableSize, rPDU2DeviceControlCommand=rPDU2DeviceControlCommand, rPDU2PhasePropertiesIndex=rPDU2PhasePropertiesIndex, upsDiagPMEnclDoorFltrEntry=upsDiagPMEnclDoorFltrEntry, airFMGroupFailoverSysReturnSensorFail=airFMGroupFailoverSysReturnSensorFail, sPDUOutletControlVMTable=sPDUOutletControlVMTable, airIRG3CM=airIRG3CM, mtrapargsOctetString05=mtrapargsOctetString05, upsAdvTestDiagnosticSchedule=upsAdvTestDiagnosticSchedule, cpsCardConfPort1=cpsCardConfPort1, upsDiagSubSysInverterEntry=upsDiagSubSysInverterEntry, emsSensorConfig=emsSensorConfig, pmmBranchBreakerEntry=pmmBranchBreakerEntry, airIRRP100GroupConfigConfigurationType=airIRRP100GroupConfigConfigurationType, xATSSwitchSettingsMaxFrequencyDeviation=xATSSwitchSettingsMaxFrequencyDeviation, sPDUOutletStatusMSPTable=sPDUOutletStatusMSPTable, airIRG2RDT2RunHoursFanPSTable=airIRG2RDT2RunHoursFanPSTable, atsCalibrationNumInputPhases=atsCalibrationNumInputPhases, upsDCOutputStatus=upsDCOutputStatus, ups=ups, wirelessSensorConfigMinHumidityThresh=wirelessSensorConfigMinHumidityThresh, rPDUOutletBankOverloadRestriction=rPDUOutletBankOverloadRestriction, dm3StatusSysRectAvailable=dm3StatusSysRectAvailable, rARUStatusAruTemp3=rARUStatusAruTemp3, xATSGeneratorOutputVoltageLtoN=xATSGeneratorOutputVoltageLtoN, upsParallelInputActivePower=upsParallelInputActivePower, apcLocalDisplayIdent=apcLocalDisplayIdent, battManSystemAmbientLowTempAlarm=battManSystemAmbientLowTempAlarm, airIRmPmPump2Hysteresis=airIRmPmPump2Hysteresis, isxcErrorAlarm=isxcErrorAlarm, rPDUOutletConfigChange=rPDUOutletConfigChange, rPDUOutletPhaseOverloadRestriction=rPDUOutletPhaseOverloadRestriction, xATSGeneratorControlSwitchNotAuto=xATSGeneratorControlSwitchNotAuto, memInputsConfigInputNumber=memInputsConfigInputNumber, dipSwitchIndex=dipSwitchIndex, airIRG3RDUStatusLeadPump=airIRG3RDUStatusLeadPump, upsAdvIdentUpsPhaseConfigType=upsAdvIdentUpsPhaseConfigType, airIRRCUnitStatusInputState=airIRRCUnitStatusInputState, airIRRP500UnitStatusRackInletTemperature3US=airIRRP500UnitStatusRackInletTemperature3US, xPDUOutputFrequencyAlarmCleared=xPDUOutputFrequencyAlarmCleared, xPDUGroundCurrentThreshold=xPDUGroundCurrentThreshold, rPDUIdentModelNumber=rPDUIdentModelNumber, airIRmPmHumidifier1Type=airIRmPmHumidifier1Type, airPASerialNumber=airPASerialNumber, rsLostRedundancy=rsLostRedundancy, pcbe9=pcbe9, wirelessSensorConfigIndex=wirelessSensorConfigIndex, airIRmPmDrycooler1HysteresisF=airIRmPmDrycooler1HysteresisF, sPDUMasterConfigVMColdstartDelay=sPDUMasterConfigVMColdstartDelay, isxModularDistSysCurrent=isxModularDistSysCurrent, emsSensorStatusTable=emsSensorStatusTable, apCPSCPUfreq=apCPSCPUfreq, xATSNeutralPosition=xATSNeutralPosition, xATSInputContactName=xATSInputContactName, emsProbeConfigProbeSTIncTempTime=emsProbeConfigProbeSTIncTempTime, upsDiagnosticDisplayModelNum=upsDiagnosticDisplayModelNum, upsBatteryCabinetBreaker=upsBatteryCabinetBreaker, dcMinorAlarmCleared=dcMinorAlarmCleared, airInRoom=airInRoom, upsAdvTestLastDiagnosticsDate=upsAdvTestLastDiagnosticsDate, emsDoorSensorConfigEntry=emsDoorSensorConfigEntry, airIRSCUnitStatusRackInletTempUS=airIRSCUnitStatusRackInletTempUS, airIRmPmDehumidificManOpEnable=airIRmPmDehumidificManOpEnable, pcnsEnvironmentCommunicationEstablishedCommandFileDelay=pcnsEnvironmentCommunicationEstablishedCommandFileDelay, xATSTestingSimulatePowerFail=xATSTestingSimulatePowerFail, battManConfigDischargeVoltageAlarmLevel=battManConfigDischargeVoltageAlarmLevel, uioInputContactStatusTable=uioInputContactStatusTable, rPDUIdentDeviceRating=rPDUIdentDeviceRating, airFMSysTempAlarmDelay=airFMSysTempAlarmDelay, airIRG3RDUStatusPump1Speed=airIRG3RDUStatusPump1Speed, wirelessSensorStatusBattery=wirelessSensorStatusBattery, galaxy7000SSC2000kVA=galaxy7000SSC2000kVA, upsDiagSubSysChargerTable=upsDiagSubSysChargerTable, airFMGroupCfgName=airFMGroupCfgName, airFMSysAlarmMapOutput2=airFMSysAlarmMapOutput2, dcmim2ConfigSystem=dcmim2ConfigSystem, isxModularPdu=isxModularPdu, galaxyVLUPS500kW=galaxyVLUPS500kW, airIRRP500GroupStatusMinRackInletTempMetric=airIRRP500GroupStatusMinRackInletTempMetric, xATSGeneratorLowCoolantTempAlarmCleared=xATSGeneratorLowCoolantTempAlarmCleared, pcnsPowerRestoredDesc=pcnsPowerRestoredDesc, airIRRP100GroupConfigRuntimeBalancingEnable=airIRRP100GroupConfigRuntimeBalancingEnable, airIRRP100UnitConfigIdleOnCoolFail=airIRRP100UnitConfigIdleOnCoolFail, rPDUOutletLowLoad=rPDUOutletLowLoad, airIRRCUnitIdentID=airIRRCUnitIdentID, battManString2ResponseTestCurrentTableSize=battManString2ResponseTestCurrentTableSize, uioSensorConfigHumidityHysteresis=uioSensorConfigHumidityHysteresis, iemStatusProbeMinTempViolation=iemStatusProbeMinTempViolation, airIRSCGroupConfigActiveFlowControllerLampTest=airIRSCGroupConfigActiveFlowControllerLampTest, rPDU2OutletMeteredPropertiesTable=rPDU2OutletMeteredPropertiesTable, coolingUnitStatus=coolingUnitStatus, mtrapargsOctetString=mtrapargsOctetString, airIRmPmUnitCondensationTemperature2F=airIRmPmUnitCondensationTemperature2F, xPDUCoolingFanAlarmCleared=xPDUCoolingFanAlarmCleared, rPDU2SensorDiscreteConfigName=rPDU2SensorDiscreteConfigName, xATSSwitchStatisticsValue=xATSSwitchStatisticsValue, memOutletConfigModuleNumber=memOutletConfigModuleNumber, isxModularDistModuleOutputKwhResetDate=isxModularDistModuleOutputKwhResetDate, pcnsMaxInternalTempInRange=pcnsMaxInternalTempInRange, airIRRP100UnitIdentHardwareRevision=airIRRP100UnitIdentHardwareRevision, airFMStatusModuleIndex=airFMStatusModuleIndex, apcInformationalDiscreteInputContactStateNormal=apcInformationalDiscreteInputContactStateNormal, cpsSerialPortSpeed=cpsSerialPortSpeed, airIRmPmCmp1HysteresisSummer=airIRmPmCmp1HysteresisSummer, airFMSysReheatDeadbandF=airFMSysReheatDeadbandF, upsBatteryCabinetMinTemperature=upsBatteryCabinetMinTemperature, upsDiagSubSysIDRCTableSize=upsDiagSubSysIDRCTableSize, airPARemoteTempF=airPARemoteTempF, airIRmPmLowPressureWinterDelay=airIRmPmLowPressureWinterDelay, airIRmPmCmp2HysteresisSummerF=airIRmPmCmp2HysteresisSummerF, bmsInformationalCondition=bmsInformationalCondition, airFMIdentName=airFMIdentName, ePDUDeviceStatusIndex=ePDUDeviceStatusIndex, battManSystemPilotProbeDisconnected=battManSystemPilotProbeDisconnected, pcnsHumidityInRangeProbe1Desc=pcnsHumidityInRangeProbe1Desc, upsPhaseOutputPhaseTableIndex=upsPhaseOutputPhaseTableIndex, ePDUDeviceStatusPowerFactor=ePDUDeviceStatusPowerFactor, upsAdvBatteryTemperature=upsAdvBatteryTemperature, wirelessSensorStatusExtAddr=wirelessSensorStatusExtAddr, airIRmPmPump1HysteresisK=airIRmPmPump1HysteresisK, upsPhaseInputEntry=upsPhaseInputEntry, airFMModBlwr2Table=airFMModBlwr2Table, sPDUOutletConfigMSPallIndex=sPDUOutletConfigMSPallIndex, airIRRC=airIRRC, upsDiagPMFanEstmtdLifetimeRmng=upsDiagPMFanEstmtdLifetimeRmng, airIRmPmDehumidificMinWaterTemp=airIRmPmDehumidificMinWaterTemp, airIRG3RDUStatusPumpOutletTempMetric=airIRG3RDUStatusPumpOutletTempMetric, airIRG3CMStatusVaporTempMetric=airIRG3CMStatusVaporTempMetric, battManString2ResponseTestCurrentBenchmarkEntry=battManString2ResponseTestCurrentBenchmarkEntry, airIRRP100UnitThresholdsSupplyAirHighTempMetric=airIRRP100UnitThresholdsSupplyAirHighTempMetric, cpsCardConfFunc=cpsCardConfFunc, atsStatusSwitchStatus=atsStatusSwitchStatus, airIRmPmCmp1Running=airIRmPmCmp1Running, airIRmPmPump1Speed=airIRmPmPump1Speed)
mibBuilder.exportSymbols("PowerNet-MIB", memVibrationSensorModuleConfigIndex=memVibrationSensorModuleConfigIndex, upsDiagIMEntry=upsDiagIMEntry, airIRG3CMStatusTable=airIRG3CMStatusTable, smartUPS400=smartUPS400, airIRG3GroupConfigFanSpeedControl=airIRG3GroupConfigFanSpeedControl, battManString1BatteryIndex=battManString1BatteryIndex, battManString1BatteryLowCapacity=battManString1BatteryLowCapacity, airIRmPmDrycooler2SummerStartTemp=airIRmPmDrycooler2SummerStartTemp, airFMModRHEntry=airFMModRHEntry, uioSensorConfigSensorID=uioSensorConfigSensorID, pmmSiteConfig=pmmSiteConfig, memSensorsTemperatureHighPrec=memSensorsTemperatureHighPrec, powerNetSoftwareTableSize=powerNetSoftwareTableSize, accessPXConfigRearDoorLockControl=accessPXConfigRearDoorLockControl, atsLowLoadCleared=atsLowLoadCleared, upsAdvConfigDipSwitchEntry=upsAdvConfigDipSwitchEntry, upsAdvConfigHighTransferVolt=upsAdvConfigHighTransferVolt, airFMSysHighSplyTempF=airFMSysHighSplyTempF, xATSGeneratorOutputTableSize=xATSGeneratorOutputTableSize, airIRmPmCmp1StartTempWinterK=airIRmPmCmp1StartTempWinterK, memModules=memModules, rPDU2PhaseConfigModule=rPDU2PhaseConfigModule, rPDU2SensorTempHumidityStatusModule=rPDU2SensorTempHumidityStatusModule, pcnsParallelRedundancyRegainedDesc=pcnsParallelRedundancyRegainedDesc, rPDU2BankStatusCurrent=rPDU2BankStatusCurrent, airIRG2RDT2Status=airIRG2RDT2Status, apcEnvSensorDisconnected=apcEnvSensorDisconnected, xATSGeneratorLowCoolantLevelAlarmCleared=xATSGeneratorLowCoolantLevelAlarmCleared, airIRRP500UnitRunHoursCondensatePump=airIRRP500UnitRunHoursCondensatePump, airIRG3GroupConfigCoolDerivativeD=airIRG3GroupConfigCoolDerivativeD, xPDUIdentDateOfManufacture=xPDUIdentDateOfManufacture, upsAdvConfigACQualificationTime=upsAdvConfigACQualificationTime, pcnsContactFault4EnableCommandFile=pcnsContactFault4EnableCommandFile, rPDUOutletDevNumTotalOutlets=rPDUOutletDevNumTotalOutlets, xATSSource1Quality=xATSSource1Quality, airIRG3GroupSetpointsSupplyAirSetpointUS=airIRG3GroupSetpointsSupplyAirSetpointUS, rPDU2OutletMeteredPropertiesNumber=rPDU2OutletMeteredPropertiesNumber, isxModularDistSysOutputVoltageNominalLineToNeutral=isxModularDistSysOutputVoltageNominalLineToNeutral, airFMSysAlarmMapInput5=airFMSysAlarmMapInput5, atsConfigBankLowLoadThreshold=atsConfigBankLowLoadThreshold, memModulesStatusHardwareRev=memModulesStatusHardwareRev, airIRmPmHumidifier2Type=airIRmPmHumidifier2Type, pcnsMinLoadCapabilityRegainedCommandFilePath=pcnsMinLoadCapabilityRegainedCommandFilePath, smartUPS3000=smartUPS3000, isxModularPduIdentMonitorCardHardwareRev=isxModularPduIdentMonitorCardHardwareRev, atsCalibrationPowerSupplyVoltages=atsCalibrationPowerSupplyVoltages, atsOutputMaxPercentLoad=atsOutputMaxPercentLoad, airIRRP100UnitRunHoursFan2=airIRRP100UnitRunHoursFan2, sPDUOutletStatusVMOutletIndex=sPDUOutletStatusVMOutletIndex, upsDiagUsrSuppSwitchgearMonitorStatus=upsDiagUsrSuppSwitchgearMonitorStatus, memOutputStatusTable=memOutputStatusTable, isxModularDistInfoSegmentIndex=isxModularDistInfoSegmentIndex, airIRRP500UnitStatusFilterDPUS=airIRRP500UnitStatusFilterDPUS, battManStringCurrent=battManStringCurrent, sPDUOutletConfigMSPmupsZone1=sPDUOutletConfigMSPmupsZone1, dm3ConfigBattHwTempAlarm=dm3ConfigBattHwTempAlarm, airFMModBlwr1ElOvSetting=airFMModBlwr1ElOvSetting, upsDiagSubFeedPhaseEntry=upsDiagSubFeedPhaseEntry, battMan=battMan, airIRmPmEheating2ManOpRunning=airIRmPmEheating2ManOpRunning, pcnsHumidityOutOfRangeProbe2=pcnsHumidityOutOfRangeProbe2, upsDiagSubSysNetworkComCardModelNumber=upsDiagSubSysNetworkComCardModelNumber, rARUPower=rARUPower, cpsEthIPaddr=cpsEthIPaddr, airFMModRHHeater=airFMModRHHeater, upsDiagSubSysFrameFirmwareRev=upsDiagSubSysFrameFirmwareRev, upsPhaseOutputVoltage=upsPhaseOutputVoltage, dm3ConfigBattHwCurrentAlarm=dm3ConfigBattHwCurrentAlarm, dcmim2ConfigLVDTable=dcmim2ConfigLVDTable, isxModularDistInfoMeterHardwareRev=isxModularDistInfoMeterHardwareRev, upsDiagSubSysXRCommunicationCardIndex=upsDiagSubSysXRCommunicationCardIndex, cpsSerialPortPrompt=cpsSerialPortPrompt, upsPhaseOutputMinLoad=upsPhaseOutputMinLoad, airFMSysHighCoilFluidTempF=airFMSysHighCoilFluidTempF, upsEbmModeOnlineSinceCommission=upsEbmModeOnlineSinceCommission, galaxy5000UPS50KVA=galaxy5000UPS50KVA, upsIntegratedATSSourceEntry=upsIntegratedATSSourceEntry, upsEbmModeTotalPercentTimeSinceReset=upsEbmModeTotalPercentTimeSinceReset, atsIdentNominalLineFrequency=atsIdentNominalLineFrequency, emsStatusHardwareStatus=emsStatusHardwareStatus, rARUFanStatusAruIndex=rARUFanStatusAruIndex, cpsCardStatusEntry=cpsCardStatusEntry, rPDUNearOverload=rPDUNearOverload, uioSensorConfigHighHumidityThreshold=uioSensorConfigHighHumidityThreshold, cpsResolverOrder=cpsResolverOrder, airPACompressor=airPACompressor, airFMSysAlarmMapInput13=airFMSysAlarmMapInput13, airFMSysCommLossShutdownDelay=airFMSysCommLossShutdownDelay, iemStatusRelayName=iemStatusRelayName, isxModularDistModuleInfoModelNumber=isxModularDistModuleInfoModelNumber, battManConfigMaxPilotTempF=battManConfigMaxPilotTempF, upsPhaseInputType=upsPhaseInputType, upsInputContacts=upsInputContacts, dcBatteryBreakerAlarm=dcBatteryBreakerAlarm, rPDU2IdentModelNumber=rPDU2IdentModelNumber, dm3ConfigOutRlyTable=dm3ConfigOutRlyTable, upsInputContactConfigPolarity=upsInputContactConfigPolarity, airIRRP100UnitConfigHeatAssistEnable=airIRRP100UnitConfigHeatAssistEnable, ePDUSensorTableSize=ePDUSensorTableSize, dm3ConfigBattLowVoltThresh=dm3ConfigBattLowVoltThresh, chargerInput=chargerInput, atsRMSUnderFrequencyCleared=atsRMSUnderFrequencyCleared, pmmIdentDateOfManufacture=pmmIdentDateOfManufacture, airFMSysCoolPIDResetRateI=airFMSysCoolPIDResetRateI, upsPowerFrameLayoutEntry=upsPowerFrameLayoutEntry, rPDU2OutletMeteredStatusEnergy=rPDU2OutletMeteredStatusEnergy, airFMIdentTable=airFMIdentTable, iemStatusContactsEntry=iemStatusContactsEntry, isxModularOutputVoltageHighThresholdViolation=isxModularOutputVoltageHighThresholdViolation, xATSGeneratorLowRunTimeAlarmCleared=xATSGeneratorLowRunTimeAlarmCleared, accessPXConfigCardFormat=accessPXConfigCardFormat, measureUps=measureUps, codeAuthenticationDone=codeAuthenticationDone, apcDoorOpened=apcDoorOpened, airIRSCUnitStatusAirFlowUS=airIRSCUnitStatusAirFlowUS, accessPXStatusFront=accessPXStatusFront, pmmOutputMaxVoltThreshold=pmmOutputMaxVoltThreshold, emu2=emu2, battManIdentDateOfManufacture=battManIdentDateOfManufacture, xATSSwitchSettings=xATSSwitchSettings, wirelessSensorConfigName=wirelessSensorConfigName, xPDUInputContactTable=xPDUInputContactTable, xPDUMainInputVoltagePhaseEntry=xPDUMainInputVoltagePhaseEntry, rPDU2SensorDiscreteConfigTable=rPDU2SensorDiscreteConfigTable, mupsCommunicationEstablished=mupsCommunicationEstablished, airIRRP100UnitIdentLocation=airIRRP100UnitIdentLocation, emsOutletStatusOutletState=emsOutletStatusOutletState, airFMGroupFailoverModHighSupplyTemp=airFMGroupFailoverModHighSupplyTemp, normalState=normalState, airIRG2RDT2StatusCompressor=airIRG2RDT2StatusCompressor, upsAdvTestBatteryProcessStatus=upsAdvTestBatteryProcessStatus, rPDU2DeviceConfigColdstartDelay=rPDU2DeviceConfigColdstartDelay, atsIdentDeviceRating=atsIdentDeviceRating, apcAdConverterFault=apcAdConverterFault, airIRG2GroupConfigCapacityControlType=airIRG2GroupConfigCapacityControlType, dm3StatusAlarms=dm3StatusAlarms, airIRRCGroupConfigMaxFanSpeed=airIRRCGroupConfigMaxFanSpeed, airIRG3RDUConfigPumpChangeOverInterval=airIRG3RDUConfigPumpChangeOverInterval, upsAdvOutputEnergyUsage=upsAdvOutputEnergyUsage, upsDCOutputStatusAbnormalConditions=upsDCOutputStatusAbnormalConditions, airFMSysAvgRemoteHum=airFMSysAvgRemoteHum, rPDU2SensorTempHumidityConfigTempMaxThreshF=rPDU2SensorTempHumidityConfigTempMaxThreshF, outletOn=outletOn, airFMModElectricHeaterType=airFMModElectricHeaterType, upsAdvOutputNeutralCurrent=upsAdvOutputNeutralCurrent, upsOutletGroupConfigIndex=upsOutletGroupConfigIndex, airFMSysRunHours=airFMSysRunHours, airFMSysOutputTableSize=airFMSysOutputTableSize, rARUFanStatusReplacementThreshold=rARUFanStatusReplacementThreshold, xATSGeneratorSettingsVoltageAdjust=xATSGeneratorSettingsVoltageAdjust, upsAdvTotalFrameDCCurrent=upsAdvTotalFrameDCCurrent, pcnsOverloadEnableLogging=pcnsOverloadEnableLogging, upsDiagSubSysXRCommunicationCardSerialNum=upsDiagSubSysXRCommunicationCardSerialNum, xATSGeneratorFuelSystemRuntimePower=xATSGeneratorFuelSystemRuntimePower, airIRSC100Series=airIRSC100Series, pmmnumofBranchMeters=pmmnumofBranchMeters, airIRRP500UnitServiceIntervalHeaterAlarm=airIRRP500UnitServiceIntervalHeaterAlarm, airIRmPmDrycooler2HysteresisF=airIRmPmDrycooler2HysteresisF, upsDiagnosticExternalDevices=upsDiagnosticExternalDevices, pcnsMaxInternalTempExceededCommandFileDelay=pcnsMaxInternalTempExceededCommandFileDelay, pmmInputCurrentTHD=pmmInputCurrentTHD, apcEnvMaxHumidityThresholdViolation=apcEnvMaxHumidityThresholdViolation, airIRG3RDUStatusPowerSource=airIRG3RDUStatusPowerSource, pcnsBypassDisabledEnableCommandFile=pcnsBypassDisabledEnableCommandFile, airIRRCGroupStatusCoolDemand=airIRRCGroupStatusCoolDemand, airIRRP100GroupSetpointsReheatMetric=airIRRP100GroupSetpointsReheatMetric, isxModularDistModuleBreakerPositionAlarms=isxModularDistModuleBreakerPositionAlarms, airFMModBlwr2ElOvMode=airFMModBlwr2ElOvMode, airFMAlarmConditionsEntry=airFMAlarmConditionsEntry, xPDUDeviceNominalMainInputVoltage=xPDUDeviceNominalMainInputVoltage, upsAdvStateSymmetra3PhaseSpecificFaults=upsAdvStateSymmetra3PhaseSpecificFaults, rPDUIdentDevicePowerVA=rPDUIdentDevicePowerVA, rPDU2SensorDiscrete=rPDU2SensorDiscrete, wirelessSensorPodStatusHumidity=wirelessSensorPodStatusHumidity, airFMSysAlarmMapExpMod1HumFail=airFMSysAlarmMapExpMod1HumFail, airIRmPmDrycooler4WinterStartTempC=airIRmPmDrycooler4WinterStartTempC, airFMSysCoilFluidTempF=airFMSysCoilFluidTempF, pmmOutputApparentPower=pmmOutputApparentPower, airIRRP100GroupConfigAltitudeMetric=airIRRP100GroupConfigAltitudeMetric, xATSTestingResultsLastWarmupDuration=xATSTestingResultsLastWarmupDuration, cpsSerialPortSockIdle=cpsSerialPortSockIdle, rsSourceSwitched=rsSourceSwitched, airFMModBlwr1CtrlCoolFanLife=airFMModBlwr1CtrlCoolFanLife, airFMModRHBlwrCtrl2=airFMModRHBlwrCtrl2, upsBatteryFrameLayoutTable=upsBatteryFrameLayoutTable, xATSNotInAutomaticModeCleared=xATSNotInAutomaticModeCleared, airIRmPmCommon3=airIRmPmCommon3, iemConfigRelayFaultCondition=iemConfigRelayFaultCondition, wirelessSensorStatusTable=wirelessSensorStatusTable, sPDUOutletStatusVM=sPDUOutletStatusVM, upsBatteryCabinetCurrentPolarity1=upsBatteryCabinetCurrentPolarity1, cpsCardConfIndex=cpsCardConfIndex, atsCalibrationInputPhaseTable=atsCalibrationInputPhaseTable, msvmOutletOff=msvmOutletOff, environmental=environmental, emsStatusAlinkProbeDeviceCount=emsStatusAlinkProbeDeviceCount, pcnsContactNormal4CommandFilePath=pcnsContactNormal4CommandFilePath, airIRmPmPWWHeatingStartTemp=airIRmPmPWWHeatingStartTemp, upsDCOutput=upsDCOutput, xATSSource2Frequency=xATSSource2Frequency, cpsSerialPortProtocol=cpsSerialPortProtocol, upsEcoModeTotalTimeInMonth=upsEcoModeTotalTimeInMonth, rPDU2PhaseStatusCurrent=rPDU2PhaseStatusCurrent, memVibrationSensorConfigSensorSeverity=memVibrationSensorConfigSensorSeverity, upsDiagSubSysIntBypSwitchTable=upsDiagSubSysIntBypSwitchTable, airIRmPmHumidifier1LinearRange=airIRmPmHumidifier1LinearRange, battManString1BatteryThermalRunaway=battManString1BatteryThermalRunaway, apcOutputRelayStateAbnormal=apcOutputRelayStateAbnormal, xPDUBranchBreakers=xPDUBranchBreakers, pcnsContactFault3EnableShutdown=pcnsContactFault3EnableShutdown, rPDU2PhaseToPhaseStatusIndex=rPDU2PhaseToPhaseStatusIndex, upsBatterySoftBusStartFault=upsBatterySoftBusStartFault, dcmim2ConfigBattFloatVolt=dcmim2ConfigBattFloatVolt, upsAdvOutputCurrentTHD=upsAdvOutputCurrentTHD, atsConfigBankTableIndex=atsConfigBankTableIndex, airFMSysAlarmMapExpMod2HumFail=airFMSysAlarmMapExpMod2HumFail, airIRmPmPump3StartTemperature=airIRmPmPump3StartTemperature, airIRmIdent=airIRmIdent, pcbeOS=pcbeOS, airIRmPmSupplyAirTemperature=airIRmPmSupplyAirTemperature, dm3StatusInputRelays=dm3StatusInputRelays, upsBackfeedRelayFault=upsBackfeedRelayFault, airIRRP100GroupStatus=airIRRP100GroupStatus, airFMSysHighCoilFluidTempC=airFMSysHighCoilFluidTempC, upsPhase=upsPhase, cpsSerialPortStopBits=cpsSerialPortStopBits, upsInternalOverTemperature=upsInternalOverTemperature, airIRmPmUnitTemperatureF=airIRmPmUnitTemperatureF, memModulesStatusFirmwareRev=memModulesStatusFirmwareRev, pmmOutputFrequency=pmmOutputFrequency, airIRRCGroupSetpointsCoolMetric=airIRRCGroupSetpointsCoolMetric, airIRRCGroupConfigAltitudeMetric=airIRRCGroupConfigAltitudeMetric, galaxy5500UPS30KVA=galaxy5500UPS30KVA, airIRmPmSetpointTemperatureNightC=airIRmPmSetpointTemperatureNightC, xATSTestingStatus=xATSTestingStatus, airIRSCUnitConfigOutputNormalState=airIRSCUnitConfigOutputNormalState, airIRRP500UnitStatusFluidValvePosition=airIRRP500UnitStatusFluidValvePosition, airIRmPmPump3StartTemperatureK=airIRmPmPump3StartTemperatureK, airIRRP500UnitThresholdsReturnAirHighTempUS=airIRRP500UnitThresholdsReturnAirHighTempUS, apcUpsConfigFieldOID=apcUpsConfigFieldOID, envMaxHumidityThresholdViolationCleared=envMaxHumidityThresholdViolationCleared, dcmim2StatusRectIndex=dcmim2StatusRectIndex, upsEcoModeOnlineSinceCommission=upsEcoModeOnlineSinceCommission, airIRmPmSupplyAirHumidity=airIRmPmSupplyAirHumidity, rARUStatusAruAlarmState=rARUStatusAruAlarmState, wirelessSensorConfigLowHumidityThresh=wirelessSensorConfigLowHumidityThresh, smartUPS2000=smartUPS2000, rPDULowLoad=rPDULowLoad, pmmBranchCircuitBreakerEnergyTotalUsage=pmmBranchCircuitBreakerEnergyTotalUsage, airFMModHumEntry=airFMModHumEntry, xPDUGroundCurrent=xPDUGroundCurrent, pmmInputMaxCurrentThreshold=pmmInputMaxCurrentThreshold, atsOutputPhaseTable=atsOutputPhaseTable, memInputsStatusTable=memInputsStatusTable)
mibBuilder.exportSymbols("PowerNet-MIB", bmBatManEnvironmentAlarmCleared=bmBatManEnvironmentAlarmCleared, xATSGeneratorStatusGeneratorName=xATSGeneratorStatusGeneratorName, rPDU2OutletSwitchedStatusTable=rPDU2OutletSwitchedStatusTable, dm3ConfigRectFailComm=dm3ConfigRectFailComm, airIRmPmMaxLimitReturnAirHumidity=airIRmPmMaxLimitReturnAirHumidity, upsAdvTestBatteryLastSuccessfulDate=upsAdvTestBatteryLastSuccessfulDate, memVibrationSensorConfigEntry=memVibrationSensorConfigEntry, dm3ConfigBreakersEntry=dm3ConfigBreakersEntry, upsAdvInputBypassVoltageTHD=upsAdvInputBypassVoltageTHD, airIRRP100UnitStatusSuctionPressureUS=airIRRP100UnitStatusSuctionPressureUS, airIRSCUnitRunHoursEvaporatorFan1=airIRSCUnitRunHoursEvaporatorFan1, airIRG2GroupConfigActiveFlowControllerLampTest=airIRG2GroupConfigActiveFlowControllerLampTest, pmmInputMeterSerialNumber=pmmInputMeterSerialNumber, rPDUIdentDeviceNumBreakers=rPDUIdentDeviceNumBreakers, battManResetChargeCurrentDeviationBenchmark=battManResetChargeCurrentDeviationBenchmark, upsHighPrecBatteryPackOnlyInstallDate=upsHighPrecBatteryPackOnlyInstallDate, isxModularDistSysCurrentPercent=isxModularDistSysCurrentPercent, dcmim2StatusAlarmsTable=dcmim2StatusAlarmsTable, cpsCardConfTable=cpsCardConfTable, upsSCGStatusTableIndex=upsSCGStatusTableIndex, airIRRP100UnitConfigOutputSource=airIRRP100UnitConfigOutputSource, upsFirmwareUpdateSucceeded=upsFirmwareUpdateSucceeded, wirelessSensorPodStatusMinTempThresh=wirelessSensorPodStatusMinTempThresh, mem=mem, upsBatteryPackIncompatible=upsBatteryPackIncompatible, dm3StatusRectDevType=dm3StatusRectDevType, upsBatteryCabinetLocalIndex=upsBatteryCabinetLocalIndex, airIRRP100GroupConfigCoolGainP=airIRRP100GroupConfigCoolGainP, isxModularDistributionModuleRemoved=isxModularDistributionModuleRemoved, memFluidSensorStatusModuleIndex=memFluidSensorStatusModuleIndex, airIRmPmSetpointTemperatureDayC=airIRmPmSetpointTemperatureDayC, dcDM3=dcDM3, pcnsCriticalEventResolved=pcnsCriticalEventResolved, ats4gCalibrationOutputTable=ats4gCalibrationOutputTable, airIRRP100GroupConfigAltitudeUS=airIRRP100GroupConfigAltitudeUS, airIRmPmCmp1StartTempSummer=airIRmPmCmp1StartTempSummer, rPDUPowerSupply2Fail=rPDUPowerSupply2Fail, emsInputContactStatus=emsInputContactStatus, upsAdvConfigReturnDelay=upsAdvConfigReturnDelay, emsProbeStatusProbeMaxVoltThresh=emsProbeStatusProbeMaxVoltThresh, system=system, battManControl=battManControl, apcHandleOpened=apcHandleOpened, dm3StatusSystemStart=dm3StatusSystemStart, isxcCriticalAlarm=isxcCriticalAlarm, xPDUSystemBreakerTableSize=xPDUSystemBreakerTableSize, infraStruXurePDU=infraStruXurePDU, xPDUMainInputOverVoltThreshold=xPDUMainInputOverVoltThreshold, upsDiagnosticSubsystem=upsDiagnosticSubsystem, pmmSiteConfigNumberofChannel=pmmSiteConfigNumberofChannel, cpsSerialPortFlowCtrl=cpsSerialPortFlowCtrl, upsPhaseOutputCurrent=upsPhaseOutputCurrent, upsOutletGroupConfigLoadShedControlSkipOffDelay=upsOutletGroupConfigLoadShedControlSkipOffDelay, dm3ConfigBattLowTempAlarm=dm3ConfigBattLowTempAlarm, dcMainsFailAlarm=dcMainsFailAlarm, upsHighPrecOutputLoad=upsHighPrecOutputLoad, upsPhaseOutputVoltageOrientation=upsPhaseOutputVoltageOrientation, upsHighPrecOutput=upsHighPrecOutput, isxModularSubfeedMinCurrentThresholdViolationCleared=isxModularSubfeedMinCurrentThresholdViolationCleared, rPDUOutletConfigRebootDuration=rPDUOutletConfigRebootDuration, emsOutputRelayStatusOutputRelayState=emsOutputRelayStatusOutputRelayState, xATSGeneratorBatteryCharger=xATSGeneratorBatteryCharger, dm3StatusSysRemoteAccess=dm3StatusSysRemoteAccess, emsSensorConfigTable=emsSensorConfigTable, airIRRP500UnitStatusHumidifyDemand=airIRRP500UnitStatusHumidifyDemand, upsDiagSubSysSystemPowerSupplyTable=upsDiagSubSysSystemPowerSupplyTable, rPDU2SensorDiscreteStatusTable=rPDU2SensorDiscreteStatusTable, wirelessSensorPodConfigLowTempThresh=wirelessSensorPodConfigLowTempThresh, airIRG2IdentGroupSysOID=airIRG2IdentGroupSysOID, xPDUInternalCommError=xPDUInternalCommError, upsDiagSLCStatus=upsDiagSLCStatus, airIRmPmEheating4HysteresisF=airIRmPmEheating4HysteresisF, rPDU2OutletSwitchedPropertiesIndex=rPDU2OutletSwitchedPropertiesIndex, airIRG2RDT2StatusDischargePressureMetric=airIRG2RDT2StatusDischargePressureMetric, isxModularDistModuleOutputBreakerMap=isxModularDistModuleOutputBreakerMap, isxModularDistModuleOutputModIndex=isxModularDistModuleOutputModIndex, rPDUIdentName=rPDUIdentName, rPDU2SensorDiscreteStatusModule=rPDU2SensorDiscreteStatusModule, xPDUACMonitoringPoint=xPDUACMonitoringPoint, dm3StatusFusesIndex=dm3StatusFusesIndex, airFMModBlwr1ChokeTempF=airFMModBlwr1ChokeTempF, airIRRP500UnitStatusHumidifyOutput=airIRRP500UnitStatusHumidifyOutput, xATSTestingStatusProfileWarmupTime=xATSTestingStatusProfileWarmupTime, rARUSensorsTempShortIncRateThreshValue=rARUSensorsTempShortIncRateThreshValue, sPDUOutletConfigMSPmupsP2HiTemp=sPDUOutletConfigMSPmupsP2HiTemp, ePDUOutletStatusIndex=ePDUOutletStatusIndex, uioOutputRelayStatusRelayName=uioOutputRelayStatusRelayName, coolingUnitConfigurationStringTableSize=coolingUnitConfigurationStringTableSize, upsDiagSubSysIntBypSwitchFanLifetimeInfoIndex=upsDiagSubSysIntBypSwitchFanLifetimeInfoIndex, memOutputLocation=memOutputLocation, airFMSysAlarmMapOutput5=airFMSysAlarmMapOutput5, memOutputConfigTableSize=memOutputConfigTableSize, atsOutputMinPercentPower=atsOutputMinPercentPower, airFMSysAlarmMapExpMod2=airFMSysAlarmMapExpMod2, pcnsContactFault2EnableShutdown=pcnsContactFault2EnableShutdown, wirelessSensorPodStatusMinRssiThresh=wirelessSensorPodStatusMinRssiThresh, atsSourceSwitched=atsSourceSwitched, xATSRemoteStartContactMismatchCleared=xATSRemoteStartContactMismatchCleared, uioOutputRelayStatusPortID=uioOutputRelayStatusPortID, consolePortServer=consolePortServer, pmmInputTotalActivePower=pmmInputTotalActivePower, cpsSerialPortPppMru=cpsSerialPortPppMru, atsOutputMaxPower=atsOutputMaxPower, dm3StatusOutRlyIndex=dm3StatusOutRlyIndex, dcmim2StatusSysBusVoltage=dcmim2StatusSysBusVoltage, upsDiagBatteryPositiveVoltage=upsDiagBatteryPositiveVoltage, smartUPS600=smartUPS600, ePDUWarningConditionCleared=ePDUWarningConditionCleared, battManIdentModelNumber=battManIdentModelNumber, pcnsContactFault3EnableCommandFile=pcnsContactFault3EnableCommandFile, emConfigProbeMaxHumidThreshold=emConfigProbeMaxHumidThreshold, xPDUMainInputVoltagePhaseIndex=xPDUMainInputVoltagePhaseIndex, airIRmPmPump2LinearRange=airIRmPmPump2LinearRange, isxModularDistSubFeedInfoTableSize=isxModularDistSubFeedInfoTableSize, atsRMSOverFrequencyCleared=atsRMSOverFrequencyCleared, upsAdvInputDCVoltage=upsAdvInputDCVoltage, xPDUOutputVoltageLowAlarmCleared=xPDUOutputVoltageLowAlarmCleared, airIRSCUnitRunHoursEvaporatorFan2=airIRSCUnitRunHoursEvaporatorFan2, memOutletName=memOutletName, atsConfigProductName=atsConfigProductName, iemConfigContactEnable=iemConfigContactEnable, rPDU2OutletSwitchedConfigModule=rPDU2OutletSwitchedConfigModule, airIRmPmUnitCondensationPressure2=airIRmPmUnitCondensationPressure2, airIRRP500UnitConfigDehumidifyEnable=airIRRP500UnitConfigDehumidifyEnable, airIRG2RDT2RunHoursFanPSTableSize=airIRG2RDT2RunHoursFanPSTableSize, sPDUOutletStatusVMOutletName=sPDUOutletStatusVMOutletName, upsDiagMCCBBox=upsDiagMCCBBox, apcForcedEntry=apcForcedEntry, airFMSysModeDelay=airFMSysModeDelay, upsDiagSubSysNetworkComCardHardwareRev=upsDiagSubSysNetworkComCardHardwareRev, xATSGeneratorSettingsNumberCrank=xATSGeneratorSettingsNumberCrank, airFMSysCoilFluidActivThreshC=airFMSysCoilFluidActivThreshC, pcnsCriticalCause=pcnsCriticalCause, pcnsAdvancedShutdownPowerchuteServer=pcnsAdvancedShutdownPowerchuteServer, uioOutputRelayStatusCurrentState=uioOutputRelayStatusCurrentState, xATSGeneratorVeryLowFuelLevelAlarm=xATSGeneratorVeryLowFuelLevelAlarm, wirelessSensorStatusEntry=wirelessSensorStatusEntry, sPDUOutletConfigMSPallEntry=sPDUOutletConfigMSPallEntry, pcnsJavaVersion=pcnsJavaVersion, iemConfigContactsTable=iemConfigContactsTable, upsDiagSwitchGear=upsDiagSwitchGear, airIRG3RDUSetpointsTable=airIRG3RDUSetpointsTable, airIRRCUnitThresholdsEnteringFluidHighTempUS=airIRRCUnitThresholdsEnteringFluidHighTempUS, airFMSysCoilFluidActivThreshF=airFMSysCoilFluidActivThreshF, airIRG3RDUStatusOperatingMode=airIRG3RDUStatusOperatingMode, uioInputContactStatusPortID=uioInputContactStatusPortID, airIRmPmSensor2Failure=airIRmPmSensor2Failure, accessViolationConsole=accessViolationConsole, airFMSysAlarmMapSystemOn=airFMSysAlarmMapSystemOn, eps6000FreqConverter=eps6000FreqConverter, airIRmPmDehumidificRunning=airIRmPmDehumidificRunning, memSensorsTemperature=memSensorsTemperature, airIRSCUnitStatusSuperheatTempUS=airIRSCUnitStatusSuperheatTempUS, upsParallelInputPhaseEntry=upsParallelInputPhaseEntry, coolingUnitAboutDescription=coolingUnitAboutDescription, aruAlinkCommunicationLost=aruAlinkCommunicationLost, airIRmPmSensor5Failure=airIRmPmSensor5Failure, chargerIdentSerialNumber=chargerIdentSerialNumber, upsBasicOutputACwiringConfiguration=upsBasicOutputACwiringConfiguration, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm, airIRmPmErrorOnBus=airIRmPmErrorOnBus, isxModularOutputVoltageLowThresholdViolationCleared=isxModularOutputVoltageLowThresholdViolationCleared, airFMSysActualTempCtrlMethod=airFMSysActualTempCtrlMethod, atsOutputMinCurrent=atsOutputMinCurrent, airIRRP100GroupConfigReheatResetRateI=airIRRP100GroupConfigReheatResetRateI, rPDU2SensorTempHumidityConfigHumidityMinThresh=rPDU2SensorTempHumidityConfigHumidityMinThresh, pcnsCommunicationLostCommandFilePath=pcnsCommunicationLostCommandFilePath, pcnsContactNormal3EnableLogging=pcnsContactNormal3EnableLogging, isxModularPduDeviceServiceType=isxModularPduDeviceServiceType, airFMSysAlarmMapExpMod1LowAirFlow=airFMSysAlarmMapExpMod1LowAirFlow, battManString2BatteryLowCapacity=battManString2BatteryLowCapacity, pcnsRunTimeExceededShutdownDelay=pcnsRunTimeExceededShutdownDelay, memVibrationSensorStatusSensorSeverity=memVibrationSensorStatusSensorSeverity, emsProbeStatusProbeCommStatus=emsProbeStatusProbeCommStatus, symmetraUPS=symmetraUPS, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, pcnsEvents=pcnsEvents, upsDiagnosticSLC=upsDiagnosticSLC, upsBatteryStatsReset=upsBatteryStatsReset, upsAdvInputDCCurrent=upsAdvInputDCCurrent, airFMSysAlarmMapSysEntry=airFMSysAlarmMapSysEntry, rPDUStatusBankTableSize=rPDUStatusBankTableSize, uioInputContactConfigContactLocation=uioInputContactConfigContactLocation, isxModularDistSysCurrentMonitoring=isxModularDistSysCurrentMonitoring, airIRG3GroupConfigLoadAssistEnable=airIRG3GroupConfigLoadAssistEnable, airIRmPmDrycooler3WinterStartTempF=airIRmPmDrycooler3WinterStartTempF, airFMSysHumSetpoint=airFMSysHumSetpoint, airIRG3RDURunHoursPump2=airIRG3RDURunHoursPump2, xPDUSystemBreakerDescription=xPDUSystemBreakerDescription, upsInverterFaultCleared=upsInverterFaultCleared, sPDUIdentFirmwareRev=sPDUIdentFirmwareRev, airIRRP500UnitStatusLeavingFluidTemperatureUS=airIRRP500UnitStatusLeavingFluidTemperatureUS, sPDUIdentModelNumber=sPDUIdentModelNumber, airIRG3RDUConfigCalibrateRefrigerantLeakDetector=airIRG3RDUConfigCalibrateRefrigerantLeakDetector, upsAdvConfigChargerRate=upsAdvConfigChargerRate, airIRmPmPump1ControlFactor=airIRmPmPump1ControlFactor, airIRmPmHumidifier1Failure=airIRmPmHumidifier1Failure, airIRG3CMRunHoursDeviceIndex=airIRG3CMRunHoursDeviceIndex, upsAdvBatteryTotalCapacity=upsAdvBatteryTotalCapacity, airFMSysAlarmMapMainModAnyAlarm=airFMSysAlarmMapMainModAnyAlarm, rPDUStatusOutletTableSize=rPDUStatusOutletTableSize, airIRRCUnitStatusEnteringFluidTemperatureMetric=airIRRCUnitStatusEnteringFluidTemperatureMetric, dm3StatusAlarmsIndex=dm3StatusAlarmsIndex, airFMGroupCfgDmdFightStatus=airFMGroupCfgDmdFightStatus, pcnsRunTimeBelowThresholdEnableShutdown=pcnsRunTimeBelowThresholdEnableShutdown, rARUSensors=rARUSensors, rPDU2OutletMeteredConfigEntry=rPDU2OutletMeteredConfigEntry, upsDiagSubSysBackfeedContactorEntry=upsDiagSubSysBackfeedContactorEntry, apcDoorSenseConnected=apcDoorSenseConnected, xATSSwitchStatusEngineStartSignal=xATSSwitchStatusEngineStartSignal, uioInputContactConfigContactName=uioInputContactConfigContactName, xATSTestingResults=xATSTestingResults, xPDUEPOMode=xPDUEPOMode, airIRmPmSensor8Defect=airIRmPmSensor8Defect, pduSystemOff=pduSystemOff, rPDU2DeviceControlEntry=rPDU2DeviceControlEntry, upsOutputSwitchOpened=upsOutputSwitchOpened, wirelessSensorPodStatusDryContactState=wirelessSensorPodStatusDryContactState, rPDU2SensorTempHumidityStatusIndex=rPDU2SensorTempHumidityStatusIndex, accessPXConfigRear=accessPXConfigRear, upsPhaseNumInputPhases=upsPhaseNumInputPhases, airFMSysAlarmMapExpMod2OutputIndex=airFMSysAlarmMapExpMod2OutputIndex, rPDULoadDevOutletNumber=rPDULoadDevOutletNumber, upsDiagSubSysBackfeedContactorTableSize=upsDiagSubSysBackfeedContactorTableSize, airFMSysAlarmMapMainModOutputIndex=airFMSysAlarmMapMainModOutputIndex, iemRelayFaultCleared=iemRelayFaultCleared, upsHighPrecBatteryPackOnlyFirmwareRevision=upsHighPrecBatteryPackOnlyFirmwareRevision, airIRG2AlarmsEventCode=airIRG2AlarmsEventCode, airIR=airIR, airFMGroupSysRoles=airFMGroupSysRoles, sPDUOutletConfig=sPDUOutletConfig, coolingUnitConfigurationStringTableIndex=coolingUnitConfigurationStringTableIndex, accessPXStatusRearDoorHandle=accessPXStatusRearDoorHandle, airFMAlarmType=airFMAlarmType, sPDUOutletConfigVMIndex=sPDUOutletConfigVMIndex, airIRmPmEheating4Runtime=airIRmPmEheating4Runtime, airIRmPmEheating1Hysteresis=airIRmPmEheating1Hysteresis, upsDiagBatteryFrameEntry=upsDiagBatteryFrameEntry, isxModularDistModuleBreakerEntry=isxModularDistModuleBreakerEntry, xATSSource2=xATSSource2, airIRmPmEheating3HysteresisK=airIRmPmEheating3HysteresisK, upsDiagSubSysUsrSuppBattMonitorHardwareRev=upsDiagSubSysUsrSuppBattMonitorHardwareRev, emsOutletControlEntry=emsOutletControlEntry, xPDUOutputRelayEntry=xPDUOutputRelayEntry, airFMModRHComp1Reset=airFMModRHComp1Reset, upsAdvConfigSignalFlashVoltage=upsAdvConfigSignalFlashVoltage, cpsSerialPortSniffEsc=cpsSerialPortSniffEsc, rPDU2OutletSwitchedConfigEntry=rPDU2OutletSwitchedConfigEntry, pcnsContactFault1CommandFilePath=pcnsContactFault1CommandFilePath, redundantSwitch=redundantSwitch, airIRSCUnitStatusDischargePressureMetric=airIRSCUnitStatusDischargePressureMetric, mspCommunicationLost=mspCommunicationLost, xATSSystemOutputTotalApparentPower=xATSSystemOutputTotalApparentPower, rPDU2Bank=rPDU2Bank)
mibBuilder.exportSymbols("PowerNet-MIB", upsAdvOutputFrequency=upsAdvOutputFrequency, wirelessSensorStatusMinBatteryThresh=wirelessSensorStatusMinBatteryThresh, upsAdvOutputActivePower=upsAdvOutputActivePower, upsConfig=upsConfig, rPDU2OutletMeteredStatusEntry=rPDU2OutletMeteredStatusEntry, airIRmPmPump2Speed=airIRmPmPump2Speed, airFMSysDehumPIDMethod=airFMSysDehumPIDMethod, airIRmPmHumidifier1Runtime=airIRmPmHumidifier1Runtime, wirelessSensorPodStatusRssi=wirelessSensorPodStatusRssi, battManString1BatteryUserLowVoltageAlarm=battManString1BatteryUserLowVoltageAlarm, smartUPS3Phase30kVA=smartUPS3Phase30kVA, atsOutputBankMinCurrent=atsOutputBankMinCurrent, airIRRCGroupSetpointsSupplyAirUS=airIRRCGroupSetpointsSupplyAirUS, upsAdvInput=upsAdvInput, airIRSCUnitSetptsFanSpeedPreference=airIRSCUnitSetptsFanSpeedPreference, upsBatteryCabStringLocalIndex=upsBatteryCabStringLocalIndex, humidityThresholdViolation1=humidityThresholdViolation1, upsAdvTestDiagnosticTime=upsAdvTestDiagnosticTime, xPDUMainInput=xPDUMainInput, accessPXStatusRearDoorLock=accessPXStatusRearDoorLock, sPDUOutletConfigMSPannunName=sPDUOutletConfigMSPannunName, upsBasicIdentModel=upsBasicIdentModel, upsHighPrecBatteryPackOnlyTableSize=upsHighPrecBatteryPackOnlyTableSize, emConfigContactName=emConfigContactName, memSensorsTempMinThresh=memSensorsTempMinThresh, dm3StatusConvCfg=dm3StatusConvCfg, airIRRP100UnitRunHoursHumidifier=airIRRP100UnitRunHoursHumidifier, airIRmPmWaterTemperature2=airIRmPmWaterTemperature2, pcnsTempInRangeProbe2Desc=pcnsTempInRangeProbe2Desc, upsAdvOutputStatisticsEntry=upsAdvOutputStatisticsEntry, upsDiagIMTableSize=upsDiagIMTableSize, xPDUInputContactTableSize=xPDUInputContactTableSize, airFMSeries=airFMSeries, pcnsCommunicationLostEnableLogging=pcnsCommunicationLostEnableLogging, airIRG2GroupConfigCoolDerivativeD=airIRG2GroupConfigCoolDerivativeD, emsProbeConfigProbeLTIncTempTime=emsProbeConfigProbeLTIncTempTime, galaxy7000UPS160kVA=galaxy7000UPS160kVA, pmmBranchCircuitMaxCurrentThreshold=pmmBranchCircuitMaxCurrentThreshold, upsAdvControlRebootUpsWithOrWithoutAC=upsAdvControlRebootUpsWithOrWithoutAC, isxModularDistSysCurrentThresholdLow=isxModularDistSysCurrentThresholdLow, battManConfigMaxCellVoltage=battManConfigMaxCellVoltage, emsInputStateSensorStatus=emsInputStateSensorStatus, airIRmPmAuxAlarm4=airIRmPmAuxAlarm4, uioInputContactConfigSeverity=uioInputContactConfigSeverity, upsAdvInputVoltageTHD=upsAdvInputVoltageTHD, batteryFramePositionID=batteryFramePositionID, dm3StatusInRlyIndex=dm3StatusInRlyIndex, coolingUnitConfigurationDiscreteValueAsString=coolingUnitConfigurationDiscreteValueAsString, ePDUSensorStatusIndex=ePDUSensorStatusIndex, airFMSysAlarmMapMainModHighFltrDP=airFMSysAlarmMapMainModHighFltrDP, wirelessSensorStatusLocation=wirelessSensorStatusLocation, upsParallelInputApparentPower=upsParallelInputApparentPower, outletOff=outletOff, memVibrationSensorStatusSensorIndex=memVibrationSensorStatusSensorIndex, airIRmPmUnitMaintenanceInterval=airIRmPmUnitMaintenanceInterval, upsInputContactConfigTableSize=upsInputContactConfigTableSize, airIRG3IdentHardwareRevision=airIRG3IdentHardwareRevision, xATSGeneratorEngineCold=xATSGeneratorEngineCold, airIRRP100UnitConfigSecondaryPowerFeedCapability=airIRRP100UnitConfigSecondaryPowerFeedCapability, isxModularTransformerOverheating=isxModularTransformerOverheating, airIRmPmUnitCondensationTemperature2=airIRmPmUnitCondensationTemperature2, subfeedBreakerName=subfeedBreakerName, emsAlarmDeviceStatusDeviceIndex=emsAlarmDeviceStatusDeviceIndex, airFMModBlwr2HeatsinkTempC=airFMModBlwr2HeatsinkTempC, essentialServicesStatus=essentialServicesStatus, upsAdvControlFirmwareUpdate=upsAdvControlFirmwareUpdate, airIRRCUnitStatusLeakSensor=airIRRCUnitStatusLeakSensor, upsHighPrecBatteryPackOnlySerialNumber=upsHighPrecBatteryPackOnlySerialNumber, airIRRP500GroupStatusDewPointTempMetric=airIRRP500GroupStatusDewPointTempMetric, rARUFanStatusSelectedFanLevel=rARUFanStatusSelectedFanLevel, pmmInputTHDLtoL=pmmInputTHDLtoL, xPDUFuseBlownAlarm=xPDUFuseBlownAlarm, airIRG3RDUStatusTable=airIRG3RDUStatusTable, airFMModRHModuleIndex=airFMModRHModuleIndex, cpsSerialPortPppMtu=cpsSerialPortPppMtu, smartUPS10000=smartUPS10000, pmmInputVoltageLowAlarm=pmmInputVoltageLowAlarm, airIRG3RDUStatusCondenserInletTempUS=airIRG3RDUStatusCondenserInletTempUS, isxModularDistSubFeedInfoTotalPower=isxModularDistSubFeedInfoTotalPower, subfeedBreakerStatus=subfeedBreakerStatus, airFMStatusSystemRemoteLowTempF=airFMStatusSystemRemoteLowTempF, airIRmPmDrycooler2WinterStartTempC=airIRmPmDrycooler2WinterStartTempC, airIRmPmCmp1HysteresisWinter=airIRmPmCmp1HysteresisWinter, upsDiagSubSysPSUStatus=upsDiagSubSysPSUStatus, uioSensorConfigMinTemperatureThreshold=uioSensorConfigMinTemperatureThreshold, memBeaconStatusBeaconName=memBeaconStatusBeaconName, xPDUUPSInputVoltagePhaseIndex=xPDUUPSInputVoltagePhaseIndex, upsPhaseInputPowerFactor=upsPhaseInputPowerFactor, airIRmPmUnitType=airIRmPmUnitType, isxModularTotalOutputCurrentMinThresholdViolationCleared=isxModularTotalOutputCurrentMinThresholdViolationCleared, memSensorsTempLongIncRateThreshValue=memSensorsTempLongIncRateThreshValue, ePDUDeviceStatusTableSize=ePDUDeviceStatusTableSize, rARUSensorsStatusAruIndex=rARUSensorsStatusAruIndex, xATSSwitchSettingsLowVoltageTransferPoint=xATSSwitchSettingsLowVoltageTransferPoint, upsOutletGroupConfigEntry=upsOutletGroupConfigEntry, airIRG2IdentFirmwareRevision=airIRG2IdentFirmwareRevision, xPDUSystemOutputTotalApparentPower=xPDUSystemOutputTotalApparentPower, mconfigClock=mconfigClock, upsDiagSubSysUsrSuppBattMonitorTableSize=upsDiagSubSysUsrSuppBattMonitorTableSize, airIRSCUnitRunHoursEvaporatorFan3=airIRSCUnitRunHoursEvaporatorFan3, airFMGroupLoadShareHumRequests=airFMGroupLoadShareHumRequests, pcnsParallelRedundancyRegainedCommandFileDelay=pcnsParallelRedundancyRegainedCommandFileDelay, isxModularPduIdentModelNumber=isxModularPduIdentModelNumber, rPDU2SensorTempHumidityConfigTempPeakReset=rPDU2SensorTempHumidityConfigTempPeakReset, airFMSysAlarmMapMainModTable=airFMSysAlarmMapMainModTable, xATSGeneratorOutputFrequency=xATSGeneratorOutputFrequency, upsDiagnosticDisplaySerialNum=upsDiagnosticDisplaySerialNum, dcmim2StatusBattFunctTestResult=dcmim2StatusBattFunctTestResult, masterSwitchrPDUB=masterSwitchrPDUB, rPDU2BankStatusPeakCurrentStartTime=rPDU2BankStatusPeakCurrentStartTime, upsAdvConfigBatteryChargerType=upsAdvConfigBatteryChargerType, coolingUnitStatusDiscrete=coolingUnitStatusDiscrete, rPDU2OutletSwitchedTableSize=rPDU2OutletSwitchedTableSize, upsAdvState=upsAdvState, atsIdentHardwareRev=atsIdentHardwareRev, xPDUIdentModelNumber=xPDUIdentModelNumber, airFMModBlwr2RatedHorsePower=airFMModBlwr2RatedHorsePower, airIRG3RDUConfigStopOnLeakDetect=airIRG3RDUConfigStopOnLeakDetect, airIRSCUnitStatusSupplyAirTempUS=airIRSCUnitStatusSupplyAirTempUS, airFMSysAlarmMapOutput9=airFMSysAlarmMapOutput9, upsBasicSystemPFCStatus=upsBasicSystemPFCStatus, pcnsContactFault1EnableLogging=pcnsContactFault1EnableLogging, ePDUPhaseConfigOverCurrentThreshold=ePDUPhaseConfigOverCurrentThreshold, airIRmPmAuxiliaryAlarm8=airIRmPmAuxiliaryAlarm8, xATSGeneratorHighBatteryVoltCleared=xATSGeneratorHighBatteryVoltCleared, airIRmPmSuctionValve1=airIRmPmSuctionValve1, sPDUOutletConfigVMPowerOffTime=sPDUOutletConfigVMPowerOffTime, pcnsMinLoadCapabilityLostShutdownDelay=pcnsMinLoadCapabilityLostShutdownDelay, airIRSCUnitStatusSuctionPressureMetric=airIRSCUnitStatusSuctionPressureMetric, battManUnitStatusEntry=battManUnitStatusEntry, ePDUDeviceStatusApparentPower=ePDUDeviceStatusApparentPower, conPortServ=conPortServ, pcnsContactNormal4=pcnsContactNormal4, dm3ConfigSysLowTempThresh=dm3ConfigSysLowTempThresh, dcmim2ConfigBattMaxRecharge=dcmim2ConfigBattMaxRecharge, airFMModBlwr1AccTime=airFMModBlwr1AccTime, isxModularSubfeedHighCurrentThresholdViolationCleared=isxModularSubfeedHighCurrentThresholdViolationCleared, airIRRP500UnitServiceIntervalAirFilter=airIRRP500UnitServiceIntervalAirFilter, airIRG2RDT2ThresholdsReturnAirHighTempMetric=airIRG2RDT2ThresholdsReturnAirHighTempMetric, sPDUMasterConfigVMHighLoadWarningThreshold=sPDUMasterConfigVMHighLoadWarningThreshold, pmmInputCurrentHighAlarm=pmmInputCurrentHighAlarm, rPDUIdentDeviceDisplayOrientation=rPDUIdentDeviceDisplayOrientation, airFMModStatusEntry=airFMModStatusEntry, atsCalibrationNumOutputs=atsCalibrationNumOutputs, upsDiagSubSysSystemPowerSupplyEntry=upsDiagSubSysSystemPowerSupplyEntry, airIRG3CMTableSize=airIRG3CMTableSize, airFMSysCoilCfg=airFMSysCoilCfg, coolingUnitConfigurationDiscreteTable=coolingUnitConfigurationDiscreteTable, rARUFanStatusFanIndex=rARUFanStatusFanIndex, airFMSysCndsrFluidVlvAct=airFMSysCndsrFluidVlvAct, atsLineVoltageCalibrationFactor=atsLineVoltageCalibrationFactor, airIRG2RDT2RunHoursFanPSHours=airIRG2RDT2RunHoursFanPSHours, airIRG2GroupStatusMinRackInletTempMetric=airIRG2GroupStatusMinRackInletTempMetric, cpsInfoSerialPortTable=cpsInfoSerialPortTable, wirelessSensorPodConfigTable=wirelessSensorPodConfigTable, emsFluidSensorConfigSensorSeverity=emsFluidSensorConfigSensorSeverity, upsDiagSubSysNetworkComCardFirmwareAppRev=upsDiagSubSysNetworkComCardFirmwareAppRev, cpsSerialPortTable=cpsSerialPortTable, airIRmPmReturnAirHumidityTooLow=airIRmPmReturnAirHumidityTooLow, upsDiagSubSysPowerFactorCorrectionHardwareRev=upsDiagSubSysPowerFactorCorrectionHardwareRev, apcLocalDisplayConfigKeyClick=apcLocalDisplayConfigKeyClick, airIRRCUnitServiceIntervalsAirFilter=airIRRCUnitServiceIntervalsAirFilter, dm3IdentSysDescriptionEntry=dm3IdentSysDescriptionEntry, upsAdvInputStatisticsTable=upsAdvInputStatisticsTable, upsDiagSubSysBattMonitorManufactureDate=upsDiagSubSysBattMonitorManufactureDate, coolingUnitStatusAnalogEntry=coolingUnitStatusAnalogEntry, matrixUPS=matrixUPS, battManString1ResponseTestCurrentData=battManString1ResponseTestCurrentData, upsAdvConfigLowTransferVolt=upsAdvConfigLowTransferVolt, airIRG3RDUStatusCWValvePosition=airIRG3RDUStatusCWValvePosition, airIRSCUnitStatusSuperheatTempMetric=airIRSCUnitStatusSuperheatTempMetric, airIRRP500UnitThresholdsReturnHumidityHigh=airIRRP500UnitThresholdsReturnHumidityHigh, airIRSCGroupStatusAirFlowUS=airIRSCGroupStatusAirFlowUS, upsDiagSubSysExternalSwitchGearManufactureDate=upsDiagSubSysExternalSwitchGearManufactureDate, rPDU2SensorDiscreteStatusEntry=rPDU2SensorDiscreteStatusEntry, sPDUOutletConfigMSPgsOutletCtrlMode=sPDUOutletConfigMSPgsOutletCtrlMode, xATSGeneratorLowOilPressureCleared=xATSGeneratorLowOilPressureCleared, airIRmPmGECWvalveStartTemperatureK=airIRmPmGECWvalveStartTemperatureK, sPDUMasterConfigPDUName=sPDUMasterConfigPDUName, xATSGeneratorIdentAlternatorFrequency=xATSGeneratorIdentAlternatorFrequency, dm3ConfigLVDHWAlarm=dm3ConfigLVDHWAlarm, airIRmPmSensor7Defect=airIRmPmSensor7Defect, airFMSysActualSteamElectrodeHum=airFMSysActualSteamElectrodeHum, airFMSysCoolSetpointF=airFMSysCoolSetpointF, airIRG2IdentModelNumber=airIRG2IdentModelNumber, pcbeComsLost=pcbeComsLost, xATSGeneratorServiceEngineStartsLifetime=xATSGeneratorServiceEngineStartsLifetime, xPDUBranchCurrentMinAlarm=xPDUBranchCurrentMinAlarm, airFMSysLowCtrlTempF=airFMSysLowCtrlTempF, xPDUSystemStateAlarmCleared=xPDUSystemStateAlarmCleared, upsDiagIMHardwareRev=upsDiagIMHardwareRev, upsIntegratedATSLineFailDelay=upsIntegratedATSLineFailDelay, airIRG3GroupSetpointsTable=airIRG3GroupSetpointsTable, airIRmPmGECWvalveOpeningGrade=airIRmPmGECWvalveOpeningGrade, switchgearBreakerPresent=switchgearBreakerPresent, atsCalibrationInput=atsCalibrationInput, rPDUOutletConfigMonitoredLowLoadThreshold=rPDUOutletConfigMonitoredLowLoadThreshold, airIRG3RDUThresholdsEnteringFluidTempHighUS=airIRG3RDUThresholdsEnteringFluidTempHighUS, airFMSysAlarmMapExpMod2HighFltrDP=airFMSysAlarmMapExpMod2HighFltrDP, upsDiagSubSysIntBypSwitchSerialNum=upsDiagSubSysIntBypSwitchSerialNum, rPDU2OutletMeteredPropertiesIndex=rPDU2OutletMeteredPropertiesIndex, smartUPS250=smartUPS250, upsAdvConfigAllowedSetTable=upsAdvConfigAllowedSetTable, cpsInfoSerialPortTxBytes=cpsInfoSerialPortTxBytes, emsAlarmDeviceControl=emsAlarmDeviceControl, airFMSysRefrigType=airFMSysRefrigType, sPDUOutletConfigMSPannunAlarmActionDly=sPDUOutletConfigMSPannunAlarmActionDly, isxModularDistSysOutputVoltageThresholdHigh=isxModularDistSysOutputVoltageThresholdHigh, airFMSysDehumCapacity=airFMSysDehumCapacity, rPDU2DeviceControlModule=rPDU2DeviceControlModule, wirelessSensorStatusAlarmStatus=wirelessSensorStatusAlarmStatus, xPDUBranchBreakerTieIndicator=xPDUBranchBreakerTieIndicator, emsConfig=emsConfig, mfiletransferControlInitiateFileTransfer=mfiletransferControlInitiateFileTransfer, xATSSource1PhaseTable=xATSSource1PhaseTable, cpsInfoSerialPortErrParity=cpsInfoSerialPortErrParity, upsOutputRelays=upsOutputRelays, airIRmPmPump1PressureSetpoint=airIRmPmPump1PressureSetpoint, airIRmPmDrycooler3HysteresisK=airIRmPmDrycooler3HysteresisK, pcnsRunTimeExceeded=pcnsRunTimeExceeded, airIRSCUnitSetptsCoolSetpointMetric=airIRSCUnitSetptsCoolSetpointMetric, upsDiagnosticsPassed=upsDiagnosticsPassed, memOutputConfigModuleNumber=memOutputConfigModuleNumber, emConfigContactNumber=emConfigContactNumber, upsDiagSwitchGearOutputSwitchStatus=upsDiagSwitchGearOutputSwitchStatus, isxModularDistSubFeedInfoKwhReset=isxModularDistSubFeedInfoKwhReset, airIRmPmReturnAirHumidity=airIRmPmReturnAirHumidity, emsMajorAlarm=emsMajorAlarm, accessPXConfigFrontDoorLockControl=accessPXConfigFrontDoorLockControl, airFMSysReheatSetpointC=airFMSysReheatSetpointC, airIRG3RDUConfigOutputNormalState=airIRG3RDUConfigOutputNormalState, airWarningConditionCleared=airWarningConditionCleared, emsAlarmDeviceControlDeviceName=emsAlarmDeviceControlDeviceName, mtrapargsIpAddress03=mtrapargsIpAddress03, rPDUStatus=rPDUStatus, xATSSystemOutputOverVoltThreshold=xATSSystemOutputOverVoltThreshold, upsAdvConfigLowBatteryRunTime=upsAdvConfigLowBatteryRunTime, rPDU2BankConfigOverloadRestriction=rPDU2BankConfigOverloadRestriction, sPDUOutletConfigMSPgs=sPDUOutletConfigMSPgs, xATSGeneratorVeryLowCoolantLevelAlarmCleared=xATSGeneratorVeryLowCoolantLevelAlarmCleared, apcLocalDisplayIdentModelNumber=apcLocalDisplayIdentModelNumber, airIRSCGroupConfigConfigurationType=airIRSCGroupConfigConfigurationType, pcnsPowerFailedEnableLogging=pcnsPowerFailedEnableLogging, airIRG3CMThresholdsReturnAirTempHighMetric=airIRG3CMThresholdsReturnAirTempHighMetric, airIRSCUnitSetptsCoolDeadbandUS=airIRSCUnitSetptsCoolDeadbandUS, airIRSCUnitRunHoursAirFilter=airIRSCUnitRunHoursAirFilter, airIRmPmEheating3Hysteresis=airIRmPmEheating3Hysteresis, airIRRP100UnitServiceIntervalCondensatePump=airIRRP100UnitServiceIntervalCondensatePump, galaxy7000UPS300kVA=galaxy7000UPS300kVA, cpsInfoSerialPortSigCD=cpsInfoSerialPortSigCD, airPAReturnTempF=airPAReturnTempF, rPDU=rPDU, airIRmPmLocalUPS=airIRmPmLocalUPS, airIRSCUnitIdentFirmwareRevision=airIRSCUnitIdentFirmwareRevision)
mibBuilder.exportSymbols("PowerNet-MIB", airIRG2GroupSetptsSupplyAirSetpointMetric=airIRG2GroupSetptsSupplyAirSetpointMetric, airIRG3RDUStatusCondenserSaturationTempMetric=airIRG3RDUStatusCondenserSaturationTempMetric, upsOutletGroupStatusTableSize=upsOutletGroupStatusTableSize, airLESeries=airLESeries, airIRG2GroupConfigNumberofCoolingUnits=airIRG2GroupConfigNumberofCoolingUnits, xATSGeneratorOverspeedCleared=xATSGeneratorOverspeedCleared, airIRmPmFan2=airIRmPmFan2, xATSEpoTestMode=xATSEpoTestMode, memSmokeSensorConfigAlarmGeneration=memSmokeSensorConfigAlarmGeneration, airIRG2GroupConfigAltitudeMetric=airIRG2GroupConfigAltitudeMetric, badVoltage=badVoltage, cpsConsoleBanner=cpsConsoleBanner, mspOutletConfigChange=mspOutletConfigChange, upsBasicConfigNumDevices=upsBasicConfigNumDevices, airIRG3RDUStatusSubcoolerOutletTempMetric=airIRG3RDUStatusSubcoolerOutletTempMetric, cpsEthIPmask2=cpsEthIPmask2, airIRG3IdentCMSysOID=airIRG3IdentCMSysOID, upsDiagPMEnclDoorFltrTableSize=upsDiagPMEnclDoorFltrTableSize, airIRG2RDT2ThresholdsReturnAirHighTempUS=airIRG2RDT2ThresholdsReturnAirHighTempUS, airIRmPmDrycooler1ManOpRunning=airIRmPmDrycooler1ManOpRunning, upsOutputRelayConfigCause=upsOutputRelayConfigCause, ePDUPhaseStatusNumber=ePDUPhaseStatusNumber, airFMSysAlarmMapSystemOffline=airFMSysAlarmMapSystemOffline, airIRmPmDrycooler3SummerStartTempC=airIRmPmDrycooler3SummerStartTempC, rPDU2BankStatusPeakCurrentTimestamp=rPDU2BankStatusPeakCurrentTimestamp, dm3Status=dm3Status, airIRmPmWinterModeHysteresisF=airIRmPmWinterModeHysteresisF, airIRG2RC=airIRG2RC, rPDU2PhaseConfigTable=rPDU2PhaseConfigTable, rPDUStatusPhaseIndex=rPDUStatusPhaseIndex, battManResetLowestDischargeVoltages=battManResetLowestDischargeVoltages, airFMModRHComp1=airFMModRHComp1, xATSTestingResultsLastDateOfTest=xATSTestingResultsLastDateOfTest, pduUtilityLineOvervoltageCleared=pduUtilityLineOvervoltageCleared, iemStatusProbeTempUnits=iemStatusProbeTempUnits, rPDU2BankConfigModule=rPDU2BankConfigModule, passwordChange=passwordChange, cpsInfoSerialPortSigRI=cpsInfoSerialPortSigRI, wirelessSensorPodStatusLowRssiThresh=wirelessSensorPodStatusLowRssiThresh, upsBatteryCabBlockCellEntry=upsBatteryCabBlockCellEntry, upsParallelInputMaximumCurrent=upsParallelInputMaximumCurrent, dm3ConfigFusesTableSize=dm3ConfigFusesTableSize, airIRG3GroupConfigCoolPIDReset=airIRG3GroupConfigCoolPIDReset, pmmInputBreakerOpenAlarm=pmmInputBreakerOpenAlarm, ePDUPhaseConfigOverVoltageThreshold=ePDUPhaseConfigOverVoltageThreshold, atsOverload=atsOverload, airIRRCUnitThresholdsReturnAirHighTempUS=airIRRCUnitThresholdsReturnAirHighTempUS, isxModularDistributionCommLost=isxModularDistributionCommLost, airIRSCGroupSetpoints=airIRSCGroupSetpoints, airIRmPmHumidifier2CurrentValue=airIRmPmHumidifier2CurrentValue, upsDiagUsrSuppSwitchgearMonitorIndex=upsDiagUsrSuppSwitchgearMonitorIndex, airFMSysAlarmMapExpMod2BlwrCntl2Fail=airFMSysAlarmMapExpMod2BlwrCntl2Fail, pcnsRunTimeBelowThresholdShutdownThreshold=pcnsRunTimeBelowThresholdShutdownThreshold, airIRG3GroupTableSize=airIRG3GroupTableSize, isxModularDistModuleBreakerAlarmStatus=isxModularDistModuleBreakerAlarmStatus, upsOscillatorFailedCleared=upsOscillatorFailedCleared, iemConfigContactNumber=iemConfigContactNumber, atsOutputBankTableIndex=atsOutputBankTableIndex, rPDUOutletStatusIndex=rPDUOutletStatusIndex, upsAdvBatteryWiringConfiguration=upsAdvBatteryWiringConfiguration, airIRmPmEheating2Hysteresis=airIRmPmEheating2Hysteresis, atsConfigPhaseLowLoadThreshold=atsConfigPhaseLowLoadThreshold, dcmim2IdentSystem=dcmim2IdentSystem, upsEbmModeTotalTimeSinceReset=upsEbmModeTotalTimeSinceReset, airIRRP100UnitConfigIdleOnLeakDetect=airIRRP100UnitConfigIdleOnLeakDetect, airFMModBlwr1Poles=airFMModBlwr1Poles, coolingUnitStatusDiscreteValueAsString=coolingUnitStatusDiscreteValueAsString, airFMGroupSysRoleStatus=airFMGroupSysRoleStatus, airFMStatusSystemRemoteHighTempF=airFMStatusSystemRemoteHighTempF, airIRRP100GroupSetpointsCoolMetric=airIRRP100GroupSetpointsCoolMetric, xATSGeneratorVeryLowRunTimeAlarmCleared=xATSGeneratorVeryLowRunTimeAlarmCleared, battManInputContactEntry=battManInputContactEntry, memSmokeSensorConfigSensorName=memSmokeSensorConfigSensorName, sPDUOutletConfigMSPgsName=sPDUOutletConfigMSPgsName, iemConfigProbeLowTempEnable=iemConfigProbeLowTempEnable, ePDUOutletControlEntry=ePDUOutletControlEntry, airFMSysAlarmMapInput10=airFMSysAlarmMapInput10, atsPowerSupplyFailure=atsPowerSupplyFailure, airIRmPmPump2LinearRangeK=airIRmPmPump2LinearRangeK, atsInputTableIndex=atsInputTableIndex, emsFluidSensorCommStatus=emsFluidSensorCommStatus, pcnsTempInRangeProbe1CommandFileDelay=pcnsTempInRangeProbe1CommandFileDelay, pcnsTempInRangeProbe2CommandFilePath=pcnsTempInRangeProbe2CommandFilePath, battManager=battManager, upsDiagSubSysDCCircuitBreakerTable=upsDiagSubSysDCCircuitBreakerTable, apcLocalDisplayIdentDateOfManufacture=apcLocalDisplayIdentDateOfManufacture, airIRmPmDrycooler1SummerStartTemp=airIRmPmDrycooler1SummerStartTemp, mtrapargs=mtrapargs, upsParallelOutputPhaseIndex=upsParallelOutputPhaseIndex, xATSGeneratorOutputBreakerOpen=xATSGeneratorOutputBreakerOpen, airIRmPmCmp2HysteresisSummerK=airIRmPmCmp2HysteresisSummerK, dm3ConfigBreakersIndex=dm3ConfigBreakersIndex, airIRRCGroupSetpointsFanSpeedControl=airIRRCGroupSetpointsFanSpeedControl, xATSEpoTripped=xATSEpoTripped, pcnsTempInRangeProbe1Desc=pcnsTempInRangeProbe1Desc, coolingUnitStatusDiscreteEntry=coolingUnitStatusDiscreteEntry, pmmInputPhaseLoss=pmmInputPhaseLoss, apcTransformerDCImbalanceFault=apcTransformerDCImbalanceFault, pcnsContactFault3EnableLogging=pcnsContactFault3EnableLogging, airIRG2AlarmsIndex=airIRG2AlarmsIndex, airFMSysAlarmMapExpMod1TableSize=airFMSysAlarmMapExpMod1TableSize, emsProbeConfigProbeSTIncTempVariance=emsProbeConfigProbeSTIncTempVariance, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, ePDUDevice=ePDUDevice, wirelessSensorPodStatusLowBatteryThresh=wirelessSensorPodStatusLowBatteryThresh, dcmim2StatusSystem=dcmim2StatusSystem, upsHighPrecOutputVoltage=upsHighPrecOutputVoltage, isxModularDistModuleOutputCordIndex=isxModularDistModuleOutputCordIndex, rPDU2DevicePropertiesName=rPDU2DevicePropertiesName, rPDU2DeviceConfigOverloadPowerThreshold=rPDU2DeviceConfigOverloadPowerThreshold, battManString2OhmicValueData=battManString2OhmicValueData, cpsSerialPortSSHbreak=cpsSerialPortSSHbreak, isxModularDistInfoTable=isxModularDistInfoTable, rARUStatus=rARUStatus, airIRRP100UnitStatusAirFlowUS=airIRRP100UnitStatusAirFlowUS, batteryPackCommLost=batteryPackCommLost, upsSCGPowerSynchronizationDelayTime=upsSCGPowerSynchronizationDelayTime, dcmim2StatusRectTableSize=dcmim2StatusRectTableSize, emsSmokeSensorStatusSensorSeverity=emsSmokeSensorStatusSensorSeverity, airFMGroupFailoverMod=airFMGroupFailoverMod, xATSGeneratorSettingsFrequencyAdjust=xATSGeneratorSettingsFrequencyAdjust, wirelessSensorPodConfigLowRssiThresh=wirelessSensorPodConfigLowRssiThresh, upsAdvBatteryActualVoltage=upsAdvBatteryActualVoltage, upsOutletGroupControlEntry=upsOutletGroupControlEntry, airFMSysAlarmMapSysLowEnvHum=airFMSysAlarmMapSysLowEnvHum, apcLocalDisplayConfigContrast=apcLocalDisplayConfigContrast, smwWarningConditionCleared=smwWarningConditionCleared, dm3StatusFusesName=dm3StatusFusesName, pmmIdentModelNumber=pmmIdentModelNumber, battManString2BatteryCellShorted=battManString2BatteryCellShorted, airIRG3CMThresholdsDeviceIndex=airIRG3CMThresholdsDeviceIndex, airFMModBlwr2Entry=airFMModBlwr2Entry, rPDULoadPhaseConfigOverloadThreshold=rPDULoadPhaseConfigOverloadThreshold, upsDiagnosticSLCHardwareRev=upsDiagnosticSLCHardwareRev, airIRG3GroupSetpointsSupplyAirSetpointMetric=airIRG3GroupSetpointsSupplyAirSetpointMetric, pmmInputHighCurrentThreshold=pmmInputHighCurrentThreshold, coolingUnitConfigurationDiscreteDescription=coolingUnitConfigurationDiscreteDescription, ePDUDeviceControlEntry=ePDUDeviceControlEntry, isxModularDistSysOutputVoltageThresholdMax=isxModularDistSysOutputVoltageThresholdMax, xATSGeneratorVeryHighCoolantTempAlarm=xATSGeneratorVeryHighCoolantTempAlarm, ePDUDeviceControlEngeryReset=ePDUDeviceControlEngeryReset, iemStatusRelaysEntry=iemStatusRelaysEntry, airIRG3RDUServiceIntervalsDeviceIndex=airIRG3RDUServiceIntervalsDeviceIndex, uioSensorConfigMaxHumidityEnable=uioSensorConfigMaxHumidityEnable, pmmBranchCircuitTHD=pmmBranchCircuitTHD, powerModuleDecrease=powerModuleDecrease, newCodeAuthentViaTFTP=newCodeAuthentViaTFTP, calibrationStart=calibrationStart, dm3StatusOutRlyTable=dm3StatusOutRlyTable, cpsEthMTU=cpsEthMTU, memVibrationSensorConfigAlarmGeneration=memVibrationSensorConfigAlarmGeneration, emsFluidSensorStatusSensorIndex=emsFluidSensorStatusSensorIndex, airIRmPmOutsideAirTemperatureC=airIRmPmOutsideAirTemperatureC, atsStatusPlus12VPowerSupply=atsStatusPlus12VPowerSupply, masterSwitchrPDU=masterSwitchrPDU, cooling=cooling, upsDiagBatterySerialNumber=upsDiagBatterySerialNumber, upsDiagPMEstmtdLifetimeRmngPct=upsDiagPMEstmtdLifetimeRmngPct, airIRmPmHumidifier3Alarm20us=airIRmPmHumidifier3Alarm20us, emsIdent=emsIdent, upsOutputRelayStatusTableSize=upsOutputRelayStatusTableSize, airIRmPmPump2ControlFactor=airIRmPmPump2ControlFactor, airIRmPmSensor10Failure=airIRmPmSensor10Failure, emsFluidSensorConfigSensorName=emsFluidSensorConfigSensorName, battManString2ResponseTestCurrentIndex=battManString2ResponseTestCurrentIndex, dm3ConfigRectHighVoltThresh=dm3ConfigRectHighVoltThresh, pcnsPowerRestoredEnableLogging=pcnsPowerRestoredEnableLogging, upsHighPrecInputFrequency=upsHighPrecInputFrequency, airIRRCUnitThresholdsReturnAirHighTempMetric=airIRRCUnitThresholdsReturnAirHighTempMetric, emsBeaconOn=emsBeaconOn, battManString1BatteryEntry=battManString1BatteryEntry, battManString1BatteryOpenFuseOrConnection=battManString1BatteryOpenFuseOrConnection, airIRmPmNumberOfSuctionValves=airIRmPmNumberOfSuctionValves, isxModularTransformerOverheatingCleared=isxModularTransformerOverheatingCleared, xATSGeneratorEngineColdCleared=xATSGeneratorEngineColdCleared, rPDU2SensorDiscreteConfigAbnormalSeverity=rPDU2SensorDiscreteConfigAbnormalSeverity, xPDUBranchCurrentLowAlarm=xPDUBranchCurrentLowAlarm, upsDiagSwitchGearBypassInputSwitchStatus=upsDiagSwitchGearBypassInputSwitchStatus, emStatusContactName=emStatusContactName, memInputsConfigModuleNumber=memInputsConfigModuleNumber, memOutputName=memOutputName, atsOutputBankTableSize=atsOutputBankTableSize, airFMSysCoilFluidTempC=airFMSysCoilFluidTempC, airFMModBlwr1HeatsinkTempC=airFMModBlwr1HeatsinkTempC, upsDiagSubSysSystemPowerSupplyManufactureDate=upsDiagSubSysSystemPowerSupplyManufactureDate, airIRmPmMinLimitReturnAirTemperatureC=airIRmPmMinLimitReturnAirTemperatureC, upsAdvBatteryCurrentTableIndex=upsAdvBatteryCurrentTableIndex, airIRmPerimeter=airIRmPerimeter, upsDCOutputStatusVoltage=upsDCOutputStatusVoltage, rPDUIdentSerialNumber=rPDUIdentSerialNumber, upsParallelSysName=upsParallelSysName, emsOutputRelayStatusOutputRelayIndex=emsOutputRelayStatusOutputRelayIndex, dm3StatusRectTableSize=dm3StatusRectTableSize, airIRmPmPump4ControlFactor=airIRmPmPump4ControlFactor, airIRmPmPWWHeatingRunning=airIRmPmPWWHeatingRunning, pduGroundOvercurrentCleared=pduGroundOvercurrentCleared, gutorWDW=gutorWDW, upsPhaseOutputMaxPower=upsPhaseOutputMaxPower, upsParallelInputTotalApparentPower=upsParallelInputTotalApparentPower, pcnsHumidityOutOfRangeProbe1EnableLogging=pcnsHumidityOutOfRangeProbe1EnableLogging, uioSensorStatusHumidity=uioSensorStatusHumidity, upsDiagBatteryIndex=upsDiagBatteryIndex, dm3ConfigInRlyDelay=dm3ConfigInRlyDelay, memSmokeSensorConfigSensorModuleIndex=memSmokeSensorConfigSensorModuleIndex, envMaxHumidityThresholdViolation=envMaxHumidityThresholdViolation, rpp250kVA=rpp250kVA, emsInputContactConfigInputContactNormalState=emsInputContactConfigInputContactNormalState, airIRRP100UnitConfigReheatEnable=airIRRP100UnitConfigReheatEnable, emsProbeStatusTable=emsProbeStatusTable, aruFanFailCleared=aruFanFailCleared, airIRSCUnitThresholdsSupplyAirHighTempMetric=airIRSCUnitThresholdsSupplyAirHighTempMetric, airIRmPmSensor20Failure=airIRmPmSensor20Failure, noBatteriesCleared=noBatteriesCleared, airIRRP500Unit=airIRRP500Unit, pmmBranchCircuitLoadIdentifier=pmmBranchCircuitLoadIdentifier, pmmInputVoltageMaximumAlarm=pmmInputVoltageMaximumAlarm, upsOutletGroupConfigLoadShedControlInOverload=upsOutletGroupConfigLoadShedControlInOverload, atsLowLoad=atsLowLoad, xATSSource1=xATSSource1, wirelessSensorConfigLocation=wirelessSensorConfigLocation, dm3StatusConvID=dm3StatusConvID, rARUStatusAruDeviceCount=rARUStatusAruDeviceCount, upsDiagSubSysInverterHardwareRev=upsDiagSubSysInverterHardwareRev, iemStatusRelayNumber=iemStatusRelayNumber, rPDULoadBankConfigIndex=rPDULoadBankConfigIndex, pcnsContactFault4Desc=pcnsContactFault4Desc, coolingUnitConfigurationDiscreteTableIndex=coolingUnitConfigurationDiscreteTableIndex, airFMSysHighCtrlHum=airFMSysHighCtrlHum, airFMModServIntervals=airFMModServIntervals, sPDUMasterControlMSPTableSize=sPDUMasterControlMSPTableSize, airIRRP500UnitStatusAirFlowUS=airIRRP500UnitStatusAirFlowUS, xATSSystemOutputUnderVoltThreshold=xATSSystemOutputUnderVoltThreshold, rPDUPowerSupplyDevice=rPDUPowerSupplyDevice, upsBasicSystemStatus=upsBasicSystemStatus, airIRmPmDrycooler2ManOpEnable=airIRmPmDrycooler2ManOpEnable, airFMSysLowCoilFluidTempC=airFMSysLowCoilFluidTempC, emsOutputRelayControlEntry=emsOutputRelayControlEntry, upsDiagUsrSuppSwitchgearMonitorTableSize=upsDiagUsrSuppSwitchgearMonitorTableSize, pcnsRunTimeExceededCommandFilePath=pcnsRunTimeExceededCommandFilePath, upsDiagSubFeedPhaseCurrent=upsDiagSubFeedPhaseCurrent, upsAdvConfigUpperOutputVoltTolerance=upsAdvConfigUpperOutputVoltTolerance, airIRmPmUnitTemperatureC=airIRmPmUnitTemperatureC, pcnsBypassManualEnabledEnableCommandFile=pcnsBypassManualEnabledEnableCommandFile, sPDUOutletControlMSPOutletCommand=sPDUOutletControlMSPOutletCommand, memOutletConfigTableSize=memOutletConfigTableSize, apcRelockTimeoutCleared=apcRelockTimeoutCleared, upsOnBattery=upsOnBattery, galaxyVSUPS30kW=galaxyVSUPS30kW, dm3ConfigBreakersTable=dm3ConfigBreakersTable, airIRRP500UnitIdentLocation=airIRRP500UnitIdentLocation, emsSmokeSensorStatusEntry=emsSmokeSensorStatusEntry, apcEnvMinHumidityThresholdViolation=apcEnvMinHumidityThresholdViolation, upsDCOutputStatusVoltageNominal=upsDCOutputStatusVoltageNominal, generator=generator)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmMyZoneRoomTemperature=airIRmPmMyZoneRoomTemperature, isxModularDistModuleInfoNumCables=isxModularDistModuleInfoNumCables, airIRmPmMyZoneSupplyTemperatureF=airIRmPmMyZoneSupplyTemperatureF, upsInputContactStatusTableSize=upsInputContactStatusTableSize, airFMModIdentTableSize=airFMModIdentTableSize, iemStatusProbeStatus=iemStatusProbeStatus, airIRRCUnitStatusReturnAirTempMetric=airIRRCUnitStatusReturnAirTempMetric, airIRG2RDT2StatusRackInletTempUS=airIRG2RDT2StatusRackInletTempUS, emsDoorSensorConfigSensorName=emsDoorSensorConfigSensorName, upsEcoModeFreqTransferRange=upsEcoModeFreqTransferRange, airIRRP100Unit=airIRRP100Unit, coolingUnitTable=coolingUnitTable, upsBatteryCabinetMaxTemperature=upsBatteryCabinetMaxTemperature, atsOutputMaxPercentPower=atsOutputMaxPercentPower, airIRmPmCmp2ManOperationActive=airIRmPmCmp2ManOperationActive, airIRG3CMThresholdsRackInletTempHighUS=airIRG3CMThresholdsRackInletTempHighUS, pmmInputTHDLtoN=pmmInputTHDLtoN, upsAdvBatteryFuseStatus=upsAdvBatteryFuseStatus, upsAdvBatteryCurrentEntry=upsAdvBatteryCurrentEntry, pcnsHumidityOutOfRangeProbe1EnableShutdown=pcnsHumidityOutOfRangeProbe1EnableShutdown, atsOutputBankOutputVoltage=atsOutputBankOutputVoltage, emsOutputRelayConfig=emsOutputRelayConfig, upsAdvBatteryNominalVoltage=upsAdvBatteryNominalVoltage, rPDUIdentDeviceNumPhases=rPDUIdentDeviceNumPhases, isxModularDistSysCurrentRating=isxModularDistSysCurrentRating, sPDUMasterControlSwitch=sPDUMasterControlSwitch, cpsSerialPortDBmenu=cpsSerialPortDBmenu, xATSDCBackupAlarmCleared=xATSDCBackupAlarmCleared, xATSGeneratorLowCoolantTempAlarm=xATSGeneratorLowCoolantTempAlarm, emsInputContactStateNormal=emsInputContactStateNormal, sPDUMasterConfigPowerOn=sPDUMasterConfigPowerOn, airIRmPmDehumidificMinWaterTempF=airIRmPmDehumidificMinWaterTempF, rPDUOutletBankTable=rPDUOutletBankTable, pcnsContactNormal3EnableCommandFile=pcnsContactNormal3EnableCommandFile, pmmIdentSerialNumber=pmmIdentSerialNumber, upsAdvInputTotalApparentPower=upsAdvInputTotalApparentPower, cpsSerialGroupTable=cpsSerialGroupTable, battManUnitCalibIndex=battManUnitCalibIndex, airFMSysAlarmMapSysSmokeDet=airFMSysAlarmMapSysSmokeDet, xPDUUPSInput=xPDUUPSInput, airIRRP500UnitThresholdsRackInletHighTempMetric=airIRRP500UnitThresholdsRackInletHighTempMetric, smartUPS3Phase20kVA=smartUPS3Phase20kVA, dm3StatusOutRlyTableSize=dm3StatusOutRlyTableSize, emsProbeStatusProbeMaxTempThresh=emsProbeStatusProbeMaxTempThresh, airIRmPmPump3Hysteresis=airIRmPmPump3Hysteresis, airIRG2Alarms=airIRG2Alarms, cpsSerialPortDataSize=cpsSerialPortDataSize, sPDUMasterControlVMTableSize=sPDUMasterControlVMTableSize, pmmInputApparentEnergyReceived=pmmInputApparentEnergyReceived, airIRmPmPump1LinearRange=airIRmPmPump1LinearRange, bmsWarningConditionCleared=bmsWarningConditionCleared, airFMSysReheatState=airFMSysReheatState, upsAdvBatteryFullCapacity=upsAdvBatteryFullCapacity, galaxy300UPS80kVA33=galaxy300UPS80kVA33, airIRmPmNumberOfGECWValves=airIRmPmNumberOfGECWValves, sPDUOutletConfigMSPallTable=sPDUOutletConfigMSPallTable, battManString1BatteryOpenCell=battManString1BatteryOpenCell, rPDU2DeviceConfigDevicePeakPowerReset=rPDU2DeviceConfigDevicePeakPowerReset, rPDU2DeviceConfigNearOverloadPowerThreshold=rPDU2DeviceConfigNearOverloadPowerThreshold, atsConfig=atsConfig, battManString1ResponseTestCurrentBenchmarkEntry=battManString1ResponseTestCurrentBenchmarkEntry, airIRRP100UnitStatusReturnHumidity=airIRRP100UnitStatusReturnHumidity, isxModularDistModuleOutputsTableSize=isxModularDistModuleOutputsTableSize, airFMSysAlarmMapInputTableSize=airFMSysAlarmMapInputTableSize, apCPSPower=apCPSPower, upsPhaseOutputMaxCurrent=upsPhaseOutputMaxCurrent, batteryFrameIndex=batteryFrameIndex, airIRAlarms=airIRAlarms, dm3StatusConvTableSize=dm3StatusConvTableSize, coolingUnitExtendedAnalogTable=coolingUnitExtendedAnalogTable, atsStatusVoltageOutStatus=atsStatusVoltageOutStatus, airFMModServIntComp2Reset=airFMModServIntComp2Reset, pcnsContactNormal2Desc=pcnsContactNormal2Desc, xATSSystemOutputTableSize=xATSSystemOutputTableSize, sPDUIdentHardwareRevMSP=sPDUIdentHardwareRevMSP, ats4gCalibrationPowerSupplyVoltage=ats4gCalibrationPowerSupplyVoltage, galaxy9000SSC=galaxy9000SSC, ePDUOutletControlModule=ePDUOutletControlModule, isxModularDistModuleOutputEntry=isxModularDistModuleOutputEntry, airIRSCUnitStatusFilterDPUS=airIRSCUnitStatusFilterDPUS, rARUSensorsStatusTable=rARUSensorsStatusTable, dm3StatusConvEntry=dm3StatusConvEntry, dcmim2ControlRunFunctBatteryTest=dcmim2ControlRunFunctBatteryTest, xATSTestingSchedule=xATSTestingSchedule, upsDiagSubSysDisplayInterfaceCardIndex=upsDiagSubSysDisplayInterfaceCardIndex, airIRRP100UnitStatusHumidifierCurrent=airIRRP100UnitStatusHumidifierCurrent, airFMSysFlowSwitch=airFMSysFlowSwitch, isxModularDistModuleOutputName=isxModularDistModuleOutputName, pcnsTempOutOfRangeProbe2EnableLogging=pcnsTempOutOfRangeProbe2EnableLogging, airFMSysReheatSetpointF=airFMSysReheatSetpointF, sPDUMasterControlVMCommand=sPDUMasterControlVMCommand, wirelessSensorStatusLowRssiThresh=wirelessSensorStatusLowRssiThresh, dm3StatusLVDTable=dm3StatusLVDTable, rPDU2DevicePropertiesNumMeteredOutlets=rPDU2DevicePropertiesNumMeteredOutlets, airIRmPmEheating3StartTemperatureK=airIRmPmEheating3StartTemperatureK, smartUPS1250=smartUPS1250, rPDUStatusBankIndex=rPDUStatusBankIndex, battManString2BatteryUserHighVoltageAlarm=battManString2BatteryUserHighVoltageAlarm, iemProbeConnected=iemProbeConnected, airIRRP100UnitServiceIntervalFans=airIRRP100UnitServiceIntervalFans, upsAdvConfigUpsPowerconverterType=upsAdvConfigUpsPowerconverterType, memFluidSensorStatusEntry=memFluidSensorStatusEntry, airIRRP500GroupSetpointsSupplyAirUS=airIRRP500GroupSetpointsSupplyAirUS, airIRRP100GroupSetpointsDehumidify=airIRRP100GroupSetpointsDehumidify, atsConfigBankEntry=atsConfigBankEntry, upsPhaseOutputPercentPower=upsPhaseOutputPercentPower, envHighHumidityThresholdViolationCleared=envHighHumidityThresholdViolationCleared, emsFluidSensorConfigSensorLocation=emsFluidSensorConfigSensorLocation, mtrapargsInteger=mtrapargsInteger, emsDoorSensorStatusSensorIndex=emsDoorSensorStatusSensorIndex, airIRRCUnitThresholdsRackInletHighTempUS=airIRRCUnitThresholdsRackInletHighTempUS, memSmokeSensorStatusSensorIndex=memSmokeSensorStatusSensorIndex, xATSInternalATSFaultCleared=xATSInternalATSFaultCleared, battManString1BatteryCalibEntry=battManString1BatteryCalibEntry, uioSensorConfigLowHumidityEnable=uioSensorConfigLowHumidityEnable, dm3ConfigSysHardwareTempAlarm=dm3ConfigSysHardwareTempAlarm, isxcFailureAlarmCleared=isxcFailureAlarmCleared, xATSTestingScheduleNextTestDate=xATSTestingScheduleNextTestDate, mfiletransferConfigFTPServerUser=mfiletransferConfigFTPServerUser, emsProbeStatusProbeVoltage=emsProbeStatusProbeVoltage, airIRmPmCmp2StartTempSummerK=airIRmPmCmp2StartTempSummerK, memDoorSensorCommStatus=memDoorSensorCommStatus, airPAModelNumber=airPAModelNumber, isxModularDistSysCurrentPhaseIndex=isxModularDistSysCurrentPhaseIndex, airIRmPmPump2LinearRangeF=airIRmPmPump2LinearRangeF, xPDUMainInputVoltagePhaseTable=xPDUMainInputVoltagePhaseTable, airIRRP100GroupStatusDewPointTempUS=airIRRP100GroupStatusDewPointTempUS, upsParallelInputCurrent=upsParallelInputCurrent, memSensorsTempLowThresh=memSensorsTempLowThresh, emsVibrationSensorStatusSensorIndex=emsVibrationSensorStatusSensorIndex, upsDiagSubSysPowerFactorCorrectionManufactureDate=upsDiagSubSysPowerFactorCorrectionManufactureDate, airFMGroupSysRolesTableSize=airFMGroupSysRolesTableSize, xPDUSystemOutputTableSize=xPDUSystemOutputTableSize, airIRG2RDType1=airIRG2RDType1, upsBatteryReplaced=upsBatteryReplaced, isxModularDistSysVoltageLtoL=isxModularDistSysVoltageLtoL, galaxy5500UPS40KVA=galaxy5500UPS40KVA, iemStatusContactsTable=iemStatusContactsTable, dm3StatusConvCurrentLimit=dm3StatusConvCurrentLimit, airIRRP500UnitStatusReturnAirTempUS=airIRRP500UnitStatusReturnAirTempUS, msvmNearOverload=msvmNearOverload, rARUSensorsStatusEntry=rARUSensorsStatusEntry, rARUSensorsName=rARUSensorsName, upsDiagnosticsFailed=upsDiagnosticsFailed, airIRG2GroupSetpoints=airIRG2GroupSetpoints, emsBeaconConnected=emsBeaconConnected, galaxyVXUPS250kVA=galaxyVXUPS250kVA, overloadOnInstallation=overloadOnInstallation, airIRG2GroupStatusActiveFlowControlStatus=airIRG2GroupStatusActiveFlowControlStatus, upsBatteryStatsTimeSinceReset=upsBatteryStatsTimeSinceReset, emConfigProbeLowHumidThreshold=emConfigProbeLowHumidThreshold, airIRSCUnitStatusReturnAirTempMetric=airIRSCUnitStatusReturnAirTempMetric, rARUIdentEntry=rARUIdentEntry, xATSRemoteStartContactMismatch=xATSRemoteStartContactMismatch, memSensorsStatusSysTempUnits=memSensorsStatusSysTempUnits, xPDUMiscGroup=xPDUMiscGroup, airIRmPmCmp2Runtime=airIRmPmCmp2Runtime, upsDiagSwitchGearBreakerTableSize=upsDiagSwitchGearBreakerTableSize, rPDU2DeviceStatusOutletsEnergyStartTime=rPDU2DeviceStatusOutletsEnergyStartTime, memInputsConfigTableSize=memInputsConfigTableSize, upsAdvBattery=upsAdvBattery, pmmBranchcircuitCurrentMinAlarm=pmmBranchcircuitCurrentMinAlarm, airFMGroupCfgDmdFightSetting=airFMGroupCfgDmdFightSetting, upsDiagSubFeedPhaseIndex=upsDiagSubFeedPhaseIndex, airIRRP500UnitStatusReheatOutput=airIRRP500UnitStatusReheatOutput, upsDiagSubSysExternalPowerFrameBoardFrameIndex=upsDiagSubSysExternalPowerFrameBoardFrameIndex, airFMSysAlarmMapMainMod=airFMSysAlarmMapMainMod, dcOutputRelayOff=dcOutputRelayOff, upsDiagFlyWheelStatus=upsDiagFlyWheelStatus, airIRSCGroupSetptsFanSpeedPreference=airIRSCGroupSetptsFanSpeedPreference, isxcEnterprise=isxcEnterprise, pcnsTempOutOfRangeProbe1Desc=pcnsTempOutOfRangeProbe1Desc, dm3StatusLVDTableSize=dm3StatusLVDTableSize, airIRG2RA=airIRG2RA, xATSGeneratorOutputApparentPower=xATSGeneratorOutputApparentPower, xPDUBranchCurrentLowAlarmCleared=xPDUBranchCurrentLowAlarmCleared, airIRmPmHumidifier3Failure=airIRmPmHumidifier3Failure, mtrapargsString08=mtrapargsString08, battManStringDischargeMore60Seconds=battManStringDischargeMore60Seconds, airIRmPmCmp1Runtime=airIRmPmCmp1Runtime, backUPS=backUPS, atsOutputBankMinPercentPower=atsOutputBankMinPercentPower, xPDUSystemOutputFrequencyTolerance=xPDUSystemOutputFrequencyTolerance, returnFromBypass=returnFromBypass, memSmokeSensorStatusEntry=memSmokeSensorStatusEntry, upsDiagSubSysExternalSwitchGearEntry=upsDiagSubSysExternalSwitchGearEntry, xATSGeneratorVeryLowFuelLevelAlarmCleared=xATSGeneratorVeryLowFuelLevelAlarmCleared, xATSSystemOutputPowerFactor=xATSSystemOutputPowerFactor, dm3ConfigConvThresh=dm3ConfigConvThresh, upsDiagSubSysPowerFactorCorrectionFirmwareRev=upsDiagSubSysPowerFactorCorrectionFirmwareRev, pmmInputBreakerCTSize=pmmInputBreakerCTSize, upsWokeUp=upsWokeUp, coolingUnitAbout=coolingUnitAbout, memDoorSensorStatusTable=memDoorSensorStatusTable, dm3StatusRelays=dm3StatusRelays, airIRmPmRuntimeHumidification=airIRmPmRuntimeHumidification, upsDiagSubSysExternalSwitchGearStatus=upsDiagSubSysExternalSwitchGearStatus, dm3ConfigConv2ofNAlarm=dm3ConfigConv2ofNAlarm, airFMSysAlarmMapExpMod1AnyAlarm=airFMSysAlarmMapExpMod1AnyAlarm, pcnsBypassManualEnabledShutdownDelay=pcnsBypassManualEnabledShutdownDelay, airFMModComp2=airFMModComp2, mUpsEnvironRelativeHumidity2=mUpsEnvironRelativeHumidity2, uioOutputRelayConfigTableSize=uioOutputRelayConfigTableSize, dm3ConfigDistribution=dm3ConfigDistribution, memSmokeSensorStatusModuleIndex=memSmokeSensorStatusModuleIndex, airIRRP100UnitStatusFilterDPUS=airIRRP100UnitStatusFilterDPUS, battManSystemAmbientProbeDisconnected=battManSystemAmbientProbeDisconnected, pcnsParallelRedundancyLost=pcnsParallelRedundancyLost, upsControl=upsControl, airIRmPmFan1=airIRmPmFan1, rPDU2OutletSwitchedPropertiesPhaseLayout=rPDU2OutletSwitchedPropertiesPhaseLayout, airFMSysLowCtrlHum=airFMSysLowCtrlHum, apCPSpname=apCPSpname, upsParallelDiagSubSysBreakerFrameIndex=upsParallelDiagSubSysBreakerFrameIndex, dcmim2ConfigSysLowTempTrip=dcmim2ConfigSysLowTempTrip, sPDUMasterConfigMSPManualButton=sPDUMasterConfigMSPManualButton, rPDU2OutletMeteredPropertiesModule=rPDU2OutletMeteredPropertiesModule, upsAdvTotalDCCurrentEntry=upsAdvTotalDCCurrentEntry, xPDUDevicePanelBreakerRating=xPDUDevicePanelBreakerRating, battManIdentProductName=battManIdentProductName, rPDUPhaseConfigChange=rPDUPhaseConfigChange, iemConfigProbeHighTempThreshold=iemConfigProbeHighTempThreshold, outletReboot=outletReboot, airIRmPmDrycooler2=airIRmPmDrycooler2, pcnsParallelRedundancyLostEnableShutdown=pcnsParallelRedundancyLostEnableShutdown, mfiletransferStatusLastTransferResult=mfiletransferStatusLastTransferResult, pcnsTempOutOfRangeProbe1EnableShutdown=pcnsTempOutOfRangeProbe1EnableShutdown, pcnsContactNormal4CommandFileDelay=pcnsContactNormal4CommandFileDelay, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, airFMSysAlarmMapMainModLowSupplyTemp=airFMSysAlarmMapMainModLowSupplyTemp, battManString2ResponseTestChangeTableSize=battManString2ResponseTestChangeTableSize, rPDU2BankConfigNearOverloadCurrentThreshold=rPDU2BankConfigNearOverloadCurrentThreshold, emsProbeStatusProbeMaxHumidityThresh=emsProbeStatusProbeMaxHumidityThresh, airIRRP100UnitStatusOperateMode=airIRRP100UnitStatusOperateMode, emsProbeConfigProbeMinTempThresh=emsProbeConfigProbeMinTempThresh, airIRSCUnitConfigOpControl=airIRSCUnitConfigOpControl, pmmOutputMeterTableSize=pmmOutputMeterTableSize, xATSSwitchSettingsNominalRotation=xATSSwitchSettingsNominalRotation, battManString2ResponseTestCurrentData=battManString2ResponseTestCurrentData, isxModularDistSubFeedInfoAlarmLowEnable=isxModularDistSubFeedInfoAlarmLowEnable, airIRG3GroupStatusTotalAirFlowUS=airIRG3GroupStatusTotalAirFlowUS, battManString1OhmicValueLastDischargeInfo=battManString1OhmicValueLastDischargeInfo, pcnsRunTimeExceededEnableCommandFile=pcnsRunTimeExceededEnableCommandFile, pmmInputMaxInstantaneousCurrent=pmmInputMaxInstantaneousCurrent, cpsSerialPortSysBufSess=cpsSerialPortSysBufSess, rPDUOutletOn=rPDUOutletOn, airIRRP500GroupStatusAirFlowUS=airIRRP500GroupStatusAirFlowUS, upsDiagnosticUnitController=upsDiagnosticUnitController, memModulesConfigModuleLocation=memModulesConfigModuleLocation, upsPhaseInputName=upsPhaseInputName, airIRG2GroupConfigAltitudeUS=airIRG2GroupConfigAltitudeUS, upsBattery=upsBattery, galaxyVSUPS80kW=galaxyVSUPS80kW, airIRG2GroupSetptsCoolDeadbandMetric=airIRG2GroupSetptsCoolDeadbandMetric)
mibBuilder.exportSymbols("PowerNet-MIB", battManString1OhmicValueEntry=battManString1OhmicValueEntry, integrated=integrated, airFMSysAlarmMapInput2=airFMSysAlarmMapInput2, bypassStaticSwitchError=bypassStaticSwitchError, xATSDeviceDCBackUpPresent=xATSDeviceDCBackUpPresent, uioSensorConfigTableSize=uioSensorConfigTableSize, upsHighPrecBatteryNominalVoltage=upsHighPrecBatteryNominalVoltage, xATSInternalCommErrorCleared=xATSInternalCommErrorCleared, iemConfigContactName=iemConfigContactName, dm3StatusRectID=dm3StatusRectID, airFMModManufactureDate=airFMModManufactureDate, airFMSysAlarmMapExpMod1HighFltrDP=airFMSysAlarmMapExpMod1HighFltrDP, airFMStatusSystemDehumidifyEnabled=airFMStatusSystemDehumidifyEnabled, atsStatus3dot3VPowerSupply=atsStatus3dot3VPowerSupply, pcnsAlarms=pcnsAlarms, airIRmPmPump2=airIRmPmPump2, upsAdvConfigRatedOutputVoltage=upsAdvConfigRatedOutputVoltage, dm3ConfigFusesIndex=dm3ConfigFusesIndex, apCPSNPcmcia=apCPSNPcmcia, airFMModBlwr1Table=airFMModBlwr1Table, rARUFanStatusFanRunhourCounter=rARUFanStatusFanRunhourCounter, upsOutletGroupConfigRebootDuration=upsOutletGroupConfigRebootDuration, upsFirmwareMismatchCleared=upsFirmwareMismatchCleared, upsEbmModeStatus=upsEbmModeStatus, airIRRP500GroupStatusDewPointTempUS=airIRRP500GroupStatusDewPointTempUS, airIRmPmFan2Type=airIRmPmFan2Type, airIRRCGroupConfigNumberOfActiveFlowControllers=airIRRCGroupConfigNumberOfActiveFlowControllers, airFMSysOutputs=airFMSysOutputs, atsConfigFrequencyDeviation=atsConfigFrequencyDeviation, pmmOutputPhaseCurrent=pmmOutputPhaseCurrent, isxModularDistInfoMeterFirmwareRev=isxModularDistInfoMeterFirmwareRev, xATSGeneratorSettingsCrankCycleEnable=xATSGeneratorSettingsCrankCycleEnable, airIRmPmGECWvalveLinearRangeF=airIRmPmGECWvalveLinearRangeF, sPDUOutletConfigMSPmupsEntry=sPDUOutletConfigMSPmupsEntry, airIRmPmMyZoneRoomHumidity=airIRmPmMyZoneRoomHumidity, sPDUMasterStatusVMCommandPending=sPDUMasterStatusVMCommandPending, dm3ConfigRectLowVoltAlarm=dm3ConfigRectLowVoltAlarm, emsOutputRelayControlOutputRelayName=emsOutputRelayControlOutputRelayName, airIRmPmSensor12Defect=airIRmPmSensor12Defect, battManString1BatteryInterTierOhmicValue=battManString1BatteryInterTierOhmicValue, airIRRP500GroupStatusActiveFlowControlStatus=airIRRP500GroupStatusActiveFlowControlStatus, emsOutletStatusEntry=emsOutletStatusEntry, airIRG3Ident=airIRG3Ident, envMinTempThresholdViolationCleared=envMinTempThresholdViolationCleared, upsAdvTestBatteryConditionStatus=upsAdvTestBatteryConditionStatus, airIRmPmPump4=airIRmPmPump4, xPDUBypassVoltageHighAlarm=xPDUBypassVoltageHighAlarm, upsFirmwareMismatch=upsFirmwareMismatch, airIRRP500UnitStatusFluidFlowUS=airIRRP500UnitStatusFluidFlowUS, rPDUStatusBankTable=rPDUStatusBankTable, pcnsMinLoadCapabilityLost=pcnsMinLoadCapabilityLost, airFMSysAlarmMapInput14=airFMSysAlarmMapInput14, rPDU2DevicePropertiesMaxPhaseCurrentRating=rPDU2DevicePropertiesMaxPhaseCurrentRating, emsProbeStatusProbeTemperature=emsProbeStatusProbeTemperature, emsProbeConfigProbeDeltaTemp=emsProbeConfigProbeDeltaTemp, sPDUMasterStatusVMMaxLoad=sPDUMasterStatusVMMaxLoad, airPAIdent=airPAIdent, rPDU2IdentSerialNumber=rPDU2IdentSerialNumber, xATSOutputVoltageLowAlarm=xATSOutputVoltageLowAlarm, aruSmokeAlarmCleared=aruSmokeAlarmCleared, rPDU2DevicePropertiesNumPhases=rPDU2DevicePropertiesNumPhases, ePDUPhaseStatusIndex=ePDUPhaseStatusIndex, wirelessSensorPodConfigMaxHumidityThresh=wirelessSensorPodConfigMaxHumidityThresh, galaxy7000UPS500kVA=galaxy7000UPS500kVA, emConfigProbeTempHysteresis=emConfigProbeTempHysteresis, uioSensorStatusTableSize=uioSensorStatusTableSize, upsHighPrecBatteryPackSerialNumber=upsHighPrecBatteryPackSerialNumber, airFMSysDehumPIDDerivativeD=airFMSysDehumPIDDerivativeD, upsInputContactConfigEntry=upsInputContactConfigEntry, isxModularSubfeedLowCurrentThresholdViolation=isxModularSubfeedLowCurrentThresholdViolation, rPDU2PhaseStatusIndex=rPDU2PhaseStatusIndex, airIRG3CMRunHoursEntry=airIRG3CMRunHoursEntry, airIRmPmEheating1StartTemperature=airIRmPmEheating1StartTemperature, rPDU2OutletSwitchedPropertiesNumber=rPDU2OutletSwitchedPropertiesNumber, airIRRP500UnitIdentName=airIRRP500UnitIdentName, iemStatusProbesEntry=iemStatusProbesEntry, memInputsStatusInputNumber=memInputsStatusInputNumber, atsOutputPercentPower=atsOutputPercentPower, airIRSCUnitIdentSerialNumber=airIRSCUnitIdentSerialNumber, airIRSCUnitConfigStartupDelay=airIRSCUnitConfigStartupDelay, airIRG3RDUStatusDewPointTempMetric=airIRG3RDUStatusDewPointTempMetric, ePDU=ePDU, airIRG3CMThresholdsRackInletTempHighMetric=airIRG3CMThresholdsRackInletTempHighMetric, airFMSysAlarmMapOutput12=airFMSysAlarmMapOutput12, airIRmPmCmp1HysteresisWinterF=airIRmPmCmp1HysteresisWinterF, externalSwitchGearOpened=externalSwitchGearOpened, airIRG3RDURunHoursRDUID=airIRG3RDURunHoursRDUID, emsProbeStatusProbeHighHumidityThresh=emsProbeStatusProbeHighHumidityThresh, apcKeyOverrideUnlocked=apcKeyOverrideUnlocked, pmmInputPowerFactorTotalAlarm=pmmInputPowerFactorTotalAlarm, xPDUSystemStateAlarm=xPDUSystemStateAlarm, airFMModSuctPresPSI=airFMModSuctPresPSI, rPDU2OutletMeteredStatusPeakPowerTimestamp=rPDU2OutletMeteredStatusPeakPowerTimestamp, upsAdvConfigPassword=upsAdvConfigPassword, rPDU2PhaseConfigLowLoadCurrentThreshold=rPDU2PhaseConfigLowLoadCurrentThreshold, chargerIdentModel=chargerIdentModel, airIRmPmDrycooler3SummerStartTempF=airIRmPmDrycooler3SummerStartTempF, rPDU2DeviceConfigOutletsEnergyReset=rPDU2DeviceConfigOutletsEnergyReset, emsIdentDateOfManufacture=emsIdentDateOfManufacture, memBeaconStatusBeaconLocation=memBeaconStatusBeaconLocation, airIRG3RDURunHoursEntry=airIRG3RDURunHoursEntry, mcontrol=mcontrol, memVibrationSensorCommStatus=memVibrationSensorCommStatus, rPDU2IdentModule=rPDU2IdentModule, upsSCGNumOfGroupMembers=upsSCGNumOfGroupMembers, airIRmPmEheating3Running=airIRmPmEheating3Running, airIRRP100GroupConfigReheatDerivativeD=airIRRP100GroupConfigReheatDerivativeD, pcnsNmcAddr=pcnsNmcAddr, xPDUSystemOutputUnderCurrentThreshold=xPDUSystemOutputUnderCurrentThreshold, airIRSCUnitStatusCondInletTempUS=airIRSCUnitStatusCondInletTempUS, uioSensorStatusTemperatureDegF=uioSensorStatusTemperatureDegF, emsIdentProductNumber=emsIdentProductNumber, memOutputConfigTable=memOutputConfigTable, upsOutletGroupControlIndex=upsOutletGroupControlIndex, atsNumOutputPhases=atsNumOutputPhases, airIRmPmGECWvalveLinearRange=airIRmPmGECWvalveLinearRange, xATSIdentSerialNumber=xATSIdentSerialNumber, xPDUDeviceNominalOutputVoltage=xPDUDeviceNominalOutputVoltage, rPDU2BankStatusIndex=rPDU2BankStatusIndex, airIRG3CMStatusAverageFanSpeed=airIRG3CMStatusAverageFanSpeed, pcnsIdent=pcnsIdent, sPDUMasterConfigVMLowLoadWarningThreshold=sPDUMasterConfigVMLowLoadWarningThreshold, battManConfigMinAmbientTempC=battManConfigMinAmbientTempC, upsDiagSubSysNetworkComCardIndex=upsDiagSubSysNetworkComCardIndex, pcnsHumidityOutOfRangeProbe2Desc=pcnsHumidityOutOfRangeProbe2Desc, isxModularDistSysVoltageEntry=isxModularDistSysVoltageEntry, isxModularPduIdentSerialNumber=isxModularPduIdentSerialNumber, airIRmPmAuxiliaryAlarm9=airIRmPmAuxiliaryAlarm9, rPDULoad=rPDULoad, ePDUSensorStatusHumidity=ePDUSensorStatusHumidity, emsDoorSensorStatusSensorName=emsDoorSensorStatusSensorName, xPDUOutputCurrentHighAlarmCleared=xPDUOutputCurrentHighAlarmCleared, airIRmPmPump4HysteresisF=airIRmPmPump4HysteresisF, airIRmPmHumidifier2=airIRmPmHumidifier2, airIRRP100GroupSetpointsCoolUS=airIRRP100GroupSetpointsCoolUS, upsDiagSubSysInverterTableSize=upsDiagSubSysInverterTableSize, pmmOutputTotalPowerFactor=pmmOutputTotalPowerFactor, pcnsEnvironmentCommunicationEstablishedEnableLogging=pcnsEnvironmentCommunicationEstablishedEnableLogging, upsDiagnosticPowerCabinet=upsDiagnosticPowerCabinet, battManUnitCalibEntry=battManUnitCalibEntry, pcnsCriticalFlag=pcnsCriticalFlag, cpsSerialLocalLogins=cpsSerialLocalLogins, memVibrationSensorStatusEntry=memVibrationSensorStatusEntry, mtrapargsString05=mtrapargsString05, upsHighPrecBatteryPackCartridgeHealth=upsHighPrecBatteryPackCartridgeHealth, memOutletConfigEntry=memOutletConfigEntry, airFMSysHeatRejection=airFMSysHeatRejection, emsProbeStatusProbeAlarmStatus=emsProbeStatusProbeAlarmStatus, pcnsEnvironmentCommunicationEstablishedDesc=pcnsEnvironmentCommunicationEstablishedDesc, smwCriticalCondition=smwCriticalCondition, airInformationalCondition=airInformationalCondition, upsBatteryCabinetWiringConfiguration=upsBatteryCabinetWiringConfiguration, rPDULoadDevBankTable=rPDULoadDevBankTable, emsProbeConfigProbeMaxHumidityThresh=emsProbeConfigProbeMaxHumidityThresh, airIRG3CMSetpointsEntry=airIRG3CMSetpointsEntry, dm3StatusBreakersIndex=dm3StatusBreakersIndex, rPDU2OutletMetered=rPDU2OutletMetered, upsDiagSubSysPowerFactorCorrectionEntry=upsDiagSubSysPowerFactorCorrectionEntry, airIRmPmFan1ManOpRunning=airIRmPmFan1ManOpRunning, wirelessSensorPodStatusName=wirelessSensorPodStatusName, envMinHumidityThresholdViolationCleared=envMinHumidityThresholdViolationCleared, sPDUOutletControlMSP=sPDUOutletControlMSP, upsParallelSysUpsEntry=upsParallelSysUpsEntry, sPDUOutletStatusMSPCommandPending=sPDUOutletStatusMSPCommandPending, airFMStatusSystemOn=airFMStatusSystemOn, isxModularDistSysCurrentThresholdMax=isxModularDistSysCurrentThresholdMax, pcnsBypassEnabledEnableShutdown=pcnsBypassEnabledEnableShutdown, airIRmPmDrycooler2Runtime=airIRmPmDrycooler2Runtime, rpduCriticalConditionCleared=rpduCriticalConditionCleared, upsDiagnosticPowerCabinetIndex=upsDiagnosticPowerCabinetIndex, airIRSCGroupConfigCapacityControlType=airIRSCGroupConfigCapacityControlType, memOutputStatusOutputNumber=memOutputStatusOutputNumber, battManStringOnBattery=battManStringOnBattery, upsCommStatus=upsCommStatus, airFMModWaterDetector=airFMModWaterDetector, upsAdvBatteryNominalBackupTime=upsAdvBatteryNominalBackupTime, dm3StatusSysConvVoltage=dm3StatusSysConvVoltage, airFMIdentModuleFirmwareRev=airFMIdentModuleFirmwareRev, upsOutletGroupControlOutletType=upsOutletGroupControlOutletType, airFMModSmokeDetector=airFMModSmokeDetector, upsSCGReturnBatteryCapacityOffset=upsSCGReturnBatteryCapacityOffset, pmmOutputTotalActivePower=pmmOutputTotalActivePower, galaxy5000UPS30KVA=galaxy5000UPS30KVA, upsFirmwareUpdateFinished=upsFirmwareUpdateFinished, airFMSysAlarmMapMainModCondPumpFail=airFMSysAlarmMapMainModCondPumpFail, xATSTestingSimulatePowerFailTest=xATSTestingSimulatePowerFailTest, cpsSerialGroupName=cpsSerialGroupName, airFMIdentModuleIndex=airFMIdentModuleIndex, pcnsRunTimeExceededCommandFileDelay=pcnsRunTimeExceededCommandFileDelay, rPDULoadStatusIndex=rPDULoadStatusIndex, airIRG3IdentManufactureDate=airIRG3IdentManufactureDate, xPDUSystemBreakerEntry=xPDUSystemBreakerEntry, airIRSCUnitThresholdsReturnAirHighTempMetric=airIRSCUnitThresholdsReturnAirHighTempMetric, airFMModBlwr1ElOvTimeConst=airFMModBlwr1ElOvTimeConst, dm3ConfigLVDEnable=dm3ConfigLVDEnable, dm3ConfigLVDName=dm3ConfigLVDName, pmmBranchCircuitMaxApparentPowerThreshold=pmmBranchCircuitMaxApparentPowerThreshold, airIRRP500GroupConfigAltitudeMetric=airIRRP500GroupConfigAltitudeMetric, airIRRP100GroupSetpoints=airIRRP100GroupSetpoints, rPDUStatusOutletEntry=rPDUStatusOutletEntry, rPDU2PhaseConfigNumber=rPDU2PhaseConfigNumber, xPDUDeviceFansPresent=xPDUDeviceFansPresent, upsAdvTestCalibrationDate=upsAdvTestCalibrationDate, dm3ConfigCompMethod=dm3ConfigCompMethod, memSensorsStatusSensorName=memSensorsStatusSensorName, airIRmPmReturnAirTemperatureTooLow=airIRmPmReturnAirTemperatureTooLow, xPDUDevice=xPDUDevice, upsAdvTotalDCCurrent=upsAdvTotalDCCurrent, dcmim2StatusAlarmsEntry=dcmim2StatusAlarmsEntry, upsDiagSubSysIDRCEntry=upsDiagSubSysIDRCEntry, xPDUBypassInputVoltageLtoN=xPDUBypassInputVoltageLtoN, pcnsMaxInternalTempInRangeCommandFilePath=pcnsMaxInternalTempInRangeCommandFilePath, uioSensorStatusPortID=uioSensorStatusPortID, airIRmPmWaterTemperatureTooLow=airIRmPmWaterTemperatureTooLow, memFluidSensorConfigSensorIndex=memFluidSensorConfigSensorIndex, pcnsMinRedundancyRegainedEnableCommandFile=pcnsMinRedundancyRegainedEnableCommandFile, memSensorsTempLongDecRateThreshValue=memSensorsTempLongDecRateThreshValue, xATSGeneratorIdentVoltageConfiguration=xATSGeneratorIdentVoltageConfiguration, uioSensorConfigLowTemperatureThreshold=uioSensorConfigLowTemperatureThreshold, dm3ConfigFusesAlarm=dm3ConfigFusesAlarm, pcnsContactNormal1Desc=pcnsContactNormal1Desc, upsHighPrecTotalDCCurrent=upsHighPrecTotalDCCurrent, airIRmPmSensor18Defect=airIRmPmSensor18Defect, dcBatteryTestFail=dcBatteryTestFail, airFMGroupCfgNumSystems=airFMGroupCfgNumSystems, airFMGroupLoadShare=airFMGroupLoadShare, pcnsNetworking=pcnsNetworking, upsAdvBatteryRecommendedReplaceDate=upsAdvBatteryRecommendedReplaceDate, emConfigProbeHighTempThreshold=emConfigProbeHighTempThreshold, apcUnregisteredUserStatusChange=apcUnregisteredUserStatusChange, rPDUIdentDevicePowerWatts=rPDUIdentDevicePowerWatts, pcnsContactNormal1CommandFilePath=pcnsContactNormal1CommandFilePath, airIRRCUnitStatusOperateMode=airIRRCUnitStatusOperateMode, rPDU2PhasePropertiesModule=rPDU2PhasePropertiesModule, pcnsContactNormal2CommandFilePath=pcnsContactNormal2CommandFilePath, battManInputContactIndex=battManInputContactIndex, accessPXConfigCardReaderEnableDisableAction=accessPXConfigCardReaderEnableDisableAction, upsIntegratedATSSelectedSource=upsIntegratedATSSelectedSource, upsAdvBatteryBreakerStatus=upsAdvBatteryBreakerStatus, mtrapargsIpAddress02=mtrapargsIpAddress02, upsDiagnosticPowerCabinetEntry=upsDiagnosticPowerCabinetEntry, upsEnergyEfficiencyStatsInputEnergyTimeSinceReset=upsEnergyEfficiencyStatsInputEnergyTimeSinceReset, accessPXConfigFrontDoorMaxOpenTime=accessPXConfigFrontDoorMaxOpenTime, mtrapargsString04=mtrapargsString04, dm3StatusRectifier=dm3StatusRectifier, pmmInputApparentPower=pmmInputApparentPower, upsOutletGroupConfigTableSize=upsOutletGroupConfigTableSize, airIRRP500UnitServiceIntervalHeater=airIRRP500UnitServiceIntervalHeater, pduCircuitPanelInputOvercurrentCleared=pduCircuitPanelInputOvercurrentCleared, airIRSCUnitIdentLocation=airIRSCUnitIdentLocation, coolingUnitConfigurationAnalog=coolingUnitConfigurationAnalog, xPDUSystemOutputPhaseCurrent=xPDUSystemOutputPhaseCurrent, rPDU2SensorTempHumidityStatusTempC=rPDU2SensorTempHumidityStatusTempC, rPDUStatusPhaseEntry=rPDUStatusPhaseEntry)
mibBuilder.exportSymbols("PowerNet-MIB", emsOutputRelayStatus=emsOutputRelayStatus, upsAdvBatteryReplaceIndicator=upsAdvBatteryReplaceIndicator, airFMModServIntComp1=airFMModServIntComp1, upsParallelOutputApparentPowerEntry=upsParallelOutputApparentPowerEntry, apcBeaconConnected=apcBeaconConnected, airFMSysOutputIndex=airFMSysOutputIndex, emConfigProbesEntry=emConfigProbesEntry, pmmInputLowCurrentThreshold=pmmInputLowCurrentThreshold, battManBatteryVoltageSpanCalib=battManBatteryVoltageSpanCalib, upsDiagSubSysUsrSuppBattMonitorSerialNum=upsDiagSubSysUsrSuppBattMonitorSerialNum, cpsSerialTelnet=cpsSerialTelnet, pcnsContactFault2ShutdownDelay=pcnsContactFault2ShutdownDelay, airFMModBlwr2InverterTempF=airFMModBlwr2InverterTempF, airIRG3GroupStatusAvgReturnTempMetric=airIRG3GroupStatusAvgReturnTempMetric, xATSSwitchStatisticsTable=xATSSwitchStatisticsTable, humidityThresholdViolation2=humidityThresholdViolation2, airIRRP100UnitStatusSupplyAirTempMetric=airIRRP100UnitStatusSupplyAirTempMetric, airFMSysAlarmMapExpMod1MaintReq=airFMSysAlarmMapExpMod1MaintReq, upsIntegratedUIO=upsIntegratedUIO, battManBatteryStatus=battManBatteryStatus, xATSOutputRelayEntry=xATSOutputRelayEntry, pcnsBypassContactorFailedDesc=pcnsBypassContactorFailedDesc, airFMModBlwr1InverterTempF=airFMModBlwr1InverterTempF, airIRmPmGECWvalveManOpEnable=airIRmPmGECWvalveManOpEnable, dm3ConfigConvFailAlarm=dm3ConfigConvFailAlarm, airIRAlarmConditionsIndex=airIRAlarmConditionsIndex, cpsEthItf=cpsEthItf, chargerInputPhaseTable=chargerInputPhaseTable, coolingUnitStatusDiscreteTable=coolingUnitStatusDiscreteTable, xPDUDeviceFusesPresent=xPDUDeviceFusesPresent, rPDUOutletStatusTable=rPDUOutletStatusTable, dm3StatusBattCurrent=dm3StatusBattCurrent, aruRedundantPowerLostAlarmCleared=aruRedundantPowerLostAlarmCleared, apcEnvLowTempThresholdViolation=apcEnvLowTempThresholdViolation, coolingUnitConfigurationAnalogTableIndex=coolingUnitConfigurationAnalogTableIndex, upsOutletGroupStatusIndex=upsOutletGroupStatusIndex, airIRRP100UnitThresholdsSupplyAirHighTempUS=airIRRP100UnitThresholdsSupplyAirHighTempUS, atsOutputMinPower=atsOutputMinPower, memSmokeSensorStatusSensorSeverity=memSmokeSensorStatusSensorSeverity, rPDU2PhaseToPhaseStatusTableSize=rPDU2PhaseToPhaseStatusTableSize, iemConfigRelayNumber=iemConfigRelayNumber, rPDUBankPhaseLowLoad=rPDUBankPhaseLowLoad, memInputsStatusModuleNumber=memInputsStatusModuleNumber, airIRRP500UnitIdentFirmwareRevision=airIRRP500UnitIdentFirmwareRevision, dm3ConfigBattHighTempAlarm=dm3ConfigBattHighTempAlarm, airIRG2GroupStatusMinReturnAirTempUS=airIRG2GroupStatusMinReturnAirTempUS, communicationLost=communicationLost, airIRRP500GroupStatusHumidifyDemand=airIRRP500GroupStatusHumidifyDemand, cpsSerialPortAutomUsr=cpsSerialPortAutomUsr, rPDU2SensorTempHumidityConfigIndex=rPDU2SensorTempHumidityConfigIndex, dm3StatusBattTemp=dm3StatusBattTemp, emStatusProbesEntry=emStatusProbesEntry, airIRmIdentManufactureDate=airIRmIdentManufactureDate, upsPhaseOutputMinCurrent=upsPhaseOutputMinCurrent, airFMSysStatus=airFMSysStatus, rPDU2PhaseTableSize=rPDU2PhaseTableSize, airIRRCUnitStatusContainmtDPUS=airIRRCUnitStatusContainmtDPUS, dcLVDImminentAlarm=dcLVDImminentAlarm, airFMModBlwr1ModuleIndex=airFMModBlwr1ModuleIndex, emsDoorSensorStatusSensorLocation=emsDoorSensorStatusSensorLocation, wirelessSensorPodStatusTable=wirelessSensorPodStatusTable, xPDUDeviceInfraStruXureType=xPDUDeviceInfraStruXureType, airFMSysAvgReturnTempF=airFMSysAvgReturnTempF, upsParallelOutputLoad=upsParallelOutputLoad, apCPSversion=apCPSversion, airIRSCUnitServiceIntervalsAirFilter=airIRSCUnitServiceIntervalsAirFilter, dcmim2StatusRectDevType=dcmim2StatusRectDevType, upsHighPrecBatteryFrameCurrent=upsHighPrecBatteryFrameCurrent, accessPXIdentAlarmStatus=accessPXIdentAlarmStatus, emsInputContactConfigTable=emsInputContactConfigTable, airIRRP500Group=airIRRP500Group, uioSensorConfigSensorLocation=uioSensorConfigSensorLocation, emsAlarmDeviceStatusEntry=emsAlarmDeviceStatusEntry, networkAir=networkAir, airIRG3RDUConfigByPassValveEnabled=airIRG3RDUConfigByPassValveEnabled, pcnsTempOutOfRangeProbe2EnableShutdown=pcnsTempOutOfRangeProbe2EnableShutdown, upsHighPrecBatteryPackIndex=upsHighPrecBatteryPackIndex, mfiletransfer=mfiletransfer, pcnsNmcTable=pcnsNmcTable, rPDU2OutletMeteredPropertiesPowerRating=rPDU2OutletMeteredPropertiesPowerRating, coolingUnitStatusAnalogUnits=coolingUnitStatusAnalogUnits, upsBasicStateOutputState=upsBasicStateOutputState, upsAdvTestBatteryLastDate=upsAdvTestBatteryLastDate, rPDULowLoadCleared=rPDULowLoadCleared, uioOutputRelayStatusTable=uioOutputRelayStatusTable, memBeaconStatusAlarmState=memBeaconStatusAlarmState, airIRG3RDUServiceIntervalsAirFilterAlarm=airIRG3RDUServiceIntervalsAirFilterAlarm, xPDUIdentHardwareRev=xPDUIdentHardwareRev, airIRAlarmConditionsTableSize=airIRAlarmConditionsTableSize, cpsSerialPortModemChat=cpsSerialPortModemChat, atsStatusResetMaxMinValues=atsStatusResetMaxMinValues, airIRmPmMinLimitReturnAirHumidity=airIRmPmMinLimitReturnAirHumidity, apcRegisteredUserAccessDenied=apcRegisteredUserAccessDenied, airIRG3GroupStatusAvgFanSpeed=airIRG3GroupStatusAvgFanSpeed, apcDoorClosed=apcDoorClosed, airIRG3GroupSetpointsFanSpeedPreference=airIRG3GroupSetpointsFanSpeedPreference, pcnsTempInRangeProbe1=pcnsTempInRangeProbe1, pcnsContactNormal3Desc=pcnsContactNormal3Desc, airIRG3AlarmsIndex=airIRG3AlarmsIndex, bypassStaticSwitchOK=bypassStaticSwitchOK, sPDUOutletConfigMSPannunInitialState=sPDUOutletConfigMSPannunInitialState, xPDUSystemOutputOverVoltThreshold=xPDUSystemOutputOverVoltThreshold, upsAdvConfigUpperBypassVoltTolerance=upsAdvConfigUpperBypassVoltTolerance, upsOutletGroupStatusGroupFullState=upsOutletGroupStatusGroupFullState, emsStatusInputContactCount=emsStatusInputContactCount, rPDU2OutletMeteredStatusIndex=rPDU2OutletMeteredStatusIndex, atsConfigPhase=atsConfigPhase, airIRmPmCmp2HysteresisSummer=airIRmPmCmp2HysteresisSummer, rPDULoadStatusPhaseNumber=rPDULoadStatusPhaseNumber, xATSGeneratorFuelSystemType=xATSGeneratorFuelSystemType, airIRSCGroupSetptsCoolSetpointMetric=airIRSCGroupSetptsCoolSetpointMetric, iemConfigProbeTempHysteresis=iemConfigProbeTempHysteresis, upsDiagSubSysUsrSuppBattMonitorTemperature=upsDiagSubSysUsrSuppBattMonitorTemperature, rPDUIdent=rPDUIdent, memOutputStatusModuleNumber=memOutputStatusModuleNumber, airIRmPmSensor19Defect=airIRmPmSensor19Defect, upsDiagSubSysExternalSwitchGearFrameIndex=upsDiagSubSysExternalSwitchGearFrameIndex, airIRG2RDT2RunHoursEvapFanTable=airIRG2RDT2RunHoursEvapFanTable, airIRSCUnitStatusOutputState=airIRSCUnitStatusOutputState, dipSwitchStatus=dipSwitchStatus, xATSTestPassed=xATSTestPassed, upsAdvConfigSimpleSignalShutdowns=upsAdvConfigSimpleSignalShutdowns, airFMSysOutputEntry=airFMSysOutputEntry, envMaxTempThresholdViolationCleared=envMaxTempThresholdViolationCleared, rPDU2DeviceStatusModule=rPDU2DeviceStatusModule, sPDUOutletName=sPDUOutletName, airFMSysPresentStatus=airFMSysPresentStatus, sPDUOutletConfigMSPmupsOutletIndex=sPDUOutletConfigMSPmupsOutletIndex, airIRRP500UnitStatusOperateMode=airIRRP500UnitStatusOperateMode, rPDU2PhaseToPhase=rPDU2PhaseToPhase, upsEbmModeTotalTimeInMonth=upsEbmModeTotalTimeInMonth, dcmim2=dcmim2, apcCriticalDiscreteInputContactStateNormal=apcCriticalDiscreteInputContactStateNormal, bmBatManMaintenanceAlarm=bmBatManMaintenanceAlarm, iemConfigProbesNumProbes=iemConfigProbesNumProbes, galaxy9000UPSWithSSC=galaxy9000UPSWithSSC, airIRmPmUnitEvaporationTemperature2F=airIRmPmUnitEvaporationTemperature2F, sPDUOutletConfigMSPannun=sPDUOutletConfigMSPannun, dm3StatusFusesEntry=dm3StatusFusesEntry, pduCircuitPanelInputUndervoltageCleared=pduCircuitPanelInputUndervoltageCleared, dcmim2ConfigLVDTableSize=dcmim2ConfigLVDTableSize, sPDUMasterConfigVMOverloadRestriction=sPDUMasterConfigVMOverloadRestriction, isxcBasic=isxcBasic, airPAFirmwareRevision=airPAFirmwareRevision, airIRRCUnitRunHoursFanPowerSupplyFeedBRight=airIRRCUnitRunHoursFanPowerSupplyFeedBRight, airIRmPmUnitCondensationTemperature1=airIRmPmUnitCondensationTemperature1, airIRmPmAuxiliaryAlarm2=airIRmPmAuxiliaryAlarm2, xATSSource1TableSize=xATSSource1TableSize, pmmBranchCircuitBreakerRating=pmmBranchCircuitBreakerRating, pcnsEnvironmentCommunicationLostCommandFilePath=pcnsEnvironmentCommunicationLostCommandFilePath, upsPhaseOutputMinPower=upsPhaseOutputMinPower, airFMSysAlarmMapExpMod2Entry=airFMSysAlarmMapExpMod2Entry, emsOutputRelayControlOutputRelayCommand=emsOutputRelayControlOutputRelayCommand, pmmOutputEntry=pmmOutputEntry, airIRRCUnitRunHours=airIRRCUnitRunHours, apcRegisteredUserAccessChange=apcRegisteredUserAccessChange, isxModularDistInfo=isxModularDistInfo, AirIRmActivityState=AirIRmActivityState, airIRmPmPump1ControlCycle=airIRmPmPump1ControlCycle, upsBasicOutputStatus=upsBasicOutputStatus, isxModularDistModuleOutputTable=isxModularDistModuleOutputTable, airIRRP100UnitStatusRackInletTemperature2Metric=airIRRP100UnitStatusRackInletTemperature2Metric, receiverAddr=receiverAddr, sPDUOutletCtlName=sPDUOutletCtlName, pmmBranchCircuitIndex=pmmBranchCircuitIndex, rPDUOutletControlOutletCommand=rPDUOutletControlOutletCommand, atsIdentSerialNumber=atsIdentSerialNumber, upsBasicConfigDeviceTable=upsBasicConfigDeviceTable, battManString2BatteryOpenCell=battManString2BatteryOpenCell, airIRmPmAuxiliaryAlarm7=airIRmPmAuxiliaryAlarm7, upsOutputRelayConfigPolarity=upsOutputRelayConfigPolarity, pmmBranchCircuitPowerFactor=pmmBranchCircuitPowerFactor, airIRRC100Series=airIRRC100Series, airIRRP100UnitRunHoursHeater1=airIRRP100UnitRunHoursHeater1, upsBatteryCabinetVoltagePolarity2=upsBatteryCabinetVoltagePolarity2, battManString2BatteryChemLowVoltageAlarm=battManString2BatteryChemLowVoltageAlarm, airFMSysAlarmMapExpMod2AnyAlarm=airFMSysAlarmMapExpMod2AnyAlarm, airIRmPmPump1StartTemperatureF=airIRmPmPump1StartTemperatureF, emsOutletStateNormal=emsOutletStateNormal, batteryOverTemperature=batteryOverTemperature, memBeacons=memBeacons, atsInputMinVoltage=atsInputMinVoltage, rARUStatusSysTempUnits=rARUStatusSysTempUnits, dm3ConfigInRlyTable=dm3ConfigInRlyTable, pcnsHumidityInRangeProbe2=pcnsHumidityInRangeProbe2, rPDULoadStatusTable=rPDULoadStatusTable, airIRRCGroupConfigPctGlycol=airIRRCGroupConfigPctGlycol, apcEnvLTIncTempRateViolationCleared=apcEnvLTIncTempRateViolationCleared, rARUPowerStatusTable=rARUPowerStatusTable, moduleDate=moduleDate, upsAdvStateLifeCycleManagement=upsAdvStateLifeCycleManagement, emsBeaconOff=emsBeaconOff, airFMGroupFailoverSysAnyMinorAlarm=airFMGroupFailoverSysAnyMinorAlarm, atsRMSOverVoltage=atsRMSOverVoltage, atsStatusSourceBStatus=atsStatusSourceBStatus, airIRmPmPump1Running=airIRmPmPump1Running, xATSGeneratorSettingsStopDelay=xATSGeneratorSettingsStopDelay, emStatusProbeLowTempViolation=emStatusProbeLowTempViolation, airFMSysCndsrFluidVlvCloseDelay=airFMSysCndsrFluidVlvCloseDelay, pduUtilityLineOvervoltage=pduUtilityLineOvervoltage, monitors=monitors, airIRSCUnitStatusContainmtDPMetric=airIRSCUnitStatusContainmtDPMetric, xATSGeneratorIdentDateofManufacture=xATSGeneratorIdentDateofManufacture, upsBatteryOverVoltageCleared=upsBatteryOverVoltageCleared, airFMGroupFailoverModHighFilterDP=airFMGroupFailoverModHighFilterDP, emsSensorConfigEntry=emsSensorConfigEntry, ePDUSensorConfigTable=ePDUSensorConfigTable, airFMModBlwr2ActFreq=airFMModBlwr2ActFreq, emsAlinkPowerOverloadCleared=emsAlinkPowerOverloadCleared, symmetraUPS16kVA=symmetraUPS16kVA, smartUPS700=smartUPS700, memInputAnalogThreshHysteresis=memInputAnalogThreshHysteresis, ceInformationalCondition=ceInformationalCondition, airIRmPmCommonAlarm=airIRmPmCommonAlarm, memSensorsTempHighThresh=memSensorsTempHighThresh, sPDUOutletStatusVMIndex=sPDUOutletStatusVMIndex, airIRmPmMyZoneNumberOfErrorUnits=airIRmPmMyZoneNumberOfErrorUnits, baseFanFailureCleared=baseFanFailureCleared, pduCircuitPanelFrequencyOutOfRange=pduCircuitPanelFrequencyOutOfRange, uioInputContactStatusTableSize=uioInputContactStatusTableSize, memSensorsHumidityHighThresh=memSensorsHumidityHighThresh, pduCircuitPanelFrequencyOutofRangeCleared=pduCircuitPanelFrequencyOutofRangeCleared, upsDiagSubSysInverterSerialNum=upsDiagSubSysInverterSerialNum, upsBasicBatteryStatus=upsBasicBatteryStatus, memOutletStatusOutletLocation=memOutletStatusOutletLocation, battManSystemPilotTempC=battManSystemPilotTempC, upsDiagnosticTemperature=upsDiagnosticTemperature, airIRmPmMyZoneSupplyHumidity=airIRmPmMyZoneSupplyHumidity, pcnsContactFault3Desc=pcnsContactFault3Desc, battManConfigBatteriesperString=battManConfigBatteriesperString, rPDULoadDevMaxOutletEntry=rPDULoadDevMaxOutletEntry, upsBatteryCabStringTable=upsBatteryCabStringTable, airFMSysAlarmMapExpMod2CondPumpFail=airFMSysAlarmMapExpMod2CondPumpFail, airIRRCUnitStatusReturnAirTempUS=airIRRCUnitStatusReturnAirTempUS, upsAdvConfigBattExhaustThresh=upsAdvConfigBattExhaustThresh, sPDUMasterControl=sPDUMasterControl, airIRmPmPump3PressureSetpoint=airIRmPmPump3PressureSetpoint, airIRRP500UnitStatusCoolOutput=airIRRP500UnitStatusCoolOutput, airIRG2GroupSetptsCoolDeadbandUS=airIRG2GroupSetptsCoolDeadbandUS, upsDiagIMInControl=upsDiagIMInControl, isxModularDistSubFeedLoadingAlarmStatus=isxModularDistSubFeedLoadingAlarmStatus, battManString2ResponseTestCurrentBenchmarkData=battManString2ResponseTestCurrentBenchmarkData, airIRmPmLouver2ManOpPosition=airIRmPmLouver2ManOpPosition, upsBatteryCabStringIndex=upsBatteryCabStringIndex, xPDUInputVoltageLowAlarmCleared=xPDUInputVoltageLowAlarmCleared, pcnsAdvancedTurnOffSOG=pcnsAdvancedTurnOffSOG, emsProbeConfigProbeMaxVoltThresh=emsProbeConfigProbeMaxVoltThresh, pcnsRunTimeBelowThreshold=pcnsRunTimeBelowThreshold, pmmInputOverActivePowerThreshold=pmmInputOverActivePowerThreshold, pmmBranchCircuitMinCurrentThreshold=pmmBranchCircuitMinCurrentThreshold, upsAdvConfigAlarmRuntimeUnder=upsAdvConfigAlarmRuntimeUnder, airFMModNomCoilDiffPresInWC=airFMModNomCoilDiffPresInWC, battManString2BatteryTableSize=battManString2BatteryTableSize, airIRRP100GroupSetpointsSupplyAirUS=airIRRP100GroupSetpointsSupplyAirUS)
mibBuilder.exportSymbols("PowerNet-MIB", atsOutputPhaseState=atsOutputPhaseState, battManString2OhmicValueEntry=battManString2OhmicValueEntry, battManTestResults=battManTestResults, airIRRCGroupSetpointsFanSpeedPreference=airIRRCGroupSetpointsFanSpeedPreference, sPDUIdentFirmwareRevMSP=sPDUIdentFirmwareRevMSP, atsStatusSelectedSource=atsStatusSelectedSource, rPDU2SensorTempHumidityConfigTable=rPDU2SensorTempHumidityConfigTable, memFluidSensorConfigSensorName=memFluidSensorConfigSensorName, rPDUIdentDeviceLinetoLineVoltage=rPDUIdentDeviceLinetoLineVoltage, pcnsNMCProtocol=pcnsNMCProtocol, airIRRP500GroupStatusMaxRackInletTempMetric=airIRRP500GroupStatusMaxRackInletTempMetric, airIRG2GroupSetptsSupplyAirSetpointUS=airIRG2GroupSetptsSupplyAirSetpointUS, emsOutletControl=emsOutletControl, memInputName=memInputName, emsOutletControlOutletCommand=emsOutletControlOutletCommand, upsPhaseInputMinVoltage=upsPhaseInputMinVoltage, rPDULoadDevBankMaxLoad=rPDULoadDevBankMaxLoad, airFMModStatusModuleIndex=airFMModStatusModuleIndex, pcnsTempOutOfRangeProbe2EnableCommandFile=pcnsTempOutOfRangeProbe2EnableCommandFile, airIRG2RDT2ThresholdsSupplyAirHighTempMetric=airIRG2RDT2ThresholdsSupplyAirHighTempMetric, airIRmPmFan2ManOpRunning=airIRmPmFan2ManOpRunning, apCPSDevId=apCPSDevId, upsDiagSubSysPowerFactorCorrectionIndex=upsDiagSubSysPowerFactorCorrectionIndex, AirIRG2RDType2IOState=AirIRG2RDType2IOState, upsParallelInputPhaseIndex=upsParallelInputPhaseIndex, smartUPS450=smartUPS450, isxModularDistModuleBreakerPercent=isxModularDistModuleBreakerPercent, upsAdvTestRuntimeCalibration=upsAdvTestRuntimeCalibration, envLTIncTempRateViolationCleared=envLTIncTempRateViolationCleared, isxModularSubfeedMaxCurrentThresholdViolation=isxModularSubfeedMaxCurrentThresholdViolation, pcnsMaxInternalTempInRangeCommandFileDelay=pcnsMaxInternalTempInRangeCommandFileDelay, airIRG2RDT2ThresholdsRackInletHighTempUS=airIRG2RDT2ThresholdsRackInletHighTempUS, upsBasicIdent=upsBasicIdent, airIRmPmHumidifier3Alarm5us=airIRmPmHumidifier3Alarm5us, memInputAnalogCalibrationPoint4Value=memInputAnalogCalibrationPoint4Value, airIRmIdentSysOID=airIRmIdentSysOID, upsOutputRelayAbnormalCleared=upsOutputRelayAbnormalCleared, mspDeviceConfigChange=mspDeviceConfigChange, emsProbeConfigEntry=emsProbeConfigEntry, airFMSysMaxRemoteTempF=airFMSysMaxRemoteTempF, airIRmPmSensor11Failure=airIRmPmSensor11Failure, airIRmPmReturnAirTemperatureTooHigh=airIRmPmReturnAirTemperatureTooHigh, pcnsMaxInternalTempExceededEnableCommandFile=pcnsMaxInternalTempExceededEnableCommandFile, envAlinkCommunicationLost=envAlinkCommunicationLost, symmetraPx500kVA=symmetraPx500kVA, pmmOutputMinCurrentThreshold=pmmOutputMinCurrentThreshold, upsHighPrecBatteryPackOnlyIndex=upsHighPrecBatteryPackOnlyIndex, rPDU2SensorTempHumidityConfigName=rPDU2SensorTempHumidityConfigName, rARUSensorsTempMaxThresh=rARUSensorsTempMaxThresh, isxModularPduStatus=isxModularPduStatus, apcLogicPowerSupplyFault=apcLogicPowerSupplyFault, rPDU2IdentLocation=rPDU2IdentLocation, upsDiagSubSysIntBypSwitchHardwareRev=upsDiagSubSysIntBypSwitchHardwareRev, airIRmPmGvalveManOpOpeningGrade=airIRmPmGvalveManOpOpeningGrade, communicationOK=communicationOK, rPDU2OutletSwitchedPropertiesModule=rPDU2OutletSwitchedPropertiesModule, uioSensorConfigTable=uioSensorConfigTable, xATSGeneratorOutputTotalPower=xATSGeneratorOutputTotalPower, airIRG2GroupConfigFanSpeedControl=airIRG2GroupConfigFanSpeedControl, atsOutputBankPercentPower=atsOutputBankPercentPower, cpsSerialPortAutoInput=cpsSerialPortAutoInput, airFMModServIntHum=airFMModServIntHum, dm3ConfigOutputRelays=dm3ConfigOutputRelays, airFMGroupFailover=airFMGroupFailover, upsCriticalConditionCleared=upsCriticalConditionCleared, airIRG2RDT2Setpoints=airIRG2RDT2Setpoints, airIRmPmFilter2Clogged=airIRmPmFilter2Clogged, dm3StatusConvStandby=dm3StatusConvStandby, airIRRP100UnitIdentFirmwareRevision=airIRRP100UnitIdentFirmwareRevision, galaxyVXUPS1250kVA=galaxyVXUPS1250kVA, cpsInfoSerialPortSigDSR=cpsInfoSerialPortSigDSR, airFMGroupFailoverSysSecondarySensorFail=airFMGroupFailoverSysSecondarySensorFail, xPDUSystemInMaintenanceBypassMode=xPDUSystemInMaintenanceBypassMode, airFMGroupCfgShutdownSmoke=airFMGroupCfgShutdownSmoke, ePDUDeviceStatusSerialNumber=ePDUDeviceStatusSerialNumber, upsTest=upsTest, airIRSCUnitIdent=airIRSCUnitIdent, temperatureThresholdViolationCleared2=temperatureThresholdViolationCleared2, memSensorsVoltMinThresh=memSensorsVoltMinThresh, pmmBranchCircuitPhase=pmmBranchCircuitPhase, coolingUnitConfigurationStringDescription=coolingUnitConfigurationStringDescription, memSensorsHumidityMaxThresh=memSensorsHumidityMaxThresh, airFMModBlwr2Poles=airFMModBlwr2Poles, emsProbeConfig=emsProbeConfig, pcns=pcns, pcnsEnvironmentCommunicationLostEnableCommandFile=pcnsEnvironmentCommunicationLostEnableCommandFile, pcnsBypassDisabledCommandFileDelay=pcnsBypassDisabledCommandFileDelay, airIRmPmPump3ManOpEnable=airIRmPmPump3ManOpEnable, rPDU2OutletMeteredConfigNearOverloadCurrentThreshold=rPDU2OutletMeteredConfigNearOverloadCurrentThreshold, airFMSysHumDeadband=airFMSysHumDeadband, airIRRP500UnitThresholdsEnteringFluidHighTempMetric=airIRRP500UnitThresholdsEnteringFluidHighTempMetric, airIRmPmPump3ControlFactor=airIRmPmPump3ControlFactor, rPDUCommunicationLost=rPDUCommunicationLost, xATSSwitchTimersAbort=xATSSwitchTimersAbort, atsInputPhaseTableIndex=atsInputPhaseTableIndex, memDoorSensorModuleConfigIndex=memDoorSensorModuleConfigIndex, pcnsNetworkComsLost=pcnsNetworkComsLost, upsPhaseOutputPower=upsPhaseOutputPower, wirelessSensorPodPortIndex=wirelessSensorPodPortIndex, xATSTestingScheduleTestDay=xATSTestingScheduleTestDay, upsOutletGroupConfigMinReturnRuntime=upsOutletGroupConfigMinReturnRuntime, xATSSystemOutputVoltageLtoN=xATSSystemOutputVoltageLtoN, airIRG3CMConfigStartupDelay=airIRG3CMConfigStartupDelay, upsECOmode=upsECOmode, upsEnergyEfficiencyStatsOutputEnergyTimeSinceReset=upsEnergyEfficiencyStatsOutputEnergyTimeSinceReset, airIRRP100UnitStatusDischargePressureMetric=airIRRP100UnitStatusDischargePressureMetric, airIRRP100UnitStatusCoolDemand=airIRRP100UnitStatusCoolDemand, upsAdvStateAbnormalConditions=upsAdvStateAbnormalConditions, atsConfigPhaseTableSize=atsConfigPhaseTableSize, pcnsUpdateAvailableFlag=pcnsUpdateAvailableFlag, airAmico=airAmico, dcmim2StatusRectPhyAddr=dcmim2StatusRectPhyAddr, airIRRP500UnitConfigHumidifierControl=airIRRP500UnitConfigHumidifierControl, memInputAnalogMeasurementUnits=memInputAnalogMeasurementUnits, pcnsMinRedundancyLostEnableCommandFile=pcnsMinRedundancyLostEnableCommandFile, cpsAP930x=cpsAP930x, airIRG3RDUStatusDCPowerSupply1Current=airIRG3RDUStatusDCPowerSupply1Current, pcnsCommunicationLostDesc=pcnsCommunicationLostDesc, smwCriticalConditionCleared=smwCriticalConditionCleared, rPDU2DeviceStatusCommandPending=rPDU2DeviceStatusCommandPending, airIRRCUnitRunHoursFan8=airIRRCUnitRunHoursFan8, airFMSysAlarmMapSysReturnSensFail=airFMSysAlarmMapSysReturnSensFail, rPDULoadDevBankIndex=rPDULoadDevBankIndex, emsFluidSensorStatusTable=emsFluidSensorStatusTable, mcontrolRestartAgent=mcontrolRestartAgent, airIRRCUnitServiceIntervalsAirFilterAlarm=airIRRCUnitServiceIntervalsAirFilterAlarm, rPDU2OutletSwitchedStatusState=rPDU2OutletSwitchedStatusState, upsAdvStateSystemMessages=upsAdvStateSystemMessages, dcmim2StatusBattery=dcmim2StatusBattery, emsStatusSensorCount=emsStatusSensorCount, upsIntegratedATS=upsIntegratedATS, wirelessSensorPodStatusExtAddr=wirelessSensorPodStatusExtAddr, airIRmPmCmp2StartTempSummer=airIRmPmCmp2StartTempSummer, xPDUIdentSerialNumber=xPDUIdentSerialNumber, emsSmokeSensorStatusTable=emsSmokeSensorStatusTable, airIRRCUnitConfigCoolCapacity=airIRRCUnitConfigCoolCapacity, airFMModCondPump=airFMModCondPump, pcnsBatteryDischargedDesc=pcnsBatteryDischargedDesc, ePDUSensorStatusEntry=ePDUSensorStatusEntry, memFluidSensorStatusSensorSeverity=memFluidSensorStatusSensorSeverity, rARUIdentName=rARUIdentName, rPDUIdentDeviceOrientation=rPDUIdentDeviceOrientation, pmmInputVoltageMinimumAlarm=pmmInputVoltageMinimumAlarm, rPDULoadBankConfigLowLoadThreshold=rPDULoadBankConfigLowLoadThreshold, memModulesStatusModuleName=memModulesStatusModuleName, upsDiagSubSysSystemPowerSupplyFrameIndex=upsDiagSubSysSystemPowerSupplyFrameIndex, upsOnBatteryDueToFault=upsOnBatteryDueToFault, galaxyVMUPS180kVA=galaxyVMUPS180kVA, upsDiagSubSysDCCircuitBreakerStatus=upsDiagSubSysDCCircuitBreakerStatus, upsDiagSubSysIntBypSwitchFanLifetimeInfoTableSize=upsDiagSubSysIntBypSwitchFanLifetimeInfoTableSize, rPDU2OutletSwitchedStatusName=rPDU2OutletSwitchedStatusName, struxureWareOperations=struxureWareOperations, iemStatusRelaysNumRelays=iemStatusRelaysNumRelays, pmm500kVA=pmm500kVA, airIRG3GroupStatusAirFlowUS=airIRG3GroupStatusAirFlowUS, airFMSysAlarmMapOutput13=airFMSysAlarmMapOutput13, dm3ConfigRectStandbyAlarm=dm3ConfigRectStandbyAlarm, airFMGroupFailoverSysSupplySensorFail=airFMGroupFailoverSysSupplySensorFail, memInputAnalogLowThresh=memInputAnalogLowThresh, dm3ConfigLowKneeTemp=dm3ConfigLowKneeTemp, airIRmPmSensor15Defect=airIRmPmSensor15Defect, iemProbeDisconnected=iemProbeDisconnected, pcnsOverloadSolvedEnableLogging=pcnsOverloadSolvedEnableLogging, iemConfigProbeHighHumidThreshold=iemConfigProbeHighHumidThreshold, rPDU2BankConfigOverloadCurrentThreshold=rPDU2BankConfigOverloadCurrentThreshold, airIRRP100GroupStatusAirFlowMetric=airIRRP100GroupStatusAirFlowMetric, upsParallelOutputActivePowerEntry=upsParallelOutputActivePowerEntry, pcnsMaxInternalTempInRangeEnableCommandFile=pcnsMaxInternalTempInRangeEnableCommandFile, pcnsTempInRangeProbe1EnableCommandFile=pcnsTempInRangeProbe1EnableCommandFile, airFMModRHTable=airFMModRHTable, galaxy300UPS40kVA33=galaxy300UPS40kVA33, airIRG3CMThresholdsSupplyAirTempHighUS=airIRG3CMThresholdsSupplyAirTempHighUS, isxModularOutputVoltageLowThresholdViolation=isxModularOutputVoltageLowThresholdViolation, pmmInputVoltageLtoN=pmmInputVoltageLtoN, xPDUOutputVoltageHighAlarmCleared=xPDUOutputVoltageHighAlarmCleared, upsAdvControlTurnOnUPS=upsAdvControlTurnOnUPS, upsBackfeedRelayFaultCleared=upsBackfeedRelayFaultCleared, airIRRP100UnitConfigOutputNormalState=airIRRP100UnitConfigOutputNormalState, xATSS1BadPhaseRotation=xATSS1BadPhaseRotation, airPADateOfManufacture=airPADateOfManufacture, rPDU2BankStatusPeakCurrent=rPDU2BankStatusPeakCurrent, smartUPS8000=smartUPS8000, battManString1BatteryCalibIndex=battManString1BatteryCalibIndex, xPDUBranchCurrentMinAlarmCleared=xPDUBranchCurrentMinAlarmCleared, pcnsOverloadSolvedEnableCommandFile=pcnsOverloadSolvedEnableCommandFile, emsSensorStatusSensorState=emsSensorStatusSensorState, airFMIdentLocation=airFMIdentLocation, airIRmPmPump3LinearRange=airIRmPmPump3LinearRange, rARUSensorsTempLongIncRateThreshTime=rARUSensorsTempLongIncRateThreshTime, airIRmPmOutsideAirTemperature=airIRmPmOutsideAirTemperature, xATSSwitchStatus=xATSSwitchStatus, airIRRCUnitIdentSerialNumber=airIRRCUnitIdentSerialNumber, pmmOutputTotalApparentPower=pmmOutputTotalApparentPower, emStatusProbeName=emStatusProbeName, emStatusProbeMinHumidViolation=emStatusProbeMinHumidViolation, upsEnergyEfficiencyStatsOutputEnergyUsage=upsEnergyEfficiencyStatsOutputEnergyUsage, serialPort=serialPort, upsDiagUnitControllerModelNum=upsDiagUnitControllerModelNum, xPDUSystemBreakerTable=xPDUSystemBreakerTable, emsSensorControlEntry=emsSensorControlEntry, coolingUnitTableSize=coolingUnitTableSize, airFMSysAlarmMapInput1=airFMSysAlarmMapInput1, isxModularDistSysPowerTable=isxModularDistSysPowerTable, wirelessSensorStatusRssi=wirelessSensorStatusRssi, airIRRP100GroupConfigCoolDerivativeD=airIRRP100GroupConfigCoolDerivativeD, rPDU2PhaseConfigEntry=rPDU2PhaseConfigEntry, battManRemoteAnnunciatorReset=battManRemoteAnnunciatorReset, upsDiagPMLifetimeInfoTable=upsDiagPMLifetimeInfoTable, airIRmPmSensor17Defect=airIRmPmSensor17Defect, upsParallelNumOfUpsPoweringLoad=upsParallelNumOfUpsPoweringLoad, pcnsTempOutOfRangeProbe2CommandFileDelay=pcnsTempOutOfRangeProbe2CommandFileDelay, airFMGroupSysRole=airFMGroupSysRole, upsDiagSubSysBattMonitorTable=upsDiagSubSysBattMonitorTable, ePDUPhaseStatusReactivePower=ePDUPhaseStatusReactivePower, airIRmPmEheating3StartTemperatureF=airIRmPmEheating3StartTemperatureF, pmmInputHighVoltThreshold=pmmInputHighVoltThreshold, rPDU2DeviceConfigDisplayOrientation=rPDU2DeviceConfigDisplayOrientation, pcnsRunTimeAboveThresholdEnableCommandFile=pcnsRunTimeAboveThresholdEnableCommandFile, coolingUnitConfigurationString=coolingUnitConfigurationString, atsNearOverload=atsNearOverload, dm3ConfigConvHighVoltAlarm=dm3ConfigConvHighVoltAlarm, airIRmIdentFirmwareRevision=airIRmIdentFirmwareRevision, xATSInputContactTableSize=xATSInputContactTableSize, iemStatusContactsNumContacts=iemStatusContactsNumContacts, xPDUBypassInputOverVoltThreshold=xPDUBypassInputOverVoltThreshold, upsAdvConfigMaxShutdownTime=upsAdvConfigMaxShutdownTime, xATSSource2Rotation=xATSSource2Rotation, airFMModCoilDiffPresPa=airFMModCoilDiffPresPa, memSensorsTempLongIncRateThreshTime=memSensorsTempLongIncRateThreshTime, wirelessSensorConfigMinBatteryThresh=wirelessSensorConfigMinBatteryThresh, memSensorsTempShortDecRateThreshTime=memSensorsTempShortDecRateThreshTime, pcnsBypassEnabled=pcnsBypassEnabled, eps=eps, memSensorsAlarmGeneration=memSensorsAlarmGeneration, sPDUIdentNameMSP=sPDUIdentNameMSP, rPDU2OutletSwitchedPropertiesTable=rPDU2OutletSwitchedPropertiesTable, upsDiagnosticDisplayFirmwareRev=upsDiagnosticDisplayFirmwareRev, airFMSysAlarmMapOutput14=airFMSysAlarmMapOutput14, environmentalMonitor=environmentalMonitor, airFMSysAlarmMapExpMod1LowSupplyTemp=airFMSysAlarmMapExpMod1LowSupplyTemp, upsEcoModeTotalPercentTimeSinceReset=upsEcoModeTotalPercentTimeSinceReset, sPDUOutletConfigMSPgsOutletName=sPDUOutletConfigMSPgsOutletName, xPDUInputContactEntry=xPDUInputContactEntry, airIRSCGroupSetptsSupplyAirSetpointMetric=airIRSCGroupSetptsSupplyAirSetpointMetric, sPDUMasterControlMSP=sPDUMasterControlMSP, airIRRP100GroupStatusReheatOutput=airIRRP100GroupStatusReheatOutput, memSensorsConfigTableSize=memSensorsConfigTableSize, xATSMisc=xATSMisc, sPDUMasterConfigMSP=sPDUMasterConfigMSP, airIRmPmDrycooler4WinterStartTempF=airIRmPmDrycooler4WinterStartTempF, airIRmPmNumberOfFans=airIRmPmNumberOfFans, emsDoorSensorStatusSensorState=emsDoorSensorStatusSensorState, msvmNearOverloadCleared=msvmNearOverloadCleared, xATSOutputLoadPoweredByGeneratorAlarm=xATSOutputLoadPoweredByGeneratorAlarm)
mibBuilder.exportSymbols("PowerNet-MIB", upsDiagSubSysXRCommunicationCardTable=upsDiagSubSysXRCommunicationCardTable, airIRRP100UnitConfigPowerSourceConfig=airIRRP100UnitConfigPowerSourceConfig, airIRG3CMStatusRackInletTempMetric=airIRG3CMStatusRackInletTempMetric, dm3ConfigBattHighVoltThresh=dm3ConfigBattHighVoltThresh, airIRmPmAuxiliaryAlarm6=airIRmPmAuxiliaryAlarm6, airIRG3RDURunHoursPump1=airIRG3RDURunHoursPump1, cpsSerialPortParity=cpsSerialPortParity, atsIdentFirmwareRev=atsIdentFirmwareRev, airFMSysAlarmMapInput=airFMSysAlarmMapInput, symmetraUPS12kVA=symmetraUPS12kVA, sPDUOutletConfigMSPmupsP2LowTemp=sPDUOutletConfigMSPmupsP2LowTemp, upsAdvTotalDCCurrentTableIndex=upsAdvTotalDCCurrentTableIndex, upsAdvBatteryCurrentIndex=upsAdvBatteryCurrentIndex, sPDUOutletConfigMSPmupsP2LowHum=sPDUOutletConfigMSPmupsP2LowHum, airIRRP100UnitStatusInputState=airIRRP100UnitStatusInputState, ais5000UPS60kVA=ais5000UPS60kVA, airIRmPmWinterModeStartTempC=airIRmPmWinterModeStartTempC, wirelessSensorStatusTemperature=wirelessSensorStatusTemperature, upsDiagSwitchgearSerialNumber=upsDiagSwitchgearSerialNumber, sPDUMasterControlVMName=sPDUMasterControlVMName, rPDUOutletPhaseTable=rPDUOutletPhaseTable, airIRRCGroupSetpointsActiveFlowControlBias=airIRRCGroupSetpointsActiveFlowControlBias, airIRmPmWinterModeStartTempF=airIRmPmWinterModeStartTempF, airIRmPmUnitOverloadSwitch=airIRmPmUnitOverloadSwitch, airIRmPmMinLimitWaterTemperature=airIRmPmMinLimitWaterTemperature, rPDU2SensorTempHumidityConfigHumidityLowThresh=rPDU2SensorTempHumidityConfigHumidityLowThresh, pcnsAdvancedTurnOffUps=pcnsAdvancedTurnOffUps, airIRmPmMaxLimitReturnAirTemperatureC=airIRmPmMaxLimitReturnAirTemperatureC, switchgearBreakerType=switchgearBreakerType, upsAdvConfigLCDLocalLanguage=upsAdvConfigLCDLocalLanguage, rPDU2SensorDiscreteStatusType=rPDU2SensorDiscreteStatusType, airFMIdentModuleSerialNumber=airFMIdentModuleSerialNumber, smartUPS3Phase15kVA=smartUPS3Phase15kVA, upsPhaseInputMinCurrent=upsPhaseInputMinCurrent, airIRmPmHumidifier1Alarm20us=airIRmPmHumidifier1Alarm20us, airIRRCUnitStatusActivePowerSource=airIRRCUnitStatusActivePowerSource, upsHighPrecExtdBatteryTemperature=upsHighPrecExtdBatteryTemperature, airIRRCGroupConfig=airIRRCGroupConfig, rPDU2DeviceConfigModule=rPDU2DeviceConfigModule, galaxy300UPS30kVA31=galaxy300UPS30kVA31, airIRmPmEheating2StartTemperatureF=airIRmPmEheating2StartTemperatureF, xPDUFuseBlownAlarmCleared=xPDUFuseBlownAlarmCleared, wirelessSensorPodConfigLowHumidityThresh=wirelessSensorPodConfigLowHumidityThresh, outputVoltageWaveformError=outputVoltageWaveformError, severity=severity, airIRmPmDrycooler1=airIRmPmDrycooler1, dm3StatusConvState=dm3StatusConvState, airIRG3GroupStatusIndex=airIRG3GroupStatusIndex, battManSystemAmbientTempF=battManSystemAmbientTempF, airIRRCUnitStatusSupplyAirTempUS=airIRRCUnitStatusSupplyAirTempUS, airIRmPmEheating1Running=airIRmPmEheating1Running, airIRRP500UnitConfigInputNormalState=airIRRP500UnitConfigInputNormalState, cpsSerialPortAuthSrv2=cpsSerialPortAuthSrv2, emsVibrationSensorConfigSensorLocation=emsVibrationSensorConfigSensorLocation, generalDeviceEvent=generalDeviceEvent, airIRmPmNumberOfSensors=airIRmPmNumberOfSensors, airFMModHumidifier=airFMModHumidifier, rPDUBankPhaseNearOverloadCleared=rPDUBankPhaseNearOverloadCleared, airIRRP100UnitStatusFilterDPMetric=airIRRP100UnitStatusFilterDPMetric, airFMSysDehumPIDGainP=airFMSysDehumPIDGainP, airIRG2RDT2ConfigIdleOnLeakDetect=airIRG2RDT2ConfigIdleOnLeakDetect, dm3StatusBattCurrentSanity=dm3StatusBattCurrentSanity, emsVibrationSensorConfigEntry=emsVibrationSensorConfigEntry, apcAnalogInputMinThresholdViolation=apcAnalogInputMinThresholdViolation, airIRmPmPWWHeatingManOpEnable=airIRmPmPWWHeatingManOpEnable, atsOutputTable=atsOutputTable, pcnsRunTimeExceededDesc=pcnsRunTimeExceededDesc, atsOutputBankLoad=atsOutputBankLoad, humidityThresholdViolationCleared1=humidityThresholdViolationCleared1, upsDiagSubSysExternalSwitchGearHardwareRev=upsDiagSubSysExternalSwitchGearHardwareRev, airFMModServIntBlwr1=airFMModServIntBlwr1, airIRmPmRuntimeDehumidification=airIRmPmRuntimeDehumidification, ePDUSensorConfigModule=ePDUSensorConfigModule, upsOutletGroupConfigLoadShedControlAutoRestart=upsOutletGroupConfigLoadShedControlAutoRestart, dm3ConfigPowerModules=dm3ConfigPowerModules, upsParallelInputVoltage=upsParallelInputVoltage, ceWarningCondition=ceWarningCondition, atsInputPhaseTable=atsInputPhaseTable, upsSleeping=upsSleeping, upsAdvBatteryEstimatedChargeTime=upsAdvBatteryEstimatedChargeTime, airIRG3CMSetpointsDeviceIndex=airIRG3CMSetpointsDeviceIndex, airFMModBlwr2HeatsinkTempF=airFMModBlwr2HeatsinkTempF, isxModularDistSubFeedLoadingPower=isxModularDistSubFeedLoadingPower, pduContactFaultCleared=pduContactFaultCleared, airPASeries=airPASeries, rARUSensorsStatusSensorNumber=rARUSensorsStatusSensorNumber, airIRRP100=airIRRP100, emsVibrationSensorStatusEntry=emsVibrationSensorStatusEntry, airIRRP500GroupConfig=airIRRP500GroupConfig, xATSSwitchBlockMap=xATSSwitchBlockMap, atsInputPhaseIndex=atsInputPhaseIndex, upsDiagnosticDisplay=upsDiagnosticDisplay, xATSTestingResultsLastResult=xATSTestingResultsLastResult, airIRSCUnitStatusSupplyAirTempMetric=airIRSCUnitStatusSupplyAirTempMetric, pcnsHumidityOutOfRangeProbe2EnableCommandFile=pcnsHumidityOutOfRangeProbe2EnableCommandFile, upsRebootStarted=upsRebootStarted, sPDUMasterStatusVMOutletCount=sPDUMasterStatusVMOutletCount, rPDULoadBankConfigTable=rPDULoadBankConfigTable, sPDUMasterStatusVMLowLoadCondition=sPDUMasterStatusVMLowLoadCondition, airIRmPmEheating2=airIRmPmEheating2, pmmOutputPowerFactorDeviation=pmmOutputPowerFactorDeviation, rPDULoadBankConfigNearOverloadThreshold=rPDULoadBankConfigNearOverloadThreshold, airFMModRHBlwr1=airFMModRHBlwr1, emConfigContactNormalState=emConfigContactNormalState, airIRG2RDT2StatusAirFlowUS=airIRG2RDT2StatusAirFlowUS, cpsSerialPortDTRdelay=cpsSerialPortDTRdelay, airIRG2GroupConfigCoolGainP=airIRG2GroupConfigCoolGainP, envHighHumidityThresholdViolation=envHighHumidityThresholdViolation, cpsSerialPortSockPoll=cpsSerialPortSockPoll, ePDUPhaseStatusEntry=ePDUPhaseStatusEntry, galaxyVSUPS60kW=galaxyVSUPS60kW, airIRG2GroupSetptsCoolSetpointUS=airIRG2GroupSetptsCoolSetpointUS, pcnsNetCommunicationLostCommandFilePath=pcnsNetCommunicationLostCommandFilePath, pcnsTempOutOfRangeProbe2Desc=pcnsTempOutOfRangeProbe2Desc, airIRmPmPump3HysteresisK=airIRmPmPump3HysteresisK, sPDUMasterControlMSPName=sPDUMasterControlMSPName, memDoorSensorStatusSensorLocation=memDoorSensorStatusSensorLocation, dm3ConfigBattAmpHour=dm3ConfigBattAmpHour, humidityThresholdViolationCleared2=humidityThresholdViolationCleared2, struxureWareOperationsStatus=struxureWareOperationsStatus, apcLocalDisplayConfigBeeperVolume=apcLocalDisplayConfigBeeperVolume, airIRSCUnitConfigAltitudeUS=airIRSCUnitConfigAltitudeUS, rPDU2OutletMeteredStatusPower=rPDU2OutletMeteredStatusPower, airFMSysCoolPIDGainP=airFMSysCoolPIDGainP, memOutputAction=memOutputAction, cpsInfoSerialPortSigCTS=cpsInfoSerialPortSigCTS, coolingUnitConfigurationStringTable=coolingUnitConfigurationStringTable, xPDUSystemOutput=xPDUSystemOutput, pcnsPowerFailedCommandFileDelay=pcnsPowerFailedCommandFileDelay, sPDUMasterConfigVMIndex=sPDUMasterConfigVMIndex, isxModularDistSysCurrentEntry=isxModularDistSysCurrentEntry, airIRmPmUnitTemperature=airIRmPmUnitTemperature, sPDUOutletConfigVMEntry=sPDUOutletConfigVMEntry, airIRRP500GroupConfigMaxFanSpeed=airIRRP500GroupConfigMaxFanSpeed, upsDiagComBusExternalMIMStatus=upsDiagComBusExternalMIMStatus, rPDU2SensorDiscreteTableSize=rPDU2SensorDiscreteTableSize, atsStatusPhaseSyncStatus=atsStatusPhaseSyncStatus, upsDiagSubSysExternalPowerFrameBoardIndex=upsDiagSubSysExternalPowerFrameBoardIndex, accessPXStatusRearDoorMaxOpenTime=accessPXStatusRearDoorMaxOpenTime, airIRG3RDUStatusEntry=airIRG3RDUStatusEntry, dm3StatusDistribution=dm3StatusDistribution, isxcStandard=isxcStandard, apcLogicPowerSupplyFaultCleared=apcLogicPowerSupplyFaultCleared, cpsSerialPortAutoOutput=cpsSerialPortAutoOutput, memInputsStatusEntry=memInputsStatusEntry, xATSGeneratorShutdownCleared=xATSGeneratorShutdownCleared, airIRmPmSensor3Failure=airIRmPmSensor3Failure, airIRG3CMStatusEPRValvePosition=airIRG3CMStatusEPRValvePosition, rPDU2OutletMeteredConfigNumber=rPDU2OutletMeteredConfigNumber, airIRG3RDU=airIRG3RDU, airIRmPmReturnAirTemperatureF=airIRmPmReturnAirTemperatureF, upsAdvInputBypassNominalVoltage=upsAdvInputBypassNominalVoltage, upsAdvBatteryNumOfBattPacks=upsAdvBatteryNumOfBattPacks, upsHighPrecBatteryHealth=upsHighPrecBatteryHealth, galaxy300UPS30kVA33=galaxy300UPS30kVA33, memFluidSensorStatusSensorName=memFluidSensorStatusSensorName, upsBasicConfigDeviceEntry=upsBasicConfigDeviceEntry, upsAdvInputLineFailCause=upsAdvInputLineFailCause, dcmim2StatusLVDEntry=dcmim2StatusLVDEntry, airIRRP500UnitConfigHumidifyEnable=airIRRP500UnitConfigHumidifyEnable, dm3StatusRectEntry=dm3StatusRectEntry, pcnsContactNormal2EnableLogging=pcnsContactNormal2EnableLogging, pcnsOS=pcnsOS, iemStatusContactNumber=iemStatusContactNumber, cpsCardIdentIndex=cpsCardIdentIndex, airIRmPmCmp1StartTempSummerK=airIRmPmCmp1StartTempSummerK, xPDUInputContactStateNormal=xPDUInputContactStateNormal, airIRmPmReheat2Failure=airIRmPmReheat2Failure, airFMSysCoolDeadbandF=airFMSysCoolDeadbandF, battManString2OhmicValueTableSize=battManString2OhmicValueTableSize, rPDU2OutletMeteredPropertiesLayout=rPDU2OutletMeteredPropertiesLayout, rPDULoadPhaseConfigLowLoadThreshold=rPDULoadPhaseConfigLowLoadThreshold, airIRRP100UnitServiceIntervalHumidifierAlarm=airIRRP100UnitServiceIntervalHumidifierAlarm, airFMStatusModuleOutputCapacity=airFMStatusModuleOutputCapacity, airIRmPmLouver1=airIRmPmLouver1, accessViolationHTTP=accessViolationHTTP, atsControl=atsControl, airIRmPmDehumidificMaxWaterTempF=airIRmPmDehumidificMaxWaterTempF, pmmSiteConfigNominalFrequency=pmmSiteConfigNominalFrequency, memDoorSensorStatusModuleIndex=memDoorSensorStatusModuleIndex, xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared, airIRSCGroupConfigNumberofCoolingUnits=airIRSCGroupConfigNumberofCoolingUnits, hardware=hardware, wirelessSensorPodStatusHighHumidityThresh=wirelessSensorPodStatusHighHumidityThresh, temporaryBypass=temporaryBypass, airFMSysSteamHotGasReheatDmd=airFMSysSteamHotGasReheatDmd, airFMAlarmSeverity=airFMAlarmSeverity, rPDU2PhaseConfigNearOverloadCurrentThreshold=rPDU2PhaseConfigNearOverloadCurrentThreshold, pmmSiteConfigEntry=pmmSiteConfigEntry, upsDiagIMIndex=upsDiagIMIndex, upsAdvConfigFrequencyConverterMode=upsAdvConfigFrequencyConverterMode, upsOutletGroupConfigLoadShedTimeOnBattery=upsOutletGroupConfigLoadShedTimeOnBattery, emsStatus=emsStatus, dm3StatusInRlyTable=dm3StatusInRlyTable, cpsSerialPortAuthSecret=cpsSerialPortAuthSecret, upsInputContactStatusTable=upsInputContactStatusTable, sPDUMasterStatusMSPOutletCount=sPDUMasterStatusMSPOutletCount, isxcCriticalAlarmCleared=isxcCriticalAlarmCleared, rPDU2PhaseStatusEntry=rPDU2PhaseStatusEntry, rPDU2SensorDiscreteStatusNumber=rPDU2SensorDiscreteStatusNumber, pmmInputVoltageLtoL=pmmInputVoltageLtoL, apcUpsConfigFieldIndex=apcUpsConfigFieldIndex, pcnsHumidityOutOfRangeProbe2ShutdownDelay=pcnsHumidityOutOfRangeProbe2ShutdownDelay, memBeaconStatusCurrentState=memBeaconStatusCurrentState, airIRRP100UnitThresholds=airIRRP100UnitThresholds, isxModularDistSubFeedInfoEntry=isxModularDistSubFeedInfoEntry, xATSSystemOutputPhaseCurrent=xATSSystemOutputPhaseCurrent, xPDUTransformerTempAlarmCleared=xPDUTransformerTempAlarmCleared, airIRmPmPWWHeatingHysteresisK=airIRmPmPWWHeatingHysteresisK, smartUPS7500=smartUPS7500, battManString1ResponseTestCurrentBenchmarkIndex=battManString1ResponseTestCurrentBenchmarkIndex, airIRmPmDrycooler2WinterStartTemp=airIRmPmDrycooler2WinterStartTemp, airIRmPmPump2ManOpRunning=airIRmPmPump2ManOpRunning, wirelessSensorPodStatusLowHumidityThresh=wirelessSensorPodStatusLowHumidityThresh, upsAdvConfigMinReturnCapacity=upsAdvConfigMinReturnCapacity, pmmBranchCircuitTotalActivePower=pmmBranchCircuitTotalActivePower, airIRRCUnitRunHoursFan4=airIRRCUnitRunHoursFan4, rPDULoadPhaseConfigTable=rPDULoadPhaseConfigTable, rPDU2DeviceConfigIndex=rPDU2DeviceConfigIndex, ats4gCalibrationOutputTableIndex=ats4gCalibrationOutputTableIndex, pcbeVersion=pcbeVersion, sPDUMasterConfigReboot=sPDUMasterConfigReboot, battManStringCalibTable=battManStringCalibTable, envSTIncTempRateViolationCleared=envSTIncTempRateViolationCleared, mtrapargsOctetString04=mtrapargsOctetString04, upsAdvTestBatteryInterval=upsAdvTestBatteryInterval, uioOutputRelayStatusCommStatus=uioOutputRelayStatusCommStatus, airFMSysHotWaterTempF=airFMSysHotWaterTempF, cpsSerialPortBanner=cpsSerialPortBanner, airFMGroupFailoverSysPrimarySensorFail=airFMGroupFailoverSysPrimarySensorFail, emsFluidSensorStatusSensorState=emsFluidSensorStatusSensorState, airIRmIdentLocation=airIRmIdentLocation, pcbeUpdateAvailable=pcbeUpdateAvailable, isxModularDistSysCurrentAlarmMinEnable=isxModularDistSysCurrentAlarmMinEnable, airIRG3CMStatusCMID=airIRG3CMStatusCMID, airIRSCGroupConfig=airIRSCGroupConfig, pmmBranchCircuitCurrent=pmmBranchCircuitCurrent, atsRMSOverVoltageCleared=atsRMSOverVoltageCleared, airIRmPmPump2ControlCycle=airIRmPmPump2ControlCycle, pcnsMinLoadCapabilityRegainedDesc=pcnsMinLoadCapabilityRegainedDesc, dcTemperatureAlarmCleared=dcTemperatureAlarmCleared, iemStatusContactName=iemStatusContactName, airIRmPmTimerStop=airIRmPmTimerStop, xATSDoorOpenAlarmCleared=xATSDoorOpenAlarmCleared, airIRmPmFan3Speed=airIRmPmFan3Speed, envAlinkCommunicationEstablished=envAlinkCommunicationEstablished, upsHighPrecOutputCurrent=upsHighPrecOutputCurrent, cpsSerialPortAccSrv2=cpsSerialPortAccSrv2, cpsInfoSerialPortNumber=cpsInfoSerialPortNumber, upsBatteryCabBlockFuseStatus=upsBatteryCabBlockFuseStatus, airFMSysAlarmMapOutputIndex=airFMSysAlarmMapOutputIndex, iemHighHumidThresholdViolation=iemHighHumidThresholdViolation, airIRSCUnitStatusCondOutletTempUS=airIRSCUnitStatusCondOutletTempUS, atsIdentModelNumber=atsIdentModelNumber)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmPump2ManOpEnable=airIRmPmPump2ManOpEnable, pmmDevice=pmmDevice, upsDiagSubSysIntBypSwitchStatus=upsDiagSubSysIntBypSwitchStatus, isxModularDistSubFeedInfoBreakerAlarmEnable=isxModularDistSubFeedInfoBreakerAlarmEnable, wirelessSensorPodConfigMinBatteryThresh=wirelessSensorPodConfigMinBatteryThresh, airIRG3RDUConfigStartupDelay=airIRG3RDUConfigStartupDelay, upsBatteryCabBlockCellReference=upsBatteryCabBlockCellReference, pcnsContactFault2Desc=pcnsContactFault2Desc, atsConfigResetValues=atsConfigResetValues, xATSSwitchStatisticsReset=xATSSwitchStatisticsReset, rPDU2SensorTempHumidityStatusTempPeakTimestamp=rPDU2SensorTempHumidityStatusTempPeakTimestamp, apcEnvMinHumidityThresholdViolationCleared=apcEnvMinHumidityThresholdViolationCleared, ais5000UPS20kVA=ais5000UPS20kVA, rPDU2SensorDiscreteStatusIndex=rPDU2SensorDiscreteStatusIndex, lowBattery=lowBattery, xPDUBypassInputUnderVoltThreshold=xPDUBypassInputUnderVoltThreshold, apcEnvLTDecTempRateViolation=apcEnvLTDecTempRateViolation, AirIRSCCapacityControlType=AirIRSCCapacityControlType, powerManagementModule=powerManagementModule, upsBatteryCabStringEntry=upsBatteryCabStringEntry, pmmDeviceServiceType=pmmDeviceServiceType, xATSGeneratorGenericEvent=xATSGeneratorGenericEvent, airIRSCUnitStatusCoolDemand=airIRSCUnitStatusCoolDemand, airIRmPmDrycooler3SummerStartTemp=airIRmPmDrycooler3SummerStartTemp, emsSensorConfigSensorAlarmDelay=emsSensorConfigSensorAlarmDelay, dm3ConfigLVDTableSize=dm3ConfigLVDTableSize, cpsSerialPortRemoteIP=cpsSerialPortRemoteIP, powerNetSoftwareOid=powerNetSoftwareOid, upsDiagSubSysbackfeedContactorType=upsDiagSubSysbackfeedContactorType, isxModularDistModuleOutputConnectorType=isxModularDistModuleOutputConnectorType, rPDU2SensorTempHumidityConfigTempMaxThreshC=rPDU2SensorTempHumidityConfigTempMaxThreshC, upsBasicOutput=upsBasicOutput, airFMModBlwrFreqSetting=airFMModBlwrFreqSetting, sPDUOutletConfigMSPgsRestartDelay=sPDUOutletConfigMSPgsRestartDelay, airIRmPmHumidifier2Failure=airIRmPmHumidifier2Failure, airIRmPmUnitWinterMode=airIRmPmUnitWinterMode, battManBatteryCalib=battManBatteryCalib, airFMModBlwr1Vlt=airFMModBlwr1Vlt, pcnsOverloadCommandFilePath=pcnsOverloadCommandFilePath, xATSGeneratorFuelSystemVeryLowFuelLevelThreshold=xATSGeneratorFuelSystemVeryLowFuelLevelThreshold, airIRmPmDrycooler1Running=airIRmPmDrycooler1Running, isxModularLowCurrentThresholdViolationCleared=isxModularLowCurrentThresholdViolationCleared, ePDUOutletStatusTable=ePDUOutletStatusTable, rPDU2PhaseToPhaseStatusEntry=rPDU2PhaseToPhaseStatusEntry, cpsSerialPortTermType=cpsSerialPortTermType, airFMSysAlarmMapExpMod2HumReplCyl=airFMSysAlarmMapExpMod2HumReplCyl, airIRmPmPWWHeatingLinearRangeK=airIRmPmPWWHeatingLinearRangeK, pmmInputActivePower=pmmInputActivePower, rARUSensorsTempShortIncRateThreshTime=rARUSensorsTempShortIncRateThreshTime, apcEnvMinTempThresholdViolation=apcEnvMinTempThresholdViolation, isxModularOutputVoltageMaxThresholdViolation=isxModularOutputVoltageMaxThresholdViolation, airIRmPmPump1ManOpEnable=airIRmPmPump1ManOpEnable, airIRmPmUnitTemperatureScale=airIRmPmUnitTemperatureScale, sPDUOutletConfigMSPgsEntry=sPDUOutletConfigMSPgsEntry, rPDU2DeviceStatusLoadState=rPDU2DeviceStatusLoadState, upsLocalDisplayButtonFault=upsLocalDisplayButtonFault, emConfigProbeHumidHysteresis=emConfigProbeHumidHysteresis, rPDUBankPhaseOverload=rPDUBankPhaseOverload, sPDUOutletControlTable=sPDUOutletControlTable, airIRG2IdentManufactureDate=airIRG2IdentManufactureDate, upsSyncCtrlGroupStatus=upsSyncCtrlGroupStatus, cpsSerialPortPppFoption=cpsSerialPortPppFoption, upsAdvBatteryChargingCurrentRestricted=upsAdvBatteryChargingCurrentRestricted, rPDULoadDevBankEntry=rPDULoadDevBankEntry, extBatteryFrameDecrease=extBatteryFrameDecrease, upsAdvStateNumberoftimesNormal=upsAdvStateNumberoftimesNormal, ePDUOutletControlCommand=ePDUOutletControlCommand, rPDU2DeviceConfigEntry=rPDU2DeviceConfigEntry, upsPhysicalLayout=upsPhysicalLayout, sPDUOutletConfigMSPmupsZone3=sPDUOutletConfigMSPmupsZone3, pcnsNmcEntry=pcnsNmcEntry, rPDU2IdentLongDescription=rPDU2IdentLongDescription, atsConfigPhaseEntry=atsConfigPhaseEntry, battManStringCurrentProbeDisconnected=battManStringCurrentProbeDisconnected, upsHasNoValidFirmwareCleared=upsHasNoValidFirmwareCleared, xPDUOutputRelayNumber=xPDUOutputRelayNumber, dm3IdentSysDescriptionText=dm3IdentSysDescriptionText, cpsSerialPortSniffAdm=cpsSerialPortSniffAdm, cpsDNSpriserv=cpsDNSpriserv, airFMSysAlarmMapOutputEntry=airFMSysAlarmMapOutputEntry, dm3ConfigOutRlyName=dm3ConfigOutRlyName, airIRG2RDType2=airIRG2RDType2, sPDUMasterPending=sPDUMasterPending, airFMStatusSystemActionTempC=airFMStatusSystemActionTempC, pcnsTempInRangeProbe2EnableLogging=pcnsTempInRangeProbe2EnableLogging, xATSOutputVoltageHighAlarmCleared=xATSOutputVoltageHighAlarmCleared, pcnsBatteryChargeInRangeCommandFilePath=pcnsBatteryChargeInRangeCommandFilePath, cpsInfoSerialPortSpeed=cpsInfoSerialPortSpeed, pmmOutputPhase=pmmOutputPhase, xATSGeneratorIdentModelNumber=xATSGeneratorIdentModelNumber, airFMGroupFailoverModHumFail=airFMGroupFailoverModHumFail, airIRG3RDUStatusOutputState=airIRG3RDUStatusOutputState, uioOutputRelayStatusTableSize=uioOutputRelayStatusTableSize, airIRG2RDT2StatusSuperheatTempMetric=airIRG2RDT2StatusSuperheatTempMetric, rPDULoadStatus=rPDULoadStatus, pcbeTest=pcbeTest, pcnsCommunicationLostOnBatteryCommandFileDelay=pcnsCommunicationLostOnBatteryCommandFileDelay, airIRG2GroupStatusMinRackInletTempUS=airIRG2GroupStatusMinRackInletTempUS, airIRRP500GroupSetpointsDehumidify=airIRRP500GroupSetpointsDehumidify, upsDiagSubFeedBreakerEntry=upsDiagSubFeedBreakerEntry, upsDiagSwitchgearAmbientTemperature=upsDiagSwitchgearAmbientTemperature, ePDUDeviceStatusFrequency=ePDUDeviceStatusFrequency, airIRG2GroupStatusMaxRackInletTempUS=airIRG2GroupStatusMaxRackInletTempUS, xPDUIdentFirmwareAppRev=xPDUIdentFirmwareAppRev, airIRmPmPump1LinearRangeF=airIRmPmPump1LinearRangeF, airIRRP100GroupSetpointsHumidify=airIRRP100GroupSetpointsHumidify, airFMGroupLoadShareCoolRequests=airFMGroupLoadShareCoolRequests, eps7000SSC=eps7000SSC, airFMGroupLoadShareHumThresh=airFMGroupLoadShareHumThresh, airFMSysAlarmMapInputEntry=airFMSysAlarmMapInputEntry, abnormalCondition=abnormalCondition, smartUPS5000DSP=smartUPS5000DSP, xATSSystemOutputAlarmDelayThreshold=xATSSystemOutputAlarmDelayThreshold, pmmInputAverageCurrent=pmmInputAverageCurrent, emConfigProbeLowTempEnable=emConfigProbeLowTempEnable, wirelessSensorPodConfigMaxTempThresh=wirelessSensorPodConfigMaxTempThresh, emsStatusAlinkAruDeviceCount=emsStatusAlinkAruDeviceCount, airFMSysInputAlarmAction=airFMSysInputAlarmAction, pmmInputTable=pmmInputTable, galaxy5000UPS60KVA=galaxy5000UPS60KVA, sPDUIdentDateOfManufacture=sPDUIdentDateOfManufacture, upsIntegratedATSPreferredSource=upsIntegratedATSPreferredSource, upsOpStatsReset=upsOpStatsReset, upsDiagSubSysFrameManufactureDate=upsDiagSubSysFrameManufactureDate, dcmim2ConfigLVDState=dcmim2ConfigLVDState, contactFaultResolved=contactFaultResolved, xPDUDeviceTransformerPresent=xPDUDeviceTransformerPresent, pmmBranchCircuitEnergyUsage=pmmBranchCircuitEnergyUsage, airIRG3CMRunHoursCMID=airIRG3CMRunHoursCMID, xATSGeneratorSettingsStartDelay=xATSGeneratorSettingsStartDelay, galaxyPXUPS60kW=galaxyPXUPS60kW, memSensorsConfigSensorNumber=memSensorsConfigSensorNumber, rPDU2SensorTempHumidityStatusTempF=rPDU2SensorTempHumidityStatusTempF, wirelessSensorPodStatusCommStatus=wirelessSensorPodStatusCommStatus, rPDU2DeviceStatusEnergyStartTime=rPDU2DeviceStatusEnergyStartTime, airIRRP500UnitServiceIntervalFans=airIRRP500UnitServiceIntervalFans, sPDUOutletControlEntry=sPDUOutletControlEntry, battManACCurrentZeroCalib=battManACCurrentZeroCalib, battManString2BatteryLowestVoltage=battManString2BatteryLowestVoltage, pmmSiteConfigServiceType=pmmSiteConfigServiceType, galaxyVXUPS800kVA=galaxyVXUPS800kVA, xPDUUPSInputVoltagePhaseTableSize=xPDUUPSInputVoltagePhaseTableSize, rPDUOutletControlIndex=rPDUOutletControlIndex, uioSensorConfigLowHumidityThreshold=uioSensorConfigLowHumidityThreshold, cpsSerialPortDBsyslog=cpsSerialPortDBsyslog, airIRmPmWinterModeHysteresis=airIRmPmWinterModeHysteresis, cpsAP930xSys=cpsAP930xSys, symmetra3PhaseUPS40kVA=symmetra3PhaseUPS40kVA, apcOutputRelayFaultCleared=apcOutputRelayFaultCleared, airIRRP100UnitThresholdsReturnAirHighTempMetric=airIRRP100UnitThresholdsReturnAirHighTempMetric, memDoorSensorStatusSensorSeverity=memDoorSensorStatusSensorSeverity, ePDUPhaseStatusEnergy=ePDUPhaseStatusEnergy, symmetraPx48kVA=symmetraPx48kVA, dcmim2StatusSysLoadCurrent=dcmim2StatusSysLoadCurrent, emsProbeStatusProbeName=emsProbeStatusProbeName, airFMSysAlarmMapMainModHighSupplyTemp=airFMSysAlarmMapMainModHighSupplyTemp, airIRmPmFan3ManOpRunning=airIRmPmFan3ManOpRunning, rPDU2IdentBootMonitorRev=rPDU2IdentBootMonitorRev, airFMGroupSysRolesEntry=airFMGroupSysRolesEntry, airIRG2RDT2StatusEvaporatorFanSpeed=airIRG2RDT2StatusEvaporatorFanSpeed, memOutputStatusAlarmState=memOutputStatusAlarmState, airFMModBlwr2Current=airFMModBlwr2Current, airFMSysHumAlarmDelay=airFMSysHumAlarmDelay, accessPXIdentDateOfManufacture=accessPXIdentDateOfManufacture, upsAdvStateTotaltimeonbattery=upsAdvStateTotaltimeonbattery, upsDiagSubSysExternalSwitchGearTemperature=upsDiagSubSysExternalSwitchGearTemperature, airIRRP100UnitConfigHumidifierControl=airIRRP100UnitConfigHumidifierControl, uioSensorConfigHighTemperatureThreshold=uioSensorConfigHighTemperatureThreshold, pcnsBatteryDischargedCommandFileDelay=pcnsBatteryDischargedCommandFileDelay, airIRmPmCmp2StartTempWinterF=airIRmPmCmp2StartTempWinterF, airIRG2RDT2RunHoursCompressor=airIRG2RDT2RunHoursCompressor, ePDUDeviceControlIndex=ePDUDeviceControlIndex, communicationEstablished=communicationEstablished, battManUnitStatusTableSize=battManUnitStatusTableSize, airIRRP500UnitConfigCoolCapacity=airIRRP500UnitConfigCoolCapacity, pcnsRunTimeWithinRangeDesc=pcnsRunTimeWithinRangeDesc, upsDiagUnitControllerIndex=upsDiagUnitControllerIndex, emsSensorControlSensorCommand=emsSensorControlSensorCommand, airIRmPmNumberOfPumps=airIRmPmNumberOfPumps, serialPort2Control=serialPort2Control, emIdent=emIdent, airIRRP100UnitStatus=airIRRP100UnitStatus, airFMModStmElectHumMode=airFMModStmElectHumMode, upsFirmwareUpdateFailed=upsFirmwareUpdateFailed, uioInputContactConfigEntry=uioInputContactConfigEntry, xATSGeneratorLowACVEventCleared=xATSGeneratorLowACVEventCleared, dcmim2ConfigLVDReset=dcmim2ConfigLVDReset, upsHighPrecBatteryCurrentTableIndex=upsHighPrecBatteryCurrentTableIndex, airIRG3RDUStatusDCPowerSupply2Current=airIRG3RDUStatusDCPowerSupply2Current, rPDU2SensorTempHumidityStatusCommStatus=rPDU2SensorTempHumidityStatusCommStatus, apcTransformerDCImbalanceFaultCleared=apcTransformerDCImbalanceFaultCleared, airIRG3RDUStatusOnReadyStandby=airIRG3RDUStatusOnReadyStandby, atsCalibrationInputTableIndex=atsCalibrationInputTableIndex, airIRG3GroupStatusMinReturnAirTempMetric=airIRG3GroupStatusMinReturnAirTempMetric, pcnsMaxInternalTempExceeded=pcnsMaxInternalTempExceeded, atsInputMinPower=atsInputMinPower, pmmOutputMeterIndex=pmmOutputMeterIndex, upsDiagBatteryTableSize=upsDiagBatteryTableSize, wirelessSensorConfigHighTempThresh=wirelessSensorConfigHighTempThresh, battManString2BatteryThermalRunaway=battManString2BatteryThermalRunaway, airFMModBlwr2DCLinkVlt=airFMModBlwr2DCLinkVlt, upsOpStatsTimeInECOnversionOperation=upsOpStatsTimeInECOnversionOperation, iemConfigContactSeverity=iemConfigContactSeverity, memModulesStatusTableSize=memModulesStatusTableSize, coolingUnitConfigurationStringValue=coolingUnitConfigurationStringValue, pmmInputLowVoltThreshold=pmmInputLowVoltThreshold, apcLocalDisplayConfigAlarmBeeper=apcLocalDisplayConfigAlarmBeeper, apcDoorLostComms=apcDoorLostComms, airIRG3RDUConfigDeviceIndex=airIRG3RDUConfigDeviceIndex, noOverloadOnBypassStaticSwitch=noOverloadOnBypassStaticSwitch, rARUSensorsConfigSensorNumber=rARUSensorsConfigSensorNumber, powerNetSoftwareConfig=powerNetSoftwareConfig, airIRmPmHumidifier2Runtime=airIRmPmHumidifier2Runtime, dm3StatusSysRectVoltSanity=dm3StatusSysRectVoltSanity, upsDCOutputStatusTable=upsDCOutputStatusTable, wirelessSensorPodConfigLowBatteryThresh=wirelessSensorPodConfigLowBatteryThresh, upsDiagSubSysBattMonitorHardwareRev=upsDiagSubSysBattMonitorHardwareRev, rARUSensorsConfigEntry=rARUSensorsConfigEntry, battManString2BatteryTable=battManString2BatteryTable, airIRG3AlarmsTableSize=airIRG3AlarmsTableSize, rARUFanStatusFanInServiceDate=rARUFanStatusFanInServiceDate, emsFluidSensorStatusSensorLocation=emsFluidSensorStatusSensorLocation, airFMGroupFailoverModHumReplaceCylinder=airFMGroupFailoverModHumReplaceCylinder, rPDUOverloadCleared=rPDUOverloadCleared, rPDUOutletConfigMonitoredEntry=rPDUOutletConfigMonitoredEntry, airFMSysCoolState=airFMSysCoolState, xATSGeneratorOutputPower=xATSGeneratorOutputPower, airIRRP100UnitIdentModelNumber=airIRRP100UnitIdentModelNumber, upsBatteryCabinetAverageTemperature=upsBatteryCabinetAverageTemperature, upsAdvBatteryNumOfBadBattPacks=upsAdvBatteryNumOfBadBattPacks, rPDU2OutletSwitchedPropertiesName=rPDU2OutletSwitchedPropertiesName, battManIdent=battManIdent, upsAdvTest=upsAdvTest, dcmim2Config=dcmim2Config, airIRG3CMStatusLiquidInletPressureUS=airIRG3CMStatusLiquidInletPressureUS, cpsEthIPmask=cpsEthIPmask, pmmSiteConfigNominalCurrent=pmmSiteConfigNominalCurrent, upsAdvConfigWarningAlarmDelay=upsAdvConfigWarningAlarmDelay, airIRG3GroupConfigNumberofCoolingUnits=airIRG3GroupConfigNumberofCoolingUnits, airIRmPmSensor14Defect=airIRmPmSensor14Defect, pcnsEnvironmentCommunicationLostCommandFileDelay=pcnsEnvironmentCommunicationLostCommandFileDelay, upsOutletGroupControlCommand=upsOutletGroupControlCommand, upsDiagSubSysXRCommunicationCardStatus=upsDiagSubSysXRCommunicationCardStatus, dm3ConfigFusesName=dm3ConfigFusesName, upsDiagIMTable=upsDiagIMTable, airIRG3GroupStatusAvgAirFlowMetric=airIRG3GroupStatusAvgAirFlowMetric, pcnsCommunicationLostOnBatteryEnableLogging=pcnsCommunicationLostOnBatteryEnableLogging, airFMModRHHumReset=airFMModRHHumReset, pduInputTransformerOverTemperatureCleared=pduInputTransformerOverTemperatureCleared, upsDiagSubSysIntBypSwitchFirmwareRev=upsDiagSubSysIntBypSwitchFirmwareRev, wirelessSensorStatusName=wirelessSensorStatusName, airIRSCGroupSetptsCoolDeadbandMetric=airIRSCGroupSetptsCoolDeadbandMetric, xATSGeneratorControlSwitchNotAutoCleared=xATSGeneratorControlSwitchNotAutoCleared, emsOutletConfigEntry=emsOutletConfigEntry)
mibBuilder.exportSymbols("PowerNet-MIB", emsProbeConfigProbeDeltaHumidity=emsProbeConfigProbeDeltaHumidity, emsSmokeSensorConfigSensorLocation=emsSmokeSensorConfigSensorLocation, AirIRmAlarmState=AirIRmAlarmState, iemConfigRelaysEntry=iemConfigRelaysEntry, airIRRP500GroupSetpoints=airIRRP500GroupSetpoints, xATSGeneratorFuelSystemTankSize=xATSGeneratorFuelSystemTankSize, bmBatManEnvironmentAlarm=bmBatManEnvironmentAlarm, airIRmPmUnitCondensationTemperature1C=airIRmPmUnitCondensationTemperature1C, ePDUDeviceStatusReactivePower=ePDUDeviceStatusReactivePower, xATSSwitchSettingsHighVoltageTransferPoint=xATSSwitchSettingsHighVoltageTransferPoint, iemStatusProbeCurrentTemp=iemStatusProbeCurrentTemp, rpduWarningConditionCleared=rpduWarningConditionCleared, rPDU2Phase=rPDU2Phase, upsOutputRelayState=upsOutputRelayState, airIRmPmDrycooler3HysteresisF=airIRmPmDrycooler3HysteresisF, airFMModServIntBlwr2Reset=airFMModServIntBlwr2Reset, isxModularSubfeedMaxCurrentThresholdViolationCleared=isxModularSubfeedMaxCurrentThresholdViolationCleared, airIRRP500UnitServiceIntervalHumidifierAlarm=airIRRP500UnitServiceIntervalHumidifierAlarm, sPDUOutletStatusMSPOutletName=sPDUOutletStatusMSPOutletName, upsAdvConfigAllowedSetEntry=upsAdvConfigAllowedSetEntry, xATSTestingStatusTestStatus=xATSTestingStatusTestStatus, dm3StatusLVD=dm3StatusLVD, pmmBranchCircuitLowCurrentThreshold=pmmBranchCircuitLowCurrentThreshold, pcnsParallelRedundancyRegainedCommandFilePath=pcnsParallelRedundancyRegainedCommandFilePath, pcnsBypassContactorFailedCommandFileDelay=pcnsBypassContactorFailedCommandFileDelay, upsDiagPMEstmtdLifetimeRmng=upsDiagPMEstmtdLifetimeRmng, isxModularDistSysOutputVoltageAlarmMaxEnable=isxModularDistSysOutputVoltageAlarmMaxEnable, dm3StatusSysConvAvailable=dm3StatusSysConvAvailable, iemConfigProbeMaxHumidThreshold=iemConfigProbeMaxHumidThreshold, airFMEventCode=airFMEventCode, airIRmPmDrycooler1Failure=airIRmPmDrycooler1Failure, airIRSCGroupStatusMinReturnAirTempUS=airIRSCGroupStatusMinReturnAirTempUS, airIRG3GroupStatusMaxRackInletTempUS=airIRG3GroupStatusMaxRackInletTempUS, upsBatteryCabBlockType=upsBatteryCabBlockType, isxModularDistSysVoltageTable=isxModularDistSysVoltageTable, dischargeCleared=dischargeCleared, masterSwitchePDU=masterSwitchePDU, iemConfigProbeMinTempEnable=iemConfigProbeMinTempEnable, airFMSysAlarmMapExpMod1HighSupplyTemp=airFMSysAlarmMapExpMod1HighSupplyTemp, upsAdvStateSmartUPSSpecificFaults=upsAdvStateSmartUPSSpecificFaults, xPDUOutputCurrentLowAlarmCleared=xPDUOutputCurrentLowAlarmCleared, airIRRCUnitStatusFluidFlowUS=airIRRCUnitStatusFluidFlowUS, rPDUOutletControlEntry=rPDUOutletControlEntry, airFMModFilterDiffPresInWC=airFMModFilterDiffPresInWC, upsAdvConfig=upsAdvConfig, pcnsFaultBypassEnabledCommandFilePath=pcnsFaultBypassEnabledCommandFilePath, uioSensorConfigPortID=uioSensorConfigPortID, memSensorsTempShortDecRateThreshValue=memSensorsTempShortDecRateThreshValue, sPDUOutletConfigMSPallName=sPDUOutletConfigMSPallName, dm3ConfigBattLowTempThresh=dm3ConfigBattLowTempThresh, airIRG3CMStatusOperatingMode=airIRG3CMStatusOperatingMode, airIRG3RDUThresholdsDeviceIndex=airIRG3RDUThresholdsDeviceIndex, coolingUnitConfigurationAnalogMaximum=coolingUnitConfigurationAnalogMaximum, isxcVirtual=isxcVirtual, iemStatusRelayStatus=iemStatusRelayStatus, upsAdvOutputNominalFrequency=upsAdvOutputNominalFrequency, pcnsParallelRedundancyLostEnableCommandFile=pcnsParallelRedundancyLostEnableCommandFile, upsAdvConfigDipSwitchTable=upsAdvConfigDipSwitchTable, upsOutletGroupControlTableSize=upsOutletGroupControlTableSize, airIRmPmFan2Speed=airIRmPmFan2Speed, airFMSysOutputStatus=airFMSysOutputStatus, airIRmPmNumberOfCompressors=airIRmPmNumberOfCompressors, atsCalibrationOutputTable=atsCalibrationOutputTable, airFMSysNumRemoteSensors=airFMSysNumRemoteSensors, pmmOutputPhaseEntry=pmmOutputPhaseEntry, airIRRCUnitServiceIntervals=airIRRCUnitServiceIntervals, dm3ConfigInRlyAlarm=dm3ConfigInRlyAlarm, airIRRCUnitConfigOutputNormalState=airIRRCUnitConfigOutputNormalState, airFMSysAlarmMapSysSupplySensFail=airFMSysAlarmMapSysSupplySensFail, gutorWEW=gutorWEW, pmmBranchCircuitBreakerTHD=pmmBranchCircuitBreakerTHD, mconfig=mconfig, ePDUWarningCondition=ePDUWarningCondition, airIRRP500UnitThresholdsSupplyAirHighTempMetric=airIRRP500UnitThresholdsSupplyAirHighTempMetric, msvmLowLoad=msvmLowLoad, dm3StatusLVDIndex=dm3StatusLVDIndex, airIRG3GroupStatusAvgAirFlowUS=airIRG3GroupStatusAvgAirFlowUS, sPDUIdentNameVM=sPDUIdentNameVM, ePDUSensorConfigEntry=ePDUSensorConfigEntry, memDoorSensorConfigSensorLocation=memDoorSensorConfigSensorLocation, emsSmokeSensorStatusSensorIndex=emsSmokeSensorStatusSensorIndex, xATSSwitchTransferEvent=xATSSwitchTransferEvent, airIRRCUnitStatusRackInletTempUS=airIRRCUnitStatusRackInletTempUS, coolingUnitExtendedAnalogDescription=coolingUnitExtendedAnalogDescription, wirelessSensorConfigLowBatteryThresh=wirelessSensorConfigLowBatteryThresh, xATSSwitchBlockMapStatus=xATSSwitchBlockMapStatus, memModulesStatusTable=memModulesStatusTable, upsDiagSubSysSystemPowerSupplyHardwareRev=upsDiagSubSysSystemPowerSupplyHardwareRev, isxModularOutputVoltageMinThresholdViolation=isxModularOutputVoltageMinThresholdViolation, xATSTesting=xATSTesting, airFMModBlwr1TableSize=airFMModBlwr1TableSize, airIRmPmCommon1=airIRmPmCommon1, dcmim2StatusBattCurrent=dcmim2StatusBattCurrent, airIRmPmSensor21Failure=airIRmPmSensor21Failure, airFMModBlwr2FanPower=airFMModBlwr2FanPower, pcnsBypassEnabledShutdownDelay=pcnsBypassEnabledShutdownDelay, pmmBranchBreakerTableSize=pmmBranchBreakerTableSize, xPDUDeviceEarthGroundMonitorPresent=xPDUDeviceEarthGroundMonitorPresent, airIRG2GroupStatusMaxReturnAirTempUS=airIRG2GroupStatusMaxReturnAirTempUS, atsCalibrationPowerSupplyVoltageTable=atsCalibrationPowerSupplyVoltageTable, xATSGeneratorService=xATSGeneratorService, airIRSCUnitConfigAltitudeMetric=airIRSCUnitConfigAltitudeMetric, airIRmPmWaterTemperatureF=airIRmPmWaterTemperatureF, upsDiagUsrSuppSwitchgearMonitorFirmwareRev=upsDiagUsrSuppSwitchgearMonitorFirmwareRev, emsSmokeSensorStatusSensorState=emsSmokeSensorStatusSensorState, pcnsMinRedundancyRegainedCommandFileDelay=pcnsMinRedundancyRegainedCommandFileDelay, airIRmPmMaxLimitWaterTemperatureF=airIRmPmMaxLimitWaterTemperatureF, airIRRP500GroupSetpointsCoolUS=airIRRP500GroupSetpointsCoolUS, rPDU2BankPropertiesModule=rPDU2BankPropertiesModule, pmmBranchCircuitBreakerState=pmmBranchCircuitBreakerState, upsEnergyEfficiencyStatsTimeInECOmode=upsEnergyEfficiencyStatsTimeInECOmode, cpsSerialPortEntry=cpsSerialPortEntry, upsAdvTestDiagnosticDay=upsAdvTestDiagnosticDay, upsParallelInputPhaseTable=upsParallelInputPhaseTable, airIRmPmCompressor2LowPressure=airIRmPmCompressor2LowPressure, pcnsBypassContactorFailedShutdownDelay=pcnsBypassContactorFailedShutdownDelay, airIRRP500UnitConfigPowerSourceConfig=airIRRP500UnitConfigPowerSourceConfig, envLowTempThresholdViolation=envLowTempThresholdViolation, pcnsContactFault2EnableCommandFile=pcnsContactFault2EnableCommandFile, upsPhaseOutputPhaseTable=upsPhaseOutputPhaseTable, xATSOutputFrequencyAlarmCleared=xATSOutputFrequencyAlarmCleared, airIRmPmPump1Runtime=airIRmPmPump1Runtime, airFMAlarmTime=airFMAlarmTime, airFMSysAlarmMapInput3=airFMSysAlarmMapInput3, environmentalMgtSystem=environmentalMgtSystem, uioOutputRelayConfigRelayLocation=uioOutputRelayConfigRelayLocation, xATSGeneratorLowACVEvent=xATSGeneratorLowACVEvent, dm3StatusSysConvCurrent=dm3StatusSysConvCurrent, upsPhaseInput=upsPhaseInput, xPDUSystemOutputPowerFactor=xPDUSystemOutputPowerFactor, xATSStartFailure=xATSStartFailure, airFMStatusSystemRemoteAvgTempC=airFMStatusSystemRemoteAvgTempC, mUpsEnvironAmbientTemperature=mUpsEnvironAmbientTemperature, emsSensorConnected=emsSensorConnected, airIRG3RDUStatusTotalDCPowerSupplyCurrent=airIRG3RDUStatusTotalDCPowerSupplyCurrent, airIRRCUnitStatusCoolOutput=airIRRCUnitStatusCoolOutput, isxModularDistModuleOutputThresholdHigh=isxModularDistModuleOutputThresholdHigh, upsPhaseInputMaxCurrent=upsPhaseInputMaxCurrent, airIRmPmAuxiliaryAlarm10=airIRmPmAuxiliaryAlarm10, rPDU2SensorDiscreteConfigNumber=rPDU2SensorDiscreteConfigNumber, memInputAbnormalSeverity=memInputAbnormalSeverity, upsDiagSubSysSystemPowerSupplySerialNum=upsDiagSubSysSystemPowerSupplySerialNum, xATSSwitchTimersEntry=xATSSwitchTimersEntry, upsOverloadCleared=upsOverloadCleared, pduCircuitPanelNeutralOvercurrent=pduCircuitPanelNeutralOvercurrent, pcnsBatteryDischargedShutdownDelay=pcnsBatteryDischargedShutdownDelay, uioInputContactStatusContactID=uioInputContactStatusContactID, pmmBranchcircuitApparentPowerMinAlarm=pmmBranchcircuitApparentPowerMinAlarm, emsProbeStatusProbeLowTempThresh=emsProbeStatusProbeLowTempThresh, iemConfigProbeMinHumidThreshold=iemConfigProbeMinHumidThreshold, airFMSysCompRotPeriod=airFMSysCompRotPeriod, rPDU2DevicePropertiesNumOutlets=rPDU2DevicePropertiesNumOutlets, airIRRP100Series=airIRRP100Series, galaxyVMUPS100kVA=galaxyVMUPS100kVA, memModulesConfigTableSize=memModulesConfigTableSize, isxModularDistSysVoltageAlarmStatus=isxModularDistSysVoltageAlarmStatus, upsHighPrecTotalDCFrameCurrent=upsHighPrecTotalDCFrameCurrent, pduAtypicalBypassMode=pduAtypicalBypassMode, xPDUSystemOutputVoltageLtoN=xPDUSystemOutputVoltageLtoN, memSmokeSensorCommStatus=memSmokeSensorCommStatus, airIRmPmReturnAirTemperatureC=airIRmPmReturnAirTemperatureC, xATSGeneratorServiceRunHoursUntilServiceDate=xATSGeneratorServiceRunHoursUntilServiceDate, battManString1ResponseTestCurrentTableSize=battManString1ResponseTestCurrentTableSize, coolingUnitExtendedStringDescription=coolingUnitExtendedStringDescription, upsTurnedOff=upsTurnedOff, airIRmPmBusAddress=airIRmPmBusAddress, sPDUMasterStatusVMEntry=sPDUMasterStatusVMEntry, emsFluidSensorConfigTable=emsFluidSensorConfigTable, airFMSysSteamHumDmd=airFMSysSteamHumDmd, airIRmPmEEV2StepperMotorError=airIRmPmEEV2StepperMotorError, xPDUUPSInputVoltagePhaseTable=xPDUUPSInputVoltagePhaseTable, apcDeviceClearUserConfigs=apcDeviceClearUserConfigs, pcnsHumidityOutOfRangeProbe2EnableShutdown=pcnsHumidityOutOfRangeProbe2EnableShutdown, emsProbeConfigProbeMinVoltThresh=emsProbeConfigProbeMinVoltThresh, airIRG2RDT2StatusOutputState=airIRG2RDT2StatusOutputState, battManConfigBatteryAHCapacity=battManConfigBatteryAHCapacity, pduGroundOvercurrent=pduGroundOvercurrent, airFMModCoolTableSize=airFMModCoolTableSize, iemStatusProbeMaxTempViolation=iemStatusProbeMaxTempViolation, upsInverterFault=upsInverterFault, airEconomizer=airEconomizer, atsStatusSourceAStatus=atsStatusSourceAStatus, cpsSerialPortSockTx=cpsSerialPortSockTx, upsPhaseNumOutputPhases=upsPhaseNumOutputPhases, emStatusContactNumber=emStatusContactNumber, rARUConfigAruTempOvrdEnableDisable=rARUConfigAruTempOvrdEnableDisable, upsDiagPMEnclDoorFltrTable=upsDiagPMEnclDoorFltrTable, xATSSource1Index=xATSSource1Index, xPDUBranchBreakerTableSize=xPDUBranchBreakerTableSize, cpsSerialLockDir=cpsSerialLockDir, isxModularDistSubFeedInfoThresholdMax=isxModularDistSubFeedInfoThresholdMax, upsAdvConfigDeepDischargeProtection=upsAdvConfigDeepDischargeProtection, upsDiagSubSysXRCommunicationCardFirmwareRev=upsDiagSubSysXRCommunicationCardFirmwareRev, serialPort1=serialPort1, airFMSysActualElectricReheat=airFMSysActualElectricReheat, airFMGroupSysRolesTable=airFMGroupSysRolesTable, airFMSysAlarmMapMainModLowAirFlow=airFMSysAlarmMapMainModLowAirFlow, airIRmPmEheating2HysteresisF=airIRmPmEheating2HysteresisF, iemConfigProbeHighHumidEnable=iemConfigProbeHighHumidEnable, battManString2ResponseTestChangeIndex=battManString2ResponseTestChangeIndex, airIRSCUnitStatusAirFlowMetric=airIRSCUnitStatusAirFlowMetric, pcnsRunTimeWithinRangeEnableCommandFile=pcnsRunTimeWithinRangeEnableCommandFile, xATSGeneratorOverload=xATSGeneratorOverload, pcnsHttpsPort=pcnsHttpsPort, upsHighPrecBatteryPackTableSize=upsHighPrecBatteryPackTableSize, airFMModStatus=airFMModStatus, dcmim2ConfigBattFunctTestDuration=dcmim2ConfigBattFunctTestDuration, emsCommunicationEstablished=emsCommunicationEstablished, rPDU2IdentIndex=rPDU2IdentIndex, switchgearBreakerName=switchgearBreakerName, airIRRP500GroupSetpointsCoolMetric=airIRRP500GroupSetpointsCoolMetric, infraStruXureATS=infraStruXureATS, isxModularDistSubFeedLoadingPhaseIndex=isxModularDistSubFeedLoadingPhaseIndex, dm3StatusRectIndex=dm3StatusRectIndex, airFMModServIntResetTableSize=airFMModServIntResetTableSize, coolingUnitTableIndex=coolingUnitTableIndex, memOutputNormalState=memOutputNormalState, dm3Ident=dm3Ident, wirelessSensorConfigMaxTempThresh=wirelessSensorConfigMaxTempThresh, rpduInformationalCondition=rpduInformationalCondition, airIRG3GroupConfigRuntimeBalancingEnable=airIRG3GroupConfigRuntimeBalancingEnable, airIRRP500UnitStatusHumidifierCurrent=airIRRP500UnitStatusHumidifierCurrent, airFMModCapacityCtrl=airFMModCapacityCtrl, upsDiagBatteryStatus=upsDiagBatteryStatus, upsDiagSubSysNetworkComCardSerialNumber=upsDiagSubSysNetworkComCardSerialNumber, atsIdentFirmwareDate=atsIdentFirmwareDate, xPDUNumOfBranchBreakers=xPDUNumOfBranchBreakers, airFMModRunHours=airFMModRunHours, aruFanPoorPerformanceAlarmCleared=aruFanPoorPerformanceAlarmCleared, isxcFailureAlarm=isxcFailureAlarm, xPDUCoolingFanStatus=xPDUCoolingFanStatus, upsDiagSubSysBattMonitorSerialNum=upsDiagSubSysBattMonitorSerialNum, airIRRP100GroupStatusMaxRackInletTempMetric=airIRRP100GroupStatusMaxRackInletTempMetric, airIRmPmMinLimitReturnAirTemperatureF=airIRmPmMinLimitReturnAirTemperatureF, isxModularDistModuleInfoSerialNumber=isxModularDistModuleInfoSerialNumber, airFMSysAlarmMapOutputTableSize=airFMSysAlarmMapOutputTableSize, airFMSysHumCtrlSetting=airFMSysHumCtrlSetting, battManInputContactTableSize=battManInputContactTableSize, rARUStatusAruTotalAirflow=rARUStatusAruTotalAirflow, airFMSysResetRunHours=airFMSysResetRunHours, airIRRCUnitIdentLocation=airIRRCUnitIdentLocation, emsOutputRelayControlTable=emsOutputRelayControlTable, upsOverload=upsOverload, airIRG2GroupStatus=airIRG2GroupStatus, airFMSysAlarmMapMainModWaterDetected=airFMSysAlarmMapMainModWaterDetected, dcmim2ConfigLVDIndex=dcmim2ConfigLVDIndex, airIRRP100GroupConfig=airIRRP100GroupConfig, upsHighPrecBatteryVoltage=upsHighPrecBatteryVoltage, upsPfcInputRelayFailure=upsPfcInputRelayFailure, memVibrationSensorStatusTableSize=memVibrationSensorStatusTableSize, apcAnalogInputHighThresholdViolationCleared=apcAnalogInputHighThresholdViolationCleared, upsAdvIdentHardwareRevision=upsAdvIdentHardwareRevision, upsParallelTotalOutputPower=upsParallelTotalOutputPower, xATSSystemOutputFrequency=xATSSystemOutputFrequency)
mibBuilder.exportSymbols("PowerNet-MIB", pmmBranchCircuitTotalApparentPower=pmmBranchCircuitTotalApparentPower, forcedBypassSwitchReleased=forcedBypassSwitchReleased, rARUStatusAruManualSetpoint=rARUStatusAruManualSetpoint, rPDU2OutletMeteredConfigIndex=rPDU2OutletMeteredConfigIndex, pcnsNMCComsLostResolved=pcnsNMCComsLostResolved, rARUSensorsTempLowThresh=rARUSensorsTempLowThresh, upsBatteryCabBlockTable=upsBatteryCabBlockTable, airFMStatusModuleReturnTempC=airFMStatusModuleReturnTempC, dcMajorAlarm=dcMajorAlarm, emsDoorSensorStatusTableSize=emsDoorSensorStatusTableSize, pcnsBypassContactorFailedEnableShutdown=pcnsBypassContactorFailedEnableShutdown, airIRG3GroupStatusCoolDemand=airIRG3GroupStatusCoolDemand, apcLocalDisplayConfig=apcLocalDisplayConfig, upsPhaseInputMaxVoltage=upsPhaseInputMaxVoltage, rPDU2DeviceStatusPeakPower=rPDU2DeviceStatusPeakPower, pcnsOverloadSolvedDesc=pcnsOverloadSolvedDesc, xPDUBranchCurrentHighAlarmCleared=xPDUBranchCurrentHighAlarmCleared, airIRSCGroupSetpointsActiveFlowControlBias=airIRSCGroupSetpointsActiveFlowControlBias, apcEnvLowHumidityThresholdViolationCleared=apcEnvLowHumidityThresholdViolationCleared, rPDU2OutletSwitchedConfigPowerOffTime=rPDU2OutletSwitchedConfigPowerOffTime, xPDUBypassInput=xPDUBypassInput, airIRmPmDehumidificMaxWaterTemp=airIRmPmDehumidificMaxWaterTemp, airIRRP500UnitConfigReheatEnable=airIRRP500UnitConfigReheatEnable, rPDU2BankPropertiesTable=rPDU2BankPropertiesTable, airFMSysAlarmMapSys=airFMSysAlarmMapSys, smartRelayFault=smartRelayFault, cpsSerialPortSniffMsess=cpsSerialPortSniffMsess, airIRRP100UnitStatusCompressorDrivePower=airIRRP100UnitStatusCompressorDrivePower, isxModularOutputVoltageMaxThresholdViolationCleared=isxModularOutputVoltageMaxThresholdViolationCleared, airIRmPmSensor18Failure=airIRmPmSensor18Failure, sPDUOutletConfigMSPgsPowerOnDelay=sPDUOutletConfigMSPgsPowerOnDelay, sPDUOutletConfigMSPannunOutletName=sPDUOutletConfigMSPannunOutletName, airIRG3RDUConfigEntry=airIRG3RDUConfigEntry, upsAdvBatteryActualVoltageTableIndex=upsAdvBatteryActualVoltageTableIndex, atsInputPower=atsInputPower, isxModularDistSysCurrentThresholdHigh=isxModularDistSysCurrentThresholdHigh, rARUStatusAruName=rARUStatusAruName, restartAgent=restartAgent, memOutletAction=memOutletAction, upsIntegratedATSLineStabilityDelay=upsIntegratedATSLineStabilityDelay, sPDUOutletConfigMSPallOutletCtrlMode=sPDUOutletConfigMSPallOutletCtrlMode, airIRSCUnitStatus=airIRSCUnitStatus, xPDUBreakerPositionAlarmCleared=xPDUBreakerPositionAlarmCleared, airIRmPmHumidifier1Running=airIRmPmHumidifier1Running, masterswitch=masterswitch, pmm400kVA=pmm400kVA, memDoorSensorStatusSensorName=memDoorSensorStatusSensorName, emsStatusEMSName=emsStatusEMSName, airIRRP500UnitConfigOutputSource=airIRRP500UnitConfigOutputSource, upsHighPrecBatteryCartridgeIndex=upsHighPrecBatteryCartridgeIndex, airIRRP500UnitRunHoursFan2=airIRRP500UnitRunHoursFan2, upsInputContactState=upsInputContactState, battManConfig=battManConfig, atsConfigLineVRMSNarrowLimit=atsConfigLineVRMSNarrowLimit, airIRRP500UnitStatusCoolDemand=airIRRP500UnitStatusCoolDemand, rPDU2DevicePropertiesDevicePowerRating=rPDU2DevicePropertiesDevicePowerRating, wirelessSensorStatusIndex=wirelessSensorStatusIndex, pmmInputPhase=pmmInputPhase, xATSInputContactEntry=xATSInputContactEntry, rARUFanStatusFanRunhourReset=rARUFanStatusFanRunhourReset, uioSensorStatusCommStatus=uioSensorStatusCommStatus, isxModularDistSubFeedLoadingSubIndex=isxModularDistSubFeedLoadingSubIndex, xATSGeneratorFuelSystemLowFuelLevelThreshold=xATSGeneratorFuelSystemLowFuelLevelThreshold, envMinHumidityThresholdViolation=envMinHumidityThresholdViolation, dcInputRelayOn=dcInputRelayOn, airFMSysAlarmMapInput16=airFMSysAlarmMapInput16, cpsSerialGroupIndex=cpsSerialGroupIndex, airIRmPmMaintenance=airIRmPmMaintenance, airIRG3GroupSetpointsCoolDeadbandMetric=airIRG3GroupSetpointsCoolDeadbandMetric, serialPort2Config=serialPort2Config, rPDULoadDevBankTableSize=rPDULoadDevBankTableSize, airFMModRHHeaterReset=airFMModRHHeaterReset, dm3ConfigBreakers=dm3ConfigBreakers, accessPXStatusBeaconCurrentState=accessPXStatusBeaconCurrentState, airIRRP100UnitStatusRackInletTemperature2US=airIRRP100UnitStatusRackInletTemperature2US, cpsSerialPortDBmode=cpsSerialPortDBmode, xATSSystemOutputTotalPowerFactor=xATSSystemOutputTotalPowerFactor, airIRmPmHumidifier1Hysteresis=airIRmPmHumidifier1Hysteresis, airEcoBreeze=airEcoBreeze, upsDCOutputStatusCurrentRating=upsDCOutputStatusCurrentRating, wirelessSensorPodStatusBattery=wirelessSensorPodStatusBattery, dm3ConfigOutRlyIndex=dm3ConfigOutRlyIndex, xPDUDeviceLoadTieBreakerPresent=xPDUDeviceLoadTieBreakerPresent, airIRmPmSensor9Defect=airIRmPmSensor9Defect, atsConfigLineVRMSWideLimit=atsConfigLineVRMSWideLimit, emsInputContactStatusInputContactName=emsInputContactStatusInputContactName, upsPhaseNumInputs=upsPhaseNumInputs, galaxy9000FreqConverter=galaxy9000FreqConverter, emsOutletConfigOutletName=emsOutletConfigOutletName, xATSInputContactCurrentState=xATSInputContactCurrentState, rPDUOutletDevice=rPDUOutletDevice, upsDiagPMTableSize=upsDiagPMTableSize, xPDUBranchBreakerCurrent=xPDUBranchBreakerCurrent, upsDiagPMHardwareRev=upsDiagPMHardwareRev, envSTDecTempRateViolationCleared=envSTDecTempRateViolationCleared, pcnsAdvancedShutdownCommandFileEnabled=pcnsAdvancedShutdownCommandFileEnabled, airFMSysCooling=airFMSysCooling, rPDU2PhaseToPhaseStatusModule=rPDU2PhaseToPhaseStatusModule, emConfigContactEnable=emConfigContactEnable, dm3StatusBreakers=dm3StatusBreakers, apcUserScheduleViolationCleared=apcUserScheduleViolationCleared, switchedBypass=switchedBypass, airFMModSupplyTempC=airFMModSupplyTempC, battManString1OhmicValueTableSize=battManString1OhmicValueTableSize, xATSIdentFirmwareControllerRev=xATSIdentFirmwareControllerRev, airIRSCGroupSetptsSupplyAirSetpointUS=airIRSCGroupSetptsSupplyAirSetpointUS, emsSensorConfigSensorNormalState=emsSensorConfigSensorNormalState, dcOutputRelayOn=dcOutputRelayOn, airIRmPmHumidifier2ManOpRunning=airIRmPmHumidifier2ManOpRunning, airIRG3RDURunHoursPowerSupply2=airIRG3RDURunHoursPowerSupply2, dm3StatusRectDiagPass=dm3StatusRectDiagPass, battManString2ResponseTestCurrentBenchmarkIndex=battManString2ResponseTestCurrentBenchmarkIndex, xPDUSystemInUPSOperationalMode=xPDUSystemInUPSOperationalMode, pmmBranchcircuitApparentPowerMaxAlarm=pmmBranchcircuitApparentPowerMaxAlarm, pcnsOverloadShutdownDelay=pcnsOverloadShutdownDelay, emConfig=emConfig, airIRRCUnitThresholds=airIRRCUnitThresholds, airFMSysHighSplyTempC=airFMSysHighSplyTempC, airFMModServIntBlwrCtrl2=airFMModServIntBlwrCtrl2, isxcInformationalAlarmCleared=isxcInformationalAlarmCleared, pmmIdentHMIFirmwareAppOSRev=pmmIdentHMIFirmwareAppOSRev, airIRRP100UnitRunHoursCompressor=airIRRP100UnitRunHoursCompressor, apcEnvSTIncTempRateViolationCleared=apcEnvSTIncTempRateViolationCleared, xAPCControllerFirmwareUpdateTransferStart=xAPCControllerFirmwareUpdateTransferStart, isxModularDistSysCurrentAlarmHighEnable=isxModularDistSysCurrentAlarmHighEnable, airFMSysAlarmMapSysTable=airFMSysAlarmMapSysTable, rPDU2DeviceControlName=rPDU2DeviceControlName, dcFanFailAlarmCleared=dcFanFailAlarmCleared, airIRmPmDrycooler2HysteresisK=airIRmPmDrycooler2HysteresisK, upsAdvInputBypassTotalApparentPower=upsAdvInputBypassTotalApparentPower, emsConfigName=emsConfigName, upsPhaseOutputLoad=upsPhaseOutputLoad, isxModularDistModuleBreakerModIndex=isxModularDistModuleBreakerModIndex, airIRG3CMStatusDeviceIndex=airIRG3CMStatusDeviceIndex, galaxy7000UPS250kVA=galaxy7000UPS250kVA, accessPXStatusFrontDoor=accessPXStatusFrontDoor, dm3StatusSysConvType=dm3StatusSysConvType, pcnsFaultBypassEnabled=pcnsFaultBypassEnabled, upsWarningConditionCleared=upsWarningConditionCleared, mUpsContact=mUpsContact, upsAdvConfigBatteryHealthAlarmSleepTime=upsAdvConfigBatteryHealthAlarmSleepTime, memInputAnalogCalibrationPoint1=memInputAnalogCalibrationPoint1, pmmOutputVoltageLtoL=pmmOutputVoltageLtoL, airIRG3RDUSetpointsEntry=airIRG3RDUSetpointsEntry, airIRRP100UnitStatusDischargePressureUS=airIRRP100UnitStatusDischargePressureUS, memModulesStatusSerialNumber=memModulesStatusSerialNumber, rPDU2OutletSwitchedConfigExternalLink=rPDU2OutletSwitchedConfigExternalLink, emsSensorStatus=emsSensorStatus, pduUtilityLineUndervoltage=pduUtilityLineUndervoltage, pcnsOverloadEnableShutdown=pcnsOverloadEnableShutdown, airFMSysFastStartup=airFMSysFastStartup, emsIdentHardwareRev=emsIdentHardwareRev, xATSGeneratorFuelTankRuptureAlarm=xATSGeneratorFuelTankRuptureAlarm, emsOutletConfigOutletNormalState=emsOutletConfigOutletNormalState, rPDU2OutletMeteredStatusPeakPowerStartTime=rPDU2OutletMeteredStatusPeakPowerStartTime, dm3StatusAlarmsEntry=dm3StatusAlarmsEntry, memFluidSensorConfigTable=memFluidSensorConfigTable, dcPINChanged=dcPINChanged, airIRmPmEheating1Runtime=airIRmPmEheating1Runtime, atsConfigChange=atsConfigChange, accessPXConfigBeaconAction=accessPXConfigBeaconAction, airIRmPmLouver3ManOpEnable=airIRmPmLouver3ManOpEnable, pduContactFault=pduContactFault, wirelessSensorStatusHighTempThresh=wirelessSensorStatusHighTempThresh, isxModularDistInfoMeterModelNumber=isxModularDistInfoMeterModelNumber, airIRmPmPump2PressureSetpoint=airIRmPmPump2PressureSetpoint, xATSInputContactStateNormal=xATSInputContactStateNormal, rPDUOutletDevColdstartDelay=rPDUOutletDevColdstartDelay, msvmCommunicationLost=msvmCommunicationLost, rPDU2PhaseStatusNumber=rPDU2PhaseStatusNumber, upsAdvOutputCurrent=upsAdvOutputCurrent, airFMSysResetUserDflts=airFMSysResetUserDflts, airIRmPmLouver2Position=airIRmPmLouver2Position, emsFluidSensorStatusEntry=emsFluidSensorStatusEntry, upsParallelSysRedundancyStatus=upsParallelSysRedundancyStatus, pduCircuitPanelInputUndercurrentCleared=pduCircuitPanelInputUndercurrentCleared, airIRRP500UnitStatusReheatDemand=airIRRP500UnitStatusReheatDemand, upsDiagSubSysPowerFactorCorrectionFrameIndex=upsDiagSubSysPowerFactorCorrectionFrameIndex, battManSystemSuspendVoltage=battManSystemSuspendVoltage, rPDU2DeviceControlTable=rPDU2DeviceControlTable, memSensorsVoltMaxThresh=memSensorsVoltMaxThresh, uioSensorConfigHighHumidityEnable=uioSensorConfigHighHumidityEnable, pmmInputFrequencyDeviation=pmmInputFrequencyDeviation, rPDUOutletConfigMonitoredTableSize=rPDUOutletConfigMonitoredTableSize, dm3StatusOutRlyStatus=dm3StatusOutRlyStatus, memFluidSensorConfigSensorSeverity=memFluidSensorConfigSensorSeverity, sPDUMasterConfigMSPIndex=sPDUMasterConfigMSPIndex, sPDUMasterConfigMSPPowerOnTimeDelay=sPDUMasterConfigMSPPowerOnTimeDelay, upsPhaseOutputPhaseIndex=upsPhaseOutputPhaseIndex, rPDU2BankTableSize=rPDU2BankTableSize, emsOutputRelayConfigTable=emsOutputRelayConfigTable, atsOutputFrequency=atsOutputFrequency, airIRRP100UnitRunHoursHeater2=airIRRP100UnitRunHoursHeater2, upsAdvConfigBatteryTemperatureCompensation=upsAdvConfigBatteryTemperatureCompensation, xATSSwitchBlockMapTable=xATSSwitchBlockMapTable, emsVibrationSensorStatusSensorState=emsVibrationSensorStatusSensorState, mfiletransferConfigFTP=mfiletransferConfigFTP, xPDUDeviceLoadTestPortPresent=xPDUDeviceLoadTestPortPresent, deviceIndex=deviceIndex, apcEnvMaxTempThresholdViolationCleared=apcEnvMaxTempThresholdViolationCleared, isxModularDistModuleBreakerCurrent=isxModularDistModuleBreakerCurrent, pcnsParallelRedundancyLostCommandFileDelay=pcnsParallelRedundancyLostCommandFileDelay, AirIRSCFanSpeedPreference=AirIRSCFanSpeedPreference, rPDU2BankStatusNumber=rPDU2BankStatusNumber, airIRmPmMinLimitReturnAirTemperature=airIRmPmMinLimitReturnAirTemperature, airIRmPmPump4StartTemperature=airIRmPmPump4StartTemperature, isxModularDistSubFeedInfoAlarmGeneration=isxModularDistSubFeedInfoAlarmGeneration, ePDUSensor=ePDUSensor, airFMSysAvgReturnTempC=airFMSysAvgReturnTempC, cpsCardConfEntry=cpsCardConfEntry, xATSInternalCommError=xATSInternalCommError, upsOutletGroupStatus=upsOutletGroupStatus, galaxy5000UPS100KVA=galaxy5000UPS100KVA, dm3ConfigRectFailSafe=dm3ConfigRectFailSafe, memInputAnalogMaxThresh=memInputAnalogMaxThresh, serverStatus=serverStatus, dcRectifierOvertempAlarm=dcRectifierOvertempAlarm, apcAnalogInputLowThresholdViolationCleared=apcAnalogInputLowThresholdViolationCleared, dm3ConfigRectHwVoltAlarm=dm3ConfigRectHwVoltAlarm, iemStatusProbeNumber=iemStatusProbeNumber, airIRmPmMyZoneRoomTemperatureF=airIRmPmMyZoneRoomTemperatureF, xPDUSystemGroundCurrentAlarm=xPDUSystemGroundCurrentAlarm, dcHumidityAlarm=dcHumidityAlarm, isxModularPduFanStatus=isxModularPduFanStatus, airIRRCUnitStatusFilterDPMetric=airIRRCUnitStatusFilterDPMetric, emsInputContactConfigEntry=emsInputContactConfigEntry, pcnsPowerFailed=pcnsPowerFailed, dm3ConfigHighKneeTemp=dm3ConfigHighKneeTemp, airIRG3CMRunHoursFan1=airIRG3CMRunHoursFan1, upsDiagSubSysInverterIndex=upsDiagSubSysInverterIndex, upsNeedsFactorySetupFault=upsNeedsFactorySetupFault, chargerOutputStatus=chargerOutputStatus, rPDU2SensorTempHumidityConfigTempHighThreshC=rPDU2SensorTempHumidityConfigTempHighThreshC, airFMSysAlarmMapSysSecSensActive=airFMSysAlarmMapSysSecSensActive, sPDUIdentVM=sPDUIdentVM, airFMSysCoilFluidVlvAct=airFMSysCoilFluidVlvAct, inputWarningError=inputWarningError, upsDiagSubSysIntBypSwitchModelNum=upsDiagSubSysIntBypSwitchModelNum, upsDiagnosticDisplayHardwareRev=upsDiagnosticDisplayHardwareRev, xPDUMainInputVoltageLtoN=xPDUMainInputVoltageLtoN, atsControlClearAllAlarms=atsControlClearAllAlarms, airIRmPmDrycooler2ManOpRunning=airIRmPmDrycooler2ManOpRunning, airIRG2GroupConfigNumberofBackupUnits=airIRG2GroupConfigNumberofBackupUnits, airIRG3RDUTableSize=airIRG3RDUTableSize, airFMModReturnHum=airFMModReturnHum, airCriticalConditionCleared=airCriticalConditionCleared, ceWarningConditionCleared=ceWarningConditionCleared, airIRmPmDrycooler2SummerStartTempC=airIRmPmDrycooler2SummerStartTempC, airIRmPmFan3Runtime=airIRmPmFan3Runtime, airIRRP100Group=airIRRP100Group, wirelessSensorPodStatusMaxTempThresh=wirelessSensorPodStatusMaxTempThresh, airFM=airFM, airIRG3CMStatusReturnAirTempMetric=airIRG3CMStatusReturnAirTempMetric, upsDiagSubSysIntBypSwitchIndex=upsDiagSubSysIntBypSwitchIndex)
mibBuilder.exportSymbols("PowerNet-MIB", upsAdvConfigMainsSetting=upsAdvConfigMainsSetting, rpp=rpp, smartUPS3Phase=smartUPS3Phase, mtrapargsInteger05=mtrapargsInteger05, pcnsBypassContactorOkDesc=pcnsBypassContactorOkDesc, rPDU2SensorTempHumidityConfigTempHysteresisF=rPDU2SensorTempHumidityConfigTempHysteresisF, wirelessSensorPodStatusLocation=wirelessSensorPodStatusLocation, xPDUOutputCurrentLowAlarm=xPDUOutputCurrentLowAlarm, iemIdent=iemIdent, pcnsNmcIndex=pcnsNmcIndex, upsBasicBatteryTimeOnBattery=upsBasicBatteryTimeOnBattery, ePDUSensorStatusTable=ePDUSensorStatusTable, airIRRP500GroupStatusDehumidifyOutput=airIRRP500GroupStatusDehumidifyOutput, upsDiagSubSysIntBypSwitchFrameIndex=upsDiagSubSysIntBypSwitchFrameIndex, airIRG3CMThresholdsSupplyAirTempHighMetric=airIRG3CMThresholdsSupplyAirTempHighMetric, sPDUOutletControlMSPIndex=sPDUOutletControlMSPIndex, airIRmPmDrycooler1SummerStartTempF=airIRmPmDrycooler1SummerStartTempF, xATSSwitchTimersRemainingTime=xATSSwitchTimersRemainingTime, upsHighPrecBatteryCurrent=upsHighPrecBatteryCurrent, sPDUMasterConfigMSPTable=sPDUMasterConfigMSPTable, airIRmPmGvalvePreOpeningGrade=airIRmPmGvalvePreOpeningGrade, xPDUBypassVoltageLowAlarmCleared=xPDUBypassVoltageLowAlarmCleared, rPDUOutletNearOverloadCleared=rPDUOutletNearOverloadCleared, galaxyVXUPS400kVA=galaxyVXUPS400kVA, emsInputContactStatusInputContactNormalState=emsInputContactStatusInputContactNormalState, galaxyPXUPS80kW=galaxyPXUPS80kW, upsHighPrecInputLineVoltage=upsHighPrecInputLineVoltage, xATSGeneratorFuelSystemFuelLevel=xATSGeneratorFuelSystemFuelLevel, memDoorSensorConfigSensorSeverity=memDoorSensorConfigSensorSeverity, airIRmPmSensor1Defect=airIRmPmSensor1Defect, airIRRCUnitRunHoursFan5=airIRRCUnitRunHoursFan5, airIRG3GroupConfigCoolGainP=airIRG3GroupConfigCoolGainP, isxModularDistModuleBreakerPower=isxModularDistModuleBreakerPower, isxModularPduDevice=isxModularPduDevice, rPDU2DeviceStatusPowerSupply1Status=rPDU2DeviceStatusPowerSupply1Status, sPDUIdentVMTableSize=sPDUIdentVMTableSize, sPDUOutletConfigMSPgsIndex=sPDUOutletConfigMSPgsIndex, airIRmPmDrycooler4WinterStartTemp=airIRmPmDrycooler4WinterStartTemp, airIRG3RDURunHoursPowerSupply1=airIRG3RDURunHoursPowerSupply1, bmBatManKneeAlarm=bmBatManKneeAlarm, rPDU2SensorTempHumidityConfigHumidityAlarmEnable=rPDU2SensorTempHumidityConfigHumidityAlarmEnable, upsParallelSysUpsTable=upsParallelSysUpsTable, battManStringCalibEntry=battManStringCalibEntry, sPDUOutletStatusMSP=sPDUOutletStatusMSP, rPDU2GroupTotalPower=rPDU2GroupTotalPower, dm3StatusBattTempSanity=dm3StatusBattTempSanity, airIRRP500GroupStatusMaxRackInletTempUS=airIRRP500GroupStatusMaxRackInletTempUS, wirelessSensorPodConfigIndex=wirelessSensorPodConfigIndex, xATSSwitchSettingsMaxSyncTime=xATSSwitchSettingsMaxSyncTime, atsCalibrationPowerSupplyVoltageTableIndex=atsCalibrationPowerSupplyVoltageTableIndex, pcnsBatteryChargeInRangeEnableCommandFile=pcnsBatteryChargeInRangeEnableCommandFile, memOutletStatusOutletName=memOutletStatusOutletName, xATSSwitchTimersName=xATSSwitchTimersName, upsNeedsFactorySetupFaultCleared=upsNeedsFactorySetupFaultCleared, mtrapargsGauge02=mtrapargsGauge02, apcEnvSTDecTempRateViolationCleared=apcEnvSTDecTempRateViolationCleared, pcbeUpdateDesc=pcbeUpdateDesc, upsDiagSubSysChargerFrameIndex=upsDiagSubSysChargerFrameIndex, airIRRP500GroupSetpointsFanSpeedControl=airIRRP500GroupSetpointsFanSpeedControl, sPDUMasterControlVMIndex=sPDUMasterControlVMIndex, airIRmPmSensor3Defect=airIRmPmSensor3Defect, upsDiagSubSysExternalSwitchGearFirmwareRev=upsDiagSubSysExternalSwitchGearFirmwareRev, rARUIdentAruIndex=rARUIdentAruIndex, sPDUMasterConfigMSPTableSize=sPDUMasterConfigMSPTableSize, airFMModBlwr2ChokeTempF=airFMModBlwr2ChokeTempF, atsCommunicationEstablished=atsCommunicationEstablished, airIRRP500UnitStatusInputState=airIRRP500UnitStatusInputState, xATSInputContactNumber=xATSInputContactNumber, emsSensorStatusSensorIndex=emsSensorStatusSensorIndex, dcmim2StatusBattTestCapacity=dcmim2StatusBattTestCapacity, rPDUOutletDevCommand=rPDUOutletDevCommand, xPDUIdent=xPDUIdent, temperatureThresholdViolation1=temperatureThresholdViolation1, rARUStatusAruTempOvrdEnableDisable=rARUStatusAruTempOvrdEnableDisable, emsProbeStatusProbeMinHumidityThresh=emsProbeStatusProbeMinHumidityThresh, rPDUPowerSupply2Status=rPDUPowerSupply2Status, isxModularDistModuleInfoAlarmStatus=isxModularDistModuleInfoAlarmStatus, mtrapargsOctetString08=mtrapargsOctetString08, dm3ConfigRectifier=dm3ConfigRectifier, memOutletNormalState=memOutletNormalState, iemConfigProbeNumber=iemConfigProbeNumber, dcmim2StatusRectFail=dcmim2StatusRectFail, userAdded=userAdded, airIRmPmDrycooler1Hysteresis=airIRmPmDrycooler1Hysteresis, rsRedundancyRestored=rsRedundancyRestored, isxModularDistSysCurrentAlarmMaxEnable=isxModularDistSysCurrentAlarmMaxEnable, airFMStatusSystemRemoteAvgHum=airFMStatusSystemRemoteAvgHum, ePDUDeviceStatusActivePower=ePDUDeviceStatusActivePower, airIRmPmCmp1StartTempWinter=airIRmPmCmp1StartTempWinter, emsSensorDisconnected=emsSensorDisconnected, airIRmPmPump2Running=airIRmPmPump2Running, xATSGeneratorLowCoolantLevelAlarm=xATSGeneratorLowCoolantLevelAlarm, upsOutletGroupStatusTable=upsOutletGroupStatusTable, airIRRP100GroupStatusMinRackInletTempUS=airIRRP100GroupStatusMinRackInletTempUS, isxModularDistSubFeedInfoBreakerPosition=isxModularDistSubFeedInfoBreakerPosition, sPDUOutletControlVMOutletCommand=sPDUOutletControlVMOutletCommand, rPDUOutletControlOutletPhase=rPDUOutletControlOutletPhase, airIRSCGroupStatusCoolDemand=airIRSCGroupStatusCoolDemand, airFMSysHighCtrlTempC=airFMSysHighCtrlTempC, coolingUnitConfigurationAnalogTable=coolingUnitConfigurationAnalogTable, pcnsOverloadSolvedCommandFilePath=pcnsOverloadSolvedCommandFilePath, xPDUSystemOutputOverCurrentNeutralThreshold=xPDUSystemOutputOverCurrentNeutralThreshold, galaxyVSUPS10kW=galaxyVSUPS10kW, xATSGeneratorHighBatteryVolt=xATSGeneratorHighBatteryVolt, dcmim2StatusRectifier=dcmim2StatusRectifier, airIRRCUnitIdent=airIRRCUnitIdent, cpsSerialPortAuthTmo=cpsSerialPortAuthTmo, pcnsNMC=pcnsNMC, pcnsUIProtocol=pcnsUIProtocol, upsSyncCtrlGroup=upsSyncCtrlGroup, galaxyVSUPS40kW=galaxyVSUPS40kW, airFMSysHumSensBand=airFMSysHumSensBand, airIRSCUnitConfigInputNormalState=airIRSCUnitConfigInputNormalState, airIRG2GroupConfigNumberOfActiveFlowControllers=airIRG2GroupConfigNumberOfActiveFlowControllers, rPDUDeviceConfigChange=rPDUDeviceConfigChange, rARUStatusAruTempOvrdStatus=rARUStatusAruTempOvrdStatus, memSensorsHumidity=memSensorsHumidity, mtrapargsTimeTicks03=mtrapargsTimeTicks03, rARUSensorsTempMinThresh=rARUSensorsTempMinThresh, upsHighPrecInputMinLineVoltage=upsHighPrecInputMinLineVoltage, sPDUOutletConfigMSPall=sPDUOutletConfigMSPall, airIRG3GroupSetpointsCoolSetpointMetric=airIRG3GroupSetpointsCoolSetpointMetric, airIRG2RDT2StatusOHEInputState=airIRG2RDT2StatusOHEInputState, apCPSPwNum=apCPSPwNum, airFMModSerialNumber=airFMModSerialNumber, airIRRP100UnitStatusReheatDemand=airIRRP100UnitStatusReheatDemand, upsIntegratedATSSourceName=upsIntegratedATSSourceName, battManResetDischargeCounters=battManResetDischargeCounters, isxModularDistSubFeedInfoThresholdHigh=isxModularDistSubFeedInfoThresholdHigh, pcbeUIProtocol=pcbeUIProtocol, airIRmPmUnitEvaporationTemperature1F=airIRmPmUnitEvaporationTemperature1F, upsDiagnosticTemperatureAmbientTemperature=upsDiagnosticTemperatureAmbientTemperature, xATSGeneratorGroundFaultAlarmCleared=xATSGeneratorGroundFaultAlarmCleared, rPDU2BankStatusTable=rPDU2BankStatusTable, airIRmPmLouver2ManOpEnable=airIRmPmLouver2ManOpEnable, pcnsBatteryDischargedEnableCommandFile=pcnsBatteryDischargedEnableCommandFile, airFMModServIntBlwrCtrl2Reset=airFMModServIntBlwrCtrl2Reset, powerRestored=powerRestored, airIRmPmDrycooler4=airIRmPmDrycooler4, airIRmPmMaxLimitReturnAirTemperatureF=airIRmPmMaxLimitReturnAirTemperatureF, airFMModBlwr1ElOvMode=airFMModBlwr1ElOvMode, airIRSCGroupStatusMaxReturnAirTempMetric=airIRSCGroupStatusMaxReturnAirTempMetric, airFMModBlwr2ActTorq=airFMModBlwr2ActTorq, pcnsMinRedundancyRegainedDesc=pcnsMinRedundancyRegainedDesc, battManString2BatteryDryout=battManString2BatteryDryout, emsInputContactStatusInputContactIndex=emsInputContactStatusInputContactIndex, xATSGeneratorHighACVEventCleared=xATSGeneratorHighACVEventCleared, airIRmAlarmsDescription=airIRmAlarmsDescription, atsStatusOutput=atsStatusOutput, isxModularDistributionCommEstablished=isxModularDistributionCommEstablished, memInputs=memInputs, iemConfigProbeHumidHysteresis=iemConfigProbeHumidHysteresis, airIRmPmSensor2Defect=airIRmPmSensor2Defect, pcnsNetCommunicationLostEnableShutdown=pcnsNetCommunicationLostEnableShutdown, airFMSysResetFldSrvcDflts=airFMSysResetFldSrvcDflts, rPDU2IdentNMCSerialNumber=rPDU2IdentNMCSerialNumber, airFMSysSetup=airFMSysSetup, rPDUBankPhaseOverloadCleared=rPDUBankPhaseOverloadCleared, ePDUPhaseStatusTable=ePDUPhaseStatusTable, subfeedBreakerCurrent=subfeedBreakerCurrent, battManConfigMonitorWireLength=battManConfigMonitorWireLength, airFMSysAlarmMapInput4=airFMSysAlarmMapInput4, airIRG3CMConfigTable=airIRG3CMConfigTable, isxModularDistModuleOutputAvailableVoltages=isxModularDistModuleOutputAvailableVoltages, upsParallelOutputActivePower=upsParallelOutputActivePower, uioOutputRelayConfigRelayName=uioOutputRelayConfigRelayName, airIRmPmHumidifier1CurrentValue=airIRmPmHumidifier1CurrentValue, rintelligenceModuleInserted=rintelligenceModuleInserted, airFMSysMinRemoteTempF=airFMSysMinRemoteTempF, rPDU2DeviceControlIndex=rPDU2DeviceControlIndex, airFMModBlwr1DecTime=airFMModBlwr1DecTime, airFMSysAlarmMapInput8=airFMSysAlarmMapInput8, airIRRP500UnitConfigOutputNormalState=airIRRP500UnitConfigOutputNormalState, xATSSwitchTimersIndex=xATSSwitchTimersIndex, atsCalibrationOutputPhasesTableIndex=atsCalibrationOutputPhasesTableIndex, rPDU2BankStatusEntry=rPDU2BankStatusEntry, dm3StatusConvDiagPass=dm3StatusConvDiagPass, memBeaconStatusModuleNumber=memBeaconStatusModuleNumber, uioSensorStatusSensorName=uioSensorStatusSensorName, mtrapargsInteger03=mtrapargsInteger03, batteryPackCommEstablished=batteryPackCommEstablished, rARUConfigAruRemoteSetpoint=rARUConfigAruRemoteSetpoint, upsEbmModeRuntimeSinceCommission=upsEbmModeRuntimeSinceCommission, airIRRP100GroupStatusCoolDemand=airIRRP100GroupStatusCoolDemand, isxModularMinCurrentThresholdViolation=isxModularMinCurrentThresholdViolation, sPDUOutletStatusMSPName=sPDUOutletStatusMSPName, mUpsContactEntry=mUpsContactEntry, airIRRP500GroupConfigCoolResetRateI=airIRRP500GroupConfigCoolResetRateI, airFMSysInputStatus=airFMSysInputStatus, airIRRP100UnitIdentManufactureDate=airIRRP100UnitIdentManufactureDate, atsStatusHardwareStatus=atsStatusHardwareStatus, isxModularDistSubFeedInfoAlarmMaxEnable=isxModularDistSubFeedInfoAlarmMaxEnable, symmetraPx160kVA=symmetraPx160kVA, upsHighPrecBatteryPackOnlyHealth=upsHighPrecBatteryPackOnlyHealth, airIRSCUnit=airIRSCUnit, xATSEngineStartAsserted=xATSEngineStartAsserted, airIRG3CMStatusLiquidInletPressureMetric=airIRG3CMStatusLiquidInletPressureMetric, upsParallelSysUpsMode=upsParallelSysUpsMode, airFMModBlwr2CapLife=airFMModBlwr2CapLife, dcmim2StatusSysRectCurrent=dcmim2StatusSysRectCurrent, pduMaintenanceBypassMode=pduMaintenanceBypassMode, airIRG3CMStatusVaporOutletPressureMetric=airIRG3CMStatusVaporOutletPressureMetric, upsSCGMultiCastIP=upsSCGMultiCastIP, airIRG2GroupStatusCoolDemand=airIRG2GroupStatusCoolDemand, emsOutletStatus=emsOutletStatus, memSensorsHumidityMinThresh=memSensorsHumidityMinThresh, xATSTestCanceled=xATSTestCanceled, airFMSysInputName=airFMSysInputName, upsDiagIMManufactureDate=upsDiagIMManufactureDate, atsConfigBankTable=atsConfigBankTable, airFMModSuctPresKPa=airFMModSuctPresKPa, pcbeHostname=pcbeHostname, airIRRCUnitStatus=airIRRCUnitStatus, upsDiagPMEnclDoorFltrLifetime=upsDiagPMEnclDoorFltrLifetime, upsAdvStateSymmetraSpecificFaults=upsAdvStateSymmetraSpecificFaults, airIRmPmHotGasHeatingAlarm=airIRmPmHotGasHeatingAlarm, airIRmPmEEV1PressureSensorError=airIRmPmEEV1PressureSensorError, gutorPDW=gutorPDW, xATSSwitchBlockMapName=xATSSwitchBlockMapName, powerChuteNetworkShutdown=powerChuteNetworkShutdown, isxModularMinCurrentThresholdViolationCleared=isxModularMinCurrentThresholdViolationCleared, dm3StatusOutputRelays=dm3StatusOutputRelays, pcnsContactFault2CommandFilePath=pcnsContactFault2CommandFilePath, rARUSensorsTempShortDecRateThreshValue=rARUSensorsTempShortDecRateThreshValue, airFMSysCoolDeadbandC=airFMSysCoolDeadbandC, pcnsNetCommunicationLostEnableCommandFile=pcnsNetCommunicationLostEnableCommandFile, emsVibrationSensorStatusSensorSeverity=emsVibrationSensorStatusSensorSeverity, upsDiagUnitControllerSerialNum=upsDiagUnitControllerSerialNum, dm3ConfigInRlyTableSize=dm3ConfigInRlyTableSize, airFMSysDXCoolingDmd=airFMSysDXCoolingDmd, airFMSysAlarmMapMainModHumFail=airFMSysAlarmMapMainModHumFail, isxModularTotalOutputCurrentHighThresholdViolation=isxModularTotalOutputCurrentHighThresholdViolation, pduUPSInputVoltageLost=pduUPSInputVoltageLost, symmetraPxDisplay=symmetraPxDisplay, dcTemperatureAlarm=dcTemperatureAlarm, rPDULoadDevBankNumber=rPDULoadDevBankNumber, airIRmPmPump1ManOpRunning=airIRmPmPump1ManOpRunning, rARUConfigAruTempOvrdSetpoint=rARUConfigAruTempOvrdSetpoint, pcnsBypassEnabledEnableCommandFile=pcnsBypassEnabledEnableCommandFile, sPDUOutletControlIndex=sPDUOutletControlIndex, battManString2BatteryUserLowVoltageAlarm=battManString2BatteryUserLowVoltageAlarm, pcnsHumidityInRangeProbe1EnableLogging=pcnsHumidityInRangeProbe1EnableLogging, airFMModProperties=airFMModProperties, pcnsVersion=pcnsVersion, airFMSysReheatPIDDerivativeD=airFMSysReheatPIDDerivativeD, airFMSysHighCtrlTempF=airFMSysHighCtrlTempF, uioInputContactConfigContactID=uioInputContactConfigContactID, pmmSiteConfigNumberofsources=pmmSiteConfigNumberofsources, cpsSerialPortPppOptions=cpsSerialPortPppOptions, upsAdvOutputVoltage=upsAdvOutputVoltage, airIRmPmReturnAirHumidityTooHigh=airIRmPmReturnAirHumidityTooHigh, xATSGeneratorLowOilPressure=xATSGeneratorLowOilPressure, upsAdvConfigLCDLockOut=upsAdvConfigLCDLockOut, dcmim2ConfigBattFunctTestThresh=dcmim2ConfigBattFunctTestThresh)
mibBuilder.exportSymbols("PowerNet-MIB", airFMSysHumCtrlMethod=airFMSysHumCtrlMethod, upsDiagSwitchGearStatus=upsDiagSwitchGearStatus, cpsSerialPortLogform=cpsSerialPortLogform, airFMModBlower2=airFMModBlower2, ePDUOutletStatusEntry=ePDUOutletStatusEntry, airIRSCUnitThresholdsReturnAirHighTempUS=airIRSCUnitThresholdsReturnAirHighTempUS, airIRmPmCompressor2Failure=airIRmPmCompressor2Failure, airIRG3CMStatusReturnAirTempUS=airIRG3CMStatusReturnAirTempUS, coolingUnitStatusAnalogTableIndex=coolingUnitStatusAnalogTableIndex, dm3ConfigConvLowVoltThresh=dm3ConfigConvLowVoltThresh, airIRG2AlarmsTable=airIRG2AlarmsTable, upsDiagSubSysFrameSerialNum=upsDiagSubSysFrameSerialNum, airIRRP100UnitRunHours=airIRRP100UnitRunHours, upsParallelOutputCurrent=upsParallelOutputCurrent, trapIndex=trapIndex, rPDUOutletStatusEntry=rPDUOutletStatusEntry, battManInputContactName=battManInputContactName, memFluidSensorCommStatus=memFluidSensorCommStatus, airIRRP500UnitThresholdsEnteringFluidHighTempUS=airIRRP500UnitThresholdsEnteringFluidHighTempUS, isxModularDistModuleInfoEntry=isxModularDistModuleInfoEntry, xATSSource2PhaseTable=xATSSource2PhaseTable, airIRmPmControllerType=airIRmPmControllerType, pcnsFaultBypassEnabledCommandFileDelay=pcnsFaultBypassEnabledCommandFileDelay, xATSGeneratorLowOilLevelAlarm=xATSGeneratorLowOilLevelAlarm, pcnsCommunicationLostOnBatteryEnableCommandFile=pcnsCommunicationLostOnBatteryEnableCommandFile, airIRG3GroupSetpointsLightingOnTime=airIRG3GroupSetpointsLightingOnTime, dcMultRectFailAlarm=dcMultRectFailAlarm, airFMModRHComp2=airFMModRHComp2, airIRmPmEEV2PressureSensorError=airIRmPmEEV2PressureSensorError, pcnsBypassDisabledCommandFilePath=pcnsBypassDisabledCommandFilePath, dm3ConfigSysDescriptionTableSize=dm3ConfigSysDescriptionTableSize, airIRRP100GroupConfigNumberOfActiveFlowControllers=airIRRP100GroupConfigNumberOfActiveFlowControllers, battManIdentSerialNumber=battManIdentSerialNumber, aruExhaustTemperatureAlarmCleared=aruExhaustTemperatureAlarmCleared, aruExhaustTemperatureAlarm=aruExhaustTemperatureAlarm, xATSSource1Rotation=xATSSource1Rotation, calibrationEnd=calibrationEnd, galaxyPXUPS100kW=galaxyPXUPS100kW, dcmim2StatusLVDIndex=dcmim2StatusLVDIndex, upsDiagSubSysBattMonitorFirmwareRev=upsDiagSubSysBattMonitorFirmwareRev, rPDU2PhaseToPhaseStatusVoltage3to1=rPDU2PhaseToPhaseStatusVoltage3to1, airIRG3CMThresholdsCMID=airIRG3CMThresholdsCMID, battManString1BatteryChemHighVoltageAlarm=battManString1BatteryChemHighVoltageAlarm, pcnsTempOutOfRangeProbe2=pcnsTempOutOfRangeProbe2, airIRSCGroupStatus=airIRSCGroupStatus, dcPower=dcPower, sPDUMasterConfigMSPName=sPDUMasterConfigMSPName, temperatureThresholdViolationCleared1=temperatureThresholdViolationCleared1, airIRRCUnitThresholdsRackInletHighTempMetric=airIRRCUnitThresholdsRackInletHighTempMetric, upsPhaseInputPower=upsPhaseInputPower, galaxy7000SSC1200kVA=galaxy7000SSC1200kVA, airIRRP100GroupSetpointsReheatUS=airIRRP100GroupSetpointsReheatUS, externalSwitchGearClosed=externalSwitchGearClosed, gutor=gutor, pduCircuitPanelInputOvercurrent=pduCircuitPanelInputOvercurrent, apcTestTrap=apcTestTrap, sPDUOutletConfigEntry=sPDUOutletConfigEntry, upsOutletGroupTurnedOff=upsOutletGroupTurnedOff, airIRG3RDUConfigRDUID=airIRG3RDUConfigRDUID, upsAdvBatteryActualVoltageEntry=upsAdvBatteryActualVoltageEntry, airIRG3CMStatusUnitType=airIRG3CMStatusUnitType, mfiletransferConfigFTPServerAddress=mfiletransferConfigFTPServerAddress, airIRmPmCompressor2=airIRmPmCompressor2, serialPort2Mode=serialPort2Mode, airFMStatusSystemRemoteHighTempC=airFMStatusSystemRemoteHighTempC, upsOpStatsTimeInECOmodeOperation=upsOpStatsTimeInECOmodeOperation, upsDiagPMModelNum=upsDiagPMModelNum, rPDUOutletStatusLoad=rPDUOutletStatusLoad, airIRmPmPWWHeatingStartTempF=airIRmPmPWWHeatingStartTempF, cpsSerialPortDBtime=cpsSerialPortDBtime, sPDUIdentModelNumberMSP=sPDUIdentModelNumberMSP, ePDUSensorStatusTemperature=ePDUSensorStatusTemperature, isxModularPduDeviceTransformerPresent=isxModularPduDeviceTransformerPresent, memSmokeSensorConfigTable=memSmokeSensorConfigTable, isxModularDistModuleOutputThresholdLow=isxModularDistModuleOutputThresholdLow, airIRRP500UnitStatusActivePowerSource=airIRRP500UnitStatusActivePowerSource, airIRRP100GroupStatusCoolOutput=airIRRP100GroupStatusCoolOutput, atsOutputBankEntry=atsOutputBankEntry, airACRD600Series=airACRD600Series, battManStringVoltage=battManStringVoltage, upsPhaseInputApparentPower=upsPhaseInputApparentPower, memInputAnalogCalibrationPoint1Value=memInputAnalogCalibrationPoint1Value, airFMModHardwareRev=airFMModHardwareRev, upsSCGStatusTable=upsSCGStatusTable, pcnsTempOutOfRangeProbe1=pcnsTempOutOfRangeProbe1, sPDUMasterConfigVMEntry=sPDUMasterConfigVMEntry, upsBatteryCabBlockCellIndex=upsBatteryCabBlockCellIndex, xATSSource2PhaseEntry=xATSSource2PhaseEntry, upsBatteryCabBlockPresent=upsBatteryCabBlockPresent, emsInputContactStatusTable=emsInputContactStatusTable, rPDU2DevicePropertiesEntry=rPDU2DevicePropertiesEntry, ceSevereConditionCleared=ceSevereConditionCleared, coolingUnitStatusDiscreteIntegerReferenceKey=coolingUnitStatusDiscreteIntegerReferenceKey, xPDUBreakerPositionAlarm=xPDUBreakerPositionAlarm, airFMModServIntHeaterReset=airFMModServIntHeaterReset, memInputAnalogCalibrationPoint4=memInputAnalogCalibrationPoint4, emsProbeStatusProbeMinVoltThresh=emsProbeStatusProbeMinVoltThresh, emStatusProbeLowHumidViolation=emStatusProbeLowHumidViolation, envLTDecTempRateViolation=envLTDecTempRateViolation, mUpsContactTable=mUpsContactTable, cpsCardStatusCard=cpsCardStatusCard, upsDiagSubSysInverterFirmwareRev=upsDiagSubSysInverterFirmwareRev, memInputsCommStatus=memInputsCommStatus, airFMSysHumEssFunction=airFMSysHumEssFunction, airIRRP500UnitStatus=airIRRP500UnitStatus, aruSmokeAlarm=aruSmokeAlarm, airIRRP100UnitThresholdsRackInletHighTempUS=airIRRP100UnitThresholdsRackInletHighTempUS, airFMModBlwr1Entry=airFMModBlwr1Entry, airIRmPmGECWvalveGEOffTempC=airIRmPmGECWvalveGEOffTempC, isxModularDistSysCurrentAmps=isxModularDistSysCurrentAmps, upsDiagnosticBatteries=upsDiagnosticBatteries, airFMGroupCfgShutdownFire=airFMGroupCfgShutdownFire, xPDUInputVoltageLowAlarm=xPDUInputVoltageLowAlarm, airIRRP500UnitRunHoursHeater1=airIRRP500UnitRunHoursHeater1, bmsCriticalConditionCleared=bmsCriticalConditionCleared, upsPhaseOutputMaxLoad=upsPhaseOutputMaxLoad, xPDUSystemOutputOverCurrentThreshold=xPDUSystemOutputOverCurrentThreshold, emsBeaconDisconnected=emsBeaconDisconnected, airIRRP100UnitStatusReturnAirTempMetric=airIRRP100UnitStatusReturnAirTempMetric, battManAlarmManagementController=battManAlarmManagementController, airIRmPmRuntimeMixedModeFreeCooling=airIRmPmRuntimeMixedModeFreeCooling, airIRmAlarms=airIRmAlarms, airIRmPmPump1StartTemperatureK=airIRmPmPump1StartTemperatureK, upsDiagSubSysExternalPowerFrameBoardTable=upsDiagSubSysExternalPowerFrameBoardTable, airIRmPmSensor7Failure=airIRmPmSensor7Failure, rPDU2Sensor=rPDU2Sensor, upsEBMmode=upsEBMmode, xATSSource1Position=xATSSource1Position, airIRmPmEheating3Runtime=airIRmPmEheating3Runtime, rARUFanStatusFanFlowRate=rARUFanStatusFanFlowRate, ePDUPhaseStatusModule=ePDUPhaseStatusModule, galaxy300UPS15kVA33=galaxy300UPS15kVA33, upsParallelSysRemoteAddress=upsParallelSysRemoteAddress, xATSIdentProductName=xATSIdentProductName, airIRSCGroupSetptsCoolDeadbandUS=airIRSCGroupSetptsCoolDeadbandUS, upsAdvControlFlashAndBeep=upsAdvControlFlashAndBeep, upsAdvStateNumberoftimesonbattery=upsAdvStateNumberoftimesonbattery, airFMModBlwr2CtrlType=airFMModBlwr2CtrlType, rPDUOutletConfigMonitoredNumber=rPDUOutletConfigMonitoredNumber, airIRSCUnitRunHoursFanPowerSupplyRight=airIRSCUnitRunHoursFanPowerSupplyRight, isxModularTotalOutputCurrentMaxThresholdViolationCleared=isxModularTotalOutputCurrentMaxThresholdViolationCleared, airFMModServIntBlwr1Reset=airFMModServIntBlwr1Reset, airIRSCUnitRunHoursCondenserFan2=airIRSCUnitRunHoursCondenserFan2, apcUpsConfigFieldValueRange=apcUpsConfigFieldValueRange, isxModularDistSysCurrentThresholdMin=isxModularDistSysCurrentThresholdMin, memFluidSensorStatusTable=memFluidSensorStatusTable, symmetraPx250kVA=symmetraPx250kVA, coolingUnitConfigurationAnalogAccess=coolingUnitConfigurationAnalogAccess, airIRmPmRuntimeUnit=airIRmPmRuntimeUnit, memDoorSensorConfigSensorIndex=memDoorSensorConfigSensorIndex, airIRmPmGECWvalveManOpOpeningGrade=airIRmPmGECWvalveManOpOpeningGrade, upsPhaseOutputPowerFactor=upsPhaseOutputPowerFactor, xATSDCBackupAlarm=xATSDCBackupAlarm, airIRG2RDT2RunHoursAirFilter=airIRG2RDT2RunHoursAirFilter, airIRG3IdentRDUSysOID=airIRG3IdentRDUSysOID, rPDU2OutletSwitchedControlModule=rPDU2OutletSwitchedControlModule, upsDiagUsrSuppSwitchgearMonitorTable=upsDiagUsrSuppSwitchgearMonitorTable, accessPXStatusBeaconLocation=accessPXStatusBeaconLocation, airIRSCUnitStatusInputState=airIRSCUnitStatusInputState, rPDU2BankPropertiesEntry=rPDU2BankPropertiesEntry, upsAdvInputTotalActivePower=upsAdvInputTotalActivePower, airFMGroupFailoverModAirBlockInterlockOpen=airFMGroupFailoverModAirBlockInterlockOpen, isxModularDistSubFeedLoadingTable=isxModularDistSubFeedLoadingTable, battManInputContactAlarmState=battManInputContactAlarmState, airIRSCUnitIdentHardwareRevision=airIRSCUnitIdentHardwareRevision, smartBoostOff=smartBoostOff, airIRG3RDURunHoursDeviceIndex=airIRG3RDURunHoursDeviceIndex, sPDUOutletControlMSPOutletIndex=sPDUOutletControlMSPOutletIndex, xATSSwitchSettingsClearLatchedAlarms=xATSSwitchSettingsClearLatchedAlarms, upsBatteryCabinetIndex=upsBatteryCabinetIndex, airIRRCUnitConfigInputNormalState=airIRRCUnitConfigInputNormalState, airIRG2GroupSetpointsActiveFlowControlBias=airIRG2GroupSetpointsActiveFlowControlBias, upsDiagSubSysDCCircuitBreakerEntry=upsDiagSubSysDCCircuitBreakerEntry, galaxyVXUPS500kVA=galaxyVXUPS500kVA, emsOutletStatusOutletIndex=emsOutletStatusOutletIndex, dcmim2StatusAlarmsText=dcmim2StatusAlarmsText, airIRG3GroupConfigIndex=airIRG3GroupConfigIndex, pmmIdentHMIHardwareRev=pmmIdentHMIHardwareRev, pduCircuitPanelInputOvervoltageCleared=pduCircuitPanelInputOvervoltageCleared, airIRmPmSensor15Failure=airIRmPmSensor15Failure, battManUnitStatusTable=battManUnitStatusTable, chargerFailure=chargerFailure, airIRG2RDT2ServiceIntervals=airIRG2RDT2ServiceIntervals, upsDiagSubSysDisplayInterfaceCardTableSize=upsDiagSubSysDisplayInterfaceCardTableSize, airIRmPmEheating4StartTemperatureK=airIRmPmEheating4StartTemperatureK, xATSGeneratorAdvStatusCoolantTemperature=xATSGeneratorAdvStatusCoolantTemperature, xPDUOutputNeutralCurrentHighAlarmCleared=xPDUOutputNeutralCurrentHighAlarmCleared, battManUnitHardwareRev=battManUnitHardwareRev, upsHighPrecOutputEnergyUsage=upsHighPrecOutputEnergyUsage, pcbeHttpPort=pcbeHttpPort, airFMAlarms=airFMAlarms, upsDiagSubSysDCCircuitBreakerFrameIndex=upsDiagSubSysDCCircuitBreakerFrameIndex, rPDU2DeviceConfigLowLoadPowerThreshold=rPDU2DeviceConfigLowLoadPowerThreshold, airFMSysInputDelay=airFMSysInputDelay, airIRmPmDehumidificHysteresis=airIRmPmDehumidificHysteresis, airFMModBlwr1RatedCurrent=airFMModBlwr1RatedCurrent, pmmOutputApparentEnergyReceived=pmmOutputApparentEnergyReceived, wirelessSensorPodConfigMinTempThresh=wirelessSensorPodConfigMinTempThresh, upsBypassRelayFault=upsBypassRelayFault, sPDUMasterConfigVMTableSize=sPDUMasterConfigVMTableSize, rPDU2SensorDiscreteConfigNormalState=rPDU2SensorDiscreteConfigNormalState, atsRedundancyRestored=atsRedundancyRestored, rPDUStatusPhaseTable=rPDUStatusPhaseTable, pcnsRuntimeRemainingThreshold=pcnsRuntimeRemainingThreshold, memInputAnalogMinThresh=memInputAnalogMinThresh, airFMGroupCfgFailoverCommLoss=airFMGroupCfgFailoverCommLoss, cpsEthDhcpc=cpsEthDhcpc, pcnsTurnOffSOG=pcnsTurnOffSOG, upsDiagSubSysExternalSwitchGearIndex=upsDiagSubSysExternalSwitchGearIndex, uioSensorConfigMaxHumidityThreshold=uioSensorConfigMaxHumidityThreshold, upsAdvStateEcomode=upsAdvStateEcomode, xATSTestingStatusSelectTestProcess=xATSTestingStatusSelectTestProcess, coolingUnitConfigurationAnalogMinimum=coolingUnitConfigurationAnalogMinimum, memModulesStatusModuleLocation=memModulesStatusModuleLocation, memFluidSensorStatusSensorLocation=memFluidSensorStatusSensorLocation, airIRG2SC=airIRG2SC, airIRmPmMaxLimitWaterTemperature=airIRmPmMaxLimitWaterTemperature, upsAdvOutputStatisticsTable=upsAdvOutputStatisticsTable, rARUPowerStatusAuxiliaryAcPresent=rARUPowerStatusAuxiliaryAcPresent, xATSGeneratorAdvStatusCoolantLevel=xATSGeneratorAdvStatusCoolantLevel, airIRmPmGvalvePreOpeningTime=airIRmPmGvalvePreOpeningTime, pcnsNetCommunicationLostEnableLogging=pcnsNetCommunicationLostEnableLogging, pcnsContactNormal3CommandFilePath=pcnsContactNormal3CommandFilePath, pmmInputApparentPowerMinimumAlarm=pmmInputApparentPowerMinimumAlarm, airIRRP100UnitStatusCompressorDriveCurrent=airIRRP100UnitStatusCompressorDriveCurrent, rPDU2BankPropertiesNumber=rPDU2BankPropertiesNumber, pmmInputEntry=pmmInputEntry, airIRmPmPump3LinearRangeK=airIRmPmPump3LinearRangeK, airIRmPmUnitEvaporationTemperature1C=airIRmPmUnitEvaporationTemperature1C, ePDUDeviceStatusModelNumber=ePDUDeviceStatusModelNumber, dcmim2ConfigBattCapacityTestPercent=dcmim2ConfigBattCapacityTestPercent, pduCircuitPanelInputOvervoltage=pduCircuitPanelInputOvervoltage, battManConfigMaxAmbientTempF=battManConfigMaxAmbientTempF, xPDUOutputRelayName=xPDUOutputRelayName, airIRG3RDUConfigOnReadyStandby=airIRG3RDUConfigOnReadyStandby, atsStatusVBoostSourceA=atsStatusVBoostSourceA, airPAIdentName=airPAIdentName, msvmCommunicationEstablished=msvmCommunicationEstablished, uioInputContactConfigTableSize=uioInputContactConfigTableSize, airIRG2RDT2RunHoursEvapFanEntry=airIRG2RDT2RunHoursEvapFanEntry, upsDiagSubSysFrameType=upsDiagSubSysFrameType, airIRmPmMaxLimitWaterTemperatureC=airIRmPmMaxLimitWaterTemperatureC, airIRmPmFan1Failure=airIRmPmFan1Failure, emsProbeConfigProbeHighHumidityThresh=emsProbeConfigProbeHighHumidityThresh, atsOutputBankTable=atsOutputBankTable, cpsCardIdentMan=cpsCardIdentMan, pmmInputMinApparentPowerThreshold=pmmInputMinApparentPowerThreshold, airIRmPmUnitCondensationTemperature2C=airIRmPmUnitCondensationTemperature2C, pmmOutputActivePower=pmmOutputActivePower, airFMSysAlarmMapSysAnyAlarm=airFMSysAlarmMapSysAnyAlarm, upsAdvConfigOutputFreqRange=upsAdvConfigOutputFreqRange, airIRmPmDrycooler4HysteresisF=airIRmPmDrycooler4HysteresisF, upsParallelTotalOutputApparentPower=upsParallelTotalOutputApparentPower, rARUSensorsTempLongIncRateThreshValue=rARUSensorsTempLongIncRateThreshValue)
mibBuilder.exportSymbols("PowerNet-MIB", upsHighPrecBatteryPackCartridgeReplaceDate=upsHighPrecBatteryPackCartridgeReplaceDate, upsDiagPMSerialNum=upsDiagPMSerialNum, ePDUPhaseConfigNumber=ePDUPhaseConfigNumber, universalInputOutput=universalInputOutput, emsOutletConfig=emsOutletConfig, airIRG3CMSetpointsTable=airIRG3CMSetpointsTable, pcnsOverloadSolved=pcnsOverloadSolved, rPDUOutletDevNumCntrlOutlets=rPDUOutletDevNumCntrlOutlets, coolingUnitExtendedDiscreteValueAsInteger=coolingUnitExtendedDiscreteValueAsInteger, airFMSysInputNormalState=airFMSysInputNormalState, airIRRP100UnitServiceIntervalCondensatePumpAlarm=airIRRP100UnitServiceIntervalCondensatePumpAlarm, rARUSensorsTempThreshHysteresis=rARUSensorsTempThreshHysteresis, battManStringIndex=battManStringIndex, airIRRP500UnitRunHoursSystem=airIRRP500UnitRunHoursSystem, pmmSiteConfigIndex=pmmSiteConfigIndex, airIRRP100UnitConfigDehumidifyEnable=airIRRP100UnitConfigDehumidifyEnable, airIRmPmHumidifier2StartHumidity=airIRmPmHumidifier2StartHumidity, airIRRP500UnitStatusOutputState=airIRRP500UnitStatusOutputState, xATSGeneratorOutputPhaseCurrent=xATSGeneratorOutputPhaseCurrent, pcnsBypassContactorOkCommandFileDelay=pcnsBypassContactorOkCommandFileDelay, iemRelayFault=iemRelayFault, powerModuleIncrease=powerModuleIncrease, bmBatManBatteryAlarmCleared=bmBatManBatteryAlarmCleared, rPDUOutletPhaseIndex=rPDUOutletPhaseIndex, pmmInputApparentPowerMaximumAlarm=pmmInputApparentPowerMaximumAlarm, upsOutletGroupConfigLoadShedControlRuntimeRemaining=upsOutletGroupConfigLoadShedControlRuntimeRemaining, airIRRP500GroupStatusCoolOutput=airIRRP500GroupStatusCoolOutput, xPDUEpoArmed=xPDUEpoArmed, emsProbeConfigProbeMaxTempThresh=emsProbeConfigProbeMaxTempThresh, dcFuseCBAlarm=dcFuseCBAlarm, battManString2ResponseTestCurrentEntry=battManString2ResponseTestCurrentEntry, sPDUOutletConfigMSPmupsTable=sPDUOutletConfigMSPmupsTable, memSensorsTempThreshHysteresis=memSensorsTempThreshHysteresis, rPDU2PhasePropertiesTable=rPDU2PhasePropertiesTable, upsDiagSubFeedBreakerTableSize=upsDiagSubFeedBreakerTableSize, uioInputContactConfigNormalState=uioInputContactConfigNormalState, upsAdvBatteryActualVoltageTable=upsAdvBatteryActualVoltageTable, airIRSCGroup=airIRSCGroup, airFMSysCtrlHum=airFMSysCtrlHum, upsOutletGroupStatusOutletType=upsOutletGroupStatusOutletType, memInputAnalogCalibrationPoint3=memInputAnalogCalibrationPoint3, upsDiagSubSysExternalConnectorStatus=upsDiagSubSysExternalConnectorStatus, upsPfcInputRelayFailureCleared=upsPfcInputRelayFailureCleared, airIRSCUnitSetptsSupplyAirSetpointMetric=airIRSCUnitSetptsSupplyAirSetpointMetric, upsAdvIdentFirmwareRevision=upsAdvIdentFirmwareRevision, pmmSiteConfigNominalPtoPVoltage=pmmSiteConfigNominalPtoPVoltage, upsDiagSubSysIntBypSwitchManufactureDate=upsDiagSubSysIntBypSwitchManufactureDate, iemLowHumidThresholdViolation=iemLowHumidThresholdViolation, upsBatteryCabBlockIndex=upsBatteryCabBlockIndex, upsBatteryCabBlockVerticalPosition=upsBatteryCabBlockVerticalPosition, mspOutletOn=mspOutletOn, galaxy300UPS10kVA33=galaxy300UPS10kVA33, sPDUOutletConfigMSPmupsIndex=sPDUOutletConfigMSPmupsIndex, airFMSysAlarmMapInputOutputIndex=airFMSysAlarmMapInputOutputIndex, upsDiagPMLifetimeInfoEntry=upsDiagPMLifetimeInfoEntry, dcmim2ControlRunCapacityBatteryTest=dcmim2ControlRunCapacityBatteryTest, airIRRCUnitStatusSupplyAirTempMetric=airIRRCUnitStatusSupplyAirTempMetric, accessPXIdentHardwareRev=accessPXIdentHardwareRev, upsDiagBatteryFrameTemperature=upsDiagBatteryFrameTemperature, mtrapargsInteger02=mtrapargsInteger02, airIRmPmMinLimitSupplyAirTemperatureC=airIRmPmMinLimitSupplyAirTemperatureC, upsInputContactIndex=upsInputContactIndex, dm3ConfigBreakersName=dm3ConfigBreakersName, airIRmPmMyZoneEmergencyTemperature=airIRmPmMyZoneEmergencyTemperature, memBeaconStatusBeaconNumber=memBeaconStatusBeaconNumber, dm3ConfigBreakersTableSize=dm3ConfigBreakersTableSize, rARUSensorsLocation=rARUSensorsLocation, airIRmPmDrycooler4Runtime=airIRmPmDrycooler4Runtime, AirIRmStopState=AirIRmStopState, airIRmPmCmp2HysteresisWinter=airIRmPmCmp2HysteresisWinter, airIRG2RDT2StatusInputState=airIRG2RDT2StatusInputState, rPDULoadBankConfigAlarm=rPDULoadBankConfigAlarm, memSmokeSensorStatusSensorState=memSmokeSensorStatusSensorState, envSTIncTempRateViolation=envSTIncTempRateViolation, rPDU2DeviceStatusName=rPDU2DeviceStatusName, cpsDNSsecserv=cpsDNSsecserv, airIRSCUnitStatusCondenserFanSpeed=airIRSCUnitStatusCondenserFanSpeed, airIRSCUnitRunHoursCondensatePump=airIRSCUnitRunHoursCondensatePump, upsPhaseInputVoltageOrientation=upsPhaseInputVoltageOrientation, sPDUOutletStatusMSPOutletState=sPDUOutletStatusMSPOutletState, rPDUStatusOutletIndex=rPDUStatusOutletIndex, iemConfigContactsEntry=iemConfigContactsEntry, pcnsCommunicationEstablishedEnableLogging=pcnsCommunicationEstablishedEnableLogging, upsParallelSysUpsIndex=upsParallelSysUpsIndex, isxModularMaxCurrentThresholdViolationCleared=isxModularMaxCurrentThresholdViolationCleared, pcnsEnvironmentCommunicationLostDesc=pcnsEnvironmentCommunicationLostDesc, rARUStatusAruTemp2=rARUStatusAruTemp2, dm3ConfigOutRlyDelay=dm3ConfigOutRlyDelay, memSmokeSensorConfigSensorLocation=memSmokeSensorConfigSensorLocation, airIRG2RDT2RunHoursEvapFanTableSize=airIRG2RDT2RunHoursEvapFanTableSize, upsAdvStateDP300ESpecificFaults=upsAdvStateDP300ESpecificFaults, emsSmokeSensorConfigSensorSeverity=emsSmokeSensorConfigSensorSeverity, airFMGroupFailoverModCondensatePumpFail=airFMGroupFailoverModCondensatePumpFail, upsAdvConfigGreenMode=upsAdvConfigGreenMode, apcKeyOverrideLocked=apcKeyOverrideLocked, upsAdvTestCalibrationResults=upsAdvTestCalibrationResults, isxModularBreakerOpenAlarmCleared=isxModularBreakerOpenAlarmCleared, airIRRCUnitIdentManufactureDate=airIRRCUnitIdentManufactureDate, upsDiagBatteryFrameIndex=upsDiagBatteryFrameIndex, xATSGeneratorSettingsCrankRestTime=xATSGeneratorSettingsCrankRestTime, battManSystemAmbientHighTempAlarm=battManSystemAmbientHighTempAlarm, pcnsOverloadCommandFileDelay=pcnsOverloadCommandFileDelay, airIRmPmPhaseFailure=airIRmPmPhaseFailure, isxModularDistSubFeedLoadingPercent=isxModularDistSubFeedLoadingPercent, rPDUOutletConfigMonitoredIndex=rPDUOutletConfigMonitoredIndex, upsAdvInputStatisticsIndex=upsAdvInputStatisticsIndex, airFMSysDXDehumDmd=airFMSysDXDehumDmd, sPDUMasterStatusVMTable=sPDUMasterStatusVMTable, battManUnitCommLoss=battManUnitCommLoss, emsDoorSensorConfigSensorIndex=emsDoorSensorConfigSensorIndex, upsBasicInputPhase=upsBasicInputPhase, airFMGroup=airFMGroup, airFMModNomCoilDiffPresPa=airFMModNomCoilDiffPresPa, airIRRCGroupStatusAirFlowUS=airIRRCGroupStatusAirFlowUS, upsEbmModeOnlineSinceReset=upsEbmModeOnlineSinceReset, airIRSCUnitConfigIdleOnLeakDetect=airIRSCUnitConfigIdleOnLeakDetect, xPDUTransformTempStatus=xPDUTransformTempStatus, pcnsMinRedundancyRegained=pcnsMinRedundancyRegained, airIRRP500GroupStatusCoolDemand=airIRRP500GroupStatusCoolDemand, xATSEpoReset=xATSEpoReset, pmmInputAlarmGeneration=pmmInputAlarmGeneration, rARUFanStatusFanOperatingStatus=rARUFanStatusFanOperatingStatus, xPDUBranchBreakerTable=xPDUBranchBreakerTable, airIRRP100UnitIdentID=airIRRP100UnitIdentID, upsAdvOutputInverterFrequency=upsAdvOutputInverterFrequency, airIRG3CMConfigEntry=airIRG3CMConfigEntry, atsOverCurrent=atsOverCurrent, pcnsBypassContactorOkEnableLogging=pcnsBypassContactorOkEnableLogging, xATSOutputRelayNumRelays=xATSOutputRelayNumRelays, airIRRP100GroupConfigHumidifySensitivityBand=airIRRP100GroupConfigHumidifySensitivityBand, airIRmPmPump2HysteresisK=airIRmPmPump2HysteresisK, pcnsTempOutOfRangeProbe1ShutdownDelay=pcnsTempOutOfRangeProbe1ShutdownDelay, xPDUBranchCurrentMaxAlarmCleared=xPDUBranchCurrentMaxAlarmCleared, upsAdvOutputKVACapacity=upsAdvOutputKVACapacity, airIRmPmMyZoneEmergencyTemperatureC=airIRmPmMyZoneEmergencyTemperatureC, xATSTestingStatusProfileLoadedTime=xATSTestingStatusProfileLoadedTime, upsOutputRelayConfigPeakPeriod=upsOutputRelayConfigPeakPeriod, pcnsMinRedundancyLostEnableShutdown=pcnsMinRedundancyLostEnableShutdown, sPDUOutletControlVM=sPDUOutletControlVM, upsBasicState=upsBasicState, xATSOutputCurrentLowAlarm=xATSOutputCurrentLowAlarm, upsAdvInputMaxLineVoltage=upsAdvInputMaxLineVoltage, baseFanFailure=baseFanFailure, airIRRP100UnitStatusCoolOutput=airIRRP100UnitStatusCoolOutput, airFMModDischPresKPa=airFMModDischPresKPa, airIRmPmNumberOfExternalAlarmInputs=airIRmPmNumberOfExternalAlarmInputs, memInputAnalogCalibrationPoint5=memInputAnalogCalibrationPoint5, airFMGroupSysRunHours=airFMGroupSysRunHours, airFMSysAlarmMapExpMod1HumReplCyl=airFMSysAlarmMapExpMod1HumReplCyl, upsPhaseOutputPhaseEntry=upsPhaseOutputPhaseEntry, upsAdvBatteryFrameActualVoltage=upsAdvBatteryFrameActualVoltage, rPDU2BankStatusLoadState=rPDU2BankStatusLoadState, upsDiagnostics=upsDiagnostics, dcMainsFailAlarmCleared=dcMainsFailAlarmCleared, coolingUnitExtendedAnalogTableIndex=coolingUnitExtendedAnalogTableIndex, atsOutputBankState=atsOutputBankState, dm3ConfigRectThresh=dm3ConfigRectThresh, xATSGeneratorEStop=xATSGeneratorEStop, airIRG2RDT2Thresholds=airIRG2RDT2Thresholds, airIRRP500GroupConfigAltitudeUS=airIRRP500GroupConfigAltitudeUS, rPDU2OutletSwitchedConfigRebootDuration=rPDU2OutletSwitchedConfigRebootDuration, isxModularSubfeedHighCurrentThresholdViolation=isxModularSubfeedHighCurrentThresholdViolation, dm3ConfigLVDTripThresh=dm3ConfigLVDTripThresh, airFMSysHotWaterVlvAct=airFMSysHotWaterVlvAct, upsDiagSubSysDisplayInterfaceCardFrameIndex=upsDiagSubSysDisplayInterfaceCardFrameIndex, isxModularDistModuleOutputStatus=isxModularDistModuleOutputStatus, upsEbmModeUpsCount=upsEbmModeUpsCount, uioSensorStatusTable=uioSensorStatusTable, memOutputStatusTableSize=memOutputStatusTableSize, pcnsMinRedundancyLost=pcnsMinRedundancyLost, coolingUnitAboutTableSize=coolingUnitAboutTableSize, upsHighPrecBatteryActualVoltageTableIndex=upsHighPrecBatteryActualVoltageTableIndex, sPDUMasterControlVMEntry=sPDUMasterControlVMEntry, upsSyncCtrlGroupConfig=upsSyncCtrlGroupConfig, emsOutletControlTable=emsOutletControlTable, rPDUOutletStatusOutletState=rPDUOutletStatusOutletState, emsOutputRelayStateAbnormal=emsOutputRelayStateAbnormal, apcOutputShortCircuit=apcOutputShortCircuit, rPDULoadPhaseConfigIndex=rPDULoadPhaseConfigIndex, pcnsMinLoadCapabilityLostDesc=pcnsMinLoadCapabilityLostDesc, iemConfigProbeMinHumidEnable=iemConfigProbeMinHumidEnable, airACRC600Series=airACRC600Series, xPDUInputContactNumContacts=xPDUInputContactNumContacts, upsAdvInputFrequency=upsAdvInputFrequency, xPDUSystemBreakerTableIndex=xPDUSystemBreakerTableIndex, dm3StatusRectCurrentLimit=dm3StatusRectCurrentLimit, pcns4=pcns4, airIRGen2=airIRGen2, iemStatus=iemStatus, xATSDeviceNominalFrequency=xATSDeviceNominalFrequency, pcnsHumidityInRangeProbe2CommandFilePath=pcnsHumidityInRangeProbe2CommandFilePath, smartUPS3Phase10kVA=smartUPS3Phase10kVA, pcnsCommunicationLostCommandFileDelay=pcnsCommunicationLostCommandFileDelay, airFMSysActualSteamHum=airFMSysActualSteamHum, airFMSysAlarmMapMainModHumReplCyl=airFMSysAlarmMapMainModHumReplCyl, dcRectifierFailAlarmCleared=dcRectifierFailAlarmCleared, airIRmPmPump4PressureSetpoint=airIRmPmPump4PressureSetpoint, dm3ConfigLVD=dm3ConfigLVD, isxModularLowCurrentThresholdViolation=isxModularLowCurrentThresholdViolation, atsConfigPhaseTableIndex=atsConfigPhaseTableIndex, emsSmokeSensorConfigSensorName=emsSmokeSensorConfigSensorName, powerNetSubAgent=powerNetSubAgent, airIRG3CMThresholdsReturnAirTempHighUS=airIRG3CMThresholdsReturnAirTempHighUS, xATSTestingScheduleTestWithLoadInterval=xATSTestingScheduleTestWithLoadInterval, pcnsContactFault1EnableShutdown=pcnsContactFault1EnableShutdown, chargerFailureCleared=chargerFailureCleared, upsPhaseResetValues=upsPhaseResetValues, dm3ConfigConverter=dm3ConfigConverter, memSensorsLocation=memSensorsLocation, airIRmPmGvalveOpeningGrade=airIRmPmGvalveOpeningGrade, pmmSiteConfigTable=pmmSiteConfigTable, pcnsRuntimeRemainingCmdFileThreshold=pcnsRuntimeRemainingCmdFileThreshold, uioOutputRelayConfigRelayID=uioOutputRelayConfigRelayID, xATSSource1PhaseEntry=xATSSource1PhaseEntry, sPDUMasterStatusMSPTable=sPDUMasterStatusMSPTable, atsCalibrationPowerSupply=atsCalibrationPowerSupply, airIRRCUnitConfigStartupDelay=airIRRCUnitConfigStartupDelay, airIRmPmLouver3ManOpPosition=airIRmPmLouver3ManOpPosition, cpsSerialPortLFSuppress=cpsSerialPortLFSuppress, ePDUOutletStatusState=ePDUOutletStatusState, accessPXStatusFrontDoorAlarmStatus=accessPXStatusFrontDoorAlarmStatus, airIRRP100GroupConfigActiveFlowControllerLampTest=airIRRP100GroupConfigActiveFlowControllerLampTest, accessPXStatusFrontDoorLock=accessPXStatusFrontDoorLock, ePDUPhaseConfigModule=ePDUPhaseConfigModule, pcnsTempInRangeProbe2CommandFileDelay=pcnsTempInRangeProbe2CommandFileDelay, uioInputContactStatusContactName=uioInputContactStatusContactName, msvmDeviceConfigChange=msvmDeviceConfigChange, rPDU2SensorTempHumidityStatusTempStatus=rPDU2SensorTempHumidityStatusTempStatus, dm3ConfigRectImbalanceAlarm=dm3ConfigRectImbalanceAlarm, uioInputContactStatusContactLocation=uioInputContactStatusContactLocation, xATSGeneratorLowRunTimeAlarm=xATSGeneratorLowRunTimeAlarm, airIRG2RDT2ConfigUnitType=airIRG2RDT2ConfigUnitType, sPDUMasterStatusVMName=sPDUMasterStatusVMName, sPDUOutletConfigVMOutletName=sPDUOutletConfigVMOutletName, rPDUIdentFirmwareRev=rPDUIdentFirmwareRev, cpsSerialRlogin=cpsSerialRlogin, airIRmPmSeqStop=airIRmPmSeqStop, airIRRCUnitRunHoursFanPowerSupplyFeedARight=airIRRCUnitRunHoursFanPowerSupplyFeedARight, cpsInfoSerialPortSigDTR=cpsInfoSerialPortSigDTR, smartUPS3000DSP=smartUPS3000DSP, airIRRP100UnitServiceIntervalCompressor=airIRRP100UnitServiceIntervalCompressor, upsAdvConfigOutputFreqSlewRate=upsAdvConfigOutputFreqSlewRate, airIRRP500GroupStatusDehumidifyDemand=airIRRP500GroupStatusDehumidifyDemand, xATSGeneratorFuelSystemEstimatedRunTime=xATSGeneratorFuelSystemEstimatedRunTime, airIRmPmEheating3ManOpRunning=airIRmPmEheating3ManOpRunning, airIRmPmSensor14Failure=airIRmPmSensor14Failure, airIRmPmPump4MaxAdjust=airIRmPmPump4MaxAdjust, xATSSwitchBlockMapTableSize=xATSSwitchBlockMapTableSize, emsHardwareStateNormal=emsHardwareStateNormal, airIRRP100UnitStatusCompressorDriveControlCardTempMetric=airIRRP100UnitStatusCompressorDriveControlCardTempMetric, xPDUOutputNeutralCurrentHighAlarm=xPDUOutputNeutralCurrentHighAlarm, pcnsMaxInternalTempExceededDesc=pcnsMaxInternalTempExceededDesc, dcmim2ConfigLVDTrip=dcmim2ConfigLVDTrip, smartUPS2200=smartUPS2200)
mibBuilder.exportSymbols("PowerNet-MIB", xPDUDeviceBypassInputPresent=xPDUDeviceBypassInputPresent, airIRRCUnitRunHoursFanPowerSupplyFeedALeft=airIRRCUnitRunHoursFanPowerSupplyFeedALeft, airIRRCUnitStatusFilterDPUS=airIRRCUnitStatusFilterDPUS, xPDUSystemOutputApparentPower=xPDUSystemOutputApparentPower, xPDUOutputRelayNormalState=xPDUOutputRelayNormalState, memDoorSensorConfigEntry=memDoorSensorConfigEntry, aruFanFail=aruFanFail, xATSDoorOpenAlarm=xATSDoorOpenAlarm, upsIOFrameLayoutPositionID=upsIOFrameLayoutPositionID, airIRmPmSetpointHumidity=airIRmPmSetpointHumidity, upsIdent=upsIdent, upsHighPrecBatteryPackOnlyReplaceDate=upsHighPrecBatteryPackOnlyReplaceDate, upsPowerFrameLayoutTableSize=upsPowerFrameLayoutTableSize, xPDUBranchBreakerName=xPDUBranchBreakerName, galaxy300UPS10kVA31=galaxy300UPS10kVA31, rPDUOutletOverloadCleared=rPDUOutletOverloadCleared, upsAdvOutputLoad=upsAdvOutputLoad, isxModularDistModuleInfoTableSize=isxModularDistModuleInfoTableSize, upsAdvOutputSourceSynchronization=upsAdvOutputSourceSynchronization, airIRG2RDT2RunHoursFanPSIndex=airIRG2RDT2RunHoursFanPSIndex, airIRG2RDT2StatusFluidValvePos=airIRG2RDT2StatusFluidValvePos, memSmokeSensorConfigSensorSeverity=memSmokeSensorConfigSensorSeverity, dm3ConfigRectDiagAlarm=dm3ConfigRectDiagAlarm, atsIdentNominalLineVoltage=atsIdentNominalLineVoltage, pcnsOverload=pcnsOverload, cpsInfoSerialPortTty=cpsInfoSerialPortTty, mtrapargsGauge=mtrapargsGauge, airIRRP500UnitConfigHeatAssistEnable=airIRRP500UnitConfigHeatAssistEnable, smartUPS3Phase40kVA=smartUPS3Phase40kVA, isxModularDistModuleOutputAlarmMaxEnable=isxModularDistModuleOutputAlarmMaxEnable, uioOutputRelayConfigPortID=uioOutputRelayConfigPortID, pcnsRunTimeBelowThresholdEnableCommandFile=pcnsRunTimeBelowThresholdEnableCommandFile, upsLocalDisplayButtonFaultCleared=upsLocalDisplayButtonFaultCleared, upsSideCarFrameLayoutTable=upsSideCarFrameLayoutTable, cpsSerialPortNetMask=cpsSerialPortNetMask, accessPXConfigRearDoorMaxOpenTime=accessPXConfigRearDoorMaxOpenTime, mtrapargsInteger04=mtrapargsInteger04, upsOutletGroupStatusEntry=upsOutletGroupStatusEntry, dm3StatusOEMconvGain=dm3StatusOEMconvGain, upsPhaseInputFrequency=upsPhaseInputFrequency, rPDULoadBankConfigOverloadThreshold=rPDULoadBankConfigOverloadThreshold, rPDUOutletOverload=rPDUOutletOverload, pcnsEnvironmentCommunicationEstablished=pcnsEnvironmentCommunicationEstablished, upsHighPrecBatteryActualVoltage=upsHighPrecBatteryActualVoltage, dcmim2StatusRectCurrent=dcmim2StatusRectCurrent, isxModularDistSysPowerTotal=isxModularDistSysPowerTotal, bmBatManChargerAlarmCleared=bmBatManChargerAlarmCleared, airFMGroupLoadShareDehumThresh=airFMGroupLoadShareDehumThresh, airIRRP500GroupStatusMinRackInletTempUS=airIRRP500GroupStatusMinRackInletTempUS, upsDiagSubSysbackfeedContactorIndex=upsDiagSubSysbackfeedContactorIndex, airIRmPmPump3MaxAdjust=airIRmPmPump3MaxAdjust, returnFromLowBattery=returnFromLowBattery, apcBeaconOff=apcBeaconOff, airIRmPmDrycooler1WinterStartTempF=airIRmPmDrycooler1WinterStartTempF, airIRmPmStoptimeUnit=airIRmPmStoptimeUnit, airIRmPmDrycooler3WinterStartTemp=airIRmPmDrycooler3WinterStartTemp, xPDUTransformerTempAlarm=xPDUTransformerTempAlarm, airIRmPmLouver1Position=airIRmPmLouver1Position, upsDiagnosticPowerCabinetTableSize=upsDiagnosticPowerCabinetTableSize, xATSGenCommLost=xATSGenCommLost, rPDU2SensorDiscreteConfigModule=rPDU2SensorDiscreteConfigModule, upsDiagSubSysIDRCStatus=upsDiagSubSysIDRCStatus, rPDU2GroupTotalEnergy=rPDU2GroupTotalEnergy, apcDeviceDisconnected=apcDeviceDisconnected, accessPXStatusRearDoorAlarmStatus=accessPXStatusRearDoorAlarmStatus, noBatteries=noBatteries, dm3StatusInRlyTableSize=dm3StatusInRlyTableSize, dm3StatusBreakersTable=dm3StatusBreakersTable, pmmOutputLowVoltThreshold=pmmOutputLowVoltThreshold, pmmBranchCircuitApparentPower=pmmBranchCircuitApparentPower, iemStatusProbeHighTempViolation=iemStatusProbeHighTempViolation, emStatusContactsTable=emStatusContactsTable, airIRG2IdentUnitSysOID=airIRG2IdentUnitSysOID, upsHighPrecBatteryPackOnlyStatus=upsHighPrecBatteryPackOnlyStatus, upsHighPrecOutputEfficiency=upsHighPrecOutputEfficiency, xATSSystemOutputPhaseTable=xATSSystemOutputPhaseTable, upsDiagBatteryNegativeVoltage=upsDiagBatteryNegativeVoltage, xATSSource2Name=xATSSource2Name, upsBottomFeedFrameLayoutPositionID=upsBottomFeedFrameLayoutPositionID, isxModularPduTransformerTempStatus=isxModularPduTransformerTempStatus, rPDU2OutletSwitched=rPDU2OutletSwitched, sPDUOutletConfigMSPmupsP1LowHum=sPDUOutletConfigMSPmupsP1LowHum, pmmInputKWOverAlarm=pmmInputKWOverAlarm, accessPX=accessPX, airIRSCUnitStatusDischargePressureUS=airIRSCUnitStatusDischargePressureUS, pduCircuitPanelInputUndercurrent=pduCircuitPanelInputUndercurrent, xATSSystemOutputTotalPower=xATSSystemOutputTotalPower, envSTDecTempRateViolation=envSTDecTempRateViolation, airFMModModelNumber=airFMModModelNumber, airIRG2GroupStatusAirFlowUS=airIRG2GroupStatusAirFlowUS, pcnsOverloadDesc=pcnsOverloadDesc, pcnsAdvancedShutdownUPSRequiredForLoad=pcnsAdvancedShutdownUPSRequiredForLoad, upsAdvConfigBatterySelection=upsAdvConfigBatterySelection, wirelessSensorPodStatusLowTempThresh=wirelessSensorPodStatusLowTempThresh, airIRmPmUnitEvaporationTemperature2=airIRmPmUnitEvaporationTemperature2, emsProbeStatusProbeLowHumidityThresh=emsProbeStatusProbeLowHumidityThresh, airIRG3GroupConfigEntry=airIRG3GroupConfigEntry, rPDU2SensorTempHumidityConfigTempHighThreshF=rPDU2SensorTempHumidityConfigTempHighThreshF, airIRmPmHumidifier2LinearRange=airIRmPmHumidifier2LinearRange, battManString2ResponseTestCurrentBenchmarkTable=battManString2ResponseTestCurrentBenchmarkTable, dm3ConfigConvHighVoltThresh=dm3ConfigConvHighVoltThresh, symmetraUPS4kVA=symmetraUPS4kVA, pcnsBatteryDischargedEnableShutdown=pcnsBatteryDischargedEnableShutdown, vaRating=vaRating, upsParallelOutputPhaseTableIndex=upsParallelOutputPhaseTableIndex, airIRRP100GroupStatusDewPointTempMetric=airIRRP100GroupStatusDewPointTempMetric, upsOutletGroupTurnedOn=upsOutletGroupTurnedOn, airIRmPmFan2Failure=airIRmPmFan2Failure, sPDUOutletPending=sPDUOutletPending, sPDUMasterConfigVMTable=sPDUMasterConfigVMTable, sPDUOutletRebootDuration=sPDUOutletRebootDuration, upsBatteryStatsTimeOnBattery=upsBatteryStatsTimeOnBattery, upsAdvConfigAutomaticRestart=upsAdvConfigAutomaticRestart, airIRRP500GroupSetpointsReheatUS=airIRRP500GroupSetpointsReheatUS, pmmCriticalConditionCleared=pmmCriticalConditionCleared, emConfigProbeNumber=emConfigProbeNumber, netlock=netlock, coolingUnitConfigurationStringEntry=coolingUnitConfigurationStringEntry, airIRRCGroupStatusCoolOutput=airIRRCGroupStatusCoolOutput, airIRmPmCmp2HysteresisWinterK=airIRmPmCmp2HysteresisWinterK, airIRmPmPump1Hysteresis=airIRmPmPump1Hysteresis, airFMModBlwr2ElOvSetting=airFMModBlwr2ElOvSetting, emsProbeConfigProbeMinHumidityThresh=emsProbeConfigProbeMinHumidityThresh, wirelessSensorPodConfig=wirelessSensorPodConfig, airIRRP500GroupSetpointsSupplyAirMetric=airIRRP500GroupSetpointsSupplyAirMetric, pcnsRunTimeAboveThresholdDesc=pcnsRunTimeAboveThresholdDesc, airFMModRHComp2Reset=airFMModRHComp2Reset, upsPhaseInputMaxPower=upsPhaseInputMaxPower, emStatusProbeMinTempViolation=emStatusProbeMinTempViolation, airFMSysHumState=airFMSysHumState, dm3StatusRectPcbRev=dm3StatusRectPcbRev, airIRmPmUnitHumidity=airIRmPmUnitHumidity, upsIntegratedATSSourceStatus=upsIntegratedATSSourceStatus, upsAdvConfigOutofSyncBypassTransferDelay=upsAdvConfigOutofSyncBypassTransferDelay, airIRG3CMServiceIntervalsEntry=airIRG3CMServiceIntervalsEntry, airIRRP100GroupStatusHumidifyDemand=airIRRP100GroupStatusHumidifyDemand, airIRmPmHumidifier1ManOpRunning=airIRmPmHumidifier1ManOpRunning, cpsSerialGroupUsers=cpsSerialGroupUsers, pmmInputNeturalCurrent=pmmInputNeturalCurrent, memInputAnalogCalibrationPoint2=memInputAnalogCalibrationPoint2, apcHardwareStateNormal=apcHardwareStateNormal, airIRmPmFan2Runtime=airIRmPmFan2Runtime, ats4gCalibrationOutputEntry=ats4gCalibrationOutputEntry, apcAnalogInputMinThresholdViolationCleared=apcAnalogInputMinThresholdViolationCleared, battManString1ResponseTestChangeTable=battManString1ResponseTestChangeTable, software=software, airIRRP100GroupStatusMaxRackInletTempUS=airIRRP100GroupStatusMaxRackInletTempUS, sPDUMasterStatusVMTableSize=sPDUMasterStatusVMTableSize, ais5000UPS30kVA=ais5000UPS30kVA, airFMSysAlarmMapMainModTableSize=airFMSysAlarmMapMainModTableSize, galaxy7000SSC800kVA=galaxy7000SSC800kVA, xATSOutputRelayTable=xATSOutputRelayTable, dcFanFailAlarm=dcFanFailAlarm, xATSGeneratorAdvStatusOilLevel=xATSGeneratorAdvStatusOilLevel, xATSSource2VoltageLtoL=xATSSource2VoltageLtoL, cpsSerialPortDCDCtrl=cpsSerialPortDCDCtrl, pcnsContactNormal1=pcnsContactNormal1, battManString1BatteryTable=battManString1BatteryTable, dcInputRelayOff=dcInputRelayOff, battManString1OhmicValueData=battManString1OhmicValueData, dm3StatusPowerModules=dm3StatusPowerModules, rPDUStatusBankState=rPDUStatusBankState, rARUIdent=rARUIdent, sPDUMasterStatusMSP=sPDUMasterStatusMSP, airIRmPmWaterDetector=airIRmPmWaterDetector, airIRG2RDT2StatusSuctionPressureMetric=airIRG2RDT2StatusSuctionPressureMetric, upsOutletGroupControlName=upsOutletGroupControlName, galaxyVMUPS50kVA=galaxyVMUPS50kVA, upsDiagUnitControllerTable=upsDiagUnitControllerTable, airIRmPmCmp2StartTempWinter=airIRmPmCmp2StartTempWinter, airFMSysDehumSetpoint=airFMSysDehumSetpoint, upsDiagSubSysBattMonitorIndex=upsDiagSubSysBattMonitorIndex, apCPSPw2=apCPSPw2, xPDUOutputFrequencyAlarm=xPDUOutputFrequencyAlarm, rPDU2PhaseStatusApparentPower=rPDU2PhaseStatusApparentPower, airPASetpointTempF=airPASetpointTempF, isxModularDistSubFeedInfoAlarmStatus=isxModularDistSubFeedInfoAlarmStatus, xPDUInputVoltageHighAlarm=xPDUInputVoltageHighAlarm, airIRRP500GroupConfigConfigurationType=airIRRP500GroupConfigConfigurationType, airFMSysHotWaterTempC=airFMSysHotWaterTempC, emsStatusAlarmDeviceCount=emsStatusAlarmDeviceCount, uioSensorConfigMinHumidityEnable=uioSensorConfigMinHumidityEnable, sPDUOutletControlVMIndex=sPDUOutletControlVMIndex, xATSSwitchTimers=xATSSwitchTimers, upsOscillatorFailed=upsOscillatorFailed, airIRmPmNumberOfHotGasReheat=airIRmPmNumberOfHotGasReheat, memModulesConfigEntry=memModulesConfigEntry, airIRmPmPump1StartTemperature=airIRmPmPump1StartTemperature, dm3StatusConvPresent=dm3StatusConvPresent, isxModularDistSysOutputVoltageAlarmLowEnable=isxModularDistSysOutputVoltageAlarmLowEnable, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared, apcmgmt=apcmgmt, emsAlarmDeviceControlEntry=emsAlarmDeviceControlEntry, memVibrationSensorConfigSensorIndex=memVibrationSensorConfigSensorIndex, cpsInfoSerialPortRXBytes=cpsInfoSerialPortRXBytes, pmmInputTotalApparentPower=pmmInputTotalApparentPower, accessPXIdentProductNumber=accessPXIdentProductNumber, battManString1BatteryDryout=battManString1BatteryDryout, powerFramePositionID=powerFramePositionID, pcnsTempOutOfRangeProbe1EnableCommandFile=pcnsTempOutOfRangeProbe1EnableCommandFile, sPDUIdentDateOfManufactureVM=sPDUIdentDateOfManufactureVM, airFMIdent=airFMIdent, dm3StatusAlarmsText=dm3StatusAlarmsText, atsStatusMinus12VPowerSupply=atsStatusMinus12VPowerSupply, isxModularPduIdentMonitorCardFirmwareAppRev=isxModularPduIdentMonitorCardFirmwareAppRev, rPDU2OutletMeteredStatusReceptacleType=rPDU2OutletMeteredStatusReceptacleType, cpsCardConfCardv=cpsCardConfCardv, sPDUOutletConfigMSP=sPDUOutletConfigMSP, rPDU2SensorTempHumidityStatusTempPeakF=rPDU2SensorTempHumidityStatusTempPeakF, airWarningCondition=airWarningCondition, emsInputStateSensorConfig=emsInputStateSensorConfig, pcnsPowerRestoredCommandFileDelay=pcnsPowerRestoredCommandFileDelay, bmBatManChargerAlarm=bmBatManChargerAlarm, cpsCardIdentEntry=cpsCardIdentEntry, sPDUOutletConfigMSPannunEntry=sPDUOutletConfigMSPannunEntry, upsDiagSubSysIntBypSwitchFanLifetimeInfoTable=upsDiagSubSysIntBypSwitchFanLifetimeInfoTable, airPARemoteHumidity=airPARemoteHumidity, airFMSysUPSVlt=airFMSysUPSVlt, dm3ConfigConvConfigAlarm=dm3ConfigConvConfigAlarm, airFMModFireDetector=airFMModFireDetector, memDoorSensorStatusTableSize=memDoorSensorStatusTableSize, airIRRP100GroupSetpointsFanSpeedPreference=airIRRP100GroupSetpointsFanSpeedPreference, mconfigTrapReceiverTable=mconfigTrapReceiverTable, emsInputContactConfigInputContactName=emsInputContactConfigInputContactName, emsVibrationSensorConfigTable=emsVibrationSensorConfigTable, airIRRCUnitThresholdsSupplyAirHighTempMetric=airIRRCUnitThresholdsSupplyAirHighTempMetric, pmmMonitoring=pmmMonitoring, emsProbeStatusEntry=emsProbeStatusEntry, pcnsTempInRangeProbe2=pcnsTempInRangeProbe2, airIRRP500UnitStatusLeavingFluidTemperatureMetric=airIRRP500UnitStatusLeavingFluidTemperatureMetric, dcBatteryBreakerAlarmCleared=dcBatteryBreakerAlarmCleared, emsAlarmDeviceStatusDeviceState=emsAlarmDeviceStatusDeviceState, galaxyVXUPS300kVA=galaxyVXUPS300kVA, airIRmPmEheating4Hysteresis=airIRmPmEheating4Hysteresis, airFMStatusSystemHumidifyEnabled=airFMStatusSystemHumidifyEnabled, atsOutputBank=atsOutputBank, airIRG2GroupStatusMinReturnAirTempMetric=airIRG2GroupStatusMinReturnAirTempMetric, upsBatteryCabinetVoltagePolarity1=upsBatteryCabinetVoltagePolarity1, airIRG3IdentFirmwareRevision=airIRG3IdentFirmwareRevision, xATSNotInAutomaticMode=xATSNotInAutomaticMode, airIRmPmPump3Speed=airIRmPmPump3Speed, powerNetSoftwareSystem=powerNetSoftwareSystem, rPDUOutletConfigOutletPhase=rPDUOutletConfigOutletPhase, bypassWarningError=bypassWarningError, airTrimChiller=airTrimChiller, airFMIdentTableSize=airFMIdentTableSize, upsHighPrecInputMaxLineVoltage=upsHighPrecInputMaxLineVoltage, atsOutputTableIndex=atsOutputTableIndex, atsOutputCurrent=atsOutputCurrent, airIRG3CMRunHoursTable=airIRG3CMRunHoursTable, ePDUPhaseConfigIndex=ePDUPhaseConfigIndex, upsHighPrecBatteryPackTable=upsHighPrecBatteryPackTable, emConfigContactsEntry=emConfigContactsEntry, upsDiagSubSysPSUTableSize=upsDiagSubSysPSUTableSize)
mibBuilder.exportSymbols("PowerNet-MIB", batteryOverTemperatureCleared=batteryOverTemperatureCleared, pmmCriticalCondition=pmmCriticalCondition, rPDUOutletConfigOutletBank=rPDUOutletConfigOutletBank, rARUIdentTable=rARUIdentTable, emConfigProbeHighHumidThreshold=emConfigProbeHighHumidThreshold, pmmInputMeterIndex=pmmInputMeterIndex, pmmOutputApparentEnergyDelivered=pmmOutputApparentEnergyDelivered, upsBatteryFrameLayoutEntry=upsBatteryFrameLayoutEntry, dcmim2StatusBattMfgCapacity=dcmim2StatusBattMfgCapacity, airFMSysOutputTable=airFMSysOutputTable, iemConfigContactLocation=iemConfigContactLocation, airIRG3CMConfigCMID=airIRG3CMConfigCMID, airIRmPmMinLimitWaterTemperatureC=airIRmPmMinLimitWaterTemperatureC, upsDiagSubSysPowerFactorCorrectionTableSize=upsDiagSubSysPowerFactorCorrectionTableSize, pcnsTempOutOfRangeProbe1CommandFilePath=pcnsTempOutOfRangeProbe1CommandFilePath, battManString1BatteryCalibTableSize=battManString1BatteryCalibTableSize, airIRSCGroupStatusCoolOutput=airIRSCGroupStatusCoolOutput, dm3ConfigLVDEntry=dm3ConfigLVDEntry, apCPSRAMSize=apCPSRAMSize, pcnsHumidityOutOfRangeProbe1CommandFilePath=pcnsHumidityOutOfRangeProbe1CommandFilePath, memOutletStatusModuleNumber=memOutletStatusModuleNumber, sPDUMasterConfig=sPDUMasterConfig, rPDUPowerSupplyAlarm=rPDUPowerSupplyAlarm, dm3ConfigSysDescriptionText=dm3ConfigSysDescriptionText, isxModularTotalOutputCurrentLowThresholdViolationCleared=isxModularTotalOutputCurrentLowThresholdViolationCleared, emsOutletStatusOutletName=emsOutletStatusOutletName, accessPXStatusBeaconName=accessPXStatusBeaconName, coolingUnitConfigurationAnalogValue=coolingUnitConfigurationAnalogValue, airIRmPmSensor13Failure=airIRmPmSensor13Failure, dm3StatusConvPcbRev=dm3StatusConvPcbRev, upsHasNoValidFirmware=upsHasNoValidFirmware, battManString2BatteryOpenFuseOrConnection=battManString2BatteryOpenFuseOrConnection, atsCalibrationPowerSupplyVoltageEntry=atsCalibrationPowerSupplyVoltageEntry, upsPhaseOutputMinPercentPower=upsPhaseOutputMinPercentPower, upsSCGMembershipGroupNumber=upsSCGMembershipGroupNumber, airIRmPmCoolingPriority=airIRmPmCoolingPriority, airFMSysInterstageDelay=airFMSysInterstageDelay, pcnsAdvancedShutdownEntry=pcnsAdvancedShutdownEntry, pcnsPowerRestored=pcnsPowerRestored, upsDiagSubSysExternalPowerFrameBoardEntry=upsDiagSubSysExternalPowerFrameBoardEntry, airIRRP500UnitServiceIntervalCondensatePumpAlarm=airIRRP500UnitServiceIntervalCondensatePumpAlarm, dm3StatusInRlyEntry=dm3StatusInRlyEntry, atsConfigLineVRMSMediumLimit=atsConfigLineVRMSMediumLimit, emsVibrationSensorStatusTable=emsVibrationSensorStatusTable, xATSTestingResultsLastCrankDuration=xATSTestingResultsLastCrankDuration, rPDU2SensorTempHumidityConfigTemperatureAlarmEnable=rPDU2SensorTempHumidityConfigTemperatureAlarmEnable, emStatusProbeMaxHumidViolation=emStatusProbeMaxHumidViolation, airIRRP500UnitStatusFluidFlowMetric=airIRRP500UnitStatusFluidFlowMetric, memSensorsTempLongDecRateThreshTime=memSensorsTempLongDecRateThreshTime, sPDUMasterStatusVM=sPDUMasterStatusVM, isxModularHighCurrentThresholdViolation=isxModularHighCurrentThresholdViolation, airIRmPmDrycooler4SummerStartTempF=airIRmPmDrycooler4SummerStartTempF, airFMSysCoilFluidActivDeadbandC=airFMSysCoilFluidActivDeadbandC, masterSwitchV2=masterSwitchV2, airIRG3RDUStatusCondenserOutletPressureUS=airIRG3RDUStatusCondenserOutletPressureUS, isxModularDistSysOutputVoltageMonitoring=isxModularDistSysOutputVoltageMonitoring, airFMSysAlarmMapExpMod2CoolFail=airFMSysAlarmMapExpMod2CoolFail, airIRSCUnitStatusOperateMode=airIRSCUnitStatusOperateMode, pcnsNMCComsLost=pcnsNMCComsLost, chargerIdent=chargerIdent, airIRRCUnitConfigOutputSource=airIRRCUnitConfigOutputSource, dcRectifierFailAlarm=dcRectifierFailAlarm, memOutletStatusAlarmState=memOutletStatusAlarmState, airFMAlarmDescription=airFMAlarmDescription, xATSInputContacts=xATSInputContacts, memSensorsStatusTable=memSensorsStatusTable, ePDUCriticalConditionCleared=ePDUCriticalConditionCleared, upsBatteryTempSensorFaultCleared=upsBatteryTempSensorFaultCleared, airFMModBlwr1RatedHorsePower=airFMModBlwr1RatedHorsePower, coolingUnitExtendedDiscrete=coolingUnitExtendedDiscrete, upsDiagBatteryFirmwareRev=upsDiagBatteryFirmwareRev, upsEnergyEfficiencyStats=upsEnergyEfficiencyStats, upsOpStatsTimeInNormalOperation=upsOpStatsTimeInNormalOperation, airIRRP500GroupSetpointsHumidify=airIRRP500GroupSetpointsHumidify, airFMGroupFailoverSys=airFMGroupFailoverSys, rARUSensorsStatusTableSize=rARUSensorsStatusTableSize, isxModularDistModuleOutputThresholdMax=isxModularDistModuleOutputThresholdMax, pcnsFaultBypassEnabledEnableCommandFile=pcnsFaultBypassEnabledEnableCommandFile, smwInformationalConditionCleared=smwInformationalConditionCleared, airIRSCUnitConfig=airIRSCUnitConfig, rPDU2SensorTempHumidityConfigNumber=rPDU2SensorTempHumidityConfigNumber, pcnsMinRedundancyRegainedCommandFilePath=pcnsMinRedundancyRegainedCommandFilePath, emConfigProbeLowTempThreshold=emConfigProbeLowTempThreshold, pcnsBypassContactorOkEnableCommandFile=pcnsBypassContactorOkEnableCommandFile, airIRmPmPWWHeatingHysteresis=airIRmPmPWWHeatingHysteresis, airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric=airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric, emsSensorStatusEntry=emsSensorStatusEntry, airIRmPmCompressor1=airIRmPmCompressor1, memOutputs=memOutputs, upsDiagBatteryManufactureDate=upsDiagBatteryManufactureDate, airIRG3CMServiceIntervalsDeviceIndex=airIRG3CMServiceIntervalsDeviceIndex, pmmOutputMeterNum=pmmOutputMeterNum, airFMModRHBlwrCtrl1=airFMModRHBlwrCtrl1, battManDCCurrentZeroCalib=battManDCCurrentZeroCalib, airIRSCUnitSetptsSupplyAirSetpointUS=airIRSCUnitSetptsSupplyAirSetpointUS, airIRRCUnitRunHoursFanPowerSupplyFeedBLeft=airIRRCUnitRunHoursFanPowerSupplyFeedBLeft, rPDU2SensorDiscreteStatusAlarmState=rPDU2SensorDiscreteStatusAlarmState, upsMpuReset=upsMpuReset, sPDUMasterControlMSPCommand=sPDUMasterControlMSPCommand, airFMSysAlarmMapExpMod2TableSize=airFMSysAlarmMapExpMod2TableSize, airPABlowerSpeed=airPABlowerSpeed, memFluidStatusAlarmStatus=memFluidStatusAlarmStatus, apcDcBusOverVoltage=apcDcBusOverVoltage, masterSwitch=masterSwitch, pduCommunicationEstablished=pduCommunicationEstablished, upsDiagnosticSLCSerialNum=upsDiagnosticSLCSerialNum, rPDU2IdentName=rPDU2IdentName, airFMSysAlarmMapExpMod2LowSupplyTemp=airFMSysAlarmMapExpMod2LowSupplyTemp, airIRRP100UnitStatusSuctionPressureMetric=airIRRP100UnitStatusSuctionPressureMetric, airFMModComp1=airFMModComp1, airIRRP100UnitServiceIntervalCompressorAlarm=airIRRP100UnitServiceIntervalCompressorAlarm, airIRRP100UnitStatusRackInletTemperature1Metric=airIRRP100UnitStatusRackInletTemperature1Metric, airIRRCGroupSetpointsCoolUS=airIRRCGroupSetpointsCoolUS, sPDUMasterStatusMSPIndex=sPDUMasterStatusMSPIndex, airIRG3GroupConfigCapacityControlType=airIRG3GroupConfigCapacityControlType, airIRG3RDUThresholdsEnteringFluidTempHighMetric=airIRG3RDUThresholdsEnteringFluidTempHighMetric, airFMSysLowSplyTempF=airFMSysLowSplyTempF, pcnsNetworkConfig=pcnsNetworkConfig, airFMModBlwr1Current=airFMModBlwr1Current, iemConfigProbesTable=iemConfigProbesTable, symmetra3PhaseUPS20kVA=symmetra3PhaseUPS20kVA, uioOutputRelayConfigDelay=uioOutputRelayConfigDelay, rARUConfig=rARUConfig, pcnsHumidityOutOfRangeProbe2CommandFileDelay=pcnsHumidityOutOfRangeProbe2CommandFileDelay, emConfigProbeMinTempEnable=emConfigProbeMinTempEnable, airFMModWaterConductivity=airFMModWaterConductivity, battManConfigMaxAmbientTempC=battManConfigMaxAmbientTempC, upsDiagUsrSuppSwitchgearMonitorHardwareRev=upsDiagUsrSuppSwitchgearMonitorHardwareRev, memSensorsTempMaxThresh=memSensorsTempMaxThresh, galaxyVMUPS130kVA=galaxyVMUPS130kVA, airFMModBlwr1ActFreq=airFMModBlwr1ActFreq, emsDoorSensorStatusSensorSeverity=emsDoorSensorStatusSensorSeverity, pcbeCriticalEventActive=pcbeCriticalEventActive, xPDUMainInputVoltageLtoL=xPDUMainInputVoltageLtoL, xATSSource2Index=xATSSource2Index, airFMIdentModuleModelNumber=airFMIdentModuleModelNumber, accessPXConfigBeaconName=accessPXConfigBeaconName, rPDU2DeviceStatusPowerSupplyAlarm=rPDU2DeviceStatusPowerSupplyAlarm, emsDoorSensorConfigSensorLocation=emsDoorSensorConfigSensorLocation, airIRG3RDUStatusStartupDelay=airIRG3RDUStatusStartupDelay, xPDUBranchCurrentMaxAlarm=xPDUBranchCurrentMaxAlarm, upsAdvBatteryRunTimeRemaining=upsAdvBatteryRunTimeRemaining, uioSensorStatusSensorLocation=uioSensorStatusSensorLocation, xPDUEpoTestMode=xPDUEpoTestMode, pmmBranchCircuitMeterIndex=pmmBranchCircuitMeterIndex, airFMSysAlarmMapExpMod2WaterDetected=airFMSysAlarmMapExpMod2WaterDetected, upsSideCarFrameLayoutEntry=upsSideCarFrameLayoutEntry, upsBasicConfig=upsBasicConfig, airIRmPmPump4LinearRangeK=airIRmPmPump4LinearRangeK, uioOutputRelayConfigHold=uioOutputRelayConfigHold, apcOutputShortCircuitCleared=apcOutputShortCircuitCleared, pcnsBypassContactorFailedEnableLogging=pcnsBypassContactorFailedEnableLogging, sPDUOutletConfigMSPgsTable=sPDUOutletConfigMSPgsTable, xATSSystemOutputPhaseEntry=xATSSystemOutputPhaseEntry, ePDUPhaseConfigLowCurrentThreshold=ePDUPhaseConfigLowCurrentThreshold, airFMSysRemoteSensorData=airFMSysRemoteSensorData, dm3StatusConvDevType=dm3StatusConvDevType, pcnsMinLoadCapabilityLostEnableLogging=pcnsMinLoadCapabilityLostEnableLogging, wirelessSensorStatusHighHumidityThresh=wirelessSensorStatusHighHumidityThresh, emsInputContactConfigInputContactIndex=emsInputContactConfigInputContactIndex, upsDiagSubSysIDRCFirmwareRev=upsDiagSubSysIDRCFirmwareRev, airIRRP100UnitStatusRackInletTemperature1US=airIRRP100UnitStatusRackInletTemperature1US, upsDiagSubSysInverterTable=upsDiagSubSysInverterTable, xPDUSystemOutputPower=xPDUSystemOutputPower, coolingUnitExtendedAnalogTableSize=coolingUnitExtendedAnalogTableSize, upsOutletGroupControl=upsOutletGroupControl, pcnsHttpPort=pcnsHttpPort, airIRmPmPump4ControlCycle=airIRmPmPump4ControlCycle, airIRRP500UnitServiceIntervals=airIRRP500UnitServiceIntervals, airIRmPmPump1Failure=airIRmPmPump1Failure, atsConfigLineVRMS=atsConfigLineVRMS, pduUPSInputVoltageRestored=pduUPSInputVoltageRestored, airIRmPmGECWvalveLinearRangeK=airIRmPmGECWvalveLinearRangeK, airIRmPmPump4LinearRangeF=airIRmPmPump4LinearRangeF, xPDUSystemOutputPhaseTable=xPDUSystemOutputPhaseTable, cpsAP930xInfo=cpsAP930xInfo, airIRmPmPump4LinearRange=airIRmPmPump4LinearRange, rPDU2SensorTempHumidity=rPDU2SensorTempHumidity, rPDU2OutletMeteredPropertiesName=rPDU2OutletMeteredPropertiesName, atsCalibration=atsCalibration, battManUnitCalib=battManUnitCalib, rPDUOutletStatusOutletName=rPDUOutletStatusOutletName, upsDiagUnitControllerTableSize=upsDiagUnitControllerTableSize, airIRRCUnitConfig=airIRRCUnitConfig, isxModularDistSubFeedInfoKwhResetDate=isxModularDistSubFeedInfoKwhResetDate, rPDU2OutletSwitchedControlEntry=rPDU2OutletSwitchedControlEntry, ePDUPhaseTableSize=ePDUPhaseTableSize, upsTurnedOn=upsTurnedOn, galaxyVXUPS1000kVA=galaxyVXUPS1000kVA, upsDiagSubSysChargerTableSize=upsDiagSubSysChargerTableSize, airFMSysAlarmMapOutput15=airFMSysAlarmMapOutput15, uioInputContact=uioInputContact, airFMSysNumPCIOMs=airFMSysNumPCIOMs, smartUPS5000=smartUPS5000, sPDUOutletStatusMSPOutletCtrlMode=sPDUOutletStatusMSPOutletCtrlMode, apcDoorUnlocked=apcDoorUnlocked, airIRG3CMRunHoursFan2=airIRG3CMRunHoursFan2, cpsCardStatusTable=cpsCardStatusTable, pmmInputEnergyUsageAccumulatedTotal=pmmInputEnergyUsageAccumulatedTotal, rPDUStatusBankEntry=rPDUStatusBankEntry, airIRG3CMRunHoursFan4=airIRG3CMRunHoursFan4, xATSDeviceTransferSwitchRating=xATSDeviceTransferSwitchRating, xATSOutputLoadPoweredByGeneratorAlarmCleared=xATSOutputLoadPoweredByGeneratorAlarmCleared, hardwareFailureBypass=hardwareFailureBypass, rPDU2SensorTempHumidityConfigTempHysteresisC=rPDU2SensorTempHumidityConfigTempHysteresisC, airFMGroupSysManualRoleSetting=airFMGroupSysManualRoleSetting, memFluidSensorConfigSensorLocation=memFluidSensorConfigSensorLocation, airIRG2GroupConfigLoadAssistEnable=airIRG2GroupConfigLoadAssistEnable, upsHighPrecBatteryCurrentTable=upsHighPrecBatteryCurrentTable, cpsMotd=cpsMotd, airFMModCoolEntry=airFMModCoolEntry, airIRRP100UnitConfigCoolCapacity=airIRRP100UnitConfigCoolCapacity, pcnsNetCommunicationLostDesc=pcnsNetCommunicationLostDesc, airIRmPmEheating4HysteresisK=airIRmPmEheating4HysteresisK, mfiletransferConfigTFTP=mfiletransferConfigTFTP, mfiletransferConfigSettingsFilename=mfiletransferConfigSettingsFilename, airIRRP500=airIRRP500, airIRG3GroupConfigConfigurationType=airIRG3GroupConfigConfigurationType, pcnsCommunicationEstablishedEnableCommandFile=pcnsCommunicationEstablishedEnableCommandFile, upsDiagSubSysPSUIndex=upsDiagSubSysPSUIndex, upsAdvInputPeakCurrent=upsAdvInputPeakCurrent, isxModularDistSysPowerPhaseIndex=isxModularDistSysPowerPhaseIndex, pcnsAdvancedGroupNo=pcnsAdvancedGroupNo, airIRRCGroupSetpoints=airIRRCGroupSetpoints, apCPSSave=apCPSSave, accPX=accPX, ePDUOutletControlNumber=ePDUOutletControlNumber, memModulesConfigModuleNumber=memModulesConfigModuleNumber, upsParallelDiagSubSysBreakerTable=upsParallelDiagSubSysBreakerTable, dm3ConfigSysHighTempThresh=dm3ConfigSysHighTempThresh, airIRRP500GroupStatus=airIRRP500GroupStatus, pcnsRunTimeWithinRangeCommandFilePath=pcnsRunTimeWithinRangeCommandFilePath, uioSensorStatusAlarmStatus=uioSensorStatusAlarmStatus, apcEnvHighHumidityThresholdViolation=apcEnvHighHumidityThresholdViolation, isxModularDistSysOutputVoltageAlarmMinEnable=isxModularDistSysOutputVoltageAlarmMinEnable, memOutletConfigOutletNumber=memOutletConfigOutletNumber, isxModularDistSysPowerKwhResetDate=isxModularDistSysPowerKwhResetDate, airIRG3GroupSetpointsIndex=airIRG3GroupSetpointsIndex, dcmim2StatusAlarmsTableSize=dcmim2StatusAlarmsTableSize, pmmInputBreakerState=pmmInputBreakerState, airIRG3RDURunHoursTable=airIRG3RDURunHoursTable, airFMModElectrodeCurrent=airFMModElectrodeCurrent, aruHighTemperatureAlarmCleared=aruHighTemperatureAlarmCleared, xPDUDataCommMismatchError=xPDUDataCommMismatchError, battManConfigMaxCurrentAcceptanceDeviation=battManConfigMaxCurrentAcceptanceDeviation, chargerBasicIdentName=chargerBasicIdentName, airIRRP500UnitStatusFanSpeed=airIRRP500UnitStatusFanSpeed, coolingUnitExtendedDiscreteTable=coolingUnitExtendedDiscreteTable, upsAdvStateTotaltimeonNormal=upsAdvStateTotaltimeonNormal, airIRRP500GroupSetpointsDehumidifyDeadband=airIRRP500GroupSetpointsDehumidifyDeadband, dm3StatusBattery=dm3StatusBattery, wirelessSensorPodConfigLocation=wirelessSensorPodConfigLocation, airIRRCGroupConfigCoolGainP=airIRRCGroupConfigCoolGainP, airIRRP100UnitStatusSupplyHumidity=airIRRP100UnitStatusSupplyHumidity)
mibBuilder.exportSymbols("PowerNet-MIB", sPDUIdentVMIndex=sPDUIdentVMIndex, airIRG2RDT2ConfigOutputSource=airIRG2RDT2ConfigOutputSource, upsAdvConfigACWiringSetting=upsAdvConfigACWiringSetting, airIRmAlarmsTableSize=airIRmAlarmsTableSize, battManStringCalibIndex=battManStringCalibIndex, airIRG2RDT2ConfigOHEInputNormalState=airIRG2RDT2ConfigOHEInputNormalState, airIRmPmSensor6Failure=airIRmPmSensor6Failure, airIRmPmUnitEvaporationPressure2=airIRmPmUnitEvaporationPressure2, airFMModSupplyTempF=airFMModSupplyTempF, xPDUOutputVoltageHighAlarm=xPDUOutputVoltageHighAlarm, rPDULoadBankConfig=rPDULoadBankConfig, airIRmPmMaxLimitReturnAirTemperature=airIRmPmMaxLimitReturnAirTemperature, xATSGeneratorGroundFaultAlarm=xATSGeneratorGroundFaultAlarm, coolingUnitConfigurationAnalogUnits=coolingUnitConfigurationAnalogUnits, pcnsBatteryDischargedEnableLogging=pcnsBatteryDischargedEnableLogging, battManAlarm=battManAlarm, battManProbeRange=battManProbeRange, airFMSysElectricReheatDmd=airFMSysElectricReheatDmd, cpsSerialPortBreakInterval=cpsSerialPortBreakInterval, upsDiagSubSysInverterStatus=upsDiagSubSysInverterStatus, upsDCOutputStatusTableIndex=upsDCOutputStatusTableIndex, envMinTempThresholdViolation=envMinTempThresholdViolation, pcnsRunTimeWithinRangeCommandFileDelay=pcnsRunTimeWithinRangeCommandFileDelay, pcnsContactFault3CommandFileDelay=pcnsContactFault3CommandFileDelay, airIRG3IdentName=airIRG3IdentName, atsStatus1Dot0VPowerSupply=atsStatus1Dot0VPowerSupply, isxModularPduIdentMonitorCardSerialNumber=isxModularPduIdentMonitorCardSerialNumber, battManUnitSerialNumber=battManUnitSerialNumber, isxModularDistSubFeedInfoThresholdLow=isxModularDistSubFeedInfoThresholdLow, dcmim2StatusBattTemp=dcmim2StatusBattTemp, airIRG3CMStatusRackInletTempUS=airIRG3CMStatusRackInletTempUS, isxModularDistSubFeedLoadingCurrent=isxModularDistSubFeedLoadingCurrent, emsAlarmDeviceControlTable=emsAlarmDeviceControlTable, airIRRP100UnitThresholdsSupplyHumidityHigh=airIRRP100UnitThresholdsSupplyHumidityHigh, AirIRmControlState=AirIRmControlState, isxModularDistSubFeedInfoAlarmHighEnable=isxModularDistSubFeedInfoAlarmHighEnable, battManSystemAmbientTempC=battManSystemAmbientTempC, pcnsMinRedundancyLostDesc=pcnsMinRedundancyLostDesc, memInputNormalState=memInputNormalState, memVibrationSensorConfigTable=memVibrationSensorConfigTable, upsParallelMinNumOfRequiredUps=upsParallelMinNumOfRequiredUps, rackAirRemovalUnit=rackAirRemovalUnit, upsDiagComBusInternalRIMStatus=upsDiagComBusInternalRIMStatus, airIRRCGroupSetpointsSupplyAirMetric=airIRRCGroupSetpointsSupplyAirMetric, airIRRCUnit=airIRRCUnit, dm3IdentSysCntrlRev=dm3IdentSysCntrlRev, airIRmPmFan2ManOpEnable=airIRmPmFan2ManOpEnable, airIRRP100UnitServiceIntervals=airIRRP100UnitServiceIntervals, upsHighPrecBatteryPackStatus=upsHighPrecBatteryPackStatus, airIRRCUnitRunHoursCondensatePump=airIRRCUnitRunHoursCondensatePump, dm3IdentSysDescriptionIndex=dm3IdentSysDescriptionIndex, xATSIdentFirmwareAppOSRev=xATSIdentFirmwareAppOSRev, rPDUOutletConfigEntry=rPDUOutletConfigEntry, xATSGeneratorVeryLowOilPressureCleared=xATSGeneratorVeryLowOilPressureCleared, memBeaconConfigEntry=memBeaconConfigEntry, upsParallelOutputApparentPower=upsParallelOutputApparentPower, cpsSerialDBFacility=cpsSerialDBFacility, sPDUOutletStatusMSPEntry=sPDUOutletStatusMSPEntry, airIRmPmCompressor1Failure=airIRmPmCompressor1Failure, rPDUOutletControl=rPDUOutletControl, xATSOutputRelayName=xATSOutputRelayName, emConfigContactsTable=emConfigContactsTable, airFMGroupFailoverModLossOrLowAirFlow=airFMGroupFailoverModLossOrLowAirFlow, isxModularDistModuleBreakerTable=isxModularDistModuleBreakerTable, airIRG3IdentIndex=airIRG3IdentIndex, rPDU2PhaseConfigIndex=rPDU2PhaseConfigIndex, upsBatteryCabStringMaxTemperature=upsBatteryCabStringMaxTemperature, rPDU2DevicePropertiesIndex=rPDU2DevicePropertiesIndex, wirelessSensorPodStatusIndex=wirelessSensorPodStatusIndex, xPDUBypassInputVoltageLtoL=xPDUBypassInputVoltageLtoL, airIRmPmMyZoneSequencingTime=airIRmPmMyZoneSequencingTime, upsDiagSubSysPSUEntry=upsDiagSubSysPSUEntry, airPASetpointTempC=airPASetpointTempC, airIRRP100UnitIdent=airIRRP100UnitIdent, dcmim2ConfigLVD=dcmim2ConfigLVD, airFMGroupFailoverSysFireAlarm=airFMGroupFailoverSysFireAlarm, upsBatteryCabBlockCellTable=upsBatteryCabBlockCellTable, emsOutletStatusTable=emsOutletStatusTable, rPDU2SensorTempHumidityStatusEntry=rPDU2SensorTempHumidityStatusEntry, airIRmAlarmsIndex=airIRmAlarmsIndex, airIRmPmSupplyAirTemperatureC=airIRmPmSupplyAirTemperatureC, upsInverterOverTemperature=upsInverterOverTemperature, coolingUnitConfiguration=coolingUnitConfiguration, ePDUDeviceControlTable=ePDUDeviceControlTable, upsDiagSubSysUsrSuppBattMonitorTable=upsDiagSubSysUsrSuppBattMonitorTable, airFMSysAlarmMapExpMod2BlwrCntl1Fail=airFMSysAlarmMapExpMod2BlwrCntl1Fail, airIRRCUnitStatusLeavingFluidTemperatureUS=airIRRCUnitStatusLeavingFluidTemperatureUS, apcLocalDisplayIdentSerialNumber=apcLocalDisplayIdentSerialNumber, coolingUnitExtendedDiscreteDescription=coolingUnitExtendedDiscreteDescription, xATSGeneratorServiceRecordResetDate=xATSGeneratorServiceRecordResetDate, airIRRP500UnitRunHoursHeater3=airIRRP500UnitRunHoursHeater3, galaxyVMUPS90kVA=galaxyVMUPS90kVA, airFMSysOutputNormalState=airFMSysOutputNormalState, atsOutputCurrentCalibrationFactor=atsOutputCurrentCalibrationFactor, pcnsHumidityInRangeProbe1CommandFilePath=pcnsHumidityInRangeProbe1CommandFilePath, memInputAnalogCalibrationPoint5Value=memInputAnalogCalibrationPoint5Value, emsAlarmDeviceControlDeviceCommand=emsAlarmDeviceControlDeviceCommand, airFMSysCompMinOnTime=airFMSysCompMinOnTime, cpsCardStatusFunc=cpsCardStatusFunc, atsOutputPhaseIndex=atsOutputPhaseIndex, airIRmPmEEV1StepperMotorError=airIRmPmEEV1StepperMotorError, masterswitchVM=masterswitchVM, apcEnvHighHumidityThresholdViolationCleared=apcEnvHighHumidityThresholdViolationCleared, iemStatusProbeMinHumidViolation=iemStatusProbeMinHumidViolation, apcEnvMinTempThresholdViolationCleared=apcEnvMinTempThresholdViolationCleared, xATSSwitchBlockMapEntry=xATSSwitchBlockMapEntry, airIRG2AlarmsEntry=airIRG2AlarmsEntry, emConfigProbeMinHumidEnable=emConfigProbeMinHumidEnable, uioSensorConfigSensorName=uioSensorConfigSensorName, airIRG3GroupStatusAvgReturnTempUS=airIRG3GroupStatusAvgReturnTempUS, airFMStatusSystemRemoteLowTempC=airFMStatusSystemRemoteLowTempC, airIRRCGroupConfigConfigurationType=airIRRCGroupConfigConfigurationType, rPDU2SensorTempHumidityConfigModule=rPDU2SensorTempHumidityConfigModule, airFMSysPrimaryControlSensor=airFMSysPrimaryControlSensor, xPDUSystemGroundCurrentAlarmCleared=xPDUSystemGroundCurrentAlarmCleared, rARUFanStatus=rARUFanStatus, memBeaconStatusEntry=memBeaconStatusEntry, rPDUOutletBankEntry=rPDUOutletBankEntry, dcCommunicationLost=dcCommunicationLost, pcnsContactFault2CommandFileDelay=pcnsContactFault2CommandFileDelay, upsPhaseInputMinPower=upsPhaseInputMinPower, rARUPowerStatusEntry=rARUPowerStatusEntry, rintelligenceModuleRemoved=rintelligenceModuleRemoved, upsParallelInputPhaseTableIndex=upsParallelInputPhaseTableIndex, xPDUSystemBreakerPosition=xPDUSystemBreakerPosition, airIRRP500GroupConfigPercentGlycol=airIRRP500GroupConfigPercentGlycol, airIRmPmHumidifier2Hysteresis=airIRmPmHumidifier2Hysteresis, xATSGeneratorFuelTankRuptureAlarmCleared=xATSGeneratorFuelTankRuptureAlarmCleared, galaxy9000UPS=galaxy9000UPS, dm3ConfigConvSetPoint=dm3ConfigConvSetPoint, subfeedBreakerUpperAcceptPowerWarning=subfeedBreakerUpperAcceptPowerWarning, xATSTestingResultsTestLastTestTime=xATSTestingResultsTestLastTestTime, airFMSysReheatPIDGainP=airFMSysReheatPIDGainP, upsBatteryCabBlockCellLocalIndex=upsBatteryCabBlockCellLocalIndex, xATSGeneratorFuelSystemLowRunTimeThreshold=xATSGeneratorFuelSystemLowRunTimeThreshold, airFMSysStartupDelay=airFMSysStartupDelay, emsOutputRelayControl=emsOutputRelayControl, battManString2OhmicValueLastDischargeInfo=battManString2OhmicValueLastDischargeInfo, airIRRCUnitStatusAirFlowMetric=airIRRCUnitStatusAirFlowMetric, upsEcoModeHighVoltThreshold=upsEcoModeHighVoltThreshold, airIRG2GroupConfigCoolResetRateI=airIRG2GroupConfigCoolResetRateI, airFMSysNumModules=airFMSysNumModules, dm3ConfigSysLowTempAlarm=dm3ConfigSysLowTempAlarm, upsDipSwitchChanged=upsDipSwitchChanged, airFMModBlwr1InverterTempC=airFMModBlwr1InverterTempC, xPDUDeviceMainInputBreakerRating=xPDUDeviceMainInputBreakerRating, atsOutputBankCurrent=atsOutputBankCurrent, rPDU2OutletSwitchedConfigName=rPDU2OutletSwitchedConfigName, xATSOutputRelayCurrentState=xATSOutputRelayCurrentState, pcnsRunTimeWithinRange=pcnsRunTimeWithinRange, upsHighPrecBatteryTemperature=upsHighPrecBatteryTemperature, sPDUOutletConfigTableSize=sPDUOutletConfigTableSize, airIRG3CMConfigPowerSource=airIRG3CMConfigPowerSource, airFMModStatusTable=airFMModStatusTable, upsAdvIdentDateOfManufacture=upsAdvIdentDateOfManufacture, airIRG2RDT2StatusCoolDemand=airIRG2RDT2StatusCoolDemand, apcOutputRelayFault=apcOutputRelayFault, upsPowerFrameLayoutTable=upsPowerFrameLayoutTable, coolingUnitConfigurationDiscreteTableSize=coolingUnitConfigurationDiscreteTableSize, atsNumOutputs=atsNumOutputs, emsOutletControlOutletName=emsOutletControlOutletName, apcEnvMaxTempThresholdViolation=apcEnvMaxTempThresholdViolation, xATSSystemOutputFrequencyTolerance=xATSSystemOutputFrequencyTolerance, cpsSerialPortLogUtmp=cpsSerialPortLogUtmp, airFMModReturnTempC=airFMModReturnTempC, uioSensorConfigTemperatureHysteresis=uioSensorConfigTemperatureHysteresis, airIRG3IdentTable=airIRG3IdentTable, atsHardwareStatusFail=atsHardwareStatusFail, upsDiagSubSysbackfeedContactorName=upsDiagSubSysbackfeedContactorName, atsOutputVoltage=atsOutputVoltage, dcmim2Control=dcmim2Control, upsDiagSubSysNetworkComCardTable=upsDiagSubSysNetworkComCardTable, isxModularDistSysOutputVoltageThresholdLow=isxModularDistSysOutputVoltageThresholdLow, airFMModServIntHumReset=airFMModServIntHumReset, dm3StatusConvDesc=dm3StatusConvDesc, airIRG2RDT2StatusSupplyAirTempMetric=airIRG2RDT2StatusSupplyAirTempMetric, airIRRP100UnitStatusLeakSensor=airIRRP100UnitStatusLeakSensor, galaxyVSUPS120kW=galaxyVSUPS120kW, rPDU2SensorTempHumidityConfigEntry=rPDU2SensorTempHumidityConfigEntry, mtrapargsOctetString03=mtrapargsOctetString03, airIRG2RDT2StatusReturnAirTempUS=airIRG2RDT2StatusReturnAirTempUS, airIRmPmDrycooler1WinterStartTempC=airIRmPmDrycooler1WinterStartTempC, xATSSwitchBlockMapSetting=xATSSwitchBlockMapSetting, airFMGroupLoadShareCoolThreshF=airFMGroupLoadShareCoolThreshF, apcHandleClosed=apcHandleClosed, airIRmPmPump2StartTemperatureK=airIRmPmPump2StartTemperatureK, airFMGroupFailoverModBlwrCntrl1Fail=airFMGroupFailoverModBlwrCntrl1Fail, masterSwitchV1=masterSwitchV1, eps6000SSC=eps6000SSC, xATSGeneratorAdvStatusEngineRPM=xATSGeneratorAdvStatusEngineRPM, xATSOutputVoltageHighAlarm=xATSOutputVoltageHighAlarm, pduNoPanelFeedMode=pduNoPanelFeedMode, rARUSensorsTempShortDecRateThreshTime=rARUSensorsTempShortDecRateThreshTime, airIRRP500UnitStatusLeakSensor=airIRRP500UnitStatusLeakSensor, upsAdvBatteryCurrentPolarity=upsAdvBatteryCurrentPolarity, isxModularPduAlarmStatus=isxModularPduAlarmStatus, iemContactFaultCleared=iemContactFaultCleared, upsDiagPMLifetimeInfoIndex=upsDiagPMLifetimeInfoIndex, emsSensorFault=emsSensorFault, cpsSerialPortLogWtmp=cpsSerialPortLogWtmp, uioSensorConfigMinTemperatureEnable=uioSensorConfigMinTemperatureEnable, airPAHardwareRevision=airPAHardwareRevision, sPDUOutletControlVMEntry=sPDUOutletControlVMEntry, airIRG3RDUServiceIntervalsTable=airIRG3RDUServiceIntervalsTable, pcnsAdvancedShutdownTable=pcnsAdvancedShutdownTable, isxModularTotalOutputCurrentLowThresholdViolation=isxModularTotalOutputCurrentLowThresholdViolation, apcUserScheduleViolation=apcUserScheduleViolation, airIRmPmPWWHeatingManOpRunning=airIRmPmPWWHeatingManOpRunning, pcnsRunTimeAboveThresholdEnableLogging=pcnsRunTimeAboveThresholdEnableLogging, isxModularDistSysOutputVoltageThresholdMin=isxModularDistSysOutputVoltageThresholdMin, xATSIdentDateOfManufacture=xATSIdentDateOfManufacture, pmmOutputPhaseLossThreshold=pmmOutputPhaseLossThreshold, isxModularBreakerOpenAlarm=isxModularBreakerOpenAlarm, rPDU2PhaseStatusPeakCurrentTimestamp=rPDU2PhaseStatusPeakCurrentTimestamp, airFMSysInputTable=airFMSysInputTable, airIRRP500UnitStatusContainmtDPUS=airIRRP500UnitStatusContainmtDPUS, airIRmPmHumidifier1=airIRmPmHumidifier1, eps7000UPS=eps7000UPS, pcnsPowerFailedCommandFilePath=pcnsPowerFailedCommandFilePath, airFMModOutputCapacity=airFMModOutputCapacity, rpduInformationalConditionCleared=rpduInformationalConditionCleared, emsProbeConfigProbeLowTempThresh=emsProbeConfigProbeLowTempThresh, memSensorsStatusSensorLocation=memSensorsStatusSensorLocation, accessPXConfigBeacon=accessPXConfigBeacon, dm3ConfigConvFailMax=dm3ConfigConvFailMax, rPDU2DeviceTableSize=rPDU2DeviceTableSize, currentStatus=currentStatus, xPDUBranchBreakerOverCurrentThreshold=xPDUBranchBreakerOverCurrentThreshold, cpsSerialPortRemHost=cpsSerialPortRemHost, rPDU2DeviceStatusNPSType=rPDU2DeviceStatusNPSType, pmmOutputPhaseTable=pmmOutputPhaseTable, dm3=dm3, dcmim2StatusAlarmsIndex=dcmim2StatusAlarmsIndex, airIRG2RDT2RunHoursFanPSPosition=airIRG2RDT2RunHoursFanPSPosition, airIRRP500GroupConfigRuntimeBalancingEnable=airIRRP500GroupConfigRuntimeBalancingEnable, uioSensorConfigEntry=uioSensorConfigEntry, airIRRP500GroupStatusHumidifyOutput=airIRRP500GroupStatusHumidifyOutput, isxModularDistSubFeedLoadingTableSize=isxModularDistSubFeedLoadingTableSize)
