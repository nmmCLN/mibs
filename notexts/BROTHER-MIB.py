#
# PySNMP MIB module BROTHER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/brother/BROTHER-MIB
# Produced by pysmi-1.1.8 at Thu Jan  5 08:59:30 2023
# On host fv-az351-145 platform Linux version 5.15.0-1024-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, enterprises, IpAddress, Gauge32, iso, Bits, ModuleIdentity, Counter64, ObjectIdentity, MibIdentifier, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32", "enterprises", "IpAddress", "Gauge32", "iso", "Bits", "ModuleIdentity", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "Counter32")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
brother = MibIdentifier((1, 3, 6, 1, 4, 1, 2435))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4))
net_peripheral = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9)).setLabel("net-peripheral")
net_printer = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1)).setLabel("net-printer")
net_MFP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2)).setLabel("net-MFP")
netPML = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4))
generalDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1))
fax_setup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1)).setLabel("fax-setup")
scanner_setup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 11)).setLabel("scanner-setup")
mfpCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101))
mfpgeneral_setup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 111)).setLabel("mfpgeneral-setup")
netPMLmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2))
autodial = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1))
fax_general = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 2)).setLabel("fax-general")
onetouchDial = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1))
speedDial = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2))
scanToInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 11, 1))
mcGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 1))
mcFax = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2))
mcScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3))
mcgRemoteSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 1, 11))
mcfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 1))
mcfNetFaxShare = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 11))
mcfNetPcFaxRx = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 12))
mcfFaxInfomation = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 101))
mcsNetScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 11))
mcsNetSKy = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 12))
tonerlow = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 10))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1))
destination_subsystem1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1)).setLabel("destination-subsystem1")
sleep = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 1))
autoc = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 2))
simm = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4))
specification = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1))
simmkind0 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1))
simmkind1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2))
simmkind2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 3))
simmkind3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 4))
bio1_explanation = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 3)).setLabel("bio1-explanation")
determined = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 3, 1))
destination_subsystem2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 2)).setLabel("destination-subsystem2")
printerjob = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 2, 1))
jobend = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 2, 1, 1))
destination_subsystem3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3)).setLabel("destination-subsystem3")
prt_setup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3)).setLabel("prt-setup")
prt_condition = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1)).setLabel("prt-condition")
destination_subsystem4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4)).setLabel("destination-subsystem4")
print_engine = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1)).setLabel("print-engine")
prt_density = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 1)).setLabel("prt-density")
status_prt_eng = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 2)).setLabel("status-prt-eng")
tray = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3))
economy = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 6))
manual = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1))
traysize = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3))
mp = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 1))
cassette = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 2))
cassette2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 3))
cassette3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 4))
cassette4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 5))
brorg = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5))
printersetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1))
pagesetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2))
fontsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 3))
controlpanel = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4))
printerinfomation = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5))
printerstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 6))
secret = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7))
adminsetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1))
advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2))
mail = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3))
finisher = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 4))
catch_tray = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 5)).setLabel("catch-tray")
autoff = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 7))
buzzer = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 22))
smallPaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51))
trayPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52))
carbonCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53))
mediaFix = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54))
directprint = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60))
pictbridge = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61))
colorcorrection = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62))
pcl = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1))
ps = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 2))
gl = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3))
epson = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5))
margin_p = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1)).setLabel("margin-p")
auto_p = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 2)).setLabel("auto-p")
pen1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 1))
pen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 2))
pen3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 3))
pen4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 4))
pen5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 5))
pen6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 6))
margin_e = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1)).setLabel("margin-e")
auto_e = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 2)).setLabel("auto-e")
margin_i = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1)).setLabel("margin-i")
auto_i = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 2)).setLabel("auto-i")
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 1))
test = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 2))
panellock = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 3))
key = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4))
panelinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5))
version = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 3))
errorHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51))
printPages = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52))
capability = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53))
countinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54))
copies = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 1))
orientation = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2))
paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3))
mediatype = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4))
resolution = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5))
pfkit = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1))
scancount = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2))
clockfunction = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8, 1))
npCard = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3))
npSys = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1))
npConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 1))
adminCapa = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 99))
userSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 100))
verify = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 101))
npTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 6))
lpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 6, 99))
banner = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 6, 99, 1))
npCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 7))
etherN = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 7, 99))
eNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 7, 99, 1))
npPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 13))
funa = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 13, 10))
npSet = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1))
pushstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2))
pjl = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3))
eMailReports = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4))
pjlinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1))
priadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 2))
secadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 3))
brnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240))
brconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1))
brcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2))
brport = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3))
brservice = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4))
brprotocol = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5))
brfirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6))
brlat = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1))
brtcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2))
brnetware = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3))
brappletalk = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4))
brbanyan = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5))
bremail = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6))
brdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7))
brnetbeui = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8))
bripp = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9))
brntsend = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 10))
brnetConfigOpt = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435))
broriginalprotocol = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5))
broriginaltcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 2))
broriginalftp = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 10))
broriginalupnp = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 11))
broriginalapipa = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 12))
broriginalmdns = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 13))
broriginalLAA = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 14))
broriginalIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 15))
broriginaltelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 16))
broriginalEWS = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 17))
broriginalSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18))
broriginalldap = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19))
broriginalTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 20))
broriginalHTTPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 21))
broriginalLPD = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 22))
broriginalRawPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 23))
broriginalLLTD = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 24))
broriginalWebServices = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 25))
broriginalLLMNR = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 26))
broriginalSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100))
broriginalinternetsetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10))
broriginalproxy = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1))
broriginalOtherSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20))
broriginalJobTermination = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 1))
broriginalSNMPTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 2))
broriginalLegacy = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 3))
brSecurityGeneralStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 1))
brSecurityGeneralSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 2))
brSecurityDeviceNegotiation = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 10))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100))
wlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1))
wlCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1))
wlGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 2))
wlNetSearch = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11))
wlAOSS = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 12))
wlSES = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 13))
wlWPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 14))
wlSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11))
wlGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1))
wlAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5))
wlAssociate = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11))
wlWEP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101))
wlWPA = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 102))
wlTKIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 103))
wlLEAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 104))
wlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21))
wlGeneralStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1))
npMultiCards = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4))
npMultiIFSet = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99))
brMultiIFdns = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1))
brnetMultiIFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240))
brMultiIFconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1))
brMultiIFcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 2))
brMultiIFservice = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4))
brMultiIFprotocol = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5))
brMultiIFtcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2))
brMultiIFnetbeui = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8))
brMultiIForiginalapipa = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 12))
brMultiIForiginalLAA = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 14))
brMultiIForiginalIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15))
brMultiIForiginalWebServices = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16))
funclock = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63))
broriginalKerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 27))
broriginalCIFS = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 28))
broriginalSNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29))
firmwareupdatekeyword = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55))
autocountreset = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 31))
wlSimpleWizard = MibIdentifier((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 15))
brJamPlace = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brJamPlace.setStatus('mandatory')
brToner1Low = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brToner1Low.setStatus('mandatory')
brToner2Low = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brToner2Low.setStatus('mandatory')
brToner3Low = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brToner3Low.setStatus('mandatory')
brToner4Low = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brToner4Low.setStatus('mandatory')
brieee1284id = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brieee1284id.setStatus('mandatory')
brttt1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brttt1.setStatus('mandatory')
brOneTouchDialCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brOneTouchDialCount.setStatus('mandatory')
brOneTouchDialTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: brOneTouchDialTable.setStatus('mandatory')
brOneTouchDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brOneTouchDialIndex"))
if mibBuilder.loadTexts: brOneTouchDialEntry.setStatus('mandatory')
brOneTouchDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brOneTouchDialIndex.setStatus('mandatory')
brOneTouchDialData = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brOneTouchDialData.setStatus('mandatory')
brSpeedDialCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSpeedDialCount.setStatus('mandatory')
brSpeedDialTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: brSpeedDialTable.setStatus('mandatory')
brSpeedDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brSpeedDialIndex"))
if mibBuilder.loadTexts: brSpeedDialEntry.setStatus('mandatory')
brSpeedDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSpeedDialIndex.setStatus('mandatory')
brSpeedDialData = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSpeedDialData.setStatus('mandatory')
brDialDataAllClear = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDialDataAllClear.setStatus('mandatory')
brFaxReceiveMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFaxReceiveMode.setStatus('mandatory')
brRingDelayCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRingDelayCount.setStatus('mandatory')
brOwnFaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 1, 2, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brOwnFaxNumber.setStatus('mandatory')
brRegisterKeyInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 11, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegisterKeyInfo.setStatus('mandatory')
brUnRegisterKeyInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 11, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brUnRegisterKeyInfo.setStatus('mandatory')
brNetSKeyReceiverAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetSKeyReceiverAddress.setStatus('mandatory')
brNetRemoteSetUpSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetRemoteSetUpSupported.setStatus('mandatory')
brNetRemoteSetUpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetRemoteSetUpEnable.setStatus('mandatory')
brFaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFaxSupported.setStatus('mandatory')
brIFaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIFaxSupported.setStatus('mandatory')
brNetFaxShareSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetFaxShareSupported.setStatus('mandatory')
brNetFaxShareEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetFaxShareEnable.setStatus('mandatory')
brNetPcFaxRxSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetPcFaxRxSupported.setStatus('mandatory')
brNetPcFaxRxEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetPcFaxRxEnable.setStatus('mandatory')
brNetRegisterPcFaxInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 12, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetRegisterPcFaxInfo.setStatus('mandatory')
brPhoneNumberLastFax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 101, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPhoneNumberLastFax.setStatus('mandatory')
brPagesSentLastFax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 101, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPagesSentLastFax.setStatus('mandatory')
brTimestampLastFax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 101, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTimestampLastFax.setStatus('mandatory')
brFaxHeaderInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 2, 101, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFaxHeaderInfo.setStatus('mandatory')
brNetScannerSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetScannerSupported.setStatus('mandatory')
brNetScannerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetScannerEnable.setStatus('mandatory')
brNetSKeySupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetSKeySupported.setStatus('mandatory')
brNetSKeyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 3, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNetSKeyEnable.setStatus('mandatory')
brServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 111, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brServiceMode.setStatus('mandatory')
brLockMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 111, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLockMode.setStatus('mandatory')
brActivityReportSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 111, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brActivityReportSetting.setStatus('mandatory')
brpowerstime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpowerstime.setStatus('mandatory')
brautocont = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brautocont.setStatus('mandatory')
brsimmtype0 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmtype0.setStatus('mandatory')
brsimmsize0 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmsize0.setStatus('mandatory')
brsimmtype1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmtype1.setStatus('mandatory')
brsimmsize1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmsize1.setStatus('mandatory')
brsimmtype2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmtype2.setStatus('mandatory')
brsimmsize2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmsize2.setStatus('mandatory')
brsimmtype3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmtype3.setStatus('mandatory')
brsimmsize3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brsimmsize3.setStatus('mandatory')
brTBD1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTBD1.setStatus('mandatory')
brtimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtimeout.setStatus('mandatory')
brTBD2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTBD2.setStatus('mandatory')
brpersonality = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pcl", 1), ("hpgl", 2), ("ps", 4), ("auto", 5), ("ibm", 6), ("epson", 7), ("hbp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpersonality.setStatus('mandatory')
brorientation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brorientation.setStatus('mandatory')
brcopies = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcopies.setStatus('mandatory')
brTBD3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTBD3.setStatus('mandatory')
brresolution = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brresolution.setStatus('mandatory')
brpageprotect = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpageprotect.setStatus('mandatory')
brlines = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brlines.setStatus('mandatory')
brpaper = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 925, 923, 924, 926, 927, 1001))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("prc16k195x270", 925), ("a5l", 923), ("b6JIS", 924), ("prc16k184x260", 926), ("prc16k197x273", 927), ("auto", 1001)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpaper.setStatus('mandatory')
brpapertype = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpapertype.setStatus('mandatory')
brpapertype2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpapertype2.setStatus('mandatory')
brpapertypeMP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 3, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpapertypeMP.setStatus('mandatory')
brdensity = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brdensity.setStatus('mandatory')
brmanualfeed = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmanualfeed.setStatus('mandatory')
brmpsize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmpsize.setStatus('mandatory')
brtray1size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtray1size.setStatus('mandatory')
brtray2size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtray2size.setStatus('mandatory')
brtray3size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtray3size.setStatus('mandatory')
brtray4size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtray4size.setStatus('mandatory')
brret = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brret.setStatus('mandatory')
breconomode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 4, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: breconomode.setStatus('mandatory')
brPrtGeneralEmulationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralEmulationTimeout.setStatus('mandatory')
brPrtGeneralFeeder = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralFeeder.setStatus('mandatory')
brPrtGeneralPowerSave = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralPowerSave.setStatus('mandatory')
brPrtGeneralBuzzer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralBuzzer.setStatus('mandatory')
brPrtGeneralColor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralColor.setStatus('mandatory')
brPrtGeneralDuplex = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralDuplex.setStatus('mandatory')
brPrtGeneralBinding = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtGeneralBinding.setStatus('mandatory')
brPrtAdvancedPriority = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedPriority.setStatus('mandatory')
brPrtAdvancedUseMPTrayFirst = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedUseMPTrayFirst.setStatus('mandatory')
brPrtAdvancedMPTrayFeed = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedMPTrayFeed.setStatus('mandatory')
brPrtAdvancedXOffset = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedXOffset.setStatus('mandatory')
brPrtAdvancedYOffset = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedYOffset.setStatus('mandatory')
brPrtAdvancedImageCompression = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedImageCompression.setStatus('mandatory')
brPrtAdvancedAutoFormFeed = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedAutoFormFeed.setStatus('mandatory')
brPrtAdvancedAutoTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedAutoTimeout.setStatus('mandatory')
brPrtAdvancedFFSuppress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedFFSuppress.setStatus('mandatory')
brPrtAdvancedTonerLowPrint = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedTonerLowPrint.setStatus('mandatory')
brPrtAdvancedPrintDensity = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedPrintDensity.setStatus('mandatory')
brPrtAdvancedInputBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedInputBuffer.setStatus('mandatory')
brPrtAdvancedLanguage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("english", 1), ("danish", 2), ("dutch", 3), ("finish", 4), ("french", 5), ("german", 6), ("italian", 7), ("norwegian", 8), ("portuguse", 9), ("swedish", 10), ("spanish", 11), ("turkish", 12), ("polish", 13), ("japanese", 14), ("russian", 15), ("czech", 16), ("hungarian", 17), ("romanian", 18), ("bulgarian", 19), ("slovakian", 20), ("chinese", 21), ("brazil", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedLanguage.setStatus('mandatory')
brSecurePrintRAMSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSecurePrintRAMSizeMax.setStatus('mandatory')
brSecurePrintRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecurePrintRAMSize.setStatus('mandatory')
brPrtAdvancedJamRecovery = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedJamRecovery.setStatus('mandatory')
brPrtAdvancedSleepIndication = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("dimmed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedSleepIndication.setStatus('mandatory')
brPrtAdvancedDestination = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standardOutputTray", 1), ("oct", 2), ("octStack", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedDestination.setStatus('mandatory')
brPrtAdvancedLowerLCD = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonePage", 1), ("counter", 2), ("jobName", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedLowerLCD.setStatus('mandatory')
brPrtAdvancedAutoOnline = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedAutoOnline.setStatus('mandatory')
brPrtAdvancedButtonRepeat = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedButtonRepeat.setStatus('mandatory')
brPrtAdvancedMessageScroll = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedMessageScroll.setStatus('mandatory')
brPrtAdvancedLCDDensity = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedLCDDensity.setStatus('mandatory')
brPrtAdvancedErrorBuzzer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("normal", 2), ("special", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedErrorBuzzer.setStatus('mandatory')
brPrtAdvancedPanelBuzzer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedPanelBuzzer.setStatus('mandatory')
brPrtAdvancedBuzzerVolume = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedBuzzerVolume.setStatus('mandatory')
brSmallPaperSizeMP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 1000))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("noCasette", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSmallPaperSizeMP.setStatus('mandatory')
brSmallPaperSize1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 1000))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("noCasette", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSmallPaperSize1.setStatus('mandatory')
brSmallPaperSize2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 1000))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("noCasette", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSmallPaperSize2.setStatus('mandatory')
brSmallPaperSize3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 1000))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("noCasette", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSmallPaperSize3.setStatus('mandatory')
brSmallPaperSize4 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 51, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 1000))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("noCasette", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSmallPaperSize4.setStatus('mandatory')
brPrtAdvancedTrayPriority = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAdvancedTrayPriority.setStatus('mandatory')
brTrayPriorityCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTrayPriorityCount.setStatus('mandatory')
brTrayPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 3), )
if mibBuilder.loadTexts: brTrayPriorityTable.setStatus('mandatory')
brTrayPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 3, 1), ).setIndexNames((0, "BROTHER-MIB", "brTrayPriorityIndex"))
if mibBuilder.loadTexts: brTrayPriorityEntry.setStatus('mandatory')
brTrayPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTrayPriorityIndex.setStatus('mandatory')
brTrayPriorityMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 52, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTrayPriorityMember.setStatus('mandatory')
brCarbonCopyMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3), ("parallel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCarbonCopyMode.setStatus('mandatory')
brCarbonCopies = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCarbonCopies.setStatus('mandatory')
brCarbonCopyTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10), )
if mibBuilder.loadTexts: brCarbonCopyTable.setStatus('mandatory')
brCarbonCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10, 1), ).setIndexNames((0, "BROTHER-MIB", "brCarbonCopyIndex"))
if mibBuilder.loadTexts: brCarbonCopyEntry.setStatus('mandatory')
brCarbonCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCarbonCopyIndex.setStatus('mandatory')
brCarbonCopyTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11))).clone(namedValues=NamedValues(("tray1", 1), ("tray2", 2), ("tray3", 3), ("tray4", 4), ("mpTray", 10), ("auto", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCarbonCopyTray.setStatus('mandatory')
brCarbonCopyMacro = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCarbonCopyMacro.setStatus('mandatory')
brCarbonCopyMacroID = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 53, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCarbonCopyMacroID.setStatus('mandatory')
brMediaFixTray1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("regular", 2), ("thick", 3), ("thicker", 4), ("transparency", 5), ("thin", 6), ("bond", 7), ("envelopes", 8), ("envThick", 9), ("envThin", 10), ("recycled", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMediaFixTray1.setStatus('mandatory')
brMediaFixTray2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("regular", 2), ("thick", 3), ("thicker", 4), ("transparency", 5), ("thin", 6), ("bond", 7), ("envelopes", 8), ("envThick", 9), ("envThin", 10), ("recycled", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMediaFixTray2.setStatus('mandatory')
brMediaFixTray3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("regular", 2), ("thick", 3), ("thicker", 4), ("transparency", 5), ("thin", 6), ("bond", 7), ("envelopes", 8), ("envThick", 9), ("envThin", 10), ("recycled", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMediaFixTray3.setStatus('mandatory')
brMediaFixTray4 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("regular", 2), ("thick", 3), ("thicker", 4), ("transparency", 5), ("thin", 6), ("bond", 7), ("envelopes", 8), ("envThick", 9), ("envThin", 10), ("recycled", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMediaFixTray4.setStatus('mandatory')
brMediaFixMP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 54, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("regular", 2), ("thick", 3), ("thicker", 4), ("transparency", 5), ("thin", 6), ("bond", 7), ("envelopes", 8), ("envThick", 9), ("envThin", 10), ("recycled", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMediaFixMP.setStatus('mandatory')
brDirectPrintPaperSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922, 923, 924, 925, 926, 927))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("a5l", 923), ("b6jis", 924), ("prc16k195x270", 925), ("prc16k184x260", 926), ("prc16k197x273", 927)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintPaperSize.setStatus('mandatory')
brDirectPrintMediaType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintMediaType.setStatus('mandatory')
brDirectPrintMultipulPage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintMultipulPage.setStatus('mandatory')
brDirectPrintOrientation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintOrientation.setStatus('mandatory')
brDirectPrintCollate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintCollate.setStatus('mandatory')
brDirectPrintOutputColor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintOutputColor.setStatus('mandatory')
brDirectPrintPrintQuality = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintPrintQuality.setStatus('mandatory')
brDirectPrintPdfOption = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintPdfOption.setStatus('mandatory')
brDirectPrintSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brDirectPrintSetting.setStatus('mandatory')
brDirectPrintPdfThumbnailType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 60, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alternativeImage", 1), ("reductionImage", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDirectPrintPdfThumbnailType.setStatus('mandatory')
brPictBridgePaperSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 920, 921, 922))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPictBridgePaperSize.setStatus('mandatory')
brPictBridgeOrientation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPictBridgeOrientation.setStatus('mandatory')
brPictBridgeDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPictBridgeDateTime.setStatus('mandatory')
brPictBridgeFileName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPictBridgeFileName.setStatus('mandatory')
brPictBridgePrintQuality = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPictBridgePrintQuality.setStatus('mandatory')
brPictBridgePrintSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 61, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPictBridgePrintSetting.setStatus('mandatory')
brColorCalibration = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brColorCalibration.setStatus('mandatory')
brColorCalibrationReset = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brColorCalibrationReset.setStatus('mandatory')
brAutoRegistRegistrate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brAutoRegistRegistrate.setStatus('mandatory')
brAutoRegistSetInterval = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brAutoRegistSetInterval.setStatus('mandatory')
brRegistrationPrintChart = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationPrintChart.setStatus('mandatory')
brRegistrationXMagentaLeft = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXMagentaLeft.setStatus('mandatory')
brRegistrationXMagentaRight = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXMagentaRight.setStatus('mandatory')
brRegistrationXCyanLeft = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXCyanLeft.setStatus('mandatory')
brRegistrationXCyanRight = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXCyanRight.setStatus('mandatory')
brRegistrationXYellowLeft = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXYellowLeft.setStatus('mandatory')
brRegistrationXYellowRight = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationXYellowRight.setStatus('mandatory')
brRegistrationYMagenta = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationYMagenta.setStatus('mandatory')
brRegistrationYCyan = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationYCyan.setStatus('mandatory')
brRegistrationYYellow = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 62, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRegistrationYYellow.setStatus('mandatory')
brPrtMailbox = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtMailbox.setStatus('mandatory')
brPrtMailboxOutbin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtMailboxOutbin.setStatus('mandatory')
brPrtMailboxProtectGroup = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtMailboxProtectGroup.setStatus('mandatory')
brPrtAvoidMailboxFullGroup = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAvoidMailboxFullGroup.setStatus('mandatory')
brPrtMailboxProtectTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: brPrtMailboxProtectTable.setStatus('mandatory')
brPrtMailboxProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrtMailboxProtectIndex"))
if mibBuilder.loadTexts: brPrtMailboxProtectEntry.setStatus('mandatory')
brPrtMailboxProtectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtMailboxProtectIndex.setStatus('mandatory')
brPrtMailboxProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtMailboxProtect.setStatus('mandatory')
brPrtAvoidMailboxFullTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: brPrtAvoidMailboxFullTable.setStatus('mandatory')
brPrtAvoidMailboxFullEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrtAvoidMailboxFullIndex"))
if mibBuilder.loadTexts: brPrtAvoidMailboxFullEntry.setStatus('mandatory')
brPrtAvoidMailboxFullIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAvoidMailboxFullIndex.setStatus('mandatory')
brPrtAvoidMailboxFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrtAvoidMailboxFull.setStatus('mandatory')
brPrtFinisher = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrtFinisher.setStatus('mandatory')
brPrtCatchTray = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrtCatchTray.setStatus('mandatory')
brPagePCLLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLLeftMargin.setStatus('mandatory')
brPagePCLRightMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLRightMargin.setStatus('mandatory')
brPagePCLTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLTopMargin.setStatus('mandatory')
brPagePCLBottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLBottomMargin.setStatus('mandatory')
brPagePCLLines = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLLines.setStatus('mandatory')
brPagePCLAutoLF = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLAutoLF.setStatus('mandatory')
brPagePCLAutoCR = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLAutoCR.setStatus('mandatory')
brPagePCLAutoWrap = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLAutoWrap.setStatus('mandatory')
brPagePCLAutoSkip = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePCLAutoSkip.setStatus('mandatory')
brPagePSPrintPSError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePSPrintPSError.setStatus('mandatory')
brPagePSKeepPCLFonts = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePSKeepPCLFonts.setStatus('mandatory')
brPagePSCAPTsetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPagePSCAPTsetting.setStatus('mandatory')
brPageGLPen1Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen1Size.setStatus('mandatory')
brPageGLPen1GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen1GrayLevel.setStatus('mandatory')
brPageGLPen2Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen2Size.setStatus('mandatory')
brPageGLPen2GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen2GrayLevel.setStatus('mandatory')
brPageGLPen3Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen3Size.setStatus('mandatory')
brPageGLPen3GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen3GrayLevel.setStatus('mandatory')
brPageGLPen4Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen4Size.setStatus('mandatory')
brPageGLPen4GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen4GrayLevel.setStatus('mandatory')
brPageGLPen5Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen5Size.setStatus('mandatory')
brPageGLPen5GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen5GrayLevel.setStatus('mandatory')
brPageGLPen6Size = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen6Size.setStatus('mandatory')
brPageGLPen6GrayLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageGLPen6GrayLevel.setStatus('mandatory')
brPageEPSONLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONLeftMargin.setStatus('mandatory')
brPageEPSONRightMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONRightMargin.setStatus('mandatory')
brPageEPSONTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONTopMargin.setStatus('mandatory')
brPageEPSONBottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONBottomMargin.setStatus('mandatory')
brPageEPSONLines = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONLines.setStatus('mandatory')
brPageEPSONAutoLF = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONAutoLF.setStatus('mandatory')
brPageEPSONAutoMask = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageEPSONAutoMask.setStatus('mandatory')
brPageIBMLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMLeftMargin.setStatus('mandatory')
brPageIBMRightMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMRightMargin.setStatus('mandatory')
brPageIBMTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMTopMargin.setStatus('mandatory')
brPageIBMBottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMBottomMargin.setStatus('mandatory')
brPageIBMLines = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMLines.setStatus('mandatory')
brPageIBMAutoLF = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMAutoLF.setStatus('mandatory')
brPageIBMAutoCR = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMAutoCR.setStatus('mandatory')
brPageIBMAutoMask = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 2, 5, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPageIBMAutoMask.setStatus('mandatory')
brFontName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontName.setStatus('mandatory')
brFontPointSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontPointSize.setStatus('mandatory')
brFontPitch = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontPitch.setStatus('mandatory')
brFontSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontSymbolSet.setStatus('mandatory')
brPanelResetUser = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelResetUser.setStatus('mandatory')
brPanelResetFactory = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelResetFactory.setStatus('mandatory')
brPanelTestConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelTestConfiguration.setStatus('mandatory')
brPanelTestFontList = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelTestFontList.setStatus('mandatory')
brPanelTestTestPage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelTestTestPage.setStatus('mandatory')
brPanelTestDemoPage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelTestDemoPage.setStatus('mandatory')
brPanelLockPasswd = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelLockPasswd.setStatus('mandatory')
brPanelLock = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPanelLock.setStatus('mandatory')
brPanelLockOn = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelLockOn.setStatus('mandatory')
brPanelLockOff = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelLockOff.setStatus('mandatory')
brPanelKeyOnline = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyOnline.setStatus('mandatory')
brPanelKeyFormFeed = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyFormFeed.setStatus('mandatory')
brPanelKeyContinue = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyContinue.setStatus('mandatory')
brPanelKeyMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyMode.setStatus('mandatory')
brPanelKeyGo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyGo.setStatus('mandatory')
brPanelKeyJobCancel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyJobCancel.setStatus('mandatory')
brPanelKeyReprint = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeyReprint.setStatus('mandatory')
brPanelKeySecure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPanelKeySecure.setStatus('mandatory')
brLCDMode1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fix", 1), ("blink", 2), ("scroll", 3), ("blinkScroll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDMode1.setStatus('mandatory')
brLCDString1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString1.setStatus('mandatory')
brLCDMode2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fix", 1), ("blink", 2), ("scroll", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDMode2.setStatus('mandatory')
brLCDString2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString2.setStatus('mandatory')
brLCDString16fix = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString16fix.setStatus('mandatory')
brBackLightColor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("green", 1), ("orange", 2), ("red", 3), ("notsupport", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brBackLightColor.setStatus('mandatory')
brLCDMode3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fix", 1), ("blink", 2), ("scroll", 3), ("blinkScroll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDMode3.setStatus('mandatory')
brLCDString3 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString3.setStatus('mandatory')
brLCDMode4 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fix", 1), ("blink", 2), ("scroll", 3), ("blinkScroll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDMode4.setStatus('mandatory')
brLCDString4 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString4.setStatus('mandatory')
brLCDMode5 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fix", 1), ("blink", 2), ("scroll", 3), ("blinkScroll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDMode5.setStatus('mandatory')
brLCDString5 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLCDString5.setStatus('mandatory')
brLCDContrast = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 4, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLCDContrast.setStatus('mandatory')
brInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoSerialNumber.setStatus('mandatory')
brInfoType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoType.setStatus('mandatory')
brInfoUpperMIBVer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoUpperMIBVer.setStatus('mandatory')
brInfoLowerMIBVer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoLowerMIBVer.setStatus('mandatory')
brInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoStatus.setStatus('mandatory')
brInfoNetVerUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoNetVerUpStatus.setStatus('mandatory')
brInfoPrinterUStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoPrinterUStatus.setStatus('mandatory')
brInfoPConSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoPConSupported.setStatus('mandatory')
brInfoMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoMaintenance.setStatus('mandatory')
brInfoModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148))).clone(namedValues=NamedValues(("hl2400ce", 4), ("hl3400CN", 5), ("hl3260", 6), ("hl2460", 8), ("hl2600cn", 9), ("hl3450cn", 11), ("am", 13), ("zlhe", 14), ("zl2", 15), ("jigen", 16), ("aml", 17), ("l4c", 18), ("all", 19), ("alLedModel", 20), ("alLcdModel", 21), ("hl4040", 22), ("allchn", 23), ("hl4050hl4070", 24), ("all2", 25), ("zlfb", 101), ("zl", 102), ("bh", 103), ("bhfb", 104), ("zlhs", 105), ("bhhs", 106), ("zl2fb", 107), ("bhl2mfc", 108), ("bhl2fb", 109), ("zl2mfc", 110), ("mini2", 111), ("mini2adf", 112), ("bh3fb", 113), ("bh3mfc", 114), ("allmfc", 115), ("allfb", 116), ("slow4c", 117), ("mini2eColorLCD", 118), ("mini2eColorLCDADF", 119), ("alfb", 120), ("dcp540", 121), ("dcp750", 122), ("mfc440", 123), ("mfc665", 124), ("mfc850", 125), ("mfc860", 126), ("mfc5460", 127), ("mfc5860", 128), ("dcp6150", 129), ("dcp6260", 130), ("dcp6460", 131), ("dcp6860", 132), ("dcp770", 133), ("mfc480", 134), ("acfbCIS", 135), ("acfbCCD", 136), ("mfc7440", 137), ("mfc7840", 138), ("mfc5490", 139), ("mfc5890", 140), ("mfc6490", 141), ("dcp6690", 142), ("mfc6890", 143), ("dcp585", 144), ("mfc490", 145), ("mfc790", 146), ("mfc990", 147), ("mfc930", 148)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoModelNumber.setStatus('mandatory')
brInfoCounter = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoCounter.setStatus('mandatory')
brInfoNextCare = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoNextCare.setStatus('mandatory')
brInfoHDDSlot1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoHDDSlot1.setStatus('mandatory')
brInfoHDDSlot2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoHDDSlot2.setStatus('mandatory')
brInfoHDDInternal = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoHDDInternal.setStatus('mandatory')
brInfoHDDSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoHDDSize.setStatus('mandatory')
brInfoSolutionsCenterURL = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoSolutionsCenterURL.setStatus('mandatory')
brInfoDeviceRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoDeviceRomVersion.setStatus('mandatory')
brInfoCoverage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoCoverage.setStatus('mandatory')
brInfoEstimatedPagesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoEstimatedPagesRemaining.setStatus('mandatory')
brInfoReplaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoReplaceCount.setStatus('mandatory')
brInfoJamCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoJamCount.setStatus('mandatory')
brInfoJamCountClear = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brInfoJamCountClear.setStatus('mandatory')
brInfoReplaceTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoReplaceTime.setStatus('mandatory')
brInfoDeviceSubRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoDeviceSubRomVersion.setStatus('mandatory')
brErrorHistoryCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brErrorHistoryCount.setStatus('mandatory')
brErrorHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 2), )
if mibBuilder.loadTexts: brErrorHistoryTable.setStatus('mandatory')
brErrorHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brErrorHistoryIndex"))
if mibBuilder.loadTexts: brErrorHistoryEntry.setStatus('mandatory')
brErrorHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brErrorHistoryIndex.setStatus('mandatory')
brErrorHistoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brErrorHistoryDescription.setStatus('mandatory')
brErrorHistoryAllClear = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brErrorHistoryAllClear.setStatus('mandatory')
brCommunicationErrorHistoryCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCommunicationErrorHistoryCount.setStatus('mandatory')
brCommunicationErrorHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 12), )
if mibBuilder.loadTexts: brCommunicationErrorHistoryTable.setStatus('mandatory')
brCommunicationErrorHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 12, 1), ).setIndexNames((0, "BROTHER-MIB", "brCommunicationErrorHistoryIndex"))
if mibBuilder.loadTexts: brCommunicationErrorHistoryEntry.setStatus('mandatory')
brCommunicationErrorHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCommunicationErrorHistoryIndex.setStatus('mandatory')
brCommunicationErrorHistoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 51, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCommunicationErrorHistoryDescription.setStatus('mandatory')
brPrintPagesTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 1), )
if mibBuilder.loadTexts: brPrintPagesTable.setStatus('mandatory')
brPrintPagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrintPagesIndex"))
if mibBuilder.loadTexts: brPrintPagesEntry.setStatus('mandatory')
brPrintPagesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesIndex.setStatus('mandatory')
brPrintPagesPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 24, 25, 26, 27, 45, 46, 80, 81, 90, 91, 99, 100, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 920, 921, 922, 999, 924))).clone(namedValues=NamedValues(("executive", 1), ("letter", 2), ("legal", 3), ("a6", 24), ("a5", 25), ("a4", 26), ("a3ISO", 27), ("b5JIS", 45), ("b4JIS", 46), ("monarch", 80), ("com10", 81), ("dl", 90), ("c5", 91), ("b6", 99), ("b5", 100), ("ledger", 890), ("a3PLUS", 891), ("letterShortEdge", 892), ("a4ShortEdge", 893), ("a4LONG", 894), ("executiveShortEdge", 895), ("b5ISOShortEdge", 896), ("custom", 897), ("a4Letter", 898), ("b5Executive", 899), ("envelopes", 900), ("dll", 901), ("hagaki", 902), ("folio", 903), ("organaizerJ", 904), ("organaizerK", 905), ("organaizerL", 906), ("organaizerM", 907), ("userdefined", 908), ("legalA4Long", 909), ("b6A5A6", 910), ("detectsensor", 911), ("inches3x5", 920), ("envelopesY4", 921), ("largestEnvelopesTheWest", 922), ("otherPage", 999), ("b6JIS", 924)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesPaperSize.setStatus('mandatory')
brPrintPages = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPages.setStatus('mandatory')
brPrintPagesMediaPlaceTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 11), )
if mibBuilder.loadTexts: brPrintPagesMediaPlaceTable.setStatus('mandatory')
brPrintPagesMediaPlaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 11, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrintPagesMediaPlaceIndex"))
if mibBuilder.loadTexts: brPrintPagesMediaPlaceEntry.setStatus('mandatory')
brPrintPagesMediaPlaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesMediaPlaceIndex.setStatus('mandatory')
brPrintPagesMediaPlaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("face", 1), ("back", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesMediaPlaceType.setStatus('mandatory')
brPrintPagesMediaPlaceCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesMediaPlaceCounter.setStatus('mandatory')
brPrintPagesFuncTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 21), )
if mibBuilder.loadTexts: brPrintPagesFuncTable.setStatus('mandatory')
brPrintPagesFuncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 21, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrintPagesFuncIndex"))
if mibBuilder.loadTexts: brPrintPagesFuncEntry.setStatus('mandatory')
brPrintPagesFuncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesFuncIndex.setStatus('mandatory')
brPrintPagesFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pcPrinttotal", 1), ("faxtotal", 2), ("copytotal", 3), ("copycolor", 4), ("pcPrintcolor", 5), ("faxcolor", 6), ("pcPrintmono", 7), ("faxmono", 8), ("copymono", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesFuncType.setStatus('mandatory')
brPrintPagesFuncCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesFuncCounter.setStatus('mandatory')
brPrintPagesPaperTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 31), )
if mibBuilder.loadTexts: brPrintPagesPaperTypeTable.setStatus('mandatory')
brPrintPagesPaperTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 31, 1), ).setIndexNames((0, "BROTHER-MIB", "brPrintPagesPaperTypeIndex"))
if mibBuilder.loadTexts: brPrintPagesPaperTypeEntry.setStatus('mandatory')
brPrintPagesPaperTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesPaperTypeIndex.setStatus('mandatory')
brPrintPagesPaperTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 3, 13, 14))).clone(namedValues=NamedValues(("regularthinrecycled", 12), ("transparency", 3), ("thickthickerbond", 13), ("envelopesenvthickenvthin", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesPaperTypeType.setStatus('mandatory')
brPrintPagesPaperTypeCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 52, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPrintPagesPaperTypeCounter.setStatus('mandatory')
brCapabilityCopiesMax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityCopiesMax.setStatus('mandatory')
brCapabilityCopiesMin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityCopiesMin.setStatus('mandatory')
brCapabilityOrientationCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityOrientationCount.setStatus('mandatory')
brCapabilityOrientationTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2, 2), )
if mibBuilder.loadTexts: brCapabilityOrientationTable.setStatus('mandatory')
brCapabilityOrientationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brCapabilityOrientationIndex"))
if mibBuilder.loadTexts: brCapabilityOrientationEntry.setStatus('mandatory')
brCapabilityOrientationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityOrientationIndex.setStatus('mandatory')
brCapabilityOrientationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityOrientationName.setStatus('mandatory')
brCapabilityPaperCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityPaperCount.setStatus('mandatory')
brCapabilityPaperTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3, 2), )
if mibBuilder.loadTexts: brCapabilityPaperTable.setStatus('mandatory')
brCapabilityPaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brCapabilityPaperIndex"))
if mibBuilder.loadTexts: brCapabilityPaperEntry.setStatus('mandatory')
brCapabilityPaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityPaperIndex.setStatus('mandatory')
brCapabilityPaperName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityPaperName.setStatus('mandatory')
brCapabilityMediatypeCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityMediatypeCount.setStatus('mandatory')
brCapabilityMediatypeTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4, 2), )
if mibBuilder.loadTexts: brCapabilityMediatypeTable.setStatus('mandatory')
brCapabilityMediatypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brCapabilityMediatypeIndex"))
if mibBuilder.loadTexts: brCapabilityMediatypeEntry.setStatus('mandatory')
brCapabilityMediatypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityMediatypeIndex.setStatus('mandatory')
brCapabilityMediatypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityMediatypeName.setStatus('mandatory')
brCapabilityResolutionCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityResolutionCount.setStatus('mandatory')
brCapabilityResolutionTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5, 2), )
if mibBuilder.loadTexts: brCapabilityResolutionTable.setStatus('mandatory')
brCapabilityResolutionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brCapabilityResolutionIndex"))
if mibBuilder.loadTexts: brCapabilityResolutionEntry.setStatus('mandatory')
brCapabilityResolutionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityResolutionIndex.setStatus('mandatory')
brCapabilityResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 53, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCapabilityResolution.setStatus('mandatory')
brPfKitIndexCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPfKitIndexCount.setStatus('mandatory')
brPfKitTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 2), )
if mibBuilder.loadTexts: brPfKitTable.setStatus('mandatory')
brPfKitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brPfKitIndex"))
if mibBuilder.loadTexts: brPfKitEntry.setStatus('mandatory')
brPfKitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPfKitIndex.setStatus('mandatory')
brPfKitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 20))).clone(namedValues=NamedValues(("pfkit1", 1), ("pfkit2", 2), ("pfkit3", 3), ("pfkit4", 4), ("pfkitmp", 10), ("pfkitdx", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPfKitType.setStatus('mandatory')
brPfKitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPfKitCount.setStatus('mandatory')
brScanCountIndexCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brScanCountIndexCount.setStatus('mandatory')
brScanCountTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 2), )
if mibBuilder.loadTexts: brScanCountTable.setStatus('mandatory')
brScanCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brScanCountIndex"))
if mibBuilder.loadTexts: brScanCountEntry.setStatus('mandatory')
brScanCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brScanCountIndex.setStatus('mandatory')
brScanCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adf", 1), ("fb", 2), ("adfdx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brScanCountType.setStatus('mandatory')
brScanCountCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 54, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brScanCountCounter.setStatus('mandatory')
brStatusSleep = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brStatusSleep.setStatus('mandatory')
brSecretMPRetry = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecretMPRetry.setStatus('mandatory')
brSecretReprint = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecretReprint.setStatus('mandatory')
brFontSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFontSetting.setStatus('mandatory')
brFontSwitchOn = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontSwitchOn.setStatus('mandatory')
brFontSwitchOff = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFontSwitchOff.setStatus('mandatory')
brClockFuncTimeStyle = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brClockFuncTimeStyle.setStatus('mandatory')
brClockFuncSummerTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brClockFuncSummerTime.setStatus('mandatory')
brClockFuncTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brClockFuncTimeZone.setStatus('mandatory')
brClockFuncZoneSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brClockFuncZoneSet.setStatus('mandatory')
brFindPort = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 13, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFindPort.setStatus('mandatory')
brFindTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 13, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFindTime.setStatus('mandatory')
brAdminCapability = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 99, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brAdminCapability.setStatus('mandatory')
brUserPasswordVerify = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 100, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brUserPasswordVerify.setStatus('mandatory')
brUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 100, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brUserPassword.setStatus('mandatory')
brpsVerifyPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 101, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsVerifyPhysAddress.setStatus('mandatory')
brBasicSettingConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brBasicSettingConfigured.setStatus('mandatory')
brLPDBannerPage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 6, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLPDBannerPage.setStatus('mandatory')
brENetModeSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 7, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brENetModeSupported.setStatus('mandatory')
brENetMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 7, 99, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brENetMode.setStatus('mandatory')
brDNSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brDNSSupported.setStatus('mandatory')
brPrimaryDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrimaryDNSIP.setStatus('mandatory')
brSecondaryDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecondaryDNSIP.setStatus('mandatory')
brDNSIPSetup = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDNSIPSetup.setStatus('mandatory')
brTCPIPConnectTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTCPIPConnectTime.setStatus('mandatory')
brAdvancedDNSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brAdvancedDNSSupported.setStatus('mandatory')
brPrimaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrimaryDNSIPAddress.setStatus('mandatory')
brSecondaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecondaryDNSIPAddress.setStatus('mandatory')
brPOP3ServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPOP3ServerName.setStatus('mandatory')
brSMTPServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSMTPServerName.setStatus('mandatory')
brPushStatusSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPushStatusSupported.setStatus('mandatory')
brPriMailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPriMailAddress.setStatus('mandatory')
brPriError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPriError.setStatus('mandatory')
brSecMailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecMailAddress.setStatus('mandatory')
brSecError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSecError.setStatus('mandatory')
brNotificationCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNotificationCount.setStatus('mandatory')
brNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5), )
if mibBuilder.loadTexts: brNotificationTable.setStatus('mandatory')
brNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1), ).setIndexNames((0, "BROTHER-MIB", "brNotificationIndex"))
if mibBuilder.loadTexts: brNotificationEntry.setStatus('mandatory')
brNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNotificationIndex.setStatus('mandatory')
brNotificationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationAddress.setStatus('mandatory')
brNotificationStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationStatusGroup.setStatus('mandatory')
brNotificationShowURLInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationShowURLInfo.setStatus('mandatory')
brNotificationErrorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationErrorRule.setStatus('mandatory')
brNotificationRestoration = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationRestoration.setStatus('mandatory')
brPrintersEmailaddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brPrintersEmailaddress.setStatus('mandatory')
brNotificationVersion = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNotificationVersion.setStatus('mandatory')
brShowIPAddressInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brShowIPAddressInfo.setStatus('mandatory')
brNotificationRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50), )
if mibBuilder.loadTexts: brNotificationRuleTable.setStatus('mandatory')
brNotificationRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50, 1), ).setIndexNames((0, "BROTHER-MIB", "brNotificationIndex"), (0, "BROTHER-MIB", "brNotificationRuleIndex"))
if mibBuilder.loadTexts: brNotificationRuleEntry.setStatus('mandatory')
brNotificationRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNotificationRuleIndex.setStatus('mandatory')
brNotificationStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("coverOpen", 1), ("jam", 2), ("tonerLow", 3), ("tonerEmpty", 4), ("userConsumableWarning", 5), ("userConsumableError", 6), ("servicemanConsumableWarning", 7), ("servicemanConsumableError", 8), ("changeDrum", 9), ("memoryFull", 10), ("inputMediaError", 11), ("outputFull", 12), ("notInstalled", 13), ("machineError", 14), ("otherErrors", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationStatusID.setStatus('mandatory')
brNotificationMainRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("everytime", 2), ("times", 3), ("minutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationMainRule.setStatus('mandatory')
brNotificationRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 2, 50, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brNotificationRuleValue.setStatus('mandatory')
brPJLInfoOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 1), )
if mibBuilder.loadTexts: brPJLInfoOptionsTable.setStatus('mandatory')
brPJLInfoOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoOptionsIndex"))
if mibBuilder.loadTexts: brPJLInfoOptionsEntry.setStatus('mandatory')
brPJLInfoOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoOptionsIndex.setStatus('mandatory')
brPJLInfoOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoOptions.setStatus('mandatory')
brPJLInfoIntrayconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 2), )
if mibBuilder.loadTexts: brPJLInfoIntrayconfigTable.setStatus('mandatory')
brPJLInfoIntrayconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoIntrayconfigIndex"))
if mibBuilder.loadTexts: brPJLInfoIntrayconfigEntry.setStatus('mandatory')
brPJLInfoIntrayconfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoIntrayconfigIndex.setStatus('mandatory')
brPJLInfoIntrayconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoIntrayconfig.setStatus('mandatory')
brPJLInfoOuttrayconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 3), )
if mibBuilder.loadTexts: brPJLInfoOuttrayconfigTable.setStatus('mandatory')
brPJLInfoOuttrayconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 3, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoOuttrayconfigIndex"))
if mibBuilder.loadTexts: brPJLInfoOuttrayconfigEntry.setStatus('mandatory')
brPJLInfoOuttrayconfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoOuttrayconfigIndex.setStatus('mandatory')
brPJLInfoOuttrayconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoOuttrayconfig.setStatus('mandatory')
brPJLInfoDXconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 4), )
if mibBuilder.loadTexts: brPJLInfoDXconfigTable.setStatus('mandatory')
brPJLInfoDXconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 4, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoDXconfigIndex"))
if mibBuilder.loadTexts: brPJLInfoDXconfigEntry.setStatus('mandatory')
brPJLInfoDXconfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoDXconfigIndex.setStatus('mandatory')
brPJLInfoDXconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoDXconfig.setStatus('mandatory')
brPJLInfoStorageconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 5), )
if mibBuilder.loadTexts: brPJLInfoStorageconfigTable.setStatus('mandatory')
brPJLInfoStorageconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 5, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoStorageconfigIndex"))
if mibBuilder.loadTexts: brPJLInfoStorageconfigEntry.setStatus('mandatory')
brPJLInfoStorageconfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoStorageconfigIndex.setStatus('mandatory')
brPJLInfoStorageconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoStorageconfig.setStatus('mandatory')
brEmailReportsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEmailReportsSupported.setStatus('mandatory')
brEmailReportsCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEmailReportsCount.setStatus('mandatory')
brEmailReportsTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11), )
if mibBuilder.loadTexts: brEmailReportsTable.setStatus('mandatory')
brEmailReportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1), ).setIndexNames((0, "BROTHER-MIB", "brEmailReportsIndex"))
if mibBuilder.loadTexts: brEmailReportsEntry.setStatus('mandatory')
brEmailReportsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEmailReportsIndex.setStatus('mandatory')
brEmailReportsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsAddress.setStatus('mandatory')
brEmailReportsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("monthly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsFrequency.setStatus('mandatory')
brEmailReportsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsTime.setStatus('mandatory')
brEmailReportsWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsWeek.setStatus('mandatory')
brEmailReportsDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsDate.setStatus('mandatory')
brEmailReportsSendReportNow = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsSendReportNow.setStatus('mandatory')
brEmailReportsSendReportatPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsSendReportatPowerOn.setStatus('mandatory')
brEmailReportsNoRTCFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsNoRTCFrequency.setStatus('mandatory')
brEmailReportsReportFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plaintext", 1), ("xml", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEmailReportsReportFormat.setStatus('mandatory')
brpsNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNodeName.setStatus('mandatory')
brpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSerialNumber.setStatus('mandatory')
brpsHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsHardwareType.setStatus('mandatory')
brpsMainRevision = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsMainRevision.setStatus('mandatory')
brpsBootRevision = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBootRevision.setStatus('mandatory')
brpsPasswordVerify = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPasswordVerify.setStatus('mandatory')
brpsPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPassword.setStatus('mandatory')
brpsMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsMIBVersion.setStatus('mandatory')
brpsOEMString = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsOEMString.setStatus('mandatory')
brpsMIBMajor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsMIBMajor.setStatus('mandatory')
brpsMIBMinor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsMIBMinor.setStatus('mandatory')
brSupportedInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 200), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSupportedInfo.setStatus('mandatory')
brpsServerDescription = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServerDescription.setStatus('mandatory')
brpsEnetMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEnetMode.setStatus('mandatory')
brpsFlashROMSize = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsFlashROMSize.setStatus('mandatory')
brpsSNMPGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSNMPGetCommunity.setStatus('mandatory')
brpsSNMPJetAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSNMPJetAdmin.setStatus('mandatory')
brpsSNMPSetCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSNMPSetCommunity1.setStatus('mandatory')
brpsSNMPSetCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSNMPSetCommunity2.setStatus('mandatory')
brpsTestPage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTestPage.setStatus('mandatory')
brpsSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSetDefault.setStatus('mandatory')
brpsReset = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsReset.setStatus('mandatory')
brpsProtectModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsProtectModeEnable.setStatus('mandatory')
brpsProtectPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsProtectPassword.setStatus('mandatory')
brpsPortCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortCount.setStatus('mandatory')
brpsPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2), )
if mibBuilder.loadTexts: brpsPortInfoTable.setStatus('mandatory')
brpsPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsPortIndex"))
if mibBuilder.loadTexts: brpsPortInfoEntry.setStatus('mandatory')
brpsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortIndex.setStatus('mandatory')
brpsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPortName.setStatus('mandatory')
brpsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("parallel", 1), ("serial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortType.setStatus('mandatory')
brpsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortStatus.setStatus('mandatory')
brpsPortStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortStatusString.setStatus('mandatory')
brpsPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortProtocol.setStatus('mandatory')
brpsPortQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortQueueSize.setStatus('mandatory')
brpsPortDescriptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortDescriptionString.setStatus('mandatory')
brpsPortInfoString = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortInfoString.setStatus('mandatory')
brpsPortHTTPExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortHTTPExtensions.setStatus('mandatory')
brpsPortSNMPExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPortSNMPExtensions.setStatus('mandatory')
brpsPortAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPortAttribute.setStatus('mandatory')
brpsPortBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPortBinaryMode.setStatus('mandatory')
brpsPortInhibitDatagramSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPortInhibitDatagramSupport.setStatus('mandatory')
brpsServiceCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceCount.setStatus('mandatory')
brpsServiceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2), )
if mibBuilder.loadTexts: brpsServiceInfoTable.setStatus('mandatory')
brpsServiceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsServiceIndex"))
if mibBuilder.loadTexts: brpsServiceInfoEntry.setStatus('mandatory')
brpsServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceIndex.setStatus('mandatory')
brpsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceName.setStatus('mandatory')
brpsServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServicePort.setStatus('mandatory')
brpsServiceFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceFilter.setStatus('mandatory')
brpsServiceBOT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceBOT.setStatus('mandatory')
brpsServiceEOT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceEOT.setStatus('mandatory')
brpsServiceMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceMatch.setStatus('mandatory')
brpsServiceReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceReplace.setStatus('mandatory')
brpsServiceTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceTCPPort.setStatus('mandatory')
brpsServiceNDSTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceNDSTree.setStatus('mandatory')
brpsServiceNDSContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceNDSContext.setStatus('mandatory')
brpsServiceVines = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceVines.setStatus('mandatory')
brpsServiceObsolete = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceObsolete.setStatus('mandatory')
brpsServiceNetwareServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceNetwareServerCount.setStatus('mandatory')
brpsServiceReceiveOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceReceiveOnly.setStatus('mandatory')
brpsServiceTCPQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceTCPQueued.setStatus('mandatory')
brpsServiceProtocolLAT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolLAT.setStatus('mandatory')
brpsServiceProtocolTCPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolTCPIP.setStatus('mandatory')
brpsServiceProtocolNetware = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolNetware.setStatus('mandatory')
brpsServiceProtocolAppleTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolAppleTalk.setStatus('mandatory')
brpsServiceProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolBanyan.setStatus('mandatory')
brpsServiceProtocolDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolDLC.setStatus('mandatory')
brpsServiceProtocolNetBEUI = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolNetBEUI.setStatus('mandatory')
brpsServiceNetwareServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceNetwareServerMode.setStatus('mandatory')
brpsServiceNetwareRemotePrinterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceNetwareRemotePrinterNum.setStatus('mandatory')
brpsServiceProtocolIPP = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceProtocolIPP.setStatus('mandatory')
brpsServiceAppleTalkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceAppleTalkType.setStatus('mandatory')
brpsServiceStringLimit = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceStringLimit.setStatus('mandatory')
brpsServiceStringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 4), )
if mibBuilder.loadTexts: brpsServiceStringInfoTable.setStatus('mandatory')
brpsServiceStringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 4, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsServiceStringIndex"))
if mibBuilder.loadTexts: brpsServiceStringInfoEntry.setStatus('mandatory')
brpsServiceStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceStringIndex.setStatus('mandatory')
brpsServiceString = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsServiceString.setStatus('mandatory')
brpsServiceStringCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceStringCount.setStatus('mandatory')
brpsServiceFilterCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServiceFilterCount.setStatus('mandatory')
brpsLATSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsLATSupported.setStatus('mandatory')
brpsLATEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATEnable.setStatus('mandatory')
brpsLATCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 499))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATCircuitTimer.setStatus('mandatory')
brpsLATKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATKeepAliveTimer.setStatus('mandatory')
brpsLATReceiveBufferMax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATReceiveBufferMax.setStatus('mandatory')
brpsLATTransmitBufferMax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATTransmitBufferMax.setStatus('mandatory')
brpsLATTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 499))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATTimeout.setStatus('mandatory')
brpsLATGroup = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsLATGroup.setStatus('mandatory')
brpsTCPIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsTCPIPSupported.setStatus('mandatory')
brpsTCPIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPEnable.setStatus('mandatory')
brpsTCPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPAddress.setStatus('mandatory')
brpsTCPIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPSubnetMask.setStatus('mandatory')
brpsTCPIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPGateway.setStatus('mandatory')
brpsTCPIPMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPMethod.setStatus('mandatory')
brpsTCPIPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPTimeout.setStatus('mandatory')
brpsTCPIPBootTries = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPBootTries.setStatus('mandatory')
brpsTCPIPMaxWindow = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPMaxWindow.setStatus('mandatory')
brpsTCPIPRARPNoSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPRARPNoSubnet.setStatus('mandatory')
brpsTCPIPRARPNoGateway = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPRARPNoGateway.setStatus('mandatory')
brpsTCPIPUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPUpdate.setStatus('mandatory')
brpsTCPIPBanner = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPBanner.setStatus('mandatory')
brpsTCPIPFastTimeoutEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPFastTimeoutEnable.setStatus('mandatory')
brpsTCPIPLPRRetryEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPLPRRetryEnable.setStatus('mandatory')
brpsTCPIPUseMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPUseMethod.setStatus('mandatory')
brpsTCPIPMethodServer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPMethodServer.setStatus('mandatory')
brpsTCPIPAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 18), )
if mibBuilder.loadTexts: brpsTCPIPAccessTable.setStatus('mandatory')
brpsTCPIPAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 18, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsTCPIPAccessIndex"))
if mibBuilder.loadTexts: brpsTCPIPAccessEntry.setStatus('mandatory')
brpsTCPIPAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsTCPIPAccessIndex.setStatus('mandatory')
brpsTCPIPAccessNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 18, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPAccessNodeAddress.setStatus('mandatory')
brpsTCPIPAccessSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTCPIPAccessSubnetMask.setStatus('mandatory')
brpsAdvancedTCPIPAccessSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAdvancedTCPIPAccessSupported.setStatus('mandatory')
brpsAdvancedTCPIPAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAdvancedTCPIPAccessEnable.setStatus('mandatory')
brpsAdvancedTCPIPAccessAdministratorIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAdvancedTCPIPAccessAdministratorIPAddress.setStatus('mandatory')
brpsAdvancedTCPIPAccessSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAdvancedTCPIPAccessSetting.setStatus('mandatory')
brpsNetwareSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareSupported.setStatus('mandatory')
brpsNetwareEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwareEnable.setStatus('mandatory')
brpsNetwareFrameType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwareFrameType.setStatus('mandatory')
brpsNetwarePollFreq = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwarePollFreq.setStatus('mandatory')
brpsNetwareAdvFreq = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 210))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwareAdvFreq.setStatus('mandatory')
brpsNetwarePassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwarePassword.setStatus('mandatory')
brpsNetwareRestart = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwareRestart.setStatus('mandatory')
brpsNetwareServerTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 8), )
if mibBuilder.loadTexts: brpsNetwareServerTable.setStatus('mandatory')
brpsNetwareServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 8, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsServiceIndex"), (0, "BROTHER-MIB", "brpsNetwareServerIndex"))
if mibBuilder.loadTexts: brpsNetwareServerEntry.setStatus('mandatory')
brpsNetwareServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareServerIndex.setStatus('mandatory')
brpsNetwareServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetwareServerName.setStatus('mandatory')
brpsNetwarePasswordSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwarePasswordSet.setStatus('mandatory')
brpsNDSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNDSSupported.setStatus('mandatory')
brpsNetwareEtherIINetInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareEtherIINetInfo.setStatus('mandatory')
brpsNetwareEtherIICount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareEtherIICount.setStatus('mandatory')
brpsNetware8022NetInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetware8022NetInfo.setStatus('mandatory')
brpsNetware8022Count = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetware8022Count.setStatus('mandatory')
brpsNetware8023NetInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetware8023NetInfo.setStatus('mandatory')
brpsNetware8023Count = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetware8023Count.setStatus('mandatory')
brpsNetwareSNAPNetInfo = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareSNAPNetInfo.setStatus('mandatory')
brpsNetwareSNAPCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareSNAPCount.setStatus('mandatory')
brpsNetwareServicingServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareServicingServerName.setStatus('mandatory')
brpsNetwareServicingQueueName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareServicingQueueName.setStatus('mandatory')
brpsNetwareServicingServerCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareServicingServerCount.setStatus('mandatory')
brpsNetwareServicingQueueCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwareServicingQueueCount.setStatus('mandatory')
brpsNetwarePrintJob = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetwarePrintJob.setStatus('mandatory')
brpsAppleTalkSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkSupported.setStatus('mandatory')
brpsAppleTalkEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAppleTalkEnable.setStatus('mandatory')
brpsAppleTalkZone = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAppleTalkZone.setStatus('mandatory')
brpsAppleTalkPrintJob = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkPrintJob.setStatus('mandatory')
brpsAppleTalkReadByte = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkReadByte.setStatus('mandatory')
brpsAppleTalkWriteByte = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkWriteByte.setStatus('mandatory')
brpsAppleTalkReadError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkReadError.setStatus('mandatory')
brpsAppleTalkWriteError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAppleTalkWriteError.setStatus('mandatory')
brpsBanyanSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanSupported.setStatus('mandatory')
brpsBanyanEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsBanyanEnable.setStatus('mandatory')
brpsBanyanLoginName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsBanyanLoginName.setStatus('mandatory')
brpsBanyanPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsBanyanPassword.setStatus('mandatory')
brpsBanyanHopCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsBanyanHopCount.setStatus('mandatory')
brpsBanyanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsBanyanTimeout.setStatus('mandatory')
brpsBanyanPasswordSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanPasswordSet.setStatus('mandatory')
brpsBanyanIPNetworkID1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPNetworkID1.setStatus('mandatory')
brpsBanyanIPNetworkID2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPNetworkID2.setStatus('mandatory')
brpsBanyanRouter1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanRouter1.setStatus('mandatory')
brpsBanyanRouter2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanRouter2.setStatus('mandatory')
brpsBanyanIPPacket = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPPacket.setStatus('mandatory')
brpsBanyanErrorCS = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanErrorCS.setStatus('mandatory')
brpsBanyanErrorPT = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanErrorPT.setStatus('mandatory')
brpsBanyanErrorLE = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanErrorLE.setStatus('mandatory')
brpsBanyanPrintServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanPrintServerStatus.setStatus('mandatory')
brpsBanyanServerAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanServerAddress1.setStatus('mandatory')
brpsBanyanServerAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanServerAddress2.setStatus('mandatory')
brpsBanyanIPCConnectionInformation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPCConnectionInformation.setStatus('mandatory')
brpsBanyanIPCSequenceError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPCSequenceError.setStatus('mandatory')
brpsBanyanIPCListen = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanIPCListen.setStatus('mandatory')
brpsBanyanSPPConnectionInformation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanSPPConnectionInformation.setStatus('mandatory')
brpsBanyanSPPSequenceError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanSPPSequenceError.setStatus('mandatory')
brpsBanyanSPPListen = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsBanyanSPPListen.setStatus('mandatory')
brpsEmailSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsEmailSupported.setStatus('mandatory')
brpsEmailEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailEnable.setStatus('mandatory')
brpsPOP3Address = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3Address.setStatus('mandatory')
brpsSMTPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSMTPAddress.setStatus('mandatory')
brpsPOP3Name = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3Name.setStatus('mandatory')
brpsPOP3Password = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3Password.setStatus('mandatory')
brpsPOP3PollFreq = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3PollFreq.setStatus('mandatory')
brpsPOP3Timeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3Timeout.setStatus('mandatory')
brpsPOP3PasswordSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3PasswordSet.setStatus('mandatory')
brpsPOP3TotalMessage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalMessage.setStatus('mandatory')
brpsPOP3TotalConnect = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalConnect.setStatus('mandatory')
brpsPOP3TotalConnectFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalConnectFailure.setStatus('mandatory')
brpsPOP3TotalConnectionLost = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalConnectionLost.setStatus('mandatory')
brpsPOP3TotalUserFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalUserFailure.setStatus('mandatory')
brpsPOP3TotalPasswordFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalPasswordFailure.setStatus('mandatory')
brpsPOP3TotalIOError = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalIOError.setStatus('mandatory')
brpsSMTPTotalMessage = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPTotalMessage.setStatus('mandatory')
brpsSMTPTotalConnect = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPTotalConnect.setStatus('mandatory')
brpsSMTPTotalConnectFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPTotalConnectFailure.setStatus('mandatory')
brpsSMTPTotalRecvFromFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPTotalRecvFromFailure.setStatus('mandatory')
brpsSMTPTotalSendToFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPTotalSendToFailure.setStatus('mandatory')
brpsPOP3Supported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3Supported.setStatus('mandatory')
brpsSMTPServerAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSMTPServerAuthMethod.setStatus('mandatory')
brpsSMTPAUTHUsername = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 103), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSMTPAUTHUsername.setStatus('mandatory')
brpsSMTPAUTHPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 104), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSMTPAUTHPassword.setStatus('mandatory')
brpsSMTPAUTHPasswordSet = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPAUTHPasswordSet.setStatus('mandatory')
brpsSmtpAUTHTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSmtpAUTHTimeout.setStatus('mandatory')
brpsPOPbeforeSMTPWait = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOPbeforeSMTPWait.setStatus('mandatory')
brpsAPOPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAPOPEnable.setStatus('mandatory')
brpsSMTPEnhancedAuthSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 150), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsSMTPEnhancedAuthSupported.setStatus('mandatory')
brpsAPOPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 151), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAPOPSupported.setStatus('mandatory')
brpsEmailSendTestSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 152), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsEmailSendTestSupported.setStatus('mandatory')
brpsEmailRecvTestSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 153), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsEmailRecvTestSupported.setStatus('mandatory')
brpsChangeSMTPPortSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 154), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsChangeSMTPPortSupported.setStatus('mandatory')
brpsSMTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 155), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsSMTPPortNumber.setStatus('mandatory')
brpsChangePOP3PortSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 156), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsChangePOP3PortSupported.setStatus('mandatory')
brpsPOP3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 157), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsPOP3PortNumber.setStatus('mandatory')
brpsTmpSMTPServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 170), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPServerName.setStatus('mandatory')
brpsTmpSMTPServerAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 171), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPServerAuthMethod.setStatus('mandatory')
brpsTmpSMTPAUTHUsername = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 172), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPAUTHUsername.setStatus('mandatory')
brpsTmpSMTPAUTHPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 173), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPAUTHPassword.setStatus('mandatory')
brpsTmpPOP3ServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 174), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPOP3ServerName.setStatus('mandatory')
brpsTmpPOP3Name = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 175), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPOP3Name.setStatus('mandatory')
brpsTmpPOP3Password = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 176), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPOP3Password.setStatus('mandatory')
brpsTmpPrintersEmailaddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 177), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPrintersEmailaddress.setStatus('mandatory')
brpsTmpAPOPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 178), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpAPOPEnable.setStatus('mandatory')
brpsTmpSMTPAUTHPasswordModified = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 179), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPAUTHPasswordModified.setStatus('mandatory')
brpsTmpPOP3PasswordModified = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 180), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPOP3PasswordModified.setStatus('mandatory')
brpsTmpSMTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 181), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpSMTPPortNumber.setStatus('mandatory')
brpsTmpPOP3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 182), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsTmpPOP3PortNumber.setStatus('mandatory')
brpsEmailSendTestMail = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 200), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailSendTestMail.setStatus('mandatory')
brpsEmailTestDestinationAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailTestDestinationAddress.setStatus('mandatory')
brpsEmailSendTestCall = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 210), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailSendTestCall.setStatus('mandatory')
brpsEmailRecvTestCall = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailRecvTestCall.setStatus('mandatory')
brpsEmailSendRecvTestCall = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailSendRecvTestCall.setStatus('mandatory')
brpsEmailTestResult = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 220), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsEmailTestResult.setStatus('mandatory')
brpsPOP3TotalAPOPFailure = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 6, 221), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPOP3TotalAPOPFailure.setStatus('mandatory')
brpsDLCSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCSupported.setStatus('mandatory')
brpsDLCEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsDLCEnable.setStatus('mandatory')
brpsDLCPrintStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCPrintStatus.setStatus('mandatory')
brpsDLCLLCState = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCLLCState.setStatus('mandatory')
brpsDLCLLCConnectHost = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCLLCConnectHost.setStatus('mandatory')
brpsDLCLLCLastIFrame = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCLLCLastIFrame.setStatus('mandatory')
brpsDLCLLCRecvPacket = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCLLCRecvPacket.setStatus('mandatory')
brpsDLCLLCPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsDLCLLCPortStatus.setStatus('mandatory')
brpsIPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsIPPSupported.setStatus('mandatory')
brpsIPPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsIPPEnable.setStatus('mandatory')
brIPPRegularPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brIPPRegularPortEnable.setStatus('mandatory')
brIPPSSLPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brIPPSSLPortEnable.setStatus('mandatory')
brIPPOriginalPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brIPPOriginalPortEnable.setStatus('mandatory')
brpsNtSendSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNtSendSupported.setStatus('mandatory')
brpsNtSendEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNtSendEnable.setStatus('mandatory')
brpsFirmwareIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareIPAddress.setStatus('mandatory')
brpsFirmwareHost = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareHost.setStatus('mandatory')
brpsFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareFile.setStatus('mandatory')
brpsFirmwareReload = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareReload.setStatus('mandatory')
brpsFirmwareDescription = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsFirmwareDescription.setStatus('mandatory')
brpsFirmwareXModem = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareXModem.setStatus('mandatory')
brpsFirmwareAdvancedAddressSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsFirmwareAdvancedAddressSupported.setStatus('mandatory')
brpsFirmwareAdvancedAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsFirmwareAdvancedAddress.setStatus('mandatory')
brpsNetBEUISupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetBEUISupported.setStatus('mandatory')
brpsNetBEUIEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBEUIEnable.setStatus('mandatory')
brpsNetBEUIDomain = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBEUIDomain.setStatus('mandatory')
brpsNetBIOSIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetBIOSIPSupported.setStatus('mandatory')
brpsNetBIOSIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBIOSIPEnable.setStatus('mandatory')
brpsNetBIOSIPMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBIOSIPMethod.setStatus('mandatory')
brpsNetBIOSPrimaryWINSAddr = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBIOSPrimaryWINSAddr.setStatus('mandatory')
brpsNetBIOSSecondaryWINSAddr = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsNetBIOSSecondaryWINSAddr.setStatus('mandatory')
brpsNetBIOSPrintingSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 1240, 5, 8, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsNetBIOSPrintingSupported.setStatus('mandatory')
brLPDType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLPDType.setStatus('mandatory')
brFTPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFTPSupported.setStatus('mandatory')
brFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFTPEnable.setStatus('mandatory')
brUPnPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brUPnPSupported.setStatus('mandatory')
brUPnPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brUPnPEnable.setStatus('mandatory')
brAPIPASupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brAPIPASupported.setStatus('mandatory')
brAPIPAEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brAPIPAEnable.setStatus('mandatory')
brmDNSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brmDNSSupported.setStatus('mandatory')
brmDNSEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmDNSEnable.setStatus('mandatory')
brmDNSPrinterName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmDNSPrinterName.setStatus('mandatory')
brLAASupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLAASupported.setStatus('mandatory')
brLAAMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 14, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLAAMacAddress.setStatus('mandatory')
brIPv6Supported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brIPv6Supported.setStatus('mandatory')
brIPv6Enable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brIPv6Enable.setStatus('mandatory')
brIPv6Priority = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brIPv6Priority.setStatus('mandatory')
brtelnetSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brtelnetSupported.setStatus('mandatory')
brtelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brtelnetEnable.setStatus('mandatory')
brEWSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brEWSSupported.setStatus('mandatory')
brEWSEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEWSEnable.setStatus('mandatory')
brEWSRegularPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEWSRegularPortEnable.setStatus('mandatory')
brEWSSSLPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brEWSSSLPortEnable.setStatus('mandatory')
brSNMPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSNMPSupported.setStatus('mandatory')
brSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPEnable.setStatus('mandatory')
brTFTPSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTFTPSupported.setStatus('mandatory')
brTFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTFTPEnable.setStatus('mandatory')
brHTTPSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 21, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brHTTPSSupported.setStatus('mandatory')
brHTTPSEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brHTTPSEnable.setStatus('mandatory')
brLPDSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLPDSupported.setStatus('mandatory')
brLPDEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLPDEnable.setStatus('mandatory')
brRawPortSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brRawPortSupported.setStatus('mandatory')
brRawPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRawPortEnable.setStatus('mandatory')
brLLTDSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLLTDSupported.setStatus('mandatory')
brLLTDEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLLTDEnable.setStatus('mandatory')
brWebServicesSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brWebServicesSupported.setStatus('mandatory')
brWebServicesEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brWebServicesEnable.setStatus('mandatory')
brWebServicesRegularPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brWebServicesRegularPortEnable.setStatus('mandatory')
brWebServicesSSLPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brWebServicesSSLPortEnable.setStatus('mandatory')
brLLMNREnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 26, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLLMNREnable.setStatus('mandatory')
brProxySupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProxySupported.setStatus('mandatory')
brProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brProxyEnable.setStatus('mandatory')
brProxyBypassServer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brProxyBypassServer.setStatus('mandatory')
brProxyServerCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProxyServerCount.setStatus('mandatory')
brProxyServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12), )
if mibBuilder.loadTexts: brProxyServerInfoTable.setStatus('mandatory')
brProxyServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12, 1), ).setIndexNames((0, "BROTHER-MIB", "brProxyServerInfoIndex"))
if mibBuilder.loadTexts: brProxyServerInfoEntry.setStatus('mandatory')
brProxyServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProxyServerInfoIndex.setStatus('mandatory')
brProxyServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("http", 1), ("secure", 2), ("ftp", 3), ("gopher", 4), ("socks", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brProxyServerType.setStatus('mandatory')
brProxyServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brProxyServerName.setStatus('mandatory')
brProxyServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 10, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brProxyServerPort.setStatus('mandatory')
brJobTerminationSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brJobTerminationSupported.setStatus('mandatory')
brJobTerminationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brJobTerminationEnable.setStatus('mandatory')
brSNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 2, 1), )
if mibBuilder.loadTexts: brSNMPTrapTable.setStatus('mandatory')
brSNMPTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 2, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brSNMPTrapIndex"))
if mibBuilder.loadTexts: brSNMPTrapEntry.setStatus('mandatory')
brSNMPTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSNMPTrapIndex.setStatus('mandatory')
brTCPIPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTCPIPServerAddress.setStatus('mandatory')
brLegacyCompatible = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 20, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLegacyCompatible.setStatus('mandatory')
brDeviceNegotiationEncryptVer = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brDeviceNegotiationEncryptVer.setStatus('mandatory')
brpsServerCertificateNum = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsServerCertificateNum.setStatus('mandatory')
brDeviceNegotiationGetChallenge = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 10, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brDeviceNegotiationGetChallenge.setStatus('mandatory')
brDeviceNegotiationConfirmPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 10, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDeviceNegotiationConfirmPassword.setStatus('mandatory')
brDeviceNegotiationChangePassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 100, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brDeviceNegotiationChangePassword.setStatus('mandatory')
brpsWLanDot11Supported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanDot11Supported.setStatus('mandatory')
brpsWLanAvailableChannel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAvailableChannel.setStatus('mandatory')
brpsWLanCapabilityEncryptModeCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeCount.setStatus('mandatory')
brpsWLanCapabilityEncryptModeTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4), )
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeTable.setStatus('mandatory')
brpsWLanCapabilityEncryptModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsWLanCapabilityEncryptModeIndex"))
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeEntry.setStatus('mandatory')
brpsWLanCapabilityEncryptModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeIndex.setStatus('mandatory')
brpsWLanCapabilityEncryptModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4), ("ckip", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeType.setStatus('mandatory')
brpsWLanCapabilityEncryptModeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeDescription.setStatus('mandatory')
brpsWLanCapabilityEncryptModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityEncryptModeSupported.setStatus('mandatory')
brpsWLanCapabilityAuthModeCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeCount.setStatus('mandatory')
brpsWLanCapabilityAuthModeTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6), )
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeTable.setStatus('mandatory')
brpsWLanCapabilityAuthModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsWLanCapabilitAuthModeIndex"))
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeEntry.setStatus('mandatory')
brpsWLanCapabilitAuthModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilitAuthModeIndex.setStatus('mandatory')
brpsWLanCapabilityAuthModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("opensystem", 1), ("shardkey", 2), ("wpa-psk", 3), ("wpa-none", 4), ("wpa", 5), ("wpa2", 6), ("leap", 7), ("eapfast-none", 8), ("eapfast-mschapv2", 9), ("eapfast-gtc", 10), ("eapfast-tls", 11), ("wpa2-psk", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeType.setStatus('mandatory')
brpsWLanCapabilityAuthModeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeDescription.setStatus('mandatory')
brpsWLanCapabilityAuthModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthModeSupported.setStatus('mandatory')
brpsWLanCapabilityAuthEAPCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPCount.setStatus('mandatory')
brpsWLanCapabilityAuthEAPTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8), )
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPTable.setStatus('mandatory')
brpsWLanCapabilityAuthEAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsWLanCapabilityAuthEAPIndex"))
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPEntry.setStatus('mandatory')
brpsWLanCapabilityAuthEAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPIndex.setStatus('mandatory')
brpsWLanCapabilityAuthEAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("eap-md5", 1), ("eap-tls", 2), ("eap-ttls", 3), ("peap", 4), ("leap", 5), ("eapfast-none", 6), ("eapfast-mschapv2", 7), ("eapfast-gtc", 8), ("eapfast-tls", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPType.setStatus('mandatory')
brpsWLanCapabilityAuthEAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPDescription.setStatus('mandatory')
brpsWLanCapabilityAuthEAPSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPSupported.setStatus('mandatory')
brpsWLanDestination = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanDestination.setStatus('mandatory')
brpsWLanTransmitLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanTransmitLevel.setStatus('mandatory')
brpsPit3WLanTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsPit3WLanTestStatus.setStatus('mandatory')
brpsWLanNetSearchSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanNetSearchSupported.setStatus('mandatory')
brpsAvailableWLanScan = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsAvailableWLanScan.setStatus('mandatory')
brpsAvailableWLanScanWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanScanWaitTime.setStatus('mandatory')
brpsAvailableWLanCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanCount.setStatus('mandatory')
brpsAvailableWLanTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11), )
if mibBuilder.loadTexts: brpsAvailableWLanTable.setStatus('mandatory')
brpsAvailableWLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsAvailableWLanIndex"))
if mibBuilder.loadTexts: brpsAvailableWLanEntry.setStatus('mandatory')
brpsAvailableWLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanIndex.setStatus('mandatory')
brpsAvailableWLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanName.setStatus('mandatory')
brpsAvailableWLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11b-gAuto", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanMode.setStatus('mandatory')
brpsAvailableWLanCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accesPoint", 1), ("adhoc-Wi-Fi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanCommMode.setStatus('mandatory')
brpsAvailableWLanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanChannel.setStatus('mandatory')
brpsAvailableWLanPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanPowerLevel.setStatus('mandatory')
brpsAvailableWLanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanAuthMode.setStatus('mandatory')
brpsAvailableWLanEncryptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 11, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("wep", 3), ("tkip", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsAvailableWLanEncryptMode.setStatus('mandatory')
brpsWLanAOSSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAOSSSupported.setStatus('mandatory')
brpsWLanAOSSIsRunnning = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAOSSIsRunnning.setStatus('mandatory')
brpsWLanSESSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanSESSupported.setStatus('mandatory')
brpsWLanWPSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanWPSSupported.setStatus('mandatory')
brpsWLanWPSResult = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanWPSResult.setStatus('mandatory')
brpsWLanAPSetupMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAPSetupMode.setStatus('mandatory')
brpsWLanMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11b-gAuto", 1), ("dot11b", 2), ("dot11g", 3), ("dot11g-turbo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanMode.setStatus('mandatory')
brpsWLanName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanName.setStatus('mandatory')
brpsWLanCommMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("infrastructure", 1), ("ad-Hoc-WiFi", 2), ("ad-Hoc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanCommMode.setStatus('mandatory')
brpsWLanChannel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanChannel.setStatus('mandatory')
brpsWLanCtsMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("always", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanCtsMode.setStatus('mandatory')
brpsWLanCtsRate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanCtsRate.setStatus('mandatory')
brpsWLanCtsType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("only", 1), ("rts-cts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanCtsType.setStatus('mandatory')
brpsWLanRtsCtsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanRtsCtsThreshold.setStatus('mandatory')
brpsWLanLengthThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanLengthThreshold.setStatus('mandatory')
brpsWLanDataRetry = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanDataRetry.setStatus('mandatory')
brpsWLanTransmitPowerSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 3), ("one-eighth", 4), ("minimum", 5), ("off", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanTransmitPowerSetting.setStatus('mandatory')
brpsWLanDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stationMode", 1), ("accessPointMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanDeviceType.setStatus('mandatory')
brpsWLanEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanEncryptMode.setStatus('mandatory')
brpsWLanAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("wpa-psk", 3), ("wpa-none", 4), ("wpa", 5), ("wpa2", 6), ("leap", 7), ("eapfast-none", 8), ("eapfast-mschapv2", 9), ("eapfast-gtc", 10), ("eapfast-tls", 11), ("wpa2-psk", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanAuthMode.setStatus('mandatory')
brpsWLanAuthEAP = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("eapMD5", 1), ("eapTLS", 2), ("eapTTLS", 3), ("peap", 4), ("leap", 5), ("eapfast-none", 6), ("eapfast-mschapv2", 7), ("eapfast-gtc", 8), ("eapfast-tls", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanAuthEAP.setStatus('mandatory')
brpsWLanAuthUserID = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanAuthUserID.setStatus('mandatory')
brpsWLanAuthUserPass = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanAuthUserPass.setStatus('mandatory')
brpsWLanAssociate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("update", 1), ("print", 2), ("test", 3), ("applyonly", 4), ("simplewizard", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanAssociate.setStatus('mandatory')
brpsWLanAssociateTestResult = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("linkOK", 1), ("noSuchWLan", 2), ("invalidWLanNetKey", 3), ("invalidAuthUserID", 4), ("invalidAuthUserPass", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAssociateTestResult.setStatus('mandatory')
brpsWLanAssociateResult = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("linkOK", 1), ("noSuchWLan", 2), ("invalidWLanNetKey", 3), ("invalidAuthUserID", 4), ("invalidAuthUserPass", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAssociateResult.setStatus('mandatory')
brpsWLanAssociateTestSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanAssociateTestSupported.setStatus('mandatory')
brpsWLanWepKeyDefaultIndex = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanWepKeyDefaultIndex.setStatus('mandatory')
brpsWLanWepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11), )
if mibBuilder.loadTexts: brpsWLanWepKeyTable.setStatus('mandatory')
brpsWLanWepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11, 1), ).setIndexNames((0, "BROTHER-MIB", "brpsWLanWepKeyIndex"))
if mibBuilder.loadTexts: brpsWLanWepKeyEntry.setStatus('mandatory')
brpsWLanWepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanWepKeyIndex.setStatus('mandatory')
brpsWLanWepKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("size40", 1), ("size104", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanWepKeySize.setStatus('mandatory')
brpsWLanWepKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanWepKeyType.setStatus('mandatory')
brpsWLanWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 101, 11, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanWepKey.setStatus('mandatory')
brpsWLanNetworkKey = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 102, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanNetworkKey.setStatus('mandatory')
brpsWLanTKIPChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 103, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanTKIPChangeInterval.setStatus('mandatory')
brpsWLanLEAPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 11, 11, 104, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brpsWLanLEAPTimeout.setStatus('mandatory')
brpsWLanOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingMode.setStatus('mandatory')
brpsWLanRSSLevel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanRSSLevel.setStatus('mandatory')
brpsWLanCommSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCommSpeed.setStatus('mandatory')
brpsWLanOperatingChannel = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingChannel.setStatus('mandatory')
brpsWLanOperatingName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingName.setStatus('mandatory')
brpsWLanOperatingCommMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingCommMode.setStatus('mandatory')
brpsWLanOperatingEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingEncryptMode.setStatus('mandatory')
brpsWLanOperatingAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingAuthMode.setStatus('mandatory')
brpsWLanOperatingWepKeyDefaultIndex = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanOperatingWepKeyDefaultIndex.setStatus('mandatory')
brMultiIFSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFSupported.setStatus('mandatory')
brMultiIFActiveIF = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lan", 1), ("wirelesslan", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFActiveIF.setStatus('mandatory')
brMultiIFAllSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFAllSetDefault.setStatus('mandatory')
brMultiIFCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFCount.setStatus('mandatory')
brMultiIFConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5), )
if mibBuilder.loadTexts: brMultiIFConfigureTable.setStatus('mandatory')
brMultiIFConfigureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFConfigureEntry.setStatus('mandatory')
brMultiIFConfigureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFConfigureIndex.setStatus('mandatory')
brMultiIFType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan", 1), ("wirelesslan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFType.setStatus('mandatory')
brMultiIFDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFDescription.setStatus('mandatory')
brMultiIFNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFNodeName.setStatus('mandatory')
brMultiIFInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFInterfaceEnable.setStatus('mandatory')
brMultiIFEnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFEnetMode.setStatus('mandatory')
brMultiIFHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFHardwareType.setStatus('mandatory')
brMultiIFNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFNodeType.setStatus('mandatory')
brMultiIFInterfaceEnableImmediate = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFInterfaceEnableImmediate.setStatus('mandatory')
brMultiIFPrimaryInterface = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFPrimaryInterface.setStatus('mandatory')
brMultiIFInterfaceInformation = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFInterfaceInformation.setStatus('mandatory')
brMultiIFDNSTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1), )
if mibBuilder.loadTexts: brMultiIFDNSTable.setStatus('mandatory')
brMultiIFDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFDNSEntry.setStatus('mandatory')
brMultiIFTCPIPDNSIPSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPDNSIPSetup.setStatus('mandatory')
brMultiIFPrimaryDNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFPrimaryDNSIPAddress.setStatus('mandatory')
brMultiIFSecondaryDNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFSecondaryDNSIPAddress.setStatus('mandatory')
brMultiIFTCPIPConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 99, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPConnectTime.setStatus('mandatory')
brMultiIFControlTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 2, 1), )
if mibBuilder.loadTexts: brMultiIFControlTable.setStatus('mandatory')
brMultiIFControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 2, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFControlEntry.setStatus('mandatory')
brMultiIFSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFSetDefault.setStatus('mandatory')
brMultiIFServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1), )
if mibBuilder.loadTexts: brMultiIFServiceTable.setStatus('mandatory')
brMultiIFServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFServiceEntry.setStatus('mandatory')
brMultiIFServiceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceCount.setStatus('mandatory')
brMultiIFServiceStringLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceStringLimit.setStatus('mandatory')
brMultiIFServiceStringCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceStringCount.setStatus('mandatory')
brMultiIFServiceFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceFilterCount.setStatus('mandatory')
brMultiIFServiceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2), )
if mibBuilder.loadTexts: brMultiIFServiceInfoTable.setStatus('mandatory')
brMultiIFServiceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"), (0, "BROTHER-MIB", "brMultiIFServiceIndex"))
if mibBuilder.loadTexts: brMultiIFServiceInfoEntry.setStatus('mandatory')
brMultiIFServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceIndex.setStatus('mandatory')
brMultiIFServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceName.setStatus('mandatory')
brMultiIFServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServicePort.setStatus('mandatory')
brMultiIFServiceFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceFilter.setStatus('mandatory')
brMultiIFServiceBOT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceBOT.setStatus('mandatory')
brMultiIFServiceEOT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceEOT.setStatus('mandatory')
brMultiIFServiceMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceMatch.setStatus('mandatory')
brMultiIFServiceReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceReplace.setStatus('mandatory')
brMultiIFServiceTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceTCPPort.setStatus('mandatory')
brMultiIFServiceNDSTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceNDSTree.setStatus('mandatory')
brMultiIFServiceNDSContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceNDSContext.setStatus('mandatory')
brMultiIFServiceVines = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceVines.setStatus('mandatory')
brMultiIFServiceObsolete = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceObsolete.setStatus('mandatory')
brMultiIFServiceNetwareServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceNetwareServerCount.setStatus('mandatory')
brMultiIFServiceReceiveOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceReceiveOnly.setStatus('mandatory')
brMultiIFServiceTCPQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceTCPQueued.setStatus('mandatory')
brMultiIFServiceProtocolLAT = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolLAT.setStatus('mandatory')
brMultiIFServiceProtocolTCPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolTCPIP.setStatus('mandatory')
brMultiIFServiceProtocolNetware = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolNetware.setStatus('mandatory')
brMultiIFServiceProtocolAppleTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolAppleTalk.setStatus('mandatory')
brMultiIFServiceProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolBanyan.setStatus('mandatory')
brMultiIFServiceProtocolDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolDLC.setStatus('mandatory')
brMultiIFServiceProtocolNetBEUI = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolNetBEUI.setStatus('mandatory')
brMultiIFServiceNetwareServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceNetwareServerMode.setStatus('mandatory')
brMultiIFServiceNetwareRemotePrinterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceNetwareRemotePrinterNum.setStatus('mandatory')
brMultiIFServiceProtocolIPP = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceProtocolIPP.setStatus('mandatory')
brMultiIFServiceAppleTalkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceAppleTalkType.setStatus('mandatory')
brMultiIFServiceStringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 3), )
if mibBuilder.loadTexts: brMultiIFServiceStringInfoTable.setStatus('mandatory')
brMultiIFServiceStringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 3, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"), (0, "BROTHER-MIB", "brMultiIFServiceStringIndex"))
if mibBuilder.loadTexts: brMultiIFServiceStringInfoEntry.setStatus('mandatory')
brMultiIFServiceStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFServiceStringIndex.setStatus('mandatory')
brMultiIFServiceString = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFServiceString.setStatus('mandatory')
brMultiIFTCPIPTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1), )
if mibBuilder.loadTexts: brMultiIFTCPIPTable.setStatus('mandatory')
brMultiIFTCPIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFTCPIPEntry.setStatus('mandatory')
brMultiIFTCPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPAddress.setStatus('mandatory')
brMultiIFTCPIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPSubnetMask.setStatus('mandatory')
brMultiIFTCPIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPGateway.setStatus('mandatory')
brMultiIFTCPIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPMethod.setStatus('mandatory')
brMultiIFTCPIPUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPUpdate.setStatus('mandatory')
brMultiIFTCPIPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPTimeout.setStatus('mandatory')
brMultiIFTCPIPBootTries = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPBootTries.setStatus('mandatory')
brMultiIFTCPIPRARPNoSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPRARPNoSubnet.setStatus('mandatory')
brMultiIFTCPIPRARPNoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPRARPNoGateway.setStatus('mandatory')
brMultiIFTCPIPUseMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPUseMethod.setStatus('mandatory')
brMultiIFTCPIPMethodServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPMethodServer.setStatus('mandatory')
brMultiIFNetBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1), )
if mibBuilder.loadTexts: brMultiIFNetBIOSTable.setStatus('mandatory')
brMultiIFNetBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFNetBIOSEntry.setStatus('mandatory')
brMultiIFNetBIOSIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFNetBIOSIPMethod.setStatus('mandatory')
brMultiIFTCPIPNetBIOSPrimaryWINSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPNetBIOSPrimaryWINSAddr.setStatus('mandatory')
brMultiIFTCPIPNetBIOSSecondaryWINSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFTCPIPNetBIOSSecondaryWINSAddr.setStatus('mandatory')
brMultiIFNetBEUIDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFNetBEUIDomain.setStatus('mandatory')
brMultiIFAPIPATable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 12, 1), )
if mibBuilder.loadTexts: brMultiIFAPIPATable.setStatus('mandatory')
brMultiIFAPIPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 12, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFAPIPAEntry.setStatus('mandatory')
brMultiIFAPIPASupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFAPIPASupported.setStatus('mandatory')
brMultiIFAPIPAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFAPIPAEnable.setStatus('mandatory')
brMultiIFLAATable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 14, 1), )
if mibBuilder.loadTexts: brMultiIFLAATable.setStatus('mandatory')
brMultiIFLAAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 14, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFLAAEntry.setStatus('mandatory')
brMultiIFLAASupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFLAASupported.setStatus('mandatory')
brMultiIFLAAMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFLAAMacAddress.setStatus('mandatory')
brMultiIFIPv6AddressCountTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 1), )
if mibBuilder.loadTexts: brMultiIFIPv6AddressCountTable.setStatus('mandatory')
brMultiIFIPv6AddressCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFIPv6AddressCountEntry.setStatus('mandatory')
brMultiIFIPv6AddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6AddressCount.setStatus('mandatory')
brMultiIFIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2), )
if mibBuilder.loadTexts: brMultiIFIPv6AddressTable.setStatus('mandatory')
brMultiIFIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"), (0, "BROTHER-MIB", "brMultiIFIPv6AddressIndex"))
if mibBuilder.loadTexts: brMultiIFIPv6AddressEntry.setStatus('mandatory')
brMultiIFIPv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6AddressIndex.setStatus('mandatory')
brMultiIFIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6Address.setStatus('mandatory')
brMultiIFIPv6UseMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6UseMethod.setStatus('mandatory')
brMultiIFIPv6MethodServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6MethodServer.setStatus('mandatory')
brMultiIFIPv6StaticAddressCountTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 3), )
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressCountTable.setStatus('mandatory')
brMultiIFIPv6StaticAddressCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 3, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressCountEntry.setStatus('mandatory')
brMultiIFIPv6StaticAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressCount.setStatus('mandatory')
brMultiIFIPv6StaticAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4), )
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressTable.setStatus('mandatory')
brMultiIFIPv6StaticAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"), (0, "BROTHER-MIB", "brMultiIFIPv6StaticAddressIndex"))
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressEntry.setStatus('mandatory')
brMultiIFIPv6StaticAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressIndex.setStatus('mandatory')
brMultiIFIPv6StaticAddressEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressEnable.setStatus('mandatory')
brMultiIFIPv6StaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddress.setStatus('mandatory')
brMultiIFIPv6StaticAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFIPv6StaticAddressPrefixLength.setStatus('mandatory')
brMultiIFDNSIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 5), )
if mibBuilder.loadTexts: brMultiIFDNSIPv6AddressTable.setStatus('mandatory')
brMultiIFDNSIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 5, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFDNSIPv6AddressEntry.setStatus('mandatory')
brMultiIFPrimaryDNSIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 5, 1, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFPrimaryDNSIPv6Address.setStatus('mandatory')
brMultiIFSecondaryDNSIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 15, 5, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFSecondaryDNSIPv6Address.setStatus('mandatory')
brMultiIFWebServicesTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16, 1), )
if mibBuilder.loadTexts: brMultiIFWebServicesTable.setStatus('mandatory')
brMultiIFWebServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16, 1, 1), ).setIndexNames((0, "BROTHER-MIB", "brMultiIFConfigureIndex"))
if mibBuilder.loadTexts: brMultiIFWebServicesEntry.setStatus('mandatory')
brMultiIFWebServicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFWebServicesName.setStatus('mandatory')
brMultiIFWebServicesInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFWebServicesInstanceID.setStatus('mandatory')
brMultiIFWebServicesMetadataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 4, 1240, 5, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brMultiIFWebServicesMetadataVersion.setStatus('mandatory')
brLdapSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapSupported.setStatus('mandatory')
brLdapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapEnable.setStatus('mandatory')
brLdapTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapTimeout.setStatus('mandatory')
brLdapTimeoutSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapTimeoutSupported.setStatus('mandatory')
brLdapServerCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapServerCount.setStatus('mandatory')
brLdapServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12), )
if mibBuilder.loadTexts: brLdapServerInfoTable.setStatus('mandatory')
brLdapServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1), ).setIndexNames((0, "BROTHER-MIB", "brLdapServerInfoIndex"))
if mibBuilder.loadTexts: brLdapServerInfoEntry.setStatus('mandatory')
brLdapServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapServerInfoIndex.setStatus('mandatory')
brLdapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerName.setStatus('mandatory')
brLdapServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerPort.setStatus('mandatory')
brLdapServerAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("anonymous", 1), ("simple", 2), ("kerberos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAuth.setStatus('mandatory')
brLdapServerUserDN = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerUserDN.setStatus('mandatory')
brLdapServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerPassword.setStatus('mandatory')
brLdapServerPasswordSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapServerPasswordSet.setStatus('mandatory')
brLdapServerBaseDN = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerBaseDN.setStatus('mandatory')
brLdapServerAttrEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrEMail.setStatus('mandatory')
brLdapServerAttrFAXNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrFAXNumber.setStatus('mandatory')
brLdapServerAttrDetail1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetail1.setStatus('mandatory')
brLdapServerAttrDetail2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetail2.setStatus('mandatory')
brLdapServerAttrDetail3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetail3.setStatus('mandatory')
brLdapServerAttrDetail4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetail4.setStatus('mandatory')
brLdapServerAttrDetailEnable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetailEnable1.setStatus('mandatory')
brLdapServerAttrDetailEnable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetailEnable2.setStatus('mandatory')
brLdapServerAttrDetailEnable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetailEnable3.setStatus('mandatory')
brLdapServerAttrDetailEnable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrDetailEnable4.setStatus('mandatory')
brLdapServerAttrNameCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapServerAttrNameCount.setStatus('mandatory')
brLdapServerAttrNameTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 22), )
if mibBuilder.loadTexts: brLdapServerAttrNameTable.setStatus('mandatory')
brLdapServerAttrNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 22, 1), ).setIndexNames((0, "BROTHER-MIB", "brLdapServerInfoIndex"), (0, "BROTHER-MIB", "brLdapServerAttrNameIndex"))
if mibBuilder.loadTexts: brLdapServerAttrNameEntry.setStatus('mandatory')
brLdapServerAttrNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brLdapServerAttrNameIndex.setStatus('mandatory')
brLdapServerAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapServerAttrName.setStatus('mandatory')
brLdapSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapSetDefault.setStatus('mandatory')
brFuncLockSettingInit = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockSettingInit.setStatus('mandatory')
brFuncLockAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockAdminPassword.setStatus('mandatory')
brFuncLock = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLock.setStatus('mandatory')
brFuncLockPublicFuncCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicFuncCount.setStatus('mandatory')
brFuncLockUserCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserCount.setStatus('mandatory')
brFuncLockUserTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 7), )
if mibBuilder.loadTexts: brFuncLockUserTable.setStatus('mandatory')
brFuncLockPublicTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5), )
if mibBuilder.loadTexts: brFuncLockPublicTable.setStatus('mandatory')
brFuncLockPublicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5, 1), ).setIndexNames((0, "BROTHER-MIB", "brFuncLockPublicFuncIndex"))
if mibBuilder.loadTexts: brFuncLockPublicEntry.setStatus('mandatory')
brFuncLockUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 7, 1), ).setIndexNames((0, "BROTHER-MIB", "brFuncLockUserIndex"))
if mibBuilder.loadTexts: brFuncLockUserEntry.setStatus('mandatory')
brFuncLockPublicFuncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicFuncIndex.setStatus('mandatory')
brFuncLockPublicFuncMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("copycolor", 1), ("copybr", 2), ("faxtx", 3), ("faxrx", 4), ("scan", 5), ("print", 6), ("pcc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicFuncMember.setStatus('mandatory')
brFuncLockPublicFuncSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicFuncSupported.setStatus('mandatory')
brFuncLockPublicFuncEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPublicFuncEnable.setStatus('mandatory')
brFuncLockUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserIndex.setStatus('mandatory')
brFuncLockUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserName.setStatus('mandatory')
brFuncLockUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserPassword.setStatus('mandatory')
brFuncLockUserFuncCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserFuncCount.setStatus('mandatory')
brFuncLockUserFuncTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9), )
if mibBuilder.loadTexts: brFuncLockUserFuncTable.setStatus('mandatory')
brFuncLockUserFuncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9, 1), ).setIndexNames((0, "BROTHER-MIB", "brFuncLockUserIndex"), (0, "BROTHER-MIB", "brFuncLockUserFuncIndex"))
if mibBuilder.loadTexts: brFuncLockUserFuncEntry.setStatus('mandatory')
brFuncLockUserFuncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserFuncIndex.setStatus('mandatory')
brFuncLockUserFuncMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("copycolor", 1), ("copybr", 2), ("faxtx", 3), ("faxrx", 4), ("scan", 5), ("print", 6), ("pcc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserFuncMember.setStatus('mandatory')
brFuncLockUserFuncSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserFuncSupported.setStatus('mandatory')
brFuncLockUserFuncEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserFuncEnable.setStatus('mandatory')
brFuncLockSetting = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockSetting.setStatus('mandatory')
brNetRemoteSetUpFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 2, 101, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rms", 1), ("rmd", 2), ("rmsrmd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brNetRemoteSetUpFileFormat.setStatus('mandatory')
brInfoAlertVersion = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoAlertVersion.setStatus('mandatory')
brInfoBlackPrint = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brInfoBlackPrint.setStatus('mandatory')
brpsWLanCapabilityAuthEAPSupportAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPSupportAuthentication.setStatus('mandatory')
brpsWLanCapabilityAuthEAPSupportEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brpsWLanCapabilityAuthEAPSupportEncryption.setStatus('mandatory')
brLdapKerberosServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapKerberosServerName.setStatus('mandatory')
brLdapKerberosServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 19, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brLdapKerberosServerPort.setStatus('mandatory')
brKerberosSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 27, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brKerberosSupported.setStatus('mandatory')
brCIFSSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 28, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brCIFSSupported.setStatus('mandatory')
brCIFSEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 28, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brCIFSEnable.setStatus('mandatory')
brSNMPV3Supported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSNMPV3Supported.setStatus('mandatory')
brSNMPCommMode = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPCommMode.setStatus('mandatory')
brSNMPV3UserName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3UserName.setStatus('mandatory')
brSNMPV3KeyType = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3KeyType.setStatus('mandatory')
brSNMPV3AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3AuthKey.setStatus('mandatory')
brSNMPV3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3AuthPassword.setStatus('mandatory')
brSNMPV3PrivKey = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3PrivKey.setStatus('mandatory')
brSNMPV3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3PrivPassword.setStatus('mandatory')
brSNMPV3ContextName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 18, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNMPV3ContextName.setStatus('mandatory')
brSNTPCSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSNTPCSupported.setStatus('mandatory')
brSNTPCEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCEnable.setStatus('mandatory')
brSNTPCSyncMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCSyncMethod.setStatus('mandatory')
brSNTPCIntervalMin = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCIntervalMin.setStatus('mandatory')
brSNTPCInterval = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCInterval.setStatus('mandatory')
brSNTPCSyncResult = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brSNTPCSyncResult.setStatus('mandatory')
brSNTPCPrimaryServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCPrimaryServerName.setStatus('mandatory')
brSNTPCPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCPrimaryServerPort.setStatus('mandatory')
brSNTPCSecondaryServerName = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCSecondaryServerName.setStatus('mandatory')
brSNTPCSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCSecondaryServerPort.setStatus('mandatory')
brSNTPCServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 2435, 5, 29, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brSNTPCServerMethod.setStatus('mandatory')
brPJLInfoFirmwareUpdateconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 6), )
if mibBuilder.loadTexts: brPJLInfoFirmwareUpdateconfigTable.setStatus('mandatory')
brPJLInfoFirmwareUpdateconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 6, 1), ).setIndexNames((0, "BROTHER-MIB", "brPJLInfoFirmwareUpdateconfigIndex"))
if mibBuilder.loadTexts: brPJLInfoFirmwareUpdateconfigEntry.setStatus('mandatory')
brPJLInfoFirmwareUpdateconfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoFirmwareUpdateconfigIndex.setStatus('mandatory')
brPJLInfoFirmwareUpdateconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 99, 3, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brPJLInfoFirmwareUpdateconfig.setStatus('mandatory')
brFirmwareUpdateKeywordCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFirmwareUpdateKeywordCount.setStatus('mandatory')
brFirmwareUpdateKeywordTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55, 2), )
if mibBuilder.loadTexts: brFirmwareUpdateKeywordTable.setStatus('mandatory')
brFirmwareUpdateKeywordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55, 2, 1), ).setIndexNames((0, "BROTHER-MIB", "brFirmwareUpdateKeywordIndex"))
if mibBuilder.loadTexts: brFirmwareUpdateKeywordEntry.setStatus('mandatory')
brFirmwareUpdateKeywordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFirmwareUpdateKeywordIndex.setStatus('mandatory')
brFirmwareUpdateKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 5, 55, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFirmwareUpdateKeyword.setStatus('mandatory')
brFuncLockUserPrintPageCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserPrintPageCounterReset.setStatus('mandatory')
brFuncLockPublicPrintLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPublicPrintLimitEnable.setStatus('mandatory')
brFuncLockPublicPrintPageMax = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPublicPrintPageMax.setStatus('mandatory')
brFuncLockUserPrintPageTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25), )
if mibBuilder.loadTexts: brFuncLockUserPrintPageTable.setStatus('mandatory')
brFuncLockUserPrintPageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1), ).setIndexNames((0, "BROTHER-MIB", "brFuncLockUserPrintPageIndex"))
if mibBuilder.loadTexts: brFuncLockUserPrintPageEntry.setStatus('mandatory')
brFuncLockUserPrintPageCountMono = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserPrintPageCountMono.setStatus('mandatory')
brFuncLockUserPrintPageCountColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserPrintPageCountColor.setStatus('mandatory')
brFuncLockPublicPrintPageCountColor = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicPrintPageCountColor.setStatus('mandatory')
brFuncLockPcLoginNameAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPcLoginNameAuthEnable.setStatus('mandatory')
brFuncLockPcLoginNameAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPcLoginNameAuthCount.setStatus('mandatory')
brFuncLockPcLoginNameTable = MibTable((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 28), )
if mibBuilder.loadTexts: brFuncLockPcLoginNameTable.setStatus('mandatory')
brFuncLockPcLoginNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 28, 1), ).setIndexNames((0, "BROTHER-MIB", "brFuncLockPcLoginNameAuthIndex"))
if mibBuilder.loadTexts: brFuncLockPcLoginNameEntry.setStatus('mandatory')
brFuncLockPcLoginNameAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPcLoginNameAuthIndex.setStatus('mandatory')
brFuncLockPcLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 28, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPcLoginName.setStatus('mandatory')
brFuncLockPcLoginNameAuthID = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockPcLoginNameAuthID.setStatus('mandatory')
brFuncLockPublicPrintPageCountMono = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicPrintPageCountMono.setStatus('mandatory')
brFuncLockUserPrintPageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserPrintPageIndex.setStatus('mandatory')
brFuncLockUserPrintPageLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserPrintPageLimitEnable.setStatus('mandatory')
brFuncLockUserPrintPageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockUserPrintPageMax.setStatus('mandatory')
brFuncLockPublicPrintPageCountMonoLast = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicPrintPageCountMonoLast.setStatus('mandatory')
brFuncLockPublicPrintPageCountColorLast = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockPublicPrintPageCountColorLast.setStatus('mandatory')
brFuncLockUserPrintPageCountMonoLast = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserPrintPageCountMonoLast.setStatus('mandatory')
brFuncLockUserPrintPageCountColorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 25, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brFuncLockUserPrintPageCountColorLast.setStatus('mandatory')
brFuncLockAutoCountResetFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 31, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockAutoCountResetFrequency.setStatus('mandatory')
brFuncLockAutoCountResetTime = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 31, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockAutoCountResetTime.setStatus('mandatory')
brFuncLockAutoCountResetWeek = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 31, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockAutoCountResetWeek.setStatus('mandatory')
brFuncLockAutoCountResetDate = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 3, 9, 4, 2, 1, 5, 1, 2, 63, 31, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brFuncLockAutoCountResetDate.setStatus('mandatory')
brWlanSimpleWizardSupported = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brWlanSimpleWizardSupported.setStatus('mandatory')
brWlanSimpleWizardPassword = MibScalar((1, 3, 6, 1, 4, 1, 2435, 2, 4, 3, 100, 1, 15, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brWlanSimpleWizardPassword.setStatus('mandatory')
mibBuilder.exportSymbols("BROTHER-MIB", brpsPortSNMPExtensions=brpsPortSNMPExtensions, brPJLInfoStorageconfigEntry=brPJLInfoStorageconfigEntry, brMultiIFServiceTCPQueued=brMultiIFServiceTCPQueued, brpsNetwareServerEntry=brpsNetwareServerEntry, pcl=pcl, gl=gl, brCapabilityOrientationIndex=brCapabilityOrientationIndex, brLdapServerUserDN=brLdapServerUserDN, brpsLATEnable=brpsLATEnable, brNotificationTable=brNotificationTable, brDialDataAllClear=brDialDataAllClear, npMultiIFSet=npMultiIFSet, broriginalOtherSetting=broriginalOtherSetting, orientation=orientation, brpsServiceProtocolNetBEUI=brpsServiceProtocolNetBEUI, brPrtAdvancedAutoTimeout=brPrtAdvancedAutoTimeout, brpsServerCertificateNum=brpsServerCertificateNum, brMultiIFNetBIOSTable=brMultiIFNetBIOSTable, brMultiIFServiceNDSContext=brMultiIFServiceNDSContext, brPrintPages=brPrintPages, brPrimaryDNSIP=brPrimaryDNSIP, brFirmwareUpdateKeywordIndex=brFirmwareUpdateKeywordIndex, brFuncLockPcLoginNameAuthEnable=brFuncLockPcLoginNameAuthEnable, brPageIBMRightMargin=brPageIBMRightMargin, brNetPcFaxRxSupported=brNetPcFaxRxSupported, brMultiIFWebServicesMetadataVersion=brMultiIFWebServicesMetadataVersion, brSNMPV3UserName=brSNMPV3UserName, brpsWLanCapabilityAuthModeEntry=brpsWLanCapabilityAuthModeEntry, brMultiIForiginalapipa=brMultiIForiginalapipa, brpsWLanAuthEAP=brpsWLanAuthEAP, brPrintPagesMediaPlaceType=brPrintPagesMediaPlaceType, brMultiIFWebServicesInstanceID=brMultiIFWebServicesInstanceID, brmDNSEnable=brmDNSEnable, brpsTmpSMTPAUTHPassword=brpsTmpSMTPAUTHPassword, broriginalupnp=broriginalupnp, brpsBanyanIPNetworkID2=brpsBanyanIPNetworkID2, brpsWLanCapabilityAuthEAPSupported=brpsWLanCapabilityAuthEAPSupported, brSNMPV3PrivPassword=brSNMPV3PrivPassword, verify=verify, brpsSetDefault=brpsSetDefault, brpsWLanAPSetupMode=brpsWLanAPSetupMode, brFuncLockUserPrintPageLimitEnable=brFuncLockUserPrintPageLimitEnable, brPrtAdvancedAutoFormFeed=brPrtAdvancedAutoFormFeed, brSecurityGeneralSetup=brSecurityGeneralSetup, brPrtGeneralColor=brPrtGeneralColor, brpsTmpSMTPServerName=brpsTmpSMTPServerName, brSNTPCSyncMethod=brSNTPCSyncMethod, brNotificationEntry=brNotificationEntry, brNetFaxShareEnable=brNetFaxShareEnable, brpsNetBIOSIPSupported=brpsNetBIOSIPSupported, broriginalLAA=broriginalLAA, brLPDBannerPage=brLPDBannerPage, brMultiIFnetbeui=brMultiIFnetbeui, brPfKitCount=brPfKitCount, brpsBanyanHopCount=brpsBanyanHopCount, brLdapServerAttrDetail4=brLdapServerAttrDetail4, brMultiIFServiceBOT=brMultiIFServiceBOT, scancount=scancount, brpsIPPEnable=brpsIPPEnable, brPanelKeyOnline=brPanelKeyOnline, brPriMailAddress=brPriMailAddress, brPfKitIndex=brPfKitIndex, brMultiIFIPv6AddressEntry=brMultiIFIPv6AddressEntry, brTFTPEnable=brTFTPEnable, tray=tray, brPOP3ServerName=brPOP3ServerName, brDirectPrintPaperSize=brDirectPrintPaperSize, brpsPOP3PollFreq=brpsPOP3PollFreq, brInfoHDDSlot2=brInfoHDDSlot2, brLdapServerName=brLdapServerName, brpsSMTPPortNumber=brpsSMTPPortNumber, brPrtAdvancedTrayPriority=brPrtAdvancedTrayPriority, brFaxHeaderInfo=brFaxHeaderInfo, printerstatus=printerstatus, brEmailReportsIndex=brEmailReportsIndex, brMultiIFEnetMode=brMultiIFEnetMode, system=system, brpsTCPIPGateway=brpsTCPIPGateway, brMultiIFServiceAppleTalkType=brMultiIFServiceAppleTalkType, pushstatus=pushstatus, brsimmtype1=brsimmtype1, brFuncLockUserPassword=brFuncLockUserPassword, brpsNetwarePollFreq=brpsNetwarePollFreq, brpsWLanCapabilityAuthEAPEntry=brpsWLanCapabilityAuthEAPEntry, secadmin=secadmin, brMultiIFServiceReplace=brMultiIFServiceReplace, broriginalSecurity=broriginalSecurity, brLCDString2=brLCDString2, brpsAvailableWLanIndex=brpsAvailableWLanIndex, brpsServiceStringInfoTable=brpsServiceStringInfoTable, brpsTCPIPTimeout=brpsTCPIPTimeout, brMultiIFTCPIPRARPNoSubnet=brMultiIFTCPIPRARPNoSubnet, brENetModeSupported=brENetModeSupported, margin_p=margin_p, brSNMPEnable=brSNMPEnable, brWlanSimpleWizardSupported=brWlanSimpleWizardSupported, brScanCountIndexCount=brScanCountIndexCount, brPageGLPen3Size=brPageGLPen3Size, mcsNetScanner=mcsNetScanner, brpsMIBMinor=brpsMIBMinor, brpapertype=brpapertype, brSNTPCEnable=brSNTPCEnable, wlSetup=wlSetup, brpsWLanRtsCtsThreshold=brpsWLanRtsCtsThreshold, brMultiIFLAATable=brMultiIFLAATable, brsimmsize0=brsimmsize0, brPrintPagesPaperTypeIndex=brPrintPagesPaperTypeIndex, brAutoRegistSetInterval=brAutoRegistSetInterval, brpsPOP3TotalConnect=brpsPOP3TotalConnect, brPageGLPen6Size=brPageGLPen6Size, brMultiIFWebServicesName=brMultiIFWebServicesName, brPanelTestDemoPage=brPanelTestDemoPage, brFuncLockPublicPrintPageMax=brFuncLockPublicPrintPageMax, brprotocol=brprotocol, brpsTCPIPFastTimeoutEnable=brpsTCPIPFastTimeoutEnable, brpsServiceStringLimit=brpsServiceStringLimit, brpsNetBEUIDomain=brpsNetBEUIDomain, brpsWLanName=brpsWLanName, brMultiIFServiceInfoEntry=brMultiIFServiceInfoEntry, brMultiIFIPv6UseMethod=brMultiIFIPv6UseMethod, brpsAvailableWLanEntry=brpsAvailableWLanEntry, brCommunicationErrorHistoryCount=brCommunicationErrorHistoryCount, directprint=directprint, brMultiIFServiceStringInfoTable=brMultiIFServiceStringInfoTable, mfpCapability=mfpCapability, brLdapServerAuth=brLdapServerAuth, brMultiIFTCPIPMethod=brMultiIFTCPIPMethod, brMultiIFIPv6StaticAddressCountEntry=brMultiIFIPv6StaticAddressCountEntry, brRegisterKeyInfo=brRegisterKeyInfo, mfpgeneral_setup=mfpgeneral_setup, brCapabilityMediatypeEntry=brCapabilityMediatypeEntry, brFirmwareUpdateKeywordEntry=brFirmwareUpdateKeywordEntry, brCapabilityMediatypeIndex=brCapabilityMediatypeIndex, brSpeedDialIndex=brSpeedDialIndex, mcGeneral=mcGeneral, brLdapServerAttrDetailEnable1=brLdapServerAttrDetailEnable1, brPageEPSONAutoLF=brPageEPSONAutoLF, brpsFirmwareAdvancedAddress=brpsFirmwareAdvancedAddress, brInfoPConSupported=brInfoPConSupported, brpsPOP3TotalIOError=brpsPOP3TotalIOError, brSecondaryDNSIP=brSecondaryDNSIP, brErrorHistoryTable=brErrorHistoryTable, brPictBridgeDateTime=brPictBridgeDateTime, brSecondaryDNSIPAddress=brSecondaryDNSIPAddress, brSNMPV3KeyType=brSNMPV3KeyType, brpsWLanAuthMode=brpsWLanAuthMode, brPJLInfoDXconfigEntry=brPJLInfoDXconfigEntry, broriginalHTTPS=broriginalHTTPS, brNetScannerEnable=brNetScannerEnable, brMultiIFIPv6StaticAddressPrefixLength=brMultiIFIPv6StaticAddressPrefixLength, brPrtAdvancedInputBuffer=brPrtAdvancedInputBuffer, brMultiIFServiceEntry=brMultiIFServiceEntry, brLockMode=brLockMode, brpsPOPbeforeSMTPWait=brpsPOPbeforeSMTPWait, brpsWLanCapabilityEncryptModeType=brpsWLanCapabilityEncryptModeType, brRawPortEnable=brRawPortEnable, brFuncLockUserPrintPageEntry=brFuncLockUserPrintPageEntry, brLAASupported=brLAASupported, brFuncLockUserFuncSupported=brFuncLockUserFuncSupported, destination_subsystem4=destination_subsystem4, brpsSNMPJetAdmin=brpsSNMPJetAdmin, printerinfomation=printerinfomation, destination_subsystem1=destination_subsystem1, simmkind0=simmkind0, brStatusSleep=brStatusSleep, broriginalRawPort=broriginalRawPort, brtray4size=brtray4size, brUPnPEnable=brUPnPEnable, brPanelKeyContinue=brPanelKeyContinue, brUserPassword=brUserPassword, brpsWLanTransmitPowerSetting=brpsWLanTransmitPowerSetting, brOneTouchDialData=brOneTouchDialData, brpsServiceNetwareServerCount=brpsServiceNetwareServerCount, brPanelResetUser=brPanelResetUser, brWebServicesRegularPortEnable=brWebServicesRegularPortEnable, brpsNetwareEnable=brpsNetwareEnable, brScanCountIndex=brScanCountIndex, brWebServicesSupported=brWebServicesSupported, brpsWLanOperatingChannel=brpsWLanOperatingChannel, brpsServiceStringCount=brpsServiceStringCount, brPJLInfoDXconfigIndex=brPJLInfoDXconfigIndex, brMultiIFDNSIPv6AddressEntry=brMultiIFDNSIPv6AddressEntry, brpsBanyanEnable=brpsBanyanEnable, brNotificationMainRule=brNotificationMainRule, brmanualfeed=brmanualfeed, brCarbonCopyMode=brCarbonCopyMode, brpsBanyanTimeout=brpsBanyanTimeout, brFontSwitchOn=brFontSwitchOn, mp=mp, brSNTPCIntervalMin=brSNTPCIntervalMin, simmkind2=simmkind2, brMultiIFLAASupported=brMultiIFLAASupported, brPageGLPen1Size=brPageGLPen1Size, brpsAppleTalkReadByte=brpsAppleTalkReadByte, brpsTCPIPAccessIndex=brpsTCPIPAccessIndex, brPageEPSONLeftMargin=brPageEPSONLeftMargin, brpsPOP3Timeout=brpsPOP3Timeout, brLdapServerAttrNameEntry=brLdapServerAttrNameEntry, brpsPortAttribute=brpsPortAttribute, brpsAppleTalkZone=brpsAppleTalkZone, brpsWLanWepKeyType=brpsWLanWepKeyType, interface=interface, brPrtMailboxProtect=brPrtMailboxProtect, brSNMPV3PrivKey=brSNMPV3PrivKey, brPagePCLTopMargin=brPagePCLTopMargin, brMultiIFIPv6Address=brMultiIFIPv6Address, brPrtAdvancedBuzzerVolume=brPrtAdvancedBuzzerVolume, brPrintPagesEntry=brPrintPagesEntry, brLLTDSupported=brLLTDSupported, brpaper=brpaper, brMultiIFAllSetDefault=brMultiIFAllSetDefault, brFirmwareUpdateKeyword=brFirmwareUpdateKeyword, brpsTmpSMTPServerAuthMethod=brpsTmpSMTPServerAuthMethod, brDirectPrintPrintQuality=brDirectPrintPrintQuality, brMultiIFIPv6AddressTable=brMultiIFIPv6AddressTable, brDirectPrintCollate=brDirectPrintCollate, brMultiIFNetBIOSIPMethod=brMultiIFNetBIOSIPMethod, finisher=finisher, brPanelKeyGo=brPanelKeyGo, brpsWLanCommSpeed=brpsWLanCommSpeed, printersetup=printersetup, brInfoHDDSize=brInfoHDDSize, prt_density=prt_density, brPrtAdvancedYOffset=brPrtAdvancedYOffset, brpsPOP3TotalPasswordFailure=brpsPOP3TotalPasswordFailure, brSNTPCPrimaryServerName=brSNTPCPrimaryServerName, brDirectPrintPdfThumbnailType=brDirectPrintPdfThumbnailType, brpsWLanTransmitLevel=brpsWLanTransmitLevel, npMultiCards=npMultiCards, auto_e=auto_e, brpsTCPIPAccessSubnetMask=brpsTCPIPAccessSubnetMask, brInfoJamCount=brInfoJamCount, brMultiIFPrimaryDNSIPv6Address=brMultiIFPrimaryDNSIPv6Address, brpsPassword=brpsPassword, scanToInfo=scanToInfo, margin_i=margin_i, brpsSMTPServerAuthMethod=brpsSMTPServerAuthMethod, brpsTmpPOP3Name=brpsTmpPOP3Name, brMultiIFTCPIPTimeout=brMultiIFTCPIPTimeout, copies=copies, mcScanner=mcScanner, brSecretMPRetry=brSecretMPRetry, version=version, brLCDMode5=brLCDMode5, brpsPortProtocol=brpsPortProtocol, status=status, brLdapServerInfoEntry=brLdapServerInfoEntry, brpsEnetMode=brpsEnetMode, brpsFirmwareReload=brpsFirmwareReload, brpsWLanAssociateResult=brpsWLanAssociateResult, brClockFuncSummerTime=brClockFuncSummerTime, brpsWLanChannel=brpsWLanChannel, brFuncLockUserEntry=brFuncLockUserEntry, brpsServiceCount=brpsServiceCount)
mibBuilder.exportSymbols("BROTHER-MIB", firmwareupdatekeyword=firmwareupdatekeyword, broriginalSNMPTrap=broriginalSNMPTrap, brPrimaryDNSIPAddress=brPrimaryDNSIPAddress, brCapabilityPaperIndex=brCapabilityPaperIndex, brEmailReportsWeek=brEmailReportsWeek, brMultiIFServiceStringCount=brMultiIFServiceStringCount, netPMLmgmt=netPMLmgmt, brNotificationRuleIndex=brNotificationRuleIndex, brUPnPSupported=brUPnPSupported, brPageIBMBottomMargin=brPageIBMBottomMargin, brScanCountType=brScanCountType, broriginaltelnet=broriginaltelnet, brWebServicesSSLPortEnable=brWebServicesSSLPortEnable, brpsServiceNDSTree=brpsServiceNDSTree, brPJLInfoOptionsIndex=brPJLInfoOptionsIndex, brRegistrationPrintChart=brRegistrationPrintChart, pen3=pen3, brMultiIFNetBEUIDomain=brMultiIFNetBEUIDomain, printerjob=printerjob, brnetware=brnetware, brPagePSCAPTsetting=brPagePSCAPTsetting, brMultiIFTCPIPNetBIOSSecondaryWINSAddr=brMultiIFTCPIPNetBIOSSecondaryWINSAddr, brEmailReportsNoRTCFrequency=brEmailReportsNoRTCFrequency, brPrtAdvancedAutoOnline=brPrtAdvancedAutoOnline, brpsAppleTalkReadError=brpsAppleTalkReadError, brPrtAdvancedMessageScroll=brPrtAdvancedMessageScroll, brClockFuncZoneSet=brClockFuncZoneSet, brPJLInfoStorageconfigTable=brPJLInfoStorageconfigTable, brKerberosSupported=brKerberosSupported, brSmallPaperSize4=brSmallPaperSize4, broriginalIPv6=broriginalIPv6, catch_tray=catch_tray, brpsWLanWepKeyDefaultIndex=brpsWLanWepKeyDefaultIndex, brLdapTimeout=brLdapTimeout, brCapabilityResolutionCount=brCapabilityResolutionCount, brpsWLanWepKeySize=brpsWLanWepKeySize, brFuncLockUserFuncCount=brFuncLockUserFuncCount, brpsTmpPrintersEmailaddress=brpsTmpPrintersEmailaddress, brLdapServerAttrFAXNumber=brLdapServerAttrFAXNumber, brMultiIFIPv6AddressCountEntry=brMultiIFIPv6AddressCountEntry, brpsWLanOperatingName=brpsWLanOperatingName, brPictBridgeFileName=brPictBridgeFileName, brDirectPrintSetting=brDirectPrintSetting, brMultiIFIPv6AddressIndex=brMultiIFIPv6AddressIndex, brAPIPASupported=brAPIPASupported, brieee1284id=brieee1284id, brappletalk=brappletalk, brProxyServerCount=brProxyServerCount, brsimmtype2=brsimmtype2, brMultiIFServiceReceiveOnly=brMultiIFServiceReceiveOnly, brpsSMTPAUTHPasswordSet=brpsSMTPAUTHPasswordSet, brpsWLanWepKeyEntry=brpsWLanWepKeyEntry, brpsLATGroup=brpsLATGroup, pictbridge=pictbridge, brMediaFixTray4=brMediaFixTray4, brTCPIPServerAddress=brTCPIPServerAddress, broriginalmdns=broriginalmdns, brmDNSSupported=brmDNSSupported, brttt1=brttt1, brPageEPSONAutoMask=brPageEPSONAutoMask, bio1_explanation=bio1_explanation, brconfig=brconfig, brEWSSupported=brEWSSupported, brNotificationShowURLInfo=brNotificationShowURLInfo, brpsWLanCapabilityAuthEAPDescription=brpsWLanCapabilityAuthEAPDescription, brAutoRegistRegistrate=brAutoRegistRegistrate, brPageGLPen5GrayLevel=brPageGLPen5GrayLevel, brErrorHistoryDescription=brErrorHistoryDescription, brpsAPOPEnable=brpsAPOPEnable, brSecMailAddress=brSecMailAddress, brCarbonCopies=brCarbonCopies, brpsAvailableWLanChannel=brpsAvailableWLanChannel, brlat=brlat, brMultiIFDNSTable=brMultiIFDNSTable, brNotificationAddress=brNotificationAddress, brLdapKerberosServerPort=brLdapKerberosServerPort, destination_subsystem3=destination_subsystem3, funa=funa, key=key, brCapabilityOrientationEntry=brCapabilityOrientationEntry, brcopies=brcopies, brSNMPV3AuthKey=brSNMPV3AuthKey, brPanelLockPasswd=brPanelLockPasswd, brLdapServerAttrDetail3=brLdapServerAttrDetail3, brPrtAvoidMailboxFullEntry=brPrtAvoidMailboxFullEntry, brpsWLanCapabilitAuthModeIndex=brpsWLanCapabilitAuthModeIndex, brColorCalibration=brColorCalibration, brPrtAdvancedXOffset=brPrtAdvancedXOffset, brLdapServerPasswordSet=brLdapServerPasswordSet, brpsAppleTalkSupported=brpsAppleTalkSupported, brSNTPCPrimaryServerPort=brSNTPCPrimaryServerPort, brpsTmpSMTPPortNumber=brpsTmpSMTPPortNumber, brpsWLanCapabilityEncryptModeCount=brpsWLanCapabilityEncryptModeCount, brpsWLanWPSResult=brpsWLanWPSResult, adminsetting=adminsetting, brtray3size=brtray3size, brpsWLanWepKeyIndex=brpsWLanWepKeyIndex, brpsPortInfoString=brpsPortInfoString, brSecError=brSecError, brPJLInfoOptionsTable=brPJLInfoOptionsTable, brPrtGeneralBuzzer=brPrtGeneralBuzzer, brpsNetwareServicingServerName=brpsNetwareServicingServerName, brpsTestPage=brpsTestPage, brPfKitIndexCount=brPfKitIndexCount, brMultiIFServiceProtocolLAT=brMultiIFServiceProtocolLAT, brMultiIFLAAEntry=brMultiIFLAAEntry, brMediaFixTray3=brMediaFixTray3, brSecurePrintRAMSizeMax=brSecurePrintRAMSizeMax, brPJLInfoDXconfigTable=brPJLInfoDXconfigTable, brPageGLPen2Size=brPageGLPen2Size, brpsWLanAssociateTestResult=brpsWLanAssociateTestResult, brPJLInfoIntrayconfigIndex=brPJLInfoIntrayconfigIndex, simmkind1=simmkind1, brpsPOP3Password=brpsPOP3Password, broriginalTFTP=broriginalTFTP, broriginalLLTD=broriginalLLTD, brpsWLanOperatingMode=brpsWLanOperatingMode, brLAAMacAddress=brLAAMacAddress, brCarbonCopyMacroID=brCarbonCopyMacroID, brMultiIFServiceCount=brMultiIFServiceCount, brpsAdvancedTCPIPAccessSupported=brpsAdvancedTCPIPAccessSupported, brMultiIFServiceProtocolIPP=brMultiIFServiceProtocolIPP, brMultiIFSetDefault=brMultiIFSetDefault, brMultiIFServiceProtocolDLC=brMultiIFServiceProtocolDLC, brFuncLockUserPrintPageIndex=brFuncLockUserPrintPageIndex, brpsTCPIPLPRRetryEnable=brpsTCPIPLPRRetryEnable, brMultiIFAPIPAEntry=brMultiIFAPIPAEntry, ps=ps, brLdapServerInfoTable=brLdapServerInfoTable, brPanelTestFontList=brPanelTestFontList, cassette=cassette, nm=nm, brMultiIFDNSEntry=brMultiIFDNSEntry, brpsDLCLLCLastIFrame=brpsDLCLLCLastIFrame, wlAOSS=wlAOSS, fax_general=fax_general, brHTTPSSupported=brHTTPSSupported, brRegistrationXMagentaLeft=brRegistrationXMagentaLeft, brMultiIFDNSIPv6AddressTable=brMultiIFDNSIPv6AddressTable, brInfoCounter=brInfoCounter, brMultiIFAPIPASupported=brMultiIFAPIPASupported, brErrorHistoryAllClear=brErrorHistoryAllClear, broriginalinternetsetting=broriginalinternetsetting, brFuncLockUserFuncEnable=brFuncLockUserFuncEnable, brMultiIFDescription=brMultiIFDescription, brLCDString5=brLCDString5, brDirectPrintOutputColor=brDirectPrintOutputColor, brProxyServerInfoIndex=brProxyServerInfoIndex, brPageGLPen2GrayLevel=brPageGLPen2GrayLevel, brInfoDeviceSubRomVersion=brInfoDeviceSubRomVersion, brFuncLockPublicFuncCount=brFuncLockPublicFuncCount, etherN=etherN, brPrintPagesPaperTypeType=brPrintPagesPaperTypeType, brPageIBMAutoMask=brPageIBMAutoMask, brpsMIBVersion=brpsMIBVersion, brCapabilityPaperCount=brCapabilityPaperCount, brLCDString3=brLCDString3, brEmailReportsDate=brEmailReportsDate, npSet=npSet, wlGeneralInfo=wlGeneralInfo, brpsFlashROMSize=brpsFlashROMSize, brpsSMTPEnhancedAuthSupported=brpsSMTPEnhancedAuthSupported, brLdapServerAttrDetail1=brLdapServerAttrDetail1, brFuncLockAutoCountResetWeek=brFuncLockAutoCountResetWeek, brPageIBMAutoLF=brPageIBMAutoLF, brMultiIFIPv6StaticAddressTable=brMultiIFIPv6StaticAddressTable, netPML=netPML, brpsServiceBOT=brpsServiceBOT, brCapabilityResolution=brCapabilityResolution, brpsServiceProtocolDLC=brpsServiceProtocolDLC, brMultiIFIPv6StaticAddressEntry=brMultiIFIPv6StaticAddressEntry, brMultiIFWebServicesEntry=brMultiIFWebServicesEntry, brPrtMailboxProtectIndex=brPrtMailboxProtectIndex, brDirectPrintMultipulPage=brDirectPrintMultipulPage, brpsPortStatus=brpsPortStatus, brPJLInfoFirmwareUpdateconfig=brPJLInfoFirmwareUpdateconfig, prt_setup=prt_setup, brWlanSimpleWizardPassword=brWlanSimpleWizardPassword, brFuncLockUserFuncMember=brFuncLockUserFuncMember, brSNMPCommMode=brSNMPCommMode, brpsWLanCapabilityAuthModeTable=brpsWLanCapabilityAuthModeTable, brfirmware=brfirmware, brFuncLockUserPrintPageCountColorLast=brFuncLockUserPrintPageCountColorLast, brpsWLanRSSLevel=brpsWLanRSSLevel, brpsAvailableWLanCommMode=brpsAvailableWLanCommMode, brProxyServerInfoEntry=brProxyServerInfoEntry, brpsNetware8023Count=brpsNetware8023Count, brpsProtectModeEnable=brpsProtectModeEnable, brpapertypeMP=brpapertypeMP, brFuncLockAutoCountResetDate=brFuncLockAutoCountResetDate, cassette3=cassette3, wlAdvanced=wlAdvanced, brSNMPV3AuthPassword=brSNMPV3AuthPassword, brMultiIFcontrol=brMultiIFcontrol, broriginalCIFS=broriginalCIFS, brpsBanyanSupported=brpsBanyanSupported, brsimmtype0=brsimmtype0, brPJLInfoDXconfig=brPJLInfoDXconfig, brMultiIFType=brMultiIFType, brpsLATTransmitBufferMax=brpsLATTransmitBufferMax, broriginalSNMP=broriginalSNMP, brInfoReplaceCount=brInfoReplaceCount, brpsBanyanIPCSequenceError=brpsBanyanIPCSequenceError, brFontSwitchOff=brFontSwitchOff, brpsTmpPOP3PasswordModified=brpsTmpPOP3PasswordModified, brSpeedDialTable=brSpeedDialTable, brPrtAdvancedUseMPTrayFirst=brPrtAdvancedUseMPTrayFirst, brpsReset=brpsReset, brport=brport, brCapabilityPaperTable=brCapabilityPaperTable, brtelnetSupported=brtelnetSupported, brpsNetwareFrameType=brpsNetwareFrameType, brpsWLanOperatingCommMode=brpsWLanOperatingCommMode, brpsTCPIPEnable=brpsTCPIPEnable, brFuncLockAutoCountResetTime=brFuncLockAutoCountResetTime, brLCDMode4=brLCDMode4, brMultiIFServiceStringInfoEntry=brMultiIFServiceStringInfoEntry, brClockFuncTimeStyle=brClockFuncTimeStyle, brPJLInfoIntrayconfigTable=brPJLInfoIntrayconfigTable, brpsNetware8022NetInfo=brpsNetware8022NetInfo, broriginalLegacy=broriginalLegacy, broriginaltcpip=broriginaltcpip, brPageGLPen3GrayLevel=brPageGLPen3GrayLevel, brCapabilityMediatypeTable=brCapabilityMediatypeTable, brservice=brservice, brMultiIFNodeType=brMultiIFNodeType, brMultiIFTCPIPConnectTime=brMultiIFTCPIPConnectTime, brpsNetBIOSIPMethod=brpsNetBIOSIPMethod, brpsFirmwareXModem=brpsFirmwareXModem, brEmailReportsTime=brEmailReportsTime, brpsWLanCapabilityAuthModeCount=brpsWLanCapabilityAuthModeCount, wlWEP=wlWEP, brpsWLanNetworkKey=brpsWLanNetworkKey, brMultiIFTCPIPNetBIOSPrimaryWINSAddr=brMultiIFTCPIPNetBIOSPrimaryWINSAddr, brFuncLockPublicFuncIndex=brFuncLockPublicFuncIndex, brNetRemoteSetUpEnable=brNetRemoteSetUpEnable, broriginalproxy=broriginalproxy, brPrintersEmailaddress=brPrintersEmailaddress, brpsEmailEnable=brpsEmailEnable, brpsAvailableWLanScan=brpsAvailableWLanScan, brSNMPV3ContextName=brSNMPV3ContextName, brPrtAvoidMailboxFull=brPrtAvoidMailboxFull, brPfKitType=brPfKitType, brpsWLanLengthThreshold=brpsWLanLengthThreshold, brMultiIFServiceNDSTree=brMultiIFServiceNDSTree, scanner_setup=scanner_setup, brLLMNREnable=brLLMNREnable, brpsEmailSupported=brpsEmailSupported, brpsTCPIPSupported=brpsTCPIPSupported, brFuncLockPublicEntry=brFuncLockPublicEntry, brpsWLanCommMode=brpsWLanCommMode, brFindPort=brFindPort, brLdapServerInfoIndex=brLdapServerInfoIndex, brPrintPagesFuncType=brPrintPagesFuncType)
mibBuilder.exportSymbols("BROTHER-MIB", specification=specification, brpsDLCLLCConnectHost=brpsDLCLLCConnectHost, brpsLATTimeout=brpsLATTimeout, brMultiIFNetBIOSEntry=brMultiIFNetBIOSEntry, brMultiIFServiceProtocolAppleTalk=brMultiIFServiceProtocolAppleTalk, brpsBanyanErrorCS=brpsBanyanErrorCS, wlInfo=wlInfo, brFuncLockUserPrintPageCounterReset=brFuncLockUserPrintPageCounterReset, clockfunction=clockfunction, brPagePCLAutoWrap=brPagePCLAutoWrap, brMultiIFInterfaceEnable=brMultiIFInterfaceEnable, generalDeviceStatus=generalDeviceStatus, brpsServiceNetwareServerMode=brpsServiceNetwareServerMode, brFontSymbolSet=brFontSymbolSet, brpsTmpPOP3Password=brpsTmpPOP3Password, brPanelLockOff=brPanelLockOff, brntsend=brntsend, secret=secret, brCommunicationErrorHistoryIndex=brCommunicationErrorHistoryIndex, autoc=autoc, brRegistrationXYellowLeft=brRegistrationXYellowLeft, brOneTouchDialEntry=brOneTouchDialEntry, brShowIPAddressInfo=brShowIPAddressInfo, brpsTCPIPBanner=brpsTCPIPBanner, brpsBanyanIPCListen=brpsBanyanIPCListen, brPrtMailboxProtectGroup=brPrtMailboxProtectGroup, brPJLInfoOuttrayconfig=brPJLInfoOuttrayconfig, brLdapServerPassword=brLdapServerPassword, brPrintPagesMediaPlaceIndex=brPrintPagesMediaPlaceIndex, brSNMPV3Supported=brSNMPV3Supported, brpsNetwareSNAPNetInfo=brpsNetwareSNAPNetInfo, brTBD2=brTBD2, panellock=panellock, brpsWLanWepKey=brpsWLanWepKey, brpsTCPIPMethodServer=brpsTCPIPMethodServer, brPrtGeneralFeeder=brPrtGeneralFeeder, brMultiIFIPv6AddressCountTable=brMultiIFIPv6AddressCountTable, npCtl=npCtl, brMediaFixTray1=brMediaFixTray1, brPanelKeyReprint=brPanelKeyReprint, brPrtGeneralPowerSave=brPrtGeneralPowerSave, brMultiIFConfigureTable=brMultiIFConfigureTable, brMultiIFTCPIPRARPNoGateway=brMultiIFTCPIPRARPNoGateway, brpsAvailableWLanAuthMode=brpsAvailableWLanAuthMode, brpsDLCLLCState=brpsDLCLLCState, brpsPortInhibitDatagramSupport=brpsPortInhibitDatagramSupport, brPrintPagesTable=brPrintPagesTable, brpsWLanOperatingWepKeyDefaultIndex=brpsWLanOperatingWepKeyDefaultIndex, brMultiIFservice=brMultiIFservice, npConfig=npConfig, brpsTCPIPUseMethod=brpsTCPIPUseMethod, brpsNetwareServerName=brpsNetwareServerName, brInfoJamCountClear=brInfoJamCountClear, brPJLInfoOuttrayconfigIndex=brPJLInfoOuttrayconfigIndex, brFontSetting=brFontSetting, brIPv6Priority=brIPv6Priority, brIPPSSLPortEnable=brIPPSSLPortEnable, brsimmsize2=brsimmsize2, bremail=bremail, brTrayPriorityMember=brTrayPriorityMember, destination_subsystem2=destination_subsystem2, brpsFirmwareDescription=brpsFirmwareDescription, brpsServiceProtocolIPP=brpsServiceProtocolIPP, brPageIBMAutoCR=brPageIBMAutoCR, brpsNetwareSNAPCount=brpsNetwareSNAPCount, brCommunicationErrorHistoryEntry=brCommunicationErrorHistoryEntry, brPJLInfoOptions=brPJLInfoOptions, brMultiIFServiceNetwareRemotePrinterNum=brMultiIFServiceNetwareRemotePrinterNum, simmkind3=simmkind3, brPageIBMLeftMargin=brPageIBMLeftMargin, brpsWLanCapabilityAuthEAPSupportAuthentication=brpsWLanCapabilityAuthEAPSupportAuthentication, brInfoPrinterUStatus=brInfoPrinterUStatus, brnetConfig=brnetConfig, brPictBridgePrintQuality=brPictBridgePrintQuality, colorcorrection=colorcorrection, brpsWLanOperatingAuthMode=brpsWLanOperatingAuthMode, brpsServiceFilterCount=brpsServiceFilterCount, panelinfo=panelinfo, dns=dns, brOneTouchDialCount=brOneTouchDialCount, brPJLInfoFirmwareUpdateconfigTable=brPJLInfoFirmwareUpdateconfigTable, brtelnetEnable=brtelnetEnable, brPagePCLBottomMargin=brPagePCLBottomMargin, brCarbonCopyTray=brCarbonCopyTray, brPrtAdvancedPrintDensity=brPrtAdvancedPrintDensity, brpsBanyanPassword=brpsBanyanPassword, brNetRegisterPcFaxInfo=brNetRegisterPcFaxInfo, brMultiIFNodeName=brMultiIFNodeName, brpsTmpSMTPAUTHUsername=brpsTmpSMTPAUTHUsername, autocountreset=autocountreset, brMultiIFSecondaryDNSIPv6Address=brMultiIFSecondaryDNSIPv6Address, pagesetup=pagesetup, brpsSMTPTotalConnect=brpsSMTPTotalConnect, brSmallPaperSize2=brSmallPaperSize2, brNotificationCount=brNotificationCount, brPrtAvoidMailboxFullIndex=brPrtAvoidMailboxFullIndex, brPagePCLLines=brPagePCLLines, brPrtGeneralBinding=brPrtGeneralBinding, brautocont=brautocont, brProxyBypassServer=brProxyBypassServer, brMultiIFIPv6StaticAddressEnable=brMultiIFIPv6StaticAddressEnable, funclock=funclock, brpsSMTPTotalConnectFailure=brpsSMTPTotalConnectFailure, brpsBanyanPrintServerStatus=brpsBanyanPrintServerStatus, brpsWLanWepKeyTable=brpsWLanWepKeyTable, ibm=ibm, brpsWLanCapabilityAuthEAPTable=brpsWLanCapabilityAuthEAPTable, brSecurityDeviceNegotiation=brSecurityDeviceNegotiation, brOwnFaxNumber=brOwnFaxNumber, brpsNetwareServicingQueueName=brpsNetwareServicingQueueName, brMultiIFTCPIPUseMethod=brMultiIFTCPIPUseMethod, brpsWLanCtsType=brpsWLanCtsType, brMultiIFServiceName=brMultiIFServiceName, brMultiIForiginalLAA=brMultiIForiginalLAA, brpsEmailTestDestinationAddress=brpsEmailTestDestinationAddress, brEmailReportsSupported=brEmailReportsSupported, brbanyan=brbanyan, brNetPcFaxRxEnable=brNetPcFaxRxEnable, brpsLATSupported=brpsLATSupported, brMultiIFConfigureIndex=brMultiIFConfigureIndex, brMultiIForiginalWebServices=brMultiIForiginalWebServices, broriginalLPD=broriginalLPD, brpsWLanAOSSSupported=brpsWLanAOSSSupported, brAdvancedDNSSupported=brAdvancedDNSSupported, brPJLInfoIntrayconfig=brPJLInfoIntrayconfig, brpsAvailableWLanName=brpsAvailableWLanName, brMultiIFprotocol=brMultiIFprotocol, brpsWLanCapabilityEncryptModeTable=brpsWLanCapabilityEncryptModeTable, brpsBanyanSPPConnectionInformation=brpsBanyanSPPConnectionInformation, autodial=autodial, brMultiIFTCPIPBootTries=brMultiIFTCPIPBootTries, brpsWLanWPSSupported=brpsWLanWPSSupported, brCommunicationErrorHistoryTable=brCommunicationErrorHistoryTable, brsimmsize3=brsimmsize3, brSpeedDialData=brSpeedDialData, brmDNSPrinterName=brmDNSPrinterName, brFaxSupported=brFaxSupported, brDirectPrintMediaType=brDirectPrintMediaType, brTrayPriorityCount=brTrayPriorityCount, brpsWLanSESSupported=brpsWLanSESSupported, brMultiIFPrimaryDNSIPAddress=brMultiIFPrimaryDNSIPAddress, brpsNetwarePassword=brpsNetwarePassword, brFuncLockUserPrintPageTable=brFuncLockUserPrintPageTable, brdlc=brdlc, carbonCopy=carbonCopy, brCIFSSupported=brCIFSSupported, brpsTCPIPUpdate=brpsTCPIPUpdate, brpsNetwareAdvFreq=brpsNetwareAdvFreq, brPrintPagesMediaPlaceCounter=brPrintPagesMediaPlaceCounter, brEmailReportsSendReportNow=brEmailReportsSendReportNow, priadmin=priadmin, brPrintPagesFuncEntry=brPrintPagesFuncEntry, pen4=pen4, brTCPIPConnectTime=brTCPIPConnectTime, brpsPOP3TotalUserFailure=brpsPOP3TotalUserFailure, brPrintPagesPaperTypeEntry=brPrintPagesPaperTypeEntry, brMultiIFTCPIPSubnetMask=brMultiIFTCPIPSubnetMask, brCapabilityResolutionTable=brCapabilityResolutionTable, brpsServiceNetwareRemotePrinterNum=brpsServiceNetwareRemotePrinterNum, brRegistrationXCyanLeft=brRegistrationXCyanLeft, brpsBanyanRouter2=brpsBanyanRouter2, brPanelKeyJobCancel=brPanelKeyJobCancel, brpsOEMString=brpsOEMString, brSecurityGeneralStatus=brSecurityGeneralStatus, brEWSEnable=brEWSEnable, brpsServiceTCPQueued=brpsServiceTCPQueued, cassette4=cassette4, brNetScannerSupported=brNetScannerSupported, brLPDType=brLPDType, brInfoLowerMIBVer=brInfoLowerMIBVer, brSNMPTrapIndex=brSNMPTrapIndex, brNetSKeyEnable=brNetSKeyEnable, brpsTCPIPAddress=brpsTCPIPAddress, brPrtCatchTray=brPrtCatchTray, brRegistrationXMagentaRight=brRegistrationXMagentaRight, brPageGLPen6GrayLevel=brPageGLPen6GrayLevel, trayPriority=trayPriority, brPagePCLAutoCR=brPagePCLAutoCR, brSMTPServerName=brSMTPServerName, brPrintPagesMediaPlaceEntry=brPrintPagesMediaPlaceEntry, brpsServiceTCPPort=brpsServiceTCPPort, brpsWLanCapabilityAuthModeSupported=brpsWLanCapabilityAuthModeSupported, brpsPortStatusString=brpsPortStatusString, brProxyServerType=brProxyServerType, brpageprotect=brpageprotect, brToner4Low=brToner4Low, brRegistrationYYellow=brRegistrationYYellow, simm=simm, brPrtMailbox=brPrtMailbox, brpsServiceNDSContext=brpsServiceNDSContext, brAPIPAEnable=brAPIPAEnable, print_engine=print_engine, brPrintPagesPaperTypeCounter=brPrintPagesPaperTypeCounter, brNotificationRestoration=brNotificationRestoration, brMultiIFIPv6StaticAddressCount=brMultiIFIPv6StaticAddressCount, net_MFP=net_MFP, brMultiIFServiceObsolete=brMultiIFServiceObsolete, brpsBanyanPasswordSet=brpsBanyanPasswordSet, onetouchDial=onetouchDial, brCarbonCopyEntry=brCarbonCopyEntry, pen1=pen1, brInfoStatus=brInfoStatus, brCapabilityMediatypeName=brCapabilityMediatypeName, brCarbonCopyTable=brCarbonCopyTable, pen6=pen6, brpsServiceReceiveOnly=brpsServiceReceiveOnly, brpsNetwareServicingServerCount=brpsNetwareServicingServerCount, wlWPA=wlWPA, jobend=jobend, brpsPOP3PasswordSet=brpsPOP3PasswordSet, brFuncLockAdminPassword=brFuncLockAdminPassword, brMultiIFIPv6MethodServer=brMultiIFIPv6MethodServer, brCIFSEnable=brCIFSEnable, brFuncLockUserPrintPageMax=brFuncLockUserPrintPageMax, brFuncLockUserPrintPageCountColor=brFuncLockUserPrintPageCountColor, brpsServiceInfoTable=brpsServiceInfoTable, brInfoBlackPrint=brInfoBlackPrint, brpsWLanCapabilityAuthModeType=brpsWLanCapabilityAuthModeType, brPageGLPen4GrayLevel=brPageGLPen4GrayLevel, mediatype=mediatype, brSNTPCSecondaryServerName=brSNTPCSecondaryServerName, brFuncLockPublicPrintPageCountColor=brFuncLockPublicPrintPageCountColor, brMultiIFSupported=brMultiIFSupported, wlWPS=wlWPS, brLdapServerBaseDN=brLdapServerBaseDN, mcfGeneral=mcfGeneral, brTFTPSupported=brTFTPSupported, brpsPortDescriptionString=brpsPortDescriptionString, brpsWLanAOSSIsRunnning=brpsWLanAOSSIsRunnning, brMultiIFtcpip=brMultiIFtcpip, brLdapTimeoutSupported=brLdapTimeoutSupported, brpsAppleTalkWriteByte=brpsAppleTalkWriteByte, brNetSKeySupported=brNetSKeySupported, brPanelKeyFormFeed=brPanelKeyFormFeed, brpsNetBEUIEnable=brpsNetBEUIEnable, brpsSMTPTotalMessage=brpsSMTPTotalMessage, auto_p=auto_p, brFuncLockPublicPrintLimitEnable=brFuncLockPublicPrintLimitEnable, brInfoCoverage=brInfoCoverage, brPanelTestConfiguration=brPanelTestConfiguration, brpsWLanDataRetry=brpsWLanDataRetry, brtray2size=brtray2size, brret=brret, brpsDLCPrintStatus=brpsDLCPrintStatus, brLdapKerberosServerName=brLdapKerberosServerName, brSNTPCSyncResult=brSNTPCSyncResult, brpsAPOPSupported=brpsAPOPSupported, controlpanel=controlpanel, brPageEPSONLines=brPageEPSONLines, brpsTCPIPRARPNoSubnet=brpsTCPIPRARPNoSubnet, brCarbonCopyIndex=brCarbonCopyIndex, brpsWLanAssociate=brpsWLanAssociate, brMultiIFInterfaceInformation=brMultiIFInterfaceInformation, brFontPointSize=brFontPointSize)
mibBuilder.exportSymbols("BROTHER-MIB", brUserPasswordVerify=brUserPasswordVerify, brMultiIFTCPIPDNSIPSetup=brMultiIFTCPIPDNSIPSetup, userSetting=userSetting, broriginalWebServices=broriginalWebServices, brpsWLanCapabilityAuthEAPSupportEncryption=brpsWLanCapabilityAuthEAPSupportEncryption, brPrintPagesPaperSize=brPrintPagesPaperSize, brdensity=brdensity, broriginalEWS=broriginalEWS, brMultiIFServiceProtocolBanyan=brMultiIFServiceProtocolBanyan, brLCDString16fix=brLCDString16fix, brPfKitEntry=brPfKitEntry, brMultiIFTCPIPGateway=brMultiIFTCPIPGateway, brSmallPaperSizeMP=brSmallPaperSizeMP, brLdapServerPort=brLdapServerPort, brPrintPagesMediaPlaceTable=brPrintPagesMediaPlaceTable, brpsChangePOP3PortSupported=brpsChangePOP3PortSupported, brProxyServerName=brProxyServerName, brpsNetware8022Count=brpsNetware8022Count, brFuncLockPublicPrintPageCountColorLast=brFuncLockPublicPrintPageCountColorLast, brpsTCPIPRARPNoGateway=brpsTCPIPRARPNoGateway, broriginalftp=broriginalftp, brMultiIFSecondaryDNSIPAddress=brMultiIFSecondaryDNSIPAddress, brNetRemoteSetUpFileFormat=brNetRemoteSetUpFileFormat, brPrtAvoidMailboxFullGroup=brPrtAvoidMailboxFullGroup, brPageIBMLines=brPageIBMLines, brSecretReprint=brSecretReprint, brPrtAdvancedLanguage=brPrtAdvancedLanguage, brPrtAvoidMailboxFullTable=brPrtAvoidMailboxFullTable, brInfoUpperMIBVer=brInfoUpperMIBVer, brpsWLanAssociateTestSupported=brpsWLanAssociateTestSupported, brMultiIFServiceEOT=brMultiIFServiceEOT, brRingDelayCount=brRingDelayCount, brtcpip=brtcpip, brOneTouchDialIndex=brOneTouchDialIndex, brpsAvailableWLanMode=brpsAvailableWLanMode, brLegacyCompatible=brLegacyCompatible, brCapabilityPaperEntry=brCapabilityPaperEntry, brMultiIFControlEntry=brMultiIFControlEntry, brInfoModelNumber=brInfoModelNumber, brProxySupported=brProxySupported, brpsWLanNetSearchSupported=brpsWLanNetSearchSupported, brpsPortCount=brpsPortCount, brpsWLanDeviceType=brpsWLanDeviceType, brToner3Low=brToner3Low, brMultiIFTCPIPUpdate=brMultiIFTCPIPUpdate, brpsWLanCapabilityEncryptModeDescription=brpsWLanCapabilityEncryptModeDescription, brFuncLockPublicFuncEnable=brFuncLockPublicFuncEnable, brPanelTestTestPage=brPanelTestTestPage, brLPDEnable=brLPDEnable, brEmailReportsFrequency=brEmailReportsFrequency, brpsNetwareEtherIICount=brpsNetwareEtherIICount, brMultiIFServiceInfoTable=brMultiIFServiceInfoTable, brLdapServerAttrName=brLdapServerAttrName, brpsTmpPOP3ServerName=brpsTmpPOP3ServerName, brFuncLockPublicPrintPageCountMonoLast=brFuncLockPublicPrintPageCountMonoLast, brother=brother, brMultiIFServiceIndex=brMultiIFServiceIndex, brAdminCapability=brAdminCapability, brpsAvailableWLanPowerLevel=brpsAvailableWLanPowerLevel, brMultiIFLAAMacAddress=brMultiIFLAAMacAddress, brpsTCPIPSubnetMask=brpsTCPIPSubnetMask, brpsNetware8023NetInfo=brpsNetware8023NetInfo, brNotificationStatusID=brNotificationStatusID, brPrintPagesFuncTable=brPrintPagesFuncTable, brPrtAdvancedLowerLCD=brPrtAdvancedLowerLCD, brpsServiceProtocolBanyan=brpsServiceProtocolBanyan, brPrtMailboxProtectTable=brPrtMailboxProtectTable, brpsServiceStringInfoEntry=brpsServiceStringInfoEntry, brpsTCPIPMethod=brpsTCPIPMethod, brFuncLockPcLoginNameAuthIndex=brFuncLockPcLoginNameAuthIndex, brSpeedDialEntry=brSpeedDialEntry, brMultiIFTCPIPMethodServer=brMultiIFTCPIPMethodServer, brFuncLockPublicPrintPageCountMono=brFuncLockPublicPrintPageCountMono, brpsTmpAPOPEnable=brpsTmpAPOPEnable, brClockFuncTimeZone=brClockFuncTimeZone, buzzer=buzzer, wlSimpleWizard=wlSimpleWizard, brPagesSentLastFax=brPagesSentLastFax, brCapabilityCopiesMin=brCapabilityCopiesMin, brFuncLockAutoCountResetFrequency=brFuncLockAutoCountResetFrequency, brPageEPSONRightMargin=brPageEPSONRightMargin, brLdapServerCount=brLdapServerCount, brDeviceNegotiationChangePassword=brDeviceNegotiationChangePassword, brServiceMode=brServiceMode, brpsServiceInfoEntry=brpsServiceInfoEntry, brPushStatusSupported=brPushStatusSupported, countinfo=countinfo, brPanelResetFactory=brPanelResetFactory, brpsTmpPOP3PortNumber=brpsTmpPOP3PortNumber, brpsServerDescription=brpsServerDescription, brpersonality=brpersonality, brPrtAdvancedFFSuppress=brPrtAdvancedFFSuppress, brLdapServerAttrDetail2=brLdapServerAttrDetail2, mcfNetPcFaxRx=mcfNetPcFaxRx, brInfoNextCare=brInfoNextCare, brInfoReplaceTime=brInfoReplaceTime, brpsPOP3TotalConnectionLost=brpsPOP3TotalConnectionLost, brSNTPCSecondaryServerPort=brSNTPCSecondaryServerPort, brpsTmpSMTPAUTHPasswordModified=brpsTmpSMTPAUTHPasswordModified, brpsServiceProtocolTCPIP=brpsServiceProtocolTCPIP, brpsServiceProtocolAppleTalk=brpsServiceProtocolAppleTalk, brpsSMTPTotalRecvFromFailure=brpsSMTPTotalRecvFromFailure, brJobTerminationEnable=brJobTerminationEnable, brpsIPPSupported=brpsIPPSupported, brInfoDeviceRomVersion=brInfoDeviceRomVersion, npTcp=npTcp, brActivityReportSetting=brActivityReportSetting, brMultiIFServiceProtocolTCPIP=brMultiIFServiceProtocolTCPIP, brpsPOP3Supported=brpsPOP3Supported, pen5=pen5, brPrtMailboxOutbin=brPrtMailboxOutbin, brpsLATReceiveBufferMax=brpsLATReceiveBufferMax, brpsWLanLEAPTimeout=brpsWLanLEAPTimeout, brEmailReportsEntry=brEmailReportsEntry, reset=reset, brCapabilityCopiesMax=brCapabilityCopiesMax, wireless=wireless, brPageGLPen1GrayLevel=brPageGLPen1GrayLevel, brPrintPagesFuncIndex=brPrintPagesFuncIndex, lpd=lpd, mcfNetFaxShare=mcfNetFaxShare, brPrtGeneralDuplex=brPrtGeneralDuplex, brPfKitTable=brPfKitTable, brLdapServerAttrDetailEnable2=brLdapServerAttrDetailEnable2, broriginalprotocol=broriginalprotocol, brpsWLanDot11Supported=brpsWLanDot11Supported, brtray1size=brtray1size, brpsProtectPassword=brpsProtectPassword, brBackLightColor=brBackLightColor, brpsWLanCapabilityAuthEAPCount=brpsWLanCapabilityAuthEAPCount, brPJLInfoStorageconfigIndex=brPJLInfoStorageconfigIndex, brFindTime=brFindTime, brPrtAdvancedLCDDensity=brPrtAdvancedLCDDensity, prt_condition=prt_condition, brIPPRegularPortEnable=brIPPRegularPortEnable, brTrayPriorityIndex=brTrayPriorityIndex, brpsNetwareServerTable=brpsNetwareServerTable, brpsNetwarePasswordSet=brpsNetwarePasswordSet, brpsWLanOperatingEncryptMode=brpsWLanOperatingEncryptMode, brFuncLockPcLoginName=brFuncLockPcLoginName, brPagePCLAutoLF=brPagePCLAutoLF, brNetFaxShareSupported=brNetFaxShareSupported, brDNSSupported=brDNSSupported, brLPDSupported=brLPDSupported, brENetMode=brENetMode, brFuncLockPcLoginNameAuthID=brFuncLockPcLoginNameAuthID, brpsMainRevision=brpsMainRevision, brPrintPagesIndex=brPrintPagesIndex, brHTTPSEnable=brHTTPSEnable, errorHistory=errorHistory, brorg=brorg, brpsWLanCapabilityAuthModeDescription=brpsWLanCapabilityAuthModeDescription, brFuncLockPcLoginNameEntry=brFuncLockPcLoginNameEntry, brPJLInfoOptionsEntry=brPJLInfoOptionsEntry, brProxyServerPort=brProxyServerPort, brInfoHDDSlot1=brInfoHDDSlot1, brFuncLock=brFuncLock, brpsFirmwareAdvancedAddressSupported=brpsFirmwareAdvancedAddressSupported, brpsSMTPAUTHUsername=brpsSMTPAUTHUsername, brpsAvailableWLanEncryptMode=brpsAvailableWLanEncryptMode, brpsServiceString=brpsServiceString, brLdapServerAttrNameTable=brLdapServerAttrNameTable, brpsWLanAvailableChannel=brpsWLanAvailableChannel, brFuncLockUserIndex=brFuncLockUserIndex, brMultiIFServiceTable=brMultiIFServiceTable, brpsEmailSendTestSupported=brpsEmailSendTestSupported, brTimestampLastFax=brTimestampLastFax, brPrtAdvancedPriority=brPrtAdvancedPriority, brpsWLanCapabilityAuthEAPIndex=brpsWLanCapabilityAuthEAPIndex, brSmallPaperSize1=brSmallPaperSize1, brLdapSetDefault=brLdapSetDefault, brOneTouchDialTable=brOneTouchDialTable, brEWSSSLPortEnable=brEWSSSLPortEnable, brFuncLockPublicFuncSupported=brFuncLockPublicFuncSupported, brFirmwareUpdateKeywordCount=brFirmwareUpdateKeywordCount, brCapabilityOrientationTable=brCapabilityOrientationTable, mail=mail, brMultiIForiginalIPv6=brMultiIForiginalIPv6, sleep=sleep, brNotificationRuleEntry=brNotificationRuleEntry, brPJLInfoOuttrayconfigTable=brPJLInfoOuttrayconfigTable, economy=economy, brpsServiceReplace=brpsServiceReplace, brLCDMode3=brLCDMode3, brpsBanyanIPNetworkID1=brpsBanyanIPNetworkID1, brpsBanyanLoginName=brpsBanyanLoginName, brLdapEnable=brLdapEnable, brpsBanyanErrorLE=brpsBanyanErrorLE, brPrtAdvancedPanelBuzzer=brPrtAdvancedPanelBuzzer, brSpeedDialCount=brSpeedDialCount, broriginalSNTP=broriginalSNTP, brMultiIFWebServicesTable=brMultiIFWebServicesTable, brPJLInfoIntrayconfigEntry=brPJLInfoIntrayconfigEntry, brFontName=brFontName, brMultiIFTCPIPTable=brMultiIFTCPIPTable, brMultiIFServiceProtocolNetware=brMultiIFServiceProtocolNetware, brPJLInfoFirmwareUpdateconfigEntry=brPJLInfoFirmwareUpdateconfigEntry, brInfoSolutionsCenterURL=brInfoSolutionsCenterURL, brMultiIFTCPIPEntry=brMultiIFTCPIPEntry, brCapabilityOrientationCount=brCapabilityOrientationCount, brFuncLockUserFuncTable=brFuncLockUserFuncTable, brpsWLanCapabilityEncryptModeIndex=brpsWLanCapabilityEncryptModeIndex, brpsWLanEncryptMode=brpsWLanEncryptMode, mcgRemoteSetup=mcgRemoteSetup, brPrtAdvancedImageCompression=brPrtAdvancedImageCompression, broriginalJobTermination=broriginalJobTermination, general=general, brIPv6Supported=brIPv6Supported, brpsNetwareRestart=brpsNetwareRestart, brCapabilityMediatypeCount=brCapabilityMediatypeCount, brSNTPCServerMethod=brSNTPCServerMethod, brMultiIFServiceNetwareServerMode=brMultiIFServiceNetwareServerMode, brErrorHistoryEntry=brErrorHistoryEntry, adminCapa=adminCapa, brMultiIFdns=brMultiIFdns, brPJLInfoFirmwareUpdateconfigIndex=brPJLInfoFirmwareUpdateconfigIndex, brFuncLockPublicFuncMember=brFuncLockPublicFuncMember, brpsPOP3TotalMessage=brpsPOP3TotalMessage, brMultiIFServiceStringIndex=brMultiIFServiceStringIndex, brPrtAdvancedErrorBuzzer=brPrtAdvancedErrorBuzzer, brPrtAdvancedSleepIndication=brPrtAdvancedSleepIndication, brpsSNMPGetCommunity=brpsSNMPGetCommunity, brpsWLanCtsRate=brpsWLanCtsRate, brpsServiceProtocolNetware=brpsServiceProtocolNetware, brMultiIFServiceFilterCount=brMultiIFServiceFilterCount, brLdapServerAttrDetailEnable4=brLdapServerAttrDetailEnable4, brMultiIFServicePort=brMultiIFServicePort, brLLTDEnable=brLLTDEnable, brPrtAdvancedDestination=brPrtAdvancedDestination, brpsEmailRecvTestSupported=brpsEmailRecvTestSupported, brpsNtSendEnable=brpsNtSendEnable, brLCDMode1=brLCDMode1, manual=manual, brSecurePrintRAMSize=brSecurePrintRAMSize, brPrtMailboxProtectEntry=brPrtMailboxProtectEntry, brpsPOP3Address=brpsPOP3Address, brpsAdvancedTCPIPAccessEnable=brpsAdvancedTCPIPAccessEnable, eMailReports=eMailReports, brEmailReportsReportFormat=brEmailReportsReportFormat, brFontPitch=brFontPitch, brpsBanyanIPPacket=brpsBanyanIPPacket, brpsWLanCapabilityAuthEAPType=brpsWLanCapabilityAuthEAPType, brpsChangeSMTPPortSupported=brpsChangeSMTPPortSupported, brpsFirmwareIPAddress=brpsFirmwareIPAddress, brMultiIFAPIPATable=brMultiIFAPIPATable, brTBD1=brTBD1, brMultiIFServiceProtocolNetBEUI=brMultiIFServiceProtocolNetBEUI, paper=paper, brMultiIFHardwareType=brMultiIFHardwareType, brMultiIFServiceStringLimit=brMultiIFServiceStringLimit, brIFaxSupported=brIFaxSupported, brpsWLanAuthUserPass=brpsWLanAuthUserPass, brMultiIFServiceString=brMultiIFServiceString, brpsTCPIPAccessNodeAddress=brpsTCPIPAccessNodeAddress)
mibBuilder.exportSymbols("BROTHER-MIB", npPort=npPort, mcFax=mcFax, brpsAvailableWLanTable=brpsAvailableWLanTable, brFuncLockUserTable=brFuncLockUserTable, brProxyEnable=brProxyEnable, mcsNetSKy=mcsNetSKy, brDeviceNegotiationConfirmPassword=brDeviceNegotiationConfirmPassword, pfkit=pfkit, brEmailReportsAddress=brEmailReportsAddress, wlNetSearch=wlNetSearch, brpsAdvancedTCPIPAccessSetting=brpsAdvancedTCPIPAccessSetting, brFuncLockUserFuncEntry=brFuncLockUserFuncEntry, brpsDLCEnable=brpsDLCEnable, epson=epson, brDeviceNegotiationGetChallenge=brDeviceNegotiationGetChallenge, brPriError=brPriError, brpsNetwareServicingQueueCount=brpsNetwareServicingQueueCount, brNotificationIndex=brNotificationIndex, brLdapServerAttrDetailEnable3=brLdapServerAttrDetailEnable3, brDeviceNegotiationEncryptVer=brDeviceNegotiationEncryptVer, brpapertype2=brpapertype2, brNetRemoteSetUpSupported=brNetRemoteSetUpSupported, pjlinfo=pjlinfo, brMultiIFconfig=brMultiIFconfig, brNetSKeyReceiverAddress=brNetSKeyReceiverAddress, brEmailReportsSendReportatPowerOn=brEmailReportsSendReportatPowerOn, brpsDLCSupported=brpsDLCSupported, brpsServicePort=brpsServicePort, brMultiIFActiveIF=brMultiIFActiveIF, broriginalldap=broriginalldap, mcfFaxInfomation=mcfFaxInfomation, brNotificationErrorRule=brNotificationErrorRule, brpsNetBIOSIPEnable=brpsNetBIOSIPEnable, brpowerstime=brpowerstime, brpsNodeName=brpsNodeName, brPictBridgePrintSetting=brPictBridgePrintSetting, brNotificationStatusGroup=brNotificationStatusGroup, status_prt_eng=status_prt_eng, brScanCountEntry=brScanCountEntry, broriginalapipa=broriginalapipa, brpsPortType=brpsPortType, brIPPOriginalPortEnable=brIPPOriginalPortEnable, brpsServiceName=brpsServiceName, brPageEPSONBottomMargin=brPageEPSONBottomMargin, brpsSNMPSetCommunity2=brpsSNMPSetCommunity2, brpsWLanCtsMode=brpsWLanCtsMode, brFuncLockPublicTable=brFuncLockPublicTable, brpsPortName=brpsPortName, brpsBootRevision=brpsBootRevision, brpsServiceIndex=brpsServiceIndex, brorientation=brorientation, device=device, capability=capability, brPageIBMTopMargin=brPageIBMTopMargin, brSNMPTrapEntry=brSNMPTrapEntry, brPanelLockOn=brPanelLockOn, wlTKIP=wlTKIP, brpsEmailSendTestMail=brpsEmailSendTestMail, brpsBanyanServerAddress1=brpsBanyanServerAddress1, speedDial=speedDial, brPagePCLLeftMargin=brPagePCLLeftMargin, brFuncLockUserPrintPageCountMono=brFuncLockUserPrintPageCountMono, brMediaFixTray2=brMediaFixTray2, brpsWLanCapabilityEncryptModeEntry=brpsWLanCapabilityEncryptModeEntry, brpsMIBMajor=brpsMIBMajor, brEmailReportsTable=brEmailReportsTable, brmpsize=brmpsize, brpsBanyanIPCConnectionInformation=brpsBanyanIPCConnectionInformation, brpsServiceEOT=brpsServiceEOT, brpsPortIndex=brpsPortIndex, margin_e=margin_e, brpsServiceObsolete=brpsServiceObsolete, cassette2=cassette2, brPagePSPrintPSError=brPagePSPrintPSError, resolution=resolution, wlLEAP=wlLEAP, brsimmtype3=brsimmtype3, brInfoType=brInfoType, bripp=bripp, brBasicSettingConfigured=brBasicSettingConfigured, brnetbeui=brnetbeui, brpsVerifyPhysAddress=brpsVerifyPhysAddress, brFuncLockUserPrintPageCountMonoLast=brFuncLockUserPrintPageCountMonoLast, brMultiIFInterfaceEnableImmediate=brMultiIFInterfaceEnableImmediate, brTBD3=brTBD3, brColorCalibrationReset=brColorCalibrationReset, brPageGLPen5Size=brPageGLPen5Size, brMultiIFIPv6StaticAddress=brMultiIFIPv6StaticAddress, brpsBanyanSPPListen=brpsBanyanSPPListen, brpsTCPIPAccessTable=brpsTCPIPAccessTable, npSys=npSys, brNotificationVersion=brNotificationVersion, advanced=advanced, brPageEPSONTopMargin=brPageEPSONTopMargin, brMultiIFServiceMatch=brMultiIFServiceMatch, brFuncLockUserName=brFuncLockUserName, brFuncLockSettingInit=brFuncLockSettingInit, wlStatus=wlStatus, brpsServiceAppleTalkType=brpsServiceAppleTalkType, brMultiIFServiceNetwareServerCount=brMultiIFServiceNetwareServerCount, brpsPOP3TotalConnectFailure=brpsPOP3TotalConnectFailure, brIPv6Enable=brIPv6Enable, brRawPortSupported=brRawPortSupported, brlines=brlines, brpsSMTPAddress=brpsSMTPAddress, brLdapServerAttrEMail=brLdapServerAttrEMail, brInfoAlertVersion=brInfoAlertVersion, brpsDLCLLCPortStatus=brpsDLCLLCPortStatus, brFirmwareUpdateKeywordTable=brFirmwareUpdateKeywordTable, brPageGLPen4Size=brPageGLPen4Size, eNet=eNet, brErrorHistoryCount=brErrorHistoryCount, brpsWLanAuthUserID=brpsWLanAuthUserID, brPanelKeyMode=brPanelKeyMode, brSNTPCSupported=brSNTPCSupported, brLCDContrast=brLCDContrast, brpsPortQueueSize=brpsPortQueueSize, banner=banner, breconomode=breconomode, brMediaFixMP=brMediaFixMP, brNotificationRuleValue=brNotificationRuleValue, brpsNetBIOSSecondaryWINSAddr=brpsNetBIOSSecondaryWINSAddr, brpsPortHTTPExtensions=brpsPortHTTPExtensions, brFuncLockSetting=brFuncLockSetting, brpsAppleTalkEnable=brpsAppleTalkEnable, brEWSRegularPortEnable=brEWSRegularPortEnable, brFTPSupported=brFTPSupported, brpsAvailableWLanCount=brpsAvailableWLanCount, brpsDLCLLCRecvPacket=brpsDLCLLCRecvPacket, brTrayPriorityTable=brTrayPriorityTable, brpsServiceMatch=brpsServiceMatch, brpsEmailRecvTestCall=brpsEmailRecvTestCall, brPJLInfoOuttrayconfigEntry=brPJLInfoOuttrayconfigEntry, brPagePCLRightMargin=brPagePCLRightMargin, brMultiIFControlTable=brMultiIFControlTable, brMultiIFPrimaryInterface=brMultiIFPrimaryInterface, npCard=npCard, brMultiIFIPv6AddressCount=brMultiIFIPv6AddressCount, broriginalKerberos=broriginalKerberos, broriginalLLMNR=broriginalLLMNR, brInfoNetVerUpStatus=brInfoNetVerUpStatus, brMultiIFServiceTCPPort=brMultiIFServiceTCPPort, auto_i=auto_i, brMultiIFIPv6StaticAddressCountTable=brMultiIFIPv6StaticAddressCountTable, brpsWLanMode=brpsWLanMode, brDirectPrintOrientation=brDirectPrintOrientation, wlSES=wlSES, smallPaperSize=smallPaperSize, brpsNetBIOSPrimaryWINSAddr=brpsNetBIOSPrimaryWINSAddr, brpsWLanTKIPChangeInterval=brpsWLanTKIPChangeInterval, brLdapServerAttrNameCount=brLdapServerAttrNameCount, brpsNetBIOSPrintingSupported=brpsNetBIOSPrintingSupported, brScanCountTable=brScanCountTable, brSmallPaperSize3=brSmallPaperSize3, brpsSMTPAUTHPassword=brpsSMTPAUTHPassword, brUnRegisterKeyInfo=brUnRegisterKeyInfo, brPrtAdvancedMPTrayFeed=brPrtAdvancedMPTrayFeed, brToner1Low=brToner1Low, brLCDString1=brLCDString1, brpsBanyanServerAddress2=brpsBanyanServerAddress2, brJamPlace=brJamPlace, brnetMultiIFConfig=brnetMultiIFConfig, tonerlow=tonerlow, wlGeneralStatus=wlGeneralStatus, brFTPEnable=brFTPEnable, mediaFix=mediaFix, brPictBridgeOrientation=brPictBridgeOrientation, brPrtFinisher=brPrtFinisher, brPanelLock=brPanelLock, brpsNetwarePrintJob=brpsNetwarePrintJob, brpsPortInfoTable=brpsPortInfoTable, brRegistrationXCyanRight=brRegistrationXCyanRight, brMultiIFCount=brMultiIFCount, brpsNetwareServerIndex=brpsNetwareServerIndex, brPrtAdvancedButtonRepeat=brPrtAdvancedButtonRepeat, brpsWLanDestination=brpsWLanDestination, determined=determined, brresolution=brresolution, brpsAppleTalkPrintJob=brpsAppleTalkPrintJob, brpsPortInfoEntry=brpsPortInfoEntry, brpsSmtpAUTHTimeout=brpsSmtpAUTHTimeout, brpsBanyanRouter1=brpsBanyanRouter1, brpsLATCircuitTimer=brpsLATCircuitTimer, wlGeneral=wlGeneral, brFuncLockUserCount=brFuncLockUserCount, brPrtAdvancedJamRecovery=brPrtAdvancedJamRecovery, brJobTerminationSupported=brJobTerminationSupported, brSupportedInfo=brSupportedInfo, brCapabilityResolutionIndex=brCapabilityResolutionIndex, brNotificationRuleTable=brNotificationRuleTable, brpsBanyanErrorPT=brpsBanyanErrorPT, brErrorHistoryIndex=brErrorHistoryIndex, brpsPOP3Name=brpsPOP3Name, brpsPit3WLanTestStatus=brpsPit3WLanTestStatus, brPJLInfoStorageconfig=brPJLInfoStorageconfig, brpsEmailTestResult=brpsEmailTestResult, brMultiIFTCPIPAddress=brMultiIFTCPIPAddress, brpsPOP3TotalAPOPFailure=brpsPOP3TotalAPOPFailure, brpsNetwareEtherIINetInfo=brpsNetwareEtherIINetInfo, brpsSNMPSetCommunity1=brpsSNMPSetCommunity1, brpsBanyanSPPSequenceError=brpsBanyanSPPSequenceError, brpsLATKeepAliveTimer=brpsLATKeepAliveTimer, brEmailReportsCount=brEmailReportsCount, brpsAvailableWLanScanWaitTime=brpsAvailableWLanScanWaitTime, brpsServiceVines=brpsServiceVines, pen2=pen2, brTrayPriorityEntry=brTrayPriorityEntry, brFaxReceiveMode=brFaxReceiveMode, net_peripheral=net_peripheral, brpsHardwareType=brpsHardwareType, brRegistrationYMagenta=brRegistrationYMagenta, brFuncLockPcLoginNameAuthCount=brFuncLockPcLoginNameAuthCount, brsimmsize1=brsimmsize1, brpsServiceStringIndex=brpsServiceStringIndex, brLCDMode2=brLCDMode2, brPrintPagesFuncCounter=brPrintPagesFuncCounter, test=test, brPagePSKeepPCLFonts=brPagePSKeepPCLFonts, fax_setup=fax_setup, brpsTCPIPMaxWindow=brpsTCPIPMaxWindow, brDirectPrintPdfOption=brDirectPrintPdfOption, brInfoEstimatedPagesRemaining=brInfoEstimatedPagesRemaining, brFuncLockPcLoginNameTable=brFuncLockPcLoginNameTable, autoff=autoff, brtimeout=brtimeout, brpsTCPIPAccessEntry=brpsTCPIPAccessEntry, brPrtGeneralEmulationTimeout=brPrtGeneralEmulationTimeout, brpsEmailSendRecvTestCall=brpsEmailSendRecvTestCall, brpsFirmwareFile=brpsFirmwareFile, brLCDString4=brLCDString4, brpsAppleTalkWriteError=brpsAppleTalkWriteError, brpsNtSendSupported=brpsNtSendSupported, brProxyServerInfoTable=brProxyServerInfoTable, brFuncLockUserFuncIndex=brFuncLockUserFuncIndex, brCarbonCopyMacro=brCarbonCopyMacro, traysize=traysize, brCapabilityPaperName=brCapabilityPaperName, brRegistrationXYellowRight=brRegistrationXYellowRight, brcontrol=brcontrol, brCapabilityOrientationName=brCapabilityOrientationName, brInfoHDDInternal=brInfoHDDInternal, brpsPortBinaryMode=brpsPortBinaryMode, brpsServiceFilter=brpsServiceFilter, brpsTCPIPBootTries=brpsTCPIPBootTries, brpsAdvancedTCPIPAccessAdministratorIPAddress=brpsAdvancedTCPIPAccessAdministratorIPAddress, brpsPOP3PortNumber=brpsPOP3PortNumber, brLdapSupported=brLdapSupported, brpsFirmwareHost=brpsFirmwareHost, brLdapServerAttrNameIndex=brLdapServerAttrNameIndex, brInfoSerialNumber=brInfoSerialNumber, brSNMPSupported=brSNMPSupported, brPrintPagesPaperTypeTable=brPrintPagesPaperTypeTable, brDNSIPSetup=brDNSIPSetup, pjl=pjl)
mibBuilder.exportSymbols("BROTHER-MIB", brMultiIFIPv6StaticAddressIndex=brMultiIFIPv6StaticAddressIndex, brMultiIFServiceVines=brMultiIFServiceVines, brMultiIFAPIPAEnable=brMultiIFAPIPAEnable, net_printer=net_printer, brpsSMTPTotalSendToFailure=brpsSMTPTotalSendToFailure, brPhoneNumberLastFax=brPhoneNumberLastFax, brpsWLanCapabilityEncryptModeSupported=brpsWLanCapabilityEncryptModeSupported, brInfoMaintenance=brInfoMaintenance, brpsPasswordVerify=brpsPasswordVerify, brnetConfigOpt=brnetConfigOpt, brpsEmailSendTestCall=brpsEmailSendTestCall, brPagePCLAutoSkip=brPagePCLAutoSkip, brCommunicationErrorHistoryDescription=brCommunicationErrorHistoryDescription, brpsNetBEUISupported=brpsNetBEUISupported, brMultiIFServiceFilter=brMultiIFServiceFilter, brPrtAdvancedTonerLowPrint=brPrtAdvancedTonerLowPrint, printPages=printPages, brMultiIFConfigureEntry=brMultiIFConfigureEntry, brpsSerialNumber=brpsSerialNumber, brRegistrationYCyan=brRegistrationYCyan, wlCapability=wlCapability, brSNMPTrapTable=brSNMPTrapTable, brPictBridgePaperSize=brPictBridgePaperSize, brpsServiceProtocolLAT=brpsServiceProtocolLAT, brScanCountCounter=brScanCountCounter, wlAssociate=wlAssociate, brpsNetwareSupported=brpsNetwareSupported, fontsetup=fontsetup, brPanelKeySecure=brPanelKeySecure, brWebServicesEnable=brWebServicesEnable, brSNTPCInterval=brSNTPCInterval, brToner2Low=brToner2Low, brCapabilityResolutionEntry=brCapabilityResolutionEntry, brpsNDSSupported=brpsNDSSupported)
