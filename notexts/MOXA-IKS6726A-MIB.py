#
# PySNMP MIB module MOXA-IKS6726A-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/moxa/MOXA-IKS6726A-MIB
# Produced by pysmi-1.1.8 at Fri Jan 27 14:10:24 2023
# On host fv-az417-962 platform Linux version 5.15.0-1031-azure by user runner
# Using Python version 3.10.9 (main, Dec  7 2022, 08:16:13) [GCC 11.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Integer32, ObjectIdentity, IpAddress, enterprises, Bits, MibIdentifier, iso, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Integer32", "ObjectIdentity", "IpAddress", "enterprises", "Bits", "MibIdentifier", "iso", "Gauge32", "TimeTicks")
MacAddress, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "DateAndTime")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
industrialEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7))
iks6726A = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 7, 116))
iks6726A.setRevisions(('2015-06-30 00:00', '2014-08-07 00:00',))
if mibBuilder.loadTexts: iks6726A.setLastUpdated('201506300000Z')
if mibBuilder.loadTexts: iks6726A.setOrganization('Moxa Inc.')
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1))
swTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2))
class PortList(TextualConvention, OctetString):
    status = 'current'

numberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('current')
switchModel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModel.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
enableWebConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("httpOrHttps", 1), ("httpsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWebConfig.setStatus('current')
consoleLoginMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("menu", 0), ("cli", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginMode.setStatus('current')
enableTelnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTelnetConsole.setStatus('current')
lineSwapRecovery = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSwapRecovery.setStatus('current')
ageTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ageTime.setStatus('current')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8))
switchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpAddr.setStatus('current')
switchIpMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpMask.setStatus('current')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
enableAutoIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableDHCP", 1), ("enableBOOTP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoIpConfig.setStatus('current')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
trapServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAddr.setStatus('current')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
snmpTrap2Community = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2Community.setStatus('current')
trap2ServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2ServerAddr.setStatus('current')
snmpInformEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformEnable.setStatus('current')
snmpInformRetries = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformRetries.setStatus('current')
snmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformTimeout.setStatus('current')
dhcpRetryPeriods = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryPeriods.setStatus('current')
dhcpRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryTimes.setStatus('current')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snmpv1-Trap", 0), ("snmpv2-Notification", 1), ("snmpv2-Inform", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9))
portTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDesc.setStatus('current')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('current')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("speed100M-Full", 1), ("speed100M-Half", 2), ("speed10M-Full", 3), ("speed10M-Half", 4), ("speed1000M-Full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
portMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("auto", 1), ("mdi", 2), ("mdiX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMDI.setStatus('current')
portFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFDXFlowCtrl.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10))
power1InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power1InputStatus.setStatus('current')
power2InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power2InputStatus.setStatus('current')
monitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3), )
if mibBuilder.loadTexts: monitorPortTable.setStatus('current')
monitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorPortEntry.setStatus('current')
monitorLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("disable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorLinkStatus.setStatus('current')
monitorSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1, 0, -1))).clone(namedValues=NamedValues(("speed1000M-Full", 5), ("speed1000M-Half", 4), ("speed100M-Full", 3), ("speed100M-Half", 2), ("speed10M-Full", 1), ("speed10M-Half", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSpeed.setStatus('current')
monitorAutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("mdiX", 1), ("mdi", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorAutoMDI.setStatus('current')
monitorTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTraffic.setStatus('current')
monitorFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setStatus('current')
monitorTxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTraffic.setStatus('current')
monitorRxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTraffic.setStatus('current')
monitorDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 4), )
if mibBuilder.loadTexts: monitorDiTable.setStatus('current')
monitorDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 4, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "diIndex"))
if mibBuilder.loadTexts: monitorDiEntry.setStatus('current')
diIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diIndex.setStatus('current')
diInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diInputStatus.setStatus('current')
monitorSFPTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7), )
if mibBuilder.loadTexts: monitorSFPTable.setStatus('current')
monitorSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSFPEntry.setStatus('current')
sfpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPort.setStatus('current')
sfpModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpModelName.setStatus('current')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
powerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 10, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerConsumption.setStatus('current')
emailWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11))
emailService = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
emailWarningSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPPort.setStatus('current')
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
setDeviceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12))
setDevIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1), )
if mibBuilder.loadTexts: setDevIpTable.setStatus('current')
setDevIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "setDevIpIndex"))
if mibBuilder.loadTexts: setDevIpEntry.setStatus('current')
setDevIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpIndex.setStatus('current')
setDevIpCurrentIpofDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setStatus('current')
setDevIpPresentBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("no", 0), ("dhcpClient", 1), ("rarp", 2), ("bootp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpPresentBy.setStatus('current')
setDevIpDedicatedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 12, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDevIpDedicatedIp.setStatus('current')
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 13))
targetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetPort.setStatus('current')
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
monitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inputDataStream", 0), ("outputDataStream", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDirection.setStatus('current')
portTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14))
trunkSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 1), )
if mibBuilder.loadTexts: trunkSettingTable.setStatus('current')
trunkSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "trunkSettingIndex"))
if mibBuilder.loadTexts: trunkSettingEntry.setStatus('current')
trunkSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkSettingIndex.setStatus('current')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkType.setStatus('current')
trunkMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkMemberPorts.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 2), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "trunkIndex"), (0, "MOXA-IKS6726A-MIB", "trunkPort"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPort.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
commRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16))
protocolOfRedundancySetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolOfRedundancySetup.setStatus('current')
turboRing = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2))
turboRingMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingMaster.setStatus('current')
turboRingMasterSetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingMasterSetup.setStatus('current')
turboRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3), )
if mibBuilder.loadTexts: turboRingPortTable.setStatus('current')
turboRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "turboRingPortIndex"))
if mibBuilder.loadTexts: turboRingPortEntry.setStatus('current')
turboRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortIndex.setStatus('current')
turboRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notTurboRingPort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortStatus.setStatus('current')
turboRingPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setStatus('current')
turboRingPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setStatus('current')
turboRingDesignatedMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingDesignatedMaster.setStatus('current')
turboRingRdntPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort1.setStatus('current')
turboRingRdntPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort2.setStatus('current')
turboRingEnableCoupling = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingEnableCoupling.setStatus('current')
turboRingCouplingPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingCouplingPort.setStatus('current')
turboRingCouplingPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notCouplingPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setStatus('current')
turboRingControlPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingControlPort.setStatus('current')
turboRingControlPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("portDisabled", 0), ("notControlPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5), ("inactive", 6), ("active", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingControlPortStatus.setStatus('current')
turboRingBrokenStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingBrokenStatus.setStatus('current')
spanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3))
spanningTreeRoot = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeRoot.setStatus('current')
spanningTreeBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440))).clone(namedValues=NamedValues(("priority0", 0), ("priority4096", 4096), ("priority8192", 8192), ("priority12288", 12288), ("priority16384", 16384), ("priority20480", 20480), ("priority24576", 24576), ("priority28672", 28672), ("priority32768", 32768), ("priority36864", 36864), ("priority40960", 40960), ("priority45056", 45056), ("priority49152", 49152), ("priority53248", 53248), ("priority57344", 57344), ("priority61440", 61440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeBridgePriority.setStatus('current')
spanningTreeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeHelloTime.setStatus('current')
spanningTreeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeMaxAge.setStatus('current')
spanningTreeForwardingDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setStatus('current')
spanningTreeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6), )
if mibBuilder.loadTexts: spanningTreeTable.setStatus('current')
spanningTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "spanningTreeIndex"))
if mibBuilder.loadTexts: spanningTreeEntry.setStatus('current')
spanningTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeIndex.setStatus('current')
enableSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSpanningTree.setStatus('current')
spanningTreePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240))).clone(namedValues=NamedValues(("priority0", 0), ("priority16", 16), ("priority32", 32), ("priority48", 48), ("priority64", 64), ("priority80", 80), ("priority96", 96), ("priority112", 112), ("priority128", 128), ("priority144", 144), ("priority160", 160), ("priority176", 176), ("priority192", 192), ("priority208", 208), ("priority224", 224), ("priority240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortPriority.setStatus('current')
spanningTreePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortCost.setStatus('current')
spanningTreePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notSpanningTreePort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreePortStatus.setStatus('current')
spanningTreePortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("forceEdge", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortEdge.setStatus('current')
activeProtocolOfRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setStatus('current')
turboRingV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5))
turboRingV2Ring1 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1))
ringIndexRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing1.setStatus('current')
ringEnableRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing1.setStatus('current')
masterSetupRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing1.setStatus('current')
masterStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing1.setStatus('current')
designatedMasterRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing1.setStatus('current')
rdnt1stPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing1.setStatus('current')
rdnt1stPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setStatus('current')
rdnt2ndPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing1.setStatus('current')
rdnt2ndPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setStatus('current')
brokenStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing1.setStatus('current')
turboRingV2Ring2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2))
ringIndexRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing2.setStatus('current')
ringEnableRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing2.setStatus('current')
masterSetupRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing2.setStatus('current')
masterStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing2.setStatus('current')
designatedMasterRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing2.setStatus('current')
rdnt1stPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing2.setStatus('current')
rdnt1stPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setStatus('current')
rdnt2ndPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing2.setStatus('current')
rdnt2ndPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setStatus('current')
brokenStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing2.setStatus('current')
turboRingV2Coupling = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3))
couplingEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingEnable.setStatus('current')
couplingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualHoming", 1), ("couplingBackup", 2), ("couplingPrimary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingMode.setStatus('current')
coupling1stPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling1stPort.setStatus('current')
coupling1stPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling1stPortStatus.setStatus('current')
coupling2ndPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling2ndPort.setStatus('current')
coupling2ndPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling2ndPortStatus.setStatus('current')
turboChain = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6))
turboChainRole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("head", 1), ("member", 2), ("tail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainRole.setStatus('current')
turboChainPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort1.setStatus('current')
turboChainPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort2.setStatus('current')
turboChainPort1Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1Status.setStatus('current')
turboChainPort2Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2Status.setStatus('current')
turboChainPort1PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setStatus('current')
turboChainPort2PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 16, 6, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setStatus('current')
trafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18))
qosClassification = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1))
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schedweightfair", 0), ("schedstrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
inspectTos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectTos.setStatus('current')
inspectCos = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inspectCos.setStatus('current')
portPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriority.setStatus('current')
cosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 2))
cosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 2, 1), )
if mibBuilder.loadTexts: cosMappingTable.setStatus('current')
cosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 2, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "cosTag"))
if mibBuilder.loadTexts: cosMappingEntry.setStatus('current')
cosTag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosTag.setStatus('current')
cosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("TrafficClass0", 0), ("TrafficClass1", 1), ("TrafficClass2", 2), ("TrafficClass3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosMappedPriority.setStatus('current')
tosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 3))
tosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 3, 1), )
if mibBuilder.loadTexts: tosMappingTable.setStatus('current')
tosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 3, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "tosClass"))
if mibBuilder.loadTexts: tosMappingEntry.setStatus('current')
tosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tosClass.setStatus('current')
tosMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tosMappedPriority.setStatus('current')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19))
vlanPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1), )
if mibBuilder.loadTexts: vlanPortSettingTable.setStatus('current')
vlanPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: vlanPortSettingEntry.setStatus('current')
portVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("hybrid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanType.setStatus('current')
portDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDefaultVid.setStatus('current')
portFixedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVid.setStatus('current')
portForbiddenVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForbiddenVid.setStatus('current')
portFixedVidUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVidUntag.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
joinedAccessPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedAccessPorts.setStatus('current')
joinedTrunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedTrunkPorts.setStatus('current')
joinedHybridPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedHybridPorts.setStatus('current')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
vlanType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tagBased", 0), ("portBased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanType.setStatus('current')
portbaseVlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 5), )
if mibBuilder.loadTexts: portbaseVlanSettingTable.setStatus('current')
portbaseVlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 5, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portbaseVlanSettingIndex"))
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setStatus('current')
portbaseVlanSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setStatus('current')
portbaseVlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 5, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setStatus('current')
enableGvrp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGvrp.setStatus('current')
multicastFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20))
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1))
querierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: querierQueryInterval.setStatus('current')
igmpSnoopingSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2), )
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setStatus('current')
igmpSnoopingSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "vlanId"))
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setStatus('current')
enableIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIgmpSnooping.setStatus('current')
enableQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("igmpv2", 1), ("igmpv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableQuerier.setStatus('current')
fixedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setStatus('current')
learnedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setStatus('current')
enableGlobalIgmpSnooping = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setStatus('current')
multicastFastForwarding = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFastForwarding.setStatus('current')
staticMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2))
staticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2, 1), )
if mibBuilder.loadTexts: staticMulticastTable.setStatus('current')
staticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "staticMulticastAddress"))
if mibBuilder.loadTexts: staticMulticastEntry.setStatus('current')
staticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2, 1, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastAddress.setStatus('current')
staticMulticastPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2, 1, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastPorts.setStatus('current')
staticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastStatus.setStatus('current')
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3))
gmrpSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 1), )
if mibBuilder.loadTexts: gmrpSettingTable.setStatus('current')
gmrpSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: gmrpSettingEntry.setStatus('current')
enableGMRP = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGMRP.setStatus('current')
gmrpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 2), )
if mibBuilder.loadTexts: gmrpTable.setStatus('current')
gmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "gmrpMulticastGroup"))
if mibBuilder.loadTexts: gmrpEntry.setStatus('current')
gmrpMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroup.setStatus('current')
gmrpFixedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpFixedPorts.setStatus('current')
gmrpLearnedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpLearnedPorts.setStatus('current')
mfb = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 4))
mfbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 4, 1), )
if mibBuilder.loadTexts: mfbSettingTable.setStatus('current')
mfbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 4, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: mfbSettingEntry.setStatus('current')
filterBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 20, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("forwardUnknown", 2), ("filterUnknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterBehavior.setStatus('current')
rateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21))
rateLimitingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("portDisable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitingMode.setStatus('current')
normalModeRateLimitingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 1), )
if mibBuilder.loadTexts: normalModeRateLimitingTable.setStatus('current')
normalModeRateLimitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: normalModeRateLimitingEntry.setStatus('current')
ingressLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimited", 0), ("percentage03", 1), ("percentage05", 2), ("percentage10", 3), ("percentage15", 4), ("percentage25", 5), ("percentage35", 6), ("percentage50", 7), ("percentage65", 8), ("percentage85", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimitRate.setStatus('current')
egressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimited", 0), ("percentage03", 1), ("percentage05", 2), ("percentage10", 3), ("percentage15", 4), ("percentage25", 5), ("percentage35", 6), ("percentage50", 7), ("percentage65", 8), ("percentage85", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressLimit.setStatus('current')
broadcastStormProtection = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2))
enableBcastStormProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableBcastStormProtection.setStatus('current')
bcastStormIncludeMcast = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormIncludeMcast.setStatus('current')
bcastStormIncludeUnkonwnMcastUcast = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormIncludeUnkonwnMcastUcast.setStatus('current')
unicastFilterBehavior = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2, 4))
ufbIncludeUnkonwnUcast = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufbIncludeUnkonwnUcast.setStatus('current')
portDisableMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 3))
portDisableModePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDisableModePeriod.setStatus('current')
portDisableModeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 3, 2), )
if mibBuilder.loadTexts: portDisableModeTable.setStatus('current')
portDisableModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 3, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: portDisableModeEntry.setStatus('current')
ingressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notlimited", 0), ("rateMega1Fps4464", 1), ("rateMega2Fps7441", 2), ("rateMega3Fps14881", 3), ("rateMega4Fps22322", 4), ("rateMega5Fps37203", 5), ("rateMega6Fps52084", 6), ("rateMega7Fps74405", 7), ("rateGiga1Fps44640", 8), ("rateGiga2Fps74410", 9), ("rateGiga3Fps148810", 10), ("rateGiga4Fps223220", 11), ("rateGiga5Fps372030", 12), ("rateGiga6Fps520840", 13), ("rateGiga7Fps744050", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimit.setStatus('current')
security = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22))
userLoginSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1))
userLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLoginServer.setStatus('current')
tacacsServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2))
tacacsLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthServer.setStatus('current')
tacacsLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthPort.setStatus('current')
tacacsLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setStatus('current')
tacacsLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("ascii", 0), ("pap", 1), ("chap", 2), ("mschap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setStatus('current')
tacacsLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setStatus('current')
radiusServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3))
radiusLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthServer.setStatus('current')
radiusLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthPort.setStatus('current')
radiusLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setStatus('current')
radiusLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("eap-md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setStatus('current')
radiusLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setStatus('current')
portAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2))
staticPortLock = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 1))
staticPortLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockAddress.setStatus('current')
staticPortLockPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockPort.setStatus('current')
staticPortLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockStatus.setStatus('current')
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2))
dataBaseOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("radiuslocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataBaseOption.setStatus('current')
dot1xReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthEnable.setStatus('current')
dot1xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthPeriod.setStatus('current')
dot1xSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 7), )
if mibBuilder.loadTexts: dot1xSettingTable.setStatus('current')
dot1xSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 7, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portIndex"))
if mibBuilder.loadTexts: dot1xSettingEntry.setStatus('current')
enableDot1X = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDot1X.setStatus('current')
dot1xReauthTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 8), )
if mibBuilder.loadTexts: dot1xReauthTable.setStatus('current')
dot1xReauthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 8, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "dot1xReauthPortIndex"))
if mibBuilder.loadTexts: dot1xReauthEntry.setStatus('current')
dot1xReauthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xReauthPortIndex.setStatus('current')
dot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauth.setStatus('current')
dot1xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9))
dot1xSameAsAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSame", 0), ("same", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setStatus('current')
dot1x1stRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusServer.setStatus('current')
dot1x1stRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusPort.setStatus('current')
dot1x1stRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setStatus('current')
dot1x2ndRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setStatus('current')
dot1x2ndRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setStatus('current')
dot1x2ndRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setStatus('current')
portAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3), )
if mibBuilder.loadTexts: portAccessControlTable.setStatus('current')
portAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portAccessControlAddress"))
if mibBuilder.loadTexts: portAccessControlEntry.setStatus('current')
portAccessControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAddress.setStatus('current')
portAccessControlPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlPortNo.setStatus('current')
portAccessControlAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticLock", 1), ("authorized", 2), ("unAuthorized", 3), ("authorizing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAccessStatus.setStatus('current')
portAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 22, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portAccessControlStatus.setStatus('current')
accessibleIP = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30))
enableAccessibleIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIP.setStatus('current')
accessibleIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 2), )
if mibBuilder.loadTexts: accessibleIpTable.setStatus('current')
accessibleIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "accessibleIpAddress"))
if mibBuilder.loadTexts: accessibleIpEntry.setStatus('current')
accessibleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpAddress.setStatus('current')
accessibleIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpNetMask.setStatus('current')
accessibleIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpStatus.setStatus('current')
sysFileUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31))
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
firmwarePathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwarePathName.setStatus('current')
logPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPathName.setStatus('current')
confPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confPathName.setStatus('current')
tftpUpdate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("importFirmware", 1), ("importConfig", 2), ("exportConfig", 3), ("exportLog", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tftpUpdate.setStatus('current')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32))
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
calibratePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calibratePeriod.setStatus('current')
timeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1.setStatus('current')
timeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2.setStatus('current')
daylightSaving = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5))
startMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startMonth.setStatus('current')
startWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startWeek.setStatus('current')
startDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startDay.setStatus('current')
startHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startHour.setStatus('current')
endMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endMonth.setStatus('current')
endWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endWeek.setStatus('current')
endDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endDay.setStatus('current')
endHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endHour.setStatus('current')
offsetHours = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offsetHours.setStatus('current')
enableNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableNTPServer.setStatus('current')
clockSource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 32, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("sntp", 1), ("ntp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockSource.setStatus('current')
backupMediaSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 35))
abc02Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("device-not-present", 0), ("unauthorized-media", 1), ("detecting", 2), ("working", 3), ("ready-and-removable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: abc02Status.setStatus('current')
abc02AutoImportConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoImportConfig.setStatus('current')
abc02AutoExportConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoExportConfig.setStatus('current')
abc02AutoExportLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 35, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoExportLog.setStatus('current')
enableWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWarmStart.setStatus('current')
syslogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37))
syslogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1.setStatus('current')
syslogServer1port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1port.setStatus('current')
syslogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2.setStatus('current')
syslogServer2port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2port.setStatus('current')
syslogServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3.setStatus('current')
syslogServer3port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3port.setStatus('current')
dhcpRelayAgentSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39))
dhcpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer1.setStatus('current')
dhcpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer2.setStatus('current')
dhcpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer3.setStatus('current')
dhcpServer4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer4.setStatus('current')
option82Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 5))
enableOption82 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOption82.setStatus('current')
option82Type = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("client-id", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Type.setStatus('current')
option82Value = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Value.setStatus('current')
option82ValueDisplay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: option82ValueDisplay.setStatus('current')
dhcpFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 6), )
if mibBuilder.loadTexts: dhcpFunctionTable.setStatus('current')
dhcpFunctionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 6, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "dhcpPortIndex"))
if mibBuilder.loadTexts: dhcpFunctionTableEntry.setStatus('current')
dhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPortIndex.setStatus('current')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
option82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 39, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Enable.setStatus('current')
ieee1588Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41))
ptpv1Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1))
enablePtpv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtpv1.setStatus('current')
clockModev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockModev1.setStatus('current')
syncIntervalv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oneSec", 0), ("twoSec", 1), ("fourSec", 2), ("eightSec", 3), ("sixteenSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncIntervalv1.setStatus('current')
subDomainNamev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subDomainNamev1.setStatus('current')
preferMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferMasterv1.setStatus('current')
ptpv2Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2))
enablePtp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtp.setStatus('current')
clockMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockMode.setStatus('current')
transport = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee802dot3", 0), ("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transport.setStatus('current')
syncInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1))).clone(namedValues=NamedValues(("t128msec", -3), ("t256msec", -2), ("t512msec", -1), ("t1sec", 0), ("t2sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncInterval.setStatus('current')
logMinDelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinDelayReqInterval.setStatus('current')
logMinPdelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t512msec", -1), ("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinPdelayReqInterval.setStatus('current')
logAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAnnounceInterval.setStatus('current')
announceReceiptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceReceiptTimeout.setStatus('current')
priority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority1.setStatus('current')
priority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority2.setStatus('current')
clockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockClass.setStatus('current')
domainNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainNumber.setStatus('current')
localUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffset.setStatus('current')
localUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffsetValid.setStatus('current')
localLeap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap59.setStatus('current')
localLeap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap61.setStatus('current')
localPtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arb", 0), ("ptp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPtpTimescale.setStatus('current')
localArbTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localArbTime.setStatus('current')
ptpv1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3))
offsetToMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMasterv1.setStatus('current')
meanPathDelayv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelayv1.setStatus('current')
grandMasterUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandMasterUuidv1.setStatus('current')
parentUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentUuidv1.setStatus('current')
clockStratumv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockStratumv1.setStatus('current')
clockIdentifierv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockIdentifierv1.setStatus('current')
ptpv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4))
offsetToMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMaster.setStatus('current')
meanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelay.setStatus('current')
parentIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentIdentity.setStatus('current')
grandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterIdentity.setStatus('current')
grandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockClass.setStatus('current')
grandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockAccuracy.setStatus('current')
grandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority1.setStatus('current')
grandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority2.setStatus('current')
stepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stepsRemoved.setStatus('current')
currentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffset.setStatus('current')
currentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffsetValid.setStatus('current')
leap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap59.setStatus('current')
leap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap61.setStatus('current')
ptpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimescale.setStatus('current')
timesource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 4, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesource.setStatus('current')
ptpPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 5), )
if mibBuilder.loadTexts: ptpPortTable.setStatus('current')
ptpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 5, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "ptpPortIndex"))
if mibBuilder.loadTexts: ptpPortEntry.setStatus('current')
ptpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortIndex.setStatus('current')
ptpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpPortEnable.setStatus('current')
ptpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 41, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ptpInitializing", 0), ("ptpFaulty", 1), ("ptpDisabled", 2), ("ptpListening", 3), ("ptpPreMaster", 4), ("ptpMaster", 5), ("ptpPassive", 6), ("ptpUncalibrated", 7), ("ptpSlave", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortStatus.setStatus('current')
mibNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0))
varconfigChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("configChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varconfigChangeTrap.setStatus('current')
configChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 1)).setObjects(("MOXA-IKS6726A-MIB", "varconfigChangeTrap"))
if mibBuilder.loadTexts: configChangeTrap.setStatus('current')
varpower1Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower1Trap.setStatus('current')
power1Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 2)).setObjects(("MOXA-IKS6726A-MIB", "varpower1Trap"))
if mibBuilder.loadTexts: power1Trap.setStatus('current')
varpower2Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower2Trap.setStatus('current')
power2Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 3)).setObjects(("MOXA-IKS6726A-MIB", "varpower2Trap"))
if mibBuilder.loadTexts: power2Trap.setStatus('current')
vartrafficOverloadTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vartrafficOverloadTrap.setStatus('current')
trafficOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 4)).setObjects(("MOXA-IKS6726A-MIB", "vartrafficOverloadTrap"))
if mibBuilder.loadTexts: trafficOverloadTrap.setStatus('current')
varredundancyTopologyChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("topologyChanged", 2), ("topologyChangedTurboChainHead", 3), ("topologyChangedTurboChainTail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setStatus('current')
redundancyTopologyChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 5)).setObjects(("MOXA-IKS6726A-MIB", "varredundancyTopologyChangedTrap"))
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setStatus('current')
varturboRingCouplingPortChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("couplingPortChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setStatus('current')
turboRingCouplingPortChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 6)).setObjects(("MOXA-IKS6726A-MIB", "varturboRingCouplingPortChangedTrap"))
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setStatus('current')
varturboRingMasterChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setStatus('current')
turboRingMasterChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 7)).setObjects(("MOXA-IKS6726A-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setStatus('current')
varusbWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noEnoughSpace", 1), ("unauthDevice", 2), ("exportConfigFail", 3), ("exportLogFail", 4), ("autoImportFail", 5), ("isAttached", 6), ("isDetached", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varusbWarningTrap.setStatus('current')
usbWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 20)).setObjects(("MOXA-IKS6726A-MIB", "varusbWarningTrap"))
if mibBuilder.loadTexts: usbWarningTrap.setStatus('current')
varturboRingMasterMismatchTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterMismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterMismatchTrap.setStatus('current')
turboRingMasterMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 22)).setObjects(("MOXA-IKS6726A-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterMismatchTrap.setStatus('current')
varPortLoopDetectedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPortLoopDetectedTrap.setStatus('current')
portLoopDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 17)).setObjects(("MOXA-IKS6726A-MIB", "varPortLoopDetectedTrap"))
if mibBuilder.loadTexts: portLoopDetectedTrap.setStatus('current')
varRateLimitedOnTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rateLimitON", 2), ("rateLimitOFF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varRateLimitedOnTrap.setStatus('current')
rateLimitedOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 18)).setObjects(("MOXA-IKS6726A-MIB", "varRateLimitedOnTrap"))
if mibBuilder.loadTexts: rateLimitedOnTrap.setStatus('current')
varLLDPChgTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varLLDPChgTrap.setStatus('current')
lldpChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 19)).setObjects(("MOXA-IKS6726A-MIB", "varLLDPChgTrap"))
if mibBuilder.loadTexts: lldpChgTrap.setStatus('current')
varPoEWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pdOverCurrent", 1), ("pdCheckFail", 2), ("pdPowerOn", 3), ("pdPowerOff", 4), ("exceedSystemThreshold", 5), ("pseFetBad", 6), ("pseOverTemperature", 7), ("pseVeeUvlo", 8), ("exceedSystemPowerBudget", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPoEWarningTrap.setStatus('current')
poeWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 116, 0, 16)).setObjects(("MOXA-IKS6726A-MIB", "varPoEWarningTrap"))
if mibBuilder.loadTexts: poeWarningTrap.setStatus('current')
diagnosis = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 42))
lldpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 42, 1))
enableLLDP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLLDP.setStatus('current')
lldpMSGInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMSGInterval.setStatus('current')
industrialProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47))
eipSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 1))
modbusTCPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 2))
profinetioSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 3))
enableEtherNetIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableEtherNetIP.setStatus('current')
enableModbusTCP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableModbusTCP.setStatus('current')
enableProfinetIO = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 47, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableProfinetIO.setStatus('current')
garpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 45))
leaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 45, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveAllTime.setStatus('current')
leaveTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 45, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveTime.setStatus('current')
joinTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 45, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: joinTime.setStatus('current')
enableFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFactoryDefault.setStatus('current')
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46))
eventlogTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1), )
if mibBuilder.loadTexts: eventlogTable.setStatus('current')
eventlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "eventlogIndex"))
if mibBuilder.loadTexts: eventlogEntry.setStatus('current')
eventlogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogIndex.setStatus('current')
eventlogBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogBootup.setStatus('current')
eventlogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogDate.setStatus('current')
eventlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogTime.setStatus('current')
eventlogUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogUptime.setStatus('current')
eventlogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogEvent.setStatus('current')
eventlogClear = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventlogClear.setStatus('current')
cpuLoading5s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading5s.setStatus('current')
cpuLoading30s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading30s.setStatus('current')
cpuLoading300s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading300s.setStatus('current')
totalMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemory.setStatus('current')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('current')
usedMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedMemory.setStatus('current')
memoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryUsage.setStatus('current')
loopProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopProtection.setStatus('current')
eventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62))
systemEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1), )
if mibBuilder.loadTexts: systemEventSettingsTable.setStatus('current')
systemEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "systemEventIndex"))
if mibBuilder.loadTexts: systemEventSettingsEntry.setStatus('current')
systemEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventIndex.setStatus('current')
systemEventActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventActive.setStatus('current')
systemEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventName.setStatus('current')
systemEventSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("support-SNMPTrap-only", 1), ("support-Email-only", 2), ("support-SNMP-Trap-Email", 3), ("support-Syslog-only", 4), ("support-SNMPTrap-Syslog", 5), ("support-Email-Syslog", 6), ("support-SNMPTrap-Email-Syslog", 7), ("support-Relay1-only", 8), ("support-SNMPTrap-Relay1", 9), ("support-Email-Relay1", 10), ("support-SNMPTrap-Email-Relay1", 11), ("support-Syslog-Relay1", 12), ("support-SNMPTrap-Syslog-Relay1", 13), ("support-Email-Syslog-Relay1", 14), ("support-SNMPTrap-Email-Syslog-Relay1", 15), ("support-Relay2-only", 16), ("support-SNMPTrap-Relay2", 17), ("support-Email-Relay2", 18), ("support-SNMPTrap-Email-Relay2", 19), ("support-Syslog-Relay2", 20), ("support-SNMPTrap-Syslog-Relay2", 21), ("support-Email-Syslog-Relay2", 22), ("support-SNMPTrap-Email-Syslog-Relay2", 23), ("support-Relay1-Relay2", 24), ("support-SNMPTrap-Relay1-Relay2", 25), ("support-Syslog-Relay1-Relay2", 28), ("support-Email-Syslog-Relay1-Relay2", 30), ("support-all-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventSupport.setStatus('current')
systemEventModuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("enable-SNMPTrap-only", 1), ("enable-Email-only", 2), ("enable-SNMPTrap-Email", 3), ("enable-Syslog-only", 4), ("enable-SNMPTrap-Syslog", 5), ("enable-Email-Syslog", 6), ("enable-SNMPTrap-Email-Syslog", 7), ("enable-Relay1-only", 8), ("enable-SNMPTrap-Relay1", 9), ("enable-Email-Relay1", 10), ("enable-SNMPTrap-Email-Relay1", 11), ("enable-Syslog-Relay1", 12), ("enable-SNMPTrap-Syslog-Relay1", 13), ("enable-Email-Syslog-Relay1", 14), ("enable-SNMPTrap-Email-Syslog-Relay1", 15), ("enable-Relay2-only", 16), ("enable-SNMPTrap-Relay2", 17), ("enable-Email-Relay2", 18), ("enable-SNMPTrap-Email-Relay2", 19), ("enable-Syslog-Relay2", 20), ("enable-SNMPTrap-Syslog-Relay2", 21), ("enable-Email-Syslog-Relay2", 22), ("enable-SNMPTrap-Email-Syslog-Relay2", 23), ("enable-Relay1-Relay2", 24), ("enable-SNMPTrap-Relay1-Relay2", 25), ("enable-Syslog-Relay1-Relay2", 28), ("enable-Email-Syslog-Relay1-Relay2", 30), ("enable-All-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventModuleEnable.setStatus('current')
systemEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventSeverity.setStatus('current')
portEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2), )
if mibBuilder.loadTexts: portEventSettingsTable.setStatus('current')
portEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1), ).setIndexNames((0, "MOXA-IKS6726A-MIB", "portEventIndex"))
if mibBuilder.loadTexts: portEventSettingsEntry.setStatus('current')
portEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEventIndex.setStatus('current')
portEventLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEventLabel.setStatus('current')
portEventActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventActive.setStatus('current')
portEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("enable-LinkOn-only", 1), ("enable-LinkOff-only", 2), ("enable-LinkOn-LinkOff", 3), ("enable-TrafficOverload-only", 4), ("enable-LinkOn-TrafficOverload", 5), ("enable-LinkOff-TrafficOverload", 6), ("enable-All-LinkOn-LinkOff-TrafficOverload", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventEnable.setStatus('current')
portEventTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventTrafficThreshold.setStatus('current')
portEventTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventTrafficDuration.setStatus('current')
portEventModuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("enable-SNMPTrap-only", 1), ("enable-Email-only", 2), ("enable-SNMPTrap-Email", 3), ("enable-Syslog-only", 4), ("enable-SNMPTrap-Syslog", 5), ("enable-Email-Syslog", 6), ("enable-SNMPTrap-Email-Syslog", 7), ("enable-Relay1-only", 8), ("enable-SNMPTrap-Relay1", 9), ("enable-Email-Relay1", 10), ("enable-SNMPTrap-Email-Relay1", 11), ("enable-Syslog-Relay1", 12), ("enable-SNMPTrap-Syslog-Relay1", 13), ("enable-Email-Syslog-Relay1", 14), ("enable-SNMPTrap-Email-Syslog-Relay1", 15), ("enable-Relay2-only", 16), ("enable-SNMPTrap-Relay2", 17), ("enable-Email-Relay2", 18), ("enable-SNMPTrap-Email-Relay2", 19), ("enable-Syslog-Relay2", 20), ("enable-SNMPTrap-Syslog-Relay2", 21), ("enable-Email-Syslog-Relay2", 22), ("enable-SNMPTrap-Email-Syslog-Relay2", 23), ("enable-Relay1-Relay2", 24), ("enable-SNMPTrap-Relay1-Relay2", 25), ("enable-Syslog-Relay1-Relay2", 28), ("enable-Email-Syslog-Relay1-Relay2", 30), ("enable-All-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventModuleEnable.setStatus('current')
portEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 62, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventSeverity.setStatus('current')
managementInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63))
httpEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpEnable.setStatus('current')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
sslEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnable.setStatus('current')
sslPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslPort.setStatus('current')
telnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnable.setStatus('current')
telnetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPort.setStatus('current')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnable.setStatus('current')
sshPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPort.setStatus('current')
webTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 63, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webTimeout.setStatus('current')
switchLocator = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 64))
blinkingLocatorLED = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 64, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blinkingLocatorLED.setStatus('current')
disableLocatorLEDTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 64, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableLocatorLEDTime.setStatus('current')
uiVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 116, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uiVersion.setStatus('current')
mibBuilder.exportSymbols("MOXA-IKS6726A-MIB", turboRing=turboRing, endWeek=endWeek, portEventLabel=portEventLabel, power1Trap=power1Trap, dot1xReauthPeriod=dot1xReauthPeriod, usbWarningTrap=usbWarningTrap, dhcpPortIndex=dhcpPortIndex, trapServerAddr=trapServerAddr, endHour=endHour, systemEventActive=systemEventActive, portbaseVlanSettingIndex=portbaseVlanSettingIndex, portForbiddenVid=portForbiddenVid, abc02AutoExportLog=abc02AutoExportLog, gmrpSettingTable=gmrpSettingTable, turboRingMasterChangedTrap=turboRingMasterChangedTrap, enableBcastStormProtection=enableBcastStormProtection, turboRingDesignatedMaster=turboRingDesignatedMaster, varconfigChangeTrap=varconfigChangeTrap, gmrpTable=gmrpTable, radiusLoginAuthSharedKey=radiusLoginAuthSharedKey, rdnt1stPortRing2=rdnt1stPortRing2, spanningTree=spanningTree, enableSpanningTree=enableSpanningTree, inspectCos=inspectCos, dhcpFunctionTableEntry=dhcpFunctionTableEntry, enableProfinetIO=enableProfinetIO, snmpInformTimeout=snmpInformTimeout, joinTime=joinTime, portEventModuleEnable=portEventModuleEnable, switchIpAddr=switchIpAddr, spanningTreePortEdge=spanningTreePortEdge, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, tacacsLoginAuthTimeout=tacacsLoginAuthTimeout, clockModev1=clockModev1, defaultGateway=defaultGateway, radiusLoginAuthServer=radiusLoginAuthServer, portbaseVlanSettingTable=portbaseVlanSettingTable, startWeek=startWeek, dhcpFunctionTable=dhcpFunctionTable, learnedMulticastQuerierPorts=learnedMulticastQuerierPorts, trunkType=trunkType, turboRingCouplingPortStatus=turboRingCouplingPortStatus, ptpPortEntry=ptpPortEntry, enableGMRP=enableGMRP, parentUuidv1=parentUuidv1, igmpSnoopingSettingEntry=igmpSnoopingSettingEntry, portSpeed=portSpeed, currentUtcOffset=currentUtcOffset, portbaseVlanMemberPorts=portbaseVlanMemberPorts, portDisableModeEntry=portDisableModeEntry, radiusLoginAuthAuthType=radiusLoginAuthAuthType, turboRingCouplingPortChangedTrap=turboRingCouplingPortChangedTrap, dot1xSettingTable=dot1xSettingTable, dhcpServer3=dhcpServer3, sfpTemperature=sfpTemperature, rateLimitedOnTrap=rateLimitedOnTrap, bcastStormIncludeUnkonwnMcastUcast=bcastStormIncludeUnkonwnMcastUcast, dot1xReauth=dot1xReauth, masterStatusRing2=masterStatusRing2, accessibleIpEntry=accessibleIpEntry, dot1xReauthEntry=dot1xReauthEntry, portMDI=portMDI, varPoEWarningTrap=varPoEWarningTrap, portFixedVid=portFixedVid, portAccessControlEntry=portAccessControlEntry, brokenStatusRing2=brokenStatusRing2, diIndex=diIndex, trunkSettingEntry=trunkSettingEntry, portAccessControlAddress=portAccessControlAddress, dot1xReauthEnable=dot1xReauthEnable, circuitID=circuitID, logAnnounceInterval=logAnnounceInterval, fixedMulticastQuerierPorts=fixedMulticastQuerierPorts, enableFactoryDefault=enableFactoryDefault, couplingMode=couplingMode, multicastFastForwarding=multicastFastForwarding, varRateLimitedOnTrap=varRateLimitedOnTrap, turboRingV2Ring2=turboRingV2Ring2, accessibleIpStatus=accessibleIpStatus, disableLocatorLEDTime=disableLocatorLEDTime, option82ValueDisplay=option82ValueDisplay, PortList=PortList, accessibleIpAddress=accessibleIpAddress, enableAutoIpConfig=enableAutoIpConfig, portEntry=portEntry, startHour=startHour, trunkSettingTable=trunkSettingTable, turboRingMasterSetup=turboRingMasterSetup, offsetHours=offsetHours, turboRingPortEntry=turboRingPortEntry, monitor=monitor, coupling1stPortStatus=coupling1stPortStatus, emailWarningMailServer=emailWarningMailServer, tosMappingEntry=tosMappingEntry, lineSwapRecovery=lineSwapRecovery, joinedHybridPorts=joinedHybridPorts, sysFileUpdate=sysFileUpdate, monitorDiTable=monitorDiTable, turboRingPortDesignatedPort=turboRingPortDesignatedPort, spanningTreeRoot=spanningTreeRoot, dataBaseOption=dataBaseOption, protocolOfRedundancySetup=protocolOfRedundancySetup, staticMulticast=staticMulticast, tacacsLoginAuthSharedKey=tacacsLoginAuthSharedKey, dot1x=dot1x, loopProtection=loopProtection, meanPathDelayv1=meanPathDelayv1, rdnt1stPortStatusRing1=rdnt1stPortStatusRing1, eventlogTable=eventlogTable, trunkPort=trunkPort, turboRingV2Ring1=turboRingV2Ring1, mibNotificationsPrefix=mibNotificationsPrefix, enableWebConfig=enableWebConfig, transport=transport, leap61=leap61, eventlogEntry=eventlogEntry, querierQueryInterval=querierQueryInterval, enableLLDP=enableLLDP, varpower2Trap=varpower2Trap, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, cosTag=cosTag, dot1xSettingEntry=dot1xSettingEntry, tosMappingTable=tosMappingTable, trap2ServerAddr=trap2ServerAddr, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, telnetEnable=telnetEnable, snmpInformEnable=snmpInformEnable, startMonth=startMonth, trunkStatus=trunkStatus, abc02AutoExportConfig=abc02AutoExportConfig, lldpSetting=lldpSetting, userLoginSetting=userLoginSetting, monitorSFPEntry=monitorSFPEntry, preferMasterv1=preferMasterv1, sfpPort=sfpPort, rdnt1stPortRing1=rdnt1stPortRing1, portAccessControlPortNo=portAccessControlPortNo, enableIgmpSnooping=enableIgmpSnooping, webTimeout=webTimeout, spanningTreePortStatus=spanningTreePortStatus, gmrpEntry=gmrpEntry, switchLocator=switchLocator, mfb=mfb, totalMemory=totalMemory, turboChainPort1PartnerBridge=turboChainPort1PartnerBridge, eventlogEvent=eventlogEvent, turboRingPortDesignatedBridge=turboRingPortDesignatedBridge, syslogServer3port=syslogServer3port, staticPortLockPort=staticPortLockPort, leap59=leap59, turboRingPortStatus=turboRingPortStatus, localArbTime=localArbTime, qosPortTable=qosPortTable, snmpTrap2Community=snmpTrap2Community, turboRingEnableCoupling=turboRingEnableCoupling, tosMappedPriority=tosMappedPriority, multicastFiltering=multicastFiltering, staticPortLockStatus=staticPortLockStatus, staticMulticastEntry=staticMulticastEntry, radiusLoginAuthPort=radiusLoginAuthPort, configChangeTrap=configChangeTrap, enableNTPServer=enableNTPServer, varturboRingMasterMismatchTrap=varturboRingMasterMismatchTrap, monitorRxTraffic=monitorRxTraffic, setDevIpIndex=setDevIpIndex, turboChainPort2PartnerBridge=turboChainPort2PartnerBridge, vlanPortSettingEntry=vlanPortSettingEntry, sysDateTime=sysDateTime, abc02Status=abc02Status, turboRingV2Coupling=turboRingV2Coupling, joinedAccessPorts=joinedAccessPorts, bcastStormIncludeMcast=bcastStormIncludeMcast, option82Type=option82Type, leaveAllTime=leaveAllTime, systemEventSeverity=systemEventSeverity, spanningTreeHelloTime=spanningTreeHelloTime, swTraps=swTraps, cosMappingTable=cosMappingTable, accessibleIpNetMask=accessibleIpNetMask, powerConsumption=powerConsumption, telnetPort=telnetPort, trafficPrioritization=trafficPrioritization, gmrpFixedPorts=gmrpFixedPorts, enableTelnetConsole=enableTelnetConsole, turboChainPort1Status=turboChainPort1Status, tftpUpdate=tftpUpdate, staticMulticastTable=staticMulticastTable, priority1=priority1, memoryUsage=memoryUsage, portEventSeverity=portEventSeverity, networkSetting=networkSetting, coupling2ndPortStatus=coupling2ndPortStatus, poeWarningTrap=poeWarningTrap, trafficOverloadTrap=trafficOverloadTrap, portEnable=portEnable, monitorDirection=monitorDirection, vlanType=vlanType, mirroringPort=mirroringPort, spanningTreePortCost=spanningTreePortCost, turboRingControlPortStatus=turboRingControlPortStatus, broadcastStormProtection=broadcastStormProtection, monitorLinkStatus=monitorLinkStatus, staticMulticastStatus=staticMulticastStatus, eventlogDate=eventlogDate, varusbWarningTrap=varusbWarningTrap, rdnt2ndPortRing1=rdnt2ndPortRing1, sslPort=sslPort, logMinPdelayReqInterval=logMinPdelayReqInterval, couplingEnable=couplingEnable, uiVersion=uiVersion, managementInterface=managementInterface, timeSetting=timeSetting, endDay=endDay, portDesc=portDesc, tosClass=tosClass, gmrpSettingEntry=gmrpSettingEntry, ptpv2Setting=ptpv2Setting, portAccessControlTable=portAccessControlTable, dnsServer2IpAddr=dnsServer2IpAddr, spanningTreeMaxAge=spanningTreeMaxAge, ptpv1Status=ptpv1Status, turboRingRdntPort2=turboRingRdntPort2, leaveTime=leaveTime, timeServer2=timeServer2, logPathName=logPathName, enableEtherNetIP=enableEtherNetIP, daylightSaving=daylightSaving, offsetToMasterv1=offsetToMasterv1, staticMulticastAddress=staticMulticastAddress, mfbSettingTable=mfbSettingTable, PYSNMP_MODULE_ID=iks6726A, moxa=moxa, priority2=priority2, turboChainRole=turboChainRole, systemEventSettingsEntry=systemEventSettingsEntry, sshPort=sshPort, modbusTCPSetting=modbusTCPSetting, radiusServerSetting=radiusServerSetting, masterStatusRing1=masterStatusRing1, ptpPortStatus=ptpPortStatus, dhcpServer4=dhcpServer4, tftpServer=tftpServer, turboRingPortIndex=turboRingPortIndex, iks6726A=iks6726A, syslogServer1port=syslogServer1port, switchModel=switchModel, setDevIpPresentBy=setDevIpPresentBy, vartrafficOverloadTrap=vartrafficOverloadTrap, abc02AutoImportConfig=abc02AutoImportConfig, ptpTimescale=ptpTimescale, varpower1Trap=varpower1Trap, dot1x2ndRadiusServer=dot1x2ndRadiusServer, ptpv2Status=ptpv2Status, coupling2ndPort=coupling2ndPort)
mibBuilder.exportSymbols("MOXA-IKS6726A-MIB", gmrp=gmrp, grandmasterPriority1=grandmasterPriority1, option82Value=option82Value, unicastFilterBehavior=unicastFilterBehavior, trunkIndex=trunkIndex, cpuLoading5s=cpuLoading5s, turboChain=turboChain, staticPortLock=staticPortLock, systemEventSettingsTable=systemEventSettingsTable, grandmasterPriority2=grandmasterPriority2, ringIndexRing1=ringIndexRing1, trunkEntry=trunkEntry, meanPathDelay=meanPathDelay, vlanTable=vlanTable, dhcpRelayAgentSetting=dhcpRelayAgentSetting, dhcpServer1=dhcpServer1, eventlogUptime=eventlogUptime, sfpModelName=sfpModelName, queuingMechanism=queuingMechanism, diagnosis=diagnosis, portbaseVlanSettingEntry=portbaseVlanSettingEntry, ringEnableRing1=ringEnableRing1, targetPort=targetPort, endMonth=endMonth, turboRingRdntPort1=turboRingRdntPort1, snmpReadCommunity=snmpReadCommunity, rdnt2ndPortRing2=rdnt2ndPortRing2, offsetToMaster=offsetToMaster, portPriority=portPriority, power2Trap=power2Trap, option82Setting=option82Setting, switchIpMask=switchIpMask, enableQuerier=enableQuerier, timeServer1=timeServer1, masterSetupRing1=masterSetupRing1, eventSettings=eventSettings, enablePtp=enablePtp, systemEventName=systemEventName, tosMapping=tosMapping, varredundancyTopologyChangedTrap=varredundancyTopologyChangedTrap, announceReceiptTimeout=announceReceiptTimeout, usedMemory=usedMemory, setDeviceIp=setDeviceIp, cosMappingEntry=cosMappingEntry, parentIdentity=parentIdentity, setDevIpTable=setDevIpTable, grandmasterClockClass=grandmasterClockClass, cpuLoading30s=cpuLoading30s, tacacsServerSetting=tacacsServerSetting, gmrpLearnedPorts=gmrpLearnedPorts, trunkMemberPorts=trunkMemberPorts, syncIntervalv1=syncIntervalv1, varPortLoopDetectedTrap=varPortLoopDetectedTrap, rdnt1stPortStatusRing2=rdnt1stPortStatusRing2, emailWarning=emailWarning, monitorSFPTable=monitorSFPTable, grandmasterIdentity=grandmasterIdentity, ingressLimitRate=ingressLimitRate, profinetioSetting=profinetioSetting, portEventTrafficThreshold=portEventTrafficThreshold, cosMapping=cosMapping, mirroring=mirroring, igmpSnoopingSettingTable=igmpSnoopingSettingTable, systemEventSupport=systemEventSupport, emailService=emailService, accessibleIP=accessibleIP, redundancyTopologyChangedTrap=redundancyTopologyChangedTrap, snmpInformRetries=snmpInformRetries, calibratePeriod=calibratePeriod, trunkTable=trunkTable, igmpSnooping=igmpSnooping, varturboRingMasterChangedTrap=varturboRingMasterChangedTrap, sfpVoltage=sfpVoltage, portEventSettingsEntry=portEventSettingsEntry, egressLimit=egressLimit, portIndex=portIndex, mfbSettingEntry=mfbSettingEntry, monitorFDXFlowCtrl=monitorFDXFlowCtrl, turboChainPort1=turboChainPort1, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, designatedMasterRing1=designatedMasterRing1, dot1xSameAsAuthServer=dot1xSameAsAuthServer, eventlog=eventlog, varturboRingCouplingPortChangedTrap=varturboRingCouplingPortChangedTrap, backupMediaSetting=backupMediaSetting, option82Enable=option82Enable, eventlogBootup=eventlogBootup, setDevIpDedicatedIp=setDevIpDedicatedIp, vlanId=vlanId, syncInterval=syncInterval, portDisableMode=portDisableMode, turboChainPort2Status=turboChainPort2Status, enableAccessibleIP=enableAccessibleIP, ringIndexRing2=ringIndexRing2, localLeap59=localLeap59, portAccessControlStatus=portAccessControlStatus, turboRingBrokenStatus=turboRingBrokenStatus, cosMappedPriority=cosMappedPriority, portVlanType=portVlanType, confPathName=confPathName, vlan=vlan, numberOfPorts=numberOfPorts, portFixedVidUntag=portFixedVidUntag, normalModeRateLimitingTable=normalModeRateLimitingTable, spanningTreeTable=spanningTreeTable, syslogServer1=syslogServer1, portEventSettingsTable=portEventSettingsTable, portTable=portTable, rdnt2ndPortStatusRing2=rdnt2ndPortStatusRing2, turboChainPort2=turboChainPort2, ingressLimit=ingressLimit, masterSetupRing2=masterSetupRing2, ieee1588Setting=ieee1588Setting, industrialProtocol=industrialProtocol, enablePtpv1=enablePtpv1, dnsServer1IpAddr=dnsServer1IpAddr, dot1x1stRadiusSharedKey=dot1x1stRadiusSharedKey, firmwareVersion=firmwareVersion, trapVersion=trapVersion, httpPort=httpPort, enableModbusTCP=enableModbusTCP, portTrunking=portTrunking, dot1xRadius=dot1xRadius, stepsRemoved=stepsRemoved, ageTime=ageTime, snmpTrapCommunity=snmpTrapCommunity, ptpPortTable=ptpPortTable, activeProtocolOfRedundancy=activeProtocolOfRedundancy, rdnt2ndPortStatusRing1=rdnt2ndPortStatusRing1, emailWarningSMTPPort=emailWarningSMTPPort, clockStratumv1=clockStratumv1, systemEventIndex=systemEventIndex, security=security, spanningTreeBridgePriority=spanningTreeBridgePriority, enableDot1X=enableDot1X, timesource=timesource, setDevIpCurrentIpofDevice=setDevIpCurrentIpofDevice, vlanPortSettingTable=vlanPortSettingTable, cpuLoading300s=cpuLoading300s, firmwarePathName=firmwarePathName, sfpTxPower=sfpTxPower, ringEnableRing2=ringEnableRing2, syslogServer2port=syslogServer2port, designatedMasterRing2=designatedMasterRing2, portEventActive=portEventActive, portSetting=portSetting, enableOption82=enableOption82, portLoopDetectedTrap=portLoopDetectedTrap, monitorDiEntry=monitorDiEntry, spanningTreeEntry=spanningTreeEntry, portAccessControlAccessStatus=portAccessControlAccessStatus, rateLimitingMode=rateLimitingMode, subDomainNamev1=subDomainNamev1, currentUtcOffsetValid=currentUtcOffsetValid, monitorPortTable=monitorPortTable, trunkSettingIndex=trunkSettingIndex, dhcpRetryPeriods=dhcpRetryPeriods, turboRingPortTable=turboRingPortTable, rateLimiting=rateLimiting, tacacsLoginAuthPort=tacacsLoginAuthPort, enableGlobalIgmpSnooping=enableGlobalIgmpSnooping, dot1xReauthPortIndex=dot1xReauthPortIndex, managementVlanId=managementVlanId, portEventEnable=portEventEnable, syslogServer2=syslogServer2, dot1xReauthTable=dot1xReauthTable, commRedundancy=commRedundancy, setDevIpEntry=setDevIpEntry, clockMode=clockMode, filterBehavior=filterBehavior, consoleLoginMode=consoleLoginMode, localUtcOffsetValid=localUtcOffsetValid, localPtpTimescale=localPtpTimescale, syslogSetting=syslogSetting, qosPortEntry=qosPortEntry, portDisableModeTable=portDisableModeTable, spanningTreePortPriority=spanningTreePortPriority, monitorTxTraffic=monitorTxTraffic, radiusLoginAuthTimeout=radiusLoginAuthTimeout, eventlogTime=eventlogTime, lldpMSGInterval=lldpMSGInterval, eventlogIndex=eventlogIndex, spanningTreeIndex=spanningTreeIndex, monitorPortEntry=monitorPortEntry, eipSetting=eipSetting, portEventIndex=portEventIndex, ptpPortIndex=ptpPortIndex, power1InputStatus=power1InputStatus, turboRingCouplingPort=turboRingCouplingPort, enableGvrp=enableGvrp, turboRingMasterMismatchTrap=turboRingMasterMismatchTrap, ufbIncludeUnkonwnUcast=ufbIncludeUnkonwnUcast, dot1x1stRadiusServer=dot1x1stRadiusServer, syslogServer3=syslogServer3, dot1x1stRadiusPort=dot1x1stRadiusPort, portEventTrafficDuration=portEventTrafficDuration, eventlogClear=eventlogClear, clockIdentifierv1=clockIdentifierv1, blinkingLocatorLED=blinkingLocatorLED, portDisableModePeriod=portDisableModePeriod, tacacsLoginAuthAuthType=tacacsLoginAuthAuthType, varLLDPChgTrap=varLLDPChgTrap, localUtcOffset=localUtcOffset, systemEventModuleEnable=systemEventModuleEnable, sshEnable=sshEnable, userLoginServer=userLoginServer, power2InputStatus=power2InputStatus, vlanEntry=vlanEntry, monitorTraffic=monitorTraffic, staticPortLockAddress=staticPortLockAddress, portFDXFlowCtrl=portFDXFlowCtrl, turboRingMaster=turboRingMaster, ptpv1Setting=ptpv1Setting, domainNumber=domainNumber, lldpChgTrap=lldpChgTrap, portName=portName, clockClass=clockClass, grandMasterUuidv1=grandMasterUuidv1, coupling1stPort=coupling1stPort, ptpPortEnable=ptpPortEnable, diInputStatus=diInputStatus, turboRingV2=turboRingV2, inspectTos=inspectTos, enableWarmStart=enableWarmStart, localLeap61=localLeap61, normalModeRateLimitingEntry=normalModeRateLimitingEntry, qosClassification=qosClassification, clockSource=clockSource, logMinDelayReqInterval=logMinDelayReqInterval, joinedTrunkPorts=joinedTrunkPorts, startDay=startDay, gmrpMulticastGroup=gmrpMulticastGroup, tacacsLoginAuthServer=tacacsLoginAuthServer, garpSetting=garpSetting, staticMulticastPorts=staticMulticastPorts, dot1x2ndRadiusSharedKey=dot1x2ndRadiusSharedKey, dhcpRetryTimes=dhcpRetryTimes, sfpRxPower=sfpRxPower, portAccessControl=portAccessControl, dot1x2ndRadiusPort=dot1x2ndRadiusPort, sslEnable=sslEnable, brokenStatusRing1=brokenStatusRing1, httpEnable=httpEnable, swMgmt=swMgmt, monitorAutoMDI=monitorAutoMDI, turboRingControlPort=turboRingControlPort, accessibleIpTable=accessibleIpTable, dhcpServer2=dhcpServer2, industrialEthernet=industrialEthernet, spanningTreeForwardingDelay=spanningTreeForwardingDelay, portDefaultVid=portDefaultVid, freeMemory=freeMemory, monitorSpeed=monitorSpeed, grandmasterClockAccuracy=grandmasterClockAccuracy)
mibBuilder.exportSymbols("MOXA-IKS6726A-MIB", )
