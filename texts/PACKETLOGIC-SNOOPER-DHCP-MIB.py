#
# PySNMP MIB module PACKETLOGIC-SNOOPER-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/procera/PACKETLOGIC-SNOOPER-DHCP-MIB
# Produced by pysmi-1.1.8 at Thu Sep 15 09:18:17 2022
# On host fv-az343-490 platform Linux version 5.15.0-1019-azure by user runner
# Using Python version 3.10.6 (main, Aug  3 2022, 07:09:11) [GCC 9.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
snoopers, = mibBuilder.importSymbols("PACKETLOGIC-MIB", "snoopers")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, IpAddress, NotificationType, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Bits, ObjectIdentity, MibIdentifier, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "iso", "Counter64")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
dhcp = ModuleIdentity((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1))
dhcp.setRevisions(('2019-09-12 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dhcp.setRevisionsDescriptions((' Latest version at the revision date for version GET VERSION HERE',))
if mibBuilder.loadTexts: dhcp.setLastUpdated('201909121500Z')
if mibBuilder.loadTexts: dhcp.setOrganization('Procera Networks, Inc.')
if mibBuilder.loadTexts: dhcp.setContactInfo('support@proceranetworks.com')
if mibBuilder.loadTexts: dhcp.setDescription('MIB for dhcp snoopers')
dhcpTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1), )
if mibBuilder.loadTexts: dhcpTable.setStatus('current')
if mibBuilder.loadTexts: dhcpTable.setDescription('Conceptual Table')
dhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpEntryIndex"))
if mibBuilder.loadTexts: dhcpEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpEntry.setDescription('Conceptual Table')
dhcpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dhcpEntryIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpEntryIndex.setDescription('Unique Row Index for Conceptual Table')
dhcpRequestsInQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1))
dhcpRequestsInQueueVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueVal.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueVal.setDescription('Queued requests')
dhcpRequestsInQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueMax.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueMax.setDescription('Queued requests')
dhcpRequestsInQueueLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelTable.setDescription('Table for dhcpRequestsInQueue')
dhcpRequestsInQueueLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpRequestsInQueueLevelName"))
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelEntry.setDescription('Table entry for dhcpRequestsInQueue')
dhcpRequestsInQueueLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelName.setDescription('Table entry display string for dhcpRequestsInQueue')
dhcpRequestsInQueueLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelVal.setDescription('Table entry attribute for dhcpRequestsInQueue')
dhcpRequestsInQueueLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelMax.setDescription('Table entry attribute for dhcpRequestsInQueue')
dhcpDynAddFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2))
dhcpDynAddFailuresVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresVal.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresVal.setDescription('dyn_add failures')
dhcpDynAddFailuresMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresMom.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresMom.setDescription('dyn_add failures')
dhcpDynAddFailuresMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresMax.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresMax.setDescription('dyn_add failures')
dhcpDynAddFailuresLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelTable.setDescription('Table for dhcpDynAddFailures')
dhcpDynAddFailuresLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpDynAddFailuresLevelName"))
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelEntry.setDescription('Table entry for dhcpDynAddFailures')
dhcpDynAddFailuresLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelName.setDescription('Table entry display string for dhcpDynAddFailures')
dhcpDynAddFailuresLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelVal.setDescription('Table entry attribute for dhcpDynAddFailures')
dhcpDynAddFailuresLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMom.setDescription('Table entry attribute for dhcpDynAddFailures')
dhcpDynAddFailuresLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMax.setDescription('Table entry attribute for dhcpDynAddFailures')
dhcpPLDBReconnects = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3))
dhcpPLDBReconnectsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsVal.setDescription('PLDB reconnects')
dhcpPLDBReconnectsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsMax.setDescription('PLDB reconnects')
dhcpPLDBReconnectsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelTable.setDescription('Table for dhcpPLDBReconnects')
dhcpPLDBReconnectsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBReconnectsLevelName"))
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelEntry.setDescription('Table entry for dhcpPLDBReconnects')
dhcpPLDBReconnectsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelName.setDescription('Table entry display string for dhcpPLDBReconnects')
dhcpPLDBReconnectsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelVal.setDescription('Table entry attribute for dhcpPLDBReconnects')
dhcpPLDBReconnectsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelMax.setDescription('Table entry attribute for dhcpPLDBReconnects')
dhcpPLDBUptime = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4))
dhcpPLDBUptimeVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBUptimeVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBUptimeVal.setDescription('PLDB conn uptime')
dhcpPLDBUptimeLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelTable.setDescription('Table for dhcpPLDBUptime')
dhcpPLDBUptimeLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBUptimeLevelName"))
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelEntry.setDescription('Table entry for dhcpPLDBUptime')
dhcpPLDBUptimeLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelName.setDescription('Table entry display string for dhcpPLDBUptime')
dhcpPLDBUptimeLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelVal.setDescription('Table entry attribute for dhcpPLDBUptime')
dhcpPLDBCommits = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5))
dhcpPLDBCommitsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsVal.setDescription('PLDB commits')
dhcpPLDBCommitsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsMom.setDescription('PLDB commits')
dhcpPLDBCommitsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsMax.setDescription('PLDB commits')
dhcpPLDBCommitsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelTable.setDescription('Table for dhcpPLDBCommits')
dhcpPLDBCommitsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBCommitsLevelName"))
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelEntry.setDescription('Table entry for dhcpPLDBCommits')
dhcpPLDBCommitsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelName.setDescription('Table entry display string for dhcpPLDBCommits')
dhcpPLDBCommitsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelVal.setDescription('Table entry attribute for dhcpPLDBCommits')
dhcpPLDBCommitsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMom.setDescription('Table entry attribute for dhcpPLDBCommits')
dhcpPLDBCommitsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMax.setDescription('Table entry attribute for dhcpPLDBCommits')
dhcpPLDReconnects = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6))
dhcpPLDReconnectsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsVal.setDescription('PLd reconnects')
dhcpPLDReconnectsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsMax.setDescription('PLd reconnects')
dhcpPLDReconnectsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4), )
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelTable.setDescription('Table for dhcpPLDReconnects')
dhcpPLDReconnectsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDReconnectsLevelName"))
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelEntry.setDescription('Table entry for dhcpPLDReconnects')
dhcpPLDReconnectsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelName.setDescription('Table entry display string for dhcpPLDReconnects')
dhcpPLDReconnectsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelVal.setDescription('Table entry attribute for dhcpPLDReconnects')
dhcpPLDReconnectsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelMax.setDescription('Table entry attribute for dhcpPLDReconnects')
dhcpPLDUptime = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7))
dhcpPLDUptimeVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDUptimeVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDUptimeVal.setDescription('PLd conn uptime')
dhcpPLDUptimeLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: dhcpPLDUptimeLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDUptimeLevelTable.setDescription('Table for dhcpPLDUptime')
dhcpPLDUptimeLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDUptimeLevelName"))
if mibBuilder.loadTexts: dhcpPLDUptimeLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDUptimeLevelEntry.setDescription('Table entry for dhcpPLDUptime')
dhcpPLDUptimeLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDUptimeLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDUptimeLevelName.setDescription('Table entry display string for dhcpPLDUptime')
dhcpPLDUptimeLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDUptimeLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDUptimeLevelVal.setDescription('Table entry attribute for dhcpPLDUptime')
dhcpPLDOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8))
dhcpPLDOperationsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsVal.setDescription('PLd operations')
dhcpPLDOperationsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsMom.setDescription('PLd operations')
dhcpPLDOperationsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsMax.setDescription('PLd operations')
dhcpPLDOperationsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4), )
if mibBuilder.loadTexts: dhcpPLDOperationsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelTable.setDescription('Table for dhcpPLDOperations')
dhcpPLDOperationsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDOperationsLevelName"))
if mibBuilder.loadTexts: dhcpPLDOperationsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelEntry.setDescription('Table entry for dhcpPLDOperations')
dhcpPLDOperationsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDOperationsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelName.setDescription('Table entry display string for dhcpPLDOperations')
dhcpPLDOperationsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelVal.setDescription('Table entry attribute for dhcpPLDOperations')
dhcpPLDOperationsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMom.setDescription('Table entry attribute for dhcpPLDOperations')
dhcpPLDOperationsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMax.setDescription('Table entry attribute for dhcpPLDOperations')
dhcpPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9))
dhcpPacketsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsVal.setDescription('Packets')
dhcpPacketsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsMom.setDescription('Packets')
dhcpPacketsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsMax.setDescription('Packets')
dhcpPacketsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4), )
if mibBuilder.loadTexts: dhcpPacketsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelTable.setDescription('Table for dhcpPackets')
dhcpPacketsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsLevelName"))
if mibBuilder.loadTexts: dhcpPacketsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelEntry.setDescription('Table entry for dhcpPackets')
dhcpPacketsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelName.setDescription('Table entry display string for dhcpPackets')
dhcpPacketsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelVal.setDescription('Table entry attribute for dhcpPackets')
dhcpPacketsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelMom.setDescription('Table entry attribute for dhcpPackets')
dhcpPacketsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsLevelMax.setDescription('Table entry attribute for dhcpPackets')
dhcpUnparsablePackets = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10))
dhcpUnparsablePacketsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsVal.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsVal.setDescription('Unparsable packets')
dhcpUnparsablePacketsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsMom.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsMom.setDescription('Unparsable packets')
dhcpUnparsablePacketsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsMax.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsMax.setDescription('Unparsable packets')
dhcpUnparsablePacketsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4), )
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelTable.setDescription('Table for dhcpUnparsablePackets')
dhcpUnparsablePacketsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpUnparsablePacketsLevelName"))
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelEntry.setDescription('Table entry for dhcpUnparsablePackets')
dhcpUnparsablePacketsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelName.setDescription('Table entry display string for dhcpUnparsablePackets')
dhcpUnparsablePacketsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelVal.setDescription('Table entry attribute for dhcpUnparsablePackets')
dhcpUnparsablePacketsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMom.setDescription('Table entry attribute for dhcpUnparsablePackets')
dhcpUnparsablePacketsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMax.setDescription('Table entry attribute for dhcpUnparsablePackets')
dhcpPacketsReq = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11))
dhcpPacketsReqVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqVal.setDescription('Packets (DHCPREQUEST)')
dhcpPacketsReqMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqMom.setDescription('Packets (DHCPREQUEST)')
dhcpPacketsReqMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqMax.setDescription('Packets (DHCPREQUEST)')
dhcpPacketsReqLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4), )
if mibBuilder.loadTexts: dhcpPacketsReqLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelTable.setDescription('Table for dhcpPacketsReq')
dhcpPacketsReqLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsReqLevelName"))
if mibBuilder.loadTexts: dhcpPacketsReqLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelEntry.setDescription('Table entry for dhcpPacketsReq')
dhcpPacketsReqLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsReqLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelName.setDescription('Table entry display string for dhcpPacketsReq')
dhcpPacketsReqLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelVal.setDescription('Table entry attribute for dhcpPacketsReq')
dhcpPacketsReqLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelMom.setDescription('Table entry attribute for dhcpPacketsReq')
dhcpPacketsReqLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsReqLevelMax.setDescription('Table entry attribute for dhcpPacketsReq')
dhcpPacketsAck = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12))
dhcpPacketsAckVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckVal.setDescription('Packets (ACK)')
dhcpPacketsAckMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckMom.setDescription('Packets (ACK)')
dhcpPacketsAckMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckMax.setDescription('Packets (ACK)')
dhcpPacketsAckLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4), )
if mibBuilder.loadTexts: dhcpPacketsAckLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelTable.setDescription('Table for dhcpPacketsAck')
dhcpPacketsAckLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsAckLevelName"))
if mibBuilder.loadTexts: dhcpPacketsAckLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelEntry.setDescription('Table entry for dhcpPacketsAck')
dhcpPacketsAckLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsAckLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelName.setDescription('Table entry display string for dhcpPacketsAck')
dhcpPacketsAckLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelVal.setDescription('Table entry attribute for dhcpPacketsAck')
dhcpPacketsAckLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelMom.setDescription('Table entry attribute for dhcpPacketsAck')
dhcpPacketsAckLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsAckLevelMax.setDescription('Table entry attribute for dhcpPacketsAck')
dhcpPacketsIgnored = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13))
dhcpPacketsIgnoredVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredVal.setDescription('Ignored packets')
dhcpPacketsIgnoredMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredMom.setDescription('Ignored packets')
dhcpPacketsIgnoredMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredMax.setDescription('Ignored packets')
dhcpPacketsIgnoredLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4), )
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelTable.setDescription('Table for dhcpPacketsIgnored')
dhcpPacketsIgnoredLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsIgnoredLevelName"))
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelEntry.setDescription('Table entry for dhcpPacketsIgnored')
dhcpPacketsIgnoredLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelName.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelName.setDescription('Table entry display string for dhcpPacketsIgnored')
dhcpPacketsIgnoredLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelVal.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelVal.setDescription('Table entry attribute for dhcpPacketsIgnored')
dhcpPacketsIgnoredLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMom.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMom.setDescription('Table entry attribute for dhcpPacketsIgnored')
dhcpPacketsIgnoredLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMax.setStatus('current')
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMax.setDescription('Table entry attribute for dhcpPacketsIgnored')
mibBuilder.exportSymbols("PACKETLOGIC-SNOOPER-DHCP-MIB", dhcpPacketsIgnoredLevelMax=dhcpPacketsIgnoredLevelMax, dhcpDynAddFailuresVal=dhcpDynAddFailuresVal, dhcpDynAddFailuresLevelName=dhcpDynAddFailuresLevelName, dhcpUnparsablePacketsVal=dhcpUnparsablePacketsVal, dhcpPacketsLevelTable=dhcpPacketsLevelTable, dhcpEntryIndex=dhcpEntryIndex, dhcpPacketsReqLevelMax=dhcpPacketsReqLevelMax, dhcpRequestsInQueue=dhcpRequestsInQueue, dhcpPLDBReconnectsLevelVal=dhcpPLDBReconnectsLevelVal, dhcpPacketsAckLevelTable=dhcpPacketsAckLevelTable, dhcpPLDReconnectsLevelMax=dhcpPLDReconnectsLevelMax, dhcpPLDBUptimeLevelTable=dhcpPLDBUptimeLevelTable, dhcpPLDReconnectsMax=dhcpPLDReconnectsMax, dhcpPacketsLevelVal=dhcpPacketsLevelVal, dhcpPLDReconnects=dhcpPLDReconnects, dhcpPacketsReqMax=dhcpPacketsReqMax, dhcpPLDBUptimeVal=dhcpPLDBUptimeVal, dhcpPLDBUptimeLevelVal=dhcpPLDBUptimeLevelVal, dhcpUnparsablePacketsMax=dhcpUnparsablePacketsMax, dhcpDynAddFailuresLevelMax=dhcpDynAddFailuresLevelMax, dhcpPacketsAckMax=dhcpPacketsAckMax, dhcpPacketsLevelEntry=dhcpPacketsLevelEntry, dhcpPLDOperationsMom=dhcpPLDOperationsMom, dhcpPacketsReqVal=dhcpPacketsReqVal, dhcpPacketsVal=dhcpPacketsVal, dhcpPLDOperationsLevelVal=dhcpPLDOperationsLevelVal, dhcpPLDUptimeLevelVal=dhcpPLDUptimeLevelVal, dhcpPLDBCommitsVal=dhcpPLDBCommitsVal, dhcpEntry=dhcpEntry, dhcpPLDBCommitsLevelMax=dhcpPLDBCommitsLevelMax, dhcpUnparsablePacketsLevelEntry=dhcpUnparsablePacketsLevelEntry, dhcpPLDBCommitsMom=dhcpPLDBCommitsMom, dhcpPacketsReqLevelMom=dhcpPacketsReqLevelMom, dhcpPLDBCommitsLevelVal=dhcpPLDBCommitsLevelVal, dhcpPLDBCommitsLevelEntry=dhcpPLDBCommitsLevelEntry, dhcpDynAddFailuresLevelTable=dhcpDynAddFailuresLevelTable, dhcpPacketsIgnoredMax=dhcpPacketsIgnoredMax, dhcpPLDUptimeVal=dhcpPLDUptimeVal, dhcpPLDBUptimeLevelEntry=dhcpPLDBUptimeLevelEntry, dhcpPacketsLevelMax=dhcpPacketsLevelMax, dhcpPacketsAckVal=dhcpPacketsAckVal, dhcpRequestsInQueueLevelTable=dhcpRequestsInQueueLevelTable, dhcpPLDBReconnectsMax=dhcpPLDBReconnectsMax, dhcpUnparsablePacketsLevelTable=dhcpUnparsablePacketsLevelTable, dhcpPacketsReqLevelVal=dhcpPacketsReqLevelVal, dhcpPLDUptimeLevelName=dhcpPLDUptimeLevelName, dhcpPacketsAckLevelEntry=dhcpPacketsAckLevelEntry, dhcpUnparsablePacketsLevelVal=dhcpUnparsablePacketsLevelVal, dhcpPLDReconnectsLevelEntry=dhcpPLDReconnectsLevelEntry, dhcpPackets=dhcpPackets, dhcpPLDOperationsLevelEntry=dhcpPLDOperationsLevelEntry, dhcpPacketsMax=dhcpPacketsMax, dhcpRequestsInQueueLevelEntry=dhcpRequestsInQueueLevelEntry, dhcpPLDBReconnectsLevelTable=dhcpPLDBReconnectsLevelTable, dhcpUnparsablePacketsLevelMom=dhcpUnparsablePacketsLevelMom, dhcpTable=dhcpTable, dhcpPacketsAck=dhcpPacketsAck, dhcpPLDUptimeLevelTable=dhcpPLDUptimeLevelTable, dhcpPacketsReqMom=dhcpPacketsReqMom, dhcpPacketsIgnoredLevelTable=dhcpPacketsIgnoredLevelTable, dhcpPacketsIgnoredMom=dhcpPacketsIgnoredMom, dhcpPacketsAckMom=dhcpPacketsAckMom, dhcpPacketsIgnoredLevelEntry=dhcpPacketsIgnoredLevelEntry, dhcpPLDReconnectsVal=dhcpPLDReconnectsVal, dhcpPLDBUptime=dhcpPLDBUptime, dhcpDynAddFailuresLevelMom=dhcpDynAddFailuresLevelMom, dhcpPLDUptime=dhcpPLDUptime, dhcpPacketsLevelName=dhcpPacketsLevelName, dhcpPacketsIgnored=dhcpPacketsIgnored, dhcpPLDOperationsLevelMom=dhcpPLDOperationsLevelMom, dhcp=dhcp, dhcpPacketsReq=dhcpPacketsReq, dhcpPLDUptimeLevelEntry=dhcpPLDUptimeLevelEntry, dhcpRequestsInQueueMax=dhcpRequestsInQueueMax, dhcpPLDReconnectsLevelTable=dhcpPLDReconnectsLevelTable, dhcpPLDOperationsLevelTable=dhcpPLDOperationsLevelTable, dhcpPacketsAckLevelMax=dhcpPacketsAckLevelMax, PYSNMP_MODULE_ID=dhcp, dhcpPLDBCommits=dhcpPLDBCommits, dhcpPLDBReconnectsLevelName=dhcpPLDBReconnectsLevelName, dhcpRequestsInQueueLevelMax=dhcpRequestsInQueueLevelMax, dhcpPLDOperationsMax=dhcpPLDOperationsMax, dhcpPacketsIgnoredLevelVal=dhcpPacketsIgnoredLevelVal, dhcpDynAddFailuresMom=dhcpDynAddFailuresMom, dhcpPLDBCommitsLevelTable=dhcpPLDBCommitsLevelTable, dhcpPacketsReqLevelName=dhcpPacketsReqLevelName, dhcpPLDOperations=dhcpPLDOperations, dhcpDynAddFailuresMax=dhcpDynAddFailuresMax, dhcpPacketsReqLevelEntry=dhcpPacketsReqLevelEntry, dhcpPacketsAckLevelName=dhcpPacketsAckLevelName, dhcpPLDBUptimeLevelName=dhcpPLDBUptimeLevelName, dhcpUnparsablePacketsLevelMax=dhcpUnparsablePacketsLevelMax, dhcpRequestsInQueueLevelName=dhcpRequestsInQueueLevelName, dhcpDynAddFailures=dhcpDynAddFailures, dhcpDynAddFailuresLevelEntry=dhcpDynAddFailuresLevelEntry, dhcpPLDOperationsVal=dhcpPLDOperationsVal, dhcpPacketsLevelMom=dhcpPacketsLevelMom, dhcpRequestsInQueueLevelVal=dhcpRequestsInQueueLevelVal, dhcpPLDOperationsLevelMax=dhcpPLDOperationsLevelMax, dhcpPLDBReconnects=dhcpPLDBReconnects, dhcpPLDBCommitsMax=dhcpPLDBCommitsMax, dhcpPacketsMom=dhcpPacketsMom, dhcpPLDBReconnectsVal=dhcpPLDBReconnectsVal, dhcpPLDBReconnectsLevelMax=dhcpPLDBReconnectsLevelMax, dhcpDynAddFailuresLevelVal=dhcpDynAddFailuresLevelVal, dhcpPLDReconnectsLevelVal=dhcpPLDReconnectsLevelVal, dhcpPacketsIgnoredVal=dhcpPacketsIgnoredVal, dhcpRequestsInQueueVal=dhcpRequestsInQueueVal, dhcpPacketsIgnoredLevelName=dhcpPacketsIgnoredLevelName, dhcpPacketsAckLevelMom=dhcpPacketsAckLevelMom, dhcpPacketsAckLevelVal=dhcpPacketsAckLevelVal, dhcpUnparsablePackets=dhcpUnparsablePackets, dhcpUnparsablePacketsLevelName=dhcpUnparsablePacketsLevelName, dhcpPLDOperationsLevelName=dhcpPLDOperationsLevelName, dhcpPacketsIgnoredLevelMom=dhcpPacketsIgnoredLevelMom, dhcpPLDBCommitsLevelName=dhcpPLDBCommitsLevelName, dhcpUnparsablePacketsMom=dhcpUnparsablePacketsMom, dhcpPLDReconnectsLevelName=dhcpPLDReconnectsLevelName, dhcpPacketsReqLevelTable=dhcpPacketsReqLevelTable, dhcpPLDBReconnectsLevelEntry=dhcpPLDBReconnectsLevelEntry, dhcpPLDBCommitsLevelMom=dhcpPLDBCommitsLevelMom)
